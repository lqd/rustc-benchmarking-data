--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name shared_library src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 -C metadata=95059e69030e49eb -C extra-filename=-95059e69030e49eb --out-dir /usr/home/liquid/tmp/.tmpFEngC3/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmpFEngC3/target/debug/deps --extern lazy_static=/usr/home/liquid/tmp/.tmpFEngC3/target/debug/deps/liblazy_static-d93c3fbc102a1a19.rmeta --extern libc=/usr/home/liquid/tmp/.tmpFEngC3/target/debug/deps/liblibc-6af22c5d4ed4fc5c.rmeta -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-shared_library-0.1.9-Check-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
182,036,346 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   file:function
--------------------------------------------------------------------------------
10,305,124 ( 5.66%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
 5,912,176 ( 3.25%)  ./malloc/malloc.c:_int_malloc
 4,835,679 ( 2.66%)  ./elf/dl-lookup.c:do_lookup_x
 4,825,928 ( 2.65%)  ./malloc/malloc.c:_int_free
 4,141,271 ( 2.27%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
 3,200,616 ( 1.76%)  ./malloc/malloc.c:malloc
 3,129,529 ( 1.72%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
 2,915,891 ( 1.60%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,597,984 ( 1.43%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,437,284 ( 1.34%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,139,033 ( 1.18%)  ./elf/do-rel.h:_dl_relocate_object
 1,420,837 ( 0.78%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 1,379,120 ( 0.76%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
 1,362,217 ( 0.75%)  ???:SetImpliedBits(llvm::FeatureBitset&, llvm::FeatureBitset const&, llvm::ArrayRef<llvm::SubtargetFeatureKV>)
 1,333,315 ( 0.73%)  ./malloc/malloc.c:free
 1,184,937 ( 0.65%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs:<&str as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 1,124,883 ( 0.62%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
 1,120,564 ( 0.62%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
 1,117,285 ( 0.61%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
 1,067,929 ( 0.59%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
 1,029,211 ( 0.57%)  ./malloc/malloc.c:malloc_consolidate
   994,207 ( 0.55%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   864,856 ( 0.48%)  ./elf/dl-lookup.c:check_match
   820,553 ( 0.45%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   750,412 ( 0.41%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   745,773 ( 0.41%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   637,320 ( 0.35%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(&str, rustc_span::symbol::Symbol)>>::insert::<hashbrown::map::make_hasher<&str, &str, rustc_span::symbol::Symbol, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   635,460 ( 0.35%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>)>>::remove_entry::<hashbrown::map::equivalent_key<rustc_span::def_id::DefId, rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>>::{closure#0}>
   631,382 ( 0.35%)  ./malloc/malloc.c:unlink_chunk.constprop.0
   608,944 ( 0.33%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   581,240 ( 0.32%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs:<rustc_span::symbol::Symbol>::intern
   553,335 ( 0.30%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   529,040 ( 0.29%)  ./string/../sysdeps/x86_64/strcmp.S:strcmp
   523,220 ( 0.29%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<rustc_span::symbol::Symbol>::intern
   504,413 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
   483,009 ( 0.27%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
   469,804 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   459,321 ( 0.25%)  ???:llvm::StringMapImpl::LookupBucketFor(llvm::StringRef)
   459,207 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/build_reduced_graph.rs:<rustc_resolve::build_reduced_graph::BuildReducedGraphVisitor>::build_reduced_graph_for_external_crate_res
   431,363 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/imports.rs:<rustc_resolve::Resolver>::try_define
   419,008 ( 0.23%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::HashMap<&str, rustc_span::symbol::Symbol, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::insert
   406,639 ( 0.22%)  ./malloc/malloc.c:realloc
   403,176 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<&str as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   395,905 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
   386,263 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
   381,129 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
   370,646 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   370,646 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   370,646 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   367,727 ( 0.20%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(&str, rustc_span::symbol::Symbol)>>::reserve_rehash::<hashbrown::map::make_hasher<&str, &str, rustc_span::symbol::Symbol, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   364,470 ( 0.20%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core.rs:<indexmap::map::core::Entry<rustc_middle::ty::fast_reject::SimplifiedTypeGen<rustc_span::def_id::DefId>, alloc::vec::Vec<rustc_span::def_id::DefId>>>::or_default
   352,393 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/span_encoding.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   351,937 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   349,662 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::TokenCursor>::next
   345,588 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_u32
   342,884 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump
   340,430 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   338,364 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
   337,254 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs:<rustc_parse::lexer::StringReader>::next_token
   336,420 ( 0.18%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs:<hashbrown::map::HashMap<rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
   332,199 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<rustc_span::hygiene::SyntaxContext as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   327,780 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u64
   323,185 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   316,107 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs:<indexmap::map::core::Entry<rustc_middle::ty::fast_reject::SimplifiedTypeGen<rustc_span::def_id::DefId>, alloc::vec::Vec<rustc_span::def_id::DefId>>>::or_default
   307,720 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTableInner<alloc::alloc::Global>>::prepare_insert_slot
   295,625 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
   292,362 ( 0.16%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_data_structures::ptr_key::PtrKey<rustc_resolve::NameBinding>, &rustc_resolve::ModuleData)>>::insert::<hashbrown::map::make_hasher<rustc_data_structures::ptr_key::PtrKey<rustc_resolve::NameBinding>, rustc_data_structures::ptr_key::PtrKey<rustc_resolve::NameBinding>, &rustc_resolve::ModuleData, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   287,345 ( 0.16%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   284,489 ( 0.16%)  ./malloc/malloc.c:_int_realloc
   282,428 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
   274,568 ( 0.15%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs:<hashbrown::raw::inner::RawTable<usize>>::reserve_rehash::<indexmap::map::core::get_hash<rustc_middle::ty::fast_reject::SimplifiedTypeGen<rustc_span::def_id::DefId>, alloc::vec::Vec<rustc_span::def_id::DefId>>::{closure#0}>
   269,136 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/build_reduced_graph.rs:<rustc_resolve::Resolver>::define::<(rustc_hir::def::Res<rustc_ast::node_id::NodeId>, rustc_middle::ty::Visibility, rustc_span::span_encoding::Span, rustc_span::hygiene::LocalExpnId)>
   265,794 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/codec.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
   260,587 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs:<rustc_parse::lexer::tokentrees::TokenTreesReader>::parse_token_tree
   258,994 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::HashMap<&str, rustc_span::symbol::Symbol, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::insert
   256,452 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs:<rustc_lexer::cursor::Cursor>::advance_token
   240,693 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs:<rustc_ast::tokenstream::Cursor>::next_with_spacing
   240,605 ( 0.13%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
   239,725 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
   233,263 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
   232,992 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core/raw.rs:<indexmap::map::core::IndexMapCore<rustc_middle::ty::fast_reject::SimplifiedTypeGen<rustc_span::def_id::DefId>, alloc::vec::Vec<rustc_span::def_id::DefId>>>::entry
   232,208 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs:<indexmap::map::core::Entry<rustc_resolve::BindingKey, &core::cell::RefCell<rustc_resolve::imports::NameResolution>>>::or_insert_with::<<rustc_resolve::Resolver>::resolution::{closure#0}>
   230,502 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
   225,420 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_str
   225,319 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
   224,851 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs:stacker::remaining_stack
   224,320 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
   223,749 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs:<rustc_ast::tokenstream::Cursor as core::iter::traits::iterator::Iterator>::next
   222,998 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
   221,847 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/table.rs:<rustc_metadata::rmeta::Lazy<rustc_metadata::rmeta::table::Table<rustc_span::def_id::DefIndex, rustc_metadata::rmeta::Lazy<rustc_span::def_id::DefId, ()>>, usize>>::get::<rustc_metadata::creader::CrateMetadataRef>
   221,269 ( 0.12%)  ./stdlib/cxa_finalize.c:__cxa_finalize
   220,198 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/thread/local.rs:rustc_span::SESSION_GLOBALS::FOO::__getit
   216,545 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
   211,109 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/ast.rs:<rustc_ast::ast::Attribute as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   209,730 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::Token as core::clone::Clone>::clone
   206,529 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, ())>>::insert_entry::<hashbrown::map::make_hasher<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   206,055 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/tuple.rs:core::slice::sort::recurse::<rustc_span::def_id::DefId, <[rustc_span::def_id::DefId]>::sort_unstable_by_key<(i64, usize), rustc_trait_selection::traits::specialize::specialization_graph_provider::{closure#0}>::{closure#0}>
   204,590 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_u32
   203,435 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, ())>>::reserve_rehash::<hashbrown::map::make_hasher<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   201,890 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::FieldDef as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   201,588 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/bit.rs:<&str as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   200,485 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
   199,708 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::HashMap<rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
   199,577 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/mod.rs:<rustc_span::symbol::Symbol>::intern
   198,824 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/lib.rs:<rustc_resolve::Resolver>::resolution
   196,549 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, ())>>::insert_entry::<hashbrown::map::make_hasher<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   196,251 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_data_structures::ptr_key::PtrKey<rustc_resolve::NameBinding>, &rustc_resolve::ModuleData)>>::reserve_rehash::<hashbrown::map::make_hasher<rustc_data_structures::ptr_key::PtrKey<rustc_resolve::NameBinding>, rustc_data_structures::ptr_key::PtrKey<rustc_resolve::NameBinding>, &rustc_resolve::ModuleData, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   191,968 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core/raw.rs:<indexmap::map::core::IndexMapCore<rustc_resolve::BindingKey, &core::cell::RefCell<rustc_resolve::imports::NameResolution>>>::entry
   189,956 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::Visibility as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   189,109 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, ())>>::reserve_rehash::<hashbrown::map::make_hasher<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   188,008 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/lazy.rs:<core::lazy::OnceCell<alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile>>>::get_or_init::<<rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}>
   187,992 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   187,345 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<rustc_metadata::creader::CrateMetadataRef>::opt_item_ident
   186,791 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs:<hashbrown::raw::inner::RawTable<usize>>::reserve_rehash::<indexmap::map::core::get_hash<rustc_resolve::BindingKey, &core::cell::RefCell<rustc_resolve::imports::NameResolution>>::{closure#0}>
   184,650 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode::{closure#0}> as rustc_middle::ty::context::InternAs<[rustc_middle::ty::subst::GenericArg], &rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::intern_with::<<rustc_middle::ty::context::TyCtxt>::mk_substs<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode::{closure#0}>>::{closure#0}>
   184,347 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/codec.rs:<&rustc_middle::ty::TyS as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   184,215 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core.rs:<indexmap::map::core::Entry<rustc_resolve::BindingKey, &core::cell::RefCell<rustc_resolve::imports::NameResolution>>>::or_insert_with::<<rustc_resolve::Resolver>::resolution::{closure#0}>
   182,058 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir               

-- line 118 ----------------------------------------
      .               stability: InternedSet<'tcx, attr::Stability>,
      .           
      .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
      .               const_stability: InternedSet<'tcx, attr::ConstStability>,
      .           }
      .           
      .           impl<'tcx> CtxtInterners<'tcx> {
      .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
     17 ( 0.00%)          CtxtInterners {
      .                       arena,
      .                       type_: Default::default(),
      .                       type_list: Default::default(),
      .                       substs: Default::default(),
      .                       region: Default::default(),
      .                       poly_existential_predicates: Default::default(),
      .                       canonical_var_infos: Default::default(),
      .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
      .                       stability: Default::default(),
      .                       const_stability: Default::default(),
      .                   }
      .               }
      .           
      .               /// Interns a type.
      .               #[allow(rustc::usage_of_ty_tykind)]
      .               #[inline(never)]
 96,608 ( 0.05%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
      .                   self.type_
 60,380 ( 0.03%)              .intern(kind, |kind| {
  8,558 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
      .           
      .                           let ty_struct = TyS {
 17,116 ( 0.01%)                      kind,
      .                               flags: flags.flags,
      .                               outer_exclusive_binder: flags.outer_exclusive_binder,
      .                           };
      .           
      .                           Interned(self.arena.alloc(ty_struct))
      .                       })
      .                       .0
108,684 ( 0.06%)      }
      .           
      .               #[inline(never)]
 27,208 ( 0.01%)      fn intern_predicate(
      .                   &self,
      .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
      .               ) -> &'tcx PredicateInner<'tcx> {
      .                   self.predicate
 23,807 ( 0.01%)              .intern(kind, |kind| {
  9,090 ( 0.00%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
      .           
      .                           let predicate_struct = PredicateInner {
      .                               kind,
      .                               flags: flags.flags,
      .                               outer_exclusive_binder: flags.outer_exclusive_binder,
      .                           };
      .           
      .                           Interned(self.arena.alloc(predicate_struct))
      .                       })
      .                       .0
 30,609 ( 0.02%)      }
      .           }
      .           
      .           pub struct CommonTypes<'tcx> {
      .               pub unit: Ty<'tcx>,
      .               pub bool: Ty<'tcx>,
      .               pub char: Ty<'tcx>,
      .               pub isize: Ty<'tcx>,
      .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
      .           /// safely used as a key in the maps of a TypeckResults. For that to be
      .           /// the case, the HirId must have the same `owner` as all the other IDs in
      .           /// this table (signified by `hir_owner`). Otherwise the HirId
      .           /// would be in a different frame of reference and using its `local_id`
      .           /// would result in lookup errors, or worse, in silently wrong data being
      .           /// stored/returned.
      .           #[inline]
      .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
  8,870 ( 0.00%)      if hir_id.owner != hir_owner {
      .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
      .               }
      .           }
      .           
      .           #[cold]
      .           #[inline(never)]
      .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
      .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
      .           }
      .           
      .           impl<'a, V> LocalTableInContext<'a, V> {
      .               pub fn contains_key(&self, id: hir::HirId) -> bool {
      .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.data.contains_key(&id.local_id)
      .               }
      .           
  6,752 ( 0.00%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
  1,363 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
  1,363 ( 0.00%)          self.data.get(&id.local_id)
  5,418 ( 0.00%)      }
      .           
      .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
      .                   self.data.iter()
      .               }
      .           }
      .           
      .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
      .               type Output = V;
      .           
    174 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
      .                   self.get(key).expect("LocalTableInContext: key not found")
    116 ( 0.00%)      }
      .           }
      .           
      .           pub struct LocalTableInContextMut<'a, V> {
      .               hir_owner: LocalDefId,
      .               data: &'a mut ItemLocalMap<V>,
      .           }
      .           
      .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
      .               pub treat_byte_string_as_slice: ItemLocalSet,
      .           
      .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
      .               /// on closure size.
      .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
      .           }
      .           
      .           impl<'tcx> TypeckResults<'tcx> {
    534 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
  6,319 ( 0.00%)          TypeckResults {
      .                       hir_owner,
      .                       type_dependent_defs: Default::default(),
      .                       field_indices: Default::default(),
      .                       user_provided_types: Default::default(),
      .                       user_provided_sigs: Default::default(),
      .                       node_types: Default::default(),
      .                       node_substs: Default::default(),
      .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
      .                       tainted_by_errors: None,
      .                       concrete_opaque_types: Default::default(),
      .                       closure_min_captures: Default::default(),
      .                       closure_fake_reads: Default::default(),
      .                       generator_interior_types: ty::Binder::dummy(Default::default()),
      .                       treat_byte_string_as_slice: Default::default(),
      .                       closure_size_eval: Default::default(),
      .                   }
    534 ( 0.00%)      }
      .           
      .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
  1,356 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
    904 ( 0.00%)          match *qpath {
  2,196 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
      .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
      .                           .type_dependent_def(id)
    516 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
      .                   }
  2,260 ( 0.00%)      }
      .           
     19 ( 0.00%)      pub fn type_dependent_defs(
      .                   &self,
      .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
     98 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
     19 ( 0.00%)      }
      .           
    158 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
    322 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
    316 ( 0.00%)      }
      .           
    312 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
      .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
    312 ( 0.00%)      }
      .           
    563 ( 0.00%)      pub fn type_dependent_defs_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
    563 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
    563 ( 0.00%)      }
      .           
      .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
     50 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
     11 ( 0.00%)      }
      .           
      .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
     66 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
     33 ( 0.00%)      }
      .           
      .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
    292 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    146 ( 0.00%)      }
      .           
      .               pub fn user_provided_types_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
     72 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
     36 ( 0.00%)      }
      .           
      .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
  1,234 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
    617 ( 0.00%)      }
      .           
      .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
  2,172 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
  1,086 ( 0.00%)      }
      .           
  9,816 ( 0.01%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
  1,636 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
      .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
      .                   })
  8,180 ( 0.00%)      }
      .           
  2,145 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
  2,145 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_types.get(&id.local_id).cloned()
  4,290 ( 0.00%)      }
      .           
      .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
    240 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
    120 ( 0.00%)      }
      .           
    658 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
    658 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
  1,316 ( 0.00%)      }
      .           
    457 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
    457 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_substs.get(&id.local_id).cloned()
    914 ( 0.00%)      }
      .           
      .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
      .               // doesn't provide type parameter substitutions.
      .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
    208 ( 0.00%)          self.node_type(pat.hir_id)
      .               }
      .           
      .               // Returns the type of an expression as a monotype.
      .               //
      .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
      .               // some cases, we insert `Adjustment` annotations such as auto-deref or
      .               // auto-ref.  The type returned by this function does not consider such
      .               // adjustments.  See `expr_ty_adjusted()` instead.
      .               //
      .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
      .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
      .               // instead of "fn(ty) -> T with T = isize".
      .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
  1,821 ( 0.00%)          self.node_type(expr.hir_id)
      .               }
      .           
      .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
  1,812 ( 0.00%)          self.node_type_opt(expr.hir_id)
      .               }
      .           
      .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
    838 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
    419 ( 0.00%)      }
      .           
      .               pub fn adjustments_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
  1,152 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
    576 ( 0.00%)      }
      .           
    782 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
  1,564 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
      .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
  1,564 ( 0.00%)      }
      .           
      .               /// Returns the type of `expr`, considering any `Adjustment`
      .               /// entry recorded for that expression.
     45 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
      9 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
      8 ( 0.00%)      }
      .           
     10 ( 0.00%)      pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
      2 ( 0.00%)          self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
      8 ( 0.00%)      }
      .           
     79 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
      .                   // Only paths and method calls/overloaded operators have
      .                   // entries in type_dependent_defs, ignore the former here.
    158 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
      .                       return false;
      .                   }
      .           
    174 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
    158 ( 0.00%)      }
      .           
    435 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
      .                   self.pat_binding_modes().get(id).copied().or_else(|| {
      .                       s.delay_span_bug(sp, "missing binding mode");
      .                       None
      .                   })
    580 ( 0.00%)      }
      .           
      .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
    377 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
    116 ( 0.00%)      }
      .           
      .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
    188 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
     94 ( 0.00%)      }
      .           
      .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
    486 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
    243 ( 0.00%)      }
      .           
      .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
    144 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
     72 ( 0.00%)      }
      .           
      .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
      .               /// by the closure.
    288 ( 0.00%)      pub fn closure_min_captures_flattened(
      .                   &self,
      .                   closure_def_id: DefId,
      .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
      .                   self.closure_min_captures
      .                       .get(&closure_def_id)
      .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
      .                       .into_iter()
      .                       .flatten()
    360 ( 0.00%)      }
      .           
      .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
     48 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
     24 ( 0.00%)      }
      .           
      .               pub fn closure_kind_origins_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
      .               }
      .           
      .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
    164 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
     82 ( 0.00%)      }
      .           
      .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
    116 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
     58 ( 0.00%)      }
      .           
      .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
     48 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
     24 ( 0.00%)      }
      .           
      .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
      .               }
      .           
     27 ( 0.00%)      pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
      9 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
      .                   self.coercion_casts.contains(&hir_id.local_id)
     18 ( 0.00%)      }
      .           
      .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
      .                   self.coercion_casts.insert(id);
      .               }
      .           
      .               pub fn coercion_casts(&self) -> &ItemLocalSet {
     24 ( 0.00%)          &self.coercion_casts
     24 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
      .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
      .                   let ty::TypeckResults {
      .                       hir_owner,
      .                       ref type_dependent_defs,
      .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
      .                   const START_INDEX = 0,
      .               }
      .           }
      .           
      .           /// Mapping of type annotation indices to canonical user type annotations.
      .           pub type CanonicalUserTypeAnnotations<'tcx> =
      .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
      .           
     22 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
      .           pub struct CanonicalUserTypeAnnotation<'tcx> {
      .               pub user_ty: CanonicalUserType<'tcx>,
      .               pub span: Span,
     18 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
      .           }
      .           
      .           /// Canonicalized user type annotation.
      .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
      .           
      .           impl<'tcx> CanonicalUserType<'tcx> {
      .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
      .               /// i.e., each thing is mapped to a canonical variable with the same index.
     46 ( 0.00%)      pub fn is_identity(&self) -> bool {
     92 ( 0.00%)          match self.value {
      .                       UserType::Ty(_) => false,
      .                       UserType::TypeOf(_, user_substs) => {
     46 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
      .                               return false;
      .                           }
      .           
      .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
      .                               match kind.unpack() {
    112 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
      .                                       ty::Bound(debruijn, b) => {
      .                                           // We only allow a `ty::INNERMOST` index in substitutions.
     55 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
      .                                           cvar == b.var
      .                                       }
      .                                       _ => false,
      .                                   },
      .           
      .                                   GenericArgKind::Lifetime(r) => match r {
      .                                       ty::ReLateBound(debruijn, br) => {
      .                                           // We only allow a `ty::INNERMOST` index in substitutions.
-- line 861 ----------------------------------------
-- line 872 ----------------------------------------
      .                                           cvar == b
      .                                       }
      .                                       _ => false,
      .                                   },
      .                               }
      .                           })
      .                       }
      .                   }
     92 ( 0.00%)      }
      .           }
      .           
      .           /// A user-given type annotation attached to a constant. These arise
      .           /// from constants that are named via paths, like `Foo::<A>::new` and
      .           /// so forth.
    108 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
    640 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
      .           pub enum UserType<'tcx> {
      .               Ty(Ty<'tcx>),
      .           
      .               /// The canonical type is the result of `type_of(def_id)` with the
      .               /// given substitutions applied.
      .               TypeOf(DefId, UserSubsts<'tcx>),
      .           }
      .           
      .           impl<'tcx> CommonTypes<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
    111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
      .           
      .                   CommonTypes {
      .                       unit: mk(Tuple(List::empty())),
      .                       bool: mk(Bool),
      .                       char: mk(Char),
      .                       never: mk(Never),
      .                       isize: mk(Int(ty::IntTy::Isize)),
      .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
      .           
      .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> CommonLifetimes<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
     67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
      .           
      .                   CommonLifetimes {
      5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
      5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
      5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> CommonConsts<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
      6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
      .           
      .                   CommonConsts {
      .                       unit: mk_const(ty::Const {
      .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
      .                           ty: types.unit,
      .                       }),
      .                   }
      .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
      .           
      .               /// Stores memory for globals (statics/consts).
      .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
      .           
      .               output_filenames: Arc<OutputFilenames>,
      .           }
      .           
      .           impl<'tcx> TyCtxt<'tcx> {
  1,340 ( 0.00%)      pub fn typeck_opt_const_arg(
      .                   self,
      .                   def: ty::WithOptConstParam<LocalDefId>,
      .               ) -> &'tcx TypeckResults<'tcx> {
    536 ( 0.00%)          if let Some(param_did) = def.const_param_did {
      .                       self.typeck_const_arg((def.did, param_did))
      .                   } else {
      .                       self.typeck(def.did)
      .                   }
  1,072 ( 0.00%)      }
      .           
     96 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
     32 ( 0.00%)          self.arena.alloc(Steal::new(thir))
    128 ( 0.00%)      }
      .           
    495 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
     99 ( 0.00%)          self.arena.alloc(Steal::new(mir))
    693 ( 0.00%)      }
      .           
    128 ( 0.00%)      pub fn alloc_steal_promoted(
      .                   self,
      .                   promoted: IndexVec<Promoted, Body<'tcx>>,
      .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
     32 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
    160 ( 0.00%)      }
      .           
    387 ( 0.00%)      pub fn alloc_adt_def(
      .                   self,
      .                   did: DefId,
      .                   kind: AdtKind,
      .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
      .                   repr: ReprOptions,
      .               ) -> &'tcx ty::AdtDef {
    688 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
    172 ( 0.00%)      }
      .           
      .               /// Allocates a read-only byte or string literal for `mir::interpret`.
      .               pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
      .                   // Create an allocation that just contains these bytes.
      .                   let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
      .                   let alloc = self.intern_const_alloc(alloc);
      .                   self.create_memory_alloc(alloc)
      .               }
      .           
      .               /// Returns a range of the start/end indices specified with the
      .               /// `rustc_layout_scalar_valid_range` attribute.
      .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
    328 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
    164 ( 0.00%)          let attrs = self.get_attrs(def_id);
    697 ( 0.00%)          let get = |name| {
    164 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
      .                           Some(attr) => attr,
      .                           None => return Bound::Unbounded,
      .                       };
      .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
     16 ( 0.00%)              if let Some(
      .                           &[
      .                               ast::NestedMetaItem::Literal(ast::Lit {
      8 ( 0.00%)                          kind: ast::LitKind::Int(a, _), ..
      .                               }),
      .                           ],
      4 ( 0.00%)              ) = attr.meta_item_list().as_deref()
      .                       {
      .                           Bound::Included(a)
      .                       } else {
      .                           self.sess
      .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
      .                           Bound::Unbounded
      .                       }
    820 ( 0.00%)          };
    246 ( 0.00%)          (
    246 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
    123 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
      .                   )
    328 ( 0.00%)      }
      .           
      .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
      .                   value.lift_to_tcx(self)
      .               }
      .           
      .               /// Creates a type context and call the closure with a `TyCtxt` reference
      .               /// to the context. The closure enforces that the type context and any interned
      .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
      .               /// reference to the context, to allow formatting values that need it.
     23 ( 0.00%)      pub fn create_global_ctxt(
      .                   s: &'tcx Session,
      .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
      .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
      .                   resolutions: ty::ResolverOutputs,
      .                   krate: &'tcx hir::Crate<'tcx>,
      .                   dep_graph: DepGraph,
      .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
      .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
      .                   query_kinds: &'tcx [DepKindStruct],
      .                   crate_name: &str,
      .                   output_filenames: OutputFilenames,
      .               ) -> GlobalCtxt<'tcx> {
      1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
      .                       s.fatal(&err);
      .                   });
      .                   let interners = CtxtInterners::new(arena);
      .                   let common_types = CommonTypes::new(&interners);
      .                   let common_lifetimes = CommonLifetimes::new(&interners);
      .                   let common_consts = CommonConsts::new(&interners, &common_types);
      .           
    127 ( 0.00%)          GlobalCtxt {
      .                       sess: s,
      6 ( 0.00%)              lint_store,
      .                       arena,
      2 ( 0.00%)              interners,
      5 ( 0.00%)              dep_graph,
      4 ( 0.00%)              untracked_resolutions: resolutions,
      2 ( 0.00%)              prof: s.prof.clone(),
      .                       types: common_types,
      .                       lifetimes: common_lifetimes,
      .                       consts: common_consts,
      .                       untracked_crate: krate,
      .                       on_disk_cache,
      .                       queries,
      .                       query_caches: query::QueryCaches::default(),
      .                       query_kinds,
      .                       ty_rcache: Default::default(),
      .                       pred_rcache: Default::default(),
      .                       selection_cache: Default::default(),
      .                       evaluation_cache: Default::default(),
      1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
      .                       data_layout,
      .                       alloc_map: Lock::new(interpret::AllocMap::new()),
      .                       output_filenames: Arc::new(output_filenames),
      .                   }
      9 ( 0.00%)      }
      .           
      .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
      .                   &self.query_kinds[k as usize]
      .               }
      .           
      .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
      .               #[track_caller]
      .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
      .                   ty: Ty<'tcx>,
      .                   span: S,
      .                   msg: &str,
      .               ) -> &'tcx Const<'tcx> {
      .                   self.sess.delay_span_bug(span, msg);
      .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
      .               }
      .           
     28 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
      4 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
     32 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
     32 ( 0.00%)      }
      .           
      .               /// Obtain all lang items of this crate and all dependencies (recursively)
 36,582 ( 0.02%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
      .                   self.get_lang_items(())
 47,034 ( 0.03%)      }
      .           
      .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
      .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
     21 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
      .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
     24 ( 0.00%)      }
      .           
      .               /// Obtain the diagnostic item's name
  1,120 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
      .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
  1,280 ( 0.00%)      }
      .           
      .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
  1,372 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
      .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
  1,568 ( 0.00%)      }
      .           
    434 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
      .                   self.stability_index(())
    558 ( 0.00%)      }
      .           
 11,767 ( 0.01%)      pub fn features(self) -> &'tcx rustc_feature::Features {
      .                   self.features_query(())
 13,448 ( 0.01%)      }
      .           
      .               pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
      .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
    677 ( 0.00%)          if let Some(id) = id.as_local() {
      .                       self.untracked_resolutions.definitions.def_key(id)
      .                   } else {
    213 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
      .                   }
      .               }
      .           
      .               /// Converts a `DefId` into its fully expanded `DefPath` (every
      .               /// `DefId` is really just an interned `DefPath`).
      .               ///
      .               /// Note that if `id` is not local to this crate, the result will
      .               ///  be a non-local `DefPath`.
-- line 1272 ----------------------------------------
-- line 1277 ----------------------------------------
      .                   } else {
      .                       self.untracked_resolutions.cstore.def_path(id)
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
      .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
    268 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
      .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
      .                   } else {
     84 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
      .                   if crate_num == LOCAL_CRATE {
      .                       self.sess.local_stable_crate_id()
      .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
      .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
      .                       self.def_path(def_id).to_string_no_crate_verbose()
      .                   )
      .               }
      .           
      .               /// Note that this is *untracked* and should only be used within the query
      .               /// system if the result is otherwise tracked through queries
      .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
 22,184 ( 0.01%)          &*self.untracked_resolutions.cstore
 11,092 ( 0.01%)      }
      .           
      .               /// Note that this is *untracked* and should only be used within the query
      .               /// system if the result is otherwise tracked through queries
      .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
      .                   &self.untracked_resolutions.definitions
      .               }
      .           
      .               #[inline(always)]
      .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
      4 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
     19 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
      .               }
      .           
      .               #[inline(always)]
      .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
      .                   let resolutions = &self.gcx.untracked_resolutions;
      .                   StableHashingContext::ignore_spans(
      .                       self.sess,
      .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
      .               /// If `true`, we should use the MIR-based borrowck, but also
      .               /// fall back on the AST borrowck if the MIR-based one errors.
      .               pub fn migrate_borrowck(self) -> bool {
      .                   self.borrowck_mode().migrate()
      .               }
      .           
      .               /// What mode(s) of borrowck should we run? AST? MIR? both?
      .               /// (Also considers the `#![feature(nll)]` setting.)
     48 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
      .                   // Here are the main constraints we need to deal with:
      .                   //
      .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
      .                   //    synonymous with no `-Z borrowck=...` flag at all.
      .                   //
      .                   // 2. We want to allow developers on the Nightly channel
      .                   //    to opt back into the "hard error" mode for NLL,
      .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
      .                   //   errors. (To simplify the code here, it now even overrides
      .                   //   a user's attempt to specify `-Z borrowck=compare`, which
      .                   //   we arguably do not need anymore and should remove.)
      .                   //
      .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
      .                   //
      .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
      .           
     72 ( 0.00%)          if self.features().nll {
      .                       return BorrowckMode::Mir;
      .                   }
      .           
     24 ( 0.00%)          self.sess.opts.borrowck_mode
     96 ( 0.00%)      }
      .           
      .               /// If `true`, we should use lazy normalization for constants, otherwise
      .               /// we still evaluate them eagerly.
      .               #[inline]
      .               pub fn lazy_normalization(self) -> bool {
      .                   let features = self.features();
      .                   // Note: We only use lazy normalization for generic const expressions.
      .                   features.generic_const_exprs
-- line 1434 ----------------------------------------
-- line 1554 ----------------------------------------
      .                   self.mk_imm_ref(
      .                       self.lifetimes.re_static,
      .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
      .                           .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
      .                   )
      .               }
      .           
      .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
    330 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
    240 ( 0.00%)          match self.def_kind(def_id) {
      .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
      .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
      .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
      .                       },
    540 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
      .                   }
    270 ( 0.00%)      }
      .           
      .               pub fn type_length_limit(self) -> Limit {
      .                   self.limits(()).type_length_limit
      .               }
      .           
 12,313 ( 0.01%)      pub fn recursion_limit(self) -> Limit {
      .                   self.limits(()).recursion_limit
 14,072 ( 0.01%)      }
      .           
      .               pub fn move_size_limit(self) -> Limit {
      .                   self.limits(()).move_size_limit
      .               }
      .           
     70 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
      .                   self.limits(()).const_eval_limit
     80 ( 0.00%)      }
      .           
      .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
      .                   iter::once(LOCAL_CRATE)
      .                       .chain(self.crates(()).iter().copied())
      .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
      .               }
      .           }
      .           
-- line 1594 ----------------------------------------
-- line 1684 ----------------------------------------
      .               /// This is the implicit state of rustc. It contains the current
      .               /// `TyCtxt` and query. It is updated when creating a local interner or
      .               /// executing a new query. Whenever there's a `TyCtxt` value available
      .               /// you should also have access to an `ImplicitCtxt` through the functions
      .               /// in this module.
      .               #[derive(Clone)]
      .               pub struct ImplicitCtxt<'a, 'tcx> {
      .                   /// The current `TyCtxt`.
      1 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
      .           
      .                   /// The current query job, if any. This is updated by `JobOwner::start` in
      .                   /// `ty::query::plumbing` when executing a query.
      .                   pub query: Option<query::QueryJobId<DepKind>>,
      .           
      .                   /// Where to store diagnostics for the current query job, if any.
      .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
      .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
      .                   pub layout_depth: usize,
      .           
      .                   /// The current dep graph task. This is used to add dependencies to queries
      .                   /// when executing them.
      .                   pub task_deps: TaskDepsRef<'a>,
      .               }
      .           
      .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
      5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
      .                       let tcx = TyCtxt { gcx };
     25 ( 0.00%)              ImplicitCtxt {
      .                           tcx,
      .                           query: None,
      .                           diagnostics: None,
      .                           layout_depth: 0,
      .                           task_deps: TaskDepsRef::Ignore,
      .                       }
      5 ( 0.00%)          }
      .               }
      .           
      .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
      .               /// to `value` during the call to `f`. It is restored to its previous value after.
      .               /// This is used to set the pointer to the new `ImplicitCtxt`.
      .               #[cfg(parallel_compiler)]
      .               #[inline]
      .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
      .           
      .               /// Sets TLV to `value` during the call to `f`.
      .               /// It is restored to its previous value after.
      .               /// This is used to set the pointer to the new `ImplicitCtxt`.
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
      .                   let old = get_tlv();
 15,201 ( 0.01%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
      .                   TLV.with(|tlv| tlv.set(value));
      .                   f()
      .               }
      .           
      .               /// Gets the pointer to the current `ImplicitCtxt`.
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
      .               }
      .           
      .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
      .               #[inline]
      .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
      .               where
      .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
      .               {
      1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
      .               }
      .           
      .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
      .               #[inline]
      .               pub fn with_context_opt<F, R>(f: F) -> R
      .               where
      .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
      .               {
      .                   let context = get_tlv();
 62,160 ( 0.03%)          if context == 0 {
      .                       f(None)
      .                   } else {
      .                       // We could get an `ImplicitCtxt` pointer from another thread.
      .                       // Ensure that `ImplicitCtxt` is `Sync`.
      .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
      .           
      .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
      .                   }
-- line 1789 ----------------------------------------
-- line 1805 ----------------------------------------
      .               /// This will panic if you pass it a `TyCtxt` which is different from the current
      .               /// `ImplicitCtxt`'s `tcx` field.
      .               #[inline]
      .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
      .               where
      .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
      .               {
      .                   with_context(|context| unsafe {
 30,834 ( 0.02%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
      .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
 30,772 ( 0.02%)              f(context)
      .                   })
      .               }
      .           
      .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
      .               /// Panics if there is no `ImplicitCtxt` available.
      .               #[inline]
      .               pub fn with<F, R>(f: F) -> R
      .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
      .               fn into_pointer(&self) -> *const () {
      .                   self.0 as *const _ as *const ()
      .               }
      .           }
      .           
      .           #[allow(rustc::usage_of_ty_tykind)]
      .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
      .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
  8,293 ( 0.00%)          &self.0.kind()
      .               }
      .           }
      .           
      .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
      .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
      .           
      .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
 21,492 ( 0.01%)          self.0.kind().hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
  2,034 ( 0.00%)          &self.0.kind
      .               }
      .           }
      .           
      .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
      .           
      .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  1,788 ( 0.00%)          self.0.kind.hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
      .               fn borrow<'a>(&'a self) -> &'a [T] {
  9,385 ( 0.01%)          &self.0[..]
      .               }
      .           }
      .           
      .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
      .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
      .           
      .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  8,176 ( 0.00%)          self.0[..].hash(s)
      .               }
      .           }
      .           
      .           macro_rules! direct_interners {
      .               ($($name:ident: $method:ident($ty:ty),)+) => {
      .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
      .                       fn borrow<'a>(&'a self) -> &'a $ty {
  3,399 ( 0.00%)                  &self.0
      .                       }
      .                   }
      .           
      .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
      .                       fn eq(&self, other: &Self) -> bool {
      .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
      .                           // equals `x == y`.
      .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
      .                   }
      .           
      .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
      .           
      .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
      .                       fn hash<H: Hasher>(&self, s: &mut H) {
      .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
      .                           // x.hash(s)`.
  6,240 ( 0.00%)                  self.0.hash(s)
      .                       }
      .                   }
      .           
      .                   impl<'tcx> TyCtxt<'tcx> {
 37,689 ( 0.02%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
 18,950 ( 0.01%)                  self.interners.$name.intern(v, |v| {
  1,394 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
      .                           }).0
 42,030 ( 0.02%)              }
      .                   })+
      .               }
      .           }
      .           
      .           direct_interners! {
      .               region: mk_region(RegionKind),
      .               const_: mk_const(Const<'tcx>),
      .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
      .               adt_def: intern_adt_def(AdtDef),
      .               stability: intern_stability(attr::Stability),
      .               const_stability: intern_const_stability(attr::ConstStability),
      .           }
      .           
      .           macro_rules! slice_interners {
      .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
      .                   impl<'tcx> TyCtxt<'tcx> {
140,359 ( 0.08%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
      .                           self.interners.$field.intern_ref(v, || {
      .                               Interned(List::from_arena(&*self.arena, v))
      .                           }).0
125,766 ( 0.07%)              })+
      .                   }
      .               );
      .           }
      .           
      .           slice_interners!(
      .               type_list: _intern_type_list(Ty<'tcx>),
      .               substs: _intern_substs(GenericArg<'tcx>),
      .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2188 ----------------------------------------
      .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
      .                   })
      .               }
      .           
      .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
      .               /// `*r == kind`.
      .               #[inline]
      .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
  4,340 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
      .               }
      .           
      .               #[allow(rustc::usage_of_ty_tykind)]
      .               #[inline]
      .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
 86,588 ( 0.05%)          self.interners.intern_ty(st)
      .               }
      .           
      .               #[inline]
      .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
 36,359 ( 0.02%)          let inner = self.interners.intern_predicate(binder);
      .                   Predicate { inner }
      .               }
      .           
      .               #[inline]
 27,680 ( 0.02%)      pub fn reuse_or_mk_predicate(
      .                   self,
      .                   pred: Predicate<'tcx>,
      .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
      .               ) -> Predicate<'tcx> {
  1,824 ( 0.00%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
 27,680 ( 0.02%)      }
      .           
      .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
      .                   match tm {
      .                       IntTy::Isize => self.types.isize,
      .                       IntTy::I8 => self.types.i8,
      .                       IntTy::I16 => self.types.i16,
      .                       IntTy::I32 => self.types.i32,
      .                       IntTy::I64 => self.types.i64,
      .                       IntTy::I128 => self.types.i128,
      .                   }
      .               }
      .           
      .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
     22 ( 0.00%)          match tm {
      .                       UintTy::Usize => self.types.usize,
      .                       UintTy::U8 => self.types.u8,
      .                       UintTy::U16 => self.types.u16,
      .                       UintTy::U32 => self.types.u32,
      .                       UintTy::U64 => self.types.u64,
      .                       UintTy::U128 => self.types.u128,
      .                   }
     22 ( 0.00%)      }
      .           
      .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
      .                   match tm {
      .                       FloatTy::F32 => self.types.f32,
      .                       FloatTy::F64 => self.types.f64,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn mk_static_str(self) -> Ty<'tcx> {
     18 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
      .               }
      .           
      .               #[inline]
      .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   // Take a copy of substs so that we own the vectors inside.
      .                   self.mk_ty(Adt(def, substs))
      .               }
      .           
-- line 2259 ----------------------------------------
-- line 2341 ----------------------------------------
      .               #[inline]
      .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(Slice(ty))
      .               }
      .           
      .               #[inline]
      .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
      .                   let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
     33 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
      .               }
      .           
      .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
    276 ( 0.00%)          iter.intern_with(|ts| {
    130 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
    937 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
    243 ( 0.00%)          })
      .               }
      .           
      .               #[inline]
      .               pub fn mk_unit(self) -> Ty<'tcx> {
     20 ( 0.00%)          self.types.unit
      .               }
      .           
      .               #[inline]
      .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
      .                   if self.features().never_type_fallback { self.types.never } else { self.types.unit }
      .               }
      .           
      .               #[inline]
      .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(FnDef(def_id, substs))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
     64 ( 0.00%)          self.mk_ty(FnPtr(fty))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_dynamic(
      .                   self,
      .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
      .                   reg: ty::Region<'tcx>,
      .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2445 ----------------------------------------
      .                   self.mk_ty(Param(ParamTy { index, name }))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
      .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
      .               }
      .           
    301 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
    215 ( 0.00%)          match param.kind {
      .                       GenericParamDefKind::Lifetime => {
      .                           self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
      .                       }
     86 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
      .                       GenericParamDefKind::Const { .. } => {
      .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
      .                       }
      .                   }
    301 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(Opaque(def_id, substs))
      .               }
      .           
      1 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
      1 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
      2 ( 0.00%)      }
      .           
      .               pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
      .                   self.mk_place_elem(place, PlaceElem::Deref)
      .               }
      .           
      .               pub fn mk_place_downcast(
      .                   self,
      .                   place: Place<'tcx>,
-- line 2480 ----------------------------------------
-- line 2497 ----------------------------------------
      .           
      .               pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
      .                   self.mk_place_elem(place, PlaceElem::Index(index))
      .               }
      .           
      .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
      .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
      .               /// flight.
      9 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
      .                   let mut projection = place.projection.to_vec();
      .                   projection.push(elem);
      .           
      .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
     10 ( 0.00%)      }
      .           
    161 ( 0.00%)      pub fn intern_poly_existential_predicates(
      .                   self,
      .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
      .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
     23 ( 0.00%)          assert!(!eps.is_empty());
      .                   assert!(
      .                       eps.array_windows()
     30 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
      .                               != Ordering::Greater)
      .                   );
     92 ( 0.00%)          self._intern_poly_existential_predicates(eps)
    184 ( 0.00%)      }
      .           
      .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
      .                   // FIXME consider asking the input slice to be sorted to avoid
      .                   // re-interning permutations, in which case that would be asserted
      .                   // here.
    566 ( 0.00%)          if preds.is_empty() {
      .                       // The macro-generated method below asserts we don't intern an empty slice.
      .                       List::empty()
      .                   } else {
    162 ( 0.00%)              self._intern_predicates(preds)
      .                   }
    808 ( 0.00%)      }
      .           
      .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
  1,766 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
     88 ( 0.00%)      }
      .           
      .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
 25,353 ( 0.01%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
  3,654 ( 0.00%)      }
      .           
      .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
      .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
      .               }
      .           
      .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
    303 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
    182 ( 0.00%)      }
      .           
      .               pub fn intern_canonical_var_infos(
      .                   self,
      .                   ts: &[CanonicalVarInfo<'tcx>],
      .               ) -> CanonicalVarInfos<'tcx> {
  1,003 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
     46 ( 0.00%)      }
      .           
      .               pub fn intern_bound_variable_kinds(
      .                   self,
      .                   ts: &[ty::BoundVariableKind],
      .               ) -> &'tcx List<ty::BoundVariableKind> {
    562 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
    844 ( 0.00%)      }
      .           
      .               pub fn mk_fn_sig<I>(
      .                   self,
      .                   inputs: I,
      .                   output: I::Item,
      .                   c_variadic: bool,
      .                   unsafety: hir::Unsafety,
      .                   abi: abi::Abi,
      .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
      .               where
      .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
      .               {
      .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
    299 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
     34 ( 0.00%)              c_variadic,
     50 ( 0.00%)              unsafety,
     36 ( 0.00%)              abi,
     80 ( 0.00%)          })
      .               }
      .           
      .               pub fn mk_poly_existential_predicates<
      .                   I: InternAs<
      .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
      .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
      .                   >,
      .               >(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
     84 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
      .               }
      .           
      .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
      .                   iter.intern_with(|xs| self.intern_predicates(xs))
      .               }
      .           
      .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
    616 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
      .               }
      .           
      .               pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
 68,258 ( 0.04%)          iter.intern_with(|xs| self.intern_substs(xs))
      .               }
      .           
      .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
    508 ( 0.00%)          iter.intern_with(|xs| self.intern_place_elems(xs))
      .               }
      .           
    847 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
      .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
  1,694 ( 0.00%)      }
      .           
      .               pub fn mk_bound_variable_kinds<
      .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
      .               >(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
  3,839 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
      .               }
      .           
      .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
      .               /// It stops at `bound` and just returns it if reached.
  5,166 ( 0.00%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
  5,166 ( 0.00%)          let hir = self.hir();
      .                   loop {
  8,817 ( 0.00%)              if id == bound {
      .                           return bound;
      .                       }
      .           
 11,005 ( 0.01%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
      .                           return id;
      .                       }
      .                       let next = hir.get_parent_node(id);
  6,603 ( 0.00%)              if next == id {
      .                           bug!("lint traversal reached the root of the crate");
      .                       }
      .                       id = next;
      .                   }
  7,380 ( 0.00%)      }
      .           
    864 ( 0.00%)      pub fn lint_level_at_node(
      .                   self,
      .                   lint: &'static Lint,
      .                   mut id: hir::HirId,
      .               ) -> (Level, LintLevelSource) {
      .                   let sets = self.lint_levels(());
      .                   loop {
  4,338 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
      .                           return pair;
      .                       }
    314 ( 0.00%)              let next = self.hir().get_parent_node(id);
    942 ( 0.00%)              if next == id {
      .                           bug!("lint traversal reached the root of the crate");
      .                       }
      .                       id = next;
      .                   }
    864 ( 0.00%)      }
      .           
     14 ( 0.00%)      pub fn struct_span_lint_hir(
      .                   self,
      .                   lint: &'static Lint,
      .                   hir_id: HirId,
      .                   span: impl Into<MultiSpan>,
      .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
      .               ) {
    263 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
     70 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
      8 ( 0.00%)      }
      .           
      .               pub fn struct_lint_node(
      .                   self,
      .                   lint: &'static Lint,
      .                   id: HirId,
      .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
      .               ) {
      .                   let (level, src) = self.lint_level_at_node(lint, id);
      .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
      .               }
      .           
    308 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
     88 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
      .                   let candidates = map.get(&id.local_id)?;
     88 ( 0.00%)          Some(&*candidates)
    352 ( 0.00%)      }
      .           
    476 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
      .                   debug!(?id, "named_region");
      .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
    612 ( 0.00%)      }
      .           
      .               pub fn is_late_bound(self, id: HirId) -> bool {
      .                   self.is_late_bound_map(id.owner)
      .                       .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
      .               }
      .           
    630 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
      .                   self.object_lifetime_defaults_map(id.owner)
    810 ( 0.00%)      }
      .           
    387 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
      .                   self.mk_bound_variable_kinds(
      .                       self.late_bound_vars_map(id.owner)
      .                           .and_then(|map| map.get(&id.local_id).cloned())
      .                           .unwrap_or_else(|| {
      .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
      .                           })
      .                           .iter(),
      .                   )
    387 ( 0.00%)      }
      .           
      .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
      .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
      .               }
      .           
      .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
      .               /// feature gates
     90 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
      9 ( 0.00%)          if self.is_const_fn_raw(def_id) {
      .                       match self.lookup_const_stability(def_id) {
      .                           Some(stability) if stability.level.is_unstable() => {
      .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
      .                               // corresponding feature gate.
      .                               self.features()
      .                                   .declared_lib_features
      .                                   .iter()
      .                                   .any(|&(sym, _)| sym == stability.feature)
-- line 2741 ----------------------------------------
-- line 2743 ----------------------------------------
      .                           // functions without const stability are either stable user written
      .                           // const fn or the user is using feature gates and we thus don't
      .                           // care what they do
      .                           _ => true,
      .                       }
      .                   } else {
      .                       false
      .                   }
     81 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> TyCtxtAt<'tcx> {
      .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
      .               #[track_caller]
      .               pub fn ty_error(self) -> Ty<'tcx> {
      .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
      .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
      .           }
      .           
      .           impl<I, T, R, E> InternAs<[T], R> for I
      .           where
      .               E: InternIteratorElement<T, R>,
      .               I: Iterator<Item = E>,
      .           {
      .               type Output = E::Output;
 47,768 ( 0.03%)      fn intern_with<F>(self, f: F) -> Self::Output
      .               where
      .                   F: FnOnce(&[T]) -> R,
      .               {
 63,491 ( 0.03%)          E::intern_with(self, f)
 44,622 ( 0.02%)      }
      .           }
      .           
      .           pub trait InternIteratorElement<T, R>: Sized {
      .               type Output;
      .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
      .           }
      .           
      .           impl<T, R> InternIteratorElement<T, R> for T {
      .               type Output = R;
  9,534 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
      .                   mut iter: I,
      .                   f: F,
      .               ) -> Self::Output {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
      .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
      .                   // `assert`.
 31,101 ( 0.02%)          match iter.size_hint() {
      .                       (0, Some(0)) => {
      .                           assert!(iter.next().is_none());
      .                           f(&[])
      .                       }
      .                       (1, Some(1)) => {
      .                           let t0 = iter.next().unwrap();
     11 ( 0.00%)                  assert!(iter.next().is_none());
  4,960 ( 0.00%)                  f(&[t0])
      .                       }
      .                       (2, Some(2)) => {
      .                           let t0 = iter.next().unwrap();
      .                           let t1 = iter.next().unwrap();
     28 ( 0.00%)                  assert!(iter.next().is_none());
  2,045 ( 0.00%)                  f(&[t0, t1])
      .                       }
     40 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
      .                   }
  7,585 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
      .           where
      .               T: Clone + 'a,
      .           {
      .               type Output = R;
    319 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
      .                   // This code isn't hot.
     32 ( 0.00%)          f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
    284 ( 0.00%)      }
      .           }
      .           
      .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
      .               type Output = Result<R, E>;
 12,475 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
      .                   mut iter: I,
      .                   f: F,
      .               ) -> Self::Output {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
      .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
      .                   // `assert`, unless a failure happens first, in which case the result
      .                   // will be an error anyway.
  9,432 ( 0.01%)          Ok(match iter.size_hint() {
      .                       (0, Some(0)) => {
      .                           assert!(iter.next().is_none());
      .                           f(&[])
      .                       }
      .                       (1, Some(1)) => {
     42 ( 0.00%)                  let t0 = iter.next().unwrap()?;
      .                           assert!(iter.next().is_none());
    593 ( 0.00%)                  f(&[t0])
      .                       }
      .                       (2, Some(2)) => {
     30 ( 0.00%)                  let t0 = iter.next().unwrap()?;
     30 ( 0.00%)                  let t1 = iter.next().unwrap()?;
     45 ( 0.00%)                  assert!(iter.next().is_none());
  1,008 ( 0.00%)                  f(&[t0, t1])
      .                       }
    120 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
      .                   })
 14,123 ( 0.01%)      }
      .           }
      .           
      .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
      .           // won't work for us.
      .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
 30,834 ( 0.02%)      t as *const () == u as *const ()
      .           }
      .           
      .           pub fn provide(providers: &mut ty::query::Providers) {
      2 ( 0.00%)      providers.in_scope_traits_map =
      .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
      3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
      2 ( 0.00%)      providers.module_reexports =
      .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
      2 ( 0.00%)      providers.crate_name = |tcx, id| {
      1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
      1 ( 0.00%)          tcx.crate_name
      .               };
      2 ( 0.00%)      providers.maybe_unused_trait_import =
      .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
      2 ( 0.00%)      providers.maybe_unused_extern_crates =
      .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
      2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
      .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
      .               };
      .           
     11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
      2 ( 0.00%)      providers.lookup_const_stability =
      .                   |tcx, id| tcx.stability().local_const_stability(id.expect_local());
      2 ( 0.00%)      providers.lookup_deprecation_entry =
    480 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
      2 ( 0.00%)      providers.extern_mod_stmt_cnum =
      .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
      3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
      3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
      2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
      .                   assert_eq!(cnum, LOCAL_CRATE);
      .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
      .               };
      2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
      .                   assert_eq!(cnum, LOCAL_CRATE);
      .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
      .               };
      2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
      1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
      .                   // We want to check if the panic handler was defined in this crate
      3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
      .               };
      .           }

 94,183 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 141 ----------------------------------------
      .               /// ```
      .               /// let a = [1, 2, 3];
      .               /// assert!(!a.is_empty());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
      .               #[inline]
      .               pub const fn is_empty(&self) -> bool {
 35,910 ( 0.02%)          self.len() == 0
      .               }
      .           
      .               /// Returns the first element of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 159 ----------------------------------------
      .               ///
      .               /// let w: &[i32] = &[];
      .               /// assert_eq!(None, w.first());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn first(&self) -> Option<&T> {
    243 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
      .               }
      .           
      .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 178 ----------------------------------------
      .               ///     *first = 5;
      .               /// }
      .               /// assert_eq!(x, &[5, 1, 2]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
      .               #[inline]
      .               pub const fn first_mut(&mut self) -> Option<&mut T> {
     52 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
      .               }
      .           
      .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 237 ----------------------------------------
      .               ///     assert_eq!(last, &2);
      .               ///     assert_eq!(elements, &[0, 1]);
      .               /// }
      .               /// ```
      .               #[stable(feature = "slice_splits", since = "1.5.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
  1,001 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
      .               }
      .           
      .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
      .               ///
      .               /// let w: &[i32] = &[];
      .               /// assert_eq!(None, w.last());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn last(&self) -> Option<&T> {
 15,620 ( 0.01%)          if let [.., last] = self { Some(last) } else { None }
      .               }
      .           
      .               /// Returns a mutable pointer to the last item in the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 295 ----------------------------------------
      .               ///     *last = 10;
      .               /// }
      .               /// assert_eq!(x, &[0, 1, 10]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
      .               #[inline]
      .               pub const fn last_mut(&mut self) -> Option<&mut T> {
 18,133 ( 0.01%)          if let [.., last] = self { Some(last) } else { None }
      .               }
      .           
      .               /// Returns a reference to an element or subslice depending on the type of
      .               /// index.
      .               ///
      .               /// - If given a position, returns a reference to the element at that
      .               ///   position or `None` if out of bounds.
      .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 448 ----------------------------------------
      .               /// }
      .               /// ```
      .               ///
      .               /// [`as_mut_ptr`]: slice::as_mut_ptr
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
      .               #[inline]
      .               pub const fn as_ptr(&self) -> *const T {
 30,588 ( 0.02%)          self as *const [T] as *const T
      .               }
      .           
      .               /// Returns an unsafe mutable pointer to the slice's buffer.
      .               ///
      .               /// The caller must ensure that the slice outlives the pointer this
      .               /// function returns, or else it will end up pointing to garbage.
      .               ///
      .               /// Modifying the container referenced by this slice may cause its buffer
-- line 464 ----------------------------------------
-- line 476 ----------------------------------------
      .               ///     }
      .               /// }
      .               /// assert_eq!(x, &[3, 4, 6]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
      .               #[inline]
      .               pub const fn as_mut_ptr(&mut self) -> *mut T {
      3 ( 0.00%)          self as *mut [T] as *mut T
      .               }
      .           
      .               /// Returns the two raw pointers spanning the slice.
      .               ///
      .               /// The returned range is half-open, which means that the end pointer
      .               /// points *one past* the last element of the slice. This way, an empty
      .               /// slice is represented by two equal pointers, and the difference between
      .               /// the two pointers represents the size of the slice.
-- line 492 ----------------------------------------
-- line 582 ----------------------------------------
      .               /// v.swap(2, 4);
      .               /// assert!(v == ["a", "b", "e", "d", "c"]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
      .               #[inline]
      .               #[track_caller]
      .               pub const fn swap(&mut self, a: usize, b: usize) {
    134 ( 0.00%)          let _ = &self[a];
  1,753 ( 0.00%)          let _ = &self[b];
      .           
      .                   // SAFETY: we just checked that both `a` and `b` are in bounds
      .                   unsafe { self.swap_unchecked(a, b) }
      .               }
      .           
      .               /// Swaps two elements in the slice, without doing bounds checking.
      .               ///
      .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 677 ----------------------------------------
      .           
      .                       // Because this function is first compiled in isolation,
      .                       // this check tells LLVM that the indexing below is
      .                       // in-bounds.  Then after inlining -- once the actual
      .                       // lengths of the slices are known -- it's removed.
      .                       let (a, b) = (&mut a[..n], &mut b[..n]);
      .           
      .                       for i in 0..n {
    110 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
      .                       }
      .                   }
      .               }
      .           
      .               /// Returns an iterator over the slice.
      .               ///
      .               /// # Examples
      .               ///
-- line 693 ----------------------------------------
-- line 1499 ----------------------------------------
      .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
      .               ///     assert_eq!(right, []);
      .               /// }
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               #[track_caller]
      .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
     18 ( 0.00%)          assert!(mid <= self.len());
      .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
      .                   // fulfills the requirements of `from_raw_parts_mut`.
      .                   unsafe { self.split_at_unchecked(mid) }
      .               }
      .           
      .               /// Divides one mutable slice into two at an index.
      .               ///
      .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
      .               /// left[1] = 2;
      .               /// right[1] = 4;
      .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               #[track_caller]
      .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
  2,458 ( 0.00%)          assert!(mid <= self.len());
      .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
      .                   // fulfills the requirements of `from_raw_parts_mut`.
      .                   unsafe { self.split_at_mut_unchecked(mid) }
      .               }
      .           
      .               /// Divides one slice into two at an index, without doing bounds checking.
      .               ///
      .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
      .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
      .                   let len = self.len();
      .                   let ptr = self.as_mut_ptr();
      .           
      .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
      .                   //
      .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
      .                   // is fine.
    673 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
      .               }
      .           
      .               /// Divides one slice into an array and a remainder slice at an index.
      .               ///
      .               /// The array will contain all indices from `[0, N)` (excluding
      .               /// the index `N` itself) and the slice will contain all
      .               /// indices from `[N, len)` (excluding the index `len` itself).
      .               ///
-- line 1644 ----------------------------------------
-- line 2113 ----------------------------------------
      .               /// assert!(!v.iter().any(|e| e == "hi"));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               pub fn contains(&self, x: &T) -> bool
      .               where
      .                   T: PartialEq,
      .               {
      8 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
      .               }
      .           
      .               /// Returns `true` if `needle` is a prefix of the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 2129 ----------------------------------------
-- line 2142 ----------------------------------------
      .               /// assert!(v.starts_with(&[]));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn starts_with(&self, needle: &[T]) -> bool
      .               where
      .                   T: PartialEq,
      .               {
      .                   let n = needle.len();
  4,439 ( 0.00%)          self.len() >= n && needle == &self[..n]
      .               }
      .           
      .               /// Returns `true` if `needle` is a suffix of the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 2158 ----------------------------------------
-- line 2171 ----------------------------------------
      .               /// assert!(v.ends_with(&[]));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn ends_with(&self, needle: &[T]) -> bool
      .               where
      .                   T: PartialEq,
      .               {
      .                   let (m, n) = (self.len(), needle.len());
  2,510 ( 0.00%)          m >= n && needle == &self[m - n..]
      .               }
      .           
      .               /// Returns a subslice with the prefix removed.
      .               ///
      .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
      .               /// If `prefix` is empty, simply returns the original slice.
      .               ///
      .               /// If the slice does not start with `prefix`, returns `None`.
-- line 2187 ----------------------------------------
-- line 2293 ----------------------------------------
      .               /// s.insert(idx, num);
      .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
      .               where
      .                   T: Ord,
      .               {
      3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
      .               }
      .           
      .               /// Binary searches this sorted slice with a comparator function.
      .               ///
      .               /// The comparator function should implement an order consistent
      .               /// with the sort order of the underlying slice, returning an
      .               /// order code that indicates whether its argument is `Less`,
      .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
      .               #[inline]
      .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
      .               where
      .                   F: FnMut(&'a T) -> Ordering,
      .               {
      .                   let mut size = self.len();
      .                   let mut left = 0;
      .                   let mut right = size;
210,685 ( 0.12%)          while left < right {
302,622 ( 0.17%)              let mid = left + size / 2;
      .           
      .                       // SAFETY: the call is made safe by the following invariants:
      .                       // - `mid >= 0`
      .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
158,246 ( 0.09%)              let cmp = f(unsafe { self.get_unchecked(mid) });
      .           
      .                       // The reason why we use if/else control flow rather than match
      .                       // is because match reorders comparison operations, which is perf sensitive.
      .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
 96,121 ( 0.05%)              if cmp == Less {
 88,007 ( 0.05%)                  left = mid + 1;
 58,526 ( 0.03%)              } else if cmp == Greater {
      .                           right = mid;
      .                       } else {
      .                           // SAFETY: same as the `get_unchecked` above
      .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
      .                           return Ok(mid);
      .                       }
      .           
265,150 ( 0.15%)              size = right - left;
      .                   }
      .                   Err(left)
      .               }
      .           
      .               /// Binary searches this sorted slice with a key extraction function.
      .               ///
      .               /// Assumes that the slice is sorted by the key, for instance with
      .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3203 ----------------------------------------
      .                   #[track_caller]
      .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
      .                       panic!(
      .                           "source slice length ({}) does not match destination slice length ({})",
      .                           src_len, dst_len,
      .                       );
      .                   }
      .           
  3,652 ( 0.00%)          if self.len() != src.len() {
      .                       len_mismatch_fail(self.len(), src.len());
      .                   }
      .           
      .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
      .                   // checked to have the same length. The slices cannot overlap because
      .                   // mutable references are exclusive.
      .                   unsafe {
      .                       ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
-- line 3219 ----------------------------------------
-- line 3382 ----------------------------------------
      .                   }
      .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
      .                   let ts: usize = mem::size_of::<U>() / gcd;
      .                   let us: usize = mem::size_of::<T>() / gcd;
      .           
      .                   // Armed with this knowledge, we can find how many `U`s we can fit!
      .                   let us_len = self.len() / ts * us;
      .                   // And how many `T`s will be in the trailing slice!
    376 ( 0.00%)          let ts_len = self.len() % ts;
      .                   (us_len, ts_len)
      .               }
      .           
      .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
      .               /// maintained.
      .               ///
      .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
      .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
      .                       return (self, &[], &[]);
      .                   }
      .           
      .                   // First, find at what point do we split between the first and 2nd slice. Easy with
      .                   // ptr.align_offset.
      .                   let ptr = self.as_ptr();
      .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
      .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
    376 ( 0.00%)          if offset > self.len() {
      .                       (self, &[], &[])
      .                   } else {
      .                       let (left, rest) = self.split_at(offset);
      .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
      .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
      .                       // since the caller guarantees that we can transmute `T` to `U` safely.
      .                       unsafe {
      .                           (
      .                               left,
      .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
    376 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
      .                           )
      .                       }
      .                   }
      .               }
      .           
      .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
      .               /// maintained.
      .               ///
-- line 3456 ----------------------------------------

135,807 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs
--------------------------------------------------------------------------------
Ir              

-- line 38 ----------------------------------------
     .           #[derive(Debug)]
     .           pub struct Token {
     .               pub kind: TokenKind,
     .               pub len: usize,
     .           }
     .           
     .           impl Token {
     .               fn new(kind: TokenKind, len: usize) -> Token {
46,719 ( 0.03%)          Token { kind, len }
     .               }
     .           }
     .           
     .           /// Enum representing common lexeme types.
     .           // perf note: Changing all `usize` to `u32` doesn't change performance. See #77629
12,900 ( 0.01%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
     .           pub enum TokenKind {
     .               // Multi-char tokens:
     .               /// "// comment"
     .               LineComment { doc_style: Option<DocStyle> },
     .               /// `/* block comment */`
     .               ///
     .               /// Block comments can be recursive, so the sequence like `/* /* */`
     .               /// will not be considered terminated and will result in a parsing error.
-- line 60 ----------------------------------------
-- line 192 ----------------------------------------
     .               /// Literal starts with "0x".
     .               Hexadecimal,
     .               /// Literal doesn't contain a prefix.
     .               Decimal,
     .           }
     .           
     .           /// `rustc` allows files to have a shebang, e.g. "#!/usr/bin/rustrun",
     .           /// but shebang isn't a part of rust syntax.
    14 ( 0.00%)  pub fn strip_shebang(input: &str) -> Option<usize> {
     .               // Shebang must start with `#!` literally, without any preceding whitespace.
     .               // For simplicity we consider any line starting with `#!` a shebang,
     .               // regardless of restrictions put on shebangs by specific platforms.
     .               if let Some(input_tail) = input.strip_prefix("#!") {
     .                   // Ok, this is a shebang but if the next non-whitespace token is `[`,
     .                   // then it may be valid Rust code, so consider it Rust code.
     .                   let next_non_whitespace_token = tokenize(input_tail).map(|tok| tok.kind).find(|tok| {
     .                       !matches!(
-- line 208 ----------------------------------------
-- line 213 ----------------------------------------
     .                       )
     .                   });
     .                   if next_non_whitespace_token != Some(TokenKind::OpenBracket) {
     .                       // No other choice than to consider this a shebang.
     .                       return Some(2 + input_tail.lines().next().unwrap_or_default().len());
     .                   }
     .               }
     .               None
    16 ( 0.00%)  }
     .           
     .           /// Parses the first token from the provided input string.
15,573 ( 0.01%)  pub fn first_token(input: &str) -> Token {
     .               debug_assert!(!input.is_empty());
 5,191 ( 0.00%)      Cursor::new(input).advance_token()
20,764 ( 0.01%)  }
     .           
     .           /// Creates an iterator that produces tokens from the input string.
     .           pub fn tokenize(input: &str) -> impl Iterator<Item = Token> + '_ {
     .               let mut cursor = Cursor::new(input);
     .               std::iter::from_fn(move || {
     .                   if cursor.is_eof() {
     .                       None
     .                   } else {
-- line 235 ----------------------------------------
-- line 243 ----------------------------------------
     .           /// See [Rust language reference](https://doc.rust-lang.org/reference/whitespace.html)
     .           /// for definitions of these classes.
     .           pub fn is_whitespace(c: char) -> bool {
     .               // This is Pattern_White_Space.
     .               //
     .               // Note that this set is stable (ie, it doesn't change with different
     .               // Unicode versions), so it's ok to just hard-code the values.
     .           
14,694 ( 0.01%)      matches!(
     .                   c,
     .                   // Usual ASCII suspects
     .                   '\u{0009}'   // \t
     .                   | '\u{000A}' // \n
     .                   | '\u{000B}' // vertical tab
     .                   | '\u{000C}' // form feed
     .                   | '\u{000D}' // \r
     .                   | '\u{0020}' // space
-- line 259 ----------------------------------------
-- line 271 ----------------------------------------
     .               )
     .           }
     .           
     .           /// True if `c` is valid as a first character of an identifier.
     .           /// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for
     .           /// a formal definition of valid identifier name.
     .           pub fn is_id_start(c: char) -> bool {
     .               // This is XID_Start OR '_' (which formally is not a XID_Start).
   134 ( 0.00%)      c == '_' || unicode_xid::UnicodeXID::is_xid_start(c)
     .           }
     .           
     .           /// True if `c` is valid as a non-first character of an identifier.
     .           /// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for
     .           /// a formal definition of valid identifier name.
     .           pub fn is_id_continue(c: char) -> bool {
     .               unicode_xid::UnicodeXID::is_xid_continue(c)
     .           }
     .           
     .           /// The passed string is lexically an identifier.
     5 ( 0.00%)  pub fn is_ident(string: &str) -> bool {
     .               let mut chars = string.chars();
     .               if let Some(start) = chars.next() {
     .                   is_id_start(start) && chars.all(is_id_continue)
     .               } else {
     .                   false
     .               }
     7 ( 0.00%)  }
     .           
     .           impl Cursor<'_> {
     .               /// Parses a token from the input string.
41,528 ( 0.02%)      fn advance_token(&mut self) -> Token {
     .                   let first_char = self.bump().unwrap();
20,015 ( 0.01%)          let token_kind = match first_char {
     .                       // Slash, comment or block comment.
   312 ( 0.00%)              '/' => match self.first() {
     .                           '/' => self.line_comment(),
     .                           '*' => self.block_comment(),
     .                           _ => Slash,
     .                       },
     .           
     .                       // Whitespace sequence.
     .                       c if is_whitespace(c) => self.whitespace(),
     .           
     .                       // Raw identifier, raw string literal or identifier.
   204 ( 0.00%)              'r' => match (self.first(), self.second()) {
     .                           ('#', c1) if is_id_start(c1) => self.raw_ident(),
     .                           ('#', _) | ('"', _) => {
     .                               let (n_hashes, err) = self.raw_double_quoted_string(1);
     .                               let suffix_start = self.len_consumed();
     .                               if err.is_none() {
     .                                   self.eat_literal_suffix();
     .                               }
     .                               let kind = RawStr { n_hashes, err };
-- line 323 ----------------------------------------
-- line 361 ----------------------------------------
     .                           _ => self.ident_or_unknown_prefix(),
     .                       },
     .           
     .                       // Identifier (this should be checked after other variant that can
     .                       // start as identifier).
     .                       c if is_id_start(c) => self.ident_or_unknown_prefix(),
     .           
     .                       // Numeric literal.
 7,305 ( 0.00%)              c @ '0'..='9' => {
     .                           let literal_kind = self.number(c);
     .                           let suffix_start = self.len_consumed();
     .                           self.eat_literal_suffix();
    70 ( 0.00%)                  TokenKind::Literal { kind: literal_kind, suffix_start }
     .                       }
     .           
     .                       // One-symbol tokens.
   232 ( 0.00%)              ';' => Semi,
   246 ( 0.00%)              ',' => Comma,
    86 ( 0.00%)              '.' => Dot,
   632 ( 0.00%)              '(' => OpenParen,
   632 ( 0.00%)              ')' => CloseParen,
   224 ( 0.00%)              '{' => OpenBrace,
   224 ( 0.00%)              '}' => CloseBrace,
   144 ( 0.00%)              '[' => OpenBracket,
   144 ( 0.00%)              ']' => CloseBracket,
     .                       '@' => At,
    34 ( 0.00%)              '#' => Pound,
     .                       '~' => Tilde,
     .                       '?' => Question,
   838 ( 0.00%)              ':' => Colon,
   404 ( 0.00%)              '$' => Dollar,
   216 ( 0.00%)              '=' => Eq,
    62 ( 0.00%)              '!' => Bang,
    50 ( 0.00%)              '<' => Lt,
   178 ( 0.00%)              '>' => Gt,
    68 ( 0.00%)              '-' => Minus,
    48 ( 0.00%)              '&' => And,
    36 ( 0.00%)              '|' => Or,
    28 ( 0.00%)              '+' => Plus,
   216 ( 0.00%)              '*' => Star,
     .                       '^' => Caret,
     .                       '%' => Percent,
     .           
     .                       // Lifetime or character literal.
    15 ( 0.00%)              '\'' => self.lifetime_or_char(),
     .           
     .                       // String literal.
     .                       '"' => {
   135 ( 0.00%)                  let terminated = self.double_quoted_string();
     .                           let suffix_start = self.len_consumed();
    90 ( 0.00%)                  if terminated {
     .                               self.eat_literal_suffix();
     .                           }
     .                           let kind = Str { terminated };
    90 ( 0.00%)                  Literal { kind, suffix_start }
     .                       }
     .                       // Identifier starting with an emoji. Only lexed for graceful error recovery.
     .                       c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {
     .                           self.fake_ident_or_unknown_prefix()
     .                       }
     .                       _ => Unknown,
     .                   };
     .                   Token::new(token_kind, self.len_consumed())
46,719 ( 0.03%)      }
     .           
     .               fn line_comment(&mut self) -> TokenKind {
     .                   debug_assert!(self.prev() == '/' && self.first() == '/');
     .                   self.bump();
     .           
   242 ( 0.00%)          let doc_style = match self.first() {
     .                       // `//!` is an inner line doc comment.
     .                       '!' => Some(DocStyle::Inner),
     .                       // `////` (more than 3 slashes) is not considered a doc comment.
   105 ( 0.00%)              '/' if self.second() != '/' => Some(DocStyle::Outer),
     .                       _ => None,
     .                   };
     .           
 3,669 ( 0.00%)          self.eat_while(|c| c != '\n');
   234 ( 0.00%)          LineComment { doc_style }
     .               }
     .           
     .               fn block_comment(&mut self) -> TokenKind {
     .                   debug_assert!(self.prev() == '/' && self.first() == '*');
     .                   self.bump();
     .           
     .                   let doc_style = match self.first() {
     .                       // `/*!` is an inner block doc comment.
-- line 447 ----------------------------------------
-- line 474 ----------------------------------------
     .                   }
     .           
     .                   BlockComment { doc_style, terminated: depth == 0 }
     .               }
     .           
     .               fn whitespace(&mut self) -> TokenKind {
     .                   debug_assert!(is_whitespace(self.prev()));
     .                   self.eat_while(is_whitespace);
 1,388 ( 0.00%)          Whitespace
     .               }
     .           
     .               fn raw_ident(&mut self) -> TokenKind {
     .                   debug_assert!(self.prev() == 'r' && self.first() == '#' && is_id_start(self.second()));
     .                   // Eat "#" symbol.
     .                   self.bump();
     .                   // Eat the identifier part of RawIdent.
     .                   self.eat_identifier();
     .                   RawIdent
     .               }
     .           
 6,450 ( 0.00%)      fn ident_or_unknown_prefix(&mut self) -> TokenKind {
     .                   debug_assert!(is_id_start(self.prev()));
     .                   // Start is already eaten, eat the rest of identifier.
 2,580 ( 0.00%)          self.eat_while(is_id_continue);
     .                   // Known prefixes must have been handled earlier. So if
     .                   // we see a prefix here, it is definitely an unknown prefix.
 2,580 ( 0.00%)          match self.first() {
     .                       '#' | '"' | '\'' => UnknownPrefix,
 1,290 ( 0.00%)              c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {
     .                           self.fake_ident_or_unknown_prefix()
     .                       }
 1,290 ( 0.00%)              _ => Ident,
     .                   }
 5,160 ( 0.00%)      }
     .           
     .               fn fake_ident_or_unknown_prefix(&mut self) -> TokenKind {
     .                   // Start is already eaten, eat the rest of identifier.
     .                   self.eat_while(|c| {
     .                       unicode_xid::UnicodeXID::is_xid_continue(c)
     .                           || (!c.is_ascii() && unic_emoji_char::is_emoji(c))
     .                           || c == '\u{200d}'
     .                   });
-- line 515 ----------------------------------------
-- line 519 ----------------------------------------
     .                       '#' | '"' | '\'' => UnknownPrefix,
     .                       _ => InvalidIdent,
     .                   }
     .               }
     .           
     .               fn number(&mut self, first_digit: char) -> LiteralKind {
     .                   debug_assert!('0' <= self.prev() && self.prev() <= '9');
     .                   let mut base = Base::Decimal;
    28 ( 0.00%)          if first_digit == '0' {
     .                       // Attempt to parse encoding base.
    50 ( 0.00%)              let has_digits = match self.first() {
     .                           'b' => {
     .                               base = Base::Binary;
     .                               self.bump();
     .                               self.eat_decimal_digits()
     .                           }
     .                           'o' => {
     .                               base = Base::Octal;
     .                               self.bump();
-- line 537 ----------------------------------------
-- line 538 ----------------------------------------
     .                               self.eat_decimal_digits()
     .                           }
     .                           'x' => {
     .                               base = Base::Hexadecimal;
     .                               self.bump();
     .                               self.eat_hexadecimal_digits()
     .                           }
     .                           // Not a base prefix.
    30 ( 0.00%)                  '0'..='9' | '_' | '.' | 'e' | 'E' => {
     .                               self.eat_decimal_digits();
     .                               true
     .                           }
     .                           // Just a 0.
     .                           _ => return Int { base, empty_int: false },
     .                       };
     .                       // Base prefix was provided, but there were no digits
     .                       // after it, e.g. "0x".
-- line 554 ----------------------------------------
-- line 555 ----------------------------------------
     .                       if !has_digits {
     .                           return Int { base, empty_int: true };
     .                       }
     .                   } else {
     .                       // No base prefix, parse number in the usual way.
     .                       self.eat_decimal_digits();
     .                   };
     .           
    22 ( 0.00%)          match self.first() {
     .                       // Don't be greedy if this is actually an
     .                       // integer literal followed by field/method access or a range pattern
     .                       // (`0..2` and `12.foo()`)
     4 ( 0.00%)              '.' if self.second() != '.' && !is_id_start(self.second()) => {
     .                           // might have stuff after the ., and if it does, it needs to start
     .                           // with a number
     .                           self.bump();
     .                           let mut empty_exponent = false;
     2 ( 0.00%)                  if self.first().is_digit(10) {
     4 ( 0.00%)                      self.eat_decimal_digits();
     6 ( 0.00%)                      match self.first() {
     .                                   'e' | 'E' => {
     .                                       self.bump();
     .                                       empty_exponent = !self.eat_float_exponent();
     .                                   }
     .                                   _ => (),
     .                               }
     .                           }
     .                           Float { base, empty_exponent }
-- line 582 ----------------------------------------
-- line 585 ----------------------------------------
     .                           self.bump();
     .                           let empty_exponent = !self.eat_float_exponent();
     .                           Float { base, empty_exponent }
     .                       }
     .                       _ => Int { base, empty_int: false },
     .                   }
     .               }
     .           
    35 ( 0.00%)      fn lifetime_or_char(&mut self) -> TokenKind {
     .                   debug_assert!(self.prev() == '\'');
     .           
    10 ( 0.00%)          let can_be_a_lifetime = if self.second() == '\'' {
     .                       // It's surely not a lifetime.
     .                       false
     .                   } else {
     .                       // If the first symbol is valid for identifier, it can be a lifetime.
     .                       // Also check if it's a number for a better error reporting (so '0 will
     .                       // be reported as invalid lifetime and not as unterminated char literal).
     .                       is_id_start(self.first()) || self.first().is_digit(10)
     .                   };
-- line 604 ----------------------------------------
-- line 617 ----------------------------------------
     .                   // length greater than 1.
     .           
     .                   let starts_with_number = self.first().is_digit(10);
     .           
     .                   // Skip the literal contents.
     .                   // First symbol can be a number (which isn't a valid identifier start),
     .                   // so skip it without any checks.
     .                   self.bump();
    10 ( 0.00%)          self.eat_while(is_id_continue);
     .           
     .                   // Check if after skipping literal contents we've met a closing
     .                   // single quote (which means that user attempted to create a
     .                   // string with single quotes).
    10 ( 0.00%)          if self.first() == '\'' {
     .                       self.bump();
     .                       let kind = Char { terminated: true };
     .                       Literal { kind, suffix_start: self.len_consumed() }
     .                   } else {
    10 ( 0.00%)              Lifetime { starts_with_number }
     .                   }
    30 ( 0.00%)      }
     .           
     .               fn single_quoted_string(&mut self) -> bool {
     .                   debug_assert!(self.prev() == '\'');
     .                   // Check if it's a one-symbol literal.
     .                   if self.second() == '\'' && self.first() != '\\' {
     .                       self.bump();
     .                       self.bump();
     .                       return true;
-- line 645 ----------------------------------------
-- line 677 ----------------------------------------
     .                   false
     .               }
     .           
     .               /// Eats double-quoted string and returns true
     .               /// if string is terminated.
     .               fn double_quoted_string(&mut self) -> bool {
     .                   debug_assert!(self.prev() == '"');
     .                   while let Some(c) = self.bump() {
 2,047 ( 0.00%)              match c {
     .                           '"' => {
     .                               return true;
     .                           }
     4 ( 0.00%)                  '\\' if self.first() == '\\' || self.first() == '"' => {
     .                               // Bump again to skip escaped character.
     .                               self.bump();
     .                           }
     .                           _ => (),
     .                       }
     .                   }
     .                   // End of file reached.
     .                   false
    45 ( 0.00%)      }
     .           
     .               /// Eats the double-quoted string and returns `n_hashes` and an error if encountered.
     .               fn raw_double_quoted_string(&mut self, prefix_len: usize) -> (u16, Option<RawStrError>) {
     .                   // Wrap the actual function to handle the error with too many hashes.
     .                   // This way, it eats the whole raw string.
     .                   let (n_hashes, err) = self.raw_string_unvalidated(prefix_len);
     .                   // Only up to 65535 `#`s are allowed in raw strings
     .                   match u16::try_from(n_hashes) {
-- line 706 ----------------------------------------
-- line 773 ----------------------------------------
     .                           max_hashes = n_end_hashes;
     .                       }
     .                   }
     .               }
     .           
     .               fn eat_decimal_digits(&mut self) -> bool {
     .                   let mut has_digits = false;
     .                   loop {
    18 ( 0.00%)              match self.first() {
     .                           '_' => {
     .                               self.bump();
     .                           }
    27 ( 0.00%)                  '0'..='9' => {
     .                               has_digits = true;
     .                               self.bump();
     .                           }
     .                           _ => break,
     .                       }
     .                   }
     .                   has_digits
    14 ( 0.00%)      }
     .           
     .               fn eat_hexadecimal_digits(&mut self) -> bool {
     .                   let mut has_digits = false;
     .                   loop {
     .                       match self.first() {
     .                           '_' => {
     .                               self.bump();
     .                           }
-- line 801 ----------------------------------------
-- line 816 ----------------------------------------
     .                   if self.first() == '-' || self.first() == '+' {
     .                       self.bump();
     .                   }
     .                   self.eat_decimal_digits()
     .               }
     .           
     .               // Eats the suffix of the literal, e.g. "_u8".
     .               fn eat_literal_suffix(&mut self) {
   118 ( 0.00%)          self.eat_identifier();
     .               }
     .           
     .               // Eats the identifier.
   177 ( 0.00%)      fn eat_identifier(&mut self) {
     .                   if !is_id_start(self.first()) {
     .                       return;
     .                   }
     .                   self.bump();
     .           
     .                   self.eat_while(is_id_continue);
   236 ( 0.00%)      }
     .           }

72,550 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs
--------------------------------------------------------------------------------
Ir               

-- line 223 ----------------------------------------
      .               fn eq(&self, other: &Rhs) -> bool;
      .           
      .               /// This method tests for `!=`.
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn ne(&self, other: &Rhs) -> bool {
  1,645 ( 0.00%)          !self.eq(other)
      .               }
      .           }
      .           
      .           /// Derive macro generating an impl of the trait `PartialEq`.
      .           #[rustc_builtin_macro]
      .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
      .           #[allow_internal_unstable(core_intrinsics, structural_match)]
      .           pub macro PartialEq($item:item) {
-- line 239 ----------------------------------------
-- line 328 ----------------------------------------
      .           /// assert_eq!(Ordering::Less, result);
      .           ///
      .           /// let result = 1.cmp(&1);
      .           /// assert_eq!(Ordering::Equal, result);
      .           ///
      .           /// let result = 2.cmp(&1);
      .           /// assert_eq!(Ordering::Greater, result);
      .           /// ```
     88 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Debug, Hash)]
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           #[repr(i8)]
      .           pub enum Ordering {
      .               /// An ordering where a compared value is less than another.
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               Less = -1,
      .               /// An ordering where a compared value is equal to another.
      .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 344 ----------------------------------------
-- line 569 ----------------------------------------
      .               /// let result = x.0.cmp(&y.0).then_with(|| x.1.cmp(&y.1)).then_with(|| x.2.cmp(&y.2));
      .               ///
      .               /// assert_eq!(result, Ordering::Less);
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "ordering_chaining", since = "1.17.0")]
      .               pub fn then_with<F: FnOnce() -> Ordering>(self, f: F) -> Ordering {
     85 ( 0.00%)          match self {
      .                       Equal => f(),
      .                       _ => self,
      .                   }
      .               }
      .           }
      .           
      .           /// A helper struct for reverse ordering.
      .           ///
-- line 585 ----------------------------------------
-- line 792 ----------------------------------------
      .               /// ```
      .               #[stable(feature = "ord_max_min", since = "1.21.0")]
      .               #[inline]
      .               #[must_use]
      .               fn max(self, other: Self) -> Self
      .               where
      .                   Self: Sized,
      .               {
  3,198 ( 0.00%)          max_by(self, other, Ord::cmp)
      .               }
      .           
      .               /// Compares and returns the minimum of two values.
      .               ///
      .               /// Returns the first argument if the comparison determines them to be equal.
      .               ///
      .               /// # Examples
      .               ///
-- line 808 ----------------------------------------
-- line 812 ----------------------------------------
      .               /// ```
      .               #[stable(feature = "ord_max_min", since = "1.21.0")]
      .               #[inline]
      .               #[must_use]
      .               fn min(self, other: Self) -> Self
      .               where
      .                   Self: Sized,
      .               {
    214 ( 0.00%)          min_by(self, other, Ord::cmp)
      .               }
      .           
      .               /// Restrict a value to a certain interval.
      .               ///
      .               /// Returns `max` if `self` is greater than `max`, and `min` if `self` is
      .               /// less than `min`. Otherwise this returns `self`.
      .               ///
      .               /// # Panics
-- line 828 ----------------------------------------
-- line 1097 ----------------------------------------
      .               /// let result = 2.0 < 1.0;
      .               /// assert_eq!(result, false);
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn lt(&self, other: &Rhs) -> bool {
  9,202 ( 0.01%)          matches!(self.partial_cmp(other), Some(Less))
      .               }
      .           
      .               /// This method tests less than or equal to (for `self` and `other`) and is used by the `<=`
      .               /// operator.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 1113 ----------------------------------------
-- line 1121 ----------------------------------------
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn le(&self, other: &Rhs) -> bool {
      .                   // Pattern `Some(Less | Eq)` optimizes worse than negating `None | Some(Greater)`.
      .                   // FIXME: The root cause was fixed upstream in LLVM with:
      .                   // https://github.com/llvm/llvm-project/commit/9bad7de9a3fb844f1ca2965f35d0c2a3d1e11775
      .                   // Revert this workaround once support for LLVM 12 gets dropped.
 49,650 ( 0.03%)          !matches!(self.partial_cmp(other), None | Some(Greater))
      .               }
      .           
      .               /// This method tests greater than (for `self` and `other`) and is used by the `>` operator.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let result = 1.0 > 2.0;
-- line 1137 ----------------------------------------
-- line 1140 ----------------------------------------
      .               /// let result = 2.0 > 2.0;
      .               /// assert_eq!(result, false);
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn gt(&self, other: &Rhs) -> bool {
 67,481 ( 0.04%)          matches!(self.partial_cmp(other), Some(Greater))
      .               }
      .           
      .               /// This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`
      .               /// operator.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 1156 ----------------------------------------
-- line 1160 ----------------------------------------
      .               /// let result = 2.0 >= 2.0;
      .               /// assert_eq!(result, true);
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn ge(&self, other: &Rhs) -> bool {
      2 ( 0.00%)          matches!(self.partial_cmp(other), Some(Greater | Equal))
      .               }
      .           }
      .           
      .           /// Derive macro generating an impl of the trait `PartialOrd`.
      .           #[rustc_builtin_macro]
      .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
      .           #[allow_internal_unstable(core_intrinsics)]
      .           pub macro PartialOrd($item:item) {
-- line 1176 ----------------------------------------
-- line 1210 ----------------------------------------
      .           ///
      .           /// assert_eq!(cmp::min_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 1);
      .           /// assert_eq!(cmp::min_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
      .           /// ```
      .           #[inline]
      .           #[must_use]
      .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
      .           pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
 10,505 ( 0.01%)      match compare(&v1, &v2) {
      .                   Ordering::Less | Ordering::Equal => v1,
      .                   Ordering::Greater => v2,
      .               }
      4 ( 0.00%)  }
      .           
      .           /// Returns the element that gives the minimum value from the specified function.
      .           ///
      .           /// Returns the first argument if the comparison determines them to be equal.
      .           ///
      .           /// # Examples
      .           ///
      .           /// ```
-- line 1230 ----------------------------------------
-- line 1231 ----------------------------------------
      .           /// use std::cmp;
      .           ///
      .           /// assert_eq!(cmp::min_by_key(-2, 1, |x: &i32| x.abs()), 1);
      .           /// assert_eq!(cmp::min_by_key(-2, 2, |x: &i32| x.abs()), -2);
      .           /// ```
      .           #[inline]
      .           #[must_use]
      .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
     24 ( 0.00%)  pub fn min_by_key<T, F: FnMut(&T) -> K, K: Ord>(v1: T, v2: T, mut f: F) -> T {
     16 ( 0.00%)      min_by(v1, v2, |v1, v2| f(v1).cmp(&f(v2)))
     16 ( 0.00%)  }
      .           
      .           /// Compares and returns the maximum of two values.
      .           ///
      .           /// Returns the second argument if the comparison determines them to be equal.
      .           ///
      .           /// Internally uses an alias to [`Ord::max`].
      .           ///
      .           /// # Examples
-- line 1249 ----------------------------------------
-- line 1273 ----------------------------------------
      .           ///
      .           /// assert_eq!(cmp::max_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
      .           /// assert_eq!(cmp::max_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 2);
      .           /// ```
      .           #[inline]
      .           #[must_use]
      .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
      .           pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
 37,875 ( 0.02%)      match compare(&v1, &v2) {
    125 ( 0.00%)          Ordering::Less | Ordering::Equal => v2,
      .                   Ordering::Greater => v1,
      .               }
      .           }
      .           
      .           /// Returns the element that gives the maximum value from the specified function.
      .           ///
      .           /// Returns the second argument if the comparison determines them to be equal.
      .           ///
-- line 1290 ----------------------------------------
-- line 1308 ----------------------------------------
      .               use crate::cmp::Ordering::{self, Equal, Greater, Less};
      .               use crate::hint::unreachable_unchecked;
      .           
      .               macro_rules! partial_eq_impl {
      .                   ($($t:ty)*) => ($(
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl PartialEq for $t {
      .                           #[inline]
    521 ( 0.00%)                  fn eq(&self, other: &$t) -> bool { (*self) == (*other) }
      .                           #[inline]
 33,350 ( 0.02%)                  fn ne(&self, other: &$t) -> bool { (*self) != (*other) }
      .                       }
      .                   )*)
      .               }
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl PartialEq for () {
      .                   #[inline]
      .                   fn eq(&self, _other: &()) -> bool {
-- line 1326 ----------------------------------------
-- line 1392 ----------------------------------------
      .                   ($($t:ty)*) => ($(
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl PartialOrd for $t {
      .                           #[inline]
      .                           fn partial_cmp(&self, other: &$t) -> Option<Ordering> {
      .                               Some(self.cmp(other))
      .                           }
      .                           #[inline]
947,283 ( 0.52%)                  fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
      .                           #[inline]
  2,624 ( 0.00%)                  fn le(&self, other: &$t) -> bool { (*self) <= (*other) }
      .                           #[inline]
      .                           fn ge(&self, other: &$t) -> bool { (*self) >= (*other) }
      .                           #[inline]
      .                           fn gt(&self, other: &$t) -> bool { (*self) > (*other) }
      .                       }
      .           
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl Ord for $t {
      .                           #[inline]
      .                           fn cmp(&self, other: &$t) -> Ordering {
      .                               // The order here is important to generate more optimal assembly.
      .                               // See <https://github.com/rust-lang/rust/issues/63758> for more info.
172,057 ( 0.09%)                      if *self < *other { Less }
      .                               else if *self == *other { Equal }
      .                               else { Greater }
      .                           }
      .                       }
      .                   )*)
      .               }
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 1423 ----------------------------------------
-- line 1430 ----------------------------------------
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl Ord for bool {
      .                   #[inline]
      .                   fn cmp(&self, other: &bool) -> Ordering {
      .                       // Casting to i8's and converting the difference to an Ordering generates
      .                       // more optimal assembly.
      .                       // See <https://github.com/rust-lang/rust/issues/66780> for more info.
    686 ( 0.00%)              match (*self as i8) - (*other as i8) {
      .                           -1 => Less,
      .                           0 => Equal,
      .                           1 => Greater,
      .                           // SAFETY: bool as i8 returns 0 or 1, so the difference can't be anything else
      .                           _ => unsafe { unreachable_unchecked() },
      .                       }
      .                   }
      .               }
-- line 1446 ----------------------------------------
-- line 1474 ----------------------------------------
      .               // & pointers
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized, B: ?Sized> PartialEq<&B> for &A
      .               where
      .                   A: PartialEq<B>,
      .               {
      .                   #[inline]
     15 ( 0.00%)          fn eq(&self, other: &&B) -> bool {
 31,560 ( 0.02%)              PartialEq::eq(*self, *other)
  3,167 ( 0.00%)          }
      .                   #[inline]
      .                   fn ne(&self, other: &&B) -> bool {
     63 ( 0.00%)              PartialEq::ne(*self, *other)
  1,090 ( 0.00%)          }
      .               }
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized, B: ?Sized> PartialOrd<&B> for &A
      .               where
      .                   A: PartialOrd<B>,
      .               {
      .                   #[inline]
      .                   fn partial_cmp(&self, other: &&B) -> Option<Ordering> {
-- line 1496 ----------------------------------------
-- line 1516 ----------------------------------------
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized> Ord for &A
      .               where
      .                   A: Ord,
      .               {
      .                   #[inline]
      .                   fn cmp(&self, other: &Self) -> Ordering {
      .                       Ord::cmp(*self, *other)
    157 ( 0.00%)          }
      .               }
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized> Eq for &A where A: Eq {}
      .           
      .               // &mut pointers
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized, B: ?Sized> PartialEq<&mut B> for &mut A
-- line 1532 ----------------------------------------

145,086 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs
--------------------------------------------------------------------------------
Ir               

-- line 26 ----------------------------------------
      .               /// }
      .               ///
      .               /// assert_eq!(letters[&'s'], 2);
      .               /// assert_eq!(letters[&'t'], 3);
      .               /// assert_eq!(letters[&'u'], 1);
      .               /// assert_eq!(letters.get(&'y'), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
284,815 ( 0.16%)      pub fn rustc_entry(&mut self, key: K) -> RustcEntry<'_, K, V, A> {
      .                   let hash = make_insert_hash(&self.hash_builder, &key);
    205 ( 0.00%)          if let Some(elem) = self.table.find(hash, |q| q.0.eq(&key)) {
 19,927 ( 0.01%)              RustcEntry::Occupied(RustcOccupiedEntry {
  3,705 ( 0.00%)                  key: Some(key),
      .                           elem,
      .                           table: &mut self.table,
      .                       })
      .                   } else {
      .                       // Ideally we would put this in VacantEntry::insert, but Entry is not
      .                       // generic over the BuildHasher and adding a generic parameter would be
      .                       // a breaking change.
      .                       self.reserve(1);
      .           
 86,127 ( 0.05%)              RustcEntry::Vacant(RustcVacantEntry {
      .                           hash,
  9,324 ( 0.01%)                  key,
      .                           table: &mut self.table,
      .                       })
      .                   }
231,985 ( 0.13%)      }
      .           }
      .           
      .           /// A view into a single entry in a map, which may either be vacant or occupied.
      .           ///
      .           /// This `enum` is constructed from the [`entry`] method on [`HashMap`].
      .           ///
      .           /// [`HashMap`]: struct.HashMap.html
      .           /// [`entry`]: struct.HashMap.html#method.rustc_entry
-- line 62 ----------------------------------------
-- line 405 ----------------------------------------
      .               /// if let RustcEntry::Occupied(o) = map.rustc_entry("poneyland") {
      .               ///     *o.into_mut() += 10;
      .               /// }
      .               ///
      .               /// assert_eq!(map["poneyland"], 22);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn into_mut(self) -> &'a mut V {
  1,371 ( 0.00%)          unsafe { &mut self.elem.as_mut().1 }
      .               }
      .           
      .               /// Sets the value of the entry, and returns the entry's old value.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 421 ----------------------------------------
-- line 568 ----------------------------------------
      .               /// let mut map: HashMap<&str, u32> = HashMap::new();
      .               ///
      .               /// if let RustcEntry::Vacant(o) = map.rustc_entry("poneyland") {
      .               ///     o.insert(37);
      .               /// }
      .               /// assert_eq!(map["poneyland"], 37);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
    598 ( 0.00%)      pub fn insert(self, value: V) -> &'a mut V {
      .                   unsafe {
  4,882 ( 0.00%)              let bucket = self.table.insert_no_grow(self.hash, (self.key, value));
    315 ( 0.00%)              &mut bucket.as_mut().1
      .                   }
    790 ( 0.00%)      }
      .           
      .               /// Sets the value of the entry with the RustcVacantEntry's key,
      .               /// and returns a RustcOccupiedEntry.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 589 ----------------------------------------

 64,677 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 114 ----------------------------------------
      .           const EMPTY: u8 = 0b1111_1111;
      .           
      .           /// Control byte value for a deleted bucket.
      .           const DELETED: u8 = 0b1000_0000;
      .           
      .           /// Checks whether a control byte represents a full bucket (top bit is clear).
      .           #[inline]
      .           fn is_full(ctrl: u8) -> bool {
 43,838 ( 0.02%)      ctrl & 0x80 == 0
      .           }
      .           
      .           /// Checks whether a control byte represents a special value (top bit is set).
      .           #[inline]
      .           fn is_special(ctrl: u8) -> bool {
      .               ctrl & 0x80 != 0
      .           }
      .           
-- line 130 ----------------------------------------
-- line 146 ----------------------------------------
      .           /// Secondary hash function, saved in the low 7 bits of the control byte.
      .           #[inline]
      .           #[allow(clippy::cast_possible_truncation)]
      .           fn h2(hash: u64) -> u8 {
      .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
      .               // value, some hash functions (such as FxHash) produce a usize result
      .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
      .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
 33,453 ( 0.02%)      let top7 = hash >> (hash_len * 8 - 7);
      .               (top7 & 0x7f) as u8 // truncation
      .           }
      .           
      .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
      .           /// table size is a power of two) to visit every group of elements exactly once.
      .           ///
      .           /// A triangular probe has us jump by 1 more group every time. So first we
      .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 162 ----------------------------------------
-- line 173 ----------------------------------------
      .               #[inline]
      .               fn move_next(&mut self, bucket_mask: usize) {
      .                   // We should have found an empty bucket by now and ended the probe.
      .                   debug_assert!(
      .                       self.stride <= bucket_mask,
      .                       "Went past end of probe sequence"
      .                   );
      .           
  4,110 ( 0.00%)          self.stride += Group::WIDTH;
  4,110 ( 0.00%)          self.pos += self.stride;
  2,055 ( 0.00%)          self.pos &= bucket_mask;
      .               }
      .           }
      .           
      .           /// Returns the number of buckets needed to hold the given number of items,
      .           /// taking the maximum load factor into account.
      .           ///
      .           /// Returns `None` if an overflow occurs.
      .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
      .           #[cfg_attr(target_os = "emscripten", inline(never))]
      .           #[cfg_attr(not(target_os = "emscripten"), inline)]
      .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
      .               debug_assert_ne!(cap, 0);
      .           
      .               // For small tables we require at least 1 empty bucket so that lookups are
      .               // guaranteed to terminate if an element doesn't exist in the table.
  1,038 ( 0.00%)      if cap < 8 {
      .                   // We don't bother with a table size of 2 buckets since that can only
      .                   // hold a single element. Instead we skip directly to a 4 bucket table
      .                   // which can hold 3 elements.
  1,565 ( 0.00%)          return Some(if cap < 4 { 4 } else { 8 });
      .               }
      .           
      .               // Otherwise require 1/8 buckets to be empty (87.5% load)
      .               //
      .               // Be careful when modifying this, calculate_layout relies on the
      .               // overflow check here.
  1,236 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
      .           
      .               // Any overflows will have been caught by the checked_mul. Also, any
      .               // rounding errors from the division above will be cleaned up by
      .               // next_power_of_two (which can't overflow because of the previous divison).
      .               Some(adjusted_cap.next_power_of_two())
      .           }
      .           
      .           /// Returns the maximum effective capacity for the given bucket mask, taking
      .           /// the maximum load factor into account.
      .           #[inline]
      .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
  3,976 ( 0.00%)      if bucket_mask < 8 {
      .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
      .                   // Keep in mind that the bucket mask is one less than the bucket count.
      .                   bucket_mask
      .               } else {
      .                   // For larger tables we reserve 12.5% of the slots as empty.
    906 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
      .               }
      .           }
      .           
      .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
      .           /// while keeping the rest of `calculate_layout_for` independent of `T`
      .           #[derive(Copy, Clone)]
      .           struct TableLayout {
      .               size: usize,
-- line 236 ----------------------------------------
-- line 249 ----------------------------------------
      .           
      .               #[inline]
      .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
      .                   debug_assert!(buckets.is_power_of_two());
      .           
      .                   let TableLayout { size, ctrl_align } = self;
      .                   // Manual layout calculation since Layout methods are not yet stable.
      .                   let ctrl_offset =
  2,285 ( 0.00%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
  2,804 ( 0.00%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
      .           
      .                   Some((
      .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
      .                       ctrl_offset,
      .                   ))
      .               }
      .           }
      .           
-- line 266 ----------------------------------------
-- line 460 ----------------------------------------
      .               /// Attempts to allocate a new hash table with at least enough capacity
      .               /// for inserting the given number of elements without reallocating.
      .               fn fallible_with_capacity(
      .                   alloc: A,
      .                   capacity: usize,
      .                   fallibility: Fallibility,
      .               ) -> Result<Self, TryReserveError> {
      .                   Ok(Self {
     24 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
      .                           alloc,
      .                           TableLayout::new::<T>(),
      .                           capacity,
      .                           fallibility,
      .                       )?,
      .                       marker: PhantomData,
      .                   })
      .               }
-- line 476 ----------------------------------------
-- line 636 ----------------------------------------
      .                       }
      .                   }
      .               }
      .           
      .               /// Ensures that at least `additional` items can be inserted into the table
      .               /// without reallocation.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
     19 ( 0.00%)          if additional > self.table.growth_left {
      .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
  2,601 ( 0.00%)              if self
      .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
      .                           .is_err()
      .                       {
      .                           unsafe { hint::unreachable_unchecked() }
      .                       }
      .                   }
      .               }
      .           
-- line 654 ----------------------------------------
-- line 665 ----------------------------------------
      .                   } else {
      .                       Ok(())
      .                   }
      .               }
      .           
      .               /// Out-of-line slow path for `reserve` and `try_reserve`.
      .               #[cold]
      .               #[inline(never)]
  4,275 ( 0.00%)      fn reserve_rehash(
      .                   &mut self,
      .                   additional: usize,
      .                   hasher: impl Fn(&T) -> u64,
      .                   fallibility: Fallibility,
      .               ) -> Result<(), TryReserveError> {
      .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
  1,030 ( 0.00%)          let new_items = match self.table.items.checked_add(additional) {
      .                       Some(new_items) => new_items,
      .                       None => return Err(fallibility.capacity_overflow()),
      .                   };
  1,030 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.table.bucket_mask);
  2,060 ( 0.00%)          if new_items <= full_capacity / 2 {
      .                       // Rehash in-place without re-allocating if we have plenty of spare
      .                       // capacity that is locked up due to DELETED entries.
      .                       self.rehash_in_place(hasher);
      .                       Ok(())
      .                   } else {
      .                       // Otherwise, conservatively resize to at least the next size up
      .                       // to avoid churning deletes into frequent rehashes.
      .                       self.resize(
    515 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
      .                           hasher,
      .                           fallibility,
      .                       )
      .                   }
  4,635 ( 0.00%)      }
      .           
      .               /// Rehashes the contents of the table in place (i.e. without changing the
      .               /// allocation).
      .               ///
      .               /// If `hasher` panics then some the table's contents may be lost.
      .               fn rehash_in_place(&mut self, hasher: impl Fn(&T) -> u64) {
      .                   unsafe {
      .                       // If the hash function panics then properly clean up any elements
-- line 707 ----------------------------------------
-- line 780 ----------------------------------------
      .               fn resize(
      .                   &mut self,
      .                   capacity: usize,
      .                   hasher: impl Fn(&T) -> u64,
      .                   fallibility: Fallibility,
      .               ) -> Result<(), TryReserveError> {
      .                   unsafe {
      .                       let mut new_table =
  4,038 ( 0.00%)                  self.table
      .                               .prepare_resize(TableLayout::new::<T>(), capacity, fallibility)?;
      .           
      .                       // Copy all elements to the new table.
      .                       for item in self.iter() {
      .                           // This may panic.
 21,632 ( 0.01%)                  let hash = hasher(item.as_ref());
      .           
      .                           // We can use a simpler version of insert() here since:
      .                           // - there are no DELETED entries.
      .                           // - we know there is enough space in the table.
      .                           // - all elements are unique.
      .                           let (index, _) = new_table.prepare_insert_slot(hash);
 21,632 ( 0.01%)                  new_table.bucket(index).copy_from_nonoverlapping(&item);
      .                       }
      .           
      .                       // We successfully copied all elements without panicking. Now replace
      .                       // self with the new table. The old table will have its memory freed but
      .                       // the items will not be dropped (since they have been moved into the
      .                       // new table).
      .                       mem::swap(&mut self.table, &mut new_table);
      .           
    515 ( 0.00%)              Ok(())
      .                   }
      .               }
      .           
      .               /// Inserts a new element into the table, and returns its raw bucket.
      .               ///
      .               /// This does not check if the given element already exists in the table.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
      .                   unsafe {
      .                       let mut index = self.table.find_insert_slot(hash);
      .           
      .                       // We can avoid growing the table once we have reached our load
      .                       // factor if we are replacing a tombstone. This works since the
      .                       // number of EMPTY slots does not change in this case.
     43 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
 61,566 ( 0.03%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
      .                           self.reserve(1, hasher);
      .                           index = self.table.find_insert_slot(hash);
      .                       }
      .           
      .                       self.table.record_item_insert_at(index, old_ctrl, hash);
      .           
 15,402 ( 0.01%)              let bucket = self.bucket(index);
      .                       bucket.write(value);
      .                       bucket
      .                   }
      .               }
      .           
      .               /// Attempts to insert a new element without growing the table and return its raw bucket.
      .               ///
      .               /// Returns an `Err` containing the given element if inserting it would require growing the
-- line 841 ----------------------------------------
-- line 911 ----------------------------------------
      .                       true
      .                   } else {
      .                       false
      .                   }
      .               }
      .           
      .               /// Searches for an element in the table.
      .               #[inline]
 10,395 ( 0.01%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
      .                   unsafe {
120,521 ( 0.07%)              for bucket in self.iter_hash(hash) {
      .                           let elm = bucket.as_ref();
  9,817 ( 0.01%)                  if likely(eq(elm)) {
      .                               return Some(bucket);
      .                           }
      .                       }
      .                       None
      .                   }
 13,860 ( 0.01%)      }
      .           
      .               /// Gets a reference to an element in the table.
      .               #[inline]
      .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
  1,136 ( 0.00%)          match self.find(hash, eq) {
      .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Gets a mutable reference to an element in the table.
      .               #[inline]
      .               pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
-- line 943 ----------------------------------------
-- line 1007 ----------------------------------------
      .               }
      .           
      .               /// Returns the number of elements the map can hold without reallocating.
      .               ///
      .               /// This number is a lower bound; the table might be able to hold
      .               /// more, but is guaranteed to be able to hold at least this many.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn capacity(&self) -> usize {
  1,036 ( 0.00%)          self.table.items + self.table.growth_left
      .               }
      .           
      .               /// Returns the number of elements in the table.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn len(&self) -> usize {
      .                   self.table.items
      .               }
      .           
      .               /// Returns the number of buckets in the table.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn buckets(&self) -> usize {
     12 ( 0.00%)          self.table.bucket_mask + 1
      .               }
      .           
      .               /// Returns an iterator over every element in the table. It is up to
      .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
      .               /// Because we cannot make the `next` method unsafe on the `RawIter`
      .               /// struct, we have to make the `iter` method unsafe.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub unsafe fn iter(&self) -> RawIter<T> {
    515 ( 0.00%)          let data = Bucket::from_base_index(self.data_end(), 0);
      .                   RawIter {
      .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
      .                       items: self.table.items,
      .                   }
      .               }
      .           
      .               /// Returns an iterator over occupied buckets that could match a given hash.
      .               ///
-- line 1044 ----------------------------------------
-- line 1122 ----------------------------------------
      .           }
      .           
      .           unsafe impl<T, A: Allocator + Clone> Send for RawTable<T, A> where T: Send {}
      .           unsafe impl<T, A: Allocator + Clone> Sync for RawTable<T, A> where T: Sync {}
      .           
      .           impl<A> RawTableInner<A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               const fn new_in(alloc: A) -> Self {
  1,989 ( 0.00%)          Self {
      .                       // Be careful to cast the entire slice to a raw pointer.
  1,071 ( 0.00%)              ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
      .                       bucket_mask: 0,
      .                       items: 0,
      .                       growth_left: 0,
      .                       alloc,
      .                   }
      .               }
      .           }
      .           
-- line 1140 ----------------------------------------
-- line 1149 ----------------------------------------
      .                   debug_assert!(buckets.is_power_of_two());
      .           
      .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
      .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(buckets) {
      .                       Some(lco) => lco,
      .                       None => return Err(fallibility.capacity_overflow()),
      .                   };
      .           
  1,038 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
      .                       Ok(block) => block.cast(),
      .                       Err(_) => return Err(fallibility.alloc_err(layout)),
      .                   };
      .           
      .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
      .                   Ok(Self {
      .                       ctrl,
    560 ( 0.00%)              bucket_mask: buckets - 1,
      .                       items: 0,
      .                       growth_left: bucket_mask_to_capacity(buckets - 1),
      .                       alloc,
      .                   })
      .               }
      .           
      .               #[inline]
  3,206 ( 0.00%)      fn fallible_with_capacity(
      .                   alloc: A,
      .                   table_layout: TableLayout,
      .                   capacity: usize,
      .                   fallibility: Fallibility,
      .               ) -> Result<Self, TryReserveError> {
     24 ( 0.00%)          if capacity == 0 {
      .                       Ok(Self::new_in(alloc))
      .                   } else {
      .                       unsafe {
      .                           let buckets =
      .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
      .           
      .                           let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
      .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
      .           
  1,926 ( 0.00%)                  Ok(result)
      .                       }
      .                   }
  2,584 ( 0.00%)      }
      .           
      .               /// Searches for an empty or deleted bucket which is suitable for inserting
      .               /// a new element and sets the hash for that slot.
      .               ///
      .               /// There must be at least 1 empty bucket in the table.
      .               #[inline]
      .               unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
      .                   let index = self.find_insert_slot(hash);
-- line 1200 ----------------------------------------
-- line 1208 ----------------------------------------
      .               ///
      .               /// There must be at least 1 empty bucket in the table.
      .               #[inline]
      .               fn find_insert_slot(&self, hash: u64) -> usize {
      .                   let mut probe_seq = self.probe_seq(hash);
      .                   loop {
      .                       unsafe {
      .                           let group = Group::load(self.ctrl(probe_seq.pos));
 38,551 ( 0.02%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
112,638 ( 0.06%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
      .           
      .                               // In tables smaller than the group width, trailing control
      .                               // bytes outside the range of the table are filled with
      .                               // EMPTY entries. These will unfortunately trigger a
      .                               // match, but once masked may point to a full bucket that
      .                               // is already occupied. We detect this situation here and
      .                               // perform a second scan starting at the begining of the
      .                               // table. This second scan is guaranteed to find an empty
      .                               // slot (due to the load factor) before hitting the trailing
      .                               // control bytes (containing EMPTY).
 52,948 ( 0.03%)                      if unlikely(is_full(*self.ctrl(result))) {
      .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
      .                                   debug_assert_ne!(probe_seq.pos, 0);
      .                                   return Group::load_aligned(self.ctrl(0))
      .                                       .match_empty_or_deleted()
      .                                       .lowest_set_bit_nonzero();
      .                               }
      .           
      .                               return result;
-- line 1236 ----------------------------------------
-- line 1278 ----------------------------------------
      .               /// Returns an iterator-like object for a probe sequence on the table.
      .               ///
      .               /// This iterator never terminates, but is guaranteed to visit each bucket
      .               /// group exactly once. The loop using `probe_seq` must terminate upon
      .               /// reaching a group containing an empty bucket.
      .               #[inline]
      .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
      .                   ProbeSeq {
188,352 ( 0.10%)              pos: h1(hash) & self.bucket_mask,
      .                       stride: 0,
      .                   }
      .               }
      .           
      .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
      .               /// in the table, otherwise returns error
      .               #[cfg(feature = "raw")]
      .               #[inline]
-- line 1294 ----------------------------------------
-- line 1300 ----------------------------------------
      .                   } else {
      .                       self.record_item_insert_at(index, old_ctrl, hash);
      .                       Ok(index)
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
 77,010 ( 0.04%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
      .                   self.set_ctrl_h2(index, hash);
 61,608 ( 0.03%)          self.items += 1;
      .               }
      .           
      .               #[inline]
      .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
      .                   let probe_seq_pos = self.probe_seq(hash).pos;
      .                   let probe_index =
      .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
      .                   probe_index(i) == probe_index(new_i)
-- line 1318 ----------------------------------------
-- line 1349 ----------------------------------------
      .                   // replicate the buckets at the end of the trailing group. For example
      .                   // with 2 buckets and a group size of 4, the control bytes will look
      .                   // like this:
      .                   //
      .                   //     Real    |             Replicated
      .                   // ---------------------------------------------
      .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
      .                   // ---------------------------------------------
111,102 ( 0.06%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
      .           
 37,034 ( 0.02%)          *self.ctrl(index) = ctrl;
 37,034 ( 0.02%)          *self.ctrl(index2) = ctrl;
      .               }
      .           
      .               /// Returns a pointer to a control byte.
      .               #[inline]
      .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
      .                   debug_assert!(index < self.num_ctrl_bytes());
      .                   self.ctrl.as_ptr().add(index)
      .               }
      .           
      .               #[inline]
      .               fn buckets(&self) -> usize {
  1,038 ( 0.00%)          self.bucket_mask + 1
      .               }
      .           
      .               #[inline]
      .               fn num_ctrl_bytes(&self) -> usize {
      .                   self.bucket_mask + 1 + Group::WIDTH
      .               }
      .           
      .               #[inline]
      .               fn is_empty_singleton(&self) -> bool {
  3,137 ( 0.00%)          self.bucket_mask == 0
      .               }
      .           
      .               #[allow(clippy::mut_mut)]
      .               #[inline]
    451 ( 0.00%)      unsafe fn prepare_resize(
      .                   &self,
      .                   table_layout: TableLayout,
      .                   capacity: usize,
      .                   fallibility: Fallibility,
      .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
      .                   debug_assert!(self.items <= capacity);
      .           
      .                   // Allocate and initialize the new table.
  1,595 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
      .                       self.alloc.clone(),
      .                       table_layout,
      .                       capacity,
      .                       fallibility,
      .                   )?;
  1,030 ( 0.00%)          new_table.growth_left -= self.items;
      .                   new_table.items = self.items;
      .           
      .                   // The hash function may panic, in which case we simply free the new
      .                   // table without dropping any elements that may have been copied into
      .                   // it.
      .                   //
      .                   // This guard is also used to free the old table on success, see
      .                   // the comment at the bottom of this function.
    328 ( 0.00%)          Ok(guard(new_table, move |self_| {
    515 ( 0.00%)              if !self_.is_empty_singleton() {
      .                           self_.free_buckets(table_layout);
      .                       }
      .                   }))
    328 ( 0.00%)      }
      .           
      .               #[inline]
      .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
      .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
      .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
      .                       Some(lco) => lco,
      .                       None => hint::unreachable_unchecked(),
      .                   };
      .                   self.alloc.deallocate(
    186 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
      .                       layout,
      .                   );
      .               }
      .           
      .               /// Marks all table buckets as empty without dropping their contents.
      .               #[inline]
      .               fn clear_no_drop(&mut self) {
      .                   if !self.is_empty_singleton() {
-- line 1434 ----------------------------------------
-- line 1667 ----------------------------------------
      .                       }
      .                   }
      .               }
      .           }
      .           #[cfg(not(feature = "nightly"))]
      .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn drop(&mut self) {
  1,085 ( 0.00%)          if !self.table.is_empty_singleton() {
      .                       unsafe {
      .                           self.drop_elements();
      .                           self.free_buckets();
      .                       }
      .                   }
      .               }
      .           }
      .           
-- line 1683 ----------------------------------------
-- line 1798 ----------------------------------------
      .           
      .           impl<T> Iterator for RawIterRange<T> {
      .               type Item = Bucket<T>;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<Bucket<T>> {
      .                   unsafe {
      .                       loop {
  2,120 ( 0.00%)                  if let Some(index) = self.current_group.lowest_set_bit() {
      .                               self.current_group = self.current_group.remove_lowest_bit();
      .                               return Some(self.data.next_n(index));
      .                           }
      .           
  3,726 ( 0.00%)                  if self.next_ctrl >= self.end {
      .                               return None;
      .                           }
      .           
      .                           // We might read past self.end up to the next group boundary,
      .                           // but this is fine because it only occurs on tables smaller
      .                           // than the group size where the trailing control bytes are all
      .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
      .                           // to the group size (since tables are power-of-two sized).
-- line 1819 ----------------------------------------
-- line 1990 ----------------------------------------
      .           }
      .           
      .           impl<T> Iterator for RawIter<T> {
      .               type Item = Bucket<T>;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<Bucket<T>> {
      .                   if let Some(b) = self.iter.next() {
 43,264 ( 0.02%)              self.items -= 1;
      .                       Some(b)
      .                   } else {
      .                       // We don't check against items == 0 here to allow the
      .                       // compiler to optimize away the item count entirely if the
      .                       // iterator length is never queried.
      .                       debug_assert_eq!(self.items, 0);
      .                       None
      .                   }
-- line 2006 ----------------------------------------
-- line 2178 ----------------------------------------
      .               }
      .           }
      .           impl<'a, A: Allocator + Clone> RawIterHashInner<'a, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn new(table: &'a RawTableInner<A>, hash: u64) -> Self {
      .                   unsafe {
      .                       let h2_hash = h2(hash);
      .                       let probe_seq = table.probe_seq(hash);
 18,727 ( 0.01%)              let group = Group::load(table.ctrl(probe_seq.pos));
      .                       let bitmask = group.match_byte(h2_hash).into_iter();
      .           
      .                       RawIterHashInner {
      .                           table,
      .                           h2_hash,
      .                           probe_seq,
      .                           group,
      .                           bitmask,
-- line 2194 ----------------------------------------
-- line 2195 ----------------------------------------
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, T, A: Allocator + Clone> Iterator for RawIterHash<'a, T, A> {
      .               type Item = Bucket<T>;
      .           
    608 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
      .                   unsafe {
      .                       match self.inner.next() {
    304 ( 0.00%)                  Some(index) => Some(self.inner.table.bucket(index)),
      .                           None => None,
      .                       }
      .                   }
    608 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, A: Allocator + Clone> Iterator for RawIterHashInner<'a, A> {
      .               type Item = usize;
      .           
      .               fn next(&mut self) -> Option<Self::Item> {
      .                   unsafe {
      .                       loop {
      .                           if let Some(bit) = self.bitmask.next() {
 13,142 ( 0.01%)                      let index = (self.probe_seq.pos + bit) & self.table.bucket_mask;
      .                               return Some(index);
      .                           }
 16,682 ( 0.01%)                  if likely(self.group.match_empty().any_bit_set()) {
      .                               return None;
      .                           }
      .                           self.probe_seq.move_next(self.table.bucket_mask);
      .                           self.group = Group::load(self.table.ctrl(self.probe_seq.pos));
  3,150 ( 0.00%)                  self.bitmask = self.group.match_byte(self.h2_hash).into_iter();
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           #[cfg(test)]
      .           mod test_map {
      .               use super::*;
-- line 2236 ----------------------------------------

158,900 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir               

-- line 5 ----------------------------------------
      .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
      .           unsafe impl GlobalAlloc for System {
      .               #[inline]
      .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
      .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
      .                   // So only rely on MIN_ALIGN if size >= align.
      .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
      .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
217,788 ( 0.12%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
163,341 ( 0.09%)              libc::malloc(layout.size()) as *mut u8
      .                   } else {
      .                       #[cfg(target_os = "macos")]
      .                       {
      .                           if layout.align() > (1 << 31) {
      .                               return ptr::null_mut();
      .                           }
      .                       }
      .                       aligned_malloc(&layout)
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
      .                   // See the comment above in `alloc` for why this check looks the way it does.
  5,432 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
  8,148 ( 0.00%)              libc::calloc(layout.size(), 1) as *mut u8
      .                   } else {
      .                       let ptr = self.alloc(layout);
      .                       if !ptr.is_null() {
      .                           ptr::write_bytes(ptr, 0, layout.size());
      .                       }
      .                       ptr
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
 55,794 ( 0.03%)          libc::free(ptr as *mut libc::c_void)
      .               }
      .           
      .               #[inline]
      .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
 17,316 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
 34,632 ( 0.02%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
      .                   } else {
      .                       realloc_fallback(self, ptr, layout, new_size)
      .                   }
      .               }
      .           }
      .           
      .           cfg_if::cfg_if! {
      .               if #[cfg(any(
-- line 56 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs
--------------------------------------------------------------------------------
Ir              

-- line 8 ----------------------------------------
     .           };
     .           use rustc_ast_pretty::pprust::token_to_string;
     .           use rustc_data_structures::fx::FxHashMap;
     .           use rustc_errors::PResult;
     .           use rustc_span::Span;
     .           
     .           impl<'a> StringReader<'a> {
     .               pub(super) fn into_token_trees(self) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
    38 ( 0.00%)          let mut tt_reader = TokenTreesReader {
     .                       string_reader: self,
     2 ( 0.00%)              token: Token::dummy(),
     .                       open_braces: Vec::new(),
     .                       unmatched_braces: Vec::new(),
     .                       matching_delim_spans: Vec::new(),
     .                       last_unclosed_found_span: None,
     .                       last_delim_empty_block_spans: FxHashMap::default(),
     .                       matching_block_spans: Vec::new(),
     .                   };
     2 ( 0.00%)          let res = tt_reader.parse_all_token_trees();
    12 ( 0.00%)          (res, tt_reader.unmatched_braces)
     .               }
     .           }
     .           
     .           struct TokenTreesReader<'a> {
     .               string_reader: StringReader<'a>,
     .               token: Token,
     .               /// Stack of open delimiters and their spans. Used for error message.
     .               open_braces: Vec<(token::DelimToken, Span)>,
-- line 35 ----------------------------------------
-- line 43 ----------------------------------------
     .               last_delim_empty_block_spans: FxHashMap<token::DelimToken, Span>,
     .               /// Collect the spans of braces (Open, Close). Used only
     .               /// for detecting if blocks are empty and only braces.
     .               matching_block_spans: Vec<(Span, Span)>,
     .           }
     .           
     .           impl<'a> TokenTreesReader<'a> {
     .               // Parse a stream of tokens into a list of `TokenTree`s, up to an `Eof`.
    16 ( 0.00%)      fn parse_all_token_trees(&mut self) -> PResult<'a, TokenStream> {
     .                   let mut buf = TokenStreamBuilder::default();
     .           
     .                   self.bump();
   236 ( 0.00%)          while self.token != token::Eof {
   928 ( 0.00%)              buf.push(self.parse_token_tree()?);
     .                   }
     .           
     .                   Ok(buf.into_token_stream())
    18 ( 0.00%)      }
     .           
     .               // Parse a stream of tokens into a list of `TokenTree`s, up to a `CloseDelim`.
     .               fn parse_token_trees_until_close_delim(&mut self) -> TokenStream {
     .                   let mut buf = TokenStreamBuilder::default();
     .                   loop {
 7,294 ( 0.00%)              if let token::CloseDelim(..) = self.token.kind {
     .                           return buf.into_token_stream();
     .                       }
     .           
15,735 ( 0.01%)              match self.parse_token_tree() {
28,323 ( 0.02%)                  Ok(tree) => buf.push(tree),
     .                           Err(mut e) => {
     .                               e.emit();
     .                               return buf.into_token_stream();
     .                           }
     .                       }
     .                   }
     .               }
     .           
29,367 ( 0.02%)      fn parse_token_tree(&mut self) -> PResult<'a, TreeAndSpacing> {
 6,526 ( 0.00%)          let sm = self.string_reader.sess.source_map();
     .           
27,367 ( 0.02%)          match self.token.kind {
     .                       token::Eof => {
     .                           let msg = "this file contains an unclosed delimiter";
     .                           let mut err =
     .                               self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, msg);
     .                           for &(_, sp) in &self.open_braces {
     .                               err.span_label(sp, "unclosed delimiter");
     .                               self.unmatched_braces.push(UnmatchedBrace {
     .                                   expected_delim: token::DelimToken::Brace,
-- line 91 ----------------------------------------
-- line 113 ----------------------------------------
     .                                   err.span_label(
     .                                       *close_sp,
     .                                       "...as it matches this but it has different indentation",
     .                                   );
     .                               }
     .                           }
     .                           Err(err)
     .                       }
   500 ( 0.00%)              token::OpenDelim(delim) => {
     .                           // The span for beginning of the delimited section
   500 ( 0.00%)                  let pre_span = self.token.span;
     .           
     .                           // Parse the open delimiter.
 3,500 ( 0.00%)                  self.open_braces.push((delim, self.token.span));
     .                           self.bump();
     .           
     .                           // Parse the token trees within the delimiters.
     .                           // We stop at any delimiter so we can try to recover if the user
     .                           // uses an incorrect delimiter.
   500 ( 0.00%)                  let tts = self.parse_token_trees_until_close_delim();
     .           
     .                           // Expand to cover the entire delimited token tree
 2,500 ( 0.00%)                  let delim_span = DelimSpan::from_pair(pre_span, self.token.span);
     .           
 1,000 ( 0.00%)                  match self.token.kind {
     .                               // Correct delimiter.
 1,000 ( 0.00%)                      token::CloseDelim(d) if d == delim => {
     .                                   let (open_brace, open_brace_span) = self.open_braces.pop().unwrap();
 1,000 ( 0.00%)                          let close_brace_span = self.token.span;
     .           
 1,500 ( 0.00%)                          if tts.is_empty() {
   252 ( 0.00%)                              let empty_block_span = open_brace_span.to(close_brace_span);
   336 ( 0.00%)                              if !sm.is_multiline(empty_block_span) {
     .                                           // Only track if the block is in the form of `{}`, otherwise it is
     .                                           // likely that it was written on purpose.
     .                                           self.last_delim_empty_block_spans.insert(delim, empty_block_span);
     .                                       }
     .                                   }
     .           
     .                                   //only add braces
 2,000 ( 0.00%)                          if let (DelimToken::Brace, DelimToken::Brace) = (open_brace, delim) {
     .                                       self.matching_block_spans.push((open_brace_span, close_brace_span));
     .                                   }
     .           
   500 ( 0.00%)                          if self.open_braces.is_empty() {
     .                                       // Clear up these spans to avoid suggesting them as we've found
     .                                       // properly matched delimiters so far for an entire block.
     .                                       self.matching_delim_spans.clear();
     .                                   } else {
     .                                       self.matching_delim_spans.push((
     .                                           open_brace,
     .                                           open_brace_span,
     .                                           close_brace_span,
-- line 165 ----------------------------------------
-- line 218 ----------------------------------------
     .                               token::Eof => {
     .                                   // Silently recover, the EOF token will be seen again
     .                                   // and an error emitted then. Thus we don't pop from
     .                                   // self.open_braces here.
     .                               }
     .                               _ => {}
     .                           }
     .           
 3,500 ( 0.00%)                  Ok(TokenTree::Delimited(delim_span, delim, tts).into())
     .                       }
     .                       token::CloseDelim(delim) => {
     .                           // An unexpected closing delimiter (i.e., there is no
     .                           // matching opening delimiter).
     .                           let token_str = token_to_string(&self.token);
     .                           let msg = format!("unexpected closing delimiter: `{}`", token_str);
     .                           let mut err =
     .                               self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, &msg);
-- line 234 ----------------------------------------
-- line 253 ----------------------------------------
     .                                   err.span_label(parent.1, "...matches this closing brace");
     .                               }
     .                           }
     .           
     .                           err.span_label(self.token.span, "unexpected closing delimiter");
     .                           Err(err)
     .                       }
     .                       _ => {
13,815 ( 0.01%)                  let tt = TokenTree::Token(self.token.take());
     .                           let mut spacing = self.bump();
 5,526 ( 0.00%)                  if !self.token.is_op() {
     .                               spacing = Alone;
     .                           }
16,578 ( 0.01%)                  Ok((tt, spacing))
     .                       }
     .                   }
26,104 ( 0.01%)      }
     .           
     .               fn bump(&mut self) -> Spacing {
31,379 ( 0.02%)          let (spacing, token) = self.string_reader.next_token();
16,333 ( 0.01%)          self.token = token;
     .                   spacing
     .               }
     .           }
     .           
   500 ( 0.00%)  #[derive(Default)]
     .           struct TokenStreamBuilder {
     .               buf: Vec<TreeAndSpacing>,
     .           }
     .           
     .           impl TokenStreamBuilder {
42,419 ( 0.02%)      fn push(&mut self, (tree, joint): TreeAndSpacing) {
19,782 ( 0.01%)          if let Some((TokenTree::Token(prev_token), Joint)) = self.buf.last() {
 1,532 ( 0.00%)              if let TokenTree::Token(token) = &tree {
 3,206 ( 0.00%)                  if let Some(glued) = prev_token.glue(token) {
     .                               self.buf.pop();
 2,724 ( 0.00%)                      self.buf.push((TokenTree::Token(glued), joint));
     .                               return;
     .                           }
     .                       }
     .                   }
15,180 ( 0.01%)          self.buf.push((tree, joint))
26,104 ( 0.01%)      }
     .           
     .               fn into_token_stream(self) -> TokenStream {
 5,018 ( 0.00%)          TokenStream::new(self.buf)
     .               }
     .           }

12,184 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/thread/local.rs
--------------------------------------------------------------------------------
Ir               

-- line 173 ----------------------------------------
      .           #[unstable(feature = "thread_local_internals", reason = "should not be necessary", issue = "none")]
      .           #[macro_export]
      .           #[allow_internal_unstable(thread_local_internals, cfg_target_thread_local, thread_local)]
      .           #[allow_internal_unsafe]
      .           macro_rules! __thread_local_inner {
      .               // used to generate the `LocalKey` value for const-initialized thread locals
      .               (@key $t:ty, const $init:expr) => {{
      .                   #[cfg_attr(not(windows), inline)] // see comments below
      4 ( 0.00%)          unsafe fn __getit() -> $crate::option::Option<&'static $t> {
      .                       const INIT_EXPR: $t = $init;
      .           
      .                       // wasm without atomics maps directly to `static mut`, and dtors
      .                       // aren't implemented because thread dtors aren't really a thing
      .                       // on wasm right now
      .                       //
      .                       // FIXME(#84224) this should come after the `target_thread_local`
      .                       // block.
-- line 189 ----------------------------------------
-- line 211 ----------------------------------------
      .                           }
      .           
      .                           // 0 == dtor not registered
      .                           // 1 == dtor registered, dtor not run
      .                           // 2 == dtor registered and is running or has run
      .                           #[thread_local]
      .                           static mut STATE: u8 = 0;
      .           
      8 ( 0.00%)                  unsafe extern "C" fn destroy(ptr: *mut u8) {
      .                               let ptr = ptr as *mut $t;
      .           
      .                               unsafe {
      .                                   debug_assert_eq!(STATE, 1);
     12 ( 0.00%)                          STATE = 2;
      .                                   $crate::ptr::drop_in_place(ptr);
      .                               }
      8 ( 0.00%)                  }
      .           
      .                           unsafe {
     60 ( 0.00%)                      match STATE {
      .                                   // 0 == we haven't registered a destructor, so do
      .                                   //   so now.
      .                                   0 => {
      .                                       $crate::thread::__FastLocalKeyInner::<$t>::register_dtor(
      .                                           $crate::ptr::addr_of_mut!(VAL) as *mut u8,
      .                                           destroy,
      .                                       );
      8 ( 0.00%)                              STATE = 1;
      .                                       Some(&VAL)
      .                                   }
      .                                   // 1 == the destructor is registered and the value
      .                                   //   is valid, so return the pointer.
      .                                   1 => Some(&VAL),
      .                                   // otherwise the destructor has already run, so we
      .                                   // can't give access.
      .                                   _ => None,
-- line 246 ----------------------------------------
-- line 257 ----------------------------------------
      .                       {
      .                           #[inline]
      .                           const fn __init() -> $t { INIT_EXPR }
      .                           static __KEY: $crate::thread::__OsLocalKeyInner<$t> =
      .                               $crate::thread::__OsLocalKeyInner::new();
      .                           #[allow(unused_unsafe)]
      .                           unsafe { __KEY.get(__init) }
      .                       }
 46,169 ( 0.03%)          }
      .           
      .                   unsafe {
      .                       $crate::thread::LocalKey::new(__getit)
      .                   }
      .               }};
      .           
      .               // used to generate the `LocalKey` value for `thread_local!`
      .               (@key $t:ty, $init:expr) => {
-- line 273 ----------------------------------------
-- line 318 ----------------------------------------
      .                           static __KEY: $crate::thread::__OsLocalKeyInner<$t> =
      .                               $crate::thread::__OsLocalKeyInner::new();
      .           
      .                           // FIXME: remove the #[allow(...)] marker when macros don't
      .                           // raise warning for missing/extraneous unsafe blocks anymore.
      .                           // See https://github.com/rust-lang/rust/issues/74838.
      .                           #[allow(unused_unsafe)]
      .                           unsafe { __KEY.get(__init) }
176,206 ( 0.10%)              }
      .           
      .                       unsafe {
      .                           $crate::thread::LocalKey::new(__getit)
      .                       }
      .                   }
      .               };
      .               ($(#[$attr:meta])* $vis:vis $name:ident, $t:ty, $($init:tt)*) => {
      .                   $(#[$attr])* $vis const $name: $crate::thread::LocalKey<$t> =
-- line 334 ----------------------------------------
-- line 377 ----------------------------------------
      .               /// this key yet.
      .               ///
      .               /// # Panics
      .               ///
      .               /// This function will `panic!()` if the key currently has its
      .               /// destructor running, and it **may** panic if the destructor has
      .               /// previously been run for this thread.
      .               #[stable(feature = "rust1", since = "1.0.0")]
     12 ( 0.00%)      pub fn with<F, R>(&'static self, f: F) -> R
      .               where
      .                   F: FnOnce(&T) -> R,
      .               {
     17 ( 0.00%)          self.try_with(f).expect(
      .                       "cannot access a Thread Local Storage value \
      .                        during or after destruction",
      .                   )
     16 ( 0.00%)      }
      .           
      .               /// Acquires a reference to the value in this TLS key.
      .               ///
      .               /// This will lazily initialize the value if this thread has not referenced
      .               /// this key yet. If the key has been destroyed (which may happen if this is called
      .               /// in a destructor), this function will return an [`AccessError`].
      .               ///
      .               /// # Panics
-- line 401 ----------------------------------------
-- line 404 ----------------------------------------
      .               /// key's initializer panics.
      .               #[stable(feature = "thread_local_try_with", since = "1.26.0")]
      .               #[inline]
      .               pub fn try_with<F, R>(&'static self, f: F) -> Result<R, AccessError>
      .               where
      .                   F: FnOnce(&T) -> R,
      .               {
      .                   unsafe {
147,583 ( 0.08%)              let thread_local = (self.inner)().ok_or(AccessError)?;
110,909 ( 0.06%)              Ok(f(thread_local))
      .                   }
      .               }
      .           }
      .           
      .           mod lazy {
      .               use crate::cell::UnsafeCell;
      .               use crate::hint;
      .               use crate::mem;
-- line 421 ----------------------------------------
-- line 434 ----------------------------------------
      .                       // the inner cell nor mutable reference to the Option<T> inside said
      .                       // cell. This make it safe to hand a reference, though the lifetime
      .                       // of 'static is itself unsafe, making the get method unsafe.
      .                       unsafe { (*self.inner.get()).as_ref() }
      .                   }
      .           
      .                   /// The caller must ensure that no reference is active: this method
      .                   /// needs unique access.
      9 ( 0.00%)          pub unsafe fn initialize<F: FnOnce() -> T>(&self, init: F) -> &'static T {
      .                       // Execute the initialization up front, *then* move it into our slot,
      .                       // just in case initialization fails.
      .                       let value = init();
      .                       let ptr = self.inner.get();
      .           
      .                       // SAFETY:
      .                       //
      .                       // note that this can in theory just be `*ptr = Some(value)`, but due to
-- line 450 ----------------------------------------
-- line 475 ----------------------------------------
      .                           // always work it empirically doesn't seem to always get optimized away,
      .                           // which means that using something like `try_with` can pull in
      .                           // panicking code and cause a large size bloat.
      .                           match *ptr {
      .                               Some(ref x) => x,
      .                               None => hint::unreachable_unchecked(),
      .                           }
      .                       }
     10 ( 0.00%)          }
      .           
      .                   /// The other methods hand out references while taking &self.
      .                   /// As such, callers of this method must ensure no `&` and `&mut` are
      .                   /// available and used at the same time.
      .                   #[allow(unused)]
      .                   pub unsafe fn take(&mut self) -> Option<T> {
      .                       // SAFETY: See doc comment for this method.
      .                       unsafe { (*self.inner.get()).take() }
-- line 491 ----------------------------------------
-- line 596 ----------------------------------------
      .                       // SAFETY: See the definitions of `LazyKeyInner::get` and
      .                       // `try_initialize` for more information.
      .                       //
      .                       // The caller must ensure no mutable references are ever active to
      .                       // the inner cell or the inner T when this is called.
      .                       // The `try_initialize` is dependant on the passed `init` function
      .                       // for this.
      .                       unsafe {
 64,503 ( 0.04%)                  match self.inner.get() {
      .                               Some(val) => Some(val),
     18 ( 0.00%)                      None => self.try_initialize(init),
      .                           }
      .                       }
      .                   }
      .           
      .                   // `try_initialize` is only called once per fast thread local variable,
      .                   // except in corner cases where thread_local dtors reference other
      .                   // thread_local's, or it is being recursively initialized.
      .                   //
      .                   // Macos: Inlining this function can cause two `tlv_get_addr` calls to
      .                   // be performed for every call to `Key::get`.
      .                   // LLVM issue: https://bugs.llvm.org/show_bug.cgi?id=41722
      .                   #[inline(never)]
      8 ( 0.00%)          unsafe fn try_initialize<F: FnOnce() -> T>(&self, init: F) -> Option<&'static T> {
      .                       // SAFETY: See comment above (this function doc).
      .                       if !mem::needs_drop::<T>() || unsafe { self.try_register_dtor() } {
      .                           // SAFETY: See comment above (his function doc).
      6 ( 0.00%)                  Some(unsafe { self.inner.initialize(init) })
      .                       } else {
      .                           None
      .                       }
      8 ( 0.00%)          }
      .           
      .                   // `try_register_dtor` is only called once per fast thread local
      .                   // variable, except in corner cases where thread_local dtors reference
      .                   // other thread_local's, or it is being recursively initialized.
      .                   unsafe fn try_register_dtor(&self) -> bool {
      6 ( 0.00%)              match self.dtor_state.get() {
      .                           DtorState::Unregistered => {
      .                               // SAFETY: dtor registration happens before initialization.
      .                               // Passing `self` as a pointer while using `destroy_value<T>`
      .                               // is safe because the function will build a pointer to a
      .                               // Key<T>, which is the type of self and so find the correct
      .                               // size.
      6 ( 0.00%)                      unsafe { register_dtor(self as *const _ as *mut u8, destroy_value::<T>) };
      .                               self.dtor_state.set(DtorState::Registered);
      .                               true
      .                           }
      .                           DtorState::Registered => {
      .                               // recursively initialized
      .                               true
      .                           }
      .                           DtorState::RunningOrHasRun => false,
      .                       }
      .                   }
      .               }
      .           
      4 ( 0.00%)      unsafe extern "C" fn destroy_value<T>(ptr: *mut u8) {
      .                   let ptr = ptr as *mut Key<T>;
      .           
      .                   // SAFETY:
      .                   //
      .                   // The pointer `ptr` has been built just above and comes from
      .                   // `try_register_dtor` where it is originally a Key<T> coming from `self`,
      .                   // making it non-NUL and of the correct type.
      .                   //
-- line 661 ----------------------------------------

      4 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/thread/local.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs
--------------------------------------------------------------------------------
Ir                 

-- line 14 ----------------------------------------
        .           
        .           pub type EncodeResult = Result<(), !>;
        .           
        .           pub struct Encoder {
        .               pub data: Vec<u8>,
        .           }
        .           
        .           impl Encoder {
        1 ( 0.00%)      pub fn new(data: Vec<u8>) -> Encoder {
        4 ( 0.00%)          Encoder { data }
        1 ( 0.00%)      }
        .           
        1 ( 0.00%)      pub fn into_inner(self) -> Vec<u8> {
        4 ( 0.00%)          self.data
        1 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn position(&self) -> usize {
    1,452 ( 0.00%)          self.data.len()
        .               }
        .           }
        .           
        .           macro_rules! write_leb128 {
        .               ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{
        .                   const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);
        .                   let old_len = $enc.data.len();
        .           
-- line 40 ----------------------------------------
-- line 67 ----------------------------------------
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> EncodeResult {
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn emit_usize(&mut self, v: usize) -> EncodeResult {
   50,634 ( 0.03%)          write_leb128!(self, v, usize, write_usize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u128(&mut self, v: u128) -> EncodeResult {
       21 ( 0.00%)          write_leb128!(self, v, u128, write_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u64(&mut self, v: u64) -> EncodeResult {
      364 ( 0.00%)          write_leb128!(self, v, u64, write_u64_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u32(&mut self, v: u32) -> EncodeResult {
   46,573 ( 0.03%)          write_leb128!(self, v, u32, write_u32_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u16(&mut self, v: u16) -> EncodeResult {
        .                   self.data.extend_from_slice(&v.to_le_bytes());
        .                   Ok(())
        .               }
        .           
-- line 98 ----------------------------------------
-- line 131 ----------------------------------------
        .               #[inline]
        .               fn emit_i8(&mut self, v: i8) -> EncodeResult {
        .                   let as_u8: u8 = unsafe { std::mem::transmute(v) };
        .                   self.emit_u8(as_u8)
        .               }
        .           
        .               #[inline]
        .               fn emit_bool(&mut self, v: bool) -> EncodeResult {
      676 ( 0.00%)          self.emit_u8(if v { 1 } else { 0 })
        .               }
        .           
        .               #[inline]
        .               fn emit_f64(&mut self, v: f64) -> EncodeResult {
        .                   let as_u64: u64 = v.to_bits();
        .                   self.emit_u64(as_u64)
        .               }
        .           
-- line 147 ----------------------------------------
-- line 549 ----------------------------------------
        .               #[inline]
        .               pub fn advance(&mut self, bytes: usize) {
        .                   self.position += bytes;
        .               }
        .           
        .               #[inline]
        .               pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {
        .                   let start = self.position;
       21 ( 0.00%)          self.position += bytes;
       21 ( 0.00%)          &self.data[start..self.position]
        .               }
        .           }
        .           
        .           macro_rules! read_leb128 {
        .               ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};
        .           }
        .           
        .           impl<'a> serialize::Decoder for Decoder<'a> {
        .               #[inline]
        .               fn read_unit(&mut self) -> () {
        .                   ()
        .               }
        .           
        .               #[inline]
        .               fn read_u128(&mut self) -> u128 {
      583 ( 0.00%)          read_leb128!(self, read_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_u64(&mut self) -> u64 {
    3,137 ( 0.00%)          read_leb128!(self, read_u64_leb128)
        .               }
        .           
        .               #[inline]
   40,918 ( 0.02%)      fn read_u32(&mut self) -> u32 {
  179,660 ( 0.10%)          read_leb128!(self, read_u32_leb128)
   81,836 ( 0.04%)      }
        .           
        .               #[inline]
        .               fn read_u16(&mut self) -> u16 {
  561,386 ( 0.31%)          let bytes = [self.data[self.position], self.data[self.position + 1]];
   80,198 ( 0.04%)          let value = u16::from_le_bytes(bytes);
  160,396 ( 0.09%)          self.position += 2;
        .                   value
        .               }
        .           
        .               #[inline]
        .               fn read_u8(&mut self) -> u8 {
1,986,593 ( 1.09%)          let value = self.data[self.position];
  388,663 ( 0.21%)          self.position += 1;
        .                   value
        .               }
        .           
        .               #[inline]
  193,670 ( 0.11%)      fn read_usize(&mut self) -> usize {
  193,740 ( 0.11%)          read_leb128!(self, read_usize_leb128)
  387,340 ( 0.21%)      }
        .           
        .               #[inline]
        .               fn read_i128(&mut self) -> i128 {
        .                   read_leb128!(self, read_i128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_i64(&mut self) -> i64 {
-- line 613 ----------------------------------------
-- line 637 ----------------------------------------
        .               #[inline]
        .               fn read_isize(&mut self) -> isize {
        .                   read_leb128!(self, read_isize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_bool(&mut self) -> bool {
        .                   let value = self.read_u8();
    6,744 ( 0.00%)          value != 0
        .               }
        .           
        .               #[inline]
        .               fn read_f64(&mut self) -> f64 {
        .                   let bits = self.read_u64();
        .                   f64::from_bits(bits)
        .               }
        .           
-- line 653 ----------------------------------------
-- line 660 ----------------------------------------
        .               #[inline]
        .               fn read_char(&mut self) -> char {
        .                   let bits = self.read_u32();
        .                   std::char::from_u32(bits).unwrap()
        .               }
        .           
        .               #[inline]
        .               fn read_str(&mut self) -> Cow<'_, str> {
   40,187 ( 0.02%)          let len = self.read_usize();
  222,662 ( 0.12%)          let sentinel = self.data[self.position + len];
   55,718 ( 0.03%)          assert!(sentinel == STR_SENTINEL);
        .                   let s = unsafe {
        .                       std::str::from_utf8_unchecked(&self.data[self.position..self.position + len])
        .                   };
  139,295 ( 0.08%)          self.position += len + 1;
   37,185 ( 0.02%)          Cow::Borrowed(s)
        .               }
        .           
        .               #[inline]
        .               fn read_raw_bytes_into(&mut self, s: &mut [u8]) {
       97 ( 0.00%)          let start = self.position;
      601 ( 0.00%)          self.position += s.len();
       97 ( 0.00%)          s.copy_from_slice(&self.data[start..self.position]);
        .               }
        .           }
        .           
        .           // Specializations for contiguous byte sequences follow. The default implementations for slices
        .           // encode and decode each element individually. This isn't necessary for `u8` slices when using
        .           // opaque encoders and decoders, because each `u8` is unchanged by encoding and decoding.
        .           // Therefore, we can use more efficient implementations that process the entire sequence at once.
        .           
-- line 690 ----------------------------------------

  485,747 ( 0.27%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir               

-- line 91 ----------------------------------------
      .           // maximum of number bytes needed to fill an 8-byte-sized element on which
      .           // SipHash operates. Note that for variable-sized copies which are known to be
      .           // less than 8 bytes, this function will perform more work than necessary unless
      .           // the compiler is able to optimize the extra work away.
      .           #[inline]
      .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
      .               debug_assert!(count <= 8);
      .           
  9,312 ( 0.01%)      if count == 8 {
      .                   ptr::copy_nonoverlapping(src, dst, 8);
      .                   return;
      .               }
      .           
      .               let mut i = 0;
 15,156 ( 0.01%)      if i + 3 < count {
      .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
      .                   i += 4;
      .               }
      .           
 32,555 ( 0.02%)      if i + 1 < count {
      .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
  4,701 ( 0.00%)          i += 2
      .               }
      .           
 15,156 ( 0.01%)      if i < count {
  7,771 ( 0.00%)          *dst.add(i) = *src.add(i);
      .                   i += 1;
      .               }
      .           
      .               debug_assert_eq!(i, count);
      .           }
      .           
      .           // # Implementation
      .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
      .           
      .                   hasher
      .               }
      .           
      .               // A specialized write function for values with size <= 8.
      .               #[inline]
      .               fn short_write<T>(&mut self, x: T) {
      .                   let size = mem::size_of::<T>();
 40,908 ( 0.02%)          let nbuf = self.nbuf;
      .                   debug_assert!(size <= 8);
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
      .           
266,055 ( 0.15%)          if nbuf + size < BUFFER_SIZE {
      .                       unsafe {
      .                           // The memcpy call is optimized away because the size is known.
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
      .                       }
      .           
 79,484 ( 0.04%)              self.nbuf = nbuf + size;
      .           
      .                       return;
      .                   }
      .           
 11,231 ( 0.01%)          unsafe { self.short_write_process_buffer(x) }
      .               }
      .           
      .               // A specialized write function for values with size <= 8 that should only
      .               // be called when the write would cause the buffer to fill.
      .               //
      .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
      .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
      .               // overflow) if it wasn't already.
      .               #[inline(never)]
  3,833 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
      .                   let size = mem::size_of::<T>();
  3,833 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(size <= 8);
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
      .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
      .           
      .                   // Copy first part of input into end of buffer, possibly into spill
      .                   // element. The memcpy call is optimized away because the size is known.
      .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
      .           
      .                   // Process buffer.
      .                   for i in 0..BUFFER_CAPACITY {
 38,330 ( 0.02%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
 30,664 ( 0.02%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
 34,497 ( 0.02%)              self.state.v0 ^= elem;
      .                   }
      .           
      .                   // Copy remaining input into start of buffer by copying size - 1
      .                   // elements from spill (at most size - 1 bytes could have overflowed
      .                   // into the spill). The memcpy call is optimized away because the size
      .                   // is known. And the whole copy is optimized away for size == 1.
      .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
      .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
      .           
      .                   // This function should only be called when the write fills the buffer.
      .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
      .                   // is statically known, so the branch is optimized away.
 17,837 ( 0.01%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
 15,332 ( 0.01%)          self.processed += BUFFER_SIZE;
  7,666 ( 0.00%)      }
      .           
      .               // A write function for byte slices.
      .               #[inline]
      .               fn slice_write(&mut self, msg: &[u8]) {
      .                   let length = msg.len();
  6,815 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .           
 41,564 ( 0.02%)          if nbuf + length < BUFFER_SIZE {
      .                       unsafe {
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .           
 15,188 ( 0.01%)                  if length <= 8 {
      .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
      .                           } else {
      .                               // This memcpy is *not* optimized away.
      .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
      .                           }
      .                       }
      .           
  7,605 ( 0.00%)              self.nbuf = nbuf + length;
      .           
      .                       return;
      .                   }
      .           
  4,137 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
      .               }
      .           
      .               // A write function for byte slices that should only be called when the
      .               // write would cause the buffer to fill.
      .               //
      .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
      .               // and `msg` must contain enough bytes to initialize the rest of the element
      .               // containing the byte offset `self.nbuf`.
      .               #[inline(never)]
  3,510 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
      .                   let length = msg.len();
    702 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
      .           
      .                   // Always copy first part of input into current element of buffer.
      .                   // This function should only be called when the write fills the buffer,
      .                   // so we know that there is enough input to fill the current element.
  2,106 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
    702 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
      .           
      .                   let src = msg.as_ptr();
      .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
      .           
      .                   // Process buffer.
      .           
      .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
      .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
      .                   // We know that is true, because last step ensured we have a full
      .                   // element in the buffer.
  1,404 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
      .           
      .                   for i in 0..last {
  5,371 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
  6,073 ( 0.00%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
 10,742 ( 0.01%)              self.state.v0 ^= elem;
      .                   }
      .           
      .                   // Process the remaining element-sized chunks of input.
      .                   let mut processed = needed_in_elem;
  1,404 ( 0.00%)          let input_left = length - processed;
    558 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
      .                   let extra_bytes_left = input_left % ELEM_SIZE;
      .           
      .                   for _ in 0..elems_left {
    360 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
    360 ( 0.00%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
    360 ( 0.00%)              self.state.v0 ^= elem;
    720 ( 0.00%)              processed += ELEM_SIZE;
      .                   }
      .           
      .                   // Copy remaining input into start of buffer.
      .                   let src = msg.as_ptr().add(processed);
      .                   let dst = self.buf.as_mut_ptr() as *mut u8;
      .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
      .           
    702 ( 0.00%)          self.nbuf = extra_bytes_left;
  3,510 ( 0.00%)          self.processed += nbuf + processed;
  4,212 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn finish128(mut self) -> (u64, u64) {
      .                   debug_assert!(self.nbuf < BUFFER_SIZE);
      .           
      .                   // Process full elements in buffer.
  3,132 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
      .           
      .                   // Since we're consuming self, avoid updating members for a potential
      .                   // performance gain.
  4,176 ( 0.00%)          let mut state = self.state;
      .           
      .                   for i in 0..last {
  2,892 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
  2,892 ( 0.00%)              state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut state);
  2,892 ( 0.00%)              state.v0 ^= elem;
      .                   }
      .           
      .                   // Get remaining partial element.
  2,088 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
      .                       unsafe {
      .                           // Ensure element is initialized by writing zero bytes. At most
      .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
      .                           // to write this many because we have the spill and we maintain
      .                           // `self.nbuf` such that this write will start before the spill.
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
      .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
    888 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
      .                       }
      .                   } else {
      .                       0
      .                   };
      .           
      .                   // Finalize the hash.
  2,976 ( 0.00%)          let length = self.processed + self.nbuf;
  2,086 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
      .           
  1,043 ( 0.00%)          state.v3 ^= b;
      .                   Sip24Rounds::c_rounds(&mut state);
  1,043 ( 0.00%)          state.v0 ^= b;
      .           
  1,043 ( 0.00%)          state.v2 ^= 0xee;
      .                   Sip24Rounds::d_rounds(&mut state);
  2,730 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
      .           
    642 ( 0.00%)          state.v1 ^= 0xdd;
      .                   Sip24Rounds::d_rounds(&mut state);
    642 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
      .           
      .                   (_0, _1)
      .               }
      .           }
      .           
      .           impl Hasher for SipHasher128 {
      .               #[inline]
      .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
      .           }
      .           
      .           #[derive(Debug, Clone, Default)]
      .           struct Sip24Rounds;
      .           
      .           impl Sip24Rounds {
      .               #[inline]
      .               fn c_rounds(state: &mut State) {
167,259 ( 0.09%)          compress!(state);
188,932 ( 0.10%)          compress!(state);
      .               }
      .           
      .               #[inline]
      .               fn d_rounds(state: &mut State) {
  5,456 ( 0.00%)          compress!(state);
  5,456 ( 0.00%)          compress!(state);
  5,456 ( 0.00%)          compress!(state);
  4,414 ( 0.00%)          compress!(state);
      .               }
      .           }

 25,729 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 417 ----------------------------------------
        .               /// # #![allow(unused_mut)]
        .               /// let mut vec: Vec<i32> = Vec::new();
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        .               pub const fn new() -> Self {
  181,220 ( 0.10%)          Vec { buf: RawVec::NEW, len: 0 }
       48 ( 0.00%)      }
        .           
        .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
        .               ///
        .               /// The vector will be able to hold exactly `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the vector will not allocate.
        .               ///
        .               /// It is important to note that although the returned vector has the
        .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 601 ----------------------------------------
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
   77,080 ( 0.04%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
        .               }
        .           
        .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
-- line 617 ----------------------------------------
-- line 677 ----------------------------------------
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
    3,279 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
        .               }
        .           
        .               /// Decomposes a `Vec<T>` into its raw components.
        .               ///
        .               /// Returns the raw pointer to the underlying data, the length of
        .               /// the vector (in elements), and the allocated capacity of the
        .               /// data (in elements). These are the same arguments in the same
        .               /// order as the arguments to [`from_raw_parts`].
-- line 693 ----------------------------------------
-- line 778 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let vec: Vec<i32> = Vec::with_capacity(10);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn capacity(&self) -> usize {
   30,636 ( 0.02%)          self.buf.capacity()
        .               }
        .           
        .               /// Reserves capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 794 ----------------------------------------
-- line 801 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve(&mut self, additional: usize) {
   12,660 ( 0.01%)          self.buf.reserve(self.len, additional);
        .               }
        .           
        .               /// Reserves the minimum capacity for exactly `additional` more elements to
        .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
        .               /// capacity will be greater than or equal to `self.len() + additional`.
        .               /// Does nothing if the capacity is already sufficient.
        .               ///
        .               /// Note that the allocator may give the collection more space than it
-- line 817 ----------------------------------------
-- line 829 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve_exact(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve_exact(&mut self, additional: usize) {
    1,159 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
        .               }
        .           
        .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `try_reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 845 ----------------------------------------
-- line 930 ----------------------------------------
        .               /// assert!(vec.capacity() >= 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn shrink_to_fit(&mut self) {
        .                   // The capacity is never less than the length, and there's nothing to do when
        .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
        .                   // by only calling it with a greater capacity.
    1,680 ( 0.00%)          if self.capacity() > self.len {
      389 ( 0.00%)              self.buf.shrink_to_fit(self.len);
        .                   }
        .               }
        .           
        .               /// Shrinks the capacity of the vector with a lower bound.
        .               ///
        .               /// The capacity will remain at least as large as both the length
        .               /// and the supplied value.
        .               ///
-- line 947 ----------------------------------------
-- line 990 ----------------------------------------
        .               /// let slice = vec.into_boxed_slice();
        .               /// assert_eq!(slice.into_vec().capacity(), 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn into_boxed_slice(mut self) -> Box<[T], A> {
        .                   unsafe {
        .                       self.shrink_to_fit();
      498 ( 0.00%)              let me = ManuallyDrop::new(self);
        .                       let buf = ptr::read(&me.buf);
        .                       let len = me.len();
        .                       buf.into_box(len).assume_init()
        .                   }
        .               }
        .           
        .               /// Shortens the vector, keeping the first `len` elements and dropping
        .               /// the rest.
-- line 1006 ----------------------------------------
-- line 1040 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.truncate(0);
        .               /// assert_eq!(vec, []);
        .               /// ```
        .               ///
        .               /// [`clear`]: Vec::clear
        .               /// [`drain`]: Vec::drain
        .               #[stable(feature = "rust1", since = "1.0.0")]
   33,352 ( 0.02%)      pub fn truncate(&mut self, len: usize) {
        .                   // This is safe because:
        .                   //
        .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
        .                   //   case avoids creating an invalid slice, and
        .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
        .                   //   such that no value will be dropped twice in case `drop_in_place`
        .                   //   were to panic once (if it panics twice, the program aborts).
        .                   unsafe {
        .                       // Note: It's intentional that this is `>` and not `>=`.
        .                       //       Changing it to `>=` has negative performance
        .                       //       implications in some cases. See #78884 for more.
   22,403 ( 0.01%)              if len > self.len {
        .                           return;
        .                       }
        .                       let remaining_len = self.len - len;
        .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
   12,699 ( 0.01%)              self.len = len;
      379 ( 0.00%)              ptr::drop_in_place(s);
        .                   }
   40,022 ( 0.02%)      }
        .           
        .               /// Extracts a slice containing the entire vector.
        .               ///
        .               /// Equivalent to `&s[..]`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1076 ----------------------------------------
-- line 1126 ----------------------------------------
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_ptr(&self) -> *const T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref`, which creates an intermediate reference.
  204,067 ( 0.11%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns an unsafe mutable pointer to the vector's buffer.
        .               ///
-- line 1142 ----------------------------------------
-- line 1162 ----------------------------------------
        .               /// }
        .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
        .               /// ```
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_mut_ptr(&mut self) -> *mut T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref_mut`, which creates an intermediate reference.
  541,566 ( 0.30%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
-- line 1178 ----------------------------------------
-- line 1259 ----------------------------------------
        .               ///
        .               /// Normally, here, one would use [`clear`] instead to correctly drop
        .               /// the contents and thus not leak memory.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   debug_assert!(new_len <= self.capacity());
        .           
   39,650 ( 0.02%)          self.len = new_len;
       92 ( 0.00%)      }
        .           
        .               /// Removes an element from the vector and returns it.
        .               ///
        .               /// The removed element is replaced by the last element of the vector.
        .               ///
        .               /// This does not preserve ordering, but is *O*(1).
        .               /// If you need to preserve the element order, use [`remove`] instead.
        .               ///
-- line 1276 ----------------------------------------
-- line 1305 ----------------------------------------
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // We replace self[index] with the last element. Note that if the
        .                       // bounds check above succeeds there must be a last element (which
        .                       // can be self[index] itself).
        .                       let value = ptr::read(self.as_ptr().add(index));
        .                       let base_ptr = self.as_mut_ptr();
        1 ( 0.00%)              ptr::copy(base_ptr.add(len - 1), base_ptr.add(index), 1);
        .                       self.set_len(len - 1);
        .                       value
        .                   }
        .               }
        .           
        .               /// Inserts an element at position `index` within the vector, shifting all
        .               /// elements after it to the right.
        .               ///
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.insert(1, 4);
        .               /// assert_eq!(vec, [1, 4, 2, 3]);
        .               /// vec.insert(4, 5);
        .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      266 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
        .                   }
        .           
       42 ( 0.00%)          let len = self.len();
       92 ( 0.00%)          if index > len {
        .                       assert_failed(index, len);
        .                   }
        .           
        .                   // space for the new element
      154 ( 0.00%)          if len == self.buf.capacity() {
        .                       self.reserve(1);
        .                   }
        .           
        .                   unsafe {
        .                       // infallible
        .                       // The spot to put the new value
        .                       {
        .                           let p = self.as_mut_ptr().add(index);
        .                           // Shift everything over to make space. (Duplicating the
        .                           // `index`th element into two consecutive places.)
      204 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
        .                           // Write it in, overwriting the first copy of the `index`th
        .                           // element.
        .                           ptr::write(p, element);
        .                       }
      144 ( 0.00%)              self.set_len(len + 1);
        .                   }
      228 ( 0.00%)      }
        .           
        .               /// Removes and returns the element at position `index` within the vector,
        .               /// shifting all elements after it to the left.
        .               ///
        .               /// Note: Because this shifts over the remaining elements, it has a
        .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
        .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
        .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1395 ----------------------------------------
        .               pub fn remove(&mut self, index: usize) -> T {
        .                   #[cold]
        .                   #[inline(never)]
        .                   #[track_caller]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("removal index (is {}) should be < len (is {})", index, len);
        .                   }
        .           
       64 ( 0.00%)          let len = self.len();
      250 ( 0.00%)          if index >= len {
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // infallible
        .                       let ret;
        .                       {
        .                           // the place we are taking from.
        .                           let ptr = self.as_mut_ptr().add(index);
        .                           // copy it out, unsafely having a copy of the value on
        .                           // the stack and in the vector at the same time.
       96 ( 0.00%)                  ret = ptr::read(ptr);
        .           
        .                           // Shift everything down to fill in that spot.
      198 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
        .                       }
       64 ( 0.00%)              self.set_len(len - 1);
        .                       ret
        .                   }
        .               }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
-- line 1428 ----------------------------------------
-- line 1442 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3, 4, 5];
        .               /// let keep = [false, true, true, false, true];
        .               /// let mut iter = keep.iter();
        .               /// vec.retain(|_| *iter.next().unwrap());
        .               /// assert_eq!(vec, [2, 3, 5]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
    9,315 ( 0.01%)      pub fn retain<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&T) -> bool,
        .               {
      823 ( 0.00%)          self.retain_mut(|elem| f(elem));
    9,024 ( 0.00%)      }
        .           
        .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
        .               /// });
        .               /// assert_eq!(vec, [2, 3, 4]);
        .               /// ```
        .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
        .               pub fn retain_mut<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
    1,148 ( 0.00%)          let original_len = self.len();
        .                   // Avoid double drop if the drop guard is not executed,
        .                   // since we may make some holes during the process.
        .                   unsafe { self.set_len(0) };
        .           
        .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
        .                   //      |<-              processed len   ->| ^- next to check
        .                   //                  |<-  deleted cnt     ->|
        .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
        .                       v: &'a mut Vec<T, A>,
        .                       processed_len: usize,
        .                       deleted_cnt: usize,
        .                       original_len: usize,
        .                   }
        .           
        .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
        .                       fn drop(&mut self) {
      966 ( 0.00%)                  if self.deleted_cnt > 0 {
        .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
        .                               unsafe {
        .                                   ptr::copy(
        .                                       self.v.as_ptr().add(self.processed_len),
      667 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
        .                                       self.original_len - self.processed_len,
        .                                   );
        .                               }
        .                           }
        .                           // SAFETY: After filling holes, all items are in contiguous memory.
        .                           unsafe {
        2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
        .                           }
        .                       }
        .                   }
        .           
        .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
        .           
        .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
        .                       original_len: usize,
        .                       f: &mut F,
        .                       g: &mut BackshiftOnDrop<'_, T, A>,
        .                   ) where
        .                       F: FnMut(&mut T) -> bool,
        .                   {
   11,318 ( 0.01%)              while g.processed_len != original_len {
        .                           // SAFETY: Unchecked element must be valid.
        .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
    2,759 ( 0.00%)                  if !f(cur) {
        .                               // Advance early to avoid double drop if `drop_in_place` panicked.
       26 ( 0.00%)                      g.processed_len += 1;
        8 ( 0.00%)                      g.deleted_cnt += 1;
        .                               // SAFETY: We never touch this element again after dropped.
        .                               unsafe { ptr::drop_in_place(cur) };
        .                               // We already advanced the counter.
        .                               if DELETED {
        .                                   continue;
        .                               } else {
        .                                   break;
        .                               }
        .                           }
        .                           if DELETED {
        .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
        .                               // We use copy for move, and never touch this element again.
        .                               unsafe {
        3 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
        .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
        .                               }
        .                           }
        2 ( 0.00%)                  g.processed_len += 1;
        .                       }
        .                   }
        .           
        .                   // Stage 1: Nothing was deleted.
        .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
        .           
        .                   // Stage 2: Some elements were deleted.
        .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
        .               ///
        .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
        .               ///
        .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
        .               /// ```
        .               #[stable(feature = "dedup_by", since = "1.16.0")]
      203 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
        .               where
        .                   F: FnMut(&mut T, &mut T) -> bool,
        .               {
       29 ( 0.00%)          let len = self.len();
      198 ( 0.00%)          if len <= 1 {
        .                       return;
        .                   }
        .           
        .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
        .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
        .                       /* Offset of the element we want to check if it is duplicate */
        .                       read: usize,
        .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
        .                   let ptr = gap.vec.as_mut_ptr();
        .           
        .                   /* Drop items while going through Vec, it should be more efficient than
        .                    * doing slice partition_dedup + truncate */
        .           
        .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
        .                    * are always in-bounds and read_ptr never aliases prev_ptr */
        .                   unsafe {
       72 ( 0.00%)              while gap.read < len {
        .                           let read_ptr = ptr.add(gap.read);
        .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
        .           
       60 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
        .                               // Increase `gap.read` now since the drop may panic.
        .                               gap.read += 1;
        .                               /* We have found duplicate, drop it in-place */
        .                               ptr::drop_in_place(read_ptr);
        .                           } else {
        .                               let write_ptr = ptr.add(gap.write);
        .           
        .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
        .                                * have to use `copy` or conditional `copy_nonoverlapping`.
        .                                * Looks like the first option is faster. */
        .                               ptr::copy(read_ptr, write_ptr, 1);
        .           
        .                               /* We have filled that place, so go further */
       24 ( 0.00%)                      gap.write += 1;
        .                               gap.read += 1;
        .                           }
        .                       }
        .           
        .                       /* Technically we could let `gap` clean up with its Drop, but
        .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
        .                        * the codegen, so we just do it manually */
        .                       gap.vec.set_len(gap.write);
        .                       mem::forget(gap);
        .                   }
      232 ( 0.00%)      }
        .           
        .               /// Appends an element to the back of a collection.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
        .               ///
        .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2];
        .               /// vec.push(3);
        .               /// assert_eq!(vec, [1, 2, 3]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
       75 ( 0.00%)      pub fn push(&mut self, value: T) {
        .                   // This will panic or abort if we would allocate > isize::MAX bytes
        .                   // or if the length increment would overflow for zero-sized types.
1,425,393 ( 0.78%)          if self.len == self.buf.capacity() {
   46,189 ( 0.03%)              self.buf.reserve_for_push(self.len);
        .                   }
        .                   unsafe {
   18,876 ( 0.01%)              let end = self.as_mut_ptr().add(self.len);
        .                       ptr::write(end, value);
1,524,115 ( 0.84%)              self.len += 1;
        .                   }
       60 ( 0.00%)      }
        .           
        .               /// Removes the last element from a vector and returns it, or [`None`] if it
        .               /// is empty.
        .               ///
        .               /// If you'd like to pop the first element, consider using
        .               /// [`VecDeque::pop_front`] instead.
        .               ///
        .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3];
        .               /// assert_eq!(vec.pop(), Some(3));
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop(&mut self) -> Option<T> {
   44,408 ( 0.02%)          if self.len == 0 {
        2 ( 0.00%)              None
        .                   } else {
        .                       unsafe {
   35,013 ( 0.02%)                  self.len -= 1;
    4,819 ( 0.00%)                  Some(ptr::read(self.as_ptr().add(self.len())))
        .                       }
        .                   }
        .               }
        .           
        .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
        .               ///
        .               /// # Panics
        .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
        .               /// let mut vec2 = vec![4, 5, 6];
        .               /// vec.append(&mut vec2);
        .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
        .               /// assert_eq!(vec2, []);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "append", since = "1.4.0")]
       63 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
        .                   unsafe {
        .                       self.append_elements(other.as_slice() as _);
        .                       other.set_len(0);
        .                   }
       54 ( 0.00%)      }
        .           
        .               /// Appends elements to `Self` from other buffer.
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               unsafe fn append_elements(&mut self, other: *const [T]) {
        .                   let count = unsafe { (*other).len() };
        .                   self.reserve(count);
    1,327 ( 0.00%)          let len = self.len();
        .                   unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
   15,103 ( 0.01%)          self.len += count;
        .               }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// When the iterator **is** dropped, all elements in the range are removed
        .               /// from the vector, even if the iterator was not fully consumed. If the
        .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
-- line 1807 ----------------------------------------
-- line 1834 ----------------------------------------
        .                   // When the Drain is first created, it shortens the length of
        .                   // the source vector to make sure no uninitialized or moved-from elements
        .                   // are accessible at all if the Drain's destructor never gets to run.
        .                   //
        .                   // Drain will ptr::read out the values to remove.
        .                   // When finished, remaining tail of the vec is copied back to cover
        .                   // the hole, and the vector length is restored to the new length.
        .                   //
    1,051 ( 0.00%)          let len = self.len();
        .                   let Range { start, end } = slice::range(range, ..len);
        .           
        .                   unsafe {
        .                       // set self.vec length's to start, to be safe in case Drain is leaked
        .                       self.set_len(start);
        .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
        .                       // whole Drain iterator (like &mut T).
        6 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
      525 ( 0.00%)              Drain {
        .                           tail_start: end,
        6 ( 0.00%)                  tail_len: len - end,
        .                           iter: range_slice.iter(),
        .                           vec: NonNull::from(self),
        .                       }
        .                   }
        .               }
        .           
        .               /// Clears the vector, removing all values.
        .               ///
-- line 1861 ----------------------------------------
-- line 1869 ----------------------------------------
        .               ///
        .               /// v.clear();
        .               ///
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn clear(&mut self) {
   57,309 ( 0.03%)          self.truncate(0)
        .               }
        .           
        .               /// Returns the number of elements in the vector, also referred to
        .               /// as its 'length'.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1885 ----------------------------------------
-- line 1900 ----------------------------------------
        .               /// let mut v = Vec::new();
        .               /// assert!(v.is_empty());
        .               ///
        .               /// v.push(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn is_empty(&self) -> bool {
   21,509 ( 0.01%)          self.len() == 0
        .               }
        .           
        .               /// Splits the collection into two at the given index.
        .               ///
        .               /// Returns a newly allocated vector containing the elements in the range
        .               /// `[at, len)`. After the call, the original vector will be left containing
        .               /// the elements `[0, at)` with its previous capacity unchanged.
        .               ///
-- line 1916 ----------------------------------------
-- line 1935 ----------------------------------------
        .                   A: Clone,
        .               {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(at: usize, len: usize) -> ! {
        .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
        .                   }
        .           
      107 ( 0.00%)          if at > self.len() {
        .                       assert_failed(at, self.len());
        .                   }
        .           
       95 ( 0.00%)          if at == 0 {
        .                       // the new vector can take over the original buffer and avoid the copy
        .                       return mem::replace(
        .                           self,
        .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
        .                       );
        .                   }
        .           
        .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
        .               ///
        .               /// let mut vec = vec![];
        .               /// let mut p = 1;
        .               /// vec.resize_with(4, || { p *= 2; p });
        .               /// assert_eq!(vec, [2, 4, 8, 16]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
    1,478 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
        .               where
        .                   F: FnMut() -> T,
        .               {
      200 ( 0.00%)          let len = self.len();
      400 ( 0.00%)          if new_len > len {
    1,330 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
    1,278 ( 0.00%)      }
        .           
        .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
        .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
        .               /// `'a`. If the type has only static references, or none at all, then this
        .               /// may be chosen to be `'static`.
        .               ///
        .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
        .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2070 ----------------------------------------
        .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
        .               #[inline]
        .               pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
        .                   // Note:
        .                   // This method is not implemented in terms of `split_at_spare_mut`,
        .                   // to prevent invalidation of pointers to the buffer.
        .                   unsafe {
        .                       slice::from_raw_parts_mut(
        2 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
       24 ( 0.00%)                  self.buf.capacity() - self.len,
        .                       )
        .                   }
        .               }
        .           
        .               /// Returns vector content as a slice of `T`, along with the remaining spare
        .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
        .               ///
        .               /// The returned spare capacity slice can be used to fill the vector with data
-- line 2087 ----------------------------------------
-- line 2189 ----------------------------------------
        .               /// assert_eq!(vec, ["hello", "world", "world"]);
        .               ///
        .               /// let mut vec = vec![1, 2, 3, 4];
        .               /// vec.resize(2, 0);
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize", since = "1.5.0")]
       30 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
        3 ( 0.00%)          let len = self.len();
        .           
        9 ( 0.00%)          if new_len > len {
      411 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Clones and appends all elements in a slice to the `Vec`.
        .               ///
        .               /// Iterates over the slice `other`, clones each element, and then appends
        .               /// it to this `Vec`. The `other` slice is traversed in-order.
        .               ///
        .               /// Note that this function is same as [`extend`] except that it is
        .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2291 ----------------------------------------
        .               fn last(mut self) -> T {
        .                   (self.0)()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               #[cfg(not(no_global_oom_handling))]
        .               /// Extend the vector by `n` values, using the given generator.
    8,042 ( 0.00%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
        .                   self.reserve(n);
        .           
        .                   unsafe {
      501 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
        .                       // Use SetLenOnDrop to work around bug where compiler
        .                       // might not realize the store through `ptr` through self.set_len()
        .                       // don't alias.
        .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
        .           
        .                       // Write all elements except the last one
        .                       for _ in 1..n {
        .                           ptr::write(ptr, value.next());
        .                           ptr = ptr.offset(1);
        .                           // Increment the length in every step in case next() panics
        .                           local_len.increment_len(1);
        .                       }
        .           
   13,492 ( 0.01%)              if n > 0 {
        .                           // We can write the last element directly without cloning needlessly
        .                           ptr::write(ptr, value.last());
        .                           local_len.increment_len(1);
        .                       }
        .           
        .                       // len set by scope guard
        .                   }
    6,299 ( 0.00%)      }
        .           }
        .           
        .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
        .               /// Removes consecutive repeated elements in the vector according to the
        .               /// [`PartialEq`] trait implementation.
        .               ///
        .               /// If the vector is sorted, this removes all duplicates.
        .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
        .               ///
        .               /// vec.dedup();
        .               ///
        .               /// assert_eq!(vec, [1, 2, 3, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn dedup(&mut self) {
       30 ( 0.00%)          self.dedup_by(|a, b| a == b)
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Internal methods and functions
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
    2,176 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
   11,861 ( 0.01%)      <T as SpecFromElem>::from_elem(elem, n, Global)
    2,596 ( 0.00%)  }
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[unstable(feature = "allocator_api", issue = "32838")]
        .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
        .               <T as SpecFromElem>::from_elem(elem, n, alloc)
        .           }
        .           
-- line 2367 ----------------------------------------
-- line 2424 ----------------------------------------
        .           // Common trait implementations for Vec
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
        .               type Target = [T];
        .           
        .               fn deref(&self) -> &[T] {
  274,089 ( 0.15%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
       38 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
        .               fn deref_mut(&mut self) -> &mut [T] {
   51,966 ( 0.03%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           trait SpecCloneFrom {
        .               fn clone_from(this: &mut Self, other: &Self);
        .           }
        .           
-- line 2447 ----------------------------------------
-- line 2468 ----------------------------------------
        .                   this.extend_from_slice(other);
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
        .               #[cfg(not(test))]
   10,758 ( 0.01%)      fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
        2 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
   13,602 ( 0.01%)      }
        .           
        .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
        .               // required for this method definition, is not available. Instead use the
        .               // `slice::to_vec`  function which is only available with cfg(test)
        .               // NB see the slice::hack module in slice.rs for more information
        .               #[cfg(test)]
        .               fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
        .               type Output = I::Output;
        .           
        .               #[inline]
        .               fn index(&self, index: I) -> &Self::Output {
    7,611 ( 0.00%)          Index::index(&**self, index)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_on_unimplemented(
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
-- line 2534 ----------------------------------------
-- line 2539 ----------------------------------------
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> FromIterator<T> for Vec<T> {
        .               #[inline]
        .               fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
   87,826 ( 0.05%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
        .               type Item = T;
        .               type IntoIter = IntoIter<T, A>;
        .           
-- line 2555 ----------------------------------------
-- line 2564 ----------------------------------------
        .               /// for s in v.into_iter() {
        .               ///     // s has type String, not &String
        .               ///     println!("{}", s);
        .               /// }
        .               /// ```
        .               #[inline]
        .               fn into_iter(self) -> IntoIter<T, A> {
        .                   unsafe {
   33,203 ( 0.02%)              let mut me = ManuallyDrop::new(self);
        .                       let alloc = ptr::read(me.allocator());
        .                       let begin = me.as_mut_ptr();
        .                       let end = if mem::size_of::<T>() == 0 {
        .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
        .                       } else {
        .                           begin.add(me.len()) as *const T
        .                       };
        .                       let cap = me.buf.capacity();
   11,723 ( 0.01%)              IntoIter {
        .                           buf: NonNull::new_unchecked(begin),
        .                           phantom: PhantomData,
        .                           cap,
        .                           alloc,
        .                           ptr: begin,
        .                           end,
        .                       }
        .                   }
-- line 2589 ----------------------------------------
-- line 2601 ----------------------------------------
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
        .               type Item = &'a mut T;
        .               type IntoIter = slice::IterMut<'a, T>;
        .           
        .               fn into_iter(self) -> slice::IterMut<'a, T> {
    1,154 ( 0.00%)          self.iter_mut()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
        .               #[inline]
      136 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
   34,165 ( 0.02%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
      136 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, item: T) {
        .                   self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
-- line 2627 ----------------------------------------
-- line 2636 ----------------------------------------
        .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
        .                   // This is the case for a general iterator.
        .                   //
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iterator {
        .                   //          self.push(item);
        .                   //      }
   10,992 ( 0.01%)          while let Some(element) = iterator.next() {
      986 ( 0.00%)              let len = self.len();
   16,387 ( 0.01%)              if len == self.capacity() {
      195 ( 0.00%)                  let (lower, _) = iterator.size_hint();
        .                           self.reserve(lower.saturating_add(1));
        .                       }
        .                       unsafe {
        .                           ptr::write(self.as_mut_ptr().add(len), element);
        .                           // Since next() executes user code which can panic we have to bump the length
        .                           // after each step.
        .                           // NB can't overflow since we would have had to alloc the address space
   13,955 ( 0.01%)                  self.set_len(len + 1);
        .                       }
        .                   }
      106 ( 0.00%)      }
        .           
        .               /// Creates a splicing iterator that replaces the specified range in the vector
        .               /// with the given `replace_with` iterator and yields the removed items.
        .               /// `replace_with` does not need to be the same length as `range`.
        .               ///
        .               /// `range` is removed even if the iterator is not consumed until the end.
        .               ///
        .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2745 ----------------------------------------
        .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
        .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
        .               /// ```
        .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
        .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
      185 ( 0.00%)          let old_len = self.len();
        .           
        .                   // Guard against us getting leaked (leak amplification)
        .                   unsafe {
        .                       self.set_len(0);
        .                   }
        .           
      360 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
        .               }
        .           }
        .           
        .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
        .           ///
        .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
        .           /// append the entire slice at once.
        .           ///
-- line 2768 ----------------------------------------
-- line 2803 ----------------------------------------
        .               #[inline]
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   Ord::cmp(&**self, &**other)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
   48,839 ( 0.03%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // use drop for [T]
        .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
        .                       // could avoid questions of validity in certain cases
   22,958 ( 0.01%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
        .                   }
        .                   // RawVec handles deallocation
   57,454 ( 0.03%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
        .           impl<T> const Default for Vec<T> {
        .               /// Creates an empty `Vec<T>`.
        .               fn default() -> Vec<T> {
        .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
        .               /// newly-allocated buffer with exactly the right capacity.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
        .               /// ```
        .               fn from(v: Vec<T, A>) -> Self {
        4 ( 0.00%)          v.into_boxed_slice()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl From<&str> for Vec<u8> {
        .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
        .               ///
-- line 2992 ----------------------------------------

   97,751 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs
--------------------------------------------------------------------------------
Ir               

-- line 176 ----------------------------------------
      .               }
      .               fn sess(self) -> Option<&'tcx Session> {
      .                   None
      .               }
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   None
      .               }
      .           
  5,217 ( 0.00%)      fn decoder(self, pos: usize) -> DecodeContext<'a, 'tcx> {
  1,739 ( 0.00%)          let tcx = self.tcx();
272,280 ( 0.15%)          DecodeContext {
 28,615 ( 0.02%)              opaque: opaque::Decoder::new(self.blob(), pos),
  1,739 ( 0.00%)              cdata: self.cdata(),
      .                       blob: self.blob(),
  9,928 ( 0.01%)              sess: self.sess().or(tcx.map(|tcx| tcx.sess)),
      .                       tcx,
      .                       last_source_file_index: 0,
      .                       lazy_state: LazyState::NoNode,
      .                       alloc_decoding_session: self
      .                           .cdata()
 25,641 ( 0.01%)                  .map(|cdata| cdata.cdata.alloc_decoding_state.new_decoding_session()),
      .                   }
  5,217 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Metadata<'a, 'tcx> for &'a MetadataBlob {
      .               #[inline]
      .               fn blob(self) -> &'a MetadataBlob {
      .                   self
      .               }
      .           }
-- line 206 ----------------------------------------
-- line 255 ----------------------------------------
      .               }
      .               #[inline]
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   Some(self.1)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<T> {
 37,945 ( 0.02%)      fn decode<M: Metadata<'a, 'tcx>>(self, metadata: M) -> T {
 21,898 ( 0.01%)          let mut dcx = metadata.decoder(self.position.get());
 79,195 ( 0.04%)          dcx.lazy_state = LazyState::NodeStart(self.position);
 26,999 ( 0.01%)          T::decode(&mut dcx)
 48,463 ( 0.03%)      }
      .           }
      .           
      .           impl<'a: 'x, 'tcx: 'x, 'x, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<[T]> {
      .               fn decode<M: Metadata<'a, 'tcx>>(
      .                   self,
      .                   metadata: M,
      .               ) -> impl ExactSizeIterator<Item = T> + Captures<'a> + Captures<'tcx> + 'x {
     28 ( 0.00%)          let mut dcx = metadata.decoder(self.position.get());
      8 ( 0.00%)          dcx.lazy_state = LazyState::NodeStart(self.position);
 19,145 ( 0.01%)          (0..self.meta).map(move |_| T::decode(&mut dcx))
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> DecodeContext<'a, 'tcx> {
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   debug_assert!(self.tcx.is_some(), "missing TyCtxt in DecodeContext");
      .                   self.tcx.unwrap()
-- line 285 ----------------------------------------
-- line 292 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn cdata(&self) -> CrateMetadataRef<'a> {
      .                   debug_assert!(self.cdata.is_some(), "missing CrateMetadata in DecodeContext");
      .                   self.cdata.unwrap()
      .               }
      .           
      .               fn map_encoded_cnum_to_current(&self, cnum: CrateNum) -> CrateNum {
106,675 ( 0.06%)          if cnum == LOCAL_CRATE { self.cdata().cnum } else { self.cdata().cnum_map[cnum] }
      .               }
      .           
 33,531 ( 0.02%)      fn read_lazy_with_meta<T: ?Sized + LazyMeta>(&mut self, meta: T::Meta) -> Lazy<T> {
      .                   let distance = self.read_usize();
 31,717 ( 0.02%)          let position = match self.lazy_state {
      .                       LazyState::NoNode => bug!("read_lazy_with_meta: outside of a metadata node"),
  5,454 ( 0.00%)              LazyState::NodeStart(start) => {
      .                           let start = start.get();
 10,908 ( 0.01%)                  assert!(distance <= start);
      .                           start - distance
      .                       }
  9,213 ( 0.01%)              LazyState::Previous(last_pos) => last_pos.get() + distance,
      .                   };
 17,050 ( 0.01%)          self.lazy_state = LazyState::Previous(NonZeroUsize::new(position).unwrap());
      .                   Lazy::from_position_and_meta(NonZeroUsize::new(position).unwrap(), meta)
 33,531 ( 0.02%)      }
      .           
      .               #[inline]
      .               pub fn read_raw_bytes(&mut self, len: usize) -> &'a [u8] {
      .                   self.opaque.read_raw_bytes(len)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> TyDecoder<'tcx> for DecodeContext<'a, 'tcx> {
-- line 324 ----------------------------------------
-- line 326 ----------------------------------------
      .           
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   self.tcx.expect("missing TyCtxt in DecodeContext")
      .               }
      .           
      .               #[inline]
      .               fn peek_byte(&self) -> u8 {
 52,230 ( 0.03%)          self.opaque.data[self.opaque.position()]
      .               }
      .           
      .               #[inline]
      .               fn position(&self) -> usize {
      .                   self.opaque.position()
      .               }
      .           
 50,057 ( 0.03%)      fn cached_ty_for_shorthand<F>(&mut self, shorthand: usize, or_insert_with: F) -> Ty<'tcx>
      .               where
      .                   F: FnOnce(&mut Self) -> Ty<'tcx>,
      .               {
  7,151 ( 0.00%)          let tcx = self.tcx();
      .           
  7,151 ( 0.00%)          let key = ty::CReaderCacheKey { cnum: Some(self.cdata().cnum), pos: shorthand };
      .           
 18,364 ( 0.01%)          if let Some(&ty) = tcx.ty_rcache.borrow().get(&key) {
      .                       return ty;
      .                   }
      .           
  2,560 ( 0.00%)          let ty = or_insert_with(self);
      .                   tcx.ty_rcache.borrow_mut().insert(key, ty);
      .                   ty
 64,359 ( 0.04%)      }
      .           
      .               fn with_position<F, R>(&mut self, pos: usize, f: F) -> R
      .               where
      .                   F: FnOnce(&mut Self) -> R,
      .               {
      .                   let new_opaque = opaque::Decoder::new(self.opaque.data, pos);
      .                   let old_opaque = mem::replace(&mut self.opaque, new_opaque);
      .                   let old_state = mem::replace(&mut self.lazy_state, LazyState::NoNode);
      .                   let r = f(self);
 13,235 ( 0.01%)          self.opaque = old_opaque;
  2,647 ( 0.00%)          self.lazy_state = old_state;
      .                   r
      .               }
      .           
      .               fn decode_alloc_id(&mut self) -> rustc_middle::mir::interpret::AllocId {
      .                   if let Some(alloc_decoding_session) = self.alloc_decoding_session {
      .                       alloc_decoding_session.decode_alloc_id(self)
      .                   } else {
      .                       bug!("Attempting to decode interpret::AllocId without CrateMetadata")
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for CrateNum {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> CrateNum {
 60,294 ( 0.03%)          let cnum = CrateNum::from_u32(d.read_u32());
      .                   d.map_encoded_cnum_to_current(cnum)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for DefIndex {
  1,250 ( 0.00%)      fn decode(d: &mut DecodeContext<'a, 'tcx>) -> DefIndex {
104,373 ( 0.06%)          DefIndex::from_u32(d.read_u32())
  2,500 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnIndex {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> ExpnIndex {
      .                   ExpnIndex::from_u32(d.read_u32())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for SyntaxContext {
 94,608 ( 0.05%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> SyntaxContext {
 23,652 ( 0.01%)          let cdata = decoder.cdata();
 23,652 ( 0.01%)          let sess = decoder.sess.unwrap();
 47,304 ( 0.03%)          let cname = cdata.root.name;
      .                   rustc_span::hygiene::decode_syntax_context(decoder, &cdata.hygiene_context, |_, id| {
      .                       debug!("SpecializedDecoder<SyntaxContext>: decoding {}", id);
    204 ( 0.00%)              cdata
      .                           .root
      .                           .syntax_contexts
      .                           .get(cdata, id)
      .                           .unwrap_or_else(|| panic!("Missing SyntaxContext {:?} for crate {:?}", id, cname))
      .                           .decode((cdata, sess))
      .                   })
118,260 ( 0.06%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnId {
  3,451 ( 0.00%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> ExpnId {
    493 ( 0.00%)          let local_cdata = decoder.cdata();
    493 ( 0.00%)          let sess = decoder.sess.unwrap();
      .           
      .                   let cnum = CrateNum::decode(decoder);
      .                   let index = u32::decode(decoder);
      .           
      .                   let expn_id = rustc_span::hygiene::decode_expn_id(cnum, index, |expn_id| {
      .                       let ExpnId { krate: cnum, local_id: index } = expn_id;
      .                       // Lookup local `ExpnData`s in our own crate data. Foreign `ExpnData`s
      .                       // are stored in the owning crate, to avoid duplication.
      .                       debug_assert_ne!(cnum, LOCAL_CRATE);
     71 ( 0.00%)              let crate_data = if cnum == local_cdata.cnum {
      .                           local_cdata
      .                       } else {
      .                           local_cdata.cstore.get_crate_data(cnum)
      .                       };
    355 ( 0.00%)              let expn_data = crate_data
      .                           .root
      .                           .expn_data
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
    355 ( 0.00%)              let expn_hash = crate_data
      .                           .root
      .                           .expn_hashes
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
    710 ( 0.00%)              (expn_data, expn_hash)
      .                   });
      .                   expn_id
  3,944 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Span {
187,992 ( 0.10%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Span {
 23,499 ( 0.01%)          let ctxt = SyntaxContext::decode(decoder);
      .                   let tag = u8::decode(decoder);
      .           
 46,998 ( 0.03%)          if tag == TAG_PARTIAL_SPAN {
      .                       return DUMMY_SP.with_ctxt(ctxt);
      .                   }
      .           
      .                   debug_assert!(tag == TAG_VALID_SPAN_LOCAL || tag == TAG_VALID_SPAN_FOREIGN);
      .           
      .                   let lo = BytePos::decode(decoder);
      .                   let len = BytePos::decode(decoder);
      .                   let hi = lo + len;
      .           
 70,458 ( 0.04%)          let Some(sess) = decoder.sess else {
      .                       bug!("Cannot decode Span without Session.")
      .                   };
      .           
      .                   // There are two possibilities here:
      .                   // 1. This is a 'local span', which is located inside a `SourceFile`
      .                   // that came from this crate. In this case, we use the source map data
      .                   // encoded in this crate. This branch should be taken nearly all of the time.
      .                   // 2. This is a 'foreign span', which is located inside a `SourceFile`
-- line 476 ----------------------------------------
-- line 492 ----------------------------------------
      .                   // a transitive dependency.
      .                   //
      .                   // When we encode a foreign span, we adjust its 'lo' and 'high' values
      .                   // to be based on the *foreign* crate (e.g. crate C), not the crate
      .                   // we are writing metadata for (e.g. crate B). This allows us to
      .                   // treat the 'local' and 'foreign' cases almost identically during deserialization:
      .                   // we can call `imported_source_files` for the proper crate, and binary search
      .                   // through the returned slice using our span.
 61,985 ( 0.03%)          let imported_source_files = if tag == TAG_VALID_SPAN_LOCAL {
      .                       decoder.cdata().imported_source_files(sess)
      .                   } else {
      .                       // When we encode a proc-macro crate, all `Span`s should be encoded
      .                       // with `TAG_VALID_SPAN_LOCAL`
     91 ( 0.00%)              if decoder.cdata().root.is_proc_macro_crate() {
      .                           // Decode `CrateNum` as u32 - using `CrateNum::decode` will ICE
      .                           // since we don't have `cnum_map` populated.
      .                           let cnum = u32::decode(decoder);
      .                           panic!(
      .                               "Decoding of crate {:?} tried to access proc-macro dep {:?}",
      .                               decoder.cdata().root.name,
      .                               cnum
      .                           );
-- line 513 ----------------------------------------
-- line 518 ----------------------------------------
      .                           "SpecializedDecoder<Span>::specialized_decode: loading source files from cnum {:?}",
      .                           cnum
      .                       );
      .           
      .                       // Decoding 'foreign' spans should be rare enough that it's
      .                       // not worth it to maintain a per-CrateNum cache for `last_source_file_index`.
      .                       // We just set it to 0, to ensure that we don't try to access something out
      .                       // of bounds for our initial 'guess'
    182 ( 0.00%)              decoder.last_source_file_index = 0;
      .           
     91 ( 0.00%)              let foreign_data = decoder.cdata().cstore.get_crate_data(cnum);
      .                       foreign_data.imported_source_files(sess)
      .                   };
      .           
      .                   let source_file = {
      .                       // Optimize for the case that most spans within a translated item
      .                       // originate from the same source_file.
 70,458 ( 0.04%)              let last_source_file = &imported_source_files[decoder.last_source_file_index];
      .           
 88,814 ( 0.05%)              if lo >= last_source_file.original_start_pos && lo <= last_source_file.original_end_pos
      .                       {
      .                           last_source_file
      .                       } else {
      .                           let index = imported_source_files
      .                               .binary_search_by_key(&lo, |source_file| source_file.original_start_pos)
 30,022 ( 0.02%)                      .unwrap_or_else(|index| index - 1);
      .           
      .                           // Don't try to cache the index for foreign spans,
      .                           // as this would require a map from CrateNums to indices
 15,013 ( 0.01%)                  if tag == TAG_VALID_SPAN_LOCAL {
 14,928 ( 0.01%)                      decoder.last_source_file_index = index;
      .                           }
 30,026 ( 0.02%)                  &imported_source_files[index]
      .                       }
      .                   };
      .           
      .                   // Make sure our binary search above is correct.
      .                   debug_assert!(
      .                       lo >= source_file.original_start_pos && lo <= source_file.original_end_pos,
      .                       "Bad binary search: lo={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       lo,
-- line 558 ----------------------------------------
-- line 565 ----------------------------------------
      .                       hi >= source_file.original_start_pos && hi <= source_file.original_end_pos,
      .                       "Bad binary search: hi={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       hi,
      .                       source_file.original_start_pos,
      .                       source_file.original_end_pos
      .                   );
      .           
      .                   let lo =
 93,944 ( 0.05%)              (lo + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .                   let hi =
      .                       (hi + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .           
      .                   // Do not try to decode parent for foreign spans.
      .                   Span::new(lo, hi, ctxt, None)
211,491 ( 0.12%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for &'tcx [thir::abstract_const::Node<'tcx>] {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
-- line 587 ----------------------------------------
-- line 590 ----------------------------------------
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<T>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
  9,515 ( 0.01%)          decoder.read_lazy_with_meta(())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<[T]>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
 13,925 ( 0.01%)          if len == 0 { Lazy::empty() } else { decoder.read_lazy_with_meta(len) }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, I: Idx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<Table<I, T>>
      .           where
      .               Option<T>: FixedSizeEncoding,
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
 10,816 ( 0.01%)          decoder.read_lazy_with_meta(len)
      .               }
      .           }
      .           
      .           implement_ty_decoder!(DecodeContext<'a, 'tcx>);
      .           
      .           impl<'tcx> MetadataBlob {
      .               crate fn new(metadata_ref: MetadataRef) -> MetadataBlob {
      .                   MetadataBlob(Lrc::new(metadata_ref))
-- line 626 ----------------------------------------
-- line 630 ----------------------------------------
      .                   self.blob().starts_with(METADATA_HEADER)
      .               }
      .           
      .               crate fn get_rustc_version(&self) -> String {
      .                   Lazy::<String>::from_position(NonZeroUsize::new(METADATA_HEADER.len() + 4).unwrap())
      .                       .decode(self)
      .               }
      .           
    192 ( 0.00%)      crate fn get_root(&self) -> CrateRoot<'tcx> {
     64 ( 0.00%)          let slice = &self.blob()[..];
      .                   let offset = METADATA_HEADER.len();
    320 ( 0.00%)          let pos = (((slice[offset + 0] as u32) << 24)
    128 ( 0.00%)              | ((slice[offset + 1] as u32) << 16)
    256 ( 0.00%)              | ((slice[offset + 2] as u32) << 8)
    192 ( 0.00%)              | ((slice[offset + 3] as u32) << 0)) as usize;
      .                   Lazy::<CrateRoot<'tcx>>::from_position(NonZeroUsize::new(pos).unwrap()).decode(self)
    320 ( 0.00%)      }
      .           
      .               crate fn list_crate_metadata(&self, out: &mut dyn io::Write) -> io::Result<()> {
      .                   let root = self.get_root();
      .                   writeln!(out, "Crate info:")?;
      .                   writeln!(out, "name {}{}", root.name, root.extra_filename)?;
      .                   writeln!(out, "hash {} stable_crate_id {:?}", root.hash, root.stable_crate_id)?;
      .                   writeln!(out, "proc_macro {:?}", root.proc_macro_data.is_some())?;
      .                   writeln!(out, "=External Dependencies=")?;
-- line 654 ----------------------------------------
-- line 666 ----------------------------------------
      .                   }
      .                   write!(out, "\n")?;
      .                   Ok(())
      .               }
      .           }
      .           
      .           impl CrateRoot<'_> {
      .               crate fn is_proc_macro_crate(&self) -> bool {
     42 ( 0.00%)          self.proc_macro_data.is_some()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
      6 ( 0.00%)          self.name
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
     21 ( 0.00%)          self.hash
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
     42 ( 0.00%)          self.stable_crate_id
      .               }
      .           
      .               crate fn triple(&self) -> &TargetTriple {
      .                   &self.triple
      .               }
      .           
      .               crate fn decode_crate_deps<'a>(
      .                   &self,
      .                   metadata: &'a MetadataBlob,
      .               ) -> impl ExactSizeIterator<Item = CrateDep> + Captures<'a> {
     42 ( 0.00%)          self.crate_deps.decode(metadata)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> CrateMetadataRef<'a> {
      .               fn raw_proc_macro(self, id: DefIndex) -> &'a ProcMacro {
      .                   // DefIndex's in root.proc_macro_data have a one-to-one correspondence
      .                   // with items in 'raw_proc_macros'.
      .                   let pos = self
-- line 705 ----------------------------------------
-- line 709 ----------------------------------------
      .                       .unwrap()
      .                       .macros
      .                       .decode(self)
      .                       .position(|i| i == id)
      .                       .unwrap();
      .                   &self.raw_proc_macros.unwrap()[pos]
      .               }
      .           
 40,381 ( 0.02%)      fn opt_item_ident(self, item_index: DefIndex, sess: &Session) -> Option<Ident> {
 29,748 ( 0.02%)          let name = self.def_key(item_index).disambiguated_data.data.get_opt_name()?;
 17,465 ( 0.01%)          let span = match self.root.tables.ident_span.get(self, item_index) {
      .                       Some(lazy_span) => lazy_span.decode((self, sess)),
      .                       None => {
      .                           // FIXME: this weird case of a name with no span is specific to `extern crate`
      .                           // items, which are supposed to be treated like `use` items and only be encoded
      .                           // to metadata as `Export`s, return `None` because that's what all the callers
      .                           // expect in this case.
    108 ( 0.00%)                  assert_eq!(self.def_kind(item_index), DefKind::ExternCrate);
      .                           return None;
      .                       }
      .                   };
      .                   Some(Ident::new(name, span))
 51,546 ( 0.03%)      }
      .           
  1,221 ( 0.00%)      fn item_ident(self, item_index: DefIndex, sess: &Session) -> Ident {
  5,314 ( 0.00%)          self.opt_item_ident(item_index, sess).expect("no encoded ident for item")
  2,442 ( 0.00%)      }
      .           
      .               fn maybe_kind(self, item_id: DefIndex) -> Option<EntryKind> {
  9,630 ( 0.01%)          self.root.tables.kind.get(self, item_id).map(|k| k.decode(self))
      .               }
      .           
 38,520 ( 0.02%)      fn kind(self, item_id: DefIndex) -> EntryKind {
      .                   self.maybe_kind(item_id).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
 28,890 ( 0.02%)      }
      .           
  6,594 ( 0.00%)      fn def_kind(self, item_id: DefIndex) -> DefKind {
  4,853 ( 0.00%)          self.root.tables.def_kind.get(self, item_id).map(|k| k.decode(self)).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::def_kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
  3,768 ( 0.00%)      }
      .           
 10,989 ( 0.01%)      fn get_span(self, index: DefIndex, sess: &Session) -> Span {
  7,721 ( 0.00%)          self.root
      .                       .tables
      .                       .span
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing span for {:?}", index))
      .                       .decode((self, sess))
  6,105 ( 0.00%)      }
      .           
      .               fn load_proc_macro(self, id: DefIndex, sess: &Session) -> SyntaxExtension {
      .                   let (name, kind, helper_attrs) = match *self.raw_proc_macro(id) {
      .                       ProcMacro::CustomDerive { trait_name, attributes, client } => {
      .                           let helper_attrs =
      .                               attributes.iter().cloned().map(Symbol::intern).collect::<Vec<_>>();
      .                           (
      .                               trait_name,
-- line 778 ----------------------------------------
-- line 795 ----------------------------------------
      .                       self.get_span(id, sess),
      .                       helper_attrs,
      .                       self.root.edition,
      .                       Symbol::intern(name),
      .                       &attrs,
      .                   )
      .               }
      .           
    338 ( 0.00%)      fn get_trait_def(self, item_id: DefIndex, sess: &Session) -> ty::TraitDef {
    104 ( 0.00%)          match self.kind(item_id) {
     26 ( 0.00%)              EntryKind::Trait(data) => {
    156 ( 0.00%)                  let data = data.decode((self, sess));
    416 ( 0.00%)                  ty::TraitDef::new(
      .                               self.local_def_id(item_id),
     52 ( 0.00%)                      data.unsafety,
     52 ( 0.00%)                      data.paren_sugar,
     52 ( 0.00%)                      data.has_auto_impl,
     52 ( 0.00%)                      data.is_marker,
     26 ( 0.00%)                      data.skip_array_during_method_dispatch,
     26 ( 0.00%)                      data.specialization_kind,
    104 ( 0.00%)                      self.def_path_hash(item_id),
     26 ( 0.00%)                      data.must_implement_one_of,
      .                           )
      .                       }
      .                       EntryKind::TraitAlias => ty::TraitDef::new(
      .                           self.local_def_id(item_id),
      .                           hir::Unsafety::Normal,
      .                           false,
      .                           false,
      .                           false,
      .                           false,
      .                           ty::trait_def::TraitSpecializationKind::None,
      .                           self.def_path_hash(item_id),
      .                           None,
      .                       ),
      .                       _ => bug!("def-index does not refer to trait or trait alias"),
      .                   }
    234 ( 0.00%)      }
      .           
    378 ( 0.00%)      fn get_variant(
      .                   self,
      .                   kind: &EntryKind,
      .                   index: DefIndex,
      .                   parent_did: DefId,
      .                   sess: &Session,
      .               ) -> ty::VariantDef {
    168 ( 0.00%)          let data = match kind {
      .                       EntryKind::Variant(data) | EntryKind::Struct(data, _) | EntryKind::Union(data, _) => {
    210 ( 0.00%)                  data.decode(self)
      .                       }
      .                       _ => bug!(),
      .                   };
      .           
    156 ( 0.00%)          let adt_kind = match kind {
      .                       EntryKind::Variant(_) => ty::AdtKind::Enum,
      .                       EntryKind::Struct(..) => ty::AdtKind::Struct,
      .                       EntryKind::Union(..) => ty::AdtKind::Union,
      .                       _ => bug!(),
      .                   };
      .           
      .                   let variant_did =
      .                       if adt_kind == ty::AdtKind::Enum { Some(self.local_def_id(index)) } else { None };
     84 ( 0.00%)          let ctor_did = data.ctor.map(|index| self.local_def_id(index));
      .           
    924 ( 0.00%)          ty::VariantDef::new(
      .                       self.item_ident(index, sess).name,
      .                       variant_did,
      .                       ctor_did,
    168 ( 0.00%)              data.discr,
    252 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, index)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
      .                           .map(|index| ty::FieldDef {
     56 ( 0.00%)                      did: self.local_def_id(index),
    112 ( 0.00%)                      name: self.item_ident(index, sess).name,
    112 ( 0.00%)                      vis: self.get_visibility(index),
      .                           })
      .                           .collect(),
      .                       data.ctor_kind,
      .                       adt_kind,
      .                       parent_did,
      .                       false,
     42 ( 0.00%)              data.is_non_exhaustive,
      .                   )
    378 ( 0.00%)      }
      .           
    585 ( 0.00%)      fn get_adt_def(self, item_id: DefIndex, tcx: TyCtxt<'tcx>) -> &'tcx ty::AdtDef {
    156 ( 0.00%)          let kind = self.kind(item_id);
     78 ( 0.00%)          let did = self.local_def_id(item_id);
      .           
    189 ( 0.00%)          let (adt_kind, repr) = match kind {
      .                       EntryKind::Enum(repr) => (ty::AdtKind::Enum, repr),
      .                       EntryKind::Struct(_, repr) => (ty::AdtKind::Struct, repr),
      .                       EntryKind::Union(_, repr) => (ty::AdtKind::Union, repr),
      .                       _ => bug!("get_adt_def called on a non-ADT {:?}", did),
      .                   };
      .           
      .                   let variants = if let ty::AdtKind::Enum = adt_kind {
     15 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, item_id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
    102 ( 0.00%)                  .map(|index| self.get_variant(&self.kind(index), index, did, tcx.sess))
      .                           .collect()
      .                   } else {
    288 ( 0.00%)              std::iter::once(self.get_variant(&kind, item_id, did, tcx.sess)).collect()
      .                   };
      .           
    561 ( 0.00%)          tcx.alloc_adt_def(did, adt_kind, variants, repr)
    273 ( 0.00%)      }
      .           
      .               fn get_explicit_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
    945 ( 0.00%)          self.root.tables.explicit_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_inferred_outlives(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
    945 ( 0.00%)          self.root
      .                       .tables
      .                       .inferred_outlives
      .                       .get(self, item_id)
     16 ( 0.00%)              .map(|predicates| tcx.arena.alloc_from_iter(predicates.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_super_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
     85 ( 0.00%)          self.root.tables.super_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_explicit_item_bounds(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
      5 ( 0.00%)          self.root
      .                       .tables
      .                       .explicit_item_bounds
      .                       .get(self, item_id)
      .                       .map(|bounds| tcx.arena.alloc_from_iter(bounds.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_generics(self, item_id: DefIndex, sess: &Session) -> ty::Generics {
  1,154 ( 0.00%)          self.root.tables.generics.get(self, item_id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_type(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
  7,350 ( 0.00%)          self.root
      .                       .tables
      .                       .ty
      .                       .get(self, id)
      .                       .unwrap_or_else(|| panic!("Not a type: {:?}", id))
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_stability(self, id: DefIndex) -> Option<attr::Stability> {
    390 ( 0.00%)          self.root.tables.stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_const_stability(self, id: DefIndex) -> Option<attr::ConstStability> {
      .                   self.root.tables.const_stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_deprecation(self, id: DefIndex) -> Option<attr::Deprecation> {
    390 ( 0.00%)          self.root.tables.deprecation.get(self, id).map(|depr| depr.decode(self))
      .               }
      .           
    174 ( 0.00%)      fn get_visibility(self, id: DefIndex) -> ty::Visibility {
  5,011 ( 0.00%)          self.root.tables.visibility.get(self, id).unwrap().decode(self)
    116 ( 0.00%)      }
      .           
      .               fn get_impl_data(self, id: DefIndex) -> ImplData {
 19,404 ( 0.01%)          match self.kind(id) {
 16,170 ( 0.01%)              EntryKind::Impl(data) => data.decode(self),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_parent_impl(self, id: DefIndex) -> Option<DefId> {
  9,504 ( 0.01%)          self.get_impl_data(id).parent_impl
      .               }
      .           
      .               fn get_impl_polarity(self, id: DefIndex) -> ty::ImplPolarity {
     55 ( 0.00%)          self.get_impl_data(id).polarity
      .               }
      .           
      .               fn get_impl_defaultness(self, id: DefIndex) -> hir::Defaultness {
      5 ( 0.00%)          self.get_impl_data(id).defaultness
      .               }
      .           
      .               fn get_impl_constness(self, id: DefIndex) -> hir::Constness {
      6 ( 0.00%)          self.get_impl_data(id).constness
      .               }
      .           
      .               fn get_trait_item_def_id(self, id: DefIndex) -> Option<DefId> {
  3,325 ( 0.00%)          self.root.tables.trait_item_def_id.get(self, id).map(|d| d.decode(self))
      .               }
      .           
      .               fn get_coerce_unsized_info(self, id: DefIndex) -> Option<ty::adjustment::CoerceUnsizedInfo> {
      .                   self.get_impl_data(id).coerce_unsized_info
      .               }
      .           
      .               fn get_impl_trait(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Option<ty::TraitRef<'tcx>> {
 38,750 ( 0.02%)          self.root.tables.impl_trait_ref.get(self, id).map(|tr| tr.decode((self, tcx)))
      .               }
      .           
      .               fn get_expn_that_defined(self, id: DefIndex, sess: &Session) -> ExpnId {
  1,855 ( 0.00%)          self.root.tables.expn_that_defined.get(self, id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_const_param_default(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> rustc_middle::ty::Const<'tcx> {
      .                   self.root.tables.const_defaults.get(self, id).unwrap().decode((self, tcx))
-- line 1026 ----------------------------------------
-- line 1028 ----------------------------------------
      .           
      .               /// Iterates over all the stability attributes in the given crate.
      .               fn get_lib_features(self, tcx: TyCtxt<'tcx>) -> &'tcx [(Symbol, Option<Symbol>)] {
      .                   tcx.arena.alloc_from_iter(self.root.lib_features.decode(self))
      .               }
      .           
      .               /// Iterates over the language items in the given crate.
      .               fn get_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [(DefId, usize)] {
     63 ( 0.00%)          tcx.arena.alloc_from_iter(
     42 ( 0.00%)              self.root
      .                           .lang_items
      .                           .decode(self)
    564 ( 0.00%)                  .map(|(def_index, index)| (self.local_def_id(def_index), index)),
      .                   )
      .               }
      .           
      .               /// Iterates over the diagnostic items in the given crate.
      .               fn get_diagnostic_items(self) -> DiagnosticItems {
      .                   let mut id_to_name = FxHashMap::default();
     42 ( 0.00%)          let name_to_id = self
      .                       .root
      .                       .diagnostic_items
      .                       .decode(self)
      .                       .map(|(name, def_index)| {
    130 ( 0.00%)                  let id = self.local_def_id(def_index);
    130 ( 0.00%)                  id_to_name.insert(id, name);
      .                           (name, id)
      .                       })
      .                       .collect();
    189 ( 0.00%)          DiagnosticItems { id_to_name, name_to_id }
      .               }
      .           
      .               /// Iterates over all named children of the given module,
      .               /// including both proper items and reexports.
      .               /// Module here is understood in name resolution sense - it can be a `mod` item,
      .               /// or a crate root, or an enum, or a trait.
      .               fn for_each_module_child(
      .                   self,
      .                   id: DefIndex,
      .                   mut callback: impl FnMut(ModChild),
      .                   sess: &Session,
      .               ) {
    208 ( 0.00%)          if let Some(data) = &self.root.proc_macro_data {
      .                       // If we are loading as a proc macro, we want to return
      .                       // the view of this crate as a proc macro crate.
      .                       if id == CRATE_DEF_INDEX {
      .                           for def_index in data.macros.decode(self) {
      .                               let raw_macro = self.raw_proc_macro(def_index);
      .                               let res = Res::Def(
      .                                   DefKind::Macro(macro_kind(raw_macro)),
      .                                   self.local_def_id(def_index),
-- line 1078 ----------------------------------------
-- line 1085 ----------------------------------------
      .                                   span: ident.span,
      .                               });
      .                           }
      .                       }
      .                       return;
      .                   }
      .           
      .                   // Iterate over all children.
    416 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
    832 ( 0.00%)              for child_index in children.decode((self, sess)) {
 10,350 ( 0.01%)                  if let Some(ident) = self.opt_item_ident(child_index, sess) {
  1,497 ( 0.00%)                      let kind = self.def_kind(child_index);
    998 ( 0.00%)                      if matches!(kind, DefKind::Macro(..)) {
      .                                   // FIXME: Macros are currently encoded twice, once as items and once as
      .                                   // reexports. We ignore the items here and only use the reexports.
      .                                   continue;
      .                               }
      .                               let def_id = self.local_def_id(child_index);
      .                               let res = Res::Def(kind, def_id);
      .                               let vis = self.get_visibility(child_index);
      .                               let span = self.get_span(child_index, sess);
      .           
      .                               callback(ModChild { ident, res, vis, span });
      .           
      .                               // For non-re-export structs and variants add their constructors to children.
      .                               // Re-export lists automatically contain constructors when necessary.
  1,908 ( 0.00%)                      match kind {
      .                                   DefKind::Struct => {
     24 ( 0.00%)                              if let Some((ctor_def_id, ctor_kind)) =
      .                                           self.get_ctor_def_id_and_kind(child_index)
      .                                       {
      .                                           let ctor_res =
      .                                               Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);
      .                                           let vis = self.get_visibility(ctor_def_id.index);
      .                                           callback(ModChild { ident, res: ctor_res, vis, span });
      .                                       }
      .                                   }
-- line 1121 ----------------------------------------
-- line 1144 ----------------------------------------
      .                                       callback(ModChild { ident, res: ctor_res, vis, span });
      .                                   }
      .                                   _ => {}
      .                               }
      .                           }
      .                       }
      .                   }
      .           
    528 ( 0.00%)          match self.kind(id) {
     44 ( 0.00%)              EntryKind::Mod(exports) => {
 11,398 ( 0.01%)                  for exp in exports.decode((self, sess)) {
      .                               callback(exp);
      .                           }
      .                       }
      .                       EntryKind::Enum(..) | EntryKind::Trait(..) => {}
      .                       _ => bug!("`for_each_module_child` is called on a non-module: {:?}", self.def_kind(id)),
      .                   }
      .               }
      .           
      .               fn is_ctfe_mir_available(self, id: DefIndex) -> bool {
     28 ( 0.00%)          self.root.tables.mir_for_ctfe.get(self, id).is_some()
      .               }
      .           
      .               fn is_item_mir_available(self, id: DefIndex) -> bool {
      .                   self.root.tables.mir.get(self, id).is_some()
      .               }
      .           
      .               fn module_expansion(self, id: DefIndex, sess: &Session) -> ExpnId {
  2,429 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::Mod(_) | EntryKind::Enum(_) | EntryKind::Trait(_) => {
      .                           self.get_expn_that_defined(id, sess)
      .                       }
      .                       _ => panic!("Expected module, found {:?}", self.local_def_id(id)),
      .                   }
      .               }
      .           
      .               fn get_optimized_mir(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
-- line 1180 ----------------------------------------
-- line 1184 ----------------------------------------
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_optimized_mir: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_mir_for_ctfe(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
     35 ( 0.00%)          self.root
      .                       .tables
      .                       .mir_for_ctfe
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_mir_for_ctfe: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
-- line 1200 ----------------------------------------
-- line 1227 ----------------------------------------
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_promoted_mir: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn mir_const_qualif(self, id: DefIndex) -> mir::ConstQualifs {
     15 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::AnonConst(qualif, _)
      .                       | EntryKind::Const(qualif, _)
      .                       | EntryKind::AssocConst(
      .                           AssocContainer::ImplDefault
      .                           | AssocContainer::ImplFinal
      .                           | AssocContainer::TraitWithDefault,
      2 ( 0.00%)                  qualif,
      .                           _,
      .                       ) => qualif,
      .                       _ => bug!("mir_const_qualif: unexpected kind"),
      .                   }
      .               }
      .           
      .               fn get_fn_has_self_parameter(self, id: DefIndex) -> bool {
    575 ( 0.00%)          match self.kind(id) {
    460 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).has_self,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn get_associated_item_def_ids(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [DefId] {
    469 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
    201 ( 0.00%)              tcx.arena.alloc_from_iter(
     67 ( 0.00%)                  children.decode((self, tcx.sess)).map(|child_index| self.local_def_id(child_index)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
      .               }
      .           
  7,416 ( 0.00%)      fn get_associated_item(self, id: DefIndex, sess: &Session) -> ty::AssocItem {
  4,326 ( 0.00%)          let def_key = self.def_key(id);
      .                   let parent = self.local_def_id(def_key.parent.unwrap());
      .                   let ident = self.item_ident(id, sess);
      .           
  4,358 ( 0.00%)          let (kind, container, has_self) = match self.kind(id) {
      4 ( 0.00%)              EntryKind::AssocConst(container, _, _) => (ty::AssocKind::Const, container, false),
    603 ( 0.00%)              EntryKind::AssocFn(data) => {
      .                           let data = data.decode(self);
  4,221 ( 0.00%)                  (ty::AssocKind::Fn, data.container, data.has_self)
      .                       }
     28 ( 0.00%)              EntryKind::AssocType(container) => (ty::AssocKind::Type, container, false),
      .                       _ => bug!("cannot get associated-item of `{:?}`", def_key),
      .                   };
      .           
 11,124 ( 0.01%)          ty::AssocItem {
      .                       name: ident.name,
      .                       kind,
      .                       vis: self.get_visibility(id),
      .                       defaultness: container.defaultness(),
      .                       def_id: self.local_def_id(id),
      .                       trait_item_def_id: self.get_trait_item_def_id(id),
      .                       container: container.with_def_id(parent),
      .                       fn_has_self_parameter: has_self,
      .                   }
  5,562 ( 0.00%)      }
      .           
      .               fn get_item_variances(self, id: DefIndex) -> impl Iterator<Item = ty::Variance> + 'a {
    140 ( 0.00%)          self.root.tables.variances.get(self, id).unwrap_or_else(Lazy::empty).decode(self)
      .               }
      .           
      .               fn get_ctor_def_id_and_kind(self, node_id: DefIndex) -> Option<(DefId, CtorKind)> {
  2,295 ( 0.00%)          match self.kind(node_id) {
      .                       EntryKind::Struct(data, _) | EntryKind::Variant(data) => {
    987 ( 0.00%)                  let vdata = data.decode(self);
    445 ( 0.00%)                  vdata.ctor.map(|index| (self.local_def_id(index), vdata.ctor_kind))
      .                       }
      .                       _ => None,
      .                   }
  1,485 ( 0.00%)      }
      .           
    348 ( 0.00%)      fn get_item_attrs(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = ast::Attribute> + 'a {
    621 ( 0.00%)          self.root
      .                       .tables
      .                       .attributes
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           // Structure and variant constructors don't have any attributes encoded for them,
      .                           // but we assume that someone passing a constructor ID actually wants to look at
      .                           // the attributes on the corresponding struct or variant.
      .                           let def_key = self.def_key(id);
-- line 1320 ----------------------------------------
-- line 1322 ----------------------------------------
      .                           let parent_id = def_key.parent.expect("no parent for a constructor");
      .                           self.root
      .                               .tables
      .                               .attributes
      .                               .get(self, parent_id)
      .                               .expect("no encoded attributes for a structure or variant")
      .                       })
      .                       .decode((self, sess))
    261 ( 0.00%)      }
      .           
      .               fn get_struct_field_names(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = Spanned<Symbol>> + 'a {
  1,510 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
 12,210 ( 0.01%)              .map(move |index| respan(self.get_span(index, sess), self.item_ident(index, sess).name))
      .               }
      .           
      .               fn get_struct_field_visibilities(self, id: DefIndex) -> impl Iterator<Item = Visibility> + 'a {
    135 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
     58 ( 0.00%)              .map(move |field_index| self.get_visibility(field_index))
      .               }
      .           
      .               fn get_inherent_implementations_for_type(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> &'tcx [DefId] {
     56 ( 0.00%)          tcx.arena.alloc_from_iter(
     70 ( 0.00%)              self.root
      .                           .tables
      .                           .inherent_impls
      .                           .get(self, id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
    644 ( 0.00%)                  .map(|index| self.local_def_id(index)),
      .                   )
      .               }
      .           
      .               fn get_traits(self) -> impl Iterator<Item = DefId> + 'a {
      .                   self.root.traits.decode(self).map(move |index| self.local_def_id(index))
      .               }
      .           
      .               fn get_trait_impls(self) -> impl Iterator<Item = (DefId, DefId, Option<SimplifiedType>)> + 'a {
-- line 1376 ----------------------------------------
-- line 1380 ----------------------------------------
      .                           index: *trait_index,
      .                       };
      .                       impls.decode(self).map(move |(impl_index, simplified_self_ty)| {
      .                           (trait_def_id, self.local_def_id(impl_index), simplified_self_ty)
      .                       })
      .                   })
      .               }
      .           
  5,859 ( 0.00%)      fn get_implementations_of_trait(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_def_id: DefId,
      .               ) -> &'tcx [(DefId, Option<SimplifiedType>)] {
    651 ( 0.00%)          if self.trait_impls.is_empty() {
      .                       return &[];
      .                   }
      .           
      .                   // Do a reverse lookup beforehand to avoid touching the crate_num
      .                   // hash map in the loop below.
  1,000 ( 0.00%)          let key = match self.reverse_translate_def_id(trait_def_id) {
      .                       Some(def_id) => (def_id.krate.as_u32(), def_id.index),
      .                       None => return &[],
      .                   };
      .           
      .                   if let Some(impls) = self.trait_impls.get(&key) {
    620 ( 0.00%)              tcx.arena.alloc_from_iter(
    310 ( 0.00%)                  impls
      .                               .decode(self)
  6,470 ( 0.00%)                      .map(|(idx, simplified_self_ty)| (self.local_def_id(idx), simplified_self_ty)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
  5,208 ( 0.00%)      }
      .           
      .               fn get_trait_of_item(self, id: DefIndex) -> Option<DefId> {
    136 ( 0.00%)          let def_key = self.def_key(id);
    170 ( 0.00%)          match def_key.disambiguated_data.data {
      .                       DefPathData::TypeNs(..) | DefPathData::ValueNs(..) => (),
      .                       // Not an associated item
      .                       _ => return None,
      .                   }
    306 ( 0.00%)          def_key.parent.and_then(|parent_index| match self.kind(parent_index) {
      .                       EntryKind::Trait(_) | EntryKind::TraitAlias => Some(self.local_def_id(parent_index)),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               fn get_native_libraries(self, sess: &'a Session) -> impl Iterator<Item = NativeLib> + 'a {
     42 ( 0.00%)          self.root.native_libraries.decode((self, sess))
      .               }
      .           
      .               fn get_proc_macro_quoted_span(self, index: usize, sess: &Session) -> Span {
      .                   self.root
      .                       .tables
      .                       .proc_macro_quoted_spans
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing proc macro quoted span: {:?}", index))
-- line 1437 ----------------------------------------
-- line 1450 ----------------------------------------
      .                       self.root.dylib_dependency_formats.decode(self).enumerate().flat_map(|(i, link)| {
      .                           let cnum = CrateNum::new(i + 1);
      .                           link.map(|link| (self.cnum_map[cnum], link))
      .                       }),
      .                   )
      .               }
      .           
      .               fn get_missing_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [lang_items::LangItem] {
    105 ( 0.00%)          tcx.arena.alloc_from_iter(self.root.lang_items_missing.decode(self))
      .               }
      .           
      .               fn get_fn_param_names(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [Ident] {
      .                   let param_names = match self.kind(id) {
      .                       EntryKind::Fn(data) | EntryKind::ForeignFn(data) => data.decode(self).param_names,
      .                       EntryKind::AssocFn(data) => data.decode(self).fn_data.param_names,
      .                       _ => Lazy::empty(),
      .                   };
-- line 1466 ----------------------------------------
-- line 1479 ----------------------------------------
      .                       EntryKind::AnonConst(_, data)
      .                       | EntryKind::Const(_, data)
      .                       | EntryKind::AssocConst(_, _, data) => data.decode(self).0,
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_macro(self, id: DefIndex, sess: &Session) -> MacroDef {
     54 ( 0.00%)          match self.kind(id) {
      9 ( 0.00%)              EntryKind::MacroDef(macro_def) => macro_def.decode((self, sess)),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               // This replicates some of the logic of the crate-local `is_const_fn_raw` query, because we
      .               // don't serialize constness for tuple variant and tuple struct constructors.
      .               fn is_const_fn_raw(self, id: DefIndex) -> bool {
     90 ( 0.00%)          let constness = match self.kind(id) {
     20 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).fn_data.constness,
      .                       EntryKind::Fn(data) => data.decode(self).constness,
      .                       EntryKind::ForeignFn(data) => data.decode(self).constness,
      .                       EntryKind::Variant(..) | EntryKind::Struct(..) => hir::Constness::Const,
      .                       _ => hir::Constness::NotConst,
      .                   };
      .                   constness == hir::Constness::Const
      .               }
      .           
-- line 1505 ----------------------------------------
-- line 1517 ----------------------------------------
      .                       EntryKind::ForeignImmStatic | EntryKind::ForeignMutStatic | EntryKind::ForeignFn(_) => {
      .                           true
      .                       }
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn static_mutability(self, id: DefIndex) -> Option<hir::Mutability> {
     33 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::ImmStatic | EntryKind::ForeignImmStatic => Some(hir::Mutability::Not),
      .                       EntryKind::MutStatic | EntryKind::ForeignMutStatic => Some(hir::Mutability::Mut),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               fn generator_kind(self, id: DefIndex) -> Option<hir::GeneratorKind> {
      .                   match self.kind(id) {
      .                       EntryKind::Generator(data) => Some(data),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               fn fn_sig(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {
    260 ( 0.00%)          self.root.tables.fn_sig.get(self, id).unwrap().decode((self, tcx))
      .               }
      .           
      .               #[inline]
 33,838 ( 0.02%)      fn def_key(self, index: DefIndex) -> DefKey {
  9,668 ( 0.01%)          *self
      .                       .def_key_cache
      .                       .lock()
      .                       .entry(index)
 18,060 ( 0.01%)              .or_insert_with(|| self.root.tables.def_keys.get(self, index).unwrap().decode(self))
 38,672 ( 0.02%)      }
      .           
      .               // Returns the path leading to the thing with this `id`.
      .               fn def_path(self, id: DefIndex) -> DefPath {
      .                   debug!("def_path(cnum={:?}, id={:?})", self.cnum, id);
      .                   DefPath::make(self.cnum, id, |parent| self.def_key(parent))
      .               }
      .           
      .               fn def_path_hash_unlocked(
      .                   self,
      .                   index: DefIndex,
      .                   def_path_hashes: &mut FxHashMap<DefIndex, DefPathHash>,
      .               ) -> DefPathHash {
    836 ( 0.00%)          *def_path_hashes.entry(index).or_insert_with(|| {
    485 ( 0.00%)              self.root.tables.def_path_hashes.get(self, index).unwrap().decode(self)
      .                   })
      .               }
      .           
      .               #[inline]
  2,926 ( 0.00%)      fn def_path_hash(self, index: DefIndex) -> DefPathHash {
      .                   let mut def_path_hashes = self.def_path_hash_cache.lock();
      .                   self.def_path_hash_unlocked(index, &mut def_path_hashes)
  3,344 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn def_path_hash_to_def_index(self, hash: DefPathHash) -> DefIndex {
      .                   self.def_path_hash_map.def_path_hash_to_def_index(&hash)
      .               }
      .           
      .               fn expn_hash_to_expn_id(self, sess: &Session, index_guess: u32, hash: ExpnHash) -> ExpnId {
      .                   debug_assert_eq!(ExpnId::from_hash(hash), None);
-- line 1580 ----------------------------------------
-- line 1635 ----------------------------------------
      .               /// Proc macro crates don't currently export spans, so this function does not have
      .               /// to work for them.
      .               fn imported_source_files(self, sess: &Session) -> &'a [ImportedSourceFile] {
      .                   // Translate the virtual `/rustc/$hash` prefix back to a real directory
      .                   // that should hold actual sources, where possible.
      .                   //
      .                   // NOTE: if you update this, you might need to also update bootstrap's code for generating
      .                   // the `rust-src` component in `Src::run` in `src/bootstrap/dist.rs`.
 46,972 ( 0.03%)          let virtual_rust_source_base_dir = option_env!("CFG_VIRTUAL_RUST_SOURCE_BASE_DIR")
      .                       .map(Path::new)
      .                       .filter(|_| {
      .                           // Only spend time on further checks if we have what to translate *to*.
      .                           sess.opts.real_rust_source_base_dir.is_some()
      .                       })
      .                       .filter(|virtual_dir| {
      .                           // Don't translate away `/rustc/$hash` if we're still remapping to it,
      .                           // since that means we're still building `std`/`rustc` that need it,
      .                           // and we don't want the real path to leak into codegen/debuginfo.
      .                           !sess.opts.remap_path_prefix.iter().any(|(_from, to)| to == virtual_dir)
      .                       });
 46,972 ( 0.03%)          let try_to_translate_virtual_to_real = |name: &mut rustc_span::FileName| {
      .                       debug!(
      .                           "try_to_translate_virtual_to_real(name={:?}): \
      .                            virtual_rust_source_base_dir={:?}, real_rust_source_base_dir={:?}",
      .                           name, virtual_rust_source_base_dir, sess.opts.real_rust_source_base_dir,
      .                       );
      .           
  2,885 ( 0.00%)              if let Some(virtual_dir) = virtual_rust_source_base_dir {
      .                           if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                               if let rustc_span::FileName::Real(old_name) = name {
      .                                   if let rustc_span::RealFileName::Remapped { local_path: _, virtual_name } =
      .                                       old_name
      .                                   {
      .                                       if let Ok(rest) = virtual_name.strip_prefix(virtual_dir) {
      .                                           let virtual_name = virtual_name.clone();
      .           
-- line 1670 ----------------------------------------
-- line 1709 ----------------------------------------
      .                                           *old_name = new_name;
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   };
      .           
 46,881 ( 0.03%)          self.cdata.source_map_import_info.get_or_init(|| {
     30 ( 0.00%)              let external_source_map = self.root.source_map.decode(self);
      .           
      .                       external_source_map
      .                           .map(|source_file_to_import| {
      .                               // We can't reuse an existing SourceFile, so allocate a new one
      .                               // containing the information we need.
      .                               let rustc_span::SourceFile {
 12,117 ( 0.01%)                          mut name,
  3,462 ( 0.00%)                          src_hash,
    577 ( 0.00%)                          start_pos,
  1,154 ( 0.00%)                          end_pos,
  2,885 ( 0.00%)                          mut lines,
  2,885 ( 0.00%)                          mut multibyte_chars,
  3,462 ( 0.00%)                          mut non_narrow_chars,
  2,885 ( 0.00%)                          mut normalized_pos,
  3,462 ( 0.00%)                          name_hash,
      .                                   ..
      .                               } = source_file_to_import;
      .           
      .                               // If this file is under $sysroot/lib/rustlib/src/ but has not been remapped
      .                               // during rust bootstrapping by `remap-debuginfo = true`, and the user
      .                               // wish to simulate that behaviour by -Z simulate-remapped-rust-src-base,
      .                               // then we change `name` to a similar state as if the rust was bootstrapped
      .                               // with `remap-debuginfo = true`.
      .                               // This is useful for testing so that tests about the effects of
      .                               // `try_to_translate_virtual_to_real` don't have to worry about how the
      .                               // compiler is bootstrapped.
  1,154 ( 0.00%)                      if let Some(virtual_dir) =
      .                                   &sess.opts.debugging_opts.simulate_remapped_rust_src_base
      .                               {
      .                                   if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                                       if let rustc_span::FileName::Real(ref mut old_name) = name {
      .                                           if let rustc_span::RealFileName::LocalPath(local) = old_name {
      .                                               if let Ok(rest) = local.strip_prefix(real_dir) {
      .                                                   *old_name = rustc_span::RealFileName::Remapped {
      .                                                       local_path: None,
-- line 1753 ----------------------------------------
-- line 1767 ----------------------------------------
      .                               let source_length = (end_pos - start_pos).to_usize();
      .           
      .                               // Translate line-start positions and multibyte character
      .                               // position into frame of reference local to file.
      .                               // `SourceMap::new_imported_source_file()` will then translate those
      .                               // coordinates to their new global frame of reference when the
      .                               // offset of the SourceFile is known.
      .                               for pos in &mut lines {
741,292 ( 0.41%)                          *pos = *pos - start_pos;
      .                               }
      .                               for mbc in &mut multibyte_chars {
  1,596 ( 0.00%)                          mbc.pos = mbc.pos - start_pos;
      .                               }
      .                               for swc in &mut non_narrow_chars {
    924 ( 0.00%)                          *swc = *swc - start_pos;
      .                               }
      .                               for np in &mut normalized_pos {
      .                                   np.pos = np.pos - start_pos;
      .                               }
      .           
 10,386 ( 0.01%)                      let local_version = sess.source_map().new_imported_source_file(
  7,501 ( 0.00%)                          name,
  4,039 ( 0.00%)                          src_hash,
      .                                   name_hash,
      .                                   source_length,
  1,154 ( 0.00%)                          self.cnum,
  2,885 ( 0.00%)                          lines,
  3,462 ( 0.00%)                          multibyte_chars,
  2,885 ( 0.00%)                          non_narrow_chars,
  2,308 ( 0.00%)                          normalized_pos,
      .                                   start_pos,
      .                                   end_pos,
      .                               );
      .                               debug!(
      .                                   "CrateMetaData::imported_source_files alloc \
      .                                    source_file {:?} original (start_pos {:?} end_pos {:?}) \
      .                                    translated (start_pos {:?} end_pos {:?})",
      .                                   local_version.name,
-- line 1804 ----------------------------------------
-- line 1808 ----------------------------------------
      .                                   local_version.end_pos
      .                               );
      .           
      .                               ImportedSourceFile {
      .                                   original_start_pos: start_pos,
      .                                   original_end_pos: end_pos,
      .                                   translated_source_file: local_version,
      .                               }
  1,731 ( 0.00%)                  })
      .                           .collect()
      .                   })
      .               }
      .           }
      .           
      .           impl CrateMetadata {
    252 ( 0.00%)      crate fn new(
      .                   sess: &Session,
      .                   blob: MetadataBlob,
      .                   root: CrateRoot<'static>,
      .                   raw_proc_macros: Option<&'static [ProcMacro]>,
      .                   cnum: CrateNum,
      .                   cnum_map: CrateNumMap,
      .                   dep_kind: CrateDepKind,
      .                   source: CrateSource,
      .                   private_dep: bool,
      .                   host_hash: Option<Svh>,
      .               ) -> CrateMetadata {
     63 ( 0.00%)          let trait_impls = root
      .                       .impls
      .                       .decode((&blob, sess))
      .                       .map(|trait_impls| (trait_impls.trait_id, trait_impls.impls))
      .                       .collect();
      .                   let alloc_decoding_state =
     63 ( 0.00%)              AllocDecodingState::new(root.interpret_alloc_index.decode(&blob).collect());
      .                   let dependencies = Lock::new(cnum_map.iter().cloned().collect());
      .           
      .                   // Pre-decode the DefPathHash->DefIndex table. This is a cheap operation
      .                   // that does not copy any data. It just does some data verification.
     21 ( 0.00%)          let def_path_hash_map = root.def_path_hash_map.decode(&blob);
      .           
    483 ( 0.00%)          CrateMetadata {
     21 ( 0.00%)              blob,
     63 ( 0.00%)              root,
     84 ( 0.00%)              trait_impls,
      .                       raw_proc_macros,
      .                       source_map_import_info: OnceCell::new(),
     84 ( 0.00%)              def_path_hash_map,
      .                       expn_hash_map: Default::default(),
    147 ( 0.00%)              alloc_decoding_state,
      .                       cnum,
     84 ( 0.00%)              cnum_map,
    105 ( 0.00%)              dependencies,
      .                       dep_kind: Lock::new(dep_kind),
    252 ( 0.00%)              source,
      .                       private_dep,
      .                       host_hash,
      .                       extern_crate: Lock::new(None),
      .                       hygiene_context: Default::default(),
      .                       def_key_cache: Default::default(),
      .                       def_path_hash_cache: Default::default(),
      .                   }
    189 ( 0.00%)      }
      .           
      .               crate fn dependencies(&self) -> LockGuard<'_, Vec<CrateNum>> {
      .                   self.dependencies.borrow()
      .               }
      .           
      .               crate fn add_dependency(&self, cnum: CrateNum) {
      .                   self.dependencies.borrow_mut().push(cnum);
      .               }
      .           
      .               crate fn update_extern_crate(&self, new_extern_crate: ExternCrate) -> bool {
      .                   let mut extern_crate = self.extern_crate.borrow_mut();
      .                   let update = Some(new_extern_crate.rank()) > extern_crate.as_ref().map(ExternCrate::rank);
      .                   if update {
    105 ( 0.00%)              *extern_crate = Some(new_extern_crate);
      .                   }
      .                   update
      .               }
      .           
      .               crate fn source(&self) -> &CrateSource {
      4 ( 0.00%)          &self.source
      .               }
      .           
      .               crate fn dep_kind(&self) -> CrateDepKind {
      .                   *self.dep_kind.lock()
      .               }
      .           
      .               crate fn update_dep_kind(&self, f: impl FnOnce(CrateDepKind) -> CrateDepKind) {
     90 ( 0.00%)          self.dep_kind.with_lock(|dep_kind| *dep_kind = f(*dep_kind))
      .               }
      .           
      .               crate fn panic_strategy(&self) -> PanicStrategy {
      .                   self.root.panic_strategy
      .               }
      .           
      .               crate fn needs_panic_runtime(&self) -> bool {
      .                   self.root.needs_panic_runtime
-- line 1905 ----------------------------------------
-- line 1909 ----------------------------------------
      .                   self.root.panic_runtime
      .               }
      .           
      .               crate fn is_profiler_runtime(&self) -> bool {
      .                   self.root.profiler_runtime
      .               }
      .           
      .               crate fn needs_allocator(&self) -> bool {
      5 ( 0.00%)          self.root.needs_allocator
      .               }
      .           
      .               crate fn has_global_allocator(&self) -> bool {
      .                   self.root.has_global_allocator
      .               }
      .           
      .               crate fn has_default_lib_allocator(&self) -> bool {
      .                   self.root.has_default_lib_allocator
      .               }
      .           
      .               crate fn is_proc_macro_crate(&self) -> bool {
      .                   self.root.is_proc_macro_crate()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
     39 ( 0.00%)          self.root.name
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
      .                   self.root.stable_crate_id
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
      .                   self.root.hash
      .               }
      .           
      .               fn num_def_ids(&self) -> usize {
      .                   self.root.tables.def_keys.size()
      .               }
      .           
      .               fn local_def_id(&self, index: DefIndex) -> DefId {
 11,862 ( 0.01%)          DefId { krate: self.cnum, index }
      .               }
      .           
      .               // Translate a DefId from the current compilation environment to a DefId
      .               // for an external crate.
      .               fn reverse_translate_def_id(&self, did: DefId) -> Option<DefId> {
      .                   for (local, &global) in self.cnum_map.iter_enumerated() {
  2,377 ( 0.00%)              if global == did.krate {
      .                           return Some(DefId { krate: local, index: did.index });
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .           }
      .           
-- line 1964 ----------------------------------------

532,009 ( 0.29%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs
--------------------------------------------------------------------------------
Ir               

-- line 15 ----------------------------------------
      .           use std::str;
      .           
      .           use crate::{with_session_globals, Edition, Span, DUMMY_SP};
      .           
      .           #[cfg(test)]
      .           mod tests;
      .           
      .           // The proc macro code for this is in `compiler/rustc_macros/src/symbols.rs`.
      8 ( 0.00%)  symbols! {
      .               // After modifying this list adjust `is_special`, `is_used_keyword`/`is_unused_keyword`,
      .               // this should be rarely necessary though if the keywords are kept in alphabetic order.
      .               Keywords {
      .                   // Special reserved identifiers used internally for elided lifetimes,
      .                   // unnamed method parameters, crate root module, error recovery etc.
      .                   Empty:              "",
      .                   PathRoot:           "{{root}}",
      .                   DollarCrate:        "$crate",
-- line 31 ----------------------------------------
-- line 1498 ----------------------------------------
      .                   write_str,
      .                   writeln_macro,
      .                   x87_reg,
      .                   xer,
      .                   xmm_reg,
      .                   ymm_reg,
      .                   zmm_reg,
      .               }
     10 ( 0.00%)  }
      .           
  4,770 ( 0.00%)  #[derive(Copy, Clone, Eq, HashStable_Generic, Encodable, Decodable)]
      .           pub struct Ident {
      .               pub name: Symbol,
      .               pub span: Span,
      .           }
      .           
      .           impl Ident {
      .               #[inline]
      .               /// Constructs a new identifier from a symbol and a span.
      .               pub const fn new(name: Symbol, span: Span) -> Ident {
      .                   Ident { name, span }
 49,352 ( 0.03%)      }
      .           
      .               /// Constructs a new identifier with a dummy span.
      .               #[inline]
      .               pub const fn with_dummy_span(name: Symbol) -> Ident {
      .                   Ident::new(name, DUMMY_SP)
      .               }
      .           
      .               #[inline]
      .               pub fn empty() -> Ident {
      .                   Ident::with_dummy_span(kw::Empty)
      .               }
      .           
      .               /// Maps a string to an identifier with a dummy span.
      4 ( 0.00%)      pub fn from_str(string: &str) -> Ident {
      4 ( 0.00%)          Ident::with_dummy_span(Symbol::intern(string))
     16 ( 0.00%)      }
      .           
      .               /// Maps a string and a span to an identifier.
     16 ( 0.00%)      pub fn from_str_and_span(string: &str, span: Span) -> Ident {
      8 ( 0.00%)          Ident::new(Symbol::intern(string), span)
     16 ( 0.00%)      }
      .           
      .               /// Replaces `lo` and `hi` with those from `span`, but keep hygiene context.
    720 ( 0.00%)      pub fn with_span_pos(self, span: Span) -> Ident {
      .                   Ident::new(self.name, span.with_ctxt(self.span.ctxt()))
    450 ( 0.00%)      }
      .           
      .               pub fn without_first_quote(self) -> Ident {
      .                   Ident::new(Symbol::intern(self.as_str().trim_start_matches('\'')), self.span)
      .               }
      .           
      .               /// "Normalize" ident for use in comparisons using "item hygiene".
      .               /// Identifiers with same string value become same if they came from the same macro 2.0 macro
      .               /// (e.g., `macro` item, but not `macro_rules` item) and stay different if they came from
      .               /// different macro 2.0 macros.
      .               /// Technically, this operation strips all non-opaque marks from ident's syntactic context.
 62,712 ( 0.03%)      pub fn normalize_to_macros_2_0(self) -> Ident {
      .                   Ident::new(self.name, self.span.normalize_to_macros_2_0())
 48,776 ( 0.03%)      }
      .           
      .               /// "Normalize" ident for use in comparisons using "local variable hygiene".
      .               /// Identifiers with same string value become same if they came from the same non-transparent
      .               /// macro (e.g., `macro` or `macro_rules!` items) and stay different if they came from different
      .               /// non-transparent macros.
      .               /// Technically, this operation strips all transparent marks from ident's syntactic context.
  3,132 ( 0.00%)      pub fn normalize_to_macro_rules(self) -> Ident {
      .                   Ident::new(self.name, self.span.normalize_to_macro_rules())
  2,436 ( 0.00%)      }
      .           
      .               /// Access the underlying string. This is a slowish operation because it
      .               /// requires locking the symbol interner.
      .               ///
      .               /// Note that the lifetime of the return value is a lie. See
      .               /// `Symbol::as_str()` for details.
      .               pub fn as_str(&self) -> &str {
     22 ( 0.00%)          self.name.as_str()
      .               }
      .           }
      .           
      .           impl PartialEq for Ident {
  4,173 ( 0.00%)      fn eq(&self, rhs: &Self) -> bool {
  7,792 ( 0.00%)          self.name == rhs.name && self.span.ctxt() == rhs.span.ctxt()
  5,564 ( 0.00%)      }
      .           }
      .           
      .           impl Hash for Ident {
      .               fn hash<H: Hasher>(&self, state: &mut H) {
    103 ( 0.00%)          self.name.hash(state);
  1,907 ( 0.00%)          self.span.ctxt().hash(state);
      .               }
      .           }
      .           
      .           impl fmt::Debug for Ident {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Display::fmt(self, f)?;
      .                   fmt::Debug::fmt(&self.span.ctxt(), f)
      .               }
      .           }
      .           
      .           /// This implementation is supposed to be used in error messages, so it's expected to be identical
      .           /// to printing the original identifier token written in source code (`token_to_string`),
      .           /// except that AST identifiers don't keep the rawness flag, so we have to guess it.
      .           impl fmt::Display for Ident {
     16 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     20 ( 0.00%)          fmt::Display::fmt(&IdentPrinter::new(self.name, self.is_raw_guess(), None), f)
     16 ( 0.00%)      }
      .           }
      .           
      .           /// This is the most general way to print identifiers.
      .           /// AST pretty-printer is used as a fallback for turning AST structures into token streams for
      .           /// proc macros. Additionally, proc macros may stringify their input and expect it survive the
      .           /// stringification (especially true for proc macro derives written between Rust 1.15 and 1.30).
      .           /// So we need to somehow pretty-print `$crate` in a way preserving at least some of its
      .           /// hygiene data, most importantly name of the crate it refers to.
-- line 1613 ----------------------------------------
-- line 1622 ----------------------------------------
      .               is_raw: bool,
      .               /// Span used for retrieving the crate name to which `$crate` refers to,
      .               /// if this field is `None` then the `$crate` conversion doesn't happen.
      .               convert_dollar_crate: Option<Span>,
      .           }
      .           
      .           impl IdentPrinter {
      .               /// The most general `IdentPrinter` constructor. Do not use this.
     46 ( 0.00%)      pub fn new(symbol: Symbol, is_raw: bool, convert_dollar_crate: Option<Span>) -> IdentPrinter {
    260 ( 0.00%)          IdentPrinter { symbol, is_raw, convert_dollar_crate }
     46 ( 0.00%)      }
      .           
      .               /// This implementation is supposed to be used when printing identifiers
      .               /// as a part of pretty-printing for larger AST pieces.
      .               /// Do not use this either.
     28 ( 0.00%)      pub fn for_ast_ident(ident: Ident, is_raw: bool) -> IdentPrinter {
     28 ( 0.00%)          IdentPrinter::new(ident.name, is_raw, Some(ident.span))
     14 ( 0.00%)      }
      .           }
      .           
      .           impl fmt::Display for IdentPrinter {
    320 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    128 ( 0.00%)          if self.is_raw {
      .                       f.write_str("r#")?;
     64 ( 0.00%)          } else if self.symbol == kw::DollarCrate {
      .                       if let Some(span) = self.convert_dollar_crate {
      .                           let converted = span.ctxt().dollar_crate_name();
      .                           if !converted.is_path_segment_keyword() {
      .                               f.write_str("::")?;
      .                           }
      .                           return fmt::Display::fmt(&converted, f);
      .                       }
      .                   }
-- line 1654 ----------------------------------------
-- line 1656 ----------------------------------------
      .               }
      .           }
      .           
      .           /// An newtype around `Ident` that calls [Ident::normalize_to_macro_rules] on
      .           /// construction.
      .           // FIXME(matthewj, petrochenkov) Use this more often, add a similar
      .           // `ModernIdent` struct and use that as well.
      .           #[derive(Copy, Clone, Eq, PartialEq, Hash)]
  1,076 ( 0.00%)  pub struct MacroRulesNormalizedIdent(Ident);
      .           
      .           impl MacroRulesNormalizedIdent {
      .               pub fn new(ident: Ident) -> Self {
    302 ( 0.00%)          Self(ident.normalize_to_macro_rules())
      .               }
      .           }
      .           
      .           impl fmt::Debug for MacroRulesNormalizedIdent {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Debug::fmt(&self.0, f)
      .               }
      .           }
-- line 1676 ----------------------------------------
-- line 1686 ----------------------------------------
      .           /// Internally, a `Symbol` is implemented as an index, and all operations
      .           /// (including hashing, equality, and ordering) operate on that index. The use
      .           /// of `rustc_index::newtype_index!` means that `Option<Symbol>` only takes up 4 bytes,
      .           /// because `rustc_index::newtype_index!` reserves the last 256 values for tagging purposes.
      .           ///
      .           /// Note that `Symbol` cannot directly be a `rustc_index::newtype_index!` because it
      .           /// implements `fmt::Debug`, `Encodable`, and `Decodable` in special ways.
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
  6,620 ( 0.00%)  pub struct Symbol(SymbolIndex);
      .           
      .           rustc_index::newtype_index! {
      .               struct SymbolIndex { .. }
      .           }
      .           
      .           impl Symbol {
      .               const fn new(n: u32) -> Self {
      .                   Symbol(SymbolIndex::from_u32(n))
      4 ( 0.00%)      }
      .           
      .               /// Maps a string to its interned representation.
256,599 ( 0.14%)      pub fn intern(string: &str) -> Self {
      .                   with_session_globals(|session_globals| session_globals.symbol_interner.intern(string))
256,599 ( 0.14%)      }
      .           
      .               /// Access the underlying string. This is a slowish operation because it
      .               /// requires locking the symbol interner.
      .               ///
      .               /// Note that the lifetime of the return value is a lie. It's not the same
      .               /// as `&self`, but actually tied to the lifetime of the underlying
      .               /// interner. Interners are long-lived, and there are very few of them, and
      .               /// this function is typically used for short-lived things, so in practice
      .               /// it works out ok.
  9,873 ( 0.01%)      pub fn as_str(&self) -> &str {
  3,291 ( 0.00%)          with_session_globals(|session_globals| unsafe {
      .                       std::mem::transmute::<&str, &str>(session_globals.symbol_interner.get(*self))
      .                   })
 13,164 ( 0.01%)      }
      .           
      .               pub fn as_u32(self) -> u32 {
      .                   self.0.as_u32()
      .               }
      .           
      .               pub fn is_empty(self) -> bool {
      .                   self == kw::Empty
      .               }
-- line 1730 ----------------------------------------
-- line 1740 ----------------------------------------
      .           
      .           impl fmt::Debug for Symbol {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Debug::fmt(self.as_str(), f)
      .               }
      .           }
      .           
      .           impl fmt::Display for Symbol {
    174 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  1,098 ( 0.00%)          fmt::Display::fmt(self.as_str(), f)
      .               }
      .           }
      .           
      .           impl<S: Encoder> Encodable<S> for Symbol {
      .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
  4,199 ( 0.00%)          s.emit_str(self.as_str())
      .               }
      .           }
      .           
      .           impl<D: Decoder> Decodable<D> for Symbol {
      .               #[inline]
 22,072 ( 0.01%)      fn decode(d: &mut D) -> Symbol {
 69,575 ( 0.04%)          Symbol::intern(&d.read_str())
      .               }
      .           }
      .           
      .           impl<CTX> HashStable<CTX> for Symbol {
      .               #[inline]
    132 ( 0.00%)      fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
  3,060 ( 0.00%)          self.as_str().hash_stable(hcx, hasher);
    120 ( 0.00%)      }
      .           }
      .           
      .           impl<CTX> ToStableHashKey<CTX> for Symbol {
      .               type KeyType = String;
      .               #[inline]
      .               fn to_stable_hash_key(&self, _: &CTX) -> String {
      .                   self.as_str().to_string()
      .               }
-- line 1778 ----------------------------------------
-- line 1785 ----------------------------------------
      .           //
      .           // The `FxHashMap`+`Vec` pair could be replaced by `FxIndexSet`, but #75278
      .           // found that to regress performance up to 2% in some cases. This might be
      .           // revisited after further improvements to `indexmap`.
      .           //
      .           // This type is private to prevent accidentally constructing more than one
      .           // `Interner` on the same thread, which makes it easy to mixup `Symbol`s
      .           // between `Interner`s.
      2 ( 0.00%)  #[derive(Default)]
      .           struct InternerInner {
      .               arena: DroplessArena,
      .               names: FxHashMap<&'static str, Symbol>,
      .               strings: Vec<&'static str>,
      .           }
      .           
      .           impl Interner {
      .               fn prefill(init: &[&'static str]) -> Self {
     30 ( 0.00%)          Interner(Lock::new(InternerInner {
      .                       strings: init.into(),
      .                       names: init.iter().copied().zip((0..).map(Symbol::new)).collect(),
      .                       ..Default::default()
      .                   }))
      .               }
      .           
      .               #[inline]
      .               fn intern(&self, string: &str) -> Symbol {
      .                   let mut inner = self.0.lock();
 34,990 ( 0.02%)          if let Some(&name) = inner.names.get(string) {
      .                       return name;
      .                   }
      .           
 11,016 ( 0.01%)          let name = Symbol::new(inner.strings.len() as u32);
      .           
      .                   // SAFETY: we convert from `&str` to `&[u8]`, clone it into the arena,
      .                   // and immediately convert the clone back to `&[u8], all because there
      .                   // is no `inner.arena.alloc_str()` method. This is clearly safe.
      .                   let string: &str =
      .                       unsafe { str::from_utf8_unchecked(inner.arena.alloc_slice(string.as_bytes())) };
      .           
      .                   // SAFETY: we can extend the arena allocation to `'static` because we
-- line 1824 ----------------------------------------
-- line 1831 ----------------------------------------
      .                   // #91445 for details.
      .                   inner.names.insert(string, name);
      .                   name
      .               }
      .           
      .               // Get the symbol as a string. `Symbol::as_str()` should be used in
      .               // preference to this function.
      .               fn get(&self, symbol: Symbol) -> &str {
  9,873 ( 0.01%)          self.0.lock().strings[symbol.0.as_usize()]
      .               }
      .           }
      .           
      .           // This module has a very short name because it's used a lot.
      .           /// This module contains all the defined keyword `Symbol`s.
      .           ///
      .           /// Given that `kw` is imported, use them like `kw::keyword_name`.
      .           /// For example `kw::Loop` or `kw::Break`.
-- line 1847 ----------------------------------------
-- line 1863 ----------------------------------------
      .           
      .               // Used from a macro in `librustc_feature/accepted.rs`
      .               pub use super::kw::MacroRules as macro_rules;
      .           
      .               /// Get the symbol for an integer.
      .               ///
      .               /// The first few non-negative integers each have a static symbol and therefore
      .               /// are fast.
      7 ( 0.00%)      pub fn integer<N: TryInto<usize> + Copy + ToString>(n: N) -> Symbol {
      7 ( 0.00%)          if let Result::Ok(idx) = n.try_into() {
      .                       if idx < 10 {
      8 ( 0.00%)                  return Symbol::new(super::SYMBOL_DIGITS_BASE + idx as u32);
      .                       }
      .                   }
      .                   Symbol::intern(&n.to_string())
      .               }
      .           }
      .           
      .           impl Symbol {
      .               fn is_special(self) -> bool {
      .                   self <= kw::Underscore
      .               }
      .           
      .               fn is_used_keyword_always(self) -> bool {
    138 ( 0.00%)          self >= kw::As && self <= kw::While
      .               }
      .           
      .               fn is_used_keyword_conditional(self, edition: impl FnOnce() -> Edition) -> bool {
  3,042 ( 0.00%)          (self >= kw::Async && self <= kw::Dyn) && edition() >= Edition::Edition2018
      .               }
      .           
      .               fn is_unused_keyword_always(self) -> bool {
    138 ( 0.00%)          self >= kw::Abstract && self <= kw::Yield
      .               }
      .           
      .               fn is_unused_keyword_conditional(self, edition: impl FnOnce() -> Edition) -> bool {
     46 ( 0.00%)          self == kw::Try && edition() >= Edition::Edition2018
      .               }
      .           
      .               pub fn is_reserved(self, edition: impl Copy + FnOnce() -> Edition) -> bool {
  5,094 ( 0.00%)          self.is_special()
      .                       || self.is_used_keyword_always()
      .                       || self.is_unused_keyword_always()
      .                       || self.is_used_keyword_conditional(edition)
      .                       || self.is_unused_keyword_conditional(edition)
      .               }
      .           
      .               /// A keyword or reserved identifier that can be used as a path segment.
      .               pub fn is_path_segment_keyword(self) -> bool {
 11,956 ( 0.01%)          self == kw::Super
      .                       || self == kw::SelfLower
      .                       || self == kw::SelfUpper
      .                       || self == kw::Crate
      .                       || self == kw::PathRoot
      .                       || self == kw::DollarCrate
      .               }
      .           
      .               /// Returns `true` if the symbol is `true` or `false`.
      .               pub fn is_bool_lit(self) -> bool {
    207 ( 0.00%)          self == kw::True || self == kw::False
    207 ( 0.00%)      }
      .           
      .               /// Returns `true` if this symbol can be a raw identifier.
      .               pub fn can_be_raw(self) -> bool {
     50 ( 0.00%)          self != kw::Empty && self != kw::Underscore && !self.is_path_segment_keyword()
      1 ( 0.00%)      }
      .           }
      .           
      .           impl Ident {
      .               // Returns `true` for reserved identifiers used internally for elided lifetimes,
      .               // unnamed method parameters, crate root module, error recovery etc.
      .               pub fn is_special(self) -> bool {
      .                   self.name.is_special()
     46 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is a keyword used in the language.
     46 ( 0.00%)      pub fn is_used_keyword(self) -> bool {
      .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
     46 ( 0.00%)          self.name.is_used_keyword_always()
      .                       || self.name.is_used_keyword_conditional(|| self.span.edition())
     92 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is a keyword reserved for possible future use.
     46 ( 0.00%)      pub fn is_unused_keyword(self) -> bool {
      .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
     46 ( 0.00%)          self.name.is_unused_keyword_always()
      .                       || self.name.is_unused_keyword_conditional(|| self.span.edition())
     92 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is either a special identifier or a keyword.
    998 ( 0.00%)      pub fn is_reserved(self) -> bool {
      .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
      .                   self.name.is_reserved(|| self.span.edition())
  1,996 ( 0.00%)      }
      .           
      .               /// A keyword or reserved identifier that can be used as a path segment.
      .               pub fn is_path_segment_keyword(self) -> bool {
      .                   self.name.is_path_segment_keyword()
  1,708 ( 0.00%)      }
      .           
      .               /// We see this identifier in a normal identifier position, like variable name or a type.
      .               /// How was it written originally? Did it use the raw form? Let's try to guess.
     18 ( 0.00%)      pub fn is_raw_guess(self) -> bool {
      .                   self.name.can_be_raw() && self.is_reserved()
     36 ( 0.00%)      }
      .           }

 43,653 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/codec.rs
--------------------------------------------------------------------------------
Ir               

-- line 70 ----------------------------------------
      .           ///
      .           /// `Decodable` can still be implemented in cases where `Decodable` is required
      .           /// by a trait bound.
      .           pub trait RefDecodable<'tcx, D: TyDecoder<'tcx>> {
      .               fn decode(d: &mut D) -> &'tcx Self;
      .           }
      .           
      .           /// Encode the given value or a previously cached shorthand.
  1,512 ( 0.00%)  pub fn encode_with_shorthand<'tcx, E, T, M>(
      .               encoder: &mut E,
      .               value: &T,
      .               cache: M,
      .           ) -> Result<(), E::Error>
      .           where
      .               E: TyEncoder<'tcx>,
      .               M: for<'b> Fn(&'b mut E) -> &'b mut FxHashMap<T, usize>,
      .               T: EncodableWithShorthand<'tcx, E>,
-- line 86 ----------------------------------------
-- line 90 ----------------------------------------
      .               let existing_shorthand = cache(encoder).get(value).copied();
      .               if let Some(shorthand) = existing_shorthand {
      .                   return encoder.emit_usize(shorthand);
      .               }
      .           
      .               let variant = value.variant();
      .           
      .               let start = encoder.position();
    330 ( 0.00%)      variant.encode(encoder)?;
    220 ( 0.00%)      let len = encoder.position() - start;
      .           
      .               // The shorthand encoding uses the same usize as the
      .               // discriminant, with an offset so they can't conflict.
      .               let discriminant = intrinsics::discriminant_value(variant);
      .               assert!(SHORTHAND_OFFSET > discriminant as usize);
      .           
    220 ( 0.00%)      let shorthand = start + SHORTHAND_OFFSET;
      .           
      .               // Get the number of bits that leb128 could fit
      .               // in the same space as the fully encoded type.
    220 ( 0.00%)      let leb128_bits = len * 7;
      .           
      .               // Check that the shorthand is a not longer than the
      .               // full encoding itself, i.e., it's an obvious win.
    770 ( 0.00%)      if leb128_bits >= 64 || (shorthand as u64) < (1 << leb128_bits) {
      .                   cache(encoder).insert(*value, shorthand);
      .               }
      .           
      .               Ok(())
    888 ( 0.00%)  }
      .           
      .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for Ty<'tcx> {
      .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
    831 ( 0.00%)          encode_with_shorthand(e, self, TyEncoder::type_shorthands)
      .               }
      .           }
      .           
      .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for ty::Binder<'tcx, ty::PredicateKind<'tcx>> {
      .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
      .                   self.bound_vars().encode(e)?;
     18 ( 0.00%)          encode_with_shorthand(e, &self.skip_binder(), TyEncoder::predicate_shorthands)
      .               }
      .           }
      .           
      .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for ty::Predicate<'tcx> {
      .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
      .                   self.kind().encode(e)
      .               }
      .           }
-- line 138 ----------------------------------------
-- line 141 ----------------------------------------
      .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
      .                   e.encode_alloc_id(self)
      .               }
      .           }
      .           
      .           macro_rules! encodable_via_deref {
      .               ($($t:ty),+) => {
      .                   $(impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for $t {
    115 ( 0.00%)              fn encode(&self, e: &mut E) -> Result<(), E::Error> {
     23 ( 0.00%)                  (**self).encode(e)
    115 ( 0.00%)              }
      .                   })*
      .               }
      .           }
      .           
      .           encodable_via_deref! {
      .               &'tcx ty::TypeckResults<'tcx>,
      .               ty::Region<'tcx>,
      .               &'tcx mir::Body<'tcx>,
-- line 159 ----------------------------------------
-- line 176 ----------------------------------------
      .               where
      .                   F: FnOnce(&mut Self) -> Ty<'tcx>;
      .           
      .               fn with_position<F, R>(&mut self, pos: usize, f: F) -> R
      .               where
      .                   F: FnOnce(&mut Self) -> R;
      .           
      .               fn positioned_at_shorthand(&self) -> bool {
 10,446 ( 0.01%)          (self.peek_byte() & (SHORTHAND_OFFSET as u8)) != 0
      .               }
      .           
      .               fn decode_alloc_id(&mut self) -> AllocId;
      .           }
      .           
      .           #[inline]
      .           fn decode_arena_allocable<'tcx, D, T: ArenaAllocatable<'tcx> + Decodable<D>>(
      .               decoder: &mut D,
      .           ) -> &'tcx T
      .           where
      .               D: TyDecoder<'tcx>,
      .           {
  5,032 ( 0.00%)      decoder.tcx().arena.alloc(Decodable::decode(decoder))
      .           }
      .           
      .           #[inline]
      .           fn decode_arena_allocable_slice<'tcx, D, T: ArenaAllocatable<'tcx> + Decodable<D>>(
      .               decoder: &mut D,
      .           ) -> &'tcx [T]
      .           where
      .               D: TyDecoder<'tcx>,
      .           {
      .               decoder.tcx().arena.alloc_from_iter(<Vec<T> as Decodable<D>>::decode(decoder))
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for Ty<'tcx> {
      .               #[allow(rustc::usage_of_ty_tykind)]
 41,320 ( 0.02%)      fn decode(decoder: &mut D) -> Ty<'tcx> {
      .                   // Handle shorthands first, if we have a usize > 0x80.
 10,330 ( 0.01%)          if decoder.positioned_at_shorthand() {
      .                       let pos = decoder.read_usize();
 14,302 ( 0.01%)              assert!(pos >= SHORTHAND_OFFSET);
 21,453 ( 0.01%)              let shorthand = pos - SHORTHAND_OFFSET;
      .           
 21,453 ( 0.01%)              decoder.cached_ty_for_shorthand(shorthand, |decoder| {
      .                           decoder.with_position(shorthand, Ty::decode)
      .                       })
      .                   } else {
  3,179 ( 0.00%)              let tcx = decoder.tcx();
  6,358 ( 0.00%)              tcx.mk_ty(ty::TyKind::decode(decoder))
      .                   }
 41,320 ( 0.02%)      }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for ty::Binder<'tcx, ty::PredicateKind<'tcx>> {
    696 ( 0.00%)      fn decode(decoder: &mut D) -> ty::Binder<'tcx, ty::PredicateKind<'tcx>> {
      .                   let bound_vars = Decodable::decode(decoder);
      .                   // Handle shorthands first, if we have a usize > 0x80.
      .                   ty::Binder::bind_with_vars(
    116 ( 0.00%)              if decoder.positioned_at_shorthand() {
      .                           let pos = decoder.read_usize();
    174 ( 0.00%)                  assert!(pos >= SHORTHAND_OFFSET);
     87 ( 0.00%)                  let shorthand = pos - SHORTHAND_OFFSET;
      .           
      .                           decoder.with_position(shorthand, ty::PredicateKind::decode)
      .                       } else {
     87 ( 0.00%)                  ty::PredicateKind::decode(decoder)
      .                       },
      .                       bound_vars,
      .                   )
    696 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for ty::Predicate<'tcx> {
      .               fn decode(decoder: &mut D) -> ty::Predicate<'tcx> {
    348 ( 0.00%)          let predicate_kind = Decodable::decode(decoder);
    116 ( 0.00%)          decoder.tcx().mk_predicate(predicate_kind)
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for SubstsRef<'tcx> {
      .               fn decode(decoder: &mut D) -> Self {
      .                   let len = decoder.read_usize();
  5,938 ( 0.00%)          let tcx = decoder.tcx();
      .                   tcx.mk_substs(
 11,776 ( 0.01%)              (0..len).map::<ty::subst::GenericArg<'tcx>, _>(|_| Decodable::decode(decoder)),
      .                   )
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for mir::Place<'tcx> {
      .               fn decode(decoder: &mut D) -> Self {
      .                   let local: mir::Local = Decodable::decode(decoder);
      .                   let len = decoder.read_usize();
     32 ( 0.00%)          let projection = decoder.tcx().mk_place_elems(
     14 ( 0.00%)              (0..len).map::<mir::PlaceElem<'tcx>, _>(|_| Decodable::decode(decoder)),
      .                   );
      .                   mir::Place { local, projection }
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for ty::Region<'tcx> {
 10,402 ( 0.01%)      fn decode(decoder: &mut D) -> Self {
  4,458 ( 0.00%)          decoder.tcx().mk_region(Decodable::decode(decoder))
 11,888 ( 0.01%)      }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for CanonicalVarInfos<'tcx> {
      .               fn decode(decoder: &mut D) -> Self {
      .                   let len = decoder.read_usize();
      .                   let interned: Vec<CanonicalVarInfo<'tcx>> =
      .                       (0..len).map(|_| Decodable::decode(decoder)).collect();
      .                   decoder.tcx().intern_canonical_var_infos(interned.as_slice())
-- line 287 ----------------------------------------
-- line 308 ----------------------------------------
      .                       }
      .                   })*
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for ty::List<Ty<'tcx>> {
      .               fn decode(decoder: &mut D) -> &'tcx Self {
      .                   let len = decoder.read_usize();
    969 ( 0.00%)          decoder.tcx().mk_type_list((0..len).map::<Ty<'tcx>, _>(|_| Decodable::decode(decoder)))
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D>
      .               for ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>
      .           {
      .               fn decode(decoder: &mut D) -> &'tcx Self {
      .                   let len = decoder.read_usize();
      8 ( 0.00%)          decoder.tcx().mk_poly_existential_predicates(
     46 ( 0.00%)              (0..len).map::<ty::Binder<'tcx, _>, _>(|_| Decodable::decode(decoder)),
      .                   )
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for ty::Const<'tcx> {
      .               fn decode(decoder: &mut D) -> &'tcx Self {
    206 ( 0.00%)          decoder.tcx().mk_const(Decodable::decode(decoder))
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for [ty::ValTree<'tcx>] {
      .               fn decode(decoder: &mut D) -> &'tcx Self {
      .                   decoder.tcx().arena.alloc_from_iter(
      .                       (0..decoder.read_usize()).map(|_| Decodable::decode(decoder)).collect::<Vec<_>>(),
      .                   )
-- line 341 ----------------------------------------
-- line 344 ----------------------------------------
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for Allocation {
      .               fn decode(decoder: &mut D) -> &'tcx Self {
      .                   decoder.tcx().intern_const_alloc(Decodable::decode(decoder))
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for [(ty::Predicate<'tcx>, Span)] {
  1,442 ( 0.00%)      fn decode(decoder: &mut D) -> &'tcx Self {
    412 ( 0.00%)          decoder.tcx().arena.alloc_from_iter(
      .                       (0..decoder.read_usize()).map(|_| Decodable::decode(decoder)).collect::<Vec<_>>(),
      .                   )
  2,060 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for [thir::abstract_const::Node<'tcx>] {
      .               fn decode(decoder: &mut D) -> &'tcx Self {
      .                   decoder.tcx().arena.alloc_from_iter(
      .                       (0..decoder.read_usize()).map(|_| Decodable::decode(decoder)).collect::<Vec<_>>(),
      .                   )
      .               }
-- line 364 ----------------------------------------
-- line 370 ----------------------------------------
      .                       (0..decoder.read_usize()).map(|_| Decodable::decode(decoder)).collect::<Vec<_>>(),
      .                   )
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for ty::List<ty::BoundVariableKind> {
      .               fn decode(decoder: &mut D) -> &'tcx Self {
      .                   let len = decoder.read_usize();
    260 ( 0.00%)          decoder.tcx().mk_bound_variable_kinds(
    123 ( 0.00%)              (0..len).map::<ty::BoundVariableKind, _>(|_| Decodable::decode(decoder)),
      .                   )
      .               }
      .           }
      .           
      .           impl_decodable_via_ref! {
      .               &'tcx ty::TypeckResults<'tcx>,
      .               &'tcx ty::List<Ty<'tcx>>,
      .               &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,
-- line 387 ----------------------------------------
-- line 394 ----------------------------------------
      .               &'tcx ty::AdtDef
      .           }
      .           
      .           #[macro_export]
      .           macro_rules! __impl_decoder_methods {
      .               ($($name:ident -> $ty:ty;)*) => {
      .                   $(
      .                       #[inline]
203,781 ( 0.11%)              fn $name(&mut self) -> $ty {
364,790 ( 0.20%)                  self.opaque.$name()
333,192 ( 0.18%)              }
      .                   )*
      .               }
      .           }
      .           
      .           macro_rules! impl_arena_allocatable_decoder {
      .               ([]$args:tt) => {};
      .               ([decode $(, $attrs:ident)*]
      .                [$name:ident: $ty:ty]) => {
-- line 412 ----------------------------------------
-- line 482 ----------------------------------------
      .                   }
      .               }
      .           }
      .           
      .           macro_rules! impl_binder_encode_decode {
      .               ($($t:ty),+ $(,)?) => {
      .                   $(
      .                       impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for ty::Binder<'tcx, $t> {
     35 ( 0.00%)                  fn encode(&self, e: &mut E) -> Result<(), E::Error> {
     38 ( 0.00%)                      self.bound_vars().encode(e)?;
      .                               self.as_ref().skip_binder().encode(e)
      .                           }
      .                       }
      .                       impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for ty::Binder<'tcx, $t> {
    594 ( 0.00%)                  fn decode(decoder: &mut D) -> Self {
      .                               let bound_vars = Decodable::decode(decoder);
      .                               ty::Binder::bind_with_vars(Decodable::decode(decoder), bound_vars)
    594 ( 0.00%)                  }
      .                       }
      .                   )*
      .               }
      .           }
      .           
      .           impl_binder_encode_decode! {
      .               &'tcx ty::List<Ty<'tcx>>,
      .               ty::FnSig<'tcx>,
-- line 507 ----------------------------------------

  6,614 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/codec.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
   70,560 ( 0.04%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
       15 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    1,138 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
        .               LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
-- line 173 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    2,889 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
        4 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
       16 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 213 ----------------------------------------
        .               }
        .           }
        .           
        .           impl RealFileName {
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path(&self) -> Option<&Path> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => {
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    2,304 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
        .               pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
        2 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
    5,918 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    6,894 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        .               QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
-- line 281 ----------------------------------------
-- line 288 ----------------------------------------
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
       14 ( 0.00%)      fn from(p: PathBuf) -> Self {
        4 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
       12 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
       14 ( 0.00%)      }
        .           }
        .           
        2 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
        8 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
       12 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
       12 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
        .               pub fn to_string_lossy(&self) -> Cow<'_, str> {
        .                   match self.inner {
        .                       FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
        .               }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
    1,158 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
-- line 353 ----------------------------------------
-- line 357 ----------------------------------------
        .               }
        .           
        .               pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
        .               }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
        2 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
        4 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
        1 ( 0.00%)      pub lo: BytePos,
        1 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
        3 ( 0.00%)      pub ctxt: SyntaxContext,
        1 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
   17,795 ( 0.01%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
       33 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
   14,368 ( 0.01%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
   10,776 ( 0.01%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
   14,368 ( 0.01%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
    5,175 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
    3,450 ( 0.00%)      }
        .               #[inline]
      220 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
      220 ( 0.00%)      }
        .               #[inline]
      765 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
      510 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
      385 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
      231 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
        .               pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
        .               }
-- line 566 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// Returns a new span representing an empty span at the beginning of this span.
        .               #[inline]
        .               pub fn shrink_to_lo(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_hi(span.lo)
        .               }
        .               /// Returns a new span representing an empty span at the end of this span.
        .               #[inline]
        6 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_lo(span.hi)
        4 ( 0.00%)      }
        .           
        .               #[inline]
        .               /// Returns `true` if `hi == lo`.
        .               pub fn is_empty(self) -> bool {
        .                   let span = self.data_untracked();
        .                   span.hi == span.lo
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
       99 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
       66 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
-- line 638 ----------------------------------------
-- line 663 ----------------------------------------
        .               /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,
        .               /// if any.
        .               pub fn parent_callsite(self) -> Option<Span> {
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(expn_data.call_site) } else { None }
        .               }
        .           
        .               /// Walk down the expansion ancestors to find a span that's contained within `outer`.
       70 ( 0.00%)      pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
       35 ( 0.00%)          while !outer.contains(self) {
        .                       self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
       77 ( 0.00%)      }
        .           
        .               /// Edition of the crate from which this span came.
    1,194 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
      796 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
      248 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
      119 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
      121 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
       25 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
        5 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
       20 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
      749 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
      642 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
      535 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
       20 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
       24 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
       16 ( 0.00%)      }
        .           
        .               /// Checks if a span is "internal" to a macro in which `unsafe`
        .               /// can be used without triggering the `unsafe_code` lint.
        .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
       44 ( 0.00%)      pub fn allows_unsafe(self) -> bool {
       11 ( 0.00%)          self.ctxt().outer_expn_data().allow_internal_unsafe
       44 ( 0.00%)      }
        .           
        .               pub fn macro_backtrace(mut self) -> impl Iterator<Item = ExpnData> {
        .                   let mut prev_span = DUMMY_SP;
        .                   std::iter::from_fn(move || {
        .                       loop {
        .                           let expn_data = self.ctxt().outer_expn_data();
        .                           if expn_data.is_root() {
        .                               return None;
-- line 752 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
   24,475 ( 0.01%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
    4,423 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
       27 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
       27 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
   15,393 ( 0.01%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
   20,025 ( 0.01%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
       66 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
       42 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
       48 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
      363 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
       66 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
      231 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
      297 ( 0.00%)      }
        .           
        .               pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
        .               }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
       42 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
        4 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
        .                   self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
      276 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
      161 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
    2,043 ( 0.00%)          span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
        .               pub fn remove_mark(&mut self) -> ExpnId {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.remove_mark();
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
-- line 897 ----------------------------------------
-- line 901 ----------------------------------------
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
    2,862 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
    1,908 ( 0.00%)          let mut span = self.data();
    1,578 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
    2,862 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
    3,168 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
-- line 922 ----------------------------------------
-- line 929 ----------------------------------------
        .               ) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
    2,304 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
    2,016 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1048 ----------------------------------------
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_span(primary_span: Span) -> MultiSpan {
      435 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
        5 ( 0.00%)          MultiSpan { primary_spans: vec, span_labels: vec![] }
        .               }
        .           
        .               pub fn push_span_label(&mut self, span: Span, label: String) {
        .                   self.span_labels.push((span, label));
        .               }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
       46 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
        .               }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
-- line 1079 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
      435 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
      435 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
        5 ( 0.00%)      fn from(spans: Vec<Span>) -> MultiSpan {
        4 ( 0.00%)          MultiSpan::from_spans(spans)
        5 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      308 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      154 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      462 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
        6 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1257 ----------------------------------------
        .               AbsentOk,
        .               /// A failed attempt has been made to load the external source.
        .               AbsentErr,
        .               Unneeded,
        .           }
        .           
        .           impl ExternalSource {
        .               pub fn get_source(&self) -> Option<&Lrc<String>> {
       19 ( 0.00%)          match self {
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::Present(ref src), .. } => Some(src),
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
    1,154 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
       12 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    2,308 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        1 ( 0.00%)          let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
        9 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
        .                   hash
        .               }
        .           
        .               /// Check if the stored hash matches the hash of the string.
        .               pub fn matches(&self, src: &str) -> bool {
        1 ( 0.00%)          Self::new(self.kind, src) == *self
        .               }
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
        .                   let len = self.hash_len();
        .                   &self.value[..len]
        .               }
        .           
        .               fn hash_len(&self) -> usize {
        8 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
      116 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
        2 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
        2 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
        2 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
        8 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
        4 ( 0.00%)                          0..=0xFF => 1,
        .                                   0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
        4 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
        6 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
       22 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    5,193 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      577 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
  900,534 ( 0.49%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    1,154 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    6,347 ( 0.00%)              SourceFile {
    4,616 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    2,308 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    2,308 ( 0.00%)                  lines,
    2,308 ( 0.00%)                  multibyte_chars,
    2,308 ( 0.00%)                  non_narrow_chars,
    2,308 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    5,193 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
       22 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
        6 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
        4 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
        4 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
        6 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
       24 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
        4 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
       34 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
       22 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
        8 ( 0.00%)              lines,
        8 ( 0.00%)              multibyte_chars,
        8 ( 0.00%)              non_narrow_chars,
        8 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
       18 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
        .               pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
        .                   self.lines[line_index]
        .               }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
      161 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
       31 ( 0.00%)          if matches!(
       46 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        1 ( 0.00%)              let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        3 ( 0.00%)              if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
        .                       {
        5 ( 0.00%)                  if let Some(mut src) = src {
        .                               // The src_hash needs to be computed on the pre-normalized src.
        1 ( 0.00%)                      if self.src_hash.matches(&src) {
        3 ( 0.00%)                          normalize_src(&mut src, BytePos::from_usize(0));
        8 ( 0.00%)                          *src_kind = ExternalSourceKind::Present(Lrc::new(src));
        .                                   return true;
        .                               }
        .                           } else {
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
       22 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
      207 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
        .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
        .                   fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
      579 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
    2,398 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
    1,319 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
    2,203 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
    1,527 ( 0.00%)          assert!(line_index < self.lines.len());
    2,157 ( 0.00%)          if line_index == (self.lines.len() - 1) {
       15 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
    1,426 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
        2 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
        6 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
        .                       if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
        .                           total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
        .                           assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
       12 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
       10 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
        4 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
        7 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
        2 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
        .                   match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
        1 ( 0.00%)                  let linebpos = self.lines[a];
        2 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
        1 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
        8 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
        3 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
        2 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
        1 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
        5 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
        7 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
       30 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
       27 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        3 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        3 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
    5,323 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
      458 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
   11,020 ( 0.01%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
1,640,161 ( 0.90%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
  913,153 ( 0.50%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
        .               }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
  145,974 ( 0.08%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
   37,968 ( 0.02%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
    9,122 ( 0.01%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
   28,846 ( 0.02%)          let span = self.data_untracked();
    5,178 ( 0.00%)          span.ctxt.hash_stable(ctx, hasher);
   16,272 ( 0.01%)          span.parent.hash_stable(ctx, hasher);
        .           
   10,904 ( 0.01%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
   10,736 ( 0.01%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
   21,472 ( 0.01%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
   10,736 ( 0.01%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
    5,368 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
    5,368 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
   43,392 ( 0.02%)      }
        .           }

1,296,833 ( 0.71%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/span_encoding.rs
--------------------------------------------------------------------------------
Ir               

-- line 55 ----------------------------------------
      .           ///   `ctxt` values depend partly on the crate size and partly on the form of
      .           ///   the code. No crates in `rustc-perf` need more than 15 bits for `ctxt`,
      .           ///   but larger crates might need more than 16 bits.
      .           ///
      .           /// In order to reliably use parented spans in incremental compilation,
      .           /// the dependency to the parent definition's span. This is performed
      .           /// using the callback `SPAN_TRACK` to access the query engine.
      .           ///
 19,234 ( 0.01%)  #[derive(Clone, Copy, Eq, PartialEq, Hash)]
      .           // FIXME(@lcnr): Enable this attribute once the bootstrap
      .           // compiler knows of `rustc_pass_by_value`.
      .           //
      .           // Right now, this lint would only trigger when compiling the
      .           // stage 2 compiler, which is fairly annoying as there are
      .           // a lot of places using `&Span` right now. After the next bootstrap bump,
      .           // the lint will already trigger when using stage 1, which is a lot less annoying.
      .           //
      .           // #[cfg_attr(not(bootstrap), rustc_pass_by_value)]
      .           pub struct Span {
    278 ( 0.00%)      base_or_index: u32,
    111 ( 0.00%)      len_or_tag: u16,
    171 ( 0.00%)      ctxt_or_zero: u16,
      .           }
      .           
      .           const LEN_TAG: u16 = 0b1000_0000_0000_0000;
      .           const MAX_LEN: u32 = 0b0111_1111_1111_1111;
      .           const MAX_CTXT: u32 = 0b1111_1111_1111_1111;
      .           
      .           /// Dummy span, both position and length are zero, syntax context is zero as well.
      .           pub const DUMMY_SP: Span = Span { base_or_index: 0, len_or_tag: 0, ctxt_or_zero: 0 };
-- line 84 ----------------------------------------
-- line 86 ----------------------------------------
      .           impl Span {
      .               #[inline]
      .               pub fn new(
      .                   mut lo: BytePos,
      .                   mut hi: BytePos,
      .                   ctxt: SyntaxContext,
      .                   parent: Option<LocalDefId>,
      .               ) -> Self {
 41,150 ( 0.02%)          if lo > hi {
      .                       std::mem::swap(&mut lo, &mut hi);
      .                   }
      .           
 82,300 ( 0.05%)          let (base, len, ctxt2) = (lo.0, hi.0 - lo.0, ctxt.as_u32());
      .           
327,551 ( 0.18%)          if len <= MAX_LEN && ctxt2 <= MAX_CTXT && parent.is_none() {
      .                       // Inline format.
      .                       Span { base_or_index: base, len_or_tag: len as u16, ctxt_or_zero: ctxt2 as u16 }
      .                   } else {
      .                       // Interned format.
      .                       let index =
     70 ( 0.00%)                  with_span_interner(|interner| interner.intern(&SpanData { lo, hi, ctxt, parent }));
      .                       Span { base_or_index: index, len_or_tag: LEN_TAG, ctxt_or_zero: 0 }
      .                   }
122,000 ( 0.07%)      }
      .           
      .               #[inline]
      .               pub fn data(self) -> SpanData {
      .                   let data = self.data_untracked();
      .                   if let Some(parent) = data.parent {
      .                       (*SPAN_TRACK)(parent);
      .                   }
      .                   data
      .               }
      .           
      .               /// Internal function to translate between an encoded span and the expanded representation.
      .               /// This function must not be used outside the incremental engine.
      .               #[inline]
      .               pub fn data_untracked(self) -> SpanData {
161,773 ( 0.09%)          if self.len_or_tag != LEN_TAG {
      .                       // Inline format.
      .                       debug_assert!(self.len_or_tag as u32 <= MAX_LEN);
      .                       SpanData {
      .                           lo: BytePos(self.base_or_index),
155,428 ( 0.09%)                  hi: BytePos(self.base_or_index + self.len_or_tag as u32),
      .                           ctxt: SyntaxContext::from_u32(self.ctxt_or_zero as u32),
      .                           parent: None,
      .                       }
      .                   } else {
      .                       // Interned format.
      .                       debug_assert!(self.ctxt_or_zero == 0);
      .                       let index = self.base_or_index;
      .                       with_span_interner(|interner| interner.spans[index as usize])
      .                   }
 47,353 ( 0.03%)      }
      .           }
      .           
      4 ( 0.00%)  #[derive(Default)]
      .           pub struct SpanInterner {
      .               spans: FxIndexSet<SpanData>,
      .           }
      .           
      .           impl SpanInterner {
     21 ( 0.00%)      fn intern(&mut self, span_data: &SpanData) -> u32 {
     28 ( 0.00%)          let (index, _) = self.spans.insert_full(*span_data);
      .                   index as u32
     28 ( 0.00%)      }
      .           }
      .           
      .           // If an interner exists, return it. Otherwise, prepare a fresh one.
      .           #[inline]
      .           fn with_span_interner<T, F: FnOnce(&mut SpanInterner) -> T>(f: F) -> T {
      .               crate::with_session_globals(|session_globals| f(&mut *session_globals.span_interner.lock()))
      .           }

222,216 ( 0.12%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/span_encoding.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core.rs
--------------------------------------------------------------------------------
Ir              

-- line 26 ----------------------------------------
     .               /// indices mapping from the entry hash to its index.
     .               indices: RawTable<usize>,
     .               /// entries is a dense vec of entries in their order.
     .               entries: Vec<Bucket<K, V>>,
     .           }
     .           
     .           #[inline(always)]
     .           fn get_hash<K, V>(entries: &[Bucket<K, V>]) -> impl Fn(&usize) -> u64 + '_ {
99,298 ( 0.05%)      move |&i| entries[i].hash.get()
     .           }
     .           
     .           #[inline]
     .           fn equivalent<'a, K, V, Q: ?Sized + Equivalent<K>>(
     .               key: &'a Q,
     .               entries: &'a [Bucket<K, V>],
     .           ) -> impl Fn(&usize) -> bool + 'a {
10,647 ( 0.01%)      move |&i| Q::equivalent(key, &entries[i].key)
     .           }
     .           
     .           #[inline]
     .           fn erase_index(table: &mut RawTable<usize>, hash: HashValue, index: usize) {
     .               table.erase_entry(hash.get(), move |&i| i == index);
     .           }
     .           
     .           #[inline]
-- line 50 ----------------------------------------
-- line 96 ----------------------------------------
     .           
     .               #[inline]
     .               fn into_entries(self) -> Vec<Self::Entry> {
     .                   self.entries
     .               }
     .           
     .               #[inline]
     .               fn as_entries(&self) -> &[Self::Entry] {
    84 ( 0.00%)          &self.entries
     .               }
     .           
     .               #[inline]
     .               fn as_entries_mut(&mut self) -> &mut [Self::Entry] {
     .                   &mut self.entries
     .               }
     .           
     .               fn with_entries<F>(&mut self, f: F)
-- line 112 ----------------------------------------
-- line 124 ----------------------------------------
     .                   IndexMapCore {
     .                       indices: RawTable::new(),
     .                       entries: Vec::new(),
     .                   }
     .               }
     .           
     .               #[inline]
     .               pub(crate) fn with_capacity(n: usize) -> Self {
    24 ( 0.00%)          IndexMapCore {
     .                       indices: RawTable::with_capacity(n),
     .                       entries: Vec::with_capacity(n),
     .                   }
     .               }
     .           
     .               #[inline]
     .               pub(crate) fn len(&self) -> usize {
   359 ( 0.00%)          self.indices.len()
     .               }
     .           
     .               #[inline]
     .               pub(crate) fn capacity(&self) -> usize {
     .                   cmp::min(self.indices.capacity(), self.entries.capacity())
     .               }
     .           
     .               pub(crate) fn clear(&mut self) {
-- line 148 ----------------------------------------
-- line 152 ----------------------------------------
     .           
     .               pub(crate) fn truncate(&mut self, len: usize) {
     .                   if len < self.len() {
     .                       self.erase_indices(len, self.entries.len());
     .                       self.entries.truncate(len);
     .                   }
     .               }
     .           
    27 ( 0.00%)      pub(crate) fn drain<R>(&mut self, range: R) -> Drain<'_, Bucket<K, V>>
     .               where
     .                   R: RangeBounds<usize>,
     .               {
     9 ( 0.00%)          let range = simplify_range(range, self.entries.len());
     .                   self.erase_indices(range.start, range.end);
     .                   self.entries.drain(range)
    24 ( 0.00%)      }
     .           
     .               #[cfg(feature = "rayon")]
     .               pub(crate) fn par_drain<R>(&mut self, range: R) -> rayon::vec::Drain<'_, Bucket<K, V>>
     .               where
     .                   K: Send,
     .                   V: Send,
     .                   R: RangeBounds<usize>,
     .               {
-- line 175 ----------------------------------------
-- line 194 ----------------------------------------
     .               /// Reserve capacity for `additional` more key-value pairs.
     .               pub(crate) fn reserve(&mut self, additional: usize) {
     .                   self.indices.reserve(additional, get_hash(&self.entries));
     .                   self.reserve_entries();
     .               }
     .           
     .               /// Reserve entries capacity to match the indices
     .               fn reserve_entries(&mut self) {
 2,072 ( 0.00%)          let additional = self.indices.capacity() - self.entries.len();
     .                   self.entries.reserve_exact(additional);
     .               }
     .           
     .               /// Shrink the capacity of the map as much as possible.
     .               pub(crate) fn shrink_to_fit(&mut self) {
     .                   self.indices.shrink_to(0, get_hash(&self.entries));
     .                   self.entries.shrink_to_fit();
     .               }
-- line 210 ----------------------------------------
-- line 218 ----------------------------------------
     .                   } else {
     .                       None
     .                   }
     .               }
     .           
     .               /// Append a key-value pair, *without* checking whether it already exists,
     .               /// and return the pair's new index.
     .               fn push(&mut self, hash: HashValue, key: K, value: V) -> usize {
15,326 ( 0.01%)          let i = self.entries.len();
     .                   self.indices.insert(hash.get(), i, get_hash(&self.entries));
30,830 ( 0.02%)          if i == self.entries.capacity() {
     .                       // Reserve our own capacity synced to the indices,
     .                       // rather than letting `Vec::push` just double it.
     .                       self.reserve_entries();
     .                   }
62,182 ( 0.03%)          self.entries.push(Bucket { hash, key, value });
     .                   i
     .               }
     .           
     .               /// Return the index in `entries` where an equivalent key can be found
 1,150 ( 0.00%)      pub(crate) fn get_index_of<Q>(&self, hash: HashValue, key: &Q) -> Option<usize>
     .               where
     .                   Q: ?Sized + Equivalent<K>,
     .               {
   152 ( 0.00%)          let eq = equivalent(key, &self.entries);
     .                   self.indices.get(hash.get(), eq).copied()
 1,150 ( 0.00%)      }
     .           
   740 ( 0.00%)      pub(crate) fn insert_full(&mut self, hash: HashValue, key: K, value: V) -> (usize, Option<V>)
     .               where
     .                   K: Eq,
     .               {
     .                   match self.get_index_of(hash, &key) {
     .                       Some(i) => (i, Some(replace(&mut self.entries[i].value, value))),
   136 ( 0.00%)              None => (self.push(hash, key, value), None),
     .                   }
   640 ( 0.00%)      }
     .           
     .               /// Remove an entry by shifting all entries that follow it
     .               pub(crate) fn shift_remove_full<Q>(&mut self, hash: HashValue, key: &Q) -> Option<(usize, K, V)>
     .               where
     .                   Q: ?Sized + Equivalent<K>,
     .               {
     .                   let eq = equivalent(key, &self.entries);
     .                   match self.indices.remove_entry(hash.get(), eq) {
-- line 262 ----------------------------------------
-- line 361 ----------------------------------------
     .                   let (init, shifted_entries) = self.entries.split_at(end);
     .                   let (start_entries, erased_entries) = init.split_at(start);
     .           
     .                   let erased = erased_entries.len();
     .                   let shifted = shifted_entries.len();
     .                   let half_capacity = self.indices.buckets() / 2;
     .           
     .                   // Use a heuristic between different strategies
     6 ( 0.00%)          if erased == 0 {
     .                       // Degenerate case, nothing to do
     .                   } else if start + shifted < half_capacity && start < erased {
     .                       // Reinsert everything, as there are few kept indices
     .                       self.indices.clear();
     .           
     .                       // Reinsert stable indices
     .                       for (i, entry) in enumerate(start_entries) {
     .                           self.indices.insert_no_grow(entry.hash.get(), i);
-- line 377 ----------------------------------------
-- line 457 ----------------------------------------
     .               Vacant(VacantEntry<'a, K, V>),
     .           }
     .           
     .           impl<'a, K, V> Entry<'a, K, V> {
     .               /// Inserts the given default value in the entry if it is vacant and returns a mutable
     .               /// reference to it. Otherwise a mutable reference to an already existent value is returned.
     .               ///
     .               /// Computes in **O(1)** time (amortized average).
    42 ( 0.00%)      pub fn or_insert(self, default: V) -> &'a mut V {
    12 ( 0.00%)          match self {
     .                       Entry::Occupied(entry) => entry.into_mut(),
    30 ( 0.00%)              Entry::Vacant(entry) => entry.insert(default),
     .                   }
    48 ( 0.00%)      }
     .           
     .               /// Inserts the result of the `call` function in the entry if it is vacant and returns a mutable
     .               /// reference to it. Otherwise a mutable reference to an already existent value is returned.
     .               ///
     .               /// Computes in **O(1)** time (amortized average).
54,848 ( 0.03%)      pub fn or_insert_with<F>(self, call: F) -> &'a mut V
     .               where
     .                   F: FnOnce() -> V,
     .               {
13,712 ( 0.01%)          match self {
   564 ( 0.00%)              Entry::Occupied(entry) => entry.into_mut(),
 6,444 ( 0.00%)              Entry::Vacant(entry) => entry.insert(call()),
     .                   }
54,848 ( 0.03%)      }
     .           
     .               /// Inserts the result of the `call` function with a reference to the entry's key if it is
     .               /// vacant, and returns a mutable reference to the new value. Otherwise a mutable reference to
     .               /// an already existent value is returned.
     .               ///
     .               /// Computes in **O(1)** time (amortized average).
     .               pub fn or_insert_with_key<F>(self, call: F) -> &'a mut V
     .               where
-- line 492 ----------------------------------------
-- line 531 ----------------------------------------
     .                       x => x,
     .                   }
     .               }
     .           
     .               /// Inserts a default-constructed value in the entry if it is vacant and returns a mutable
     .               /// reference to it. Otherwise a mutable reference to an already existent value is returned.
     .               ///
     .               /// Computes in **O(1)** time (amortized average).
67,571 ( 0.04%)      pub fn or_default(self) -> &'a mut V
     .               where
     .                   V: Default,
     .               {
19,306 ( 0.01%)          match self {
   855 ( 0.00%)              Entry::Occupied(entry) => entry.into_mut(),
26,394 ( 0.01%)              Entry::Vacant(entry) => entry.insert(V::default()),
     .                   }
77,224 ( 0.04%)      }
     .           }
     .           
     .           impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for Entry<'_, K, V> {
     .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     .                   match *self {
     .                       Entry::Vacant(ref v) => f.debug_tuple(stringify!(Entry)).field(v).finish(),
     .                       Entry::Occupied(ref o) => f.debug_tuple(stringify!(Entry)).field(o).finish(),
     .                   }
-- line 555 ----------------------------------------
-- line 634 ----------------------------------------
     .           
     .               /// Return the index where the key-value pair will be inserted.
     .               pub fn index(&self) -> usize {
     .                   self.map.len()
     .               }
     .           
     .               /// Inserts the entry's key and the given value into the map, and returns a mutable reference
     .               /// to the value.
 1,762 ( 0.00%)      pub fn insert(self, value: V) -> &'a mut V {
27,128 ( 0.01%)          let i = self.map.push(self.hash, self.key, value);
    18 ( 0.00%)          &mut self.map.entries[i].value
 2,026 ( 0.00%)      }
     .           }
     .           
     .           impl<K: fmt::Debug, V> fmt::Debug for VacantEntry<'_, K, V> {
     .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     .                   f.debug_tuple(stringify!(VacantEntry))
     .                       .field(self.key())
     .                       .finish()
     .               }
-- line 653 ----------------------------------------

92,565 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 229 ----------------------------------------
      .               /// ```
      .               ///
      .               /// [`VecDeque`]: ../../std/collections/struct.VecDeque.html
      .               /// [`as_slices`]: ../../std/collections/struct.VecDeque.html#method.as_slices
      .               /// [`make_contiguous`]: ../../std/collections/struct.VecDeque.html#method.make_contiguous
      .               /// [`hash`]: Hash::hash
      .               /// [`hash_slice`]: Hash::hash_slice
      .               #[stable(feature = "hash_slice", since = "1.3.0")]
    130 ( 0.00%)      fn hash_slice<H: Hasher>(data: &[Self], state: &mut H)
      .               where
      .                   Self: Sized,
      .               {
      .                   for piece in data {
     30 ( 0.00%)              piece.hash(state);
      .                   }
    817 ( 0.00%)      }
      .           }
      .           
      .           // Separate module to reexport the macro `Hash` from prelude without the trait `Hash`.
      .           pub(crate) mod macros {
      .               /// Derive macro generating an impl of the trait `Hash`.
      .               #[rustc_builtin_macro]
      .               #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
      .               #[allow_internal_unstable(core_intrinsics)]
-- line 252 ----------------------------------------
-- line 335 ----------------------------------------
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               fn write(&mut self, bytes: &[u8]);
      .           
      .               /// Writes a single `u8` into this hasher.
      .               #[inline]
      .               #[stable(feature = "hasher_write", since = "1.3.0")]
      .               fn write_u8(&mut self, i: u8) {
    946 ( 0.00%)          self.write(&[i])
      .               }
      .               /// Writes a single `u16` into this hasher.
      .               #[inline]
      .               #[stable(feature = "hasher_write", since = "1.3.0")]
      .               fn write_u16(&mut self, i: u16) {
      .                   self.write(&i.to_ne_bytes())
      .               }
      .               /// Writes a single `u32` into this hasher.
      .               #[inline]
      .               #[stable(feature = "hasher_write", since = "1.3.0")]
      .               fn write_u32(&mut self, i: u32) {
    270 ( 0.00%)          self.write(&i.to_ne_bytes())
      .               }
      .               /// Writes a single `u64` into this hasher.
      .               #[inline]
      .               #[stable(feature = "hasher_write", since = "1.3.0")]
      .               fn write_u64(&mut self, i: u64) {
     10 ( 0.00%)          self.write(&i.to_ne_bytes())
      .               }
      .               /// Writes a single `u128` into this hasher.
      .               #[inline]
      .               #[stable(feature = "i128", since = "1.26.0")]
      .               fn write_u128(&mut self, i: u128) {
  1,533 ( 0.00%)          self.write(&i.to_ne_bytes())
      .               }
      .               /// Writes a single `usize` into this hasher.
      .               #[inline]
      .               #[stable(feature = "hasher_write", since = "1.3.0")]
      2 ( 0.00%)      fn write_usize(&mut self, i: usize) {
    759 ( 0.00%)          self.write(&i.to_ne_bytes())
      4 ( 0.00%)      }
      .           
      .               /// Writes a single `i8` into this hasher.
      .               #[inline]
      .               #[stable(feature = "hasher_write", since = "1.3.0")]
      .               fn write_i8(&mut self, i: i8) {
      .                   self.write_u8(i as u8)
      .               }
      .               /// Writes a single `i16` into this hasher.
-- line 382 ----------------------------------------
-- line 402 ----------------------------------------
      .               #[stable(feature = "i128", since = "1.26.0")]
      .               fn write_i128(&mut self, i: i128) {
      .                   self.write_u128(i as u128)
      .               }
      .               /// Writes a single `isize` into this hasher.
      .               #[inline]
      .               #[stable(feature = "hasher_write", since = "1.3.0")]
      .               fn write_isize(&mut self, i: isize) {
      4 ( 0.00%)          self.write_usize(i as usize)
      .               }
      .           }
      .           
      .           #[stable(feature = "indirect_hasher_impl", since = "1.22.0")]
      .           impl<H: Hasher + ?Sized> Hasher for &mut H {
      .               fn finish(&self) -> u64 {
      .                   (**self).finish()
      .               }
-- line 418 ----------------------------------------
-- line 545 ----------------------------------------
      .               ///     bh.hash_one(&OrderAmbivalentPair(2, 10))
      .               /// );
      .               /// ```
      .               #[unstable(feature = "build_hasher_simple_hash_one", issue = "86161")]
      .               fn hash_one<T: Hash>(&self, x: T) -> u64
      .               where
      .                   Self: Sized,
      .               {
153,613 ( 0.08%)          let mut hasher = self.build_hasher();
126,069 ( 0.07%)          x.hash(&mut hasher);
 65,315 ( 0.04%)          hasher.finish()
      .               }
      .           }
      .           
      .           /// Used to create a default [`BuildHasher`] instance for types that implement
      .           /// [`Hasher`] and [`Default`].
      .           ///
      .           /// `BuildHasherDefault<H>` can be used when a type `H` implements [`Hasher`] and
      .           /// [`Default`], and you need a corresponding [`BuildHasher`] instance, but none is
-- line 563 ----------------------------------------
-- line 651 ----------------------------------------
      .           
      .               use super::*;
      .           
      .               macro_rules! impl_write {
      .                   ($(($ty:ident, $meth:ident),)*) => {$(
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl Hash for $ty {
      .                           #[inline]
      9 ( 0.00%)                  fn hash<H: Hasher>(&self, state: &mut H) {
      .                               state.$meth(*self)
     18 ( 0.00%)                  }
      .           
      .                           #[inline]
      .                           fn hash_slice<H: Hasher>(data: &[$ty], state: &mut H) {
    300 ( 0.00%)                      let newlen = data.len() * mem::size_of::<$ty>();
      .                               let ptr = data.as_ptr() as *const u8;
      .                               // SAFETY: `ptr` is valid and aligned, as this macro is only used
      .                               // for numeric primitives which have no padding. The new slice only
      .                               // spans across `data` and is never mutated, and its total size is the
      .                               // same as the original `data` so it can't be over `isize::MAX`.
      .                               state.write(unsafe { slice::from_raw_parts(ptr, newlen) })
      .                           }
      .                       }
-- line 673 ----------------------------------------
-- line 703 ----------------------------------------
      .                   fn hash<H: Hasher>(&self, state: &mut H) {
      .                       state.write_u32(*self as u32)
      .                   }
      .               }
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl Hash for str {
      .                   #[inline]
    589 ( 0.00%)          fn hash<H: Hasher>(&self, state: &mut H) {
  2,046 ( 0.00%)              state.write(self.as_bytes());
      .                       state.write_u8(0xff)
    589 ( 0.00%)          }
      .               }
      .           
      .               #[stable(feature = "never_hash", since = "1.29.0")]
      .               impl Hash for ! {
      .                   #[inline]
      .                   fn hash<H: Hasher>(&self, _: &mut H) {
      .                       *self
      .                   }
-- line 722 ----------------------------------------
-- line 732 ----------------------------------------
      .                   );
      .           
      .                   ( $($name:ident)+) => (
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl<$($name: Hash),+> Hash for ($($name,)+) where last_type!($($name,)+): ?Sized {
      .                           #[allow(non_snake_case)]
      .                           #[inline]
      .                           fn hash<S: Hasher>(&self, state: &mut S) {
    918 ( 0.00%)                      let ($(ref $name,)+) = *self;
    181 ( 0.00%)                      $($name.hash(state);)+
      .                           }
      .                       }
      .                   );
      .               }
      .           
      .               macro_rules! last_type {
      .                   ($a:ident,) => { $a };
      .                   ($a:ident, $($rest_a:ident,)+) => { last_type!($($rest_a,)+) };
-- line 749 ----------------------------------------
-- line 763 ----------------------------------------
      .               impl_hash_tuple! { A B C D E F G H I J K }
      .               impl_hash_tuple! { A B C D E F G H I J K L }
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<T: Hash> Hash for [T] {
      .                   #[inline]
      .                   fn hash<H: Hasher>(&self, state: &mut H) {
      .                       self.len().hash(state);
  1,993 ( 0.00%)              Hash::hash_slice(self, state)
      .                   }
      .               }
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<T: ?Sized + Hash> Hash for &T {
      .                   #[inline]
 54,977 ( 0.03%)          fn hash<H: Hasher>(&self, state: &mut H) {
 76,855 ( 0.04%)              (**self).hash(state);
 54,977 ( 0.03%)          }
      .               }
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<T: ?Sized + Hash> Hash for &mut T {
      .                   #[inline]
      .                   fn hash<H: Hasher>(&self, state: &mut H) {
      .                       (**self).hash(state);
      .                   }
-- line 788 ----------------------------------------

    110 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/ast.rs
--------------------------------------------------------------------------------
Ir               

-- line 86 ----------------------------------------
      .           }
      .           
      .           /// A "Path" is essentially Rust's notion of a name.
      .           ///
      .           /// It's represented as a sequence of identifiers,
      .           /// along with a bunch of supporting information.
      .           ///
      .           /// E.g., `std::cmp::PartialEq`.
  3,218 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub struct Path {
      2 ( 0.00%)      pub span: Span,
      .               /// The segments in the path: the things separated by `::`.
      .               /// Global paths begin with `kw::PathRoot`.
    290 ( 0.00%)      pub segments: Vec<PathSegment>,
      .               pub tokens: Option<LazyTokenStream>,
      .           }
      .           
      .           impl PartialEq<Symbol> for Path {
      .               #[inline]
      .               fn eq(&self, symbol: &Symbol) -> bool {
  3,974 ( 0.00%)          self.segments.len() == 1 && { self.segments[0].ident.name == *symbol }
      .               }
      .           }
      .           
      .           impl<CTX> HashStable<CTX> for Path {
      .               fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
      .                   self.segments.len().hash_stable(hcx, hasher);
      .                   for segment in &self.segments {
      .                       segment.ident.name.hash_stable(hcx, hasher);
      .                   }
      .               }
      .           }
      .           
      .           impl Path {
      .               // Convert a span and an identifier to the corresponding
      .               // one-segment path.
     48 ( 0.00%)      pub fn from_ident(ident: Ident) -> Path {
    565 ( 0.00%)          Path { segments: vec![PathSegment::from_ident(ident)], span: ident.span, tokens: None }
     40 ( 0.00%)      }
      .           
      .               pub fn is_global(&self) -> bool {
      .                   !self.segments.is_empty() && self.segments[0].ident.name == kw::PathRoot
      .               }
      .           }
      .           
      .           /// A segment of a path: an identifier, an optional lifetime, and a set of types.
      .           ///
      .           /// E.g., `std`, `String` or `Box<T>`.
     57 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub struct PathSegment {
      .               /// The identifier portion of this path segment.
      .               pub ident: Ident,
      .           
    280 ( 0.00%)      pub id: NodeId,
      .           
      .               /// Type/lifetime parameters attached to this path. They come in
      .               /// two flavors: `Path<A,B,C>` and `Path(A,B) -> C`.
      .               /// `None` means that no parameter list is supplied (`Path`),
      .               /// `Some` means that parameter list is supplied (`Path<X, Y>`)
      .               /// but it can be empty (`Path<>`).
      .               /// `P` is used as a size optimization for the common case with no parameters.
      .               pub args: Option<P<GenericArgs>>,
      .           }
      .           
      .           impl PathSegment {
    564 ( 0.00%)      pub fn from_ident(ident: Ident) -> Self {
  2,260 ( 0.00%)          PathSegment { ident, id: DUMMY_NODE_ID, args: None }
    564 ( 0.00%)      }
      .           
      1 ( 0.00%)      pub fn path_root(span: Span) -> Self {
      .                   PathSegment::from_ident(Ident::new(kw::PathRoot, span))
      1 ( 0.00%)      }
      .           
      .               pub fn span(&self) -> Span {
    612 ( 0.00%)          match &self.args {
     16 ( 0.00%)              Some(args) => self.ident.span.to(args.span()),
      .                       None => self.ident.span,
      .                   }
    376 ( 0.00%)      }
      .           }
      .           
      .           /// The arguments of a path segment.
      .           ///
      .           /// E.g., `<A, B>` as in `Foo<A, B>` or `(A, B)` as in `Foo(A, B)`.
     16 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub enum GenericArgs {
      .               /// The `<'a, A, B, C>` in `foo::bar::baz::<'a, A, B, C>`.
      .               AngleBracketed(AngleBracketedArgs),
      .               /// The `(A, B)` and `C` in `Foo(A, B) -> C`.
      .               Parenthesized(ParenthesizedArgs),
      .           }
      .           
      .           impl GenericArgs {
      .               pub fn is_angle_bracketed(&self) -> bool {
      4 ( 0.00%)          matches!(self, AngleBracketed(..))
      2 ( 0.00%)      }
      .           
      .               pub fn span(&self) -> Span {
     48 ( 0.00%)          match *self {
      .                       AngleBracketed(ref data) => data.span,
      .                       Parenthesized(ref data) => data.span,
      .                   }
      .               }
      .           }
      .           
      .           /// Concrete argument in the sequence of generic args.
     40 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub enum GenericArg {
      .               /// `'a` in `Foo<'a>`
      .               Lifetime(Lifetime),
      .               /// `Bar` in `Foo<Bar>`
      .               Type(P<Ty>),
      .               /// `1` in `Foo<1>`
      .               Const(AnonConst),
      .           }
-- line 200 ----------------------------------------
-- line 215 ----------------------------------------
      .               /// The overall span.
      .               pub span: Span,
      .               /// The comma separated parts in the `<...>`.
      .               pub args: Vec<AngleBracketedArg>,
      .           }
      .           
      .           /// Either an argument for a parameter e.g., `'a`, `Vec<u8>`, `0`,
      .           /// or a constraint on an associated item, e.g., `Item = String` or `Item: Bound`.
     16 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub enum AngleBracketedArg {
      .               /// Argument for a generic parameter.
      .               Arg(GenericArg),
      .               /// Constraint for an associated item.
      .               Constraint(AssocConstraint),
      .           }
      .           
      .           impl AngleBracketedArg {
-- line 231 ----------------------------------------
-- line 233 ----------------------------------------
      .                   match self {
      .                       AngleBracketedArg::Arg(arg) => arg.span(),
      .                       AngleBracketedArg::Constraint(constraint) => constraint.span,
      .                   }
      .               }
      .           }
      .           
      .           impl Into<Option<P<GenericArgs>>> for AngleBracketedArgs {
     32 ( 0.00%)      fn into(self) -> Option<P<GenericArgs>> {
      .                   Some(P(GenericArgs::AngleBracketed(self)))
     32 ( 0.00%)      }
      .           }
      .           
      .           impl Into<Option<P<GenericArgs>>> for ParenthesizedArgs {
      4 ( 0.00%)      fn into(self) -> Option<P<GenericArgs>> {
      .                   Some(P(GenericArgs::Parenthesized(self)))
      4 ( 0.00%)      }
      .           }
      .           
      .           /// A path like `Foo(A, B) -> C`.
      .           #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub struct ParenthesizedArgs {
      .               /// ```text
      .               /// Foo(A, B) -> C
      .               /// ^^^^^^^^^^^^^^
-- line 257 ----------------------------------------
-- line 337 ----------------------------------------
      .               // `Infer` is not actually constructed directly from the AST, but is implicitly constructed
      .               // during HIR lowering, and `ParamKindOrd` will implicitly order inferred variables last.
      .               Infer,
      .           }
      .           
      .           impl Ord for ParamKindOrd {
      .               fn cmp(&self, other: &Self) -> Ordering {
      .                   use ParamKindOrd::*;
      6 ( 0.00%)          let to_int = |v| match v {
      .                       Lifetime => 0,
      .                       Infer | Type | Const => 1,
      .                   };
      .           
      1 ( 0.00%)          to_int(*self).cmp(&to_int(*other))
      .               }
      .           }
      .           impl PartialOrd for ParamKindOrd {
      .               fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
      .                   Some(self.cmp(other))
      1 ( 0.00%)      }
      .           }
      .           impl PartialEq for ParamKindOrd {
      .               fn eq(&self, other: &Self) -> bool {
      .                   self.cmp(other) == Ordering::Equal
      .               }
      .           }
      .           impl Eq for ParamKindOrd {}
      .           
-- line 364 ----------------------------------------
-- line 411 ----------------------------------------
      .                       }
      .                       GenericParamKind::Const { kw_span, default: None, ty } => kw_span.to(ty.span),
      .                   }
      .               }
      .           }
      .           
      .           /// Represents lifetime, type and const parameters attached to a declaration of
      .           /// a function, enum, trait, etc.
     50 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub struct Generics {
     10 ( 0.00%)      pub params: Vec<GenericParam>,
      .               pub where_clause: WhereClause,
      .               pub span: Span,
      .           }
      .           
      .           impl Default for Generics {
      .               /// Creates an instance of `Generics`.
      6 ( 0.00%)      fn default() -> Generics {
     30 ( 0.00%)          Generics {
      .                       params: Vec::new(),
      .                       where_clause: WhereClause {
      .                           has_where_token: false,
      .                           predicates: Vec::new(),
      .                           span: DUMMY_SP,
      .                       },
      .                       span: DUMMY_SP,
      .                   }
      6 ( 0.00%)      }
      .           }
      .           
      .           /// A where-clause in a definition.
     36 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub struct WhereClause {
      .               /// `true` if we ate a `where` token: this can happen
      .               /// if we parsed no predicates (e.g. `struct Foo where {}`).
      .               /// This allows us to accurately pretty-print
      .               /// in `nt_to_tokenstream`
     16 ( 0.00%)      pub has_where_token: bool,
      8 ( 0.00%)      pub predicates: Vec<WherePredicate>,
      .               pub span: Span,
      .           }
      .           
      .           /// A single predicate in a where-clause.
      .           #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub enum WherePredicate {
      .               /// A type binding (e.g., `for<'c> Foo: Send + Clone + 'c`).
      .               BoundPredicate(WhereBoundPredicate),
-- line 457 ----------------------------------------
-- line 515 ----------------------------------------
      .               /// expansion placeholders or an unassigned value (`DUMMY_NODE_ID`) before that.
      .               pub id: NodeId,
      .               pub is_placeholder: bool,
      .           }
      .           
      .           /// Possible values inside of compile-time attribute lists.
      .           ///
      .           /// E.g., the '..' in `#[name(..)]`.
    159 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, HashStable_Generic)]
      .           pub enum NestedMetaItem {
      .               /// A full MetaItem, for recursive meta items.
      .               MetaItem(MetaItem),
      .               /// A literal.
      .               ///
      .               /// E.g., `"foo"`, `64`, `true`.
      .               Literal(Lit),
      .           }
      .           
      .           /// A spanned compile-time attribute item.
      .           ///
      .           /// E.g., `#[test]`, `#[derive(..)]`, `#[rustfmt::skip]` or `#[feature = "foo"]`.
    789 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, HashStable_Generic)]
      .           pub struct MetaItem {
      .               pub path: Path,
      .               pub kind: MetaItemKind,
      .               pub span: Span,
      .           }
      .           
      .           /// A compile-time attribute item.
      .           ///
      .           /// E.g., `#[test]`, `#[derive(..)]` or `#[feature = "foo"]`.
    490 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, HashStable_Generic)]
      .           pub enum MetaItemKind {
      .               /// Word meta item.
      .               ///
      .               /// E.g., `test` as in `#[test]`.
      .               Word,
      .               /// List meta item.
      .               ///
      .               /// E.g., `derive(..)` as in `#[derive(..)]`.
      .               List(Vec<NestedMetaItem>),
      .               /// Name value meta item.
      .               ///
      .               /// E.g., `feature = "foo"` as in `#[feature = "foo"]`.
     30 ( 0.00%)      NameValue(Lit),
      .           }
      .           
      .           /// A block (`{ .. }`).
      .           ///
      .           /// E.g., `{ .. }` as in `fn foo() { .. }`.
     16 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub struct Block {
      .               /// The statements in the block.
      8 ( 0.00%)      pub stmts: Vec<Stmt>,
      4 ( 0.00%)      pub id: NodeId,
      .               /// Distinguishes between `unsafe { ... }` and `{ ... }`.
      4 ( 0.00%)      pub rules: BlockCheckMode,
      .               pub span: Span,
      .               pub tokens: Option<LazyTokenStream>,
      .               /// The following *isn't* a parse error, but will cause multiple errors in following stages.
      .               /// ```
      .               /// let x = {
      .               ///     foo: var
      .               /// };
      .               /// ```
      .               /// #34255
      4 ( 0.00%)      pub could_be_bare_literal: bool,
      .           }
      .           
      .           /// A match pattern.
      .           ///
      .           /// Patterns appear in match statements and some other contexts, such as `let` and `if let`.
    276 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub struct Pat {
     31 ( 0.00%)      pub id: NodeId,
     61 ( 0.00%)      pub kind: PatKind,
      .               pub span: Span,
      .               pub tokens: Option<LazyTokenStream>,
      .           }
      .           
      .           impl Pat {
      .               /// Attempt reparsing the pattern as a type.
      .               /// This is intended for use by diagnostics.
      .               pub fn to_ty(&self) -> Option<P<Ty>> {
-- line 598 ----------------------------------------
-- line 626 ----------------------------------------
      .                   };
      .           
      .                   Some(P(Ty { kind, id: self.id, span: self.span, tokens: None }))
      .               }
      .           
      .               /// Walk top-down and call `it` in each place where a pattern occurs
      .               /// starting with the root pattern `walk` is called on. If `it` returns
      .               /// false then we will descend no further but siblings will be processed.
  1,560 ( 0.00%)      pub fn walk(&self, it: &mut impl FnMut(&Pat) -> bool) {
      .                   if !it(self) {
      .                       return;
      .                   }
      .           
    801 ( 0.00%)          match &self.kind {
      .                       // Walk into the pattern associated with `Ident` (if any).
      .                       PatKind::Ident(_, _, Some(p)) => p.walk(it),
      .           
      .                       // Walk into each field of struct.
     16 ( 0.00%)              PatKind::Struct(_, _, fields, _) => fields.iter().for_each(|field| field.pat.walk(it)),
      .           
      .                       // Sequence of patterns.
      6 ( 0.00%)              PatKind::TupleStruct(_, _, s)
      .                       | PatKind::Tuple(s)
      .                       | PatKind::Slice(s)
     36 ( 0.00%)              | PatKind::Or(s) => s.iter().for_each(|p| p.walk(it)),
      .           
      .                       // Trivial wrappers over inner patterns.
      .                       PatKind::Box(s) | PatKind::Ref(s, _) | PatKind::Paren(s) => s.walk(it),
      .           
      .                       // These patterns do not contain subpatterns, skip.
      .                       PatKind::Wild
      .                       | PatKind::Rest
      .                       | PatKind::Lit(_)
      .                       | PatKind::Range(..)
      .                       | PatKind::Ident(..)
      .                       | PatKind::Path(..)
      .                       | PatKind::MacCall(_) => {}
      .                   }
    910 ( 0.00%)      }
      .           
      .               /// Is this a `..` pattern?
      .               pub fn is_rest(&self) -> bool {
      .                   matches!(self.kind, PatKind::Rest)
      .               }
      .           }
      .           
      .           /// A single field in a struct pattern.
-- line 672 ----------------------------------------
-- line 675 ----------------------------------------
      .           /// are treated the same as `x: x, y: ref y, z: ref mut z`,
      .           /// except when `is_shorthand` is true.
      .           #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub struct PatField {
      .               /// The identifier for the field.
      .               pub ident: Ident,
      .               /// The pattern the field is destructured to.
      .               pub pat: P<Pat>,
      8 ( 0.00%)      pub is_shorthand: bool,
      .               pub attrs: AttrVec,
      4 ( 0.00%)      pub id: NodeId,
      .               pub span: Span,
      .               pub is_placeholder: bool,
      .           }
      .           
     48 ( 0.00%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, Copy)]
      .           pub enum BindingMode {
      .               ByRef(Mutability),
      .               ByValue(Mutability),
      .           }
      .           
      .           #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub enum RangeEnd {
      .               /// `..=` or `...`
-- line 698 ----------------------------------------
-- line 705 ----------------------------------------
      .           pub enum RangeSyntax {
      .               /// `...`
      .               DotDotDot,
      .               /// `..=`
      .               DotDotEq,
      .           }
      .           
      .           /// All the different flavors of pattern that Rust recognizes.
    672 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub enum PatKind {
      .               /// Represents a wildcard pattern (`_`).
      .               Wild,
      .           
      .               /// A `PatKind::Ident` may either be a new bound variable (`ref mut binding @ OPT_SUBPATTERN`),
      .               /// or a unit struct/variant pattern, or a const pattern (in the last two cases the third
      .               /// field must be `None`). Disambiguation cannot be done with parser alone, so it happens
      .               /// during name resolution.
     18 ( 0.00%)      Ident(BindingMode, Ident, Option<P<Pat>>),
      .           
      .               /// A struct or struct variant pattern (e.g., `Variant {x, y, ..}`).
      .               /// The `bool` is `true` in the presence of a `..`.
     12 ( 0.00%)      Struct(Option<QSelf>, Path, Vec<PatField>, /* recovered */ bool),
      .           
      .               /// A tuple struct/variant pattern (`Variant(x, y, .., z)`).
      .               TupleStruct(Option<QSelf>, Path, Vec<P<Pat>>),
      .           
      .               /// An or-pattern `A | B | C`.
      .               /// Invariant: `pats.len() >= 2`.
      .               Or(Vec<P<Pat>>),
      .           
      .               /// A possibly qualified path pattern.
      .               /// Unqualified path patterns `A::B::C` can legally refer to variants, structs, constants
      .               /// or associated constants. Qualified path patterns `<A>::B::C`/`<A as Trait>::B::C` can
      .               /// only legally refer to associated constants.
      .               Path(Option<QSelf>, Path),
      .           
      .               /// A tuple pattern (`(a, b)`).
     16 ( 0.00%)      Tuple(Vec<P<Pat>>),
      .           
      .               /// A `box` pattern.
      .               Box(P<Pat>),
      .           
      .               /// A reference pattern (e.g., `&mut (a, b)`).
      .               Ref(P<Pat>, Mutability),
      .           
      .               /// A literal.
-- line 750 ----------------------------------------
-- line 772 ----------------------------------------
      .           
      .               /// Parentheses in patterns used for grouping (i.e., `(PAT)`).
      .               Paren(P<Pat>),
      .           
      .               /// A macro pattern; pre-expansion.
      .               MacCall(MacCall),
      .           }
      .           
 15,209 ( 0.01%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Copy)]
    464 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
      .           pub enum Mutability {
      .               Mut,
      .               Not,
      .           }
      .           
      .           impl Mutability {
      .               pub fn invert(self) -> Self {
      .                   match self {
-- line 789 ----------------------------------------
-- line 797 ----------------------------------------
      .                       Mutability::Mut => "mut ",
      .                       Mutability::Not => "",
      .                   }
      .               }
      .           }
      .           
      .           /// The kind of borrow in an `AddrOf` expression,
      .           /// e.g., `&place` or `&raw const place`.
     20 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, Debug)]
      .           #[derive(Encodable, Decodable, HashStable_Generic)]
      .           pub enum BorrowKind {
      .               /// A normal borrow, `&$expr` or `&mut $expr`.
      .               /// The resulting type is either `&'a T` or `&'a mut T`
      .               /// where `T = typeof($expr)` and `'a` is some lifetime.
      .               Ref,
      .               /// A raw borrow, `&raw const $expr` or `&raw mut $expr`.
      .               /// The resulting type is either `*const T` or `*mut T`
-- line 813 ----------------------------------------
-- line 917 ----------------------------------------
      .                       UnOp::Neg => "-",
      .                   }
      .               }
      .           }
      .           
      .           /// A statement
      .           #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub struct Stmt {
      8 ( 0.00%)      pub id: NodeId,
      .               pub kind: StmtKind,
      .               pub span: Span,
      .           }
      .           
      .           impl Stmt {
      .               pub fn tokens(&self) -> Option<&LazyTokenStream> {
      .                   match self.kind {
      .                       StmtKind::Local(ref local) => local.tokens.as_ref(),
-- line 933 ----------------------------------------
-- line 934 ----------------------------------------
      .                       StmtKind::Item(ref item) => item.tokens.as_ref(),
      .                       StmtKind::Expr(ref expr) | StmtKind::Semi(ref expr) => expr.tokens.as_ref(),
      .                       StmtKind::Empty => None,
      .                       StmtKind::MacCall(ref mac) => mac.tokens.as_ref(),
      .                   }
      .               }
      .           
      .               pub fn has_trailing_semicolon(&self) -> bool {
      5 ( 0.00%)          match &self.kind {
      .                       StmtKind::Semi(_) => true,
      .                       StmtKind::MacCall(mac) => matches!(mac.style, MacStmtStyle::Semicolon),
      .                       _ => false,
      .                   }
      1 ( 0.00%)      }
      .           
      .               /// Converts a parsed `Stmt` to a `Stmt` with
      .               /// a trailing semicolon.
      .               ///
      .               /// This only modifies the parsed AST struct, not the attached
      .               /// `LazyTokenStream`. The parser is responsible for calling
      .               /// `CreateTokenStream::add_trailing_semi` when there is actually
      .               /// a semicolon in the tokenstream.
     12 ( 0.00%)      pub fn add_trailing_semicolon(mut self) -> Self {
     80 ( 0.00%)          self.kind = match self.kind {
     27 ( 0.00%)              StmtKind::Expr(expr) => StmtKind::Semi(expr),
      2 ( 0.00%)              StmtKind::MacCall(mac) => {
      .                           StmtKind::MacCall(mac.map(|MacCallStmt { mac, style: _, attrs, tokens }| {
      .                               MacCallStmt { mac, style: MacStmtStyle::Semicolon, attrs, tokens }
      .                           }))
      .                       }
      1 ( 0.00%)              kind => kind,
      .                   };
      .           
     72 ( 0.00%)          self
     12 ( 0.00%)      }
      .           
      .               pub fn is_item(&self) -> bool {
      .                   matches!(self.kind, StmtKind::Item(_))
      .               }
      .           
      .               pub fn is_expr(&self) -> bool {
    126 ( 0.00%)          matches!(self.kind, StmtKind::Expr(_))
     63 ( 0.00%)      }
      .           }
      .           
     40 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub enum StmtKind {
      .               /// A local (let) binding.
      8 ( 0.00%)      Local(P<Local>),
      .               /// An item definition.
      .               Item(P<Item>),
      .               /// Expr without trailing semi-colon.
      8 ( 0.00%)      Expr(P<Expr>),
      .               /// Expr with a trailing semi-colon.
      .               Semi(P<Expr>),
      .               /// Just a trailing semi-colon.
      .               Empty,
      .               /// Macro.
      .               MacCall(P<MacCallStmt>),
      .           }
      .           
-- line 994 ----------------------------------------
-- line 995 ----------------------------------------
      .           #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub struct MacCallStmt {
      .               pub mac: MacCall,
      .               pub style: MacStmtStyle,
      .               pub attrs: AttrVec,
      .               pub tokens: Option<LazyTokenStream>,
      .           }
      .           
      3 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug)]
      .           pub enum MacStmtStyle {
      .               /// The macro statement had a trailing semicolon (e.g., `foo! { ... };`
      .               /// `foo!(...);`, `foo![...];`).
      .               Semicolon,
      .               /// The macro statement had braces (e.g., `foo! { ... }`).
      .               Braces,
      .               /// The macro statement had parentheses or brackets and no semicolon (e.g.,
      .               /// `foo!(...)`). All of these will end up being converted into macro
      .               /// expressions.
      .               NoBraces,
      .           }
      .           
      .           /// Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`.
     16 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub struct Local {
      4 ( 0.00%)      pub id: NodeId,
      .               pub pat: P<Pat>,
      .               pub ty: Option<P<Ty>>,
      .               pub kind: LocalKind,
      .               pub span: Span,
      .               pub attrs: AttrVec,
      .               pub tokens: Option<LazyTokenStream>,
      .           }
      .           
     28 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub enum LocalKind {
      .               /// Local declaration.
      .               /// Example: `let x;`
      .               Decl,
      .               /// Local declaration with an initializer.
      .               /// Example: `let x = y;`
      4 ( 0.00%)      Init(P<Expr>),
      .               /// Local declaration with an initializer and an `else` clause.
      .               /// Example: `let Some(x) = y else { return };`
      4 ( 0.00%)      InitElse(P<Expr>, P<Block>),
      .           }
      .           
      .           impl LocalKind {
      .               pub fn init(&self) -> Option<&Expr> {
     93 ( 0.00%)          match self {
      .                       Self::Decl => None,
      .                       Self::Init(i) | Self::InitElse(i, _) => Some(i),
      .                   }
     31 ( 0.00%)      }
      .           
      .               pub fn init_else_opt(&self) -> Option<(&Expr, Option<&Block>)> {
    985 ( 0.00%)          match self {
      .                       Self::Decl => None,
      .                       Self::Init(init) => Some((init, None)),
      .                       Self::InitElse(init, els) => Some((init, Some(els))),
      .                   }
    197 ( 0.00%)      }
      .           }
      .           
      .           /// An arm of a 'match'.
      .           ///
      .           /// E.g., `0..=10 => { println!("match!") }` as in
      .           ///
      .           /// ```
      .           /// match 123 {
      .           ///     0..=10 => { println!("match!") },
      .           ///     _ => { println!("no match!") },
      .           /// }
      .           /// ```
      .           #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub struct Arm {
      4 ( 0.00%)      pub attrs: AttrVec,
      .               /// Match arm pattern, e.g. `10` in `match foo { 10 => {}, _ => {} }`
      .               pub pat: P<Pat>,
      .               /// Match arm guard, e.g. `n > 10` in `match foo { n if n > 10 => {}, _ => {} }`
      4 ( 0.00%)      pub guard: Option<P<Expr>>,
      .               /// Match arm body.
      4 ( 0.00%)      pub body: P<Expr>,
      .               pub span: Span,
      4 ( 0.00%)      pub id: NodeId,
      .               pub is_placeholder: bool,
      .           }
      .           
      .           /// A single field in a struct expression, e.g. `x: value` and `y` in `Foo { x: value, y }`.
      .           #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub struct ExprField {
      2 ( 0.00%)      pub attrs: AttrVec,
      2 ( 0.00%)      pub id: NodeId,
      .               pub span: Span,
      .               pub ident: Ident,
      2 ( 0.00%)      pub expr: P<Expr>,
      .               pub is_shorthand: bool,
      .               pub is_placeholder: bool,
      .           }
      .           
      2 ( 0.00%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, Copy)]
      .           pub enum BlockCheckMode {
      .               Default,
      .               Unsafe(UnsafeSource),
      .           }
      .           
      .           #[derive(Clone, PartialEq, Encodable, Decodable, Debug, Copy)]
      .           pub enum UnsafeSource {
      .               CompilerGenerated,
-- line 1102 ----------------------------------------
-- line 1110 ----------------------------------------
      .           /// explicit discriminant values for enum variants.
      .           #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub struct AnonConst {
      .               pub id: NodeId,
      .               pub value: P<Expr>,
      .           }
      .           
      .           /// An expression.
    860 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub struct Expr {
    172 ( 0.00%)      pub id: NodeId,
    172 ( 0.00%)      pub kind: ExprKind,
      .               pub span: Span,
      .               pub attrs: AttrVec,
      .               pub tokens: Option<LazyTokenStream>,
      .           }
      .           
      .           // `Expr` is used a lot. Make sure it doesn't unintentionally get bigger.
      .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
      .           rustc_data_structures::static_assert_size!(Expr, 104);
      .           
      .           impl Expr {
      .               /// Returns `true` if this expression would be valid somewhere that expects a value;
      .               /// for example, an `if` condition.
     10 ( 0.00%)      pub fn returns(&self) -> bool {
     20 ( 0.00%)          if let ExprKind::Block(ref block, _) = self.kind {
      .                       match block.stmts.last().map(|last_stmt| &last_stmt.kind) {
      .                           // Implicit return
      .                           Some(StmtKind::Expr(_)) => true,
      .                           // Last statement is an explicit return?
      .                           Some(StmtKind::Semi(expr)) => matches!(expr.kind, ExprKind::Ret(_)),
      .                           // This is a block that doesn't end in either an implicit or explicit return.
      .                           _ => false,
      .                       }
      .                   } else {
      .                       // This is not a block, it is a value.
      .                       true
      .                   }
     10 ( 0.00%)      }
      .           
      .               /// Is this expr either `N`, or `{ N }`.
      .               ///
      .               /// If this is not the case, name resolution does not resolve `N` when using
      .               /// `min_const_generics` as more complex expressions are not supported.
      .               pub fn is_potential_trivial_const_param(&self) -> bool {
      .                   let this = if let ExprKind::Block(ref block, None) = self.kind {
      .                       if block.stmts.len() == 1 {
-- line 1156 ----------------------------------------
-- line 1176 ----------------------------------------
      .                       ExprKind::Path(None, path) => Some(GenericBound::Trait(
      .                           PolyTraitRef::new(Vec::new(), path.clone(), self.span),
      .                           TraitBoundModifier::None,
      .                       )),
      .                       _ => None,
      .                   }
      .               }
      .           
      7 ( 0.00%)      pub fn peel_parens(&self) -> &Expr {
      .                   let mut expr = self;
     14 ( 0.00%)          while let ExprKind::Paren(inner) = &expr.kind {
      .                       expr = &inner;
      .                   }
      .                   expr
      7 ( 0.00%)      }
      .           
      .               /// Attempts to reparse as `Ty` (for diagnostic purposes).
      .               pub fn to_ty(&self) -> Option<P<Ty>> {
      .                   let kind = match &self.kind {
      .                       // Trivial conversions.
      .                       ExprKind::Path(qself, path) => TyKind::Path(qself.clone(), path.clone()),
      .                       ExprKind::MacCall(mac) => TyKind::MacCall(mac.clone()),
      .           
-- line 1198 ----------------------------------------
-- line 1296 ----------------------------------------
      .           #[derive(Copy, Clone, PartialEq, Encodable, Decodable, Debug)]
      .           pub enum RangeLimits {
      .               /// Inclusive at the beginning, exclusive at the end
      .               HalfOpen,
      .               /// Inclusive at the beginning and end
      .               Closed,
      .           }
      .           
     16 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub enum StructRest {
      .               /// `..x`.
      .               Base(P<Expr>),
      .               /// `..`.
      .               Rest(Span),
      .               /// No trailing `..` or expression.
      .               None,
      .           }
      .           
     28 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub struct StructExpr {
      .               pub qself: Option<QSelf>,
      .               pub path: Path,
      6 ( 0.00%)      pub fields: Vec<ExprField>,
      .               pub rest: StructRest,
      .           }
      .           
  2,439 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub enum ExprKind {
      .               /// A `box x` expression.
      .               Box(P<Expr>),
      .               /// An array (`[a, b, c, d]`)
      .               Array(Vec<P<Expr>>),
      .               /// Allow anonymous constants from an inline `const` block
      .               ConstBlock(AnonConst),
      .               /// A function call
      .               ///
      .               /// The first field resolves to the function itself,
      .               /// and the second field is the list of arguments.
      .               /// This also represents calling the constructor of
      .               /// tuple-like ADTs such as tuple structs and enum variants.
     88 ( 0.00%)      Call(P<Expr>, Vec<P<Expr>>),
      .               /// A method call (`x.foo::<'static, Bar, Baz>(a, b, c, d)`)
      .               ///
      .               /// The `PathSegment` represents the method name and its generic arguments
      .               /// (within the angle brackets).
      .               /// The first element of the vector of an `Expr` is the expression that evaluates
      .               /// to the object on which the method is being called on (the receiver),
      .               /// and the remaining elements are the rest of the arguments.
      .               /// Thus, `x.foo::<Bar, Baz>(a, b, c, d)` is represented as
      .               /// `ExprKind::MethodCall(PathSegment { foo, [Bar, Baz] }, [x, a, b, c, d])`.
      .               /// This `Span` is the span of the function, without the dot and receiver
      .               /// (e.g. `foo(a, b)` in `x.foo(a, b)`
      .               MethodCall(PathSegment, Vec<P<Expr>>, Span),
      .               /// A tuple (e.g., `(a, b, c, d)`).
     20 ( 0.00%)      Tup(Vec<P<Expr>>),
      .               /// A binary operation (e.g., `a + b`, `a * b`).
      .               Binary(BinOp, P<Expr>, P<Expr>),
      .               /// A unary operation (e.g., `!x`, `*x`).
     40 ( 0.00%)      Unary(UnOp, P<Expr>),
      .               /// A literal (e.g., `1`, `"foo"`).
      .               Lit(Lit),
      .               /// A cast (e.g., `foo as f64`).
     70 ( 0.00%)      Cast(P<Expr>, P<Ty>),
      .               /// A type ascription (e.g., `42: usize`).
      .               Type(P<Expr>, P<Ty>),
      .               /// A `let pat = expr` expression that is only semantically allowed in the condition
      .               /// of `if` / `while` expressions. (e.g., `if let 0 = x { .. }`).
      .               ///
      .               /// `Span` represents the whole `let pat = expr` statement.
      .               Let(P<Pat>, P<Expr>, Span),
      .               /// An `if` block, with an optional `else` block.
-- line 1366 ----------------------------------------
-- line 1377 ----------------------------------------
      .               ///
      .               /// This is desugared to a combination of `loop` and `match` expressions.
      .               ForLoop(P<Pat>, P<Expr>, P<Block>, Option<Label>),
      .               /// Conditionless loop (can be exited with `break`, `continue`, or `return`).
      .               ///
      .               /// `'label: loop { block }`
      .               Loop(P<Block>, Option<Label>),
      .               /// A `match` block.
     16 ( 0.00%)      Match(P<Expr>, Vec<Arm>),
      .               /// A closure (e.g., `move |a, b, c| a + b + c`).
      .               ///
      .               /// The final span is the span of the argument block `|...|`.
      .               Closure(CaptureBy, Async, Movability, P<FnDecl>, P<Expr>, Span),
      .               /// A block (`'label: { ... }`).
      .               Block(P<Block>, Option<Label>),
      .               /// An async block (`async move { ... }`).
      .               ///
-- line 1393 ----------------------------------------
-- line 1422 ----------------------------------------
      .           
      .               /// Variable reference, possibly containing `::` and/or type
      .               /// parameters (e.g., `foo::bar::<baz>`).
      .               ///
      .               /// Optionally "qualified" (e.g., `<Vec<T> as SomeTrait>::SomeType`).
      .               Path(Option<QSelf>, Path),
      .           
      .               /// A referencing operation (`&a`, `&mut a`, `&raw const a` or `&raw mut a`).
     20 ( 0.00%)      AddrOf(BorrowKind, Mutability, P<Expr>),
      .               /// A `break`, with an optional label to break, and an optional expression.
      .               Break(Option<Label>, Option<P<Expr>>),
      .               /// A `continue`, with an optional label.
      .               Continue(Option<Label>),
      .               /// A `return`, with an optional value to be returned.
      .               Ret(Option<P<Expr>>),
      .           
      .               /// Output of the `asm!()` macro.
-- line 1438 ----------------------------------------
-- line 1448 ----------------------------------------
      .           
      .               /// An array literal constructed from one repeated element.
      .               ///
      .               /// E.g., `[1; 5]`. The expression is the element to be
      .               /// repeated; the constant is the number of times to repeat it.
      .               Repeat(P<Expr>, AnonConst),
      .           
      .               /// No-op: used solely so we can pretty-print faithfully.
     24 ( 0.00%)      Paren(P<Expr>),
      .           
      .               /// A try expression (`expr?`).
      .               Try(P<Expr>),
      .           
      .               /// A `yield`, with an optional value to be yielded.
      .               Yield(Option<P<Expr>>),
      .           
      .               /// Placeholder for an expression that wasn't syntactically well formed in some way.
-- line 1464 ----------------------------------------
-- line 1515 ----------------------------------------
      .           #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub struct MacCall {
      .               pub path: Path,
      .               pub args: P<MacArgs>,
      .               pub prior_type_ascription: Option<(Span, bool)>,
      .           }
      .           
      .           impl MacCall {
     11 ( 0.00%)      pub fn span(&self) -> Span {
     44 ( 0.00%)          self.path.span.to(self.args.span().unwrap_or(self.path.span))
      .               }
      .           }
      .           
      .           /// Arguments passed to an attribute or a function-like macro.
  8,041 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, HashStable_Generic)]
     69 ( 0.00%)  pub enum MacArgs {
      .               /// No arguments - `#[attr]`.
      .               Empty,
      .               /// Delimited arguments - `#[attr()/[]/{}]` or `mac!()/[]/{}`.
     20 ( 0.00%)      Delimited(DelimSpan, MacDelimiter, TokenStream),
      .               /// Arguments of a key-value attribute - `#[attr = "value"]`.
      .               Eq(
      .                   /// Span of the `=` token.
      .                   Span,
      .                   /// "value" as a nonterminal token.
      .                   Token,
      .               ),
      .           }
      .           
      .           impl MacArgs {
      .               pub fn delim(&self) -> DelimToken {
     12 ( 0.00%)          match self {
      .                       MacArgs::Delimited(_, delim, _) => delim.to_token(),
      .                       MacArgs::Empty | MacArgs::Eq(..) => token::NoDelim,
      .                   }
      3 ( 0.00%)      }
      .           
      .               pub fn span(&self) -> Option<Span> {
     66 ( 0.00%)          match self {
      .                       MacArgs::Empty => None,
     44 ( 0.00%)              MacArgs::Delimited(dspan, ..) => Some(dspan.entire()),
      .                       MacArgs::Eq(eq_span, token) => Some(eq_span.to(token.span)),
      .                   }
      .               }
      .           
      .               /// Tokens inside the delimiters or after `=`.
      .               /// Proc macros see these tokens, for example.
    238 ( 0.00%)      pub fn inner_tokens(&self) -> TokenStream {
    170 ( 0.00%)          match self {
      .                       MacArgs::Empty => TokenStream::default(),
     34 ( 0.00%)              MacArgs::Delimited(.., tokens) => tokens.clone(),
      .                       MacArgs::Eq(.., token) => TokenTree::Token(token.clone()).into(),
      .                   }
    272 ( 0.00%)      }
      .           
      .               /// Whether a macro with these arguments needs a semicolon
      .               /// when used as a standalone item or statement.
      .               pub fn need_semicolon(&self) -> bool {
     36 ( 0.00%)          !matches!(self, MacArgs::Delimited(_, MacDelimiter::Brace, _))
      6 ( 0.00%)      }
      .           }
      .           
    358 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Encodable, Decodable, Debug, HashStable_Generic)]
      .           pub enum MacDelimiter {
      .               Parenthesis,
      .               Bracket,
      .               Brace,
      .           }
      .           
      .           impl MacDelimiter {
      .               pub fn to_token(self) -> DelimToken {
      .                   match self {
      .                       MacDelimiter::Parenthesis => DelimToken::Paren,
      .                       MacDelimiter::Bracket => DelimToken::Bracket,
      .                       MacDelimiter::Brace => DelimToken::Brace,
      .                   }
      .               }
      .           
     34 ( 0.00%)      pub fn from_token(delim: DelimToken) -> Option<MacDelimiter> {
      .                   match delim {
      .                       token::Paren => Some(MacDelimiter::Parenthesis),
      .                       token::Bracket => Some(MacDelimiter::Bracket),
      .                       token::Brace => Some(MacDelimiter::Brace),
      .                       token::NoDelim => None,
      .                   }
     34 ( 0.00%)      }
      .           }
      .           
      .           /// Represents a macro definition.
    116 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, HashStable_Generic)]
      .           pub struct MacroDef {
      1 ( 0.00%)      pub body: P<MacArgs>,
      .               /// `true` if macro was defined with `macro_rules`.
      1 ( 0.00%)      pub macro_rules: bool,
      .           }
      .           
    144 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, Copy, Hash, Eq, PartialEq)]
     36 ( 0.00%)  #[derive(HashStable_Generic)]
      .           pub enum StrStyle {
      .               /// A regular string, like `"foo"`.
      .               Cooked,
      .               /// A raw string, like `r##"foo"##`.
      .               ///
      .               /// The value is the number of `#` symbols used.
      .               Raw(u16),
      .           }
      .           
      .           /// An AST literal.
    369 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, HashStable_Generic)]
      .           pub struct Lit {
      .               /// The original literal token as written in source code.
      .               pub token: token::Lit,
      .               /// The "semantic" representation of the literal lowered from the original tokens.
      .               /// Strings are unescaped, hexadecimal forms are eliminated, etc.
      .               /// FIXME: Remove this and only create the semantic representation during lowering to HIR.
      .               pub kind: LitKind,
      .               pub span: Span,
-- line 1631 ----------------------------------------
-- line 1654 ----------------------------------------
      .                       token: token::Lit::new(token_kind, self.symbol, self.suffix),
      .                       span: self.span,
      .                       kind: LitKind::Str(self.symbol_unescaped, self.style),
      .                   }
      .               }
      .           }
      .           
      .           /// Type of the integer literal based on provided suffix.
     78 ( 0.00%)  #[derive(Clone, Copy, Encodable, Decodable, Debug, Hash, Eq, PartialEq)]
     28 ( 0.00%)  #[derive(HashStable_Generic)]
      .           pub enum LitIntType {
      .               /// e.g. `42_i32`.
      .               Signed(IntTy),
      .               /// e.g. `42_u32`.
      .               Unsigned(UintTy),
      .               /// e.g. `42`.
      .               Unsuffixed,
      .           }
-- line 1671 ----------------------------------------
-- line 1678 ----------------------------------------
      .               Suffixed(FloatTy),
      .               /// A float literal without a suffix (`1.0 or 1.0E10`).
      .               Unsuffixed,
      .           }
      .           
      .           /// Literal kind.
      .           ///
      .           /// E.g., `"foo"`, `42`, `12.34`, or `bool`.
    859 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, Hash, Eq, PartialEq, HashStable_Generic)]
      .           pub enum LitKind {
      .               /// A string literal (`"foo"`).
    222 ( 0.00%)      Str(Symbol, StrStyle),
      .               /// A byte string (`b"foo"`).
      .               ByteStr(Lrc<[u8]>),
      .               /// A byte char (`b'f'`).
      .               Byte(u8),
      .               /// A character literal (`'a'`).
      .               Char(char),
      .               /// An integer literal (`1`).
    102 ( 0.00%)      Int(u128, LitIntType),
      .               /// A float literal (`1f64` or `1E10f64`).
      .               Float(Symbol, LitFloatType),
      .               /// A boolean literal.
     16 ( 0.00%)      Bool(bool),
      .               /// Placeholder for a literal that wasn't well-formed in some way.
      .               Err(Symbol),
      .           }
      .           
      .           impl LitKind {
      .               /// Returns `true` if this literal is a string.
      .               pub fn is_str(&self) -> bool {
     10 ( 0.00%)          matches!(self, LitKind::Str(..))
      5 ( 0.00%)      }
      .           
      .               /// Returns `true` if this literal is byte literal string.
      .               pub fn is_bytestr(&self) -> bool {
      .                   matches!(self, LitKind::ByteStr(_))
      .               }
      .           
      .               /// Returns `true` if this is a numeric literal.
      .               pub fn is_numeric(&self) -> bool {
      .                   matches!(self, LitKind::Int(..) | LitKind::Float(..))
      .               }
      .           
      .               /// Returns `true` if this literal has no suffix.
      .               /// Note: this will return true for literals with prefixes such as raw strings and byte strings.
      .               pub fn is_unsuffixed(&self) -> bool {
      .                   !self.is_suffixed()
     31 ( 0.00%)      }
      .           
      .               /// Returns `true` if this literal has a suffix.
      .               pub fn is_suffixed(&self) -> bool {
    155 ( 0.00%)          match *self {
      .                       // suffixed variants
      .                       LitKind::Int(_, LitIntType::Signed(..) | LitIntType::Unsigned(..))
      .                       | LitKind::Float(_, LitFloatType::Suffixed(..)) => true,
      .                       // unsuffixed variants
      .                       LitKind::Str(..)
      .                       | LitKind::ByteStr(..)
      .                       | LitKind::Byte(..)
      .                       | LitKind::Char(..)
-- line 1738 ----------------------------------------
-- line 1749 ----------------------------------------
      .           #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub struct MutTy {
      .               pub ty: P<Ty>,
      .               pub mutbl: Mutability,
      .           }
      .           
      .           /// Represents a function's signature in a trait declaration,
      .           /// trait implementation, or free function.
     20 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub struct FnSig {
      .               pub header: FnHeader,
      4 ( 0.00%)      pub decl: P<FnDecl>,
      .               pub span: Span,
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
      .           #[derive(Encodable, Decodable, HashStable_Generic)]
      .           pub enum FloatTy {
      .               F32,
      .               F64,
-- line 1768 ----------------------------------------
-- line 1780 ----------------------------------------
      .                   match self {
      .                       FloatTy::F32 => sym::f32,
      .                       FloatTy::F64 => sym::f64,
      .                   }
      .               }
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
     18 ( 0.00%)  #[derive(Encodable, Decodable, HashStable_Generic)]
      .           pub enum IntTy {
      .               Isize,
      .               I8,
      .               I16,
      .               I32,
      .               I64,
      .               I128,
      .           }
-- line 1796 ----------------------------------------
-- line 1815 ----------------------------------------
      .                       IntTy::I32 => sym::i32,
      .                       IntTy::I64 => sym::i64,
      .                       IntTy::I128 => sym::i128,
      .                   }
      .               }
      .           }
      .           
      .           #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Copy, Debug)]
     14 ( 0.00%)  #[derive(Encodable, Decodable, HashStable_Generic)]
      .           pub enum UintTy {
      .               Usize,
      .               U8,
      .               U16,
      .               U32,
      .               U64,
      .               U128,
      .           }
-- line 1831 ----------------------------------------
-- line 1897 ----------------------------------------
      .           pub struct Ty {
      .               pub id: NodeId,
      .               pub kind: TyKind,
      .               pub span: Span,
      .               pub tokens: Option<LazyTokenStream>,
      .           }
      .           
      .           impl Clone for Ty {
     62 ( 0.00%)      fn clone(&self) -> Self {
  1,055 ( 0.00%)          ensure_sufficient_stack(|| Self {
     46 ( 0.00%)              id: self.id,
      .                       kind: self.kind.clone(),
     46 ( 0.00%)              span: self.span,
      .                       tokens: self.tokens.clone(),
      .                   })
     93 ( 0.00%)      }
      .           }
      .           
      .           impl Ty {
      .               pub fn peel_refs(&self) -> &Self {
      .                   let mut final_ty = self;
      .                   while let TyKind::Rptr(_, MutTy { ty, .. }) = &final_ty.kind {
      .                       final_ty = &ty;
      .                   }
-- line 1920 ----------------------------------------
-- line 1926 ----------------------------------------
      .           pub struct BareFnTy {
      .               pub unsafety: Unsafe,
      .               pub ext: Extern,
      .               pub generic_params: Vec<GenericParam>,
      .               pub decl: P<FnDecl>,
      .           }
      .           
      .           /// The various kinds of type recognized by the compiler.
    571 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub enum TyKind {
      .               /// A variable-length slice (`[T]`).
      .               Slice(P<Ty>),
      .               /// A fixed length array (`[T; n]`).
      .               Array(P<Ty>, AnonConst),
      .               /// A raw pointer (`*const T` or `*mut T`).
      .               Ptr(MutTy),
      .               /// A reference (`&'a T` or `&'a mut T`).
      .               Rptr(Option<Lifetime>, MutTy),
      .               /// A bare function (e.g., `fn(usize) -> bool`).
      .               BareFn(P<BareFnTy>),
      .               /// The never type (`!`).
      .               Never,
      .               /// A tuple (`(A, B, C, D,...)`).
     24 ( 0.00%)      Tup(Vec<P<Ty>>),
      .               /// A path (`module::module::...::Type`), optionally
      .               /// "qualified", e.g., `<Vec<T> as SomeTrait>::SomeType`.
      .               ///
      .               /// Type parameters are stored in the `Path` itself.
     29 ( 0.00%)      Path(Option<QSelf>, Path),
      .               /// A trait object type `Bound1 + Bound2 + Bound3`
      .               /// where `Bound` is a trait or a lifetime.
      .               TraitObject(GenericBounds, TraitObjectSyntax),
      .               /// An `impl Bound1 + Bound2 + Bound3` type
      .               /// where `Bound` is a trait or a lifetime.
      .               ///
      .               /// The `NodeId` exists to prevent lowering from having to
      .               /// generate `NodeId`s on the fly, which would complicate
-- line 1962 ----------------------------------------
-- line 1976 ----------------------------------------
      .               /// Placeholder for a kind that has failed to be defined.
      .               Err,
      .               /// Placeholder for a `va_list`.
      .               CVarArgs,
      .           }
      .           
      .           impl TyKind {
      .               pub fn is_implicit_self(&self) -> bool {
     34 ( 0.00%)          matches!(self, TyKind::ImplicitSelf)
     17 ( 0.00%)      }
      .           
      .               pub fn is_unit(&self) -> bool {
      .                   matches!(self, TyKind::Tup(tys) if tys.is_empty())
      .               }
      .           }
      .           
      .           /// Syntax used to declare a trait object.
      .           #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
-- line 1993 ----------------------------------------
-- line 2107 ----------------------------------------
      .               pub line_spans: Vec<Span>,
      .           }
      .           
      .           /// A parameter in a function header.
      .           ///
      .           /// E.g., `bar: usize` as in `fn foo(bar: usize)`.
      .           #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub struct Param {
      3 ( 0.00%)      pub attrs: AttrVec,
      .               pub ty: P<Ty>,
      .               pub pat: P<Pat>,
      3 ( 0.00%)      pub id: NodeId,
      .               pub span: Span,
      .               pub is_placeholder: bool,
      .           }
      .           
      .           /// Alternative representation for `Arg`s describing `self` parameter of methods.
      .           ///
      .           /// E.g., `&mut self` as in `fn foo(&mut self)`.
      .           #[derive(Clone, Encodable, Decodable, Debug)]
-- line 2126 ----------------------------------------
-- line 2152 ----------------------------------------
      .                           };
      .                       }
      .                   }
      .                   None
      .               }
      .           
      .               /// Returns `true` if parameter is `self`.
      .               pub fn is_self(&self) -> bool {
    110 ( 0.00%)          if let PatKind::Ident(_, ident, _) = self.pat.kind {
      .                       ident.name == kw::SelfLower
      .                   } else {
      .                       false
      .                   }
     12 ( 0.00%)      }
      .           
      .               /// Builds a `Param` object from `ExplicitSelf`.
     60 ( 0.00%)      pub fn from_self(attrs: AttrVec, eself: ExplicitSelf, eself_ident: Ident) -> Param {
     25 ( 0.00%)          let span = eself.span.to(eself_ident.span);
      .                   let infer_ty = P(Ty { id: DUMMY_NODE_ID, kind: TyKind::ImplicitSelf, span, tokens: None });
     15 ( 0.00%)          let param = |mutbl, ty| Param {
      .                       attrs,
      .                       pat: P(Pat {
      .                           id: DUMMY_NODE_ID,
      .                           kind: PatKind::Ident(BindingMode::ByValue(mutbl), eself_ident, None),
      .                           span,
      .                           tokens: None,
      .                       }),
      .                       span,
      .                       ty,
      .                       id: DUMMY_NODE_ID,
      .                       is_placeholder: false,
      .                   };
     30 ( 0.00%)          match eself.node {
      .                       SelfKind::Explicit(ty, mutbl) => param(mutbl, ty),
      .                       SelfKind::Value(mutbl) => param(mutbl, infer_ty),
     10 ( 0.00%)              SelfKind::Region(lt, mutbl) => param(
      .                           Mutability::Not,
     20 ( 0.00%)                  P(Ty {
      .                               id: DUMMY_NODE_ID,
     10 ( 0.00%)                      kind: TyKind::Rptr(lt, MutTy { ty: infer_ty, mutbl }),
      .                               span,
      .                               tokens: None,
      .                           }),
      .                       ),
      .                   }
     45 ( 0.00%)      }
      .           }
      .           
      .           /// A signature (not the body) of a function declaration.
      .           ///
      .           /// E.g., `fn foo(bar: baz)`.
      .           ///
      .           /// Please note that it's different from `FnHeader` structure
      .           /// which contains metadata about function safety, asyncness, constness and ABI.
      8 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub struct FnDecl {
      4 ( 0.00%)      pub inputs: Vec<Param>,
      .               pub output: FnRetTy,
      .           }
      .           
      .           impl FnDecl {
      .               pub fn has_self(&self) -> bool {
      .                   self.inputs.get(0).map_or(false, Param::is_self)
     13 ( 0.00%)      }
      .               pub fn c_variadic(&self) -> bool {
     88 ( 0.00%)          self.inputs.last().map_or(false, |arg| matches!(arg.ty.kind, TyKind::CVarArgs))
     66 ( 0.00%)      }
      .           }
      .           
      .           /// Is the trait definition an auto trait?
      .           #[derive(Copy, Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
      .           pub enum IsAuto {
      .               Yes,
      .               No,
      .           }
      .           
      8 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, Encodable, Decodable, Debug)]
      .           #[derive(HashStable_Generic)]
      .           pub enum Unsafe {
      .               Yes(Span),
      .               No,
      .           }
      .           
      .           #[derive(Copy, Clone, Encodable, Decodable, Debug)]
      .           pub enum Async {
      .               Yes { span: Span, closure_id: NodeId, return_impl_trait_id: NodeId },
      .               No,
      .           }
      .           
      .           impl Async {
      .               pub fn is_async(self) -> bool {
      4 ( 0.00%)          matches!(self, Async::Yes { .. })
      .               }
      .           
      .               /// In this case this is an `async` return, the `NodeId` for the generated `impl Trait` item.
     42 ( 0.00%)      pub fn opt_return_id(self) -> Option<NodeId> {
      .                   match self {
      .                       Async::Yes { return_impl_trait_id, .. } => Some(return_impl_trait_id),
      .                       Async::No => None,
      .                   }
     21 ( 0.00%)      }
      .           }
      .           
      4 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, Encodable, Decodable, Debug)]
      .           #[derive(HashStable_Generic)]
      .           pub enum Const {
      .               Yes(Span),
      .               No,
      .           }
      .           
      .           /// Item defaultness.
      .           /// For details see the [RFC #2532](https://github.com/rust-lang/rfcs/pull/2532).
     14 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
      .           pub enum Defaultness {
      .               Default(Span),
      .               Final,
      .           }
      .           
     36 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
      .           pub enum ImplPolarity {
      .               /// `impl Trait for Type`
      .               Positive,
      .               /// `impl !Trait for Type`
      .               Negative(Span),
      .           }
      .           
      .           impl fmt::Debug for ImplPolarity {
-- line 2278 ----------------------------------------
-- line 2279 ----------------------------------------
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   match *self {
      .                       ImplPolarity::Positive => "positive".fmt(f),
      .                       ImplPolarity::Negative(_) => "negative".fmt(f),
      .                   }
      .               }
      .           }
      .           
     10 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub enum FnRetTy {
      .               /// Returns type is not specified.
      .               ///
      .               /// Functions default to `()` and closures default to inference.
      .               /// Span points to where return type would be inserted.
      .               Default(Span),
      .               /// Everything else.
      .               Ty(P<Ty>),
-- line 2295 ----------------------------------------
-- line 2331 ----------------------------------------
      .               /// semantically by Rust.
      .               pub unsafety: Unsafe,
      .               pub abi: Option<StrLit>,
      .               pub items: Vec<P<ForeignItem>>,
      .           }
      .           
      .           #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub struct EnumDef {
      2 ( 0.00%)      pub variants: Vec<Variant>,
      .           }
      .           /// Enum variant.
     36 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub struct Variant {
      .               /// Attributes of the variant.
      4 ( 0.00%)      pub attrs: AttrVec,
      .               /// Id of the variant (not the constructor, see `VariantData::ctor_id()`).
      8 ( 0.00%)      pub id: NodeId,
      .               /// Span
      .               pub span: Span,
      .               /// The visibility of the variant. Syntactically accepted but not semantically.
      .               pub vis: Visibility,
      .               /// Name of the variant.
      .               pub ident: Ident,
      .           
      .               /// Fields and constructor id of the variant.
-- line 2355 ----------------------------------------
-- line 2379 ----------------------------------------
      .           #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub struct UseTree {
      .               pub prefix: Path,
      .               pub kind: UseTreeKind,
      .               pub span: Span,
      .           }
      .           
      .           impl UseTree {
     37 ( 0.00%)      pub fn ident(&self) -> Ident {
    148 ( 0.00%)          match self.kind {
      .                       UseTreeKind::Simple(Some(rename), ..) => rename,
      .                       UseTreeKind::Simple(None, ..) => {
     74 ( 0.00%)                  self.prefix.segments.last().expect("empty prefix in a simple import").ident
      .                       }
      .                       _ => panic!("`UseTree::ident` can only be used on a simple import"),
      .                   }
     74 ( 0.00%)      }
      .           }
      .           
      .           /// Distinguishes between `Attribute`s that decorate items and Attributes that
      .           /// are contained as statements within items. These two cases need to be
      .           /// distinguished for pretty-printing.
  9,208 ( 0.01%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, Copy, HashStable_Generic)]
      .           pub enum AttrStyle {
      .               Outer,
      .               Inner,
      .           }
      .           
      .           rustc_index::newtype_index! {
      .               pub struct AttrId {
      .                   ENCODABLE = custom
-- line 2409 ----------------------------------------
-- line 2415 ----------------------------------------
      .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
      .                   s.emit_unit()
      .               }
      .           }
      .           
      .           impl<D: Decoder> rustc_serialize::Decodable<D> for AttrId {
      .               fn decode(d: &mut D) -> AttrId {
      .                   d.read_unit();
  4,435 ( 0.00%)          crate::attr::mk_attr_id()
      .               }
      .           }
      .           
  7,589 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, HashStable_Generic)]
      .           pub struct AttrItem {
      .               pub path: Path,
      .               pub args: MacArgs,
      .               pub tokens: Option<LazyTokenStream>,
      .           }
      .           
      .           /// A list of attributes.
      .           pub type AttrVec = ThinVec<Attribute>;
      .           
      .           /// Metadata associated with an item.
147,291 ( 0.08%)  #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub struct Attribute {
      .               pub kind: AttrKind,
     20 ( 0.00%)      pub id: AttrId,
      .               /// Denotes if the attribute decorates the following construct (outer)
      .               /// or the construct this attribute is contained within (inner).
      .               pub style: AttrStyle,
      .               pub span: Span,
      .           }
      .           
 39,234 ( 0.02%)  #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub enum AttrKind {
      .               /// A normal attribute.
      .               Normal(AttrItem, Option<LazyTokenStream>),
      .           
      .               /// A doc comment (e.g. `/// ...`, `//! ...`, `/** ... */`, `/*! ... */`).
      .               /// Doc attributes (e.g. `#[doc="..."]`) are represented with the `Normal`
      .               /// variant (which is much less compact and thus more expensive).
     16 ( 0.00%)      DocComment(CommentKind, Symbol),
      .           }
      .           
      .           /// `TraitRef`s appear in impls.
      .           ///
      .           /// Resolution maps each `TraitRef`'s `ref_id` to its defining trait; that's all
      .           /// that the `ref_id` is for. The `impl_id` maps to the "self type" of this impl.
      .           /// If this impl is an `ItemKind::Impl`, the `impl_id` is redundant (it could be the
      .           /// same as the impl's `NodeId`).
      .           #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub struct TraitRef {
      .               pub path: Path,
     11 ( 0.00%)      pub ref_id: NodeId,
      .           }
      .           
      .           #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub struct PolyTraitRef {
      .               /// The `'a` in `<'a> Foo<&'a T>`.
      .               pub bound_generic_params: Vec<GenericParam>,
      .           
      .               /// The `Foo<&'a T>` in `<'a> Foo<&'a T>`.
      .               pub trait_ref: TraitRef,
      .           
      .               pub span: Span,
      .           }
      .           
      .           impl PolyTraitRef {
      2 ( 0.00%)      pub fn new(generic_params: Vec<GenericParam>, path: Path, span: Span) -> Self {
      4 ( 0.00%)          PolyTraitRef {
      8 ( 0.00%)              bound_generic_params: generic_params,
     12 ( 0.00%)              trait_ref: TraitRef { path, ref_id: DUMMY_NODE_ID },
      .                       span,
      .                   }
      2 ( 0.00%)      }
      .           }
      .           
      .           #[derive(Copy, Clone, Encodable, Decodable, Debug, HashStable_Generic)]
      .           pub enum CrateSugar {
      .               /// Source is `pub(crate)`.
      .               PubCrate,
      .           
      .               /// Source is (just) `crate`.
      .               JustCrate,
      .           }
      .           
     64 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub struct Visibility {
      .               pub kind: VisibilityKind,
      .               pub span: Span,
      .               pub tokens: Option<LazyTokenStream>,
      .           }
      .           
     98 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub enum VisibilityKind {
      .               Public,
      .               Crate(CrateSugar),
      .               Restricted { path: P<Path>, id: NodeId },
      .               Inherited,
      .           }
      .           
      .           impl VisibilityKind {
      .               pub fn is_pub(&self) -> bool {
    244 ( 0.00%)          matches!(self, VisibilityKind::Public)
    122 ( 0.00%)      }
      .           }
      .           
      .           /// Field definition in a struct, variant or union.
      .           ///
      .           /// E.g., `bar: usize` as in `struct Foo { bar: usize }`.
     28 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub struct FieldDef {
      4 ( 0.00%)      pub attrs: AttrVec,
      4 ( 0.00%)      pub id: NodeId,
      .               pub span: Span,
      .               pub vis: Visibility,
      .               pub ident: Option<Ident>,
      .           
      .               pub ty: P<Ty>,
      .               pub is_placeholder: bool,
      .           }
      .           
      .           /// Fields and constructor ids of enum variants and structs.
     52 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub enum VariantData {
      .               /// Struct variant.
      .               ///
      .               /// E.g., `Bar { .. }` as in `enum Foo { Bar { .. } }`.
     16 ( 0.00%)      Struct(Vec<FieldDef>, bool),
      .               /// Tuple variant.
      .               ///
      .               /// E.g., `Bar(..)` as in `enum Foo { Bar(..) }`.
      .               Tuple(Vec<FieldDef>, NodeId),
      .               /// Unit variant.
      .               ///
      .               /// E.g., `Bar = ..` as in `enum Foo { Bar = .. }`.
      .               Unit(NodeId),
      .           }
      .           
      .           impl VariantData {
      .               /// Return the fields of this variant.
     93 ( 0.00%)      pub fn fields(&self) -> &[FieldDef] {
    372 ( 0.00%)          match *self {
      .                       VariantData::Struct(ref fields, ..) | VariantData::Tuple(ref fields, _) => fields,
      .                       _ => &[],
      .                   }
     93 ( 0.00%)      }
      .           
      .               /// Return the `NodeId` of this variant's constructor, if it has one.
      .               pub fn ctor_id(&self) -> Option<NodeId> {
    105 ( 0.00%)          match *self {
      .                       VariantData::Struct(..) => None,
      .                       VariantData::Tuple(_, id) | VariantData::Unit(id) => Some(id),
      .                   }
     35 ( 0.00%)      }
      .           }
      .           
      .           /// An item definition.
    148 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub struct Item<K = ItemKind> {
     12 ( 0.00%)      pub attrs: Vec<Attribute>,
      8 ( 0.00%)      pub id: NodeId,
      .               pub span: Span,
      .               pub vis: Visibility,
      .               /// The name of the item.
      .               /// It might be a dummy name in case of anonymous items.
      .               pub ident: Ident,
      .           
      .               pub kind: K,
      .           
-- line 2584 ----------------------------------------
-- line 2589 ----------------------------------------
      .               ///
      .               /// Note that the tokens here do not include the outer attributes, but will
      .               /// include inner attributes.
      .               pub tokens: Option<LazyTokenStream>,
      .           }
      .           
      .           impl Item {
      .               /// Return the span that encompasses the attributes.
    315 ( 0.00%)      pub fn span_with_attributes(&self) -> Span {
    156 ( 0.00%)          self.attrs.iter().fold(self.span, |acc, attr| acc.to(attr.span))
    378 ( 0.00%)      }
      .           }
      .           
      .           impl<K: Into<ItemKind>> Item<K> {
      .               pub fn into_item(self) -> Item {
      .                   let Item { attrs, id, span, vis, ident, kind, tokens } = self;
      .                   Item { attrs, id, span, vis, ident, kind: kind.into(), tokens }
      .               }
      .           }
-- line 2607 ----------------------------------------
-- line 2610 ----------------------------------------
      .           #[derive(Clone, Copy, Encodable, Decodable, Debug)]
      .           pub enum Extern {
      .               None,
      .               Implicit,
      .               Explicit(StrLit),
      .           }
      .           
      .           impl Extern {
      1 ( 0.00%)      pub fn from_abi(abi: Option<StrLit>) -> Extern {
      2 ( 0.00%)          abi.map_or(Extern::Implicit, Extern::Explicit)
      1 ( 0.00%)      }
      .           }
      .           
      .           /// A function header.
      .           ///
      .           /// All the information between the visibility and the name of the function is
      .           /// included in this struct (e.g., `async unsafe fn` or `const extern "C" fn`).
      .           #[derive(Clone, Copy, Encodable, Decodable, Debug)]
      .           pub struct FnHeader {
-- line 2628 ----------------------------------------
-- line 2629 ----------------------------------------
      .               pub unsafety: Unsafe,
      .               pub asyncness: Async,
      .               pub constness: Const,
      .               pub ext: Extern,
      .           }
      .           
      .           impl FnHeader {
      .               /// Does this function header have any qualifiers or is it empty?
      4 ( 0.00%)      pub fn has_qualifiers(&self) -> bool {
      .                   let Self { unsafety, asyncness, constness, ext } = self;
     20 ( 0.00%)          matches!(unsafety, Unsafe::Yes(_))
     12 ( 0.00%)              || asyncness.is_async()
      .                       || matches!(constness, Const::Yes(_))
      8 ( 0.00%)              || !matches!(ext, Extern::None)
      4 ( 0.00%)      }
      .           }
      .           
      .           impl Default for FnHeader {
      2 ( 0.00%)      fn default() -> FnHeader {
      8 ( 0.00%)          FnHeader {
      .                       unsafety: Unsafe::No,
      .                       asyncness: Async::No,
      .                       constness: Const::No,
      .                       ext: Extern::None,
      .                   }
      2 ( 0.00%)      }
      .           }
      .           
      .           #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub struct Trait {
      .               pub unsafety: Unsafe,
      .               pub is_auto: IsAuto,
      .               pub generics: Generics,
      .               pub bounds: GenericBounds,
-- line 2662 ----------------------------------------
-- line 2666 ----------------------------------------
      .           #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub struct TyAlias {
      .               pub defaultness: Defaultness,
      .               pub generics: Generics,
      .               pub bounds: GenericBounds,
      .               pub ty: Option<P<Ty>>,
      .           }
      .           
     42 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub struct Impl {
      .               pub defaultness: Defaultness,
      .               pub unsafety: Unsafe,
      .               pub generics: Generics,
      .               pub constness: Const,
      .               pub polarity: ImplPolarity,
      .               /// The trait being implemented, if any.
      .               pub of_trait: Option<TraitRef>,
      .               pub self_ty: P<Ty>,
      4 ( 0.00%)      pub items: Vec<P<AssocItem>>,
      .           }
      .           
     42 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub struct Fn {
      .               pub defaultness: Defaultness,
      .               pub generics: Generics,
      .               pub sig: FnSig,
      .               pub body: Option<P<Block>>,
      .           }
      .           
     48 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub enum ItemKind {
      .               /// An `extern crate` item, with the optional *original* crate name if the crate was renamed.
      .               ///
      .               /// E.g., `extern crate foo` or `extern crate foo_bar as foo`.
      .               ExternCrate(Option<Symbol>),
      .               /// A use declaration item (`use`).
      .               ///
      .               /// E.g., `use foo;`, `use foo::bar;` or `use foo::bar as FooBar;`.
-- line 2703 ----------------------------------------
-- line 2728 ----------------------------------------
      .               GlobalAsm(Box<InlineAsm>),
      .               /// A type alias (`type`).
      .               ///
      .               /// E.g., `type Foo = Bar<u8>;`.
      .               TyAlias(Box<TyAlias>),
      .               /// An enum definition (`enum`).
      .               ///
      .               /// E.g., `enum Foo<A, B> { C<A>, D<B> }`.
      8 ( 0.00%)      Enum(EnumDef, Generics),
      .               /// A struct definition (`struct`).
      .               ///
      .               /// E.g., `struct Foo<A> { x: A }`.
      .               Struct(VariantData, Generics),
      .               /// A union definition (`union`).
      .               ///
      .               /// E.g., `union Foo<A, B> { x: A, y: B }`.
      .               Union(VariantData, Generics),
-- line 2744 ----------------------------------------
-- line 2748 ----------------------------------------
      .               Trait(Box<Trait>),
      .               /// Trait alias
      .               ///
      .               /// E.g., `trait Foo = Bar + Quux;`.
      .               TraitAlias(Generics, GenericBounds),
      .               /// An implementation.
      .               ///
      .               /// E.g., `impl<A> Foo<A> { .. }` or `impl<A> Trait for Foo<A> { .. }`.
      2 ( 0.00%)      Impl(Box<Impl>),
      .               /// A macro invocation.
      .               ///
      .               /// E.g., `foo!(..)`.
      .               MacCall(MacCall),
      .           
      .               /// A macro definition.
      .               MacroDef(MacroDef),
      .           }
-- line 2764 ----------------------------------------
-- line 2819 ----------------------------------------
      .           
      .           /// Represents associated item kinds.
      .           ///
      .           /// The term "provided" in the variants below refers to the item having a default
      .           /// definition / body. Meanwhile, a "required" item lacks a definition / body.
      .           /// In an implementation, all items must be provided.
      .           /// The `Option`s below denote the bodies, where `Some(_)`
      .           /// means "provided" and conversely `None` means "required".
     16 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub enum AssocItemKind {
      .               /// An associated constant, `const $ident: $ty $def?;` where `def ::= "=" $expr? ;`.
      .               /// If `def` is parsed, then the constant is provided, and otherwise required.
      .               Const(Defaultness, P<Ty>, Option<P<Expr>>),
      .               /// An associated function.
      6 ( 0.00%)      Fn(Box<Fn>),
      .               /// An associated type.
      .               TyAlias(Box<TyAlias>),
      .               /// A macro expanding to associated items.
      .               MacCall(MacCall),
      .           }
      .           
      .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
      .           rustc_data_structures::static_assert_size!(AssocItemKind, 72);
      .           
      .           impl AssocItemKind {
      .               pub fn defaultness(&self) -> Defaultness {
    300 ( 0.00%)          match *self {
      .                       Self::Const(defaultness, ..)
    188 ( 0.00%)              | Self::Fn(box Fn { defaultness, .. })
      9 ( 0.00%)              | Self::TyAlias(box TyAlias { defaultness, .. }) => defaultness,
      .                       Self::MacCall(..) => Defaultness::Final,
      .                   }
    300 ( 0.00%)      }
      .           }
      .           
      .           impl From<AssocItemKind> for ItemKind {
      .               fn from(assoc_item_kind: AssocItemKind) -> ItemKind {
      .                   match assoc_item_kind {
      .                       AssocItemKind::Const(a, b, c) => ItemKind::Const(a, b, c),
      .                       AssocItemKind::Fn(fn_kind) => ItemKind::Fn(fn_kind),
      .                       AssocItemKind::TyAlias(ty_alias_kind) => ItemKind::TyAlias(ty_alias_kind),
-- line 2859 ----------------------------------------
-- line 2860 ----------------------------------------
      .                       AssocItemKind::MacCall(a) => ItemKind::MacCall(a),
      .                   }
      .               }
      .           }
      .           
      .           impl TryFrom<ItemKind> for AssocItemKind {
      .               type Error = ItemKind;
      .           
     24 ( 0.00%)      fn try_from(item_kind: ItemKind) -> Result<AssocItemKind, ItemKind> {
    180 ( 0.00%)          Ok(match item_kind {
      .                       ItemKind::Const(a, b, c) => AssocItemKind::Const(a, b, c),
     33 ( 0.00%)              ItemKind::Fn(fn_kind) => AssocItemKind::Fn(fn_kind),
      3 ( 0.00%)              ItemKind::TyAlias(ty_alias_kind) => AssocItemKind::TyAlias(ty_alias_kind),
      .                       ItemKind::MacCall(a) => AssocItemKind::MacCall(a),
      .                       _ => return Err(item_kind),
      .                   })
     24 ( 0.00%)      }
      .           }
      .           
      .           /// An item in `extern` block.
      .           #[derive(Clone, Encodable, Decodable, Debug)]
      .           pub enum ForeignItemKind {
      .               /// A foreign static item (`static FOO: u8`).
      .               Static(P<Ty>, Mutability, Option<P<Expr>>),
      .               /// An foreign function.
-- line 2884 ----------------------------------------
-- line 2901 ----------------------------------------
      .                       ForeignItemKind::MacCall(a) => ItemKind::MacCall(a),
      .                   }
      .               }
      .           }
      .           
      .           impl TryFrom<ItemKind> for ForeignItemKind {
      .               type Error = ItemKind;
      .           
     20 ( 0.00%)      fn try_from(item_kind: ItemKind) -> Result<ForeignItemKind, ItemKind> {
    150 ( 0.00%)          Ok(match item_kind {
      .                       ItemKind::Static(a, b, c) => ForeignItemKind::Static(a, b, c),
     30 ( 0.00%)              ItemKind::Fn(fn_kind) => ForeignItemKind::Fn(fn_kind),
      .                       ItemKind::TyAlias(ty_alias_kind) => ForeignItemKind::TyAlias(ty_alias_kind),
      .                       ItemKind::MacCall(a) => ForeignItemKind::MacCall(a),
      .                       _ => return Err(item_kind),
      .                   })
     20 ( 0.00%)      }
      .           }
      .           
      .           pub type ForeignItem = Item<ForeignItemKind>;

 16,969 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/ast.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/lazy.rs
--------------------------------------------------------------------------------
Ir              

-- line 48 ----------------------------------------
     .                   }
     .               }
     .           }
     .           
     .           #[unstable(feature = "once_cell", issue = "74465")]
     .           impl<T: Clone> Clone for OnceCell<T> {
     .               fn clone(&self) -> OnceCell<T> {
     .                   let res = OnceCell::new();
   175 ( 0.00%)          if let Some(value) = self.get() {
     .                       match res.set(value.clone()) {
     .                           Ok(()) => (),
     .                           Err(_) => unreachable!(),
     .                       }
     .                   }
     .                   res
     .               }
     .           }
-- line 64 ----------------------------------------
-- line 80 ----------------------------------------
     .               }
     .           }
     .           
     .           impl<T> OnceCell<T> {
     .               /// Creates a new empty cell.
     .               #[unstable(feature = "once_cell", issue = "74465")]
     .               #[must_use]
     .               pub const fn new() -> OnceCell<T> {
    36 ( 0.00%)          OnceCell { inner: UnsafeCell::new(None) }
     .               }
     .           
     .               /// Gets the reference to the underlying value.
     .               ///
     .               /// Returns `None` if the cell is empty.
     .               #[unstable(feature = "once_cell", issue = "74465")]
     .               pub fn get(&self) -> Option<&T> {
     .                   // SAFETY: Safe due to `inner`'s invariant
-- line 96 ----------------------------------------
-- line 126 ----------------------------------------
     .               /// assert_eq!(cell.set(62), Err(62));
     .               ///
     .               /// assert!(cell.get().is_some());
     .               /// ```
     .               #[unstable(feature = "once_cell", issue = "74465")]
     .               pub fn set(&self, value: T) -> Result<(), T> {
     .                   // SAFETY: Safe because we cannot have overlapping mutable borrows
     .                   let slot = unsafe { &*self.inner.get() };
    82 ( 0.00%)          if slot.is_some() {
     .                       return Err(value);
     .                   }
     .           
     .                   // SAFETY: This is the only place where we set the slot, no races
     .                   // due to reentrancy/concurrency are possible, and we've
     .                   // checked that slot is currently `None`, so this write
     .                   // maintains the `inner`'s invariant.
     .                   let slot = unsafe { &mut *self.inner.get() };
   213 ( 0.00%)          *slot = Some(value);
     4 ( 0.00%)          Ok(())
     .               }
     .           
     .               /// Gets the contents of the cell, initializing it with `f`
     .               /// if the cell was empty.
     .               ///
     .               /// # Panics
     .               ///
     .               /// If `f` panics, the panic is propagated to the caller, and the cell
-- line 152 ----------------------------------------
-- line 164 ----------------------------------------
     .               ///
     .               /// let cell = OnceCell::new();
     .               /// let value = cell.get_or_init(|| 92);
     .               /// assert_eq!(value, &92);
     .               /// let value = cell.get_or_init(|| unreachable!());
     .               /// assert_eq!(value, &92);
     .               /// ```
     .               #[unstable(feature = "once_cell", issue = "74465")]
71,278 ( 0.04%)      pub fn get_or_init<F>(&self, f: F) -> &T
     .               where
     .                   F: FnOnce() -> T,
     .               {
   209 ( 0.00%)          match self.get_or_try_init(|| Ok::<T, !>(f())) {
     .                       Ok(val) => val,
     .                   }
95,025 ( 0.05%)      }
     .           
     .               /// Gets the contents of the cell, initializing it with `f` if
     .               /// the cell was empty. If the cell was empty and `f` failed, an
     .               /// error is returned.
     .               ///
     .               /// # Panics
     .               ///
     .               /// If `f` panics, the panic is propagated to the caller, and the cell
-- line 187 ----------------------------------------
-- line 206 ----------------------------------------
     .               /// assert_eq!(value, Ok(&92));
     .               /// assert_eq!(cell.get(), Some(&92))
     .               /// ```
     .               #[unstable(feature = "once_cell", issue = "74465")]
     .               pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>
     .               where
     .                   F: FnOnce() -> Result<T, E>,
     .               {
23,893 ( 0.01%)          if let Some(val) = self.get() {
     .                       return Ok(val);
     .                   }
     .                   /// Avoid inlining the initialization closure into the common path that fetches
     .                   /// the already initialized value
     .                   #[cold]
   322 ( 0.00%)          fn outlined_call<F, T, E>(f: F) -> Result<T, E>
     .                   where
     .                       F: FnOnce() -> Result<T, E>,
     .                   {
    25 ( 0.00%)              f()
   294 ( 0.00%)          }
   115 ( 0.00%)          let val = outlined_call(f)?;
     .                   // Note that *some* forms of reentrant initialization might lead to
     .                   // UB (see `reentrant_init` test). I believe that just removing this
     .                   // `assert`, while keeping `set/get` would be sound, but it seems
     .                   // better to panic, rather than to silently use an old value.
     2 ( 0.00%)          assert!(self.set(val).is_ok(), "reentrant init");
     .                   Ok(self.get().unwrap())
     .               }
     .           
     .               /// Consumes the cell, returning the wrapped value.
     .               ///
     .               /// Returns `None` if the cell was empty.
     .               ///
     .               /// # Examples
-- line 239 ----------------------------------------

    72 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/lazy.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 71 ----------------------------------------
      .               fn default() -> FxHasher {
      .                   FxHasher { hash: 0 }
      .               }
      .           }
      .           
      .           impl FxHasher {
      .               #[inline]
      .               fn add_to_hash(&mut self, i: usize) {
126,642 ( 0.07%)          self.hash = self.hash.rotate_left(5).bitxor(i).wrapping_mul(K);
      .               }
      .           }
      .           
      .           impl Hasher for FxHasher {
      .               #[inline]
    802 ( 0.00%)      fn write(&mut self, mut bytes: &[u8]) {
      .                   #[cfg(target_pointer_width = "32")]
      .                   let read_usize = |bytes: &[u8]| u32::from_ne_bytes(bytes[..4].try_into().unwrap());
      .                   #[cfg(target_pointer_width = "64")]
      .                   let read_usize = |bytes: &[u8]| u64::from_ne_bytes(bytes[..8].try_into().unwrap());
      .           
 57,548 ( 0.03%)          let mut hash = FxHasher { hash: self.hash };
      .                   assert!(size_of::<usize>() <= 8);
727,664 ( 0.40%)          while bytes.len() >= size_of::<usize>() {
      .                       hash.add_to_hash(read_usize(bytes) as usize);
      .                       bytes = &bytes[size_of::<usize>()..];
      .                   }
114,216 ( 0.06%)          if (size_of::<usize>() > 4) && (bytes.len() >= 4) {
      .                       hash.add_to_hash(u32::from_ne_bytes(bytes[..4].try_into().unwrap()) as usize);
      .                       bytes = &bytes[4..];
      .                   }
114,216 ( 0.06%)          if (size_of::<usize>() > 2) && bytes.len() >= 2 {
      .                       hash.add_to_hash(u16::from_ne_bytes(bytes[..2].try_into().unwrap()) as usize);
      .                       bytes = &bytes[2..];
      .                   }
127,974 ( 0.07%)          if (size_of::<usize>() > 1) && bytes.len() >= 1 {
 29,166 ( 0.02%)              hash.add_to_hash(bytes[0] as usize);
      .                   }
  1,462 ( 0.00%)          self.hash = hash.hash;
    802 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn write_u8(&mut self, i: u8) {
     16 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u16(&mut self, i: u16) {
     58 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u32(&mut self, i: u32) {
120,644 ( 0.07%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[cfg(target_pointer_width = "32")]
      .               #[inline]
      .               fn write_u64(&mut self, i: u64) {
      .                   self.add_to_hash(i as usize);
      .                   self.add_to_hash((i >> 32) as usize);
      .               }
-- line 131 ----------------------------------------

      1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir               

-- line 23 ----------------------------------------
      .           use std::cmp::Ordering;
      .           use std::marker::PhantomData;
      .           use std::ops::Range;
      .           use ty::util::IntTypeExt;
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
      .           #[derive(HashStable, TypeFoldable, Lift)]
      .           pub struct TypeAndMut<'tcx> {
    791 ( 0.00%)      pub ty: Ty<'tcx>,
  3,955 ( 0.00%)      pub mutbl: hir::Mutability,
      .           }
      .           
      .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
      .           #[derive(HashStable)]
      .           /// A "free" region `fr` can be interpreted as "some region
      .           /// at least as big as the scope `fr.scope`".
      .           pub struct FreeRegion {
    566 ( 0.00%)      pub scope: DefId,
  1,221 ( 0.00%)      pub bound_region: BoundRegionKind,
      .           }
      .           
  8,010 ( 0.00%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
      .           #[derive(HashStable)]
      .           pub enum BoundRegionKind {
      .               /// An anonymous region parameter for a given fn (&T)
    244 ( 0.00%)      BrAnon(u32),
      .           
      .               /// Named region parameters for functions (a in &'a T)
      .               ///
      .               /// The `DefId` is needed to distinguish free regions in
      .               /// the event of shadowing.
      8 ( 0.00%)      BrNamed(DefId, Symbol),
      .           
      .               /// Anonymous region for the implicit env pointer parameter
      .               /// to a closure
      .               BrEnv,
      .           }
      .           
     72 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
      .           #[derive(HashStable)]
      .           pub struct BoundRegion {
  1,615 ( 0.00%)      pub var: BoundVar,
  1,411 ( 0.00%)      pub kind: BoundRegionKind,
      .           }
      .           
      .           impl BoundRegionKind {
      .               pub fn is_named(&self) -> bool {
      .                   match *self {
      .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
      .                       _ => false,
      .                   }
      .               }
      .           }
      .           
      .           /// Defines the kinds of types.
      .           ///
      .           /// N.B., if you change this, you'll probably want to change the corresponding
      .           /// AST structure in `rustc_ast/src/ast.rs` as well.
457,549 ( 0.25%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
      .           #[derive(HashStable)]
      .           #[rustc_diagnostic_item = "TyKind"]
      .           pub enum TyKind<'tcx> {
      .               /// The primitive boolean type. Written as `bool`.
      .               Bool,
      .           
      .               /// The primitive character type; holds a Unicode scalar value
      .               /// (a non-surrogate code point). Written as `char`.
-- line 89 ----------------------------------------
-- line 99 ----------------------------------------
      .               Float(ty::FloatTy),
      .           
      .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
      .               ///
      .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
      .               /// That is, even after substitution it is possible that there are type
      .               /// variables. This happens when the `Adt` corresponds to an ADT
      .               /// definition and not a concrete use of it.
 40,049 ( 0.02%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
      .           
      .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
      .               Foreign(DefId),
      .           
      .               /// The pointee of a string slice. Written as `str`.
      .               Str,
      .           
      .               /// An array with the given length. Written as `[T; n]`.
      9 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
      .           
      .               /// The pointee of an array slice. Written as `[T]`.
      .               Slice(Ty<'tcx>),
      .           
      .               /// A raw pointer. Written as `*mut T` or `*const T`
      .               RawPtr(TypeAndMut<'tcx>),
      .           
      .               /// A reference; a pointer with an associated lifetime. Written as
      .               /// `&'a mut T` or `&'a T`.
 29,570 ( 0.02%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
      .           
      .               /// The anonymous type of a function declaration/definition. Each
      .               /// function has a unique type, which is output (for a function
      .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
      .               ///
      .               /// For example the type of `bar` here:
      .               ///
      .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
      .               ///
      .               /// ```rust
      .               /// fn foo() -> i32 { 1 }
      .               /// let bar: fn() -> i32 = foo;
      .               /// ```
      .               FnPtr(PolyFnSig<'tcx>),
      .           
      .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
    575 ( 0.00%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
      .           
      .               /// The anonymous type of a closure. Used to represent the type of
      .               /// `|a| a`.
      .               Closure(DefId, SubstsRef<'tcx>),
      .           
      .               /// The anonymous type of a generator. Used to represent the type of
      .               /// `|a| yield a`.
      .               Generator(DefId, SubstsRef<'tcx>, hir::Movability),
-- line 159 ----------------------------------------
-- line 180 ----------------------------------------
      .               /// The substitutions are for the generics of the function in question.
      .               /// After typeck, the concrete type can be found in the `types` map.
      .               Opaque(DefId, SubstsRef<'tcx>),
      .           
      .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
      .               Param(ParamTy),
      .           
      .               /// Bound type variable, used only when preparing a trait query.
    108 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
      .           
      .               /// A placeholder type - universally quantified higher-ranked type.
      .               Placeholder(ty::PlaceholderType),
      .           
      .               /// A type variable used during type checking.
      .               Infer(InferTy),
      .           
      .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 330 ----------------------------------------
      .               pub closure_kind_ty: T,
      .               pub closure_sig_as_fn_ptr_ty: T,
      .               pub tupled_upvars_ty: T,
      .           }
      .           
      .           impl<'tcx> ClosureSubsts<'tcx> {
      .               /// Construct `ClosureSubsts` from `ClosureSubstsParts`, containing `Substs`
      .               /// for the closure parent, alongside additional closure-specific components.
      8 ( 0.00%)      pub fn new(
      .                   tcx: TyCtxt<'tcx>,
      .                   parts: ClosureSubstsParts<'tcx, Ty<'tcx>>,
      .               ) -> ClosureSubsts<'tcx> {
      .                   ClosureSubsts {
      .                       substs: tcx.mk_substs(
     16 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
     32 ( 0.00%)                      [parts.closure_kind_ty, parts.closure_sig_as_fn_ptr_ty, parts.tupled_upvars_ty]
      .                                   .iter()
      .                                   .map(|&ty| ty.into()),
      .                           ),
      .                       ),
      .                   }
     16 ( 0.00%)      }
      .           
      .               /// Divides the closure substs into their respective components.
      .               /// The ordering assumed here must match that used by `ClosureSubsts::new` above.
    136 ( 0.00%)      fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {
      .                   match self.substs[..] {
    962 ( 0.00%)              [
    274 ( 0.00%)                  ref parent_substs @ ..,
    279 ( 0.00%)                  closure_kind_ty,
    133 ( 0.00%)                  closure_sig_as_fn_ptr_ty,
    205 ( 0.00%)                  tupled_upvars_ty,
    544 ( 0.00%)              ] => ClosureSubstsParts {
      .                           parent_substs,
      .                           closure_kind_ty,
      .                           closure_sig_as_fn_ptr_ty,
      .                           tupled_upvars_ty,
      .                       },
      .                       _ => bug!("closure substs missing synthetics"),
      .                   }
    408 ( 0.00%)      }
      .           
      .               /// Returns `true` only if enough of the synthetic types are known to
      .               /// allow using all of the methods on `ClosureSubsts` without panicking.
      .               ///
      .               /// Used primarily by `ty::print::pretty` to be able to handle closure
      .               /// types that haven't had their synthetic types substituted in.
      .               pub fn is_valid(self) -> bool {
      .                   self.substs.len() >= 3
-- line 378 ----------------------------------------
-- line 383 ----------------------------------------
      .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
      .                   self.split().parent_substs
      .               }
      .           
      .               /// Returns an iterator over the list of types of captured paths by the closure.
      .               /// In case there was a type error in figuring out the types of the captured path, an
      .               /// empty iterator is returned.
      .               #[inline]
     36 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
     54 ( 0.00%)          match self.tupled_upvars_ty().kind() {
      .                       TyKind::Error(_) => None,
     36 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
      .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
      .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
      .                   }
      .                   .into_iter()
      .                   .flatten()
     24 ( 0.00%)      }
      .           
      .               /// Returns the tuple type representing the upvars for this closure.
      .               #[inline]
      .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
    600 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
      .               }
      .           
      .               /// Returns the closure kind for this closure; may return a type
      .               /// variable during inference. To get the closure kind during
      .               /// inference, use `infcx.closure_kind(substs)`.
     54 ( 0.00%)      pub fn kind_ty(self) -> Ty<'tcx> {
      .                   self.split().closure_kind_ty.expect_ty()
    108 ( 0.00%)      }
      .           
      .               /// Returns the `fn` pointer type representing the closure signature for this
      .               /// closure.
      .               // FIXME(eddyb) this should be unnecessary, as the shallowly resolved
      .               // type is known at the time of the creation of `ClosureSubsts`,
      .               // see `rustc_typeck::check::closure`.
      .               pub fn sig_as_fn_ptr_ty(self) -> Ty<'tcx> {
      .                   self.split().closure_sig_as_fn_ptr_ty.expect_ty()
      .               }
      .           
      .               /// Returns the closure kind for this closure; only usable outside
      .               /// of an inference context, because in that context we know that
      .               /// there are no type variables.
      .               ///
      .               /// If you have an inference context, use `infcx.closure_kind()`.
      4 ( 0.00%)      pub fn kind(self) -> ty::ClosureKind {
      4 ( 0.00%)          self.kind_ty().to_opt_closure_kind().unwrap()
      8 ( 0.00%)      }
      .           
      .               /// Extracts the signature from the closure.
     64 ( 0.00%)      pub fn sig(self) -> ty::PolyFnSig<'tcx> {
      .                   let ty = self.sig_as_fn_ptr_ty();
    128 ( 0.00%)          match ty.kind() {
    256 ( 0.00%)              ty::FnPtr(sig) => *sig,
      .                       _ => bug!("closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}", ty.kind()),
      .                   }
    192 ( 0.00%)      }
      .           }
      .           
      .           /// Similar to `ClosureSubsts`; see the above documentation for more.
      .           #[derive(Copy, Clone, Debug, TypeFoldable)]
      .           pub struct GeneratorSubsts<'tcx> {
      .               pub substs: SubstsRef<'tcx>,
      .           }
      .           
-- line 448 ----------------------------------------
-- line 676 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> UpvarSubsts<'tcx> {
      .               /// Returns an iterator over the list of types of captured paths by the closure/generator.
      .               /// In case there was a type error in figuring out the types of the captured path, an
      .               /// empty iterator is returned.
      .               #[inline]
      .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
     24 ( 0.00%)          let tupled_tys = match self {
     32 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
      .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
      .                   };
      .           
     52 ( 0.00%)          match tupled_tys.kind() {
      .                       TyKind::Error(_) => None,
     44 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
      .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
      .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
      .                   }
      .                   .into_iter()
      .                   .flatten()
      .               }
      .           
      .               #[inline]
      .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
     40 ( 0.00%)          match self {
     50 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
      .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
      .                   }
      .               }
      .           }
      .           
      .           /// An inline const is modeled like
      .           ///
      .           ///     const InlineConst<'l0...'li, T0...Tj, R>: R;
-- line 710 ----------------------------------------
-- line 760 ----------------------------------------
      .               }
      .           
      .               /// Returns the type of this inline const.
      .               pub fn ty(self) -> Ty<'tcx> {
      .                   self.split().ty.expect_ty()
      .               }
      .           }
      .           
    628 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
    469 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub enum ExistentialPredicate<'tcx> {
      .               /// E.g., `Iterator`.
      .               Trait(ExistentialTraitRef<'tcx>),
      .               /// E.g., `Iterator::Item = T`.
      .               Projection(ExistentialProjection<'tcx>),
      .               /// E.g., `Send`.
      6 ( 0.00%)      AutoTrait(DefId),
      .           }
      .           
      .           impl<'tcx> ExistentialPredicate<'tcx> {
      .               /// Compares via an ordering that will not change if modules are reordered or other changes are
      .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
     30 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
      .                   use self::ExistentialPredicate::*;
     32 ( 0.00%)          match (*self, *other) {
      .                       (Trait(_), Trait(_)) => Ordering::Equal,
      .                       (Projection(ref a), Projection(ref b)) => {
      .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
      .                       }
      .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
      .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
      .                       }
      .                       (Trait(_), _) => Ordering::Less,
      .                       (Projection(_), Trait(_)) => Ordering::Greater,
      .                       (Projection(_), _) => Ordering::Less,
      .                       (AutoTrait(_), _) => Ordering::Greater,
      .                   }
     36 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
     63 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
      .                   use crate::ty::ToPredicate;
     35 ( 0.00%)          match self.skip_binder() {
      .                       ExistentialPredicate::Trait(tr) => {
      .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
      .                       }
      .                       ExistentialPredicate::Projection(p) => {
      .                           self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)
      .                       }
      .                       ExistentialPredicate::AutoTrait(did) => {
      .                           let trait_ref = self.rebind(ty::TraitRef {
      .                               def_id: did,
      .                               substs: tcx.mk_substs_trait(self_ty, &[]),
      .                           });
      .                           trait_ref.without_const().to_predicate(tcx)
      .                       }
      .                   }
     56 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
      .               /// Returns the "principal `DefId`" of this set of existential predicates.
      .               ///
      .               /// A Rust trait object type consists (in addition to a lifetime bound)
      .               /// of a set of trait bounds, which are separated into any number
      .               /// of auto-trait bounds, and at most one non-auto-trait bound. The
-- line 826 ----------------------------------------
-- line 840 ----------------------------------------
      .               ///
      .               /// It is also possible to have a "trivial" trait object that
      .               /// consists only of auto traits, with no principal - for example,
      .               /// `dyn Send + Sync`. In that case, the set of auto-trait bounds
      .               /// is `{Send, Sync}`, while there is no principal. These trait objects
      .               /// have a "trivial" vtable consisting of just the size, alignment,
      .               /// and destructor.
      .               pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {
     27 ( 0.00%)          self[0]
     27 ( 0.00%)              .map_bound(|this| match this {
      .                           ExistentialPredicate::Trait(tr) => Some(tr),
      .                           _ => None,
      .                       })
      .                       .transpose()
      .               }
      .           
      7 ( 0.00%)      pub fn principal_def_id(&self) -> Option<DefId> {
      .                   self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)
     14 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn projection_bounds<'a>(
      .                   &'a self,
      .               ) -> impl Iterator<Item = ty::Binder<'tcx, ExistentialProjection<'tcx>>> + 'a {
      .                   self.iter().filter_map(|predicate| {
      .                       predicate
      .                           .map_bound(|pred| match pred {
-- line 866 ----------------------------------------
-- line 886 ----------------------------------------
      .           ///     T: Foo<U>
      .           ///
      .           /// This would be represented by a trait-reference where the `DefId` is the
      .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
      .           /// and `U` as parameter 1.
      .           ///
      .           /// Trait references also appear in object types like `Foo<U>`, but in
      .           /// that case the `Self` parameter is absent from the substitutions.
  9,705 ( 0.01%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
 22,936 ( 0.01%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct TraitRef<'tcx> {
     10 ( 0.00%)      pub def_id: DefId,
 16,645 ( 0.01%)      pub substs: SubstsRef<'tcx>,
      .           }
      .           
      .           impl<'tcx> TraitRef<'tcx> {
     40 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
      .                   TraitRef { def_id, substs }
    160 ( 0.00%)      }
      .           
      .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
      .               /// are the parameters defined on trait.
    171 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
     76 ( 0.00%)          ty::Binder::dummy(TraitRef {
      .                       def_id,
    114 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
      .                   })
    152 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn self_ty(&self) -> Ty<'tcx> {
      .                   self.substs.type_at(0)
      .               }
      .           
     72 ( 0.00%)      pub fn from_method(
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_id: DefId,
      .                   substs: SubstsRef<'tcx>,
      .               ) -> ty::TraitRef<'tcx> {
      .                   let defs = tcx.generics_of(trait_id);
      .           
      9 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
     99 ( 0.00%)      }
      .           }
      .           
      .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
      .           
      .           impl<'tcx> PolyTraitRef<'tcx> {
      .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
      .                   self.map_bound_ref(|tr| tr.self_ty())
      .               }
      .           
      .               pub fn def_id(&self) -> DefId {
     96 ( 0.00%)          self.skip_binder().def_id
     32 ( 0.00%)      }
      .           
     66 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
    132 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
      .                       trait_ref,
      .                       constness: ty::BoundConstness::NotConst,
      .                       polarity: ty::ImplPolarity::Positive,
      .                   })
     66 ( 0.00%)      }
      .           }
      .           
      .           /// An existential reference to a trait, where `Self` is erased.
      .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
      .           ///
      .           ///     exists T. T: Trait<'a, 'b, X, Y>
      .           ///
      .           /// The substitutions don't include the erased `Self`, only trait
      .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
     32 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    236 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct ExistentialTraitRef<'tcx> {
     36 ( 0.00%)      pub def_id: DefId,
    276 ( 0.00%)      pub substs: SubstsRef<'tcx>,
      .           }
      .           
      .           impl<'tcx> ExistentialTraitRef<'tcx> {
      4 ( 0.00%)      pub fn erase_self_ty(
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_ref: ty::TraitRef<'tcx>,
      .               ) -> ty::ExistentialTraitRef<'tcx> {
      .                   // Assert there is a Self.
      .                   trait_ref.substs.type_at(0);
      .           
      .                   ty::ExistentialTraitRef {
      .                       def_id: trait_ref.def_id,
      .                       substs: tcx.intern_substs(&trait_ref.substs[1..]),
      .                   }
      4 ( 0.00%)      }
      .           
      .               /// Object types don't have a self type specified. Therefore, when
      .               /// we convert the principal trait-ref into a normal trait-ref,
      .               /// you must give *some* self type. A common choice is `mk_err()`
      .               /// or some placeholder type.
      .               pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::TraitRef<'tcx> {
      .                   // otherwise the escaping vars would be captured by the binder
      .                   // debug_assert!(!self_ty.has_escaping_bound_vars());
-- line 985 ----------------------------------------
-- line 999 ----------------------------------------
      .               /// we convert the principal trait-ref into a normal trait-ref,
      .               /// you must give *some* self type. A common choice is `mk_err()`
      .               /// or some placeholder type.
      .               pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
      .                   self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
      .               }
      .           }
      .           
  1,914 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
      .           #[derive(HashStable)]
      .           pub enum BoundVariableKind {
      .               Ty(BoundTyKind),
      .               Region(BoundRegionKind),
      .               Const,
      .           }
      .           
      .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
-- line 1015 ----------------------------------------
-- line 1016 ----------------------------------------
      .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
      .           /// (which would be represented by the type `PolyTraitRef ==
      .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
      .           /// erase, or otherwise "discharge" these bound vars, we change the
      .           /// type from `Binder<'tcx, T>` to just `T` (see
      .           /// e.g., `liberate_late_bound_regions`).
      .           ///
      .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
    657 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
 12,823 ( 0.01%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
      .           
      .           impl<'tcx, T> Binder<'tcx, T>
      .           where
      .               T: TypeFoldable<'tcx>,
      .           {
      .               /// Wraps `value` in a binder, asserting that `value` does not
      .               /// contain any bound vars that would be bound by the
      .               /// binder. This is commonly used to 'inject' a value T into a
      .               /// different binding level.
  1,260 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
  3,934 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
  9,006 ( 0.00%)          Binder(value, ty::List::empty())
  1,256 ( 0.00%)      }
      .           
      .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
      .                   if cfg!(debug_assertions) {
      .                       let mut validator = ValidateBoundVars::new(vars);
      .                       value.visit_with(&mut validator);
      .                   }
  1,521 ( 0.00%)          Binder(value, vars)
      .               }
      .           }
      .           
      .           impl<'tcx, T> Binder<'tcx, T> {
      .               /// Skips the binder and returns the "bound" value. This is a
      .               /// risky thing to do because it's easy to get confused about
      .               /// De Bruijn indices and the like. It is usually better to
      .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
      .               /// accounting.
      .               ///
      .               /// Some examples where `skip_binder` is reasonable:
      .               ///
      .               /// - extracting the `DefId` from a PolyTraitRef;
      .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
      .               ///   a type parameter `X`, since the type `X` does not reference any regions
      .               pub fn skip_binder(self) -> T {
 43,724 ( 0.02%)          self.0
      .               }
      .           
      .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
      9 ( 0.00%)          self.1
      .               }
      .           
      .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
    223 ( 0.00%)          Binder(&self.0, self.1)
      .               }
      .           
      .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
      .               where
      .                   F: FnOnce(&T) -> U,
      .               {
      .                   let value = f(&self.0);
      .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
      .           
      .               pub fn map_bound_ref<F, U: TypeFoldable<'tcx>>(&self, f: F) -> Binder<'tcx, U>
      .               where
      .                   F: FnOnce(&T) -> U,
      .               {
      .                   self.as_ref().map_bound(f)
      .               }
      .           
     64 ( 0.00%)      pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
      .               where
      .                   F: FnOnce(T) -> U,
      .               {
  2,675 ( 0.00%)          let value = f(self.0);
      .                   if cfg!(debug_assertions) {
      .                       let mut validator = ValidateBoundVars::new(self.1);
      .                       value.visit_with(&mut validator);
      .                   }
  8,888 ( 0.00%)          Binder(value, self.1)
     64 ( 0.00%)      }
      .           
      .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
      .               where
      .                   F: FnOnce(T) -> Result<U, E>,
      .               {
      .                   let value = f(self.0)?;
      .                   if cfg!(debug_assertions) {
      .                       let mut validator = ValidateBoundVars::new(self.1);
      .                       value.visit_with(&mut validator);
      .                   }
    345 ( 0.00%)          Ok(Binder(value, self.1))
      .               }
      .           
      .               /// Wraps a `value` in a binder, using the same bound variables as the
      .               /// current `Binder`. This should not be used if the new value *changes*
      .               /// the bound variables. Note: the (old or new) value itself does not
      .               /// necessarily need to *name* all the bound variables.
      .               ///
      .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
      .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
      .               where
      .                   U: TypeFoldable<'tcx>,
      .               {
      .                   if cfg!(debug_assertions) {
      .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
      .                       value.visit_with(&mut validator);
      .                   }
    595 ( 0.00%)          Binder(value, self.1)
      .               }
      .           
      .               /// Unwraps and returns the value within, but only if it contains
      .               /// no bound vars at all. (In other words, if this binder --
      .               /// and indeed any enclosing binder -- doesn't bind anything at
      .               /// all.) Otherwise, returns `None`.
      .               ///
      .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
      .               /// binder, but permits late-bound vars bound by enclosing
      .               /// binders, but that would require adjusting the debruijn
      .               /// indices, and given the shallow binding structure we often use,
      .               /// would not be that useful.)
      .               pub fn no_bound_vars(self) -> Option<T>
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
  6,065 ( 0.00%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
     15 ( 0.00%)      }
      .           
      .               /// Splits the contents into two things that share the same binder
      .               /// level as the original, returning two distinct binders.
      .               ///
      .               /// `f` should consider bound regions at depth 1 to be free, and
      .               /// anything it produces with bound regions at depth 1 will be
      .               /// bound in the resulting return values.
      .               pub fn split<U, V, F>(self, f: F) -> (Binder<'tcx, U>, Binder<'tcx, V>)
-- line 1160 ----------------------------------------
-- line 1170 ----------------------------------------
      .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
      .                   let bound_vars = self.1;
      .                   self.0.map(|v| Binder(v, bound_vars))
      .               }
      .           }
      .           
      .           /// Represents the projection of an associated type. In explicit UFCS
      .           /// form this would be written `<T as Trait<..>>::N`.
     41 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
  1,335 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct ProjectionTy<'tcx> {
      .               /// The parameters of the associated item.
    364 ( 0.00%)      pub substs: SubstsRef<'tcx>,
      .           
      .               /// The `DefId` of the `TraitItem` for the associated type `N`.
      .               ///
      .               /// Note that this is not the `DefId` of the `TraitRef` containing this
      .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
    413 ( 0.00%)      pub item_def_id: DefId,
      .           }
      .           
      .           impl<'tcx> ProjectionTy<'tcx> {
    567 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
    162 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
    648 ( 0.00%)      }
      .           
      .               /// Extracts the underlying trait reference and own substs from this projection.
      .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
      .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
     28 ( 0.00%)      pub fn trait_ref_and_own_substs(
      .                   &self,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
     12 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
      .                   let trait_generics = tcx.generics_of(def_id);
     20 ( 0.00%)          (
      .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
      .                       &self.substs[trait_generics.count()..],
      .                   )
     36 ( 0.00%)      }
      .           
      .               /// Extracts the underlying trait reference from this projection.
      .               /// For example, if this is a projection of `<T as Iterator>::Item`,
      .               /// then this function would return a `T: Iterator` trait reference.
      .               ///
      .               /// WARNING: This will drop the substs for generic associated types
      .               /// consider calling [Self::trait_ref_and_own_substs] to get those
      .               /// as well.
    657 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
     73 ( 0.00%)          let def_id = self.trait_def_id(tcx);
     73 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
    803 ( 0.00%)      }
      .           
    131 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
    393 ( 0.00%)          self.substs.type_at(0)
    262 ( 0.00%)      }
      .           }
      .           
      .           #[derive(Copy, Clone, Debug, TypeFoldable)]
      .           pub struct GenSig<'tcx> {
      .               pub resume_ty: Ty<'tcx>,
      .               pub yield_ty: Ty<'tcx>,
      .               pub return_ty: Ty<'tcx>,
      .           }
-- line 1233 ----------------------------------------
-- line 1235 ----------------------------------------
      .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
      .           
      .           /// Signature of a function type, which we have arbitrarily
      .           /// decided to use to refer to the input/output types.
      .           ///
      .           /// - `inputs`: is the list of arguments and their modes.
      .           /// - `output`: is the return type.
      .           /// - `c_variadic`: indicates whether this is a C-variadic function.
  2,589 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    923 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct FnSig<'tcx> {
    163 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
  1,362 ( 0.00%)      pub c_variadic: bool,
    263 ( 0.00%)      pub unsafety: hir::Unsafety,
  1,460 ( 0.00%)      pub abi: abi::Abi,
      .           }
      .           
      .           impl<'tcx> FnSig<'tcx> {
  1,008 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
  4,710 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
  2,016 ( 0.00%)      }
      .           
    713 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
  5,456 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
  1,426 ( 0.00%)      }
      .           
      .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
      .               // method.
      .               fn fake() -> FnSig<'tcx> {
      .                   FnSig {
      .                       inputs_and_output: List::empty(),
      .                       c_variadic: false,
      .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
      .               }
      .           }
      .           
      .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
      .           
      .           impl<'tcx> PolyFnSig<'tcx> {
      .               #[inline]
      .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
    187 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
      .               }
      .               #[inline]
      .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
    354 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
      .               }
      .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
      .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
     29 ( 0.00%)      }
      .               #[inline]
      .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
    344 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
      .               }
      .               pub fn c_variadic(&self) -> bool {
     58 ( 0.00%)          self.skip_binder().c_variadic
     29 ( 0.00%)      }
      .               pub fn unsafety(&self) -> hir::Unsafety {
    164 ( 0.00%)          self.skip_binder().unsafety
     82 ( 0.00%)      }
      .               pub fn abi(&self) -> abi::Abi {
    620 ( 0.00%)          self.skip_binder().abi
    155 ( 0.00%)      }
      .           }
      .           
      .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
      .           
      8 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
      .           #[derive(HashStable)]
      .           pub struct ParamTy {
      .               pub index: u32,
      .               pub name: Symbol,
      .           }
      .           
      .           impl<'tcx> ParamTy {
      8 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
      .                   ParamTy { index, name }
      4 ( 0.00%)      }
      .           
      .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
      .                   ParamTy::new(def.index, def.name)
      .               }
      .           
      .               #[inline]
      .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
      .                   tcx.mk_ty_param(self.index, self.name)
      .               }
      .           }
      .           
      .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
      .           #[derive(HashStable)]
      .           pub struct ParamConst {
     50 ( 0.00%)      pub index: u32,
     50 ( 0.00%)      pub name: Symbol,
      .           }
      .           
      .           impl ParamConst {
      .               pub fn new(index: u32, name: Symbol) -> ParamConst {
      .                   ParamConst { index, name }
      .               }
      .           
      .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
      .           /// the inference variable is supposed to satisfy the relation
      .           /// *for every value of the placeholder region*. To ensure that doesn't
      .           /// happen, you can use `leak_check`. This is more clearly explained
      .           /// by the [rustc dev guide].
      .           ///
      .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
      .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
      .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
124,742 ( 0.07%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
     16 ( 0.00%)  pub enum RegionKind {
      .               /// Region bound in a type or fn declaration which will be
      .               /// substituted 'early' -- that is, at the same time when type
      .               /// parameters are substituted.
      .               ReEarlyBound(EarlyBoundRegion),
      .           
      .               /// Region bound in a function scope, which will be substituted when the
      .               /// function is called.
  2,822 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
      .           
      .               /// When checking a function body, the types of all arguments and so forth
      .               /// that refer to bound region parameters are modified to refer to free
      .               /// region parameters.
      .               ReFree(FreeRegion),
      .           
      .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
      .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
      .               /// regions visible from `U`, but not less than regions not visible
      .               /// from `U`.
      .               ReEmpty(ty::UniverseIndex),
      .           
      .               /// Erased region, used by trait selection, in MIR and during codegen.
      .               ReErased,
      .           }
      .           
  8,652 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
      .           pub struct EarlyBoundRegion {
     14 ( 0.00%)      pub def_id: DefId,
  3,226 ( 0.00%)      pub index: u32,
  2,467 ( 0.00%)      pub name: Symbol,
      .           }
      .           
      .           /// A **`const`** **v**ariable **ID**.
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
      .           pub struct ConstVid<'tcx> {
     34 ( 0.00%)      pub index: u32,
      .               pub phantom: PhantomData<&'tcx ()>,
      .           }
      .           
      .           rustc_index::newtype_index! {
      .               /// A **region** (lifetime) **v**ariable **ID**.
      .               pub struct RegionVid {
      .                   DEBUG_FORMAT = custom,
      .               }
-- line 1504 ----------------------------------------
-- line 1513 ----------------------------------------
      .           rustc_index::newtype_index! {
      .               pub struct BoundVar { .. }
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
      .           #[derive(HashStable)]
      .           pub struct BoundTy {
      .               pub var: BoundVar,
    108 ( 0.00%)      pub kind: BoundTyKind,
      .           }
      .           
  1,872 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
      .           #[derive(HashStable)]
      .           pub enum BoundTyKind {
      .               Anon,
      .               Param(Symbol),
      .           }
      .           
      .           impl From<BoundVar> for BoundTy {
      .               fn from(var: BoundVar) -> Self {
-- line 1532 ----------------------------------------
-- line 1616 ----------------------------------------
      .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
      .                       RegionKind::ReEmpty(_) => false,
      .                       RegionKind::ReErased => false,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_late_bound(&self) -> bool {
     78 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_placeholder(&self) -> bool {
      .                   matches!(*self, ty::RePlaceholder(..))
      .               }
      .           
      .               #[inline]
      .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
  2,744 ( 0.00%)          match *self {
      .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               pub fn type_flags(&self) -> TypeFlags {
      .                   let mut flags = TypeFlags::empty();
      .           
  9,158 ( 0.01%)          match *self {
      .                       ty::ReVar(..) => {
      .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
      .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
      .                           flags = flags | TypeFlags::HAS_RE_INFER;
      .                       }
      .                       ty::RePlaceholder(..) => {
      .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
      .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
      .                       ty::ReErased => {
      .                           flags = flags | TypeFlags::HAS_RE_ERASED;
      .                       }
      .                   }
      .           
      .                   debug!("type_flags({:?}) = {:?}", self, flags);
      .           
      .                   flags
    195 ( 0.00%)      }
      .           
      .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
      .               /// For example, consider the regions in this snippet of code:
      .               ///
      .               /// ```
      .               /// impl<'a> Foo {
      .               ///      ^^ -- early bound, declared on an impl
      .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
      .           
      .               #[inline(always)]
      .               pub fn flags(&self) -> TypeFlags {
      .                   self.flags
      .               }
      .           
      .               #[inline]
      .               pub fn is_unit(&self) -> bool {
    112 ( 0.00%)          match self.kind() {
     21 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
      .                       _ => false,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_never(&self) -> bool {
  1,142 ( 0.00%)          matches!(self.kind(), Never)
      .               }
      .           
      .               #[inline]
      .               pub fn is_primitive(&self) -> bool {
      .                   self.kind().is_primitive()
      .               }
      .           
      .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn is_ref(&self) -> bool {
      .                   matches!(self.kind(), Ref(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_ty_var(&self) -> bool {
  1,982 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
      .               }
      .           
      .               #[inline]
      .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
  1,248 ( 0.00%)          match self.kind() {
    171 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_ty_infer(&self) -> bool {
     24 ( 0.00%)          matches!(self.kind(), Infer(_))
      .               }
      .           
      .               #[inline]
      .               pub fn is_phantom_data(&self) -> bool {
      2 ( 0.00%)          if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
      .               }
      .           
      .               #[inline]
      .               pub fn is_bool(&self) -> bool {
      .                   *self.kind() == Bool
      .               }
      .           
      .               /// Returns `true` if this type is a `str`.
-- line 1775 ----------------------------------------
-- line 1791 ----------------------------------------
      .                   match self.kind() {
      .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
      .                       _ => false,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_array(&self) -> bool {
      4 ( 0.00%)          matches!(self.kind(), Array(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_simd(&self) -> bool {
     18 ( 0.00%)          match self.kind() {
      .                       Adt(def, _) => def.repr.simd(),
      .                       _ => false,
      .                   }
      .               }
      .           
      .               pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
      .                   match self.kind() {
      .                       Array(ty, _) | Slice(ty) => ty,
-- line 1812 ----------------------------------------
-- line 1838 ----------------------------------------
      .                           }
      .                       }
      .                       _ => bug!("`simd_size_and_type` called on invalid type"),
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_region_ptr(&self) -> bool {
      5 ( 0.00%)          matches!(self.kind(), Ref(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_mutable_ptr(&self) -> bool {
      .                   matches!(
      .                       self.kind(),
      .                       RawPtr(TypeAndMut { mutbl: hir::Mutability::Mut, .. })
      .                           | Ref(_, _, hir::Mutability::Mut)
-- line 1854 ----------------------------------------
-- line 1861 ----------------------------------------
      .                   match self.kind() {
      .                       Ref(_, _, mutability) => Some(*mutability),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_unsafe_ptr(&self) -> bool {
    120 ( 0.00%)          matches!(self.kind(), RawPtr(_))
      .               }
      .           
      .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
      .               #[inline]
      .               pub fn is_any_ptr(&self) -> bool {
      .                   self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
      .               }
      .           
      .               #[inline]
      .               pub fn is_box(&self) -> bool {
  1,514 ( 0.00%)          match self.kind() {
    246 ( 0.00%)              Adt(def, _) => def.is_box(),
      .                       _ => false,
      .                   }
      .               }
      .           
      .               /// Panics if called on any type other than `Box<T>`.
      .               pub fn boxed_ty(&self) -> Ty<'tcx> {
      .                   match self.kind() {
      .                       Adt(def, substs) if def.is_box() => substs.type_at(0),
-- line 1889 ----------------------------------------
-- line 1891 ----------------------------------------
      .                   }
      .               }
      .           
      .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
      .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
      .               /// contents are abstract to rustc.)
      .               #[inline]
      .               pub fn is_scalar(&self) -> bool {
      9 ( 0.00%)          matches!(
     22 ( 0.00%)              self.kind(),
      .                       Bool | Char
      .                           | Int(_)
      .                           | Float(_)
      .                           | Uint(_)
      .                           | FnDef(..)
      .                           | FnPtr(_)
      .                           | RawPtr(_)
      .                           | Infer(IntVar(_) | FloatVar(_))
      .                   )
      .               }
      .           
      .               /// Returns `true` if this type is a floating point type.
      .               #[inline]
      .               pub fn is_floating_point(&self) -> bool {
      4 ( 0.00%)          matches!(self.kind(), Float(_) | Infer(FloatVar(_)))
      .               }
      .           
      .               #[inline]
      .               pub fn is_trait(&self) -> bool {
      .                   matches!(self.kind(), Dynamic(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_enum(&self) -> bool {
      .                   matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
      .               }
      .           
      .               #[inline]
      .               pub fn is_union(&self) -> bool {
    169 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
      .               }
      .           
      .               #[inline]
      .               pub fn is_closure(&self) -> bool {
     16 ( 0.00%)          matches!(self.kind(), Closure(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_generator(&self) -> bool {
     18 ( 0.00%)          matches!(self.kind(), Generator(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_integral(&self) -> bool {
    143 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
      .               }
      .           
      .               #[inline]
      .               pub fn is_fresh_ty(&self) -> bool {
      .                   matches!(self.kind(), Infer(FreshTy(_)))
      .               }
      .           
      .               #[inline]
      .               pub fn is_fresh(&self) -> bool {
    311 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
      .               }
      .           
      .               #[inline]
      .               pub fn is_char(&self) -> bool {
      .                   matches!(self.kind(), Char)
      .               }
      .           
      .               #[inline]
-- line 1963 ----------------------------------------
-- line 1967 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn is_signed(&self) -> bool {
      .                   matches!(self.kind(), Int(_))
      .               }
      .           
      .               #[inline]
      .               pub fn is_ptr_sized_integral(&self) -> bool {
      6 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
      .               }
      .           
      .               #[inline]
      .               pub fn has_concrete_skeleton(&self) -> bool {
      .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
      .               }
      .           
      .               /// Returns the type and mutability of `*ty`.
      .               ///
      .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
      .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
    259 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
  1,466 ( 0.00%)          match self.kind() {
    100 ( 0.00%)              Adt(def, _) if def.is_box() => {
      .                           Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
      .                       }
    714 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
      8 ( 0.00%)              RawPtr(mt) if explicit => Some(*mt),
      .                       _ => None,
      .                   }
    518 ( 0.00%)      }
      .           
      .               /// Returns the type of `ty[i]`.
      .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
      .                   match self.kind() {
      .                       Array(ty, _) | Slice(ty) => Some(ty),
      .                       _ => None,
      .                   }
      .               }
      .           
  2,160 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
  1,080 ( 0.00%)          match self.kind() {
    810 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
      .                       FnPtr(f) => *f,
      .                       Error(_) => {
      .                           // ignore errors (#54954)
      .                           ty::Binder::dummy(FnSig::fake())
      .                       }
      .                       Closure(..) => bug!(
      .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
      .                       ),
      .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
      .                   }
  2,430 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn is_fn(&self) -> bool {
      9 ( 0.00%)          matches!(self.kind(), FnDef(..) | FnPtr(_))
      .               }
      .           
      .               #[inline]
      .               pub fn is_fn_ptr(&self) -> bool {
      .                   matches!(self.kind(), FnPtr(_))
      .               }
      .           
      .               #[inline]
      .               pub fn is_impl_trait(&self) -> bool {
      .                   matches!(self.kind(), Opaque(..))
      .               }
      .           
      .               #[inline]
      .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
  1,409 ( 0.00%)          match self.kind() {
      .                       Adt(adt, _) => Some(adt),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               /// Iterates over tuple fields.
      .               /// Panics when called on anything but a tuple.
     32 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
     92 ( 0.00%)          match self.kind() {
     88 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
      .                       _ => bug!("tuple_fields called on non-tuple"),
      .                   }
     64 ( 0.00%)      }
      .           
      .               /// Get the `i`-th element of a tuple.
      .               /// Panics when called on anything but a tuple.
     24 ( 0.00%)      pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
     48 ( 0.00%)          match self.kind() {
     48 ( 0.00%)              Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
      .                       _ => bug!("tuple_fields called on non-tuple"),
      .                   }
     48 ( 0.00%)      }
      .           
      .               /// If the type contains variants, returns the valid range of variant indices.
      .               //
      .               // FIXME: This requires the optimized MIR in the case of generators.
      .               #[inline]
      .               pub fn variant_range(&self, tcx: TyCtxt<'tcx>) -> Option<Range<VariantIdx>> {
      .                   match self.kind() {
      .                       TyKind::Adt(adt, _) => Some(adt.variant_range()),
-- line 2068 ----------------------------------------
-- line 2095 ----------------------------------------
      .                       TyKind::Generator(def_id, substs, _) => {
      .                           Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
      .                       }
      .                       _ => None,
      .                   }
      .               }
      .           
      .               /// Returns the type of the discriminant of this type.
    180 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
     90 ( 0.00%)          match self.kind() {
    144 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
      .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
      .           
      .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
      .                           let assoc_items = tcx.associated_item_def_ids(
      .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
      .                           );
      .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
      .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
      .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
      .           
      .                       ty::Bound(..)
      .                       | ty::Placeholder(_)
      .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
      .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
      .                       }
      .                   }
    144 ( 0.00%)      }
      .           
      .               /// Returns the type of metadata for (potentially fat) pointers to this type.
      .               pub fn ptr_metadata_ty(
      .                   &'tcx self,
      .                   tcx: TyCtxt<'tcx>,
      .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
      .               ) -> Ty<'tcx> {
      .                   let tail = tcx.struct_tail_with_normalize(self, normalize);
-- line 2151 ----------------------------------------
-- line 2200 ----------------------------------------
      .               /// function converts such a special type into the closure
      .               /// kind. To go the other way, use
      .               /// `tcx.closure_kind_ty(closure_kind)`.
      .               ///
      .               /// Note that during type checking, we use an inference variable
      .               /// to represent the closure kind, because it has not yet been
      .               /// inferred. Once upvar inference (in `rustc_typeck/src/check/upvar.rs`)
      .               /// is complete, that type variable will be unified.
    148 ( 0.00%)      pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {
    296 ( 0.00%)          match self.kind() {
    296 ( 0.00%)              Int(int_ty) => match int_ty {
      .                           ty::IntTy::I8 => Some(ty::ClosureKind::Fn),
      .                           ty::IntTy::I16 => Some(ty::ClosureKind::FnMut),
      .                           ty::IntTy::I32 => Some(ty::ClosureKind::FnOnce),
      .                           _ => bug!("cannot convert type `{:?}` to a closure kind", self),
      .                       },
      .           
      .                       // "Bound" types appear in canonical queries when the
      .                       // closure type is not yet known
      .                       Bound(..) | Infer(_) => None,
      .           
      .                       Error(_) => Some(ty::ClosureKind::Fn),
      .           
      .                       _ => bug!("cannot convert type `{:?}` to a closure kind", self),
      .                   }
    148 ( 0.00%)      }
      .           
      .               /// Fast path helper for testing if a type is `Sized`.
      .               ///
      .               /// Returning true means the type is known to be sized. Returning
      .               /// `false` means nothing -- could be sized, might not be.
      .               ///
      .               /// Note that we could never rely on the fact that a type such as `[_]` is
      .               /// trivially `!Sized` because we could be in a type environment with a
      .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
      .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
      .               /// this method doesn't return `Option<bool>`.
  4,167 ( 0.00%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
  2,778 ( 0.00%)          match self.kind() {
      .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
      .                       | ty::Uint(_)
      .                       | ty::Int(_)
      .                       | ty::Bool
      .                       | ty::Float(_)
      .                       | ty::FnDef(..)
      .                       | ty::FnPtr(_)
      .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
      .                       | ty::GeneratorWitness(..)
      .                       | ty::Array(..)
      .                       | ty::Closure(..)
      .                       | ty::Never
      .                       | ty::Error(_) => true,
      .           
      .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
      .           
     40 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
      .           
    258 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
      .           
      .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
      .           
      .                       ty::Infer(ty::TyVar(_)) => false,
      .           
      .                       ty::Bound(..)
      .                       | ty::Placeholder(..)
      .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
      .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
      .                       }
      .                   }
  4,167 ( 0.00%)      }
      .           }
      .           
      .           /// Extra information about why we ended up with a particular variance.
      .           /// This is only used to add more information to error messages, and
      .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
      .           /// may lead to confusing notes in error messages, it will never cause
      .           /// a miscompilation or unsoundness.
      .           ///
      .           /// When in doubt, use `VarianceDiagInfo::default()`
     18 ( 0.00%)  #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]
      .           pub enum VarianceDiagInfo<'tcx> {
      .               /// No additional information - this is the default.
      .               /// We will not add any additional information to error messages.
      .               #[default]
      .               None,
      .               /// We switched our variance because a generic argument occurs inside
      .               /// the invariant generic argument of another type.
      .               Invariant {
-- line 2290 ----------------------------------------
-- line 2295 ----------------------------------------
      .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
      .                   param_index: u32,
      .               },
      .           }
      .           
      .           impl<'tcx> VarianceDiagInfo<'tcx> {
      .               /// Mirrors `Variance::xform` - used to 'combine' the existing
      .               /// and new `VarianceDiagInfo`s when our variance changes.
  1,448 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
      .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
  2,172 ( 0.00%)          match self {
      .                       VarianceDiagInfo::None => other,
      .                       VarianceDiagInfo::Invariant { .. } => self,
      .                   }
    724 ( 0.00%)      }
      .           }

474,101 ( 0.26%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs
--------------------------------------------------------------------------------
Ir              

-- line 42 ----------------------------------------
     .           /// `stack_size` bytes.
     .           ///
     .           /// The closure `f` is guaranteed to run on a stack with at least `red_zone` bytes, and it will be
     .           /// run on the current stack if there's space available.
     .           #[inline(always)]
     .           pub fn maybe_grow<R, F: FnOnce() -> R>(red_zone: usize, stack_size: usize, callback: F) -> R {
     .               // if we can't guess the remaining stack (unsupported on some platforms) we immediately grow
     .               // the stack and then cache the new stack size (which we do know now because we allocated it.
48,230 ( 0.03%)      let enough_space = match remaining_stack() {
     .                   Some(remaining) => remaining >= red_zone,
     .                   None => false,
     .               };
61,323 ( 0.03%)      if enough_space {
 2,455 ( 0.00%)          callback()
     .               } else {
     .                   grow(stack_size, callback)
     .               }
     .           }
     .           
     .           /// Always creates a new stack for the passed closure to run on.
     .           /// The closure will still be on the same thread as the caller of `grow`.
     .           /// This will allocate a new stack with at least `stack_size` bytes.
-- line 63 ----------------------------------------
-- line 82 ----------------------------------------
     .               _grow(stack_size, dyn_callback);
     .               ret.unwrap()
     .           }
     .           
     .           /// Queries the amount of remaining stack as interpreted by this library.
     .           ///
     .           /// This function will return the amount of stack space left which will be used
     .           /// to determine whether a stack switch should be made or not.
40,882 ( 0.02%)  pub fn remaining_stack() -> Option<usize> {
     .               let current_ptr = current_stack_ptr();
40,882 ( 0.02%)      get_stack_limit().map(|limit| current_ptr - limit)
81,764 ( 0.04%)  }
     .           
     .           psm_stack_information! (
     .               yes {
     .                   fn current_stack_ptr() -> usize {
40,882 ( 0.02%)              psm::stack_pointer() as usize
     .                   }
     .               }
     .               no {
     .                   #[inline(always)]
     .                   fn current_stack_ptr() -> usize {
     .                       unsafe {
     .                           let mut x = std::mem::MaybeUninit::<u8>::uninit();
     .                           // Unlikely to be ever exercised. As a fallback we execute a volatile read to a
-- line 106 ----------------------------------------
-- line 111 ----------------------------------------
     .                           x.as_ptr() as usize
     .                       }
     .                   }
     .               }
     .           );
     .           
     .           thread_local! {
     .               static STACK_LIMIT: Cell<Option<usize>> = Cell::new(unsafe {
     1 ( 0.00%)          guess_os_stack_limit()
     .               })
     .           }
     .           
     .           #[inline(always)]
     .           fn get_stack_limit() -> Option<usize> {
     .               STACK_LIMIT.with(|s| s.get())
     .           }
     .           
-- line 127 ----------------------------------------
-- line 403 ----------------------------------------
     .                       VirtualQuery(
     .                           psm::stack_pointer() as *const _,
     .                           mi.as_mut_ptr(),
     .                           std::mem::size_of::<QueryT>() as SIZE_T,
     .                       );
     .                       Some(mi.assume_init().AllocationBase as usize + get_thread_stack_guarantee() + 0x1000)
     .                   }
     .               } else if #[cfg(any(target_os = "linux", target_os="solaris", target_os = "netbsd"))] {
     2 ( 0.00%)          unsafe fn guess_os_stack_limit() -> Option<usize> {
     .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
     4 ( 0.00%)              assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
     7 ( 0.00%)              assert_eq!(libc::pthread_getattr_np(libc::pthread_self(),
     .                                                           attr.as_mut_ptr()), 0);
     1 ( 0.00%)              let mut stackaddr = std::ptr::null_mut();
     4 ( 0.00%)              let mut stacksize = 0;
     4 ( 0.00%)              assert_eq!(libc::pthread_attr_getstack(
     .                           attr.as_ptr(), &mut stackaddr, &mut stacksize
     .                       ), 0);
     4 ( 0.00%)              assert_eq!(libc::pthread_attr_destroy(attr.as_mut_ptr()), 0);
     1 ( 0.00%)              Some(stackaddr as usize)
     3 ( 0.00%)          }
     .               } else if #[cfg(any(target_os = "freebsd", target_os = "dragonfly"))] {
     .                   unsafe fn guess_os_stack_limit() -> Option<usize> {
     .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
     .                       assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
     .                       assert_eq!(libc::pthread_attr_get_np(libc::pthread_self(), attr.as_mut_ptr()), 0);
     .                       let mut stackaddr = std::ptr::null_mut();
     .                       let mut stacksize = 0;
     .                       assert_eq!(libc::pthread_attr_getstack(
-- line 431 ----------------------------------------

22,629 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs
--------------------------------------------------------------------------------
Ir              

-- line 26 ----------------------------------------
     .           pub struct UnmatchedBrace {
     .               pub expected_delim: token::DelimToken,
     .               pub found_delim: Option<token::DelimToken>,
     .               pub found_span: Span,
     .               pub unclosed_span: Option<Span>,
     .               pub candidate_span: Option<Span>,
     .           }
     .           
    28 ( 0.00%)  crate fn parse_token_trees<'a>(
     .               sess: &'a ParseSess,
     .               src: &'a str,
     .               start_pos: BytePos,
     .               override_span: Option<Span>,
     .           ) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
     .               StringReader { sess, start_pos, pos: start_pos, end_src_index: src.len(), src, override_span }
     .                   .into_token_trees()
    18 ( 0.00%)  }
     .           
     .           struct StringReader<'a> {
     .               sess: &'a ParseSess,
     .               /// Initial position, read-only.
     .               start_pos: BytePos,
     .               /// The absolute offset within the source_map of the current character.
     .               pos: BytePos,
     .               /// Stop reading src at this index.
-- line 50 ----------------------------------------
-- line 51 ----------------------------------------
     .               end_src_index: usize,
     .               /// Source text to tokenize.
     .               src: &'a str,
     .               override_span: Option<Span>,
     .           }
     .           
     .           impl<'a> StringReader<'a> {
     .               fn mk_sp(&self, lo: BytePos, hi: BytePos) -> Span {
 5,057 ( 0.00%)          self.override_span.unwrap_or_else(|| Span::with_root_ctxt(lo, hi))
     .               }
     .           
     .               /// Returns the next token, and info about preceding whitespace, if any.
26,355 ( 0.01%)      fn next_token(&mut self) -> (Spacing, Token) {
     .                   let mut spacing = Spacing::Joint;
     .           
     .                   // Skip `#!` at the start of the file
 7,530 ( 0.00%)          let start_src_index = self.src_index(self.pos);
11,295 ( 0.01%)          let text: &str = &self.src[start_src_index..self.end_src_index];
     .                   let is_beginning_of_file = self.pos == self.start_pos;
 3,765 ( 0.00%)          if is_beginning_of_file {
     8 ( 0.00%)              if let Some(shebang_len) = rustc_lexer::strip_shebang(text) {
     .                           self.pos = self.pos + BytePos::from_usize(shebang_len);
     .                           spacing = Spacing::Alone;
     .                       }
     .                   }
     .           
     .                   // Skip trivial (whitespace & comments) tokens
     .                   loop {
 6,621 ( 0.00%)              let start_src_index = self.src_index(self.pos);
15,579 ( 0.01%)              let text: &str = &self.src[start_src_index..self.end_src_index];
     .           
 5,193 ( 0.00%)              if text.is_empty() {
     .                           let span = self.mk_sp(self.pos, self.pos);
    10 ( 0.00%)                  return (spacing, Token::new(token::Eof, span));
     .                       }
     .           
15,573 ( 0.01%)              let token = rustc_lexer::first_token(text);
     .           
10,382 ( 0.01%)              let start = self.pos;
 5,191 ( 0.00%)              self.pos = self.pos + BytePos::from_usize(token.len);
     .           
     .                       debug!("next_token: {:?}({:?})", token.kind, self.str_from(start));
     .           
41,680 ( 0.02%)              match self.cook_lexer_token(token.kind, start) {
30,104 ( 0.02%)                  Some(kind) => {
     .                               let span = self.mk_sp(start, self.pos);
22,578 ( 0.01%)                      return (spacing, Token::new(kind, span));
     .                           }
     .                           None => spacing = Spacing::Alone,
     .                       }
     .                   }
33,885 ( 0.02%)      }
     .           
     .               /// Report a fatal lexical error with a given span.
     .               fn fatal_span(&self, sp: Span, m: &str) -> FatalError {
     .                   self.sess.span_diagnostic.span_fatal(sp, m)
     .               }
     .           
     .               /// Report a lexical error with a given span.
     .               fn err_span(&self, sp: Span, m: &str) {
-- line 110 ----------------------------------------
-- line 130 ----------------------------------------
     .               ) -> DiagnosticBuilder<'a> {
     .                   self.sess
     .                       .span_diagnostic
     .                       .struct_span_fatal(self.mk_sp(from_pos, to_pos), &format!("{}: {}", m, escaped_char(c)))
     .               }
     .           
     .               /// Detect usages of Unicode codepoints changing the direction of the text on screen and loudly
     .               /// complain about it.
   280 ( 0.00%)      fn lint_unicode_text_flow(&self, start: BytePos) {
     .                   // Opening delimiter of the length 2 is not included into the comment text.
     .                   let content_start = start + BytePos(2);
     .                   let content = self.str_from(content_start);
     .                   if contains_text_flow_control_chars(content) {
     .                       let span = self.mk_sp(start, self.pos);
     .                       self.sess.buffer_lint_with_diagnostic(
     .                           &TEXT_DIRECTION_CODEPOINT_IN_COMMENT,
     .                           span,
     .                           ast::CRATE_NODE_ID,
     .                           "unicode codepoint changing visible direction of text present in comment",
     .                           BuiltinLintDiagnostics::UnicodeTextFlow(span, content.to_string()),
     .                       );
     .                   }
   320 ( 0.00%)      }
     .           
     .               /// Turns simple `rustc_lexer::TokenKind` enum into a rich
     .               /// `rustc_ast::TokenKind`. This turns strings into interned
     .               /// symbols and runs additional validation.
     .               fn cook_lexer_token(&self, token: rustc_lexer::TokenKind, start: BytePos) -> Option<TokenKind> {
25,955 ( 0.01%)          Some(match token {
    78 ( 0.00%)              rustc_lexer::TokenKind::LineComment { doc_style } => {
     .                           // Skip non-doc comments
   270 ( 0.00%)                  let doc_style = if let Some(doc_style) = doc_style {
     .                               doc_style
     .                           } else {
     .                               self.lint_unicode_text_flow(start);
     .                               return None;
     .                           };
     .           
     .                           // Opening delimiter of the length 3 is not included into the symbol.
     .                           let content_start = start + BytePos(3);
     .                           let content = self.str_from(content_start);
   190 ( 0.00%)                  self.cook_doc_comment(content_start, content, CommentKind::Line, doc_style)
     .                       }
     .                       rustc_lexer::TokenKind::BlockComment { doc_style, terminated } => {
     .                           if !terminated {
     .                               let msg = match doc_style {
     .                                   Some(_) => "unterminated block doc-comment",
     .                                   None => "unterminated block comment",
     .                               };
     .                               let last_bpos = self.pos;
-- line 179 ----------------------------------------
-- line 198 ----------------------------------------
     .                           let content_end = self.pos - BytePos(if terminated { 2 } else { 0 });
     .                           let content = self.str_from_to(content_start, content_end);
     .                           self.cook_doc_comment(content_start, content, CommentKind::Block, doc_style)
     .                       }
     .                       rustc_lexer::TokenKind::Whitespace => return None,
     .                       rustc_lexer::TokenKind::Ident
     .                       | rustc_lexer::TokenKind::RawIdent
     .                       | rustc_lexer::TokenKind::UnknownPrefix => {
 5,160 ( 0.00%)                  let is_raw_ident = token == rustc_lexer::TokenKind::RawIdent;
 6,450 ( 0.00%)                  let is_unknown_prefix = token == rustc_lexer::TokenKind::UnknownPrefix;
     .                           let mut ident_start = start;
 2,580 ( 0.00%)                  if is_raw_ident {
     .                               ident_start = ident_start + BytePos(2);
     .                           }
 3,870 ( 0.00%)                  if is_unknown_prefix {
     .                               self.report_unknown_prefix(start);
     .                           }
 6,450 ( 0.00%)                  let sym = nfc_normalize(self.str_from(ident_start));
     .                           let span = self.mk_sp(start, self.pos);
 5,160 ( 0.00%)                  self.sess.symbol_gallery.insert(sym, span);
 2,580 ( 0.00%)                  if is_raw_ident {
     .                               if !sym.can_be_raw() {
     .                                   self.err_span(span, &format!("`{}` cannot be a raw identifier", sym));
     .                               }
     .                               self.sess.raw_identifier_spans.borrow_mut().push(span);
     .                           }
 9,030 ( 0.00%)                  token::Ident(sym, is_raw_ident)
     .                       }
     .                       rustc_lexer::TokenKind::InvalidIdent
     .                           // Do not recover an identifier with emoji if the codepoint is a confusable
     .                           // with a recoverable substitution token, like `➖`.
     .                           if UNICODE_ARRAY
     .                               .iter()
     .                               .find(|&&(c, _, _)| {
     .                                   let sym = self.str_from(start);
-- line 232 ----------------------------------------
-- line 234 ----------------------------------------
     .                               })
     .                               .is_none() =>
     .                       {
     .                           let sym = nfc_normalize(self.str_from(start));
     .                           let span = self.mk_sp(start, self.pos);
     .                           self.sess.bad_unicode_identifiers.borrow_mut().entry(sym).or_default().push(span);
     .                           token::Ident(sym, false)
     .                       }
   944 ( 0.00%)              rustc_lexer::TokenKind::Literal { kind, suffix_start } => {
     .                           let suffix_start = start + BytePos(suffix_start as u32);
     .                           let (kind, symbol) = self.cook_lexer_literal(start, suffix_start, kind);
   177 ( 0.00%)                  let suffix = if suffix_start < self.pos {
     .                               let string = self.str_from(suffix_start);
     .                               if string == "_" {
     .                                   self.sess
     .                                       .span_diagnostic
     .                                       .struct_span_warn(
     .                                           self.mk_sp(suffix_start, self.pos),
     .                                           "underscore literal suffix is not allowed",
     .                                       )
-- line 253 ----------------------------------------
-- line 264 ----------------------------------------
     .                                       .emit();
     .                                   None
     .                               } else {
     .                                   Some(Symbol::intern(string))
     .                               }
     .                           } else {
     .                               None
     .                           };
   472 ( 0.00%)                  token::Literal(token::Lit { kind, symbol, suffix })
     .                       }
    10 ( 0.00%)              rustc_lexer::TokenKind::Lifetime { starts_with_number } => {
     .                           // Include the leading `'` in the real identifier, for macro
     .                           // expansion purposes. See #12512 for the gory details of why
     .                           // this is necessary.
     .                           let lifetime_name = self.str_from(start);
     5 ( 0.00%)                  if starts_with_number {
     .                               self.err_span_(start, self.pos, "lifetimes cannot start with a number");
     .                           }
    15 ( 0.00%)                  let ident = Symbol::intern(lifetime_name);
    20 ( 0.00%)                  token::Lifetime(ident)
     .                       }
     .                       rustc_lexer::TokenKind::Semi => token::Semi,
     .                       rustc_lexer::TokenKind::Comma => token::Comma,
     .                       rustc_lexer::TokenKind::Dot => token::Dot,
     .                       rustc_lexer::TokenKind::OpenParen => token::OpenDelim(token::Paren),
     .                       rustc_lexer::TokenKind::CloseParen => token::CloseDelim(token::Paren),
     .                       rustc_lexer::TokenKind::OpenBrace => token::OpenDelim(token::Brace),
     .                       rustc_lexer::TokenKind::CloseBrace => token::CloseDelim(token::Brace),
-- line 291 ----------------------------------------
-- line 324 ----------------------------------------
     .                               err.help("source files must contain UTF-8 encoded text, unexpected null bytes might occur when a different encoding is used");
     .                           }
     .                           err.emit();
     .                           token?
     .                       }
     .                   })
     .               }
     .           
   456 ( 0.00%)      fn cook_doc_comment(
     .                   &self,
     .                   content_start: BytePos,
     .                   content: &str,
     .                   comment_kind: CommentKind,
     .                   doc_style: DocStyle,
     .               ) -> TokenKind {
    38 ( 0.00%)          if content.contains('\r') {
     .                       for (idx, _) in content.char_indices().filter(|&(_, c)| c == '\r') {
     .                           self.err_span_(
     .                               content_start + BytePos(idx as u32),
     .                               content_start + BytePos(idx as u32 + 1),
     .                               match comment_kind {
     .                                   CommentKind::Line => "bare CR not allowed in doc-comment",
     .                                   CommentKind::Block => "bare CR not allowed in block doc-comment",
     .                               },
-- line 347 ----------------------------------------
-- line 349 ----------------------------------------
     .                       }
     .                   }
     .           
     .                   let attr_style = match doc_style {
     .                       DocStyle::Outer => AttrStyle::Outer,
     .                       DocStyle::Inner => AttrStyle::Inner,
     .                   };
     .           
   114 ( 0.00%)          token::DocComment(comment_kind, attr_style, Symbol::intern(content))
   570 ( 0.00%)      }
     .           
     .               fn cook_lexer_literal(
     .                   &self,
     .                   start: BytePos,
     .                   suffix_start: BytePos,
     .                   kind: rustc_lexer::LiteralKind,
     .               ) -> (token::LitKind, Symbol) {
     .                   // prefix means `"` or `br"` or `r###"`, ...
-- line 366 ----------------------------------------
-- line 380 ----------------------------------------
     .                               self.sess.span_diagnostic.span_fatal_with_code(
     .                                   self.mk_sp(start + BytePos(1), suffix_start),
     .                                   "unterminated byte constant",
     .                                   error_code!(E0763),
     .                               )
     .                           }
     .                           (token::Byte, Mode::Byte, 2, 1) // b' '
     .                       }
    45 ( 0.00%)              rustc_lexer::LiteralKind::Str { terminated } => {
    45 ( 0.00%)                  if !terminated {
     .                               self.sess.span_diagnostic.span_fatal_with_code(
     .                                   self.mk_sp(start, suffix_start),
     .                                   "unterminated double quote string",
     .                                   error_code!(E0765),
     .                               )
     .                           }
     .                           (token::Str, Mode::Str, 1, 1) // " "
     .                       }
-- line 397 ----------------------------------------
-- line 410 ----------------------------------------
     .                           let n = u32::from(n_hashes);
     .                           (token::StrRaw(n_hashes), Mode::RawStr, 2 + n, 1 + n) // r##" "##
     .                       }
     .                       rustc_lexer::LiteralKind::RawByteStr { n_hashes, err } => {
     .                           self.report_raw_str_error(start, err);
     .                           let n = u32::from(n_hashes);
     .                           (token::ByteStrRaw(n_hashes), Mode::RawByteStr, 3 + n, 1 + n) // br##" "##
     .                       }
    24 ( 0.00%)              rustc_lexer::LiteralKind::Int { base, empty_int } => {
    12 ( 0.00%)                  return if empty_int {
     .                               self.sess
     .                                   .span_diagnostic
     .                                   .struct_span_err_with_code(
     .                                       self.mk_sp(start, suffix_start),
     .                                       "no valid digits found for number",
     .                                       error_code!(E0768),
     .                                   )
     .                                   .emit();
     .                               (token::Integer, sym::integer(0))
     .                           } else {
     .                               self.validate_int_literal(base, start, suffix_start);
    36 ( 0.00%)                      (token::Integer, self.symbol_from_to(start, suffix_start))
     .                           };
     .                       }
     2 ( 0.00%)              rustc_lexer::LiteralKind::Float { base, empty_exponent } => {
     2 ( 0.00%)                  if empty_exponent {
     .                               self.err_span_(start, self.pos, "expected at least one digit in exponent");
     .                           }
     .           
    14 ( 0.00%)                  match base {
     .                               Base::Hexadecimal => self.err_span_(
     .                                   start,
     .                                   suffix_start,
     .                                   "hexadecimal float literal is not supported",
     .                               ),
     .                               Base::Octal => {
     .                                   self.err_span_(start, suffix_start, "octal float literal is not supported")
     .                               }
     .                               Base::Binary => {
     .                                   self.err_span_(start, suffix_start, "binary float literal is not supported")
     .                               }
     .                               _ => (),
     .                           }
     .           
     6 ( 0.00%)                  let id = self.symbol_from_to(start, suffix_start);
     .                           return (token::Float, id);
     .                       }
     .                   };
     .                   let content_start = start + BytePos(prefix_len);
     .                   let content_end = suffix_start - BytePos(postfix_len);
   135 ( 0.00%)          let id = self.symbol_from_to(content_start, content_end);
     .                   self.validate_literal_escape(mode, content_start, content_end, prefix_len, postfix_len);
     .                   (lit_kind, id)
     .               }
     .           
     .               #[inline]
     .               fn src_index(&self, pos: BytePos) -> usize {
     .                   (pos - self.start_pos).to_usize()
     .               }
     .           
     .               /// Slice of the source text from `start` up to but excluding `self.pos`,
     .               /// meaning the slice does not include the character `self.ch`.
     .               fn str_from(&self, start: BytePos) -> &str {
 8,526 ( 0.00%)          self.str_from_to(start, self.pos)
     .               }
     .           
     .               /// As symbol_from, with an explicit endpoint.
     .               fn symbol_from_to(&self, start: BytePos, end: BytePos) -> Symbol {
     .                   debug!("taking an ident from {:?} to {:?}", start, end);
   642 ( 0.00%)          Symbol::intern(self.str_from_to(start, end))
     .               }
     .           
     .               /// Slice of the source text spanning from `start` up to but excluding `end`.
 1,477 ( 0.00%)      fn str_from_to(&self, start: BytePos, end: BytePos) -> &str {
     .                   &self.src[self.src_index(start)..self.src_index(end)]
 5,908 ( 0.00%)      }
     .           
     .               fn report_raw_str_error(&self, start: BytePos, opt_err: Option<RawStrError>) {
     .                   match opt_err {
     .                       Some(RawStrError::InvalidStarter { bad_char }) => {
     .                           self.report_non_started_raw_string(start, bad_char)
     .                       }
     .                       Some(RawStrError::NoTerminator { expected, found, possible_terminator_offset }) => self
     .                           .report_unterminated_raw_string(start, expected, possible_terminator_offset, found),
-- line 493 ----------------------------------------
-- line 609 ----------------------------------------
     .               fn validate_literal_escape(
     .                   &self,
     .                   mode: Mode,
     .                   content_start: BytePos,
     .                   content_end: BytePos,
     .                   prefix_len: u32,
     .                   postfix_len: u32,
     .               ) {
   270 ( 0.00%)          let lit_content = self.str_from_to(content_start, content_end);
 4,230 ( 0.00%)          unescape::unescape_literal(lit_content, mode, &mut |range, result| {
     .                       // Here we only check for errors. The actual unescaping is done later.
   810 ( 0.00%)              if let Err(err) = result {
     .                           let span_with_quotes = self
     .                               .mk_sp(content_start - BytePos(prefix_len), content_end + BytePos(postfix_len));
     .                           let (start, end) = (range.start as u32, range.end as u32);
     .                           let lo = content_start + BytePos(start);
     .                           let hi = lo + BytePos(end - start);
     .                           let span = self.mk_sp(lo, hi);
     .                           emit_unescape_error(
     .                               &self.sess.span_diagnostic,
-- line 628 ----------------------------------------
-- line 629 ----------------------------------------
     .                               lit_content,
     .                               span_with_quotes,
     .                               span,
     .                               mode,
     .                               range,
     .                               err,
     .                           );
     .                       }
 3,645 ( 0.00%)          });
     .               }
     .           
     .               fn validate_int_literal(&self, base: Base, content_start: BytePos, content_end: BytePos) {
    48 ( 0.00%)          let base = match base {
     .                       Base::Binary => 2,
     .                       Base::Octal => 8,
     .                       _ => return,
     .                   };
     .                   let s = self.str_from_to(content_start + BytePos(2), content_end);
     .                   for (idx, c) in s.char_indices() {
     .                       let idx = idx as u32;
     .                       if c != '_' && c.to_digit(base).is_none() {
-- line 649 ----------------------------------------
-- line 650 ----------------------------------------
     .                           let lo = content_start + BytePos(2 + idx);
     .                           let hi = content_start + BytePos(2 + idx + c.len_utf8() as u32);
     .                           self.err_span_(lo, hi, &format!("invalid digit for a base {} literal", base));
     .                       }
     .                   }
     .               }
     .           }
     .           
11,610 ( 0.01%)  pub fn nfc_normalize(string: &str) -> Symbol {
     .               use unicode_normalization::{is_nfc_quick, IsNormalized, UnicodeNormalization};
 2,580 ( 0.00%)      match is_nfc_quick(string.chars()) {
12,900 ( 0.01%)          IsNormalized::Yes => Symbol::intern(string),
     .                   _ => {
     .                       let normalized_str: String = string.chars().nfc().collect();
     .                       Symbol::intern(&normalized_str)
     .                   }
     .               }
     .           }

16,791 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir              

-- line 27 ----------------------------------------
     .           impl CacheEntry {
     .               #[inline]
     .               fn update(
     .                   &mut self,
     .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
     .                   pos: BytePos,
     .                   time_stamp: usize,
     .               ) {
   851 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
   266 ( 0.00%)              self.file = file;
   394 ( 0.00%)              self.file_index = file_idx;
     .                   }
     .           
   499 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
     .                   let line_bounds = self.file.line_bounds(line_index);
 1,438 ( 0.00%)          self.line_number = line_index + 1;
 2,114 ( 0.00%)          self.line = line_bounds;
     .                   self.touch(time_stamp);
     .               }
     .           
     .               #[inline]
     .               fn touch(&mut self, time_stamp: usize) {
10,063 ( 0.01%)          self.time_stamp = time_stamp;
     .               }
     .           }
     .           
     .           #[derive(Clone)]
     .           pub struct CachingSourceMapView<'sm> {
     .               source_map: &'sm SourceMap,
     .               line_cache: [CacheEntry; 3],
     .               time_stamp: usize,
     .           }
     .           
     .           impl<'sm> CachingSourceMapView<'sm> {
   198 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
     .                   let files = source_map.files();
    99 ( 0.00%)          let first_file = files[0].clone();
     .                   let entry = CacheEntry {
     .                       time_stamp: 0,
     .                       line_number: 0,
     .                       line: BytePos(0)..BytePos(0),
     .                       file: first_file,
     .                       file_index: 0,
     .                   };
     .           
   495 ( 0.00%)          CachingSourceMapView {
     .                       source_map,
   693 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
     .                       time_stamp: 0,
     .                   }
   396 ( 0.00%)      }
     .           
     .               pub fn byte_pos_to_line_and_col(
     .                   &mut self,
     .                   pos: BytePos,
     .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
     .                   self.time_stamp += 1;
     .           
     .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
     .                   };
     .           
     .                   let cache_entry = &mut self.line_cache[oldest];
     .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
     .           
     .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
     .               }
     .           
37,576 ( 0.02%)      pub fn span_data_to_lines_and_cols(
     .                   &mut self,
     .                   span_data: &SpanData,
     .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
21,472 ( 0.01%)          self.time_stamp += 1;
     .           
     .                   // Check if lo and hi are in the cached lines.
 5,368 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
 5,368 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
     .           
 9,404 ( 0.01%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
     .                       // Cache hit for span lo and hi. Check if they belong to the same file.
     .                       let result = {
 9,390 ( 0.01%)                  let lo = &self.line_cache[lo_cache_idx as usize];
     .                           let hi = &self.line_cache[hi_cache_idx as usize];
     .           
28,170 ( 0.02%)                  if lo.file_index != hi.file_index {
     .                               return None;
     .                           }
     .           
     .                           (
 9,390 ( 0.01%)                      lo.file.clone(),
     .                               lo.line_number,
     .                               span_data.lo - lo.line.start,
 4,695 ( 0.00%)                      hi.line_number,
     .                               span_data.hi - hi.line.start,
     .                           )
     .                       };
     .           
 4,695 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
 4,695 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
     .           
18,780 ( 0.01%)              return Some(result);
     .                   }
     .           
     .                   // No cache hit or cache hit for only one of span lo and hi.
 1,332 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
     .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
     .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
     .                   } else {
     .                       self.oldest_cache_entry_index()
     .                   };
     .           
     .                   // If the entry doesn't point to the correct file, get the new file and index.
     .                   // Return early if the file containing beginning of span doesn't contain end of span.
 5,356 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
   870 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
 1,044 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
     .                           return None;
     .                       }
     .           
   696 ( 0.00%)              Some(new_file_and_idx)
     .                   } else {
     .                       let file = &self.line_cache[oldest].file;
 1,497 ( 0.00%)              if !file_contains(&file, span_data.hi) {
     .                           return None;
     .                       }
     .           
 1,497 ( 0.00%)              None
     .                   };
     .           
     .                   // Update the cache entries.
 3,365 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
     .                       // Oldest cache entry is for span_data.lo line.
     .                       (-1, -1) => {
     .                           let lo = &mut self.line_cache[oldest];
     .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
     .           
 1,731 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
     .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
     .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
     .                               let hi = &mut self.line_cache[next_oldest];
     .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
     .                               (oldest, next_oldest)
     .                           } else {
     .                               (oldest, oldest)
     .                           }
     .                       }
     .                       // Oldest cache entry is for span_data.lo line.
     .                       (-1, _) => {
     .                           let lo = &mut self.line_cache[oldest];
     .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
    14 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
    21 ( 0.00%)                  hi.touch(self.time_stamp);
     .                           (oldest, hi_cache_idx as usize)
     .                       }
     .                       // Oldest cache entry is for span_data.hi line.
     .                       (_, -1) => {
     .                           let hi = &mut self.line_cache[oldest];
    89 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
   178 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
   356 ( 0.00%)                  lo.touch(self.time_stamp);
     .                           (lo_cache_idx as usize, oldest)
     .                       }
     .                       _ => {
     .                           panic!();
     .                       }
     .                   };
     .           
     .                   let lo = &self.line_cache[lo_idx];
     .                   let hi = &self.line_cache[hi_idx];
     .           
     .                   // Span lo and hi may equal line end when last line doesn't
     .                   // end in newline, hence the inclusive upper bounds below.
 1,346 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
   673 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
 1,346 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
   673 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
 3,365 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
 2,019 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
 2,019 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
     .           
 2,019 ( 0.00%)          Some((
   673 ( 0.00%)              lo.file.clone(),
     .                       lo.line_number,
     .                       span_data.lo - lo.line.start,
   673 ( 0.00%)              hi.line_number,
     .                       span_data.hi - hi.line.start,
     .                   ))
48,312 ( 0.03%)      }
     .           
     .               fn cache_entry_index(&self, pos: BytePos) -> isize {
     .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
58,681 ( 0.03%)              if cache_entry.line.contains(&pos) {
     .                           return idx as isize;
     .                       }
     .                   }
     .           
     .                   -1
     .               }
     .           
     .               fn oldest_cache_entry_index(&self) -> usize {
     .                   let mut oldest = 0;
     .           
     .                   for idx in 1..self.line_cache.len() {
 3,462 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
     .                           oldest = idx;
     .                       }
     .                   }
     .           
     .                   oldest
     .               }
     .           
     .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
     .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
     .           
     .                   for idx in 0..self.line_cache.len() {
   848 ( 0.00%)              if idx != avoid_idx
   414 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
     .                       {
     .                           oldest = idx;
     .                       }
     .                   }
     .           
     .                   oldest
     .               }
     .           
   870 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
   174 ( 0.00%)          if !self.source_map.files().is_empty() {
   348 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
     .                       let file = &self.source_map.files()[file_idx];
     .           
 1,392 ( 0.00%)              if file_contains(file, pos) {
     .                           return Some((file.clone(), file_idx));
     .                       }
     .                   }
     .           
     .                   None
   870 ( 0.00%)      }
     .           }
     .           
     .           #[inline]
     .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
     .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
     .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
     .               // purposes of converting a byte position to a line and column number, we can't come up with a
     .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

67,414 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .                   #[inline]
        .                   pub fn $fn_name(
        .                       out: &mut [::std::mem::MaybeUninit<u8>; max_leb128_len!($int_ty)],
        .                       mut value: $int_ty,
        .                   ) -> &[u8] {
        .                       let mut i = 0;
        .           
        .                       loop {
   28,689 ( 0.02%)                  if value < 0x80 {
        .                               unsafe {
   15,774 ( 0.01%)                          *out.get_unchecked_mut(i).as_mut_ptr() = value as u8;
        .                               }
        .           
   20,412 ( 0.01%)                      i += 1;
        .                               break;
        .                           } else {
        .                               unsafe {
   10,980 ( 0.01%)                          *out.get_unchecked_mut(i).as_mut_ptr() = ((value & 0x7f) | 0x80) as u8;
        .                               }
        .           
    6,489 ( 0.00%)                      value >>= 7;
        .                               i += 1;
        .                           }
        .                       }
        .           
        .                       unsafe { ::std::mem::MaybeUninit::slice_assume_init_ref(&out.get_unchecked(..i)) }
        .                   }
        .               };
        .           }
-- line 45 ----------------------------------------
-- line 53 ----------------------------------------
        .           macro_rules! impl_read_unsigned_leb128 {
        .               ($fn_name:ident, $int_ty:ty) => {
        .                   #[inline]
        .                   pub fn $fn_name(slice: &[u8], position: &mut usize) -> $int_ty {
        .                       // The first iteration of this loop is unpeeled. This is a
        .                       // performance win because this code is hot and integer values less
        .                       // than 128 are very common, typically occurring 50-80% or more of
        .                       // the time, even for u64 and u128.
1,508,480 ( 0.83%)              let byte = slice[*position];
  754,240 ( 0.41%)              *position += 1;
  754,240 ( 0.41%)              if (byte & 0x80) == 0 {
       12 ( 0.00%)                  return byte as $int_ty;
        .                       }
    1,154 ( 0.00%)              let mut result = (byte & 0x7F) as $int_ty;
        .                       let mut shift = 7;
        .                       loop {
  524,604 ( 0.29%)                  let byte = slice[*position];
  342,482 ( 0.19%)                  *position += 1;
  349,736 ( 0.19%)                  if (byte & 0x80) == 0 {
  281,125 ( 0.15%)                      result |= (byte as $int_ty) << shift;
        .                               return result;
        .                           } else {
        .                               result |= ((byte & 0x7F) as $int_ty) << shift;
        .                           }
        .                           shift += 7;
        .                       }
        .                   }
        .               };
-- line 80 ----------------------------------------

  560,397 ( 0.31%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs
--------------------------------------------------------------------------------
Ir               

-- line 72 ----------------------------------------
      .                   fn deref(&self) -> &Self::Target {
      .                       &self.0
      .                   }
      .               }
      .           
      .               impl<T> !DerefMut for MonotonicVec<T> {}
      .           }
      .           
    944 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, Copy, HashStable_Generic)]
      .           pub struct Spanned<T> {
      .               pub node: T,
      .               pub span: Span,
      .           }
      .           
      .           pub fn respan<T>(sp: Span, t: T) -> Spanned<T> {
    518 ( 0.00%)      Spanned { node: t, span: sp }
  6,121 ( 0.00%)  }
      .           
      .           pub fn dummy_spanned<T>(t: T) -> Spanned<T> {
      .               respan(DUMMY_SP, t)
      .           }
      .           
      .           // _____________________________________________________________________________
      .           // SourceFile, MultiByteChar, FileName, FileLines
      .           //
-- line 96 ----------------------------------------
-- line 103 ----------------------------------------
      .               /// Read the contents of a UTF-8 file into memory.
      .               fn read_file(&self, path: &Path) -> io::Result<String>;
      .           }
      .           
      .           /// A FileLoader that uses std::fs to load real files.
      .           pub struct RealFileLoader;
      .           
      .           impl FileLoader for RealFileLoader {
     16 ( 0.00%)      fn file_exists(&self, path: &Path) -> bool {
      .                   path.exists()
     16 ( 0.00%)      }
      .           
      6 ( 0.00%)      fn read_file(&self, path: &Path) -> io::Result<String> {
      .                   fs::read_to_string(path)
      9 ( 0.00%)      }
      .           }
      .           
      .           /// This is a [SourceFile] identifier that is used to correlate source files between
      .           /// subsequent compilation sessions (which is something we need to do during
      .           /// incremental compilation).
      .           ///
      .           /// The [StableSourceFileId] also contains the CrateNum of the crate the source
      .           /// file was originally parsed for. This way we get two separate entries in
-- line 125 ----------------------------------------
-- line 128 ----------------------------------------
      .           /// at the point where we discover that there's a local use of the file in
      .           /// addition to the upstream one, we might already have made decisions based on
      .           /// the assumption that it's an upstream file. Treating the two files as
      .           /// different has no real downsides.
      .           #[derive(Copy, Clone, PartialEq, Eq, Hash, Encodable, Decodable, Debug)]
      .           pub struct StableSourceFileId {
      .               // A hash of the source file's FileName. This is hash so that it's size
      .               // is more predictable than if we included the actual FileName value.
     54 ( 0.00%)      pub file_name_hash: u64,
      .           
      .               // The CrateNum of the crate this source file was originally parsed for.
      .               // We cannot include this information in the hash because at the time
      .               // of hashing we don't have the context to map from the CrateNum's numeric
      .               // value to a StableCrateId.
      .               pub cnum: CrateNum,
      .           }
      .           
      .           // FIXME: we need a more globally consistent approach to the problem solved by
      .           // StableSourceFileId, perhaps built atop source_file.name_hash.
      .           impl StableSourceFileId {
      .               pub fn new(source_file: &SourceFile) -> StableSourceFileId {
  1,154 ( 0.00%)          StableSourceFileId::new_from_name(&source_file.name, source_file.cnum)
      .               }
      .           
  2,895 ( 0.00%)      fn new_from_name(name: &FileName, cnum: CrateNum) -> StableSourceFileId {
      .                   let mut hasher = StableHasher::new();
    579 ( 0.00%)          name.hash(&mut hasher);
      .                   StableSourceFileId { file_name_hash: hasher.finish(), cnum }
  3,474 ( 0.00%)      }
      .           }
      .           
      .           // _____________________________________________________________________________
      .           // SourceMap
      .           //
      .           
      .           #[derive(Default)]
      .           pub(super) struct SourceMapFiles {
-- line 164 ----------------------------------------
-- line 184 ----------------------------------------
      .               pub fn new(path_mapping: FilePathMapping) -> SourceMap {
      .                   Self::with_file_loader_and_hash_kind(
      .                       Box::new(RealFileLoader),
      .                       path_mapping,
      .                       SourceFileHashAlgorithm::Md5,
      .                   )
      .               }
      .           
      1 ( 0.00%)      pub fn with_file_loader_and_hash_kind(
      .                   file_loader: Box<dyn FileLoader + Sync + Send>,
      .                   path_mapping: FilePathMapping,
      .                   hash_kind: SourceFileHashAlgorithm,
      .               ) -> SourceMap {
      5 ( 0.00%)          SourceMap {
      .                       used_address_space: AtomicU32::new(0),
      .                       files: Default::default(),
      .                       file_loader,
      4 ( 0.00%)              path_mapping,
      .                       hash_kind,
      .                   }
      1 ( 0.00%)      }
      .           
      .               pub fn path_mapping(&self) -> &FilePathMapping {
      4 ( 0.00%)          &self.path_mapping
      4 ( 0.00%)      }
      .           
      .               pub fn file_exists(&self, path: &Path) -> bool {
     20 ( 0.00%)          self.file_loader.file_exists(path)
      .               }
      .           
     22 ( 0.00%)      pub fn load_file(&self, path: &Path) -> io::Result<Lrc<SourceFile>> {
      8 ( 0.00%)          let src = self.file_loader.read_file(path)?;
      .                   let filename = path.to_owned().into();
     36 ( 0.00%)          Ok(self.new_source_file(filename, src))
     18 ( 0.00%)      }
      .           
      .               /// Loads source file as a binary blob.
      .               ///
      .               /// Unlike `load_file`, guarantees that no normalization like BOM-removal
      .               /// takes place.
      .               pub fn load_binary_file(&self, path: &Path) -> io::Result<Vec<u8>> {
      .                   // Ideally, this should use `self.file_loader`, but it can't
      .                   // deal with binary files yet.
-- line 226 ----------------------------------------
-- line 233 ----------------------------------------
      .                   // empty string.
      .                   let text = std::str::from_utf8(&bytes).unwrap_or("").to_string();
      .                   self.new_source_file(path.to_owned().into(), text);
      .                   Ok(bytes)
      .               }
      .           
      .               // By returning a `MonotonicVec`, we ensure that consumers cannot invalidate
      .               // any existing indices pointing into `files`.
     33 ( 0.00%)      pub fn files(&self) -> MappedReadGuard<'_, monotonic::MonotonicVec<Lrc<SourceFile>>> {
      .                   ReadGuard::map(self.files.borrow(), |files| &files.source_files)
     99 ( 0.00%)      }
      .           
      8 ( 0.00%)      pub fn source_file_by_stable_id(
      .                   &self,
      .                   stable_id: StableSourceFileId,
      .               ) -> Option<Lrc<SourceFile>> {
      .                   self.files.borrow().stable_id_to_source_file.get(&stable_id).cloned()
     10 ( 0.00%)      }
      .           
      .               fn allocate_address_space(&self, size: usize) -> Result<usize, OffsetOverflowError> {
    579 ( 0.00%)          let size = u32::try_from(size).map_err(|_| OffsetOverflowError)?;
      .           
      .                   loop {
    579 ( 0.00%)              let current = self.used_address_space.load(Ordering::Relaxed);
  1,737 ( 0.00%)              let next = current
      .                           .checked_add(size)
      .                           // Add one so there is some space between files. This lets us distinguish
      .                           // positions in the `SourceMap`, even in the presence of zero-length files.
      .                           .and_then(|next| next.checked_add(1))
      .                           .ok_or(OffsetOverflowError)?;
      .           
      .                       if self
      .                           .used_address_space
-- line 265 ----------------------------------------
-- line 269 ----------------------------------------
      .                           return Ok(usize::try_from(current).unwrap());
      .                       }
      .                   }
      .               }
      .           
      .               /// Creates a new `SourceFile`.
      .               /// If a file already exists in the `SourceMap` with the same ID, that file is returned
      .               /// unmodified.
     16 ( 0.00%)      pub fn new_source_file(&self, filename: FileName, src: String) -> Lrc<SourceFile> {
     24 ( 0.00%)          self.try_new_source_file(filename, src).unwrap_or_else(|OffsetOverflowError| {
      .                       eprintln!("fatal error: rustc does not support files larger than 4GB");
      .                       crate::fatal_error::FatalError.raise()
      .                   })
     18 ( 0.00%)      }
      .           
      .               fn try_new_source_file(
      .                   &self,
      .                   filename: FileName,
      .                   src: String,
      .               ) -> Result<Lrc<SourceFile>, OffsetOverflowError> {
      .                   // Note that filename may not be a valid path, eg it may be `<anon>` etc,
      .                   // but this is okay because the directory determined by `path.pop()` will
      .                   // be empty, so the working directory will be used.
     26 ( 0.00%)          let (filename, _) = self.path_mapping.map_filename_prefix(&filename);
      .           
      4 ( 0.00%)          let file_id = StableSourceFileId::new_from_name(&filename, LOCAL_CRATE);
      .           
     12 ( 0.00%)          let lrc_sf = match self.source_file_by_stable_id(file_id) {
      .                       Some(lrc_sf) => lrc_sf,
      .                       None => {
      .                           let start_pos = self.allocate_address_space(src.len())?;
      .           
     12 ( 0.00%)                  let source_file = Lrc::new(SourceFile::new(
     18 ( 0.00%)                      filename,
      6 ( 0.00%)                      src,
      .                               Pos::from_usize(start_pos),
      .                               self.hash_kind,
      .                           ));
      .           
      .                           // Let's make sure the file_id we generated above actually matches
      .                           // the ID we generate for the SourceFile we just created.
      .                           debug_assert_eq!(StableSourceFileId::new(&source_file), file_id);
      .           
-- line 311 ----------------------------------------
-- line 319 ----------------------------------------
      .                   };
      .                   Ok(lrc_sf)
      .               }
      .           
      .               /// Allocates a new `SourceFile` representing a source file from an external
      .               /// crate. The source code of such an "imported `SourceFile`" is not available,
      .               /// but we still know enough to generate accurate debuginfo location
      .               /// information for things inlined from other crates.
  4,616 ( 0.00%)      pub fn new_imported_source_file(
      .                   &self,
      .                   filename: FileName,
      .                   src_hash: SourceFileHash,
      .                   name_hash: u128,
      .                   source_len: usize,
      .                   cnum: CrateNum,
      .                   mut file_local_lines: Vec<BytePos>,
      .                   mut file_local_multibyte_chars: Vec<MultiByteChar>,
-- line 335 ----------------------------------------
-- line 341 ----------------------------------------
      .                   let start_pos = self
      .                       .allocate_address_space(source_len)
      .                       .expect("not enough address space for imported source file");
      .           
      .                   let end_pos = Pos::from_usize(start_pos + source_len);
      .                   let start_pos = Pos::from_usize(start_pos);
      .           
      .                   for pos in &mut file_local_lines {
370,646 ( 0.20%)              *pos = *pos + start_pos;
      .                   }
      .           
      .                   for mbc in &mut file_local_multibyte_chars {
    798 ( 0.00%)              mbc.pos = mbc.pos + start_pos;
      .                   }
      .           
      .                   for swc in &mut file_local_non_narrow_chars {
    616 ( 0.00%)              *swc = *swc + start_pos;
      .                   }
      .           
      .                   for nc in &mut file_local_normalized_pos {
      .                       nc.pos = nc.pos + start_pos;
      .                   }
      .           
  1,731 ( 0.00%)          let source_file = Lrc::new(SourceFile {
  4,616 ( 0.00%)              name: filename,
      .                       src: None,
      .                       src_hash,
      .                       external_src: Lock::new(ExternalSource::Foreign {
      .                           kind: ExternalSourceKind::AbsentOk,
      .                           original_start_pos,
      .                           original_end_pos,
      .                       }),
      .                       start_pos,
-- line 373 ----------------------------------------
-- line 383 ----------------------------------------
      .                   let mut files = self.files.borrow_mut();
      .           
      .                   files.source_files.push(source_file.clone());
      .                   files
      .                       .stable_id_to_source_file
      .                       .insert(StableSourceFileId::new(&source_file), source_file.clone());
      .           
      .                   source_file
  5,193 ( 0.00%)      }
      .           
      .               // If there is a doctest offset, applies it to the line.
      .               pub fn doctest_offset_line(&self, file: &FileName, orig: usize) -> usize {
      .                   match file {
      .                       FileName::DocTest(_, offset) => {
      .                           if *offset < 0 {
      .                               orig - (-(*offset)) as usize
      .                           } else {
-- line 399 ----------------------------------------
-- line 400 ----------------------------------------
      .                               orig + *offset as usize
      .                           }
      .                       }
      .                       _ => orig,
      .                   }
      .               }
      .           
      .               /// Return the SourceFile that contains the given `BytePos`
      3 ( 0.00%)      pub fn lookup_source_file(&self, pos: BytePos) -> Lrc<SourceFile> {
      1 ( 0.00%)          let idx = self.lookup_source_file_idx(pos);
      1 ( 0.00%)          (*self.files.borrow().source_files)[idx].clone()
      3 ( 0.00%)      }
      .           
      .               /// Looks up source information about a `BytePos`.
      .               pub fn lookup_char_pos(&self, pos: BytePos) -> Loc {
      5 ( 0.00%)          let sf = self.lookup_source_file(pos);
      6 ( 0.00%)          let (line, col, col_display) = sf.lookup_file_pos_with_col_display(pos);
      3 ( 0.00%)          Loc { file: sf, line, col, col_display }
      .               }
      .           
      .               // If the corresponding `SourceFile` is empty, does not return a line number.
      .               pub fn lookup_line(&self, pos: BytePos) -> Result<SourceFileAndLine, Lrc<SourceFile>> {
      .                   let f = self.lookup_source_file(pos);
      .           
      .                   match f.lookup_line(pos) {
      .                       Some(line) => Ok(SourceFileAndLine { sf: f, line }),
-- line 425 ----------------------------------------
-- line 451 ----------------------------------------
      .           
      .               /// Format the span location to be printed in diagnostics. Must not be emitted
      .               /// to build artifacts as this may leak local file paths. Use span_to_embeddable_string
      .               /// for string suitable for embedding.
      .               pub fn span_to_diagnostic_string(&self, sp: Span) -> String {
      .                   self.span_to_string(sp, self.path_mapping.filename_display_for_diagnostics)
      .               }
      .           
     11 ( 0.00%)      pub fn span_to_filename(&self, sp: Span) -> FileName {
      3 ( 0.00%)          self.lookup_char_pos(sp.lo()).file.name.clone()
      8 ( 0.00%)      }
      .           
      .               pub fn filename_for_diagnostics<'a>(&self, filename: &'a FileName) -> FileNameDisplay<'a> {
      .                   filename.display(self.path_mapping.filename_display_for_diagnostics)
      .               }
      .           
    979 ( 0.00%)      pub fn is_multiline(&self, sp: Span) -> bool {
    356 ( 0.00%)          let lo = self.lookup_source_file_idx(sp.lo());
    356 ( 0.00%)          let hi = self.lookup_source_file_idx(sp.hi());
    178 ( 0.00%)          if lo != hi {
      .                       return true;
      .                   }
    178 ( 0.00%)          let f = (*self.files.borrow().source_files)[lo].clone();
      .                   f.lookup_line(sp.lo()) != f.lookup_line(sp.hi())
    801 ( 0.00%)      }
      .           
      .               #[instrument(skip(self), level = "trace")]
      .               pub fn is_valid_span(&self, sp: Span) -> Result<(Loc, Loc), SpanLinesError> {
      .                   let lo = self.lookup_char_pos(sp.lo());
      .                   trace!(?lo);
      .                   let hi = self.lookup_char_pos(sp.hi());
      .                   trace!(?hi);
      .                   if lo.file.start_pos != hi.file.start_pos {
-- line 483 ----------------------------------------
-- line 533 ----------------------------------------
      .           
      .               /// Extracts the source surrounding the given `Span` using the `extract_source` function. The
      .               /// extract function takes three arguments: a string slice containing the source, an index in
      .               /// the slice for the beginning of the span and an index in the slice for the end of the span.
      .               fn span_to_source<F, T>(&self, sp: Span, extract_source: F) -> Result<T, SpanSnippetError>
      .               where
      .                   F: Fn(&str, usize, usize) -> Result<T, SpanSnippetError>,
      .               {
    161 ( 0.00%)          let local_begin = self.lookup_byte_offset(sp.lo());
    161 ( 0.00%)          let local_end = self.lookup_byte_offset(sp.hi());
      .           
     46 ( 0.00%)          if local_begin.sf.start_pos != local_end.sf.start_pos {
      .                       Err(SpanSnippetError::DistinctSources(DistinctSources {
      .                           begin: (local_begin.sf.name.clone(), local_begin.sf.start_pos),
      .                           end: (local_end.sf.name.clone(), local_end.sf.start_pos),
      .                       }))
      .                   } else {
      .                       self.ensure_source_file_source_present(local_begin.sf.clone());
      .           
      .                       let start_index = local_begin.pos.to_usize();
      .                       let end_index = local_end.pos.to_usize();
     23 ( 0.00%)              let source_len = (local_begin.sf.end_pos - local_begin.sf.start_pos).to_usize();
      .           
     92 ( 0.00%)              if start_index > end_index || end_index > source_len {
      .                           return Err(SpanSnippetError::MalformedForSourcemap(MalformedSourceMapPositions {
      .                               name: local_begin.sf.name.clone(),
      .                               source_len,
      .                               begin_pos: local_begin.pos,
      .                               end_pos: local_end.pos,
      .                           }));
      .                       }
      .           
     69 ( 0.00%)              if let Some(ref src) = local_begin.sf.src {
      .                           extract_source(src, start_index, end_index)
      4 ( 0.00%)              } else if let Some(src) = local_begin.sf.external_src.borrow().get_source() {
      4 ( 0.00%)                  extract_source(src, start_index, end_index)
      .                       } else {
      .                           Err(SpanSnippetError::SourceNotAvailable { filename: local_begin.sf.name.clone() })
      .                       }
      .                   }
      .               }
      .           
      .               /// Returns whether or not this span points into a file
      .               /// in the current crate. This may be `false` for spans
-- line 576 ----------------------------------------
-- line 579 ----------------------------------------
      .               pub fn is_local_span(&self, sp: Span) -> bool {
      .                   let local_begin = self.lookup_byte_offset(sp.lo());
      .                   let local_end = self.lookup_byte_offset(sp.hi());
      .                   // This might be a weird span that covers multiple files
      .                   local_begin.sf.src.is_some() && local_end.sf.src.is_some()
      .               }
      .           
      .               /// Returns the source snippet as `String` corresponding to the given `Span`.
    276 ( 0.00%)      pub fn span_to_snippet(&self, sp: Span) -> Result<String, SpanSnippetError> {
      .                   self.span_to_source(sp, |src, start_index, end_index| {
      .                       src.get(start_index..end_index)
      .                           .map(|s| s.to_string())
      .                           .ok_or(SpanSnippetError::IllFormedSpan(sp))
      .                   })
    207 ( 0.00%)      }
      .           
      .               pub fn span_to_margin(&self, sp: Span) -> Option<usize> {
      .                   Some(self.indentation_before(sp)?.len())
      .               }
      .           
      .               pub fn indentation_before(&self, sp: Span) -> Option<String> {
      .                   self.span_to_source(sp, |src, start_index, _| {
      .                       let before = &src[..start_index];
-- line 601 ----------------------------------------
-- line 679 ----------------------------------------
      .                       }
      .                   }
      .           
      .                   sp
      .               }
      .           
      .               /// Given a `Span`, tries to get a shorter span ending before the first occurrence of `char`
      .               /// `c`.
    242 ( 0.00%)      pub fn span_until_char(&self, sp: Span, c: char) -> Span {
     88 ( 0.00%)          match self.span_to_snippet(sp) {
     88 ( 0.00%)              Ok(snippet) => {
      .                           let snippet = snippet.split(c).next().unwrap_or("").trim_end();
     44 ( 0.00%)                  if !snippet.is_empty() && !snippet.contains('\n') {
     95 ( 0.00%)                      sp.with_hi(BytePos(sp.lo().0 + snippet.len() as u32))
      .                           } else {
      .                               sp
      .                           }
      .                       }
      .                       _ => sp,
      .                   }
    198 ( 0.00%)      }
      .           
      .               /// Given a `Span`, tries to get a shorter span ending just after the first occurrence of `char`
      .               /// `c`.
      .               pub fn span_through_char(&self, sp: Span, c: char) -> Span {
      .                   if let Ok(snippet) = self.span_to_snippet(sp) {
      .                       if let Some(offset) = snippet.find(c) {
      .                           return sp.with_hi(BytePos(sp.lo().0 + (offset + c.len_utf8()) as u32));
      .                       }
-- line 707 ----------------------------------------
-- line 750 ----------------------------------------
      .               /// Given a `Span`, return a span ending in the closest `{`. This is useful when you have a
      .               /// `Span` enclosing a whole item but we need to point at only the head (usually the first
      .               /// line) of that item.
      .               ///
      .               /// *Only suitable for diagnostics.*
      .               pub fn guess_head_span(&self, sp: Span) -> Span {
      .                   // FIXME: extend the AST items to have a head span, or replace callers with pointing at
      .                   // the item's ident when appropriate.
     44 ( 0.00%)          self.span_until_char(sp, '{')
      .               }
      .           
      .               /// Returns a new span representing just the first character of the given span.
      .               pub fn start_point(&self, sp: Span) -> Span {
      .                   let width = {
      .                       let sp = sp.data();
      .                       let local_begin = self.lookup_byte_offset(sp.lo);
      .                       let start_index = local_begin.pos.to_usize();
-- line 766 ----------------------------------------
-- line 782 ----------------------------------------
      .                           },
      .                       }
      .                   };
      .           
      .                   sp.with_hi(BytePos(sp.lo().0 + width as u32))
      .               }
      .           
      .               /// Returns a new span representing just the last character of this span.
  2,616 ( 0.00%)      pub fn end_point(&self, sp: Span) -> Span {
      .                   let pos = sp.hi().0;
      .           
    872 ( 0.00%)          let width = self.find_width_of_character_at_span(sp, false);
      .                   let corrected_end_position = pos.checked_sub(width).unwrap_or(pos);
      .           
      .                   let end_point = BytePos(cmp::max(corrected_end_position, sp.lo().0));
  2,180 ( 0.00%)          sp.with_lo(end_point)
      .               }
      .           
      .               /// Returns a new span representing the next character after the end-point of this span.
    209 ( 0.00%)      pub fn next_point(&self, sp: Span) -> Span {
     19 ( 0.00%)          if sp.is_dummy() {
      .                       return sp;
      .                   }
      .                   let start_of_next_point = sp.hi().0;
      .           
     76 ( 0.00%)          let width = self.find_width_of_character_at_span(sp.shrink_to_hi(), true);
      .                   // If the width is 1, then the next span should point to the same `lo` and `hi`. However,
      .                   // in the case of a multibyte character, where the width != 1, the next span should
      .                   // span multiple bytes to include the whole character.
      .                   let end_of_next_point =
     38 ( 0.00%)              start_of_next_point.checked_add(width - 1).unwrap_or(start_of_next_point);
      .           
     38 ( 0.00%)          let end_of_next_point = BytePos(cmp::max(sp.lo().0 + 1, end_of_next_point));
      .                   Span::new(BytePos(start_of_next_point), end_of_next_point, sp.ctxt(), None)
    171 ( 0.00%)      }
      .           
      .               /// Finds the width of the character, either before or after the end of provided span,
      .               /// depending on the `forwards` parameter.
  2,844 ( 0.00%)      fn find_width_of_character_at_span(&self, sp: Span, forwards: bool) -> u32 {
      .                   let sp = sp.data();
    237 ( 0.00%)          if sp.lo == sp.hi {
      .                       debug!("find_width_of_character_at_span: early return empty span");
      .                       return 1;
      .                   }
      .           
  1,512 ( 0.00%)          let local_begin = self.lookup_byte_offset(sp.lo);
  1,944 ( 0.00%)          let local_end = self.lookup_byte_offset(sp.hi);
      .                   debug!(
      .                       "find_width_of_character_at_span: local_begin=`{:?}`, local_end=`{:?}`",
      .                       local_begin, local_end
      .                   );
      .           
    432 ( 0.00%)          if local_begin.sf.start_pos != local_end.sf.start_pos {
      .                       debug!("find_width_of_character_at_span: begin and end are in different files");
      .                       return 1;
      .                   }
      .           
      .                   let start_index = local_begin.pos.to_usize();
      .                   let end_index = local_end.pos.to_usize();
      .                   debug!(
      .                       "find_width_of_character_at_span: start_index=`{:?}`, end_index=`{:?}`",
      .                       start_index, end_index
      .                   );
      .           
      .                   // Disregard indexes that are at the start or end of their spans, they can't fit bigger
      .                   // characters.
    864 ( 0.00%)          if (!forwards && end_index == usize::MIN) || (forwards && start_index == usize::MAX) {
      .                       debug!("find_width_of_character_at_span: start or end of span, cannot be multibyte");
      .                       return 1;
      .                   }
      .           
    216 ( 0.00%)          let source_len = (local_begin.sf.end_pos - local_begin.sf.start_pos).to_usize();
      .                   debug!("find_width_of_character_at_span: source_len=`{:?}`", source_len);
      .                   // Ensure indexes are also not malformed.
    864 ( 0.00%)          if start_index > end_index || end_index > source_len {
      .                       debug!("find_width_of_character_at_span: source indexes are malformed");
      .                       return 1;
      .                   }
      .           
      .                   let src = local_begin.sf.external_src.borrow();
      .           
      .                   // We need to extend the snippet to the end of the src rather than to end_index so when
      .                   // searching forwards for boundaries we've got somewhere to search.
    648 ( 0.00%)          let snippet = if let Some(ref src) = local_begin.sf.src {
      .                       &src[start_index..]
      9 ( 0.00%)          } else if let Some(src) = src.get_source() {
     35 ( 0.00%)              &src[start_index..]
      .                   } else {
      .                       return 1;
      .                   };
      .                   debug!("find_width_of_character_at_span: snippet=`{:?}`", snippet);
      .           
  1,284 ( 0.00%)          let mut target = if forwards { end_index + 1 } else { end_index - 1 };
      .                   debug!("find_width_of_character_at_span: initial target=`{:?}`", target);
      .           
    856 ( 0.00%)          while !snippet.is_char_boundary(target - start_index) && target < source_len {
      .                       target = if forwards {
      .                           target + 1
      .                       } else {
      .                           match target.checked_sub(1) {
      .                               Some(target) => target,
      .                               None => {
      .                                   break;
      .                               }
      .                           }
      .                       };
      .                       debug!("find_width_of_character_at_span: target=`{:?}`", target);
      .                   }
      .                   debug!("find_width_of_character_at_span: final target=`{:?}`", target);
      .           
    856 ( 0.00%)          if forwards { (target - end_index) as u32 } else { (end_index - target) as u32 }
  2,133 ( 0.00%)      }
      .           
      .               pub fn get_source_file(&self, filename: &FileName) -> Option<Lrc<SourceFile>> {
      .                   // Remap filename before lookup
      .                   let filename = self.path_mapping().map_filename_prefix(filename).0;
      .                   for sf in self.files.borrow().source_files.iter() {
      .                       if filename == sf.name {
      .                           return Some(sf.clone());
      .                       }
      .                   }
      .                   None
      .               }
      .           
      .               /// For a global `BytePos`, computes the local offset within the containing `SourceFile`.
  2,390 ( 0.00%)      pub fn lookup_byte_offset(&self, bpos: BytePos) -> SourceFileAndBytePos {
    478 ( 0.00%)          let idx = self.lookup_source_file_idx(bpos);
    956 ( 0.00%)          let sf = (*self.files.borrow().source_files)[idx].clone();
      .                   let offset = bpos - sf.start_pos;
      .                   SourceFileAndBytePos { sf, pos: offset }
  2,390 ( 0.00%)      }
      .           
      .               // Returns the index of the `SourceFile` (in `self.files`) that contains `pos`.
      .               // This index is guaranteed to be valid for the lifetime of this `SourceMap`,
      .               // since `source_files` is a `MonotonicVec`
  2,580 ( 0.00%)      pub fn lookup_source_file_idx(&self, pos: BytePos) -> usize {
      .                   self.files
      .                       .borrow()
      .                       .source_files
      .                       .binary_search_by_key(&pos, |key| key.start_pos)
  1,714 ( 0.00%)              .unwrap_or_else(|p| p - 1)
  3,440 ( 0.00%)      }
      .           
      .               pub fn count_lines(&self) -> usize {
      .                   self.files().iter().fold(0, |a, f| a + f.count_lines())
      .               }
      .           
      .               pub fn generate_fn_name_span(&self, span: Span) -> Option<Span> {
      .                   let prev_span = self.span_extend_to_prev_str(span, "fn", true);
      .                   if let Ok(snippet) = self.span_to_snippet(prev_span) {
-- line 931 ----------------------------------------
-- line 1010 ----------------------------------------
      .           
      .                           return Some((sugg_span, new_snippet));
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .               pub fn ensure_source_file_source_present(&self, source_file: Lrc<SourceFile>) -> bool {
    161 ( 0.00%)          source_file.add_external_src(|| {
      3 ( 0.00%)              match source_file.name {
      .                           FileName::Real(ref name) if let Some(local_path) = name.local_path() => {
      2 ( 0.00%)                      self.file_loader.read_file(local_path).ok()
      .                           }
      .                           _ => None,
      .                       }
      .                   })
      .               }
      .           
      .               pub fn is_imported(&self, sp: Span) -> bool {
      .                   let source_file_index = self.lookup_source_file_idx(sp.lo());
-- line 1029 ----------------------------------------
-- line 1053 ----------------------------------------
      .                   let span = span.shrink_to_hi().with_hi(BytePos(span.hi().0.checked_add(1)?));
      .                   if self.span_to_snippet(span).as_deref() != Ok(";") {
      .                       return None;
      .                   }
      .                   Some(span)
      .               }
      .           }
      .           
      8 ( 0.00%)  #[derive(Clone)]
      .           pub struct FilePathMapping {
      4 ( 0.00%)      mapping: Vec<(PathBuf, PathBuf)>,
      2 ( 0.00%)      filename_display_for_diagnostics: FileNameDisplayPreference,
      .           }
      .           
      .           impl FilePathMapping {
      .               pub fn empty() -> FilePathMapping {
      .                   FilePathMapping::new(Vec::new())
      .               }
      .           
      3 ( 0.00%)      pub fn new(mapping: Vec<(PathBuf, PathBuf)>) -> FilePathMapping {
      .                   let filename_display_for_diagnostics = if mapping.is_empty() {
      .                       FileNameDisplayPreference::Local
      .                   } else {
      .                       FileNameDisplayPreference::Remapped
      .                   };
      .           
     12 ( 0.00%)          FilePathMapping { mapping, filename_display_for_diagnostics }
      3 ( 0.00%)      }
      .           
      .               /// Applies any path prefix substitution as defined by the mapping.
      .               /// The return value is the remapped path and a boolean indicating whether
      .               /// the path was affected by the mapping.
     63 ( 0.00%)      pub fn map_prefix(&self, path: PathBuf) -> (PathBuf, bool) {
      .                   // NOTE: We are iterating over the mapping entries from last to first
      .                   //       because entries specified later on the command line should
      .                   //       take precedence.
      .                   for &(ref from, ref to) in self.mapping.iter().rev() {
      .                       if let Ok(rest) = path.strip_prefix(from) {
      .                           return (to.join(rest), true);
      .                       }
      .                   }
      .           
     35 ( 0.00%)          (path, false)
     63 ( 0.00%)      }
      .           
     16 ( 0.00%)      fn map_filename_prefix(&self, file: &FileName) -> (FileName, bool) {
      4 ( 0.00%)          match file {
      4 ( 0.00%)              FileName::Real(realfile) if let RealFileName::LocalPath(local_path) = realfile => {
     28 ( 0.00%)                  let (mapped_path, mapped) = self.map_prefix(local_path.to_path_buf());
      2 ( 0.00%)                  let realfile = if mapped {
      .                               RealFileName::Remapped {
      .                                   local_path: Some(local_path.clone()),
      .                                   virtual_name: mapped_path,
      .                               }
      .                           } else {
      .                               realfile.clone()
      .                           };
     20 ( 0.00%)                  (FileName::Real(realfile), mapped)
      8 ( 0.00%)              }
      .                       FileName::Real(_) => unreachable!("attempted to remap an already remapped filename"),
      .                       other => (other.clone(), false),
      .                   }
      .               }
      .           }

  6,337 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/build_reduced_graph.rs
--------------------------------------------------------------------------------
Ir               

-- line 36 ----------------------------------------
      .           
      .           use std::cell::Cell;
      .           use std::ptr;
      .           use tracing::debug;
      .           
      .           type Res = def::Res<NodeId>;
      .           
      .           impl<'a> ToNameBinding<'a> for (Module<'a>, ty::Visibility, Span, LocalExpnId) {
     24 ( 0.00%)      fn to_name_binding(self, arenas: &'a ResolverArenas<'a>) -> &'a NameBinding<'a> {
      .                   arenas.alloc_name_binding(NameBinding {
      3 ( 0.00%)              kind: NameBindingKind::Module(self.0),
      .                       ambiguity: None,
      9 ( 0.00%)              vis: self.1,
      3 ( 0.00%)              span: self.2,
      3 ( 0.00%)              expansion: self.3,
      .                   })
     24 ( 0.00%)      }
      .           }
      .           
      .           impl<'a> ToNameBinding<'a> for (Res, ty::Visibility, Span, LocalExpnId) {
      .               fn to_name_binding(self, arenas: &'a ResolverArenas<'a>) -> &'a NameBinding<'a> {
 33,642 ( 0.02%)          arenas.alloc_name_binding(NameBinding {
 22,428 ( 0.01%)              kind: NameBindingKind::Res(self.0, false),
      .                       ambiguity: None,
      .                       vis: self.1,
      .                       span: self.2,
      .                       expansion: self.3,
      .                   })
      .               }
      .           }
      .           
      .           struct IsMacroExport;
      .           
      .           impl<'a> ToNameBinding<'a> for (Res, ty::Visibility, Span, LocalExpnId, IsMacroExport) {
      .               fn to_name_binding(self, arenas: &'a ResolverArenas<'a>) -> &'a NameBinding<'a> {
      6 ( 0.00%)          arenas.alloc_name_binding(NameBinding {
      4 ( 0.00%)              kind: NameBindingKind::Res(self.0, true),
      .                       ambiguity: None,
      .                       vis: self.1,
      .                       span: self.2,
      .                       expansion: self.3,
      .                   })
      .               }
      .           }
      .           
      .           impl<'a> Resolver<'a> {
      .               /// Defines `name` in namespace `ns` of module `parent` to be `def` if it is not yet defined;
      .               /// otherwise, reports an error.
 72,711 ( 0.04%)      crate fn define<T>(&mut self, parent: Module<'a>, ident: Ident, ns: Namespace, def: T)
      .               where
      .                   T: ToNameBinding<'a>,
      .               {
 43,288 ( 0.02%)          let binding = def.to_name_binding(self.arenas);
      .                   let key = self.new_key(ident, ns);
 66,825 ( 0.04%)          if let Err(old_binding) = self.try_define(parent, key, binding) {
      .                       self.report_conflict(parent, ident, ns, old_binding, &binding);
      .                   }
 48,472 ( 0.03%)      }
      .           
      .               /// Walks up the tree of definitions starting at `def_id`,
      .               /// stopping at the first encountered module.
      .               /// Parent block modules for arbitrary def-ids are not recorded for the local crate,
      .               /// and are not preserved in metadata for foreign crates, so block modules are never
      .               /// returned by this function.
      .               ///
      .               /// For the local crate ignoring block modules may be incorrect, so use this method with care.
-- line 101 ----------------------------------------
-- line 103 ----------------------------------------
      .               /// For foreign crates block modules can be ignored without introducing observable differences,
      .               /// moreover they has to be ignored right now because they are not kept in metadata.
      .               /// Foreign parent modules are used for resolving names used by foreign macros with def-site
      .               /// hygiene, therefore block module ignorability relies on macros with def-site hygiene and
      .               /// block module parents being unreachable from other crates.
      .               /// Reachable macros with block module parents exist due to `#[macro_export] macro_rules!`,
      .               /// but they cannot use def-site hygiene, so the assumption holds
      .               /// (<https://github.com/rust-lang/rust/pull/77984#issuecomment-712445508>).
  5,486 ( 0.00%)      pub fn get_nearest_non_block_module(&mut self, mut def_id: DefId) -> Module<'a> {
      .                   loop {
  2,614 ( 0.00%)              match self.get_module(def_id) {
      .                           Some(module) => return module,
      .                           None => {
      .                               def_id.index =
      .                                   self.def_key(def_id).parent.expect("non-root `DefId` without parent")
      .                           }
      .                       }
      .                   }
  3,376 ( 0.00%)      }
      .           
      3 ( 0.00%)      pub fn expect_module(&mut self, def_id: DefId) -> Module<'a> {
  1,041 ( 0.00%)          self.get_module(def_id).expect("argument `DefId` is not a module")
      6 ( 0.00%)      }
      .           
      .               /// If `def_id` refers to a module (in resolver's sense, i.e. a module item, crate root, enum,
      .               /// or trait), then this function returns that module's resolver representation, otherwise it
      .               /// returns `None`.
 10,090 ( 0.01%)      crate fn get_module(&mut self, def_id: DefId) -> Option<Module<'a>> {
      .                   if let module @ Some(..) = self.module_map.get(&def_id) {
      .                       return module.copied();
      .                   }
      .           
    432 ( 0.00%)          if !def_id.is_local() {
  2,586 ( 0.00%)              let def_kind = self.cstore().def_kind(def_id);
    862 ( 0.00%)              match def_kind {
      .                           DefKind::Mod | DefKind::Enum | DefKind::Trait => {
  2,082 ( 0.00%)                      let def_key = self.cstore().def_key(def_id);
      .                               let parent = def_key.parent.map(|index| {
  1,690 ( 0.00%)                          self.get_nearest_non_block_module(DefId { index, krate: def_id.krate })
      .                               });
    347 ( 0.00%)                      let name = if def_id.index == CRATE_DEF_INDEX {
     36 ( 0.00%)                          self.cstore().crate_name(def_id.krate)
      .                               } else {
  1,014 ( 0.00%)                          def_key.disambiguated_data.data.get_opt_name().expect("module without name")
      .                               };
      .           
  2,776 ( 0.00%)                      Some(self.new_module(
      .                                   parent,
      .                                   ModuleKind::Def(def_kind, def_id, name),
  2,429 ( 0.00%)                          self.cstore().module_expansion_untracked(def_id, &self.session),
  2,082 ( 0.00%)                          self.cstore().get_span_untracked(def_id, &self.session),
      .                                   // FIXME: Account for `#[no_implicit_prelude]` attributes.
  1,014 ( 0.00%)                          parent.map_or(false, |module| module.no_implicit_prelude),
      .                               ))
      .                           }
      .                           _ => None,
      .                       }
      .                   } else {
      .                       None
      .                   }
  8,072 ( 0.00%)      }
      .           
    738 ( 0.00%)      crate fn expn_def_scope(&mut self, expn_id: ExpnId) -> Module<'a> {
    246 ( 0.00%)          match expn_id.expn_data().macro_def_id {
    210 ( 0.00%)              Some(def_id) => self.macro_def_scope(def_id),
     12 ( 0.00%)              None => expn_id
      .                           .as_local()
      .                           .and_then(|expn_id| self.ast_transform_scopes.get(&expn_id))
     12 ( 0.00%)                  .unwrap_or(&self.graph_root),
      .                   }
    492 ( 0.00%)      }
      .           
     84 ( 0.00%)      crate fn macro_def_scope(&mut self, def_id: DefId) -> Module<'a> {
     84 ( 0.00%)          if let Some(id) = def_id.as_local() {
      .                       self.local_macro_def_scopes[&id]
      .                   } else {
    168 ( 0.00%)              self.get_nearest_non_block_module(def_id)
      .                   }
      .               }
      .           
      .               crate fn get_macro(&mut self, res: Res) -> Option<Lrc<SyntaxExtension>> {
    152 ( 0.00%)          match res {
     48 ( 0.00%)              Res::Def(DefKind::Macro(..), def_id) => Some(self.get_macro_by_def_id(def_id)),
      .                       Res::NonMacroAttr(_) => Some(self.non_macro_attr.clone()),
      .                       _ => None,
      .                   }
      .               }
      .           
    160 ( 0.00%)      crate fn get_macro_by_def_id(&mut self, def_id: DefId) -> Lrc<SyntaxExtension> {
      .                   if let Some(ext) = self.macro_map.get(&def_id) {
     11 ( 0.00%)              return ext.clone();
      .                   }
      .           
     81 ( 0.00%)          let ext = Lrc::new(match self.cstore().load_macro_untracked(def_id, &self.session) {
     99 ( 0.00%)              LoadedMacro::MacroDef(item, edition) => self.compile_macro(&item, edition),
      .                       LoadedMacro::ProcMacro(ext) => ext,
      .                   });
      .           
      .                   self.macro_map.insert(def_id, ext.clone());
      .                   ext
    140 ( 0.00%)      }
      .           
      .               crate fn build_reduced_graph(
      .                   &mut self,
      .                   fragment: &AstFragment,
      .                   parent_scope: ParentScope<'a>,
      .               ) -> MacroRulesScopeRef<'a> {
     60 ( 0.00%)          collect_definitions(self, fragment, parent_scope.expansion);
    105 ( 0.00%)          let mut visitor = BuildReducedGraphVisitor { r: self, parent_scope };
     30 ( 0.00%)          fragment.visit_with(&mut visitor);
     15 ( 0.00%)          visitor.parent_scope.macro_rules
      .               }
      .           
      .               crate fn build_reduced_graph_external(&mut self, module: Module<'a>) {
 48,624 ( 0.03%)          for child in self.cstore().module_children_untracked(module.def_id(), self.session) {
      .                       let parent_scope = ParentScope::module(module, self);
 60,260 ( 0.03%)              BuildReducedGraphVisitor { r: self, parent_scope }
 48,208 ( 0.03%)                  .build_reduced_graph_for_external_crate_res(child);
      .                   }
      .               }
      .           }
      .           
      .           struct BuildReducedGraphVisitor<'a, 'b> {
      .               r: &'b mut Resolver<'a>,
      .               parent_scope: ParentScope<'a>,
      .           }
      .           
      .           impl<'a> AsMut<Resolver<'a>> for BuildReducedGraphVisitor<'a, '_> {
      .               fn as_mut(&mut self) -> &mut Resolver<'a> {
      2 ( 0.00%)          self.r
      .               }
      .           }
      .           
      .           impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {
      .               fn resolve_visibility(&mut self, vis: &ast::Visibility) -> ty::Visibility {
    282 ( 0.00%)          self.resolve_visibility_speculative(vis, false).unwrap_or_else(|err| {
      .                       self.r.report_vis_error(err);
      .                       ty::Visibility::Public
      .                   })
      .               }
      .           
    670 ( 0.00%)      fn resolve_visibility_speculative<'ast>(
      .                   &mut self,
      .                   vis: &'ast ast::Visibility,
      .                   speculative: bool,
      .               ) -> Result<ty::Visibility, VisResolutionError<'ast>> {
     67 ( 0.00%)          let parent_scope = &self.parent_scope;
    335 ( 0.00%)          match vis.kind {
     30 ( 0.00%)              ast::VisibilityKind::Public => Ok(ty::Visibility::Public),
      .                       ast::VisibilityKind::Crate(..) => {
      .                           Ok(ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)))
      .                       }
      .                       ast::VisibilityKind::Inherited => {
    609 ( 0.00%)                  Ok(match self.parent_scope.module.kind {
      .                               // Any inherited visibility resolved directly inside an enum or trait
      .                               // (i.e. variants, fields, and trait items) inherits from the visibility
      .                               // of the enum or trait.
     12 ( 0.00%)                      ModuleKind::Def(DefKind::Enum | DefKind::Trait, def_id, _) => {
     30 ( 0.00%)                          self.r.visibilities[&def_id.expect_local()]
      .                               }
      .                               // Otherwise, the visibility is restricted to the nearest parent `mod` item.
     92 ( 0.00%)                      _ => ty::Visibility::Restricted(self.parent_scope.module.nearest_parent_mod()),
      .                           })
      .                       }
      .                       ast::VisibilityKind::Restricted { ref path, id, .. } => {
      .                           // For visibilities we are not ready to provide correct implementation of "uniform
      .                           // paths" right now, so on 2018 edition we only allow module-relative paths for now.
      .                           // On 2015 edition visibilities are resolved as crate-relative by default,
      .                           // so we are prepending a root segment if necessary.
      .                           let ident = path.segments.get(0).expect("empty path in visibility").ident;
-- line 272 ----------------------------------------
-- line 326 ----------------------------------------
      .                               }
      .                               PathResult::Failed { span, label, suggestion, .. } => {
      .                                   Err(VisResolutionError::FailedToResolve(span, label, suggestion))
      .                               }
      .                               PathResult::Indeterminate => Err(VisResolutionError::Indeterminate(path.span)),
      .                           }
      .                       }
      .                   }
    536 ( 0.00%)      }
      .           
      .               fn insert_field_names_local(&mut self, def_id: DefId, vdata: &ast::VariantData) {
     12 ( 0.00%)          let field_names = vdata
      .                       .fields()
      .                       .iter()
      8 ( 0.00%)              .map(|field| respan(field.span, field.ident.map_or(kw::Empty, |ident| ident.name)))
      .                       .collect();
      .                   self.insert_field_names(def_id, field_names);
      .               }
      .           
      .               fn insert_field_names(&mut self, def_id: DefId, field_names: Vec<Spanned<Symbol>>) {
      .                   self.r.field_names.insert(def_id, field_names);
      .               }
      .           
      .               fn block_needs_anonymous_module(&mut self, block: &Block) -> bool {
      .                   // If any statements are items, we need to create an anonymous module
      .                   block
      .                       .stmts
      .                       .iter()
    118 ( 0.00%)              .any(|statement| matches!(statement.kind, StmtKind::Item(_) | StmtKind::MacCall(_)))
      .               }
      .           
      .               // Add an import to the current module.
    208 ( 0.00%)      fn add_import(
      .                   &mut self,
      .                   module_path: Vec<Segment>,
      .                   kind: ImportKind<'a>,
      .                   span: Span,
      .                   id: NodeId,
      .                   item: &ast::Item,
      .                   root_span: Span,
      .                   root_id: NodeId,
      .                   vis: ty::Visibility,
      .               ) {
     48 ( 0.00%)          let current_module = self.parent_scope.module;
    448 ( 0.00%)          let import = self.r.arenas.alloc_import(Import {
      .                       kind,
      .                       parent_scope: self.parent_scope,
     64 ( 0.00%)              module_path,
      .                       imported_module: Cell::new(None),
      .                       span,
      .                       id,
     32 ( 0.00%)              use_span: item.span,
     48 ( 0.00%)              use_span_with_attributes: item.span_with_attributes(),
      .                       has_attributes: !item.attrs.is_empty(),
      .                       root_span,
      .                       root_id,
      .                       vis: Cell::new(vis),
      .                       used: Cell::new(false),
      .                   });
      .           
      .                   self.r.indeterminate_imports.push(import);
     82 ( 0.00%)          match import.kind {
      .                       // Don't add unresolved underscore imports to modules
      .                       ImportKind::Single { target: Ident { name: kw::Underscore, .. }, .. } => {}
    105 ( 0.00%)              ImportKind::Single { target, type_ns_only, .. } => {
    420 ( 0.00%)                  self.r.per_ns(|this, ns| {
    135 ( 0.00%)                      if !type_ns_only || ns == TypeNS {
    135 ( 0.00%)                          let key = this.new_key(target, ns);
    360 ( 0.00%)                          let mut resolution = this.resolution(current_module, key).borrow_mut();
     45 ( 0.00%)                          resolution.add_single_import(import);
      .                               }
    225 ( 0.00%)                  });
      .                       }
      .                       // We don't add prelude imports to the globs since they only affect lexical scopes,
      .                       // which are not relevant to import resolution.
      .                       ImportKind::Glob { is_prelude: true, .. } => {}
      .                       ImportKind::Glob { .. } => current_module.globs.borrow_mut().push(import),
      .                       _ => unreachable!(),
      .                   }
    128 ( 0.00%)      }
      .           
    171 ( 0.00%)      fn build_reduced_graph_for_use_tree(
      .                   &mut self,
      .                   // This particular use tree
      .                   use_tree: &ast::UseTree,
      .                   id: NodeId,
      .                   parent_prefix: &[Segment],
      .                   nested: bool,
      .                   // The whole `use` item
      .                   item: &Item,
-- line 415 ----------------------------------------
-- line 426 ----------------------------------------
      .                       .cloned()
      .                       .chain(use_tree.prefix.segments.iter().map(|seg| seg.into()))
      .                       .peekable();
      .           
      .                   // On 2015 edition imports are resolved as crate-relative by default,
      .                   // so prefixes are prepended with crate root segment if necessary.
      .                   // The root is prepended lazily, when the first non-empty prefix or terminating glob
      .                   // appears, so imports in braced groups can have roots prepended independently.
     19 ( 0.00%)          let is_glob = matches!(use_tree.kind, ast::UseTreeKind::Glob);
     12 ( 0.00%)          let crate_root = match prefix_iter.peek() {
    220 ( 0.00%)              Some(seg) if !seg.ident.is_path_segment_keyword() && seg.ident.span.rust_2015() => {
      .                           Some(seg.ident.span.ctxt())
      .                       }
      .                       None if is_glob && use_tree.span.rust_2015() => Some(use_tree.span.ctxt()),
      .                       _ => None,
      .                   }
      .                   .map(|ctxt| {
      .                       Segment::from_ident(Ident::new(
      .                           kw::PathRoot,
     33 ( 0.00%)                  use_tree.prefix.span.shrink_to_lo().with_ctxt(ctxt),
      .                       ))
      .                   });
      .           
     95 ( 0.00%)          let prefix = crate_root.into_iter().chain(prefix_iter).collect::<Vec<_>>();
      .                   debug!("build_reduced_graph_for_use_tree: prefix={:?}", prefix);
      .           
      .                   let empty_for_self = |prefix: &[Segment]| {
      6 ( 0.00%)              prefix.is_empty() || prefix.len() == 1 && prefix[0].ident.name == kw::PathRoot
      .                   };
     69 ( 0.00%)          match use_tree.kind {
     75 ( 0.00%)              ast::UseTreeKind::Simple(rename, id1, id2) => {
     15 ( 0.00%)                  let mut ident = use_tree.ident();
     60 ( 0.00%)                  let mut module_path = prefix;
      .                           let mut source = module_path.pop().unwrap();
      .                           let mut type_ns_only = false;
      .           
     30 ( 0.00%)                  if nested {
      .                               // Correctly handle `self`
      7 ( 0.00%)                      if source.ident.name == kw::SelfLower {
      .                                   type_ns_only = true;
      .           
      .                                   if empty_for_self(&module_path) {
      .                                       self.r.report_error(
      .                                           use_tree.span,
      .                                           ResolutionError::SelfImportOnlyInImportListWithNonEmptyPrefix,
      .                                       );
      .                                       return;
-- line 472 ----------------------------------------
-- line 475 ----------------------------------------
      .                                   // Replace `use foo::{ self };` with `use foo;`
      .                                   source = module_path.pop().unwrap();
      .                                   if rename.is_none() {
      .                                       ident = source.ident;
      .                                   }
      .                               }
      .                           } else {
      .                               // Disallow `self`
      8 ( 0.00%)                      if source.ident.name == kw::SelfLower {
      .                                   let parent = module_path.last();
      .           
      .                                   let span = match parent {
      .                                       // only `::self` from `use foo::self as bar`
      .                                       Some(seg) => seg.ident.span.shrink_to_hi().to(source.ident.span),
      .                                       None => source.ident.span,
      .                                   };
      .                                   let span_with_rename = match rename {
-- line 491 ----------------------------------------
-- line 506 ----------------------------------------
      .                                       source = parent;
      .                                       if rename.is_none() {
      .                                           ident = source.ident;
      .                                       }
      .                                   }
      .                               }
      .           
      .                               // Disallow `use $crate;`
      8 ( 0.00%)                      if source.ident.name == kw::DollarCrate && module_path.is_empty() {
      .                                   let crate_root = self.r.resolve_crate_root(source.ident);
      .                                   let crate_name = match crate_root.kind {
      .                                       ModuleKind::Def(.., name) => name,
      .                                       ModuleKind::Block(..) => unreachable!(),
      .                                   };
      .                                   // HACK(eddyb) unclear how good this is, but keeping `$crate`
      .                                   // in `source` breaks `src/test/ui/imports/import-crate-var.rs`,
      .                                   // while the current crate doesn't have a valid `crate_name`.
-- line 522 ----------------------------------------
-- line 535 ----------------------------------------
      .           
      .                                   self.r
      .                                       .session
      .                                       .struct_span_err(item.span, "`$crate` may not be imported")
      .                                       .emit();
      .                               }
      .                           }
      .           
     23 ( 0.00%)                  if ident.name == kw::Crate {
      .                               self.r.session.span_err(
      .                                   ident.span,
      .                                   "crate root imports need to be explicitly named: \
      .                                    `use crate as name;`",
      .                               );
      .                           }
      .           
      .                           let kind = ImportKind::Single {
     75 ( 0.00%)                      source: source.ident,
      .                               target: ident,
      .                               source_bindings: PerNS {
      .                                   type_ns: Cell::new(Err(Determinacy::Undetermined)),
      .                                   value_ns: Cell::new(Err(Determinacy::Undetermined)),
      .                                   macro_ns: Cell::new(Err(Determinacy::Undetermined)),
      .                               },
      .                               target_bindings: PerNS {
      .                                   type_ns: Cell::new(None),
-- line 560 ----------------------------------------
-- line 562 ----------------------------------------
      .                                   macro_ns: Cell::new(None),
      .                               },
      .                               type_ns_only,
      .                               nested,
      .                               additional_ids: (id1, id2),
      .                           };
      .           
      .                           self.add_import(
     60 ( 0.00%)                      module_path,
    360 ( 0.00%)                      kind,
     30 ( 0.00%)                      use_tree.span,
      .                               id,
      .                               item,
      .                               root_span,
     60 ( 0.00%)                      item.id,
      .                               vis,
      .                           );
      .                       }
      .                       ast::UseTreeKind::Glob => {
      .                           let kind = ImportKind::Glob {
      5 ( 0.00%)                      is_prelude: self.r.session.contains_name(&item.attrs, sym::prelude_import),
      .                               max_vis: Cell::new(ty::Visibility::Invisible),
      .                           };
     15 ( 0.00%)                  self.add_import(prefix, kind, use_tree.span, id, item, root_span, item.id, vis);
      .                       }
      .                       ast::UseTreeKind::Nested(ref items) => {
      .                           // Ensure there is at most one `self` in the list
      .                           let self_spans = items
      .                               .iter()
      .                               .filter_map(|&(ref use_tree, _)| {
     23 ( 0.00%)                          if let ast::UseTreeKind::Simple(..) = use_tree.kind {
     21 ( 0.00%)                              if use_tree.ident().name == kw::SelfLower {
      .                                           return Some(use_tree.span);
      .                                       }
      .                                   }
      .           
      .                                   None
      .                               })
      .                               .collect::<Vec<_>>();
      9 ( 0.00%)                  if self_spans.len() > 1 {
      .                               let mut e = self.r.into_struct_error(
      .                                   self_spans[0],
      .                                   ResolutionError::SelfImportCanOnlyAppearOnceInTheList,
      .                               );
      .           
      .                               for other_span in self_spans.iter().skip(1) {
      .                                   e.span_label(*other_span, "another `self` import appears here");
      .                               }
      .           
      .                               e.emit();
      .                           }
      .           
     13 ( 0.00%)                  for &(ref tree, id) in items {
    105 ( 0.00%)                      self.build_reduced_graph_for_use_tree(
      .                                   // This particular use tree
      .                                   tree, id, &prefix, true, // The whole `use` item
      .                                   item, vis, root_span,
      .                               );
      .                           }
      .           
      .                           // Empty groups `a::b::{}` are turned into synthetic `self` imports
      .                           // `a::b::c::{self as _}`, so that their prefixes are correctly
      .                           // resolved and checked for privacy/stability/etc.
      3 ( 0.00%)                  if items.is_empty() && !empty_for_self(&prefix) {
      .                               let new_span = prefix[prefix.len() - 1].ident.span;
      .                               let tree = ast::UseTree {
      .                                   prefix: ast::Path::from_ident(Ident::new(kw::SelfLower, new_span)),
      .                                   kind: ast::UseTreeKind::Simple(
      .                                       Some(Ident::new(kw::Underscore, new_span)),
      .                                       ast::DUMMY_NODE_ID,
      .                                       ast::DUMMY_NODE_ID,
      .                                   ),
-- line 633 ----------------------------------------
-- line 642 ----------------------------------------
      .                                   // The whole `use` item
      .                                   item,
      .                                   ty::Visibility::Invisible,
      .                                   root_span,
      .                               );
      .                           }
      .                       }
      .                   }
    152 ( 0.00%)      }
      .           
      .               /// Constructs the reduced graph for one item.
      .               fn build_reduced_graph_for_item(&mut self, item: &'b Item) {
      .                   let parent_scope = &self.parent_scope;
      .                   let parent = parent_scope.module;
     82 ( 0.00%)          let expansion = parent_scope.expansion;
    123 ( 0.00%)          let ident = item.ident;
     82 ( 0.00%)          let sp = item.span;
     82 ( 0.00%)          let vis = self.resolve_visibility(&item.vis);
    123 ( 0.00%)          let local_def_id = self.r.local_def_id(item.id);
      .                   let def_id = local_def_id.to_def_id();
      .           
      .                   self.r.visibilities.insert(local_def_id, vis);
      .           
    229 ( 0.00%)          match item.kind {
     12 ( 0.00%)              ItemKind::Use(ref use_tree) => {
    132 ( 0.00%)                  self.build_reduced_graph_for_use_tree(
      .                               // This particular use tree
      .                               use_tree,
     12 ( 0.00%)                      item.id,
      .                               &[],
      .                               false,
      .                               // The whole `use` item
      .                               item,
      .                               vis,
      .                               use_tree.span,
      .                           );
      .                       }
      .           
      3 ( 0.00%)              ItemKind::ExternCrate(orig_name) => {
      .                           self.build_reduced_graph_for_extern_crate(
      .                               orig_name,
      .                               item,
      .                               local_def_id,
      .                               vis,
      .                               parent,
      .                           );
      .                       }
      .           
      .                       ItemKind::Mod(..) => {
     16 ( 0.00%)                  let module = self.r.new_module(
      .                               Some(parent),
      .                               ModuleKind::Def(DefKind::Mod, def_id, ident.name),
      .                               expansion.to_expn_id(),
      4 ( 0.00%)                      item.span,
      4 ( 0.00%)                      parent.no_implicit_prelude
     14 ( 0.00%)                          || self.r.session.contains_name(&item.attrs, sym::no_implicit_prelude),
      .                           );
     38 ( 0.00%)                  self.r.define(parent, ident, TypeNS, (module, vis, sp, expansion));
      .           
      .                           // Descend into the module.
      4 ( 0.00%)                  self.parent_scope.module = module;
      .                       }
      .           
      .                       // These items live in the value namespace.
      .                       ItemKind::Static(..) => {
      .                           let res = Res::Def(DefKind::Static, def_id);
      8 ( 0.00%)                  self.r.define(parent, ident, ValueNS, (res, vis, sp, expansion));
      .                       }
      .                       ItemKind::Const(..) => {
      .                           let res = Res::Def(DefKind::Const, def_id);
      5 ( 0.00%)                  self.r.define(parent, ident, ValueNS, (res, vis, sp, expansion));
      .                       }
      .                       ItemKind::Fn(..) => {
      .                           let res = Res::Def(DefKind::Fn, def_id);
    168 ( 0.00%)                  self.r.define(parent, ident, ValueNS, (res, vis, sp, expansion));
      .           
      .                           // Functions introducing procedural macros reserve a slot
      .                           // in the macro namespace as well (see #52225).
     32 ( 0.00%)                  self.define_macro(item);
      .                       }
      .           
      .                       // These items live in the type namespace.
      .                       ItemKind::TyAlias(..) => {
      .                           let res = Res::Def(DefKind::TyAlias, def_id);
      .                           self.r.define(parent, ident, TypeNS, (res, vis, sp, expansion));
      .                       }
      .           
      .                       ItemKind::Enum(_, _) => {
     16 ( 0.00%)                  let module = self.r.new_module(
      .                               Some(parent),
      .                               ModuleKind::Def(DefKind::Enum, def_id, ident.name),
      .                               expansion.to_expn_id(),
      .                               item.span,
      2 ( 0.00%)                      parent.no_implicit_prelude,
      .                           );
      .                           self.r.define(parent, ident, TypeNS, (module, vis, sp, expansion));
      .                           self.parent_scope.module = module;
      .                       }
      .           
      .                       ItemKind::TraitAlias(..) => {
      .                           let res = Res::Def(DefKind::TraitAlias, def_id);
      .                           self.r.define(parent, ident, TypeNS, (res, vis, sp, expansion));
      .                       }
      .           
      .                       // These items live in both the type and value namespaces.
      2 ( 0.00%)              ItemKind::Struct(ref vdata, _) => {
      .                           // Define a name in the type namespace.
      .                           let res = Res::Def(DefKind::Struct, def_id);
     50 ( 0.00%)                  self.r.define(parent, ident, TypeNS, (res, vis, sp, expansion));
      .           
      .                           // Record field names for error reporting.
      .                           self.insert_field_names_local(def_id, vdata);
      .           
      .                           // If this is a tuple or unit struct, define a name
      .                           // in the value namespace as well.
     12 ( 0.00%)                  if let Some(ctor_node_id) = vdata.ctor_id() {
      .                               // If the structure is marked as non_exhaustive then lower the visibility
      .                               // to within the crate.
      .                               let mut ctor_vis = if vis == ty::Visibility::Public
      .                                   && self.r.session.contains_name(&item.attrs, sym::non_exhaustive)
      .                               {
      .                                   ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX))
      .                               } else {
      .                                   vis
-- line 765 ----------------------------------------
-- line 825 ----------------------------------------
      .               fn build_reduced_graph_for_extern_crate(
      .                   &mut self,
      .                   orig_name: Option<Symbol>,
      .                   item: &Item,
      .                   local_def_id: LocalDefId,
      .                   vis: ty::Visibility,
      .                   parent: Module<'a>,
      .               ) {
     12 ( 0.00%)          let ident = item.ident;
      6 ( 0.00%)          let sp = item.span;
      6 ( 0.00%)          let parent_scope = self.parent_scope;
      .                   let expansion = parent_scope.expansion;
      .           
     21 ( 0.00%)          let (used, module, binding) = if orig_name.is_none() && ident.name == kw::SelfLower {
      .                       self.r
      .                           .session
      .                           .struct_span_err(item.span, "`extern crate self;` requires renaming")
      .                           .span_suggestion(
      .                               item.span,
      .                               "rename the `self` crate to be able to import it",
      .                               "extern crate self as name;".into(),
      .                               Applicability::HasPlaceholders,
      .                           )
      .                           .emit();
      .                       return;
      .                   } else if orig_name == Some(kw::SelfLower) {
      .                       Some(self.r.graph_root)
      .                   } else {
     18 ( 0.00%)              self.r.crate_loader.process_extern_crate(item, &self.r.definitions, local_def_id).map(
      3 ( 0.00%)                  |crate_id| {
      3 ( 0.00%)                      self.r.extern_crate_map.insert(local_def_id, crate_id);
     18 ( 0.00%)                      self.r.expect_module(crate_id.as_def_id())
      .                           },
      .                       )
      .                   }
      .                   .map(|module| {
      .                       let used = self.process_macro_use_imports(item, module);
      .                       let binding =
     33 ( 0.00%)                  (module, ty::Visibility::Public, sp, expansion).to_name_binding(self.r.arenas);
      .                       (used, Some(ModuleOrUniformRoot::Module(module)), binding)
      .                   })
      6 ( 0.00%)          .unwrap_or((true, None, self.r.dummy_binding));
     93 ( 0.00%)          let import = self.r.arenas.alloc_import(Import {
      .                       kind: ImportKind::ExternCrate { source: orig_name, target: ident },
      3 ( 0.00%)              root_id: item.id,
      .                       id: item.id,
     18 ( 0.00%)              parent_scope: self.parent_scope,
      .                       imported_module: Cell::new(module),
      .                       has_attributes: !item.attrs.is_empty(),
      6 ( 0.00%)              use_span_with_attributes: item.span_with_attributes(),
      3 ( 0.00%)              use_span: item.span,
      .                       root_span: item.span,
      .                       span: item.span,
      .                       module_path: Vec::new(),
      .                       vis: Cell::new(vis),
      .                       used: Cell::new(used),
      .                   });
      3 ( 0.00%)          self.r.potentially_unused_imports.push(import);
     15 ( 0.00%)          let imported_binding = self.r.import(binding, import);
      6 ( 0.00%)          if ptr::eq(parent, self.r.graph_root) {
     33 ( 0.00%)              if let Some(entry) = self.r.extern_prelude.get(&ident.normalize_to_macros_2_0()) {
      .                           if expansion != LocalExpnId::ROOT
      .                               && orig_name.is_some()
      .                               && entry.extern_crate_item.is_none()
      .                           {
      .                               let msg = "macro-expanded `extern crate` items cannot \
      .                                                  shadow names passed with `--extern`";
      .                               self.r.session.span_err(item.span, msg);
      .                           }
      .                       }
     18 ( 0.00%)              let entry = self.r.extern_prelude.entry(ident.normalize_to_macros_2_0()).or_insert(
      .                           ExternPreludeEntry { extern_crate_item: None, introduced_by_item: true },
      .                       );
      3 ( 0.00%)              entry.extern_crate_item = Some(imported_binding);
      3 ( 0.00%)              if orig_name.is_some() {
      .                           entry.introduced_by_item = true;
      .                       }
      .                   }
     18 ( 0.00%)          self.r.define(parent, ident, TypeNS, imported_binding);
      .               }
      .           
      .               /// Constructs the reduced graph for one foreign item.
      .               fn build_reduced_graph_for_foreign_item(&mut self, item: &ForeignItem) {
      8 ( 0.00%)          let local_def_id = self.r.local_def_id(item.id);
      .                   let def_id = local_def_id.to_def_id();
     28 ( 0.00%)          let (def_kind, ns) = match item.kind {
      .                       ForeignItemKind::Fn(..) => (DefKind::Fn, ValueNS),
      .                       ForeignItemKind::Static(..) => (DefKind::Static, ValueNS),
      .                       ForeignItemKind::TyAlias(..) => (DefKind::ForeignTy, TypeNS),
      .                       ForeignItemKind::MacCall(_) => unreachable!(),
      .                   };
      8 ( 0.00%)          let parent = self.parent_scope.module;
      8 ( 0.00%)          let expansion = self.parent_scope.expansion;
      8 ( 0.00%)          let vis = self.resolve_visibility(&item.vis);
      4 ( 0.00%)          let res = Res::Def(def_kind, def_id);
     72 ( 0.00%)          self.r.define(parent, item.ident, ns, (res, vis, item.span, expansion));
      .                   self.r.visibilities.insert(local_def_id, vis);
      .               }
      .           
      .               fn build_reduced_graph_for_block(&mut self, block: &Block) {
      .                   let parent = self.parent_scope.module;
     39 ( 0.00%)          let expansion = self.parent_scope.expansion;
      .                   if self.block_needs_anonymous_module(block) {
      6 ( 0.00%)              let module = self.r.new_module(
      .                           Some(parent),
      4 ( 0.00%)                  ModuleKind::Block(block.id),
      .                           expansion.to_expn_id(),
      .                           block.span,
      2 ( 0.00%)                  parent.no_implicit_prelude,
      .                       );
      .                       self.r.block_map.insert(block.id, module);
      2 ( 0.00%)              self.parent_scope.module = module; // Descend into the block.
      .                   }
      .               }
      .           
      .               /// Builds the reduced graph for a single item in an external crate.
 48,208 ( 0.03%)      fn build_reduced_graph_for_external_crate_res(&mut self, child: ModChild) {
  6,026 ( 0.00%)          let parent = self.parent_scope.module;
 36,156 ( 0.02%)          let ModChild { ident, res, vis, span } = child;
 30,130 ( 0.02%)          let res = res.expect_non_local();
 12,052 ( 0.01%)          let expansion = self.parent_scope.expansion;
      .                   // Record primary definitions.
 30,130 ( 0.02%)          match res {
      .                       Res::Def(DefKind::Mod | DefKind::Enum | DefKind::Trait, def_id) => {
    444 ( 0.00%)                  let module = self.r.expect_module(def_id);
  6,216 ( 0.00%)                  self.r.define(parent, ident, TypeNS, (module, vis, span, expansion));
      .                       }
      .                       Res::Def(
      .                           DefKind::Struct
      .                           | DefKind::Union
      .                           | DefKind::Variant
      .                           | DefKind::TyAlias
      .                           | DefKind::ForeignTy
      .                           | DefKind::OpaqueTy
      .                           | DefKind::TraitAlias
      .                           | DefKind::AssocTy,
      .                           _,
      .                       )
      .                       | Res::PrimTy(..)
 11,502 ( 0.01%)              | Res::ToolMod => self.r.define(parent, ident, TypeNS, (res, vis, span, expansion)),
      .                       Res::Def(
      .                           DefKind::Fn
      .                           | DefKind::AssocFn
      .                           | DefKind::Static
      .                           | DefKind::Const
      .                           | DefKind::AssocConst
      .                           | DefKind::Ctor(..),
      .                           _,
144,449 ( 0.08%)              ) => self.r.define(parent, ident, ValueNS, (res, vis, span, expansion)),
      .                       Res::Def(DefKind::Macro(..), _) | Res::NonMacroAttr(..) => {
  4,900 ( 0.00%)                  self.r.define(parent, ident, MacroNS, (res, vis, span, expansion))
      .                       }
      .                       Res::Def(
      .                           DefKind::TyParam
      .                           | DefKind::ConstParam
      .                           | DefKind::ExternCrate
      .                           | DefKind::Use
      .                           | DefKind::ForeignMod
      .                           | DefKind::AnonConst
-- line 983 ----------------------------------------
-- line 992 ----------------------------------------
      .                       )
      .                       | Res::Local(..)
      .                       | Res::SelfTy(..)
      .                       | Res::SelfCtor(..)
      .                       | Res::Err => bug!("unexpected resolution: {:?}", res),
      .                   }
      .                   // Record some extra data for better diagnostics.
      .                   let cstore = self.r.cstore();
 58,017 ( 0.03%)          match res {
    891 ( 0.00%)              Res::Def(DefKind::Struct, def_id) => {
      .                           let field_names =
  1,782 ( 0.00%)                      cstore.struct_field_names_untracked(def_id, self.r.session).collect();
  2,079 ( 0.00%)                  let ctor = cstore.ctor_def_id_and_kind_untracked(def_id);
    594 ( 0.00%)                  if let Some((ctor_def_id, ctor_kind)) = ctor {
      .                               let ctor_res = Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);
    135 ( 0.00%)                      let ctor_vis = cstore.visibility_untracked(ctor_def_id);
      .                               let field_visibilities =
    108 ( 0.00%)                          cstore.struct_field_visibilities_untracked(def_id).collect();
      .                               self.r
      .                                   .struct_constructors
      .                                   .insert(def_id, (ctor_res, ctor_vis, field_visibilities));
      .                           }
      .                           self.insert_field_names(def_id, field_names);
      .                       }
     15 ( 0.00%)              Res::Def(DefKind::Union, def_id) => {
      .                           let field_names =
     35 ( 0.00%)                      cstore.struct_field_names_untracked(def_id, self.r.session).collect();
      .                           self.insert_field_names(def_id, field_names);
      .                       }
    230 ( 0.00%)              Res::Def(DefKind::AssocFn, def_id) => {
    690 ( 0.00%)                  if cstore.fn_has_self_parameter_untracked(def_id) {
      .                               self.r.has_self.insert(def_id);
      .                           }
      .                       }
      .                       _ => {}
      .                   }
 47,320 ( 0.03%)      }
      .           
    432 ( 0.00%)      fn add_macro_use_binding(
      .                   &mut self,
      .                   name: Symbol,
      .                   binding: &'a NameBinding<'a>,
      .                   span: Span,
      .                   allow_shadowing: bool,
      .               ) {
    216 ( 0.00%)          if self.r.macro_use_prelude.insert(name, binding).is_some() && !allow_shadowing {
      .                       let msg = format!("`{}` is already in scope", name);
      .                       let note =
      .                           "macro-expanded `#[macro_use]`s may not shadow existing macros (see RFC 1560)";
      .                       self.r.session.struct_span_err(span, &msg).note(note).emit();
      .                   }
    324 ( 0.00%)      }
      .           
      .               /// Returns `true` if we should consider the underlying `extern crate` to be used.
      .               fn process_macro_use_imports(&mut self, item: &Item, module: Module<'a>) -> bool {
      .                   let mut import_all = None;
      .                   let mut single_imports = Vec::new();
      .                   for attr in &item.attrs {
      2 ( 0.00%)              if attr.has_name(sym::macro_use) {
      4 ( 0.00%)                  if self.parent_scope.module.parent.is_some() {
      .                               struct_span_err!(
      .                                   self.r.session,
      .                                   item.span,
      .                                   E0468,
      .                                   "an `extern crate` loading macros must be at the crate root"
      .                               )
      .                               .emit();
      .                           }
      8 ( 0.00%)                  if let ItemKind::ExternCrate(Some(orig_name)) = item.kind {
      .                               if orig_name == kw::SelfLower {
      .                                   self.r
      .                                       .session
      .                                       .struct_span_err(
      .                                           attr.span,
      .                                           "`#[macro_use]` is not supported on `extern crate self`",
      .                                       )
      .                                       .emit();
      .                               }
      .                           }
      .                           let ill_formed =
      6 ( 0.00%)                      |span| struct_span_err!(self.r.session, span, E0466, "bad macro import").emit();
     10 ( 0.00%)                  match attr.meta() {
     44 ( 0.00%)                      Some(meta) => match meta.kind {
      .                                   MetaItemKind::Word => {
      4 ( 0.00%)                              import_all = Some(meta.span);
      .                                       break;
      .                                   }
      .                                   MetaItemKind::List(nested_metas) => {
      .                                       for nested_meta in nested_metas {
      .                                           match nested_meta.ident() {
      .                                               Some(ident) if nested_meta.is_word() => {
      .                                                   single_imports.push(ident)
      .                                               }
      .                                               _ => ill_formed(nested_meta.span()),
      .                                           }
      .                                       }
      .                                   }
      .                                   MetaItemKind::NameValue(..) => ill_formed(meta.span),
      4 ( 0.00%)                      },
      .                               None => ill_formed(attr.span),
      .                           }
      .                       }
      .                   }
      .           
      .                   let macro_use_import = |this: &Self, span| {
     40 ( 0.00%)              this.r.arenas.alloc_import(Import {
      .                           kind: ImportKind::MacroUse,
      2 ( 0.00%)                  root_id: item.id,
      .                           id: item.id,
     12 ( 0.00%)                  parent_scope: this.parent_scope,
      .                           imported_module: Cell::new(Some(ModuleOrUniformRoot::Module(module))),
      2 ( 0.00%)                  use_span_with_attributes: item.span_with_attributes(),
      .                           has_attributes: !item.attrs.is_empty(),
      2 ( 0.00%)                  use_span: item.span,
      .                           root_span: span,
      .                           span,
      .                           module_path: Vec::new(),
      .                           vis: Cell::new(ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX))),
      .                           used: Cell::new(false),
      .                       })
      .                   };
      .           
     12 ( 0.00%)          let allow_shadowing = self.parent_scope.expansion == LocalExpnId::ROOT;
      8 ( 0.00%)          if let Some(span) = import_all {
      .                       let import = macro_use_import(self, span);
      2 ( 0.00%)              self.r.potentially_unused_imports.push(import);
     18 ( 0.00%)              module.for_each_child(self, |this, ident, ns, binding| {
    204 ( 0.00%)                  if ns == MacroNS {
    162 ( 0.00%)                      let imported_binding = this.r.import(binding, import);
    432 ( 0.00%)                      this.add_macro_use_binding(ident.name, imported_binding, span, allow_shadowing);
      .                           }
      .                       });
      .                   } else {
      .                       for ident in single_imports.iter().cloned() {
      .                           let result = self.r.resolve_ident_in_module(
      .                               ModuleOrUniformRoot::Module(module),
      .                               ident,
      .                               MacroNS,
-- line 1129 ----------------------------------------
-- line 1146 ----------------------------------------
      .                                   .emit();
      .                           }
      .                       }
      .                   }
      .                   import_all.is_some() || !single_imports.is_empty()
      .               }
      .           
      .               /// Returns `true` if this attribute list contains `macro_use`.
     15 ( 0.00%)      fn contains_macro_use(&mut self, attrs: &[ast::Attribute]) -> bool {
      .                   for attr in attrs {
      8 ( 0.00%)              if attr.has_name(sym::macro_escape) {
      .                           let msg = "`#[macro_escape]` is a deprecated synonym for `#[macro_use]`";
      .                           let mut err = self.r.session.struct_span_warn(attr.span, msg);
      .                           if let ast::AttrStyle::Inner = attr.style {
      .                               err.help("try an outer attribute: `#[macro_use]`").emit();
      .                           } else {
      .                               err.emit();
      .                           }
      .                       } else if !attr.has_name(sym::macro_use) {
-- line 1164 ----------------------------------------
-- line 1167 ----------------------------------------
      .           
      .                       if !attr.is_word() {
      .                           self.r.session.span_err(attr.span, "arguments to `macro_use` are not allowed here");
      .                       }
      .                       return true;
      .                   }
      .           
      .                   false
     21 ( 0.00%)      }
      .           
      .               fn visit_invoc(&mut self, id: NodeId) -> LocalExpnId {
     38 ( 0.00%)          let invoc_id = id.placeholder_to_expn_id();
      9 ( 0.00%)          let old_parent_scope = self.r.invocation_parent_scopes.insert(invoc_id, self.parent_scope);
     13 ( 0.00%)          assert!(old_parent_scope.is_none(), "invocation data is reset for an invocation");
      .                   invoc_id
      .               }
      .           
      .               /// Visit invocation in context in which it can emit a named item (possibly `macro_rules`)
      .               /// directly into its parent scope's module.
     54 ( 0.00%)      fn visit_invoc_in_module(&mut self, id: NodeId) -> MacroRulesScopeRef<'a> {
      .                   let invoc_id = self.visit_invoc(id);
      9 ( 0.00%)          self.parent_scope.module.unexpanded_invocations.borrow_mut().insert(invoc_id);
     27 ( 0.00%)          self.r.arenas.alloc_macro_rules_scope(MacroRulesScope::Invocation(invoc_id))
     54 ( 0.00%)      }
      .           
      .               fn proc_macro_stub(&self, item: &ast::Item) -> Option<(MacroKind, Ident, Span)> {
     48 ( 0.00%)          if self.r.session.contains_name(&item.attrs, sym::proc_macro) {
      .                       return Some((MacroKind::Bang, item.ident, item.span));
     40 ( 0.00%)          } else if self.r.session.contains_name(&item.attrs, sym::proc_macro_attribute) {
      .                       return Some((MacroKind::Attr, item.ident, item.span));
     40 ( 0.00%)          } else if let Some(attr) = self.r.session.find_by_name(&item.attrs, sym::proc_macro_derive)
      .                   {
      .                       if let Some(nested_meta) = attr.meta_item_list().and_then(|list| list.get(0).cloned()) {
      .                           if let Some(ident) = nested_meta.ident() {
      .                               return Some((MacroKind::Derive, ident, ident.span));
      .                           }
      .                       }
      .                   }
      .                   None
-- line 1205 ----------------------------------------
-- line 1209 ----------------------------------------
      .               // Macro uses will remove items from this set, and the remaining
      .               // items will be reported as `unused_macros`.
      .               fn insert_unused_macro(&mut self, ident: Ident, def_id: LocalDefId, node_id: NodeId) {
      .                   if !ident.as_str().starts_with('_') {
      .                       self.r.unused_macros.insert(def_id, (node_id, ident));
      .                   }
      .               }
      .           
     81 ( 0.00%)      fn define_macro(&mut self, item: &ast::Item) -> MacroRulesScopeRef<'a> {
     36 ( 0.00%)          let parent_scope = self.parent_scope;
      .                   let expansion = parent_scope.expansion;
     36 ( 0.00%)          let def_id = self.r.local_def_id(item.id);
     39 ( 0.00%)          let (ext, ident, span, macro_rules) = match &item.kind {
      .                       ItemKind::MacroDef(def) => {
      7 ( 0.00%)                  let ext = Lrc::new(self.r.compile_macro(item, self.r.session.edition()));
      6 ( 0.00%)                  (ext, item.ident, item.span, def.macro_rules)
      3 ( 0.00%)              }
      .                       ItemKind::Fn(..) => match self.proc_macro_stub(item) {
      .                           Some((macro_kind, ident, span)) => {
      .                               self.r.proc_macro_stubs.insert(def_id);
      .                               (self.r.dummy_ext(macro_kind), ident, span, false)
      .                           }
      .                           None => return parent_scope.macro_rules,
      .                       },
      .                       _ => unreachable!(),
      .                   };
      .           
      1 ( 0.00%)          let res = Res::Def(DefKind::Macro(ext.macro_kind()), def_id.to_def_id());
      .                   self.r.macro_map.insert(def_id.to_def_id(), ext);
      .                   self.r.local_macro_def_scopes.insert(def_id, parent_scope.module);
      .           
      2 ( 0.00%)          if macro_rules {
      1 ( 0.00%)              let ident = ident.normalize_to_macros_2_0();
      .                       self.r.macro_names.insert(ident);
      5 ( 0.00%)              let is_macro_export = self.r.session.contains_name(&item.attrs, sym::macro_export);
      4 ( 0.00%)              let vis = if is_macro_export {
      .                           ty::Visibility::Public
      .                       } else {
      .                           ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX))
      .                       };
      1 ( 0.00%)              let binding = (res, vis, span, expansion).to_name_binding(self.r.arenas);
      .                       self.r.set_binding_parent_module(binding, parent_scope.module);
      .                       self.r.all_macros.insert(ident.name, res);
      2 ( 0.00%)              if is_macro_export {
      1 ( 0.00%)                  let module = self.r.graph_root;
     20 ( 0.00%)                  self.r.define(module, ident, MacroNS, (res, vis, span, expansion, IsMacroExport));
      .                       } else {
      .                           self.r.check_reserved_macro_name(ident, res);
      .                           self.insert_unused_macro(ident, def_id, item.id);
      .                       }
      .                       self.r.visibilities.insert(def_id, vis);
      1 ( 0.00%)              self.r.arenas.alloc_macro_rules_scope(MacroRulesScope::Binding(
      .                           self.r.arenas.alloc_macro_rules_binding(MacroRulesBinding {
      .                               parent_macro_rules_scope: parent_scope.macro_rules,
      .                               binding,
      .                               ident,
      .                           }),
      .                       ))
      .                   } else {
      .                       let module = parent_scope.module;
-- line 1268 ----------------------------------------
-- line 1276 ----------------------------------------
      .                       };
      .                       if vis != ty::Visibility::Public {
      .                           self.insert_unused_macro(ident, def_id, item.id);
      .                       }
      .                       self.r.define(module, ident, MacroNS, (res, vis, span, expansion));
      .                       self.r.visibilities.insert(def_id, vis);
      .                       self.parent_scope.macro_rules
      .                   }
     72 ( 0.00%)      }
      .           }
      .           
      .           macro_rules! method {
      .               ($visit:ident: $ty:ty, $invoc:path, $walk:ident) => {
     12 ( 0.00%)          fn $visit(&mut self, node: &'b $ty) {
  1,176 ( 0.00%)              if let $invoc(..) = node.kind {
      4 ( 0.00%)                  self.visit_invoc(node.id);
      .                       } else {
  1,313 ( 0.00%)                  visit::$walk(self, node);
      .                       }
      .                   }
      .               };
      .           }
      .           
      .           impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {
      .               method!(visit_expr: ast::Expr, ast::ExprKind::MacCall, walk_expr);
      .               method!(visit_pat: ast::Pat, ast::PatKind::MacCall, walk_pat);
      .               method!(visit_ty: ast::Ty, ast::TyKind::MacCall, walk_ty);
      .           
    450 ( 0.00%)      fn visit_item(&mut self, item: &'b Item) {
     50 ( 0.00%)          let orig_module_scope = self.parent_scope.module;
    284 ( 0.00%)          self.parent_scope.macro_rules = match item.kind {
      .                       ItemKind::MacroDef(..) => {
      4 ( 0.00%)                  let macro_rules_scope = self.define_macro(item);
      .                           visit::walk_item(self, item);
      .                           macro_rules_scope
      .                       }
      .                       ItemKind::MacCall(..) => {
     24 ( 0.00%)                  let macro_rules_scope = self.visit_invoc_in_module(item.id);
      .                           visit::walk_item(self, item);
      .                           macro_rules_scope
      .                       }
      .                       _ => {
     82 ( 0.00%)                  let orig_macro_rules_scope = self.parent_scope.macro_rules;
      .                           self.build_reduced_graph_for_item(item);
    123 ( 0.00%)                  visit::walk_item(self, item);
     82 ( 0.00%)                  match item.kind {
     12 ( 0.00%)                      ItemKind::Mod(..) if self.contains_macro_use(&item.attrs) => {
      .                                   self.parent_scope.macro_rules
      .                               }
      .                               _ => orig_macro_rules_scope,
      .                           }
      .                       }
      .                   };
     50 ( 0.00%)          self.parent_scope.module = orig_module_scope;
    400 ( 0.00%)      }
      .           
      .               fn visit_stmt(&mut self, stmt: &'b ast::Stmt) {
    128 ( 0.00%)          if let ast::StmtKind::MacCall(..) = stmt.kind {
      4 ( 0.00%)              self.parent_scope.macro_rules = self.visit_invoc_in_module(stmt.id);
      .                   } else {
    186 ( 0.00%)              visit::walk_stmt(self, stmt);
      .                   }
      .               }
      .           
     36 ( 0.00%)      fn visit_foreign_item(&mut self, foreign_item: &'b ForeignItem) {
     12 ( 0.00%)          if let ForeignItemKind::MacCall(_) = foreign_item.kind {
      .                       self.visit_invoc_in_module(foreign_item.id);
      .                       return;
      .                   }
      .           
      .                   self.build_reduced_graph_for_foreign_item(foreign_item);
     40 ( 0.00%)          visit::walk_foreign_item(self, foreign_item);
      .               }
      .           
    351 ( 0.00%)      fn visit_block(&mut self, block: &'b Block) {
     39 ( 0.00%)          let orig_current_module = self.parent_scope.module;
     78 ( 0.00%)          let orig_current_macro_rules_scope = self.parent_scope.macro_rules;
      .                   self.build_reduced_graph_for_block(block);
      .                   visit::walk_block(self, block);
     78 ( 0.00%)          self.parent_scope.module = orig_current_module;
     39 ( 0.00%)          self.parent_scope.macro_rules = orig_current_macro_rules_scope;
    312 ( 0.00%)      }
      .           
    140 ( 0.00%)      fn visit_assoc_item(&mut self, item: &'b AssocItem, ctxt: AssocCtxt) {
     28 ( 0.00%)          if let AssocItemKind::MacCall(_) = item.kind {
      .                       match ctxt {
      .                           AssocCtxt::Trait => {
      .                               self.visit_invoc_in_module(item.id);
      .                           }
      .                           AssocCtxt::Impl => {
      .                               self.visit_invoc(item.id);
      .                           }
      .                       }
      .                       return;
      .                   }
      .           
     28 ( 0.00%)          let vis = self.resolve_visibility(&item.vis);
     42 ( 0.00%)          let local_def_id = self.r.local_def_id(item.id);
      .                   let def_id = local_def_id.to_def_id();
      .           
     70 ( 0.00%)          if !(ctxt == AssocCtxt::Impl
      .                       && matches!(item.vis.kind, ast::VisibilityKind::Inherited)
      7 ( 0.00%)              && self
      .                           .r
      .                           .trait_impl_items
      7 ( 0.00%)                  .contains(&ty::DefIdTree::parent(&*self.r, def_id).unwrap().expect_local()))
      .                   {
      .                       // Trait impl item visibility is inherited from its trait when not specified
      .                       // explicitly. In that case we cannot determine it here in early resolve,
      .                       // so we leave a hole in the visibility table to be filled later.
      .                       self.r.visibilities.insert(local_def_id, vis);
      .                   }
      .           
     28 ( 0.00%)          if ctxt == AssocCtxt::Trait {
      .                       let (def_kind, ns) = match item.kind {
      .                           AssocItemKind::Const(..) => (DefKind::AssocConst, ValueNS),
      .                           AssocItemKind::Fn(box Fn { ref sig, .. }) => {
      .                               if sig.decl.has_self() {
      .                                   self.r.has_self.insert(def_id);
      .                               }
      .                               (DefKind::AssocFn, ValueNS)
      .                           }
-- line 1397 ----------------------------------------
-- line 1400 ----------------------------------------
      .                       };
      .           
      .                       let parent = self.parent_scope.module;
      .                       let expansion = self.parent_scope.expansion;
      .                       let res = Res::Def(def_kind, def_id);
      .                       self.r.define(parent, item.ident, ns, (res, vis, item.span, expansion));
      .                   }
      .           
     56 ( 0.00%)          visit::walk_assoc_item(self, item, ctxt);
    112 ( 0.00%)      }
      .           
    318 ( 0.00%)      fn visit_attribute(&mut self, attr: &'b ast::Attribute) {
    288 ( 0.00%)          if !attr.is_doc_comment() && attr::is_builtin_attr(attr) {
     19 ( 0.00%)              self.r
      .                           .builtin_attrs
    228 ( 0.00%)                  .push((attr.get_normal_item().path.segments[0].ident, self.parent_scope));
      .                   }
    371 ( 0.00%)          visit::walk_attribute(self, attr);
      .               }
      .           
      .               fn visit_arm(&mut self, arm: &'b ast::Arm) {
     50 ( 0.00%)          if arm.is_placeholder {
      .                       self.visit_invoc(arm.id);
      .                   } else {
     20 ( 0.00%)              visit::walk_arm(self, arm);
      .                   }
      .               }
      .           
      .               fn visit_expr_field(&mut self, f: &'b ast::ExprField) {
     32 ( 0.00%)          if f.is_placeholder {
      .                       self.visit_invoc(f.id);
      .                   } else {
      8 ( 0.00%)              visit::walk_expr_field(self, f);
      .                   }
      .               }
      .           
      .               fn visit_pat_field(&mut self, fp: &'b ast::PatField) {
     28 ( 0.00%)          if fp.is_placeholder {
      .                       self.visit_invoc(fp.id);
      .                   } else {
     12 ( 0.00%)              visit::walk_pat_field(self, fp);
      .                   }
      .               }
      .           
      .               fn visit_generic_param(&mut self, param: &'b ast::GenericParam) {
     23 ( 0.00%)          if param.is_placeholder {
      .                       self.visit_invoc(param.id);
      .                   } else {
     12 ( 0.00%)              visit::walk_generic_param(self, param);
      .                   }
      .               }
      .           
      .               fn visit_param(&mut self, p: &'b ast::Param) {
    166 ( 0.00%)          if p.is_placeholder {
      .                       self.visit_invoc(p.id);
      .                   } else {
     84 ( 0.00%)              visit::walk_param(self, p);
      .                   }
      .               }
      .           
     32 ( 0.00%)      fn visit_field_def(&mut self, sf: &'b ast::FieldDef) {
      8 ( 0.00%)          if sf.is_placeholder {
      .                       self.visit_invoc(sf.id);
      .                   } else {
      8 ( 0.00%)              let vis = self.resolve_visibility(&sf.vis);
     12 ( 0.00%)              self.r.visibilities.insert(self.r.local_def_id(sf.id), vis);
     36 ( 0.00%)              visit::walk_field_def(self, sf);
      .                   }
      .               }
      .           
      .               // Constructs the reduced graph for one variant. Variants exist in the
      .               // type and value namespaces.
     36 ( 0.00%)      fn visit_variant(&mut self, variant: &'b ast::Variant) {
      8 ( 0.00%)          if variant.is_placeholder {
      .                       self.visit_invoc_in_module(variant.id);
      .                       return;
      .                   }
      .           
      4 ( 0.00%)          let parent = self.parent_scope.module;
      8 ( 0.00%)          let expn_id = self.parent_scope.expansion;
     12 ( 0.00%)          let ident = variant.ident;
      .           
      .                   // Define a name in the type namespace.
      8 ( 0.00%)          let def_id = self.r.local_def_id(variant.id);
      .                   let res = Res::Def(DefKind::Variant, def_id.to_def_id());
      8 ( 0.00%)          let vis = self.resolve_visibility(&variant.vis);
     84 ( 0.00%)          self.r.define(parent, ident, TypeNS, (res, vis, variant.span, expn_id));
      .                   self.r.visibilities.insert(def_id, vis);
      .           
      .                   // If the variant is marked as non_exhaustive then lower the visibility to within the crate.
     24 ( 0.00%)          let ctor_vis = if vis == ty::Visibility::Public
     16 ( 0.00%)              && self.r.session.contains_name(&variant.attrs, sym::non_exhaustive)
      .                   {
      .                       ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX))
      .                   } else {
      .                       vis
      .                   };
      .           
      .                   // Define a constructor name in the value namespace.
      .                   // Braced variants, unlike structs, generate unusable names in
      .                   // value namespace, they are reserved for possible future use.
      .                   // It's ok to use the variant's id as a ctor id since an
      .                   // error will be reported on any use of such resolution anyway.
     12 ( 0.00%)          let ctor_node_id = variant.data.ctor_id().unwrap_or(variant.id);
      .                   let ctor_def_id = self.r.local_def_id(ctor_node_id);
      8 ( 0.00%)          let ctor_kind = CtorKind::from_ast(&variant.data);
      .                   let ctor_res = Res::Def(DefKind::Ctor(CtorOf::Variant, ctor_kind), ctor_def_id.to_def_id());
     76 ( 0.00%)          self.r.define(parent, ident, ValueNS, (ctor_res, ctor_vis, variant.span, expn_id));
      4 ( 0.00%)          if ctor_def_id != def_id {
      .                       self.r.visibilities.insert(ctor_def_id, ctor_vis);
      .                   }
      .                   // Record field names for error reporting.
      .                   self.insert_field_names_local(ctor_def_id.to_def_id(), &variant.data);
      .           
     40 ( 0.00%)          visit::walk_variant(self, variant);
      .               }
      .           
      .               fn visit_crate(&mut self, krate: &'b ast::Crate) {
      2 ( 0.00%)          if krate.is_placeholder {
      .                       self.visit_invoc_in_module(krate.id);
      .                   } else {
      .                       visit::walk_crate(self, krate);
     11 ( 0.00%)              self.contains_macro_use(&krate.attrs);
      .                   }
      .               }
      .           }

 20,423 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/build_reduced_graph.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 70 ----------------------------------------
        .           
        .                   impl<'a, T> $name<'a, T> {
        .                       // Helper function for creating a slice from the iterator.
        .                       #[inline(always)]
        .                       fn make_slice(&self) -> &'a [T] {
        .                           // SAFETY: the iterator was created from a slice with pointer
        .                           // `self.ptr` and length `len!(self)`. This guarantees that all
        .                           // the prerequisites for `from_raw_parts` are fulfilled.
    6,873 ( 0.00%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
        .                       }
        .           
        .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
        .                       // returning the old start.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
        .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               let old = self.ptr.as_ptr();
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
   31,812 ( 0.02%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
        .                               old
        .                           }
        .                       }
        .           
        .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
        .                       // returning the new end.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
-- line 101 ----------------------------------------
-- line 102 ----------------------------------------
        .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
        .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
       21 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
        .                               self.end
        .                           }
        .                       }
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<T> ExactSizeIterator for $name<'_, T> {
        .                       #[inline(always)]
        .                       fn len(&self) -> usize {
    3,796 ( 0.00%)                  len!(self)
        .                       }
        .           
        .                       #[inline(always)]
        .                       fn is_empty(&self) -> bool {
        .                           is_empty!(self)
        .                       }
        .                   }
        .           
-- line 128 ----------------------------------------
-- line 134 ----------------------------------------
        .                       fn next(&mut self) -> Option<$elem> {
        .                           // could be implemented with slices, but this avoids bounds checks
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer
        .                           // must be non-null, and slices over non-ZSTs must also have a
        .                           // non-null end pointer. The call to `next_unchecked!` is safe
        .                           // since we check if the iterator is empty first.
        .                           unsafe {
    8,185 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
    6,148 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
3,579,508 ( 1.97%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
        .                                   Some(next_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
        .                       fn size_hint(&self) -> (usize, Option<usize>) {
   37,926 ( 0.02%)                  let exact = len!(self);
        .                           (exact, Some(exact))
        .                       }
        .           
        .                       #[inline]
        .                       fn count(self) -> usize {
        .                           len!(self)
        .                       }
        .           
        .                       #[inline]
        .                       fn nth(&mut self, n: usize) -> Option<$elem> {
      662 ( 0.00%)                  if n >= len!(self) {
        .                               // This iterator is now empty.
        .                               if mem::size_of::<T>() == 0 {
        .                                   // We have to do it this way as `ptr` may never be 0, but `end`
        .                                   // could be (due to wrapping).
        .                                   self.end = self.ptr.as_ptr();
        .                               } else {
        .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
        .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
        .                       // faster to compile.
        .                       #[inline]
        .                       fn for_each<F>(mut self, mut f: F)
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item),
        .                       {
        .                           while let Some(x) = self.next() {
      207 ( 0.00%)                      f(x);
        .                           }
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn all<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
       86 ( 0.00%)                  while let Some(x) = self.next() {
    3,760 ( 0.00%)                      if !f(x) {
        .                                   return false;
        .                               }
        .                           }
        .                           true
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        8 ( 0.00%)              fn any<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
   15,791 ( 0.01%)                  while let Some(x) = self.next() {
   19,011 ( 0.01%)                      if f(x) {
        .                                   return true;
        .                               }
        .                           }
        .                           false
        8 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
        .                       where
        .                           Self: Sized,
        .                           P: FnMut(&Self::Item) -> bool,
        .                       {
      891 ( 0.00%)                  while let Some(x) = self.next() {
    5,966 ( 0.00%)                      if predicate(&x) {
        .                                   return Some(x);
        .                               }
        .                           }
        .                           None
      592 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> Option<B>,
        .                       {
    2,895 ( 0.00%)                  while let Some(x) = self.next() {
    6,493 ( 0.00%)                      if let Some(y) = f(x) {
      705 ( 0.00%)                          return Some(y);
        .                               }
        .                           }
        .                           None
      360 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       #[rustc_inherit_overflow_checks]
        .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           Self: Sized,
        .                           P: FnMut(Self::Item) -> bool,
        .                       {
        .                           let n = len!(self);
        .                           let mut i = 0;
        .                           while let Some(x) = self.next() {
    6,917 ( 0.00%)                      if predicate(x) {
        .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
        .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                               i += 1;
        .                           }
        .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           P: FnMut(Self::Item) -> bool,
        .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
        .                       {
        .                           let n = len!(self);
        .                           let mut i = n;
      893 ( 0.00%)                  while let Some(x) = self.next_back() {
   11,783 ( 0.01%)                      i -= 1;
   10,550 ( 0.01%)                      if predicate(x) {
        .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
        .                                   // and is only decreasing.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                           }
        .                           None
        .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
        .                           // the returned references is guaranteed to refer to an element
        .                           // of the slice and thus guaranteed to be valid.
        .                           //
        .                           // Also note that the caller also guarantees that we're never
        .                           // called with the same index again, and that no other methods
        .                           // that will access this subslice are called, so it is valid
        .                           // for the returned reference to be mutable in the case of
        .                           // `IterMut`
    2,307 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
        .                       }
        .           
        .                       $($extra)*
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
        .                       #[inline]
-- line 348 ----------------------------------------
-- line 351 ----------------------------------------
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
        .                           // and slices over non-ZSTs must also have a non-null end pointer.
        .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
        .                           // empty first.
        .                           unsafe {
        .                               assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
       22 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
   32,745 ( 0.02%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
        .                                   Some(next_back_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
-- line 369 ----------------------------------------

  274,325 ( 0.15%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/tuple.rs
--------------------------------------------------------------------------------
Ir               

-- line 10 ----------------------------------------
      .                       $(($idx:tt) -> $T:ident)+
      .                   }
      .               )+) => {
      .                   $(
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl<$($T:PartialEq),+> PartialEq for ($($T,)+) where last_type!($($T,)+): ?Sized {
      .                           #[inline]
      .                           fn eq(&self, other: &($($T,)+)) -> bool {
  3,182 ( 0.00%)                      $(self.$idx == other.$idx)&&+
      .                           }
      .                           #[inline]
      .                           fn ne(&self, other: &($($T,)+)) -> bool {
      .                               $(self.$idx != other.$idx)||+
      .                           }
      .                       }
      .           
      .                       #[stable(feature = "rust1", since = "1.0.0")]
-- line 26 ----------------------------------------
-- line 30 ----------------------------------------
      .                       impl<$($T:PartialOrd + PartialEq),+> PartialOrd for ($($T,)+)
      .                               where last_type!($($T,)+): ?Sized {
      .                           #[inline]
      .                           fn partial_cmp(&self, other: &($($T,)+)) -> Option<Ordering> {
      .                               lexical_partial_cmp!($(self.$idx, other.$idx),+)
      .                           }
      .                           #[inline]
      .                           fn lt(&self, other: &($($T,)+)) -> bool {
207,156 ( 0.11%)                      lexical_ord!(lt, $(self.$idx, other.$idx),+)
      .                           }
      .                           #[inline]
      .                           fn le(&self, other: &($($T,)+)) -> bool {
      .                               lexical_ord!(le, $(self.$idx, other.$idx),+)
      .                           }
      .                           #[inline]
      .                           fn ge(&self, other: &($($T,)+)) -> bool {
      1 ( 0.00%)                      lexical_ord!(ge, $(self.$idx, other.$idx),+)
      .                           }
      .                           #[inline]
      .                           fn gt(&self, other: &($($T,)+)) -> bool {
      .                               lexical_ord!(gt, $(self.$idx, other.$idx),+)
      .                           }
      .                       }
      .           
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl<$($T:Ord),+> Ord for ($($T,)+) where last_type!($($T,)+): ?Sized {
      .                           #[inline]
      .                           fn cmp(&self, other: &($($T,)+)) -> Ordering {
  3,616 ( 0.00%)                      lexical_cmp!($(self.$idx, other.$idx),+)
      .                           }
      .                       }
      .           
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl<$($T:Default),+> Default for ($($T,)+) {
      .                           #[inline]
      .                           fn default() -> ($($T,)+) {
     20 ( 0.00%)                      ($({ let x: $T = Default::default(); x},)+)
      .                           }
      .                       }
      .                   )+
      .               }
      .           }
      .           
      .           // Constructs an expression that performs a lexical ordering using method $rel.
      .           // The values are interleaved, so the macro invocation for
-- line 74 ----------------------------------------

     32 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/tuple.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs
--------------------------------------------------------------------------------
Ir               

-- line 198 ----------------------------------------
      .                   }
      .           
      .                   #[inline]
      .                   #[allow(arithmetic_overflow)]
      .                   #[rustc_inherit_overflow_checks]
      .                   fn forward(start: Self, n: usize) -> Self {
      .                       // In debug builds, trigger a panic on overflow.
      .                       // This should optimize completely out in release builds.
  3,713 ( 0.00%)              if Self::forward_checked(start, n).is_none() {
      .                           let _ = Self::MAX + 1;
      .                       }
      .                       // Do wrapping math to allow e.g. `Step::forward(-128i8, 255)`.
      .                       start.wrapping_add(n as Self)
      .                   }
      .           
      .                   #[inline]
      .                   #[allow(arithmetic_overflow)]
-- line 214 ----------------------------------------
-- line 613 ----------------------------------------
      .           
      .                   if taken < n { Err(taken) } else { Ok(()) }
      .               }
      .           }
      .           
      .           impl<T: TrustedStep> RangeIteratorImpl for ops::Range<T> {
      .               #[inline]
      .               fn spec_next(&mut self) -> Option<T> {
760,593 ( 0.42%)          if self.start < self.end {
      .                       // SAFETY: just checked precondition
      .                       let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
      .                       Some(mem::replace(&mut self.start, n))
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
-- line 629 ----------------------------------------
-- line 657 ----------------------------------------
      .                   // Otherwise 0 is returned which always safe to use.
      .                   self.start = unsafe { Step::forward_unchecked(self.start.clone(), taken) };
      .           
      .                   if taken < n { Err(taken) } else { Ok(()) }
      .               }
      .           
      .               #[inline]
      .               fn spec_next_back(&mut self) -> Option<T> {
 20,998 ( 0.01%)          if self.start < self.end {
      .                       // SAFETY: just checked precondition
      .                       self.end = unsafe { Step::backward_unchecked(self.end.clone(), 1) };
      .                       Some(self.end.clone())
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
-- line 673 ----------------------------------------
-- line 708 ----------------------------------------
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A> {
      .                   self.spec_next()
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
 30,758 ( 0.02%)          if self.start < self.end {
      .                       let hint = Step::steps_between(&self.start, &self.end);
      .                       (hint.unwrap_or(usize::MAX), hint)
      .                   } else {
      .                       (0, Some(0))
      .                   }
      .               }
      .           
      .               #[inline]
-- line 724 ----------------------------------------
-- line 857 ----------------------------------------
      .           impl<A: Step> FusedIterator for ops::Range<A> {}
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<A: Step> Iterator for ops::RangeFrom<A> {
      .               type Item = A;
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A> {
    797 ( 0.00%)          let n = Step::forward(self.start.clone(), 1);
      .                   Some(mem::replace(&mut self.start, n))
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   (usize::MAX, None)
      .               }
      .           
-- line 873 ----------------------------------------
-- line 998 ----------------------------------------
      .           
      .                   try { accum }
      .               }
      .           }
      .           
      .           impl<T: TrustedStep> RangeInclusiveIteratorImpl for ops::RangeInclusive<T> {
      .               #[inline]
      .               fn spec_next(&mut self) -> Option<T> {
    789 ( 0.00%)          if self.is_empty() {
      .                       return None;
      .                   }
      .                   let is_iterating = self.start < self.end;
    511 ( 0.00%)          Some(if is_iterating {
      .                       // SAFETY: just checked precondition
      .                       let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
      .                       mem::replace(&mut self.start, n)
      .                   } else {
      .                       self.exhausted = true;
      .                       self.start.clone()
      .                   })
      .               }
-- line 1018 ----------------------------------------
-- line 1025 ----------------------------------------
      .                   R: Try<Output = B>,
      .               {
      .                   if self.is_empty() {
      .                       return try { init };
      .                   }
      .           
      .                   let mut accum = init;
      .           
    943 ( 0.00%)          while self.start < self.end {
      .                       // SAFETY: just checked precondition
      .                       let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
      .                       let n = mem::replace(&mut self.start, n);
      .                       accum = f(accum, n)?;
      .                   }
      .           
      .                   self.exhausted = true;
      .           
     72 ( 0.00%)          if self.start == self.end {
      .                       accum = f(accum, self.start.clone())?;
      .                   }
      .           
      .                   try { accum }
      .               }
      .           
      .               #[inline]
      .               fn spec_next_back(&mut self) -> Option<T> {
-- line 1050 ----------------------------------------
-- line 1098 ----------------------------------------
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A> {
      .                   self.spec_next()
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
    888 ( 0.00%)          if self.is_empty() {
      .                       return (0, Some(0));
      .                   }
      .           
      .                   match Step::steps_between(&self.start, &self.end) {
      .                       Some(hint) => (hint.saturating_add(1), hint.checked_add(1)),
      .                       None => (usize::MAX, None),
      .                   }
      .               }
-- line 1114 ----------------------------------------

121,819 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core/raw.rs
--------------------------------------------------------------------------------
Ir               

-- line 30 ----------------------------------------
      .                               bucket.write(i - offset);
      .                           } else if i >= start {
      .                               self.indices.erase(bucket);
      .                           }
      .                       }
      .                   }
      .               }
      .           
151,624 ( 0.08%)      pub(crate) fn entry(&mut self, hash: HashValue, key: K) -> Entry<'_, K, V>
      .               where
      .                   K: Eq,
      .               {
      .                   let eq = equivalent(&key, &self.entries);
 15,905 ( 0.01%)          match self.indices.find(hash.get(), eq) {
      .                       // SAFETY: The entry is created with a live raw bucket, at the same time
      .                       // we have a &mut reference to the map, so it can not be modified further.
  9,293 ( 0.01%)              Some(raw_bucket) => Entry::Occupied(OccupiedEntry {
      .                           map: self,
      .                           raw_bucket,
  3,384 ( 0.00%)                  key,
      .                       }),
 61,186 ( 0.03%)              None => Entry::Vacant(VacantEntry {
      .                           map: self,
      .                           hash,
 37,752 ( 0.02%)                  key,
      .                       }),
      .                   }
121,034 ( 0.07%)      }
      .           
      .               pub(super) fn indices_mut(&mut self) -> impl Iterator<Item = &mut usize> {
      .                   // SAFETY: we're not letting any of the buckets escape this function,
      .                   // only the item references that are appropriately bound to `&mut self`.
      .                   unsafe { self.indices.iter().map(|bucket| bucket.as_mut()) }
      .               }
      .           
      .               /// Return the raw bucket for the given index
-- line 65 ----------------------------------------
-- line 139 ----------------------------------------
      .               pub fn index(&self) -> usize {
      .                   // SAFETY: we have &mut map keep keeping the bucket stable
      .                   unsafe { self.raw_bucket.read() }
      .               }
      .           
      .               /// Converts into a mutable reference to the entry's value in the map,
      .               /// with a lifetime bound to the map itself.
      .               pub fn into_mut(self) -> &'a mut V {
  1,419 ( 0.00%)          let index = self.index();
  4,257 ( 0.00%)          &mut self.map.entries[index].value
      .               }
      .           
      .               /// Remove and return the key, value pair stored in the map for this entry
      .               ///
      .               /// Like `Vec::swap_remove`, the pair is removed by swapping it with the
      .               /// last element of the map and popping it off. **This perturbs
      .               /// the position of what used to be the last element!**
      .               ///
-- line 156 ----------------------------------------

 83,445 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core/raw.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 180 ----------------------------------------
        .           /// assert_eq!(v, &[0.into()]);
        .           ///
        .           /// // Ensure that the last item was dropped.
        .           /// assert!(weak.upgrade().is_none());
        .           /// ```
        .           #[stable(feature = "drop_in_place", since = "1.8.0")]
        .           #[lang = "drop_in_place"]
        .           #[allow(unconditional_recursion)]
1,236,267 ( 0.68%)  pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
        .               // Code here does not matter - this is replaced by the
        .               // real drop glue by the compiler.
        .           
        .               // SAFETY: see comment above
        .               unsafe { drop_in_place(to_drop) }
        .           }
        .           
        .           /// Creates a null raw pointer.
-- line 196 ----------------------------------------
-- line 448 ----------------------------------------
        .                       return;
        .                   }
        .               }
        .           
        .               // Direct swapping, for the cases not going through the block optimization.
        .               // SAFETY: the caller must guarantee that `x` and `y` are valid
        .               // for writes, properly aligned, and non-overlapping.
        .               unsafe {
        7 ( 0.00%)          let z = read(x);
        .                   copy_nonoverlapping(y, x, 1);
        .                   write(y, z);
        .               }
        .           }
        .           
        .           #[inline]
        .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
        .           const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {
-- line 464 ----------------------------------------
-- line 693 ----------------------------------------
        .               let mut tmp = MaybeUninit::<T>::uninit();
        .               // SAFETY: the caller must guarantee that `src` is valid for reads.
        .               // `src` cannot overlap `tmp` because `tmp` was just allocated on
        .               // the stack as a separate allocated object.
        .               //
        .               // Also, since we just wrote a valid value into `tmp`, it is guaranteed
        .               // to be properly initialized.
        .               unsafe {
   31,763 ( 0.02%)          copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
  223,119 ( 0.12%)          tmp.assume_init()
        .               }
        .           }
        .           
        .           /// Reads the value from `src` without moving it. This leaves the
        .           /// memory in `src` unchanged.
        .           ///
        .           /// Unlike [`read`], `read_unaligned` works with unaligned pointers.
        .           ///
-- line 710 ----------------------------------------
-- line 884 ----------------------------------------
        .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
        .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
        .               }
        .           
        .               // SAFETY: the caller must guarantee that `dst` is valid for writes.
        .               // `dst` cannot overlap `src` because the caller has mutable access
        .               // to `dst` while `src` is owned by this function.
        .               unsafe {
2,697,118 ( 1.48%)          copy_nonoverlapping(&src as *const T, dst, 1);
        .                   intrinsics::forget(src);
        .               }
        .           }
        .           
        .           /// Overwrites a memory location with the given value without reading or
        .           /// dropping the old value.
        .           ///
        .           /// Unlike [`write()`], the pointer may be unaligned.
-- line 900 ----------------------------------------
-- line 1206 ----------------------------------------
        .               if stride == 1 {
        .                   // `stride == 1` case can be computed more simply through `-p (mod a)`, but doing so
        .                   // inhibits LLVM's ability to select instructions like `lea`. Instead we compute
        .                   //
        .                   //    round_up_to_next_alignment(p, a) - p
        .                   //
        .                   // which distributes operations around the load-bearing, but pessimizing `and` sufficiently
        .                   // for LLVM to be able to utilize the various optimizations it knows about.
      188 ( 0.00%)          return wrapping_sub(
      698 ( 0.00%)              wrapping_add(p as usize, a_minus_one) & wrapping_sub(0, a),
        .                       p as usize,
        .                   );
        .               }
        .           
        .               let pmoda = p as usize & a_minus_one;
        .               if pmoda == 0 {
        .                   // Already aligned. Yay!
        .                   return 0;
-- line 1223 ----------------------------------------
-- line 1348 ----------------------------------------
        .           /// assert!(std::ptr::eq(
        .           ///     &wrapper as &dyn Trait as *const dyn Trait as *const u8,
        .           ///     &wrapper.member as &dyn Trait as *const dyn Trait as *const u8,
        .           /// ));
        .           /// ```
        .           #[stable(feature = "ptr_eq", since = "1.17.0")]
        .           #[inline]
        .           pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {
   36,927 ( 0.02%)      a == b
        .           }
        .           
        .           /// Hash a raw pointer.
        .           ///
        .           /// This can be used to hash a `&T` reference (which coerces to `*const T` implicitly)
        .           /// by its address rather than the value it points to
        .           /// (which is what the `Hash for &T` implementation does).
        .           ///
-- line 1364 ----------------------------------------

  203,069 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 168 ----------------------------------------
      .               pub self_ty: Ty<'tcx>,
      .               pub trait_ref: Option<TraitRef<'tcx>>,
      .               pub predicates: Vec<Predicate<'tcx>>,
      .           }
      .           
      .           #[derive(
      .               Copy,
      .               Clone,
  3,134 ( 0.00%)      PartialEq,
      .               Eq,
      .               Hash,
      .               TyEncodable,
  6,674 ( 0.00%)      TyDecodable,
      .               HashStable,
      .               Debug,
      .               TypeFoldable
      .           )]
      .           pub enum ImplPolarity {
      .               /// `impl Trait for Type`
      .               Positive,
      .               /// `impl !Trait for Type`
-- line 188 ----------------------------------------
-- line 210 ----------------------------------------
      .                   match self {
      .                       Self::Positive => f.write_str("positive"),
      .                       Self::Negative => f.write_str("negative"),
      .                       Self::Reservation => f.write_str("reservation"),
      .                   }
      .               }
      .           }
      .           
170,529 ( 0.09%)  #[derive(Clone, Debug, PartialEq, Eq, Copy, Hash, TyEncodable, TyDecodable, HashStable)]
      .           pub enum Visibility {
      .               /// Visible everywhere (including in other crates).
      .               Public,
      .               /// Visible only in the given crate-local module.
      .               Restricted(DefId),
      .               /// Not visible anywhere in the local crate. This is the visibility of private external items.
      .               Invisible,
      .           }
      .           
  3,097 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable, TyEncodable, TyDecodable)]
      .           pub enum BoundConstness {
      .               /// `T: Trait`
      .               NotConst,
      .               /// `T: ~const Trait`
      .               ///
      .               /// Requires resolving to const only when we are in a const context.
      .               ConstIfConst,
      .           }
      .           
      .           impl BoundConstness {
      .               /// Reduce `self` and `constness` to two possible combined states instead of four.
  1,268 ( 0.00%)      pub fn and(&mut self, constness: hir::Constness) -> hir::Constness {
  1,902 ( 0.00%)          match (constness, self) {
      .                       (hir::Constness::Const, BoundConstness::ConstIfConst) => hir::Constness::Const,
      .                       (_, this) => {
  2,223 ( 0.00%)                  *this = BoundConstness::NotConst;
      .                           hir::Constness::NotConst
      .                       }
      .                   }
    634 ( 0.00%)      }
      .           }
      .           
      .           impl fmt::Display for BoundConstness {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   match self {
      .                       Self::NotConst => f.write_str("normal"),
      .                       Self::ConstIfConst => f.write_str("`~const`"),
      .                   }
-- line 256 ----------------------------------------
-- line 275 ----------------------------------------
      .               /// Tuple containing the types of closure captures after the feature `capture_disjoint_fields`
      .               pub after_feature_tys: Ty<'tcx>,
      .           }
      .           
      .           pub trait DefIdTree: Copy {
      .               fn parent(self, id: DefId) -> Option<DefId>;
      .           
      .               fn is_descendant_of(self, mut descendant: DefId, ancestor: DefId) -> bool {
      1 ( 0.00%)          if descendant.krate != ancestor.krate {
      .                       return false;
      .                   }
      .           
    393 ( 0.00%)          while descendant != ancestor {
    409 ( 0.00%)              match self.parent(descendant) {
      .                           Some(parent) => descendant = parent,
      .                           None => return false,
      .                       }
      .                   }
      .                   true
      .               }
      .           }
      .           
      .           impl<'tcx> DefIdTree for TyCtxt<'tcx> {
    268 ( 0.00%)      fn parent(self, id: DefId) -> Option<DefId> {
      .                   self.def_key(id).parent.map(|index| DefId { index, ..id })
    402 ( 0.00%)      }
      .           }
      .           
      .           impl Visibility {
     16 ( 0.00%)      pub fn from_hir(visibility: &hir::Visibility<'_>, id: hir::HirId, tcx: TyCtxt<'_>) -> Self {
     48 ( 0.00%)          match visibility.node {
      .                       hir::VisibilityKind::Public => Visibility::Public,
      .                       hir::VisibilityKind::Crate(_) => Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)),
      .                       hir::VisibilityKind::Restricted { ref path, .. } => match path.res {
      .                           // If there is no resolution, `resolve` will have already reported an error, so
      .                           // assume that the visibility is public to avoid reporting more privacy errors.
      .                           Res::Err => Visibility::Public,
      .                           def => Visibility::Restricted(def.def_id()),
      .                       },
      .                       hir::VisibilityKind::Inherited => {
     32 ( 0.00%)                  Visibility::Restricted(tcx.parent_module(id).to_def_id())
      .                       }
      .                   }
     16 ( 0.00%)      }
      .           
      .               /// Returns `true` if an item with this visibility is accessible from the given block.
  3,015 ( 0.00%)      pub fn is_accessible_from<T: DefIdTree>(self, module: DefId, tree: T) -> bool {
  8,494 ( 0.00%)          let restriction = match self {
      .                       // Public items are visible everywhere.
      .                       Visibility::Public => return true,
      .                       // Private items from other crates are visible nowhere.
      .                       Visibility::Invisible => return false,
      .                       // Restricted items are visible in an arbitrary local module.
    179 ( 0.00%)              Visibility::Restricted(other) if other.krate != module.krate => return false,
      .                       Visibility::Restricted(module) => module,
      .                   };
      .           
      .                   tree.is_descendant_of(module, restriction)
  3,015 ( 0.00%)      }
      .           
      .               /// Returns `true` if this visibility is at least as accessible as the given visibility
    801 ( 0.00%)      pub fn is_at_least<T: DefIdTree>(self, vis: Visibility, tree: T) -> bool {
  1,206 ( 0.00%)          let vis_restriction = match vis {
      .                       Visibility::Public => return self == Visibility::Public,
      .                       Visibility::Invisible => return true,
      .                       Visibility::Restricted(module) => module,
      .                   };
      .           
      .                   self.is_accessible_from(vis_restriction, tree)
    801 ( 0.00%)      }
      .           
      .               // Returns `true` if this item is visible anywhere in the local crate.
      .               pub fn is_visible_locally(self) -> bool {
      .                   match self {
      .                       Visibility::Public => true,
      .                       Visibility::Restricted(def_id) => def_id.is_local(),
      .                       Visibility::Invisible => false,
      .                   }
      .               }
      .           
      .               pub fn is_public(self) -> bool {
    180 ( 0.00%)          matches!(self, Visibility::Public)
     90 ( 0.00%)      }
      .           }
      .           
      .           /// The crate variances map is computed during typeck and contains the
      .           /// variance of every item in the local crate. You should not use it
      .           /// directly, because to do so will make your pass dependent on the
      .           /// HIR of every item in the local crate. Instead, use
      .           /// `tcx.variances_of()` to get the variance for a *particular*
      .           /// item.
-- line 365 ----------------------------------------
-- line 509 ----------------------------------------
      .           #[derive(Clone, Copy, Lift)]
      .           pub struct Predicate<'tcx> {
      .               inner: &'tcx PredicateInner<'tcx>,
      .           }
      .           
      .           impl<'tcx> PartialEq for Predicate<'tcx> {
      .               fn eq(&self, other: &Self) -> bool {
      .                   // `self.kind` is always interned.
  3,251 ( 0.00%)          ptr::eq(self.inner, other.inner)
  3,053 ( 0.00%)      }
      .           }
      .           
      .           impl Hash for Predicate<'_> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   (self.inner as *const PredicateInner<'_>).hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Predicate<'tcx> {}
      .           
      .           impl<'tcx> Predicate<'tcx> {
      .               /// Gets the inner `Binder<'tcx, PredicateKind<'tcx>>`.
      .               #[inline]
      .               pub fn kind(self) -> Binder<'tcx, PredicateKind<'tcx>> {
 28,347 ( 0.02%)          self.inner.kind
      .               }
      .           
      .               /// Flips the polarity of a Predicate.
      .               ///
      .               /// Given `T: Trait` predicate it returns `T: !Trait` and given `T: !Trait` returns `T: Trait`.
      .               pub fn flip_polarity(&self, tcx: TyCtxt<'tcx>) -> Option<Predicate<'tcx>> {
      .                   let kind = self
      .                       .inner
-- line 541 ----------------------------------------
-- line 567 ----------------------------------------
      .                       flags: _,
      .                       outer_exclusive_binder: _,
      .                   } = self.inner;
      .           
      .                   kind.hash_stable(hcx, hasher);
      .               }
      .           }
      .           
111,030 ( 0.06%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
 75,520 ( 0.04%)  #[derive(HashStable, TypeFoldable)]
      .           pub enum PredicateKind<'tcx> {
      .               /// Corresponds to `where Foo: Bar<A, B, C>`. `Foo` here would be
      .               /// the `Self` type of the trait reference and `A`, `B`, and `C`
      .               /// would be the type parameters.
      .               Trait(TraitPredicate<'tcx>),
      .           
      .               /// `where 'a: 'b`
      .               RegionOutlives(RegionOutlivesPredicate<'tcx>),
-- line 584 ----------------------------------------
-- line 594 ----------------------------------------
      .               WellFormed(GenericArg<'tcx>),
      .           
      .               /// Trait must be object-safe.
      .               ObjectSafe(DefId),
      .           
      .               /// No direct syntax. May be thought of as `where T: FnFoo<...>`
      .               /// for some substitutions `...` and `T` being a closure type.
      .               /// Satisfied (or refuted) once we know the closure's kind.
    120 ( 0.00%)      ClosureKind(DefId, SubstsRef<'tcx>, ClosureKind),
      .           
      .               /// `T1 <: T2`
      .               ///
      .               /// This obligation is created most often when we have two
      .               /// unresolved type variables and hence don't have enough
      .               /// information to process the subtyping obligation yet.
     60 ( 0.00%)      Subtype(SubtypePredicate<'tcx>),
      .           
      .               /// `T1` coerced to `T2`
      .               ///
      .               /// Like a subtyping obligation, this is created most often
      .               /// when we have two unresolved type variables and hence
      .               /// don't have enough information to process the coercion
      .               /// obligation yet. At the moment, we actually process coercions
      .               /// very much like subtyping and don't handle the full coercion
-- line 617 ----------------------------------------
-- line 645 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> Predicate<'tcx> {
      .               /// Performs a substitution suitable for going from a
      .               /// poly-trait-ref to supertraits that must hold if that
      .               /// poly-trait-ref holds. This is slightly different from a normal
      .               /// substitution in terms of what happens with bound regions. See
      .               /// lengthy comment below for details.
     81 ( 0.00%)      pub fn subst_supertrait(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_ref: &ty::PolyTraitRef<'tcx>,
      .               ) -> Predicate<'tcx> {
      .                   // The interaction between HRTB and supertraits is not entirely
      .                   // obvious. Let me walk you (and myself) through an example.
      .                   //
      .                   // Let's start with an easy case. Consider two traits:
-- line 661 ----------------------------------------
-- line 731 ----------------------------------------
      .                   //    ['x, 'b]
      .                   let bound_pred = self.kind();
      .                   let pred_bound_vars = bound_pred.bound_vars();
      .                   let trait_bound_vars = trait_ref.bound_vars();
      .                   // 1) Self: Bar1<'a, '^0.0> -> Self: Bar1<'a, '^0.1>
      .                   let shifted_pred =
      .                       tcx.shift_bound_var_indices(trait_bound_vars.len(), bound_pred.skip_binder());
      .                   // 2) Self: Bar1<'a, '^0.1> -> T: Bar1<'^0.0, '^0.1>
      9 ( 0.00%)          let new = shifted_pred.subst(tcx, trait_ref.skip_binder().substs);
      .                   // 3) ['x] + ['b] -> ['x, 'b]
      .                   let bound_vars =
      .                       tcx.mk_bound_variable_kinds(trait_bound_vars.iter().chain(pred_bound_vars));
     81 ( 0.00%)          tcx.reuse_or_mk_predicate(self, ty::Binder::bind_with_vars(new, bound_vars))
     63 ( 0.00%)      }
      .           }
      .           
    185 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
  5,086 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct TraitPredicate<'tcx> {
      .               pub trait_ref: TraitRef<'tcx>,
      .           
 11,424 ( 0.01%)      pub constness: BoundConstness,
      .           
 11,417 ( 0.01%)      pub polarity: ImplPolarity,
      .           }
      .           
      .           pub type PolyTraitPredicate<'tcx> = ty::Binder<'tcx, TraitPredicate<'tcx>>;
      .           
      .           impl<'tcx> TraitPredicate<'tcx> {
 13,528 ( 0.01%)      pub fn remap_constness(&mut self, tcx: TyCtxt<'tcx>, param_env: &mut ParamEnv<'tcx>) {
 11,993 ( 0.01%)          if unlikely!(Some(self.trait_ref.def_id) == tcx.lang_items().drop_trait()) {
      .                       // remap without changing constness of this predicate.
      .                       // this is because `T: ~const Drop` has a different meaning to `T: Drop`
    156 ( 0.00%)              param_env.remap_constness_with(self.constness)
      .                   } else {
  1,613 ( 0.00%)              *param_env = param_env.with_constness(self.constness.and(param_env.constness()))
      .                   }
 10,146 ( 0.01%)      }
      .           
      .               /// Remap the constness of this predicate before emitting it for diagnostics.
      .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
      .                   // this is different to `remap_constness` that callees want to print this predicate
      .                   // in case of selection errors. `T: ~const Drop` bounds cannot end up here when the
      .                   // param_env is not const because we it is always satisfied in non-const contexts.
      .                   if let hir::Constness::NotConst = param_env.constness() {
      .                       self.constness = ty::BoundConstness::NotConst;
      .                   }
      .               }
      .           
      .               pub fn def_id(self) -> DefId {
  2,194 ( 0.00%)          self.trait_ref.def_id
  1,097 ( 0.00%)      }
      .           
  2,420 ( 0.00%)      pub fn self_ty(self) -> Ty<'tcx> {
  7,260 ( 0.00%)          self.trait_ref.self_ty()
  4,840 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> PolyTraitPredicate<'tcx> {
      .               pub fn def_id(self) -> DefId {
      .                   // Ok to skip binder since trait `DefId` does not care about regions.
      .                   self.skip_binder().def_id()
  2,411 ( 0.00%)      }
      .           
      7 ( 0.00%)      pub fn self_ty(self) -> ty::Binder<'tcx, Ty<'tcx>> {
     28 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.self_ty())
     14 ( 0.00%)      }
      .           
      .               /// Remap the constness of this predicate before emitting it for diagnostics.
      .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
      .                   *self = self.map_bound(|mut p| {
      .                       p.remap_constness_diag(param_env);
      .                       p
      .                   });
      .               }
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
  1,277 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
  1,670 ( 0.00%)  pub struct OutlivesPredicate<A, B>(pub A, pub B); // `A: B`
      .           pub type RegionOutlivesPredicate<'tcx> = OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>;
      .           pub type TypeOutlivesPredicate<'tcx> = OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>;
      .           pub type PolyRegionOutlivesPredicate<'tcx> = ty::Binder<'tcx, RegionOutlivesPredicate<'tcx>>;
      .           pub type PolyTypeOutlivesPredicate<'tcx> = ty::Binder<'tcx, TypeOutlivesPredicate<'tcx>>;
      .           
      .           /// Encodes that `a` must be a subtype of `b`. The `a_is_expected` flag indicates
      .           /// whether the `a` type is the type that we should label as "expected" when
      .           /// presenting user diagnostics.
      .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
    131 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct SubtypePredicate<'tcx> {
    170 ( 0.00%)      pub a_is_expected: bool,
      .               pub a: Ty<'tcx>,
      .               pub b: Ty<'tcx>,
      .           }
      .           pub type PolySubtypePredicate<'tcx> = ty::Binder<'tcx, SubtypePredicate<'tcx>>;
      .           
      .           /// Encodes that we have to coerce *from* the `a` type to the `b` type.
      .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
      6 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct CoercePredicate<'tcx> {
      .               pub a: Ty<'tcx>,
      .               pub b: Ty<'tcx>,
      .           }
      .           pub type PolyCoercePredicate<'tcx> = ty::Binder<'tcx, CoercePredicate<'tcx>>;
      .           
    805 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, TyEncodable, TyDecodable)]
    741 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub enum Term<'tcx> {
      .               Ty(Ty<'tcx>),
      .               Const(&'tcx Const<'tcx>),
      .           }
      .           
      .           impl<'tcx> From<Ty<'tcx>> for Term<'tcx> {
      .               fn from(ty: Ty<'tcx>) -> Self {
      .                   Term::Ty(ty)
     66 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> From<&'tcx Const<'tcx>> for Term<'tcx> {
      .               fn from(c: &'tcx Const<'tcx>) -> Self {
      .                   Term::Const(c)
      .               }
      .           }
      .           
      .           impl<'tcx> Term<'tcx> {
      .               pub fn ty(&self) -> Option<Ty<'tcx>> {
    132 ( 0.00%)          if let Term::Ty(ty) = self { Some(ty) } else { None }
     66 ( 0.00%)      }
      .           }
      .           
      .           /// This kind of predicate has no *direct* correspondent in the
      .           /// syntax, but it roughly corresponds to the syntactic forms:
      .           ///
      .           /// 1. `T: TraitRef<..., Item = Type>`
      .           /// 2. `<T as TraitRef<...>>::Item == Type` (NYI)
      .           ///
      .           /// In particular, form #1 is "desugared" to the combination of a
      .           /// normal trait predicate (`T: TraitRef<...>`) and one of these
      .           /// predicates. Form #2 is a broader form in that it also permits
      .           /// equality between arbitrary types. Processing an instance of
      .           /// Form #2 eventually yields one of these `ProjectionPredicate`
      .           /// instances to normalize the LHS.
      7 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
    145 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct ProjectionPredicate<'tcx> {
      .               pub projection_ty: ProjectionTy<'tcx>,
    462 ( 0.00%)      pub term: Term<'tcx>,
      .           }
      .           
      .           pub type PolyProjectionPredicate<'tcx> = Binder<'tcx, ProjectionPredicate<'tcx>>;
      .           
      .           impl<'tcx> PolyProjectionPredicate<'tcx> {
      .               /// Returns the `DefId` of the trait of the associated item being projected.
      .               #[inline]
      .               pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
     32 ( 0.00%)          self.skip_binder().projection_ty.trait_def_id(tcx)
      .               }
      .           
      .               /// Get the [PolyTraitRef] required for this projection to be well formed.
      .               /// Note that for generic associated types the predicates of the associated
      .               /// type also need to be checked.
      .               #[inline]
      .               pub fn required_poly_trait_ref(&self, tcx: TyCtxt<'tcx>) -> PolyTraitRef<'tcx> {
      .                   // Note: unlike with `TraitRef::to_poly_trait_ref()`,
      .                   // `self.0.trait_ref` is permitted to have escaping regions.
      .                   // This is because here `self` has a `Binder` and so does our
      .                   // return value, so we are preserving the number of binding
      .                   // levels.
     16 ( 0.00%)          self.map_bound(|predicate| predicate.projection_ty.trait_ref(tcx))
      .               }
      .           
      .               pub fn term(&self) -> Binder<'tcx, Term<'tcx>> {
      .                   self.map_bound(|predicate| predicate.term)
      .               }
      .           
      .               /// The `DefId` of the `TraitItem` for the associated type.
      .               ///
      .               /// Note that this is not the `DefId` of the `TraitRef` containing this
      .               /// associated type, which is in `tcx.associated_item(projection_def_id()).container`.
      .               pub fn projection_def_id(&self) -> DefId {
      .                   // Ok to skip binder since trait `DefId` does not care about regions.
     10 ( 0.00%)          self.skip_binder().projection_ty.item_def_id
      5 ( 0.00%)      }
      .           }
      .           
      .           pub trait ToPolyTraitRef<'tcx> {
      .               fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx>;
      .           }
      .           
      .           impl<'tcx> ToPolyTraitRef<'tcx> for PolyTraitPredicate<'tcx> {
    194 ( 0.00%)      fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx> {
    194 ( 0.00%)          self.map_bound_ref(|trait_pred| trait_pred.trait_ref)
    194 ( 0.00%)      }
      .           }
      .           
      .           pub trait ToPredicate<'tcx> {
      .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx>;
      .           }
      .           
      .           impl<'tcx> ToPredicate<'tcx> for Binder<'tcx, PredicateKind<'tcx>> {
      .               #[inline(always)]
      .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
      .                   tcx.mk_predicate(self)
      .               }
      .           }
      .           
      .           impl<'tcx> ToPredicate<'tcx> for PolyTraitPredicate<'tcx> {
    622 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
  3,110 ( 0.00%)          self.map_bound(PredicateKind::Trait).to_predicate(tcx)
  1,244 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> ToPredicate<'tcx> for PolyRegionOutlivesPredicate<'tcx> {
      .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
      .                   self.map_bound(PredicateKind::RegionOutlives).to_predicate(tcx)
      .               }
      .           }
      .           
      .           impl<'tcx> ToPredicate<'tcx> for PolyTypeOutlivesPredicate<'tcx> {
      4 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
      8 ( 0.00%)          self.map_bound(PredicateKind::TypeOutlives).to_predicate(tcx)
      8 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {
      4 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
     20 ( 0.00%)          self.map_bound(PredicateKind::Projection).to_predicate(tcx)
      8 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> Predicate<'tcx> {
    640 ( 0.00%)      pub fn to_opt_poly_trait_pred(self) -> Option<PolyTraitPredicate<'tcx>> {
      .                   let predicate = self.kind();
  1,920 ( 0.00%)          match predicate.skip_binder() {
  1,350 ( 0.00%)              PredicateKind::Trait(t) => Some(predicate.rebind(t)),
      .                       PredicateKind::Projection(..)
      .                       | PredicateKind::Subtype(..)
      .                       | PredicateKind::Coerce(..)
      .                       | PredicateKind::RegionOutlives(..)
      .                       | PredicateKind::WellFormed(..)
      .                       | PredicateKind::ObjectSafe(..)
      .                       | PredicateKind::ClosureKind(..)
      .                       | PredicateKind::TypeOutlives(..)
      .                       | PredicateKind::ConstEvaluatable(..)
      .                       | PredicateKind::ConstEquate(..)
     50 ( 0.00%)              | PredicateKind::TypeWellFormedFromEnv(..) => None,
      .                   }
    640 ( 0.00%)      }
      .           
      .               pub fn to_opt_type_outlives(self) -> Option<PolyTypeOutlivesPredicate<'tcx>> {
      .                   let predicate = self.kind();
      .                   match predicate.skip_binder() {
      .                       PredicateKind::TypeOutlives(data) => Some(predicate.rebind(data)),
      .                       PredicateKind::Trait(..)
      .                       | PredicateKind::Projection(..)
      .                       | PredicateKind::Subtype(..)
-- line 987 ----------------------------------------
-- line 1011 ----------------------------------------
      .           /// Example:
      .           ///
      .           ///     struct Foo<T, U: Bar<T>> { ... }
      .           ///
      .           /// Here, the `GenericPredicates` for `Foo` would contain a list of bounds like
      .           /// `[[], [U:Bar<T>]]`. Now if there were some particular reference
      .           /// like `Foo<isize,usize>`, then the `InstantiatedPredicates` would be `[[],
      .           /// [usize:Bar<isize>]]`.
  2,041 ( 0.00%)  #[derive(Clone, Debug, TypeFoldable)]
      .           pub struct InstantiatedPredicates<'tcx> {
      .               pub predicates: Vec<Predicate<'tcx>>,
      .               pub spans: Vec<Span>,
      .           }
      .           
      .           impl<'tcx> InstantiatedPredicates<'tcx> {
      6 ( 0.00%)      pub fn empty() -> InstantiatedPredicates<'tcx> {
  1,700 ( 0.00%)          InstantiatedPredicates { predicates: vec![], spans: vec![] }
      6 ( 0.00%)      }
      .           
      .               pub fn is_empty(&self) -> bool {
      .                   self.predicates.is_empty()
      1 ( 0.00%)      }
      .           }
      .           
      .           #[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable, TyEncodable, TyDecodable, TypeFoldable)]
      .           pub struct OpaqueTypeKey<'tcx> {
      .               pub def_id: DefId,
      .               pub substs: SubstsRef<'tcx>,
      .           }
      .           
-- line 1040 ----------------------------------------
-- line 1091 ----------------------------------------
      .               /// ```
      .               /// for<'a> fn(&'a u32)
      .               /// ```
      .               ///
      .               /// Once we "enter" into this `for<'a>` quantifier, we are in a
      .               /// new universe that extends `U` -- in this new universe, we can
      .               /// name the region `'a`, but that region was not nameable from
      .               /// `U` because it was not in scope there.
    631 ( 0.00%)      pub fn next_universe(self) -> UniverseIndex {
      .                   UniverseIndex::from_u32(self.private.checked_add(1).unwrap())
  1,893 ( 0.00%)      }
      .           
      .               /// Returns `true` if `self` can name a name from `other` -- in other words,
      .               /// if the set of names in `self` is a superset of those in
      .               /// `other` (`self >= other`).
      .               pub fn can_name(self, other: UniverseIndex) -> bool {
  1,536 ( 0.00%)          self.private >= other.private
    768 ( 0.00%)      }
      .           
      .               /// Returns `true` if `self` cannot name some names from `other` -- in other
      .               /// words, if the set of names in `self` is a strict subset of
      .               /// those in `other` (`self < other`).
      .               pub fn cannot_name(self, other: UniverseIndex) -> bool {
      .                   self.private < other.private
      .               }
      .           }
-- line 1116 ----------------------------------------
-- line 1194 ----------------------------------------
      .           /// aren't allowed to call that query: it is equal to `type_of(const_param)` which is
      .           /// trivial to compute.
      .           ///
      .           /// If we now want to use that constant in a place which potentionally needs its type
      .           /// we also pass the type of its `const_param`. This is the point of `WithOptConstParam`,
      .           /// except that instead of a `Ty` we bundle the `DefId` of the const parameter.
      .           /// Meaning that we need to use `type_of(const_param_did)` if `const_param_did` is `Some`
      .           /// to get the type of `did`.
    249 ( 0.00%)  #[derive(Copy, Clone, Debug, TypeFoldable, Lift, TyEncodable, TyDecodable)]
      .           #[derive(PartialEq, Eq, PartialOrd, Ord)]
      .           #[derive(Hash, HashStable)]
      .           pub struct WithOptConstParam<T> {
    305 ( 0.00%)      pub did: T,
      .               /// The `DefId` of the corresponding generic parameter in case `did` is
      .               /// a const argument.
      .               ///
      .               /// Note that even if `did` is a const argument, this may still be `None`.
      .               /// All queries taking `WithOptConstParam` start by calling `tcx.opt_const_param_of(def.did)`
      .               /// to potentially update `param_did` in the case it is `None`.
    475 ( 0.00%)      pub const_param_did: Option<DefId>,
      .           }
      .           
      .           impl<T> WithOptConstParam<T> {
      .               /// Creates a new `WithOptConstParam` setting `const_param_did` to `None`.
      .               #[inline(always)]
      .               pub fn unknown(did: T) -> WithOptConstParam<T> {
      .                   WithOptConstParam { did, const_param_did: None }
    699 ( 0.00%)      }
      .           }
      .           
      .           impl WithOptConstParam<LocalDefId> {
      .               /// Returns `Some((did, param_did))` if `def_id` is a const argument,
      .               /// `None` otherwise.
      .               #[inline(always)]
      .               pub fn try_lookup(did: LocalDefId, tcx: TyCtxt<'_>) -> Option<(LocalDefId, DefId)> {
      .                   tcx.opt_const_param_of(did).map(|param_did| (did, param_did))
      .               }
      .           
      .               /// In case `self` is unknown but `self.did` is a const argument, this returns
      .               /// a `WithOptConstParam` with the correct `const_param_did`.
      .               #[inline(always)]
      .               pub fn try_upgrade(self, tcx: TyCtxt<'_>) -> Option<WithOptConstParam<LocalDefId>> {
     99 ( 0.00%)          if self.const_param_did.is_none() {
    163 ( 0.00%)              if let const_param_did @ Some(_) = tcx.opt_const_param_of(self.did) {
      .                           return Some(WithOptConstParam { did: self.did, const_param_did });
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .           
      .               pub fn to_global(self) -> WithOptConstParam<DefId> {
      .                   WithOptConstParam { did: self.did.to_def_id(), const_param_did: self.const_param_did }
      .               }
      .           
     12 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
      9 ( 0.00%)          if let Some(did) = self.const_param_did { did } else { self.did.to_def_id() }
      3 ( 0.00%)      }
      .           }
      .           
      .           impl WithOptConstParam<DefId> {
     81 ( 0.00%)      pub fn as_local(self) -> Option<WithOptConstParam<LocalDefId>> {
      .                   self.did
      .                       .as_local()
      .                       .map(|did| WithOptConstParam { did, const_param_did: self.const_param_did })
     81 ( 0.00%)      }
      .           
      .               pub fn as_const_arg(self) -> Option<(LocalDefId, DefId)> {
    142 ( 0.00%)          if let Some(param_did) = self.const_param_did {
     52 ( 0.00%)              if let Some(did) = self.did.as_local() {
      .                           return Some((did, param_did));
      .                       }
      .                   }
      .           
      .                   None
    114 ( 0.00%)      }
      .           
      .               pub fn is_local(self) -> bool {
      .                   self.did.is_local()
      .               }
      .           
     43 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
      .                   self.const_param_did.unwrap_or(self.did)
     43 ( 0.00%)      }
      .           }
      .           
      .           /// When type checking, we use the `ParamEnv` to track
      .           /// details about the set of where-clauses that are in scope at this
      .           /// particular point.
      .           #[derive(Copy, Clone, Hash, PartialEq, Eq)]
      .           pub struct ParamEnv<'tcx> {
      .               /// This packs both caller bounds and the reveal enum into one pointer.
-- line 1285 ----------------------------------------
-- line 1302 ----------------------------------------
      .               reveal: traits::Reveal,
      .               constness: hir::Constness,
      .           }
      .           
      .           unsafe impl rustc_data_structures::tagged_ptr::Tag for ParamTag {
      .               const BITS: usize = 2;
      .               #[inline]
      .               fn into_usize(self) -> usize {
  2,653 ( 0.00%)          match self {
      .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst } => 0,
      .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst } => 1,
      .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const } => 2,
      .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::Const } => 3,
      .                   }
      .               }
      .               #[inline]
      .               unsafe fn from_usize(ptr: usize) -> Self {
 25,046 ( 0.01%)          match ptr {
      .                       0 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst },
      .                       1 => Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst },
      .                       2 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const },
      .                       3 => Self { reveal: traits::Reveal::All, constness: hir::Constness::Const },
      .                       _ => std::hint::unreachable_unchecked(),
      .                   }
      .               }
      .           }
-- line 1327 ----------------------------------------
-- line 1405 ----------------------------------------
      .               pub fn new(
      .                   caller_bounds: &'tcx List<Predicate<'tcx>>,
      .                   reveal: Reveal,
      .                   constness: hir::Constness,
      .               ) -> Self {
      .                   ty::ParamEnv { packed: CopyTaggedPtr::new(caller_bounds, ParamTag { reveal, constness }) }
      .               }
      .           
      6 ( 0.00%)      pub fn with_user_facing(mut self) -> Self {
      .                   self.packed.set_tag(ParamTag { reveal: Reveal::UserFacing, ..self.packed.tag() });
      .                   self
      6 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn with_constness(mut self, constness: hir::Constness) -> Self {
      .                   self.packed.set_tag(ParamTag { constness, ..self.packed.tag() });
      .                   self
      .               }
      .           
      .               #[inline]
-- line 1424 ----------------------------------------
-- line 1430 ----------------------------------------
      .               #[inline]
      .               pub fn without_const(mut self) -> Self {
      .                   self.packed.set_tag(ParamTag { constness: hir::Constness::NotConst, ..self.packed.tag() });
      .                   self
      .               }
      .           
      .               #[inline]
      .               pub fn remap_constness_with(&mut self, mut constness: ty::BoundConstness) {
    378 ( 0.00%)          *self = self.with_constness(constness.and(self.constness()))
      .               }
      .           
      .               /// Returns a new parameter environment with the same clauses, but
      .               /// which "reveals" the true results of projections in all cases
      .               /// (even for associated types that are specializable). This is
      .               /// the desired behavior during codegen and certain other special
      .               /// contexts; normally though we want to use `Reveal::UserFacing`,
      .               /// which is the default.
      .               /// All opaque types in the caller_bounds of the `ParamEnv`
      .               /// will be normalized to their underlying types.
      .               /// See PR #65989 and issue #65918 for more details
    616 ( 0.00%)      pub fn with_reveal_all_normalized(self, tcx: TyCtxt<'tcx>) -> Self {
      .                   if self.packed.tag().reveal == traits::Reveal::All {
      .                       return self;
      .                   }
      .           
      .                   ParamEnv::new(
      .                       tcx.normalize_opaque_types(self.caller_bounds()),
      .                       Reveal::All,
      .                       self.constness(),
      .                   )
    693 ( 0.00%)      }
      .           
      .               /// Returns this same environment but with no caller bounds.
      .               #[inline]
      .               pub fn without_caller_bounds(self) -> Self {
      .                   Self::new(List::empty(), self.reveal(), self.constness())
      .               }
      .           
      .               /// Creates a suitable environment in which to perform trait
-- line 1468 ----------------------------------------
-- line 1472 ----------------------------------------
      .               /// pair it with the empty environment. This improves caching and is generally
      .               /// invisible.
      .               ///
      .               /// N.B., we preserve the environment when type-checking because it
      .               /// is possible for the user to have wacky where-clauses like
      .               /// `where Box<u32>: Copy`, which are clearly never
      .               /// satisfiable. We generally want to behave as if they were true,
      .               /// although the surrounding function is never reachable.
  4,721 ( 0.00%)      pub fn and<T: TypeFoldable<'tcx>>(self, value: T) -> ParamEnvAnd<'tcx, T> {
      .                   match self.reveal() {
      .                       Reveal::UserFacing => ParamEnvAnd { param_env: self, value },
      .           
      .                       Reveal::All => {
    158 ( 0.00%)                  if value.is_global() {
      .                               ParamEnvAnd { param_env: self.without_caller_bounds(), value }
      .                           } else {
      .                               ParamEnvAnd { param_env: self, value }
      .                           }
      .                       }
      .                   }
  4,608 ( 0.00%)      }
      .           }
      .           
      .           // FIXME(ecstaticmorse): Audit all occurrences of `without_const().to_predicate(tcx)` to ensure that
      .           // the constness of trait bounds is being propagated correctly.
      .           impl<'tcx> PolyTraitRef<'tcx> {
      .               #[inline]
      .               pub fn with_constness(self, constness: BoundConstness) -> PolyTraitPredicate<'tcx> {
     46 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
      .                       trait_ref,
      .                       constness,
      .                       polarity: ty::ImplPolarity::Positive,
      .                   })
      .               }
      .               #[inline]
      .               pub fn without_const(self) -> PolyTraitPredicate<'tcx> {
      .                   self.with_constness(BoundConstness::NotConst)
      .               }
      .           }
      .           
    148 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TypeFoldable)]
      .           pub struct ParamEnvAnd<'tcx, T> {
  1,023 ( 0.00%)      pub param_env: ParamEnv<'tcx>,
 14,387 ( 0.01%)      pub value: T,
      .           }
      .           
      .           impl<'tcx, T> ParamEnvAnd<'tcx, T> {
      .               pub fn into_parts(self) -> (ParamEnv<'tcx>, T) {
      .                   (self.param_env, self.value)
      .               }
      .           
      .               #[inline]
      .               pub fn without_const(mut self) -> Self {
      .                   self.param_env = self.param_env.without_const();
    254 ( 0.00%)          self
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T> HashStable<StableHashingContext<'a>> for ParamEnvAnd<'tcx, T>
      .           where
      .               T: HashStable<StableHashingContext<'a>>,
      .           {
      .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
-- line 1534 ----------------------------------------
-- line 1542 ----------------------------------------
      .           #[derive(Copy, Clone, Debug, HashStable)]
      .           pub struct Destructor {
      .               /// The `DefId` of the destructor method
      .               pub did: DefId,
      .               /// The constness of the destructor method
      .               pub constness: hir::Constness,
      .           }
      .           
    125 ( 0.00%)  bitflags! {
    324 ( 0.00%)      #[derive(HashStable, TyEncodable, TyDecodable)]
      .               pub struct VariantFlags: u32 {
      .                   const NO_VARIANT_FLAGS        = 0;
      .                   /// Indicates whether the field list of this variant is `#[non_exhaustive]`.
      .                   const IS_FIELD_LIST_NON_EXHAUSTIVE = 1 << 0;
      .                   /// Indicates whether this variant was obtained as part of recovering from
      .                   /// a syntactic error. May be incomplete or bogus.
      .                   const IS_RECOVERED = 1 << 1;
      .               }
      .           }
      .           
      .           /// Definition of a variant -- a struct's fields or an enum variant.
119,528 ( 0.07%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
      .           pub struct VariantDef {
      .               /// `DefId` that identifies the variant itself.
      .               /// If this variant belongs to a struct or union, then this is a copy of its `DefId`.
      .               pub def_id: DefId,
      .               /// `DefId` that identifies the variant's constructor.
      .               /// If this variant is a struct variant, then this is `None`.
      .               pub ctor_def_id: Option<DefId>,
      .               /// Variant or struct name.
-- line 1571 ----------------------------------------
-- line 1592 ----------------------------------------
      .               /// `parent_did` is the `DefId` of the `AdtDef` representing the enum or struct that
      .               /// owns this variant. It is used for checking if a struct has `#[non_exhaustive]` w/out having
      .               /// to go through the redirect of checking the ctor's attributes - but compiling a small crate
      .               /// requires loading the `AdtDef`s for all the structs in the universe (e.g., coherence for any
      .               /// built-in trait), and we do not want to load attributes twice.
      .               ///
      .               /// If someone speeds up attribute loading to not be a performance concern, they can
      .               /// remove this hack and use the constructor `DefId` everywhere.
    384 ( 0.00%)      pub fn new(
      .                   name: Symbol,
      .                   variant_did: Option<DefId>,
      .                   ctor_def_id: Option<DefId>,
      .                   discr: VariantDiscr,
      .                   fields: Vec<FieldDef>,
      .                   ctor_kind: CtorKind,
      .                   adt_kind: AdtKind,
      .                   parent_did: DefId,
-- line 1608 ----------------------------------------
-- line 1611 ----------------------------------------
      .               ) -> Self {
      .                   debug!(
      .                       "VariantDef::new(name = {:?}, variant_did = {:?}, ctor_def_id = {:?}, discr = {:?},
      .                        fields = {:?}, ctor_kind = {:?}, adt_kind = {:?}, parent_did = {:?})",
      .                       name, variant_did, ctor_def_id, discr, fields, ctor_kind, adt_kind, parent_did,
      .                   );
      .           
      .                   let mut flags = VariantFlags::NO_VARIANT_FLAGS;
     48 ( 0.00%)          if is_field_list_non_exhaustive {
      .                       flags |= VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE;
      .                   }
      .           
    144 ( 0.00%)          if recovered {
      .                       flags |= VariantFlags::IS_RECOVERED;
      .                   }
      .           
    432 ( 0.00%)          VariantDef {
      .                       def_id: variant_did.unwrap_or(parent_did),
      .                       ctor_def_id,
      .                       name,
      .                       discr,
    192 ( 0.00%)              fields,
      .                       ctor_kind,
      .                       flags,
      .                   }
    192 ( 0.00%)      }
      .           
      .               /// Is this field list non-exhaustive?
      .               #[inline]
      .               pub fn is_field_list_non_exhaustive(&self) -> bool {
      .                   self.flags.intersects(VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE)
      .               }
      .           
      .               /// Was this variant obtained as part of recovering from a syntactic error?
      .               #[inline]
      .               pub fn is_recovered(&self) -> bool {
      .                   self.flags.intersects(VariantFlags::IS_RECOVERED)
      .               }
      .           
      .               /// Computes the `Ident` of this variant by looking up the `Span`
    126 ( 0.00%)      pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
     72 ( 0.00%)          Ident::new(self.name, tcx.def_ident_span(self.def_id).unwrap())
    162 ( 0.00%)      }
      .           }
      .           
 66,003 ( 0.04%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]
      .           pub enum VariantDiscr {
      .               /// Explicit value for this variant, i.e., `X = 123`.
      .               /// The `DefId` corresponds to the embedded constant.
      .               Explicit(DefId),
      .           
      .               /// The previous variant's discriminant plus one.
      .               /// For efficiency reasons, the distance from the
      .               /// last `Explicit` discriminant is being stored,
      .               /// or `0` for the first variant, if it has none.
      .               Relative(u32),
      .           }
      .           
186,804 ( 0.10%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
      .           pub struct FieldDef {
      .               pub did: DefId,
      .               pub name: Symbol,
      .               pub vis: Visibility,
      .           }
      .           
    195 ( 0.00%)  bitflags! {
      .               #[derive(TyEncodable, TyDecodable, Default, HashStable)]
      .               pub struct ReprFlags: u8 {
      .                   const IS_C               = 1 << 0;
      .                   const IS_SIMD            = 1 << 1;
      .                   const IS_TRANSPARENT     = 1 << 2;
      .                   // Internal only for now. If true, don't reorder fields.
      .                   const IS_LINEAR          = 1 << 3;
      .                   // If true, don't expose any niche to type's context.
-- line 1684 ----------------------------------------
-- line 1689 ----------------------------------------
      .                   // Any of these flags being set prevent field reordering optimisation.
      .                   const IS_UNOPTIMISABLE   = ReprFlags::IS_C.bits
      .                                            | ReprFlags::IS_SIMD.bits
      .                                            | ReprFlags::IS_LINEAR.bits;
      .               }
      .           }
      .           
      .           /// Represents the repr options provided by the user,
 98,768 ( 0.05%)  #[derive(Copy, Clone, Debug, Eq, PartialEq, TyEncodable, TyDecodable, Default, HashStable)]
      .           pub struct ReprOptions {
      .               pub int: Option<attr::IntType>,
      .               pub align: Option<Align>,
      .               pub pack: Option<Align>,
      .               pub flags: ReprFlags,
      .               /// The seed to be used for randomizing a type's layout
      .               ///
      .               /// Note: This could technically be a `[u8; 16]` (a `u128`) which would
-- line 1705 ----------------------------------------
-- line 1706 ----------------------------------------
      .               /// be the "most accurate" hash as it'd encompass the item and crate
      .               /// hash without loss, but it does pay the price of being larger.
      .               /// Everything's a tradeoff, a `u64` seed should be sufficient for our
      .               /// purposes (primarily `-Z randomize-layout`)
      .               pub field_shuffle_seed: u64,
      .           }
      .           
      .           impl ReprOptions {
     52 ( 0.00%)      pub fn new(tcx: TyCtxt<'_>, did: DefId) -> ReprOptions {
      .                   let mut flags = ReprFlags::empty();
      .                   let mut size = None;
      .                   let mut max_align: Option<Align> = None;
      .                   let mut min_pack: Option<Align> = None;
      .           
      .                   // Generate a deterministically-derived seed from the item's path hash
      .                   // to allow for cross-crate compilation to actually work
      .                   let mut field_shuffle_seed = tcx.def_path_hash(did).0.to_smaller_hash();
      .           
      .                   // If the user defined a custom seed for layout randomization, xor the item's
      .                   // path hash with the user defined seed, this will allowing determinism while
      .                   // still allowing users to further randomize layout generation for e.g. fuzzing
     12 ( 0.00%)          if let Some(user_seed) = tcx.sess.opts.debugging_opts.layout_seed {
      .                       field_shuffle_seed ^= user_seed;
      .                   }
      .           
     16 ( 0.00%)          for attr in tcx.get_attrs(did).iter() {
     50 ( 0.00%)              for r in attr::find_repr_attrs(&tcx.sess, attr) {
      .                           flags.insert(match r {
      .                               attr::ReprC => ReprFlags::IS_C,
      .                               attr::ReprPacked(pack) => {
      .                                   let pack = Align::from_bytes(pack as u64).unwrap();
      .                                   min_pack = Some(if let Some(min_pack) = min_pack {
      .                                       min_pack.min(pack)
      .                                   } else {
      .                                       pack
-- line 1740 ----------------------------------------
-- line 1753 ----------------------------------------
      .                                   ReprFlags::empty()
      .                               }
      .                           });
      .                       }
      .                   }
      .           
      .                   // If `-Z randomize-layout` was enabled for the type definition then we can
      .                   // consider performing layout randomization
     32 ( 0.00%)          if tcx.sess.opts.debugging_opts.randomize_layout {
      .                       flags.insert(ReprFlags::RANDOMIZE_LAYOUT);
      .                   }
      .           
      .                   // This is here instead of layout because the choice must make it into metadata.
     24 ( 0.00%)          if !tcx.consider_optimizing(|| format!("Reorder fields of {:?}", tcx.def_path_str(did))) {
      .                       flags.insert(ReprFlags::IS_LINEAR);
      .                   }
      .           
      8 ( 0.00%)          Self { int: size, align: max_align, pack: min_pack, flags, field_shuffle_seed }
    112 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn simd(&self) -> bool {
      .                   self.flags.contains(ReprFlags::IS_SIMD)
      .               }
      .           
      .               #[inline]
      .               pub fn c(&self) -> bool {
-- line 1779 ----------------------------------------
-- line 1798 ----------------------------------------
      .               #[inline]
      .               pub fn hide_niche(&self) -> bool {
      .                   self.flags.contains(ReprFlags::HIDE_NICHE)
      .               }
      .           
      .               /// Returns the discriminant type, given these `repr` options.
      .               /// This must only be called on enums!
      .               pub fn discr_type(&self) -> attr::IntType {
     78 ( 0.00%)          self.int.unwrap_or(attr::SignedInt(ast::IntTy::Isize))
     28 ( 0.00%)      }
      .           
      .               /// Returns `true` if this `#[repr()]` should inhabit "smart enum
      .               /// layout" optimizations, such as representing `Foo<&T>` as a
      .               /// single pointer.
      .               pub fn inhibit_enum_layout_opt(&self) -> bool {
     20 ( 0.00%)          self.c() || self.int.is_some()
      .               }
      .           
      .               /// Returns `true` if this `#[repr()]` should inhibit struct field reordering
      .               /// optimizations, such as with `repr(C)`, `repr(packed(1))`, or `repr(<int>)`.
      .               pub fn inhibit_struct_field_reordering_opt(&self) -> bool {
     97 ( 0.00%)          if let Some(pack) = self.pack {
      .                       if pack.bytes() == 1 {
      .                           return true;
      .                       }
      .                   }
      .           
    200 ( 0.00%)          self.flags.intersects(ReprFlags::IS_UNOPTIMISABLE) || self.int.is_some()
      .               }
      .           
      .               /// Returns `true` if this type is valid for reordering and `-Z randomize-layout`
      .               /// was enabled for its declaration crate
      .               pub fn can_randomize_type_layout(&self) -> bool {
     47 ( 0.00%)          !self.inhibit_struct_field_reordering_opt()
      .                       && self.flags.contains(ReprFlags::RANDOMIZE_LAYOUT)
      .               }
      .           
      .               /// Returns `true` if this `#[repr()]` should inhibit union ABI optimisations.
      .               pub fn inhibit_union_abi_opt(&self) -> bool {
      .                   self.c()
      .               }
      .           }
      .           
      .           impl<'tcx> FieldDef {
      .               /// Returns the type of this field. The resulting type is not normalized. The `subst` is
      .               /// typically obtained via the second field of [`TyKind::Adt`].
  2,261 ( 0.00%)      pub fn ty(&self, tcx: TyCtxt<'tcx>, subst: SubstsRef<'tcx>) -> Ty<'tcx> {
    646 ( 0.00%)          tcx.type_of(self.did).subst(tcx, subst)
  2,584 ( 0.00%)      }
      .           
      .               /// Computes the `Ident` of this variant by looking up the `Span`
    140 ( 0.00%)      pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
     80 ( 0.00%)          Ident::new(self.name, tcx.def_ident_span(self.did).unwrap())
    180 ( 0.00%)      }
      .           }
      .           
      .           pub type Attributes<'tcx> = &'tcx [ast::Attribute];
      .           
      .           #[derive(Debug, PartialEq, Eq)]
      .           pub enum ImplOverlapKind {
      .               /// These impls are always allowed to overlap.
      .               Permitted {
-- line 1859 ----------------------------------------
-- line 1891 ----------------------------------------
      .               /// marker traits.
      .               /// 4. Neither of the impls can have any where-clauses.
      .               ///
      .               /// Once `traitobject` 0.1.0 is no longer an active concern, this hack can be removed.
      .               Issue33140,
      .           }
      .           
      .           impl<'tcx> TyCtxt<'tcx> {
  1,504 ( 0.00%)      pub fn typeck_body(self, body: hir::BodyId) -> &'tcx TypeckResults<'tcx> {
    376 ( 0.00%)          self.typeck(self.hir().body_owner_def_id(body))
  1,504 ( 0.00%)      }
      .           
      .               pub fn provided_trait_methods(self, id: DefId) -> impl 'tcx + Iterator<Item = &'tcx AssocItem> {
      .                   self.associated_items(id)
      .                       .in_definition_order()
      .                       .filter(|item| item.kind == AssocKind::Fn && item.defaultness.has_value())
      .               }
      .           
      .               fn item_name_from_hir(self, def_id: DefId) -> Option<Ident> {
      .                   self.hir().get_if_local(def_id).and_then(|node| node.ident())
      .               }
      .           
     90 ( 0.00%)      fn item_name_from_def_id(self, def_id: DefId) -> Option<Symbol> {
     10 ( 0.00%)          if def_id.index == CRATE_DEF_INDEX {
      .                       Some(self.crate_name(def_id.krate))
      .                   } else {
     30 ( 0.00%)              let def_key = self.def_key(def_id);
     50 ( 0.00%)              match def_key.disambiguated_data.data {
      .                           // The name of a constructor is that of its parent.
      .                           rustc_hir::definitions::DefPathData::Ctor => self.item_name_from_def_id(DefId {
      .                               krate: def_id.krate,
      .                               index: def_key.parent.unwrap(),
      .                           }),
     20 ( 0.00%)                  _ => def_key.disambiguated_data.data.get_opt_name(),
      .                       }
      .                   }
     80 ( 0.00%)      }
      .           
      .               /// Look up the name of an item across crates. This does not look at HIR.
      .               ///
      .               /// When possible, this function should be used for cross-crate lookups over
      .               /// [`opt_item_name`] to avoid invalidating the incremental cache. If you
      .               /// need to handle items without a name, or HIR items that will not be
      .               /// serialized cross-crate, or if you need the span of the item, use
      .               /// [`opt_item_name`] instead.
      .               ///
      .               /// [`opt_item_name`]: Self::opt_item_name
     70 ( 0.00%)      pub fn item_name(self, id: DefId) -> Symbol {
      .                   // Look at cross-crate items first to avoid invalidating the incremental cache
      .                   // unless we have to.
     10 ( 0.00%)          self.item_name_from_def_id(id).unwrap_or_else(|| {
      .                       bug!("item_name: no name for {:?}", self.def_path(id));
      .                   })
     50 ( 0.00%)      }
      .           
      .               /// Look up the name and span of an item or [`Node`].
      .               ///
      .               /// See [`item_name`][Self::item_name] for more information.
      .               pub fn opt_item_name(self, def_id: DefId) -> Option<Ident> {
      .                   // Look at the HIR first so the span will be correct if this is a local item.
      .                   self.item_name_from_hir(def_id)
      .                       .or_else(|| self.item_name_from_def_id(def_id).map(Ident::with_dummy_span))
      .               }
      .           
 11,940 ( 0.01%)      pub fn opt_associated_item(self, def_id: DefId) -> Option<&'tcx AssocItem> {
  4,776 ( 0.00%)          if let DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy = self.def_kind(def_id) {
      .                       Some(self.associated_item(def_id))
      .                   } else {
      .                       None
      .                   }
 10,746 ( 0.01%)      }
      .           
     28 ( 0.00%)      pub fn field_index(self, hir_id: hir::HirId, typeck_results: &TypeckResults<'_>) -> usize {
      .                   typeck_results.field_indices().get(hir_id).cloned().expect("no index for a field")
     56 ( 0.00%)      }
      .           
      .               pub fn find_field_index(self, ident: Ident, variant: &VariantDef) -> Option<usize> {
      .                   variant
      .                       .fields
      .                       .iter()
      .                       .position(|field| self.hygienic_eq(ident, field.ident(self), variant.def_id))
      .               }
      .           
-- line 1973 ----------------------------------------
-- line 2042 ----------------------------------------
      .           
      .                       debug!("impls_are_allowed_to_overlap({:?}, {:?}) = None", def_id1, def_id2);
      .                       None
      .                   }
      .               }
      .           
      .               /// Returns `ty::VariantDef` if `res` refers to a struct,
      .               /// or variant or their constructors, panics otherwise.
     21 ( 0.00%)      pub fn expect_variant_res(self, res: Res) -> &'tcx VariantDef {
     36 ( 0.00%)          match res {
      .                       Res::Def(DefKind::Variant, did) => {
      .                           let enum_did = self.parent(did).unwrap();
      .                           self.adt_def(enum_did).variant_with_id(did)
      .                       }
      .                       Res::Def(DefKind::Struct | DefKind::Union, did) => self.adt_def(did).non_enum_variant(),
      .                       Res::Def(DefKind::Ctor(CtorOf::Variant, ..), variant_ctor_did) => {
      .                           let variant_did = self.parent(variant_ctor_did).unwrap();
      .                           let enum_did = self.parent(variant_did).unwrap();
-- line 2059 ----------------------------------------
-- line 2060 ----------------------------------------
      .                           self.adt_def(enum_did).variant_with_ctor_id(variant_ctor_did)
      .                       }
      .                       Res::Def(DefKind::Ctor(CtorOf::Struct, ..), ctor_did) => {
      .                           let struct_did = self.parent(ctor_did).expect("struct ctor has no parent");
      .                           self.adt_def(struct_did).non_enum_variant()
      .                       }
      .                       _ => bug!("expect_variant_res used with unexpected res {:?}", res),
      .                   }
     24 ( 0.00%)      }
      .           
      .               /// Returns the possibly-auto-generated MIR of a `(DefId, Subst)` pair.
      .               pub fn instance_mir(self, instance: ty::InstanceDef<'tcx>) -> &'tcx Body<'tcx> {
      .                   match instance {
      .                       ty::InstanceDef::Item(def) => match self.def_kind(def.did) {
      .                           DefKind::Const
      .                           | DefKind::Static
      .                           | DefKind::AssocConst
-- line 2076 ----------------------------------------
-- line 2091 ----------------------------------------
      .                       | ty::InstanceDef::Virtual(..)
      .                       | ty::InstanceDef::ClosureOnceShim { .. }
      .                       | ty::InstanceDef::DropGlue(..)
      .                       | ty::InstanceDef::CloneShim(..) => self.mir_shims(instance),
      .                   }
      .               }
      .           
      .               /// Gets the attributes of a definition.
  9,130 ( 0.01%)      pub fn get_attrs(self, did: DefId) -> Attributes<'tcx> {
  2,739 ( 0.00%)          if let Some(did) = did.as_local() {
  2,274 ( 0.00%)              self.hir().attrs(self.hir().local_def_id_to_hir_id(did))
      .                   } else {
      .                       self.item_attrs(did)
      .                   }
  7,304 ( 0.00%)      }
      .           
      .               /// Determines whether an item is annotated with an attribute.
  1,032 ( 0.00%)      pub fn has_attr(self, did: DefId, attr: Symbol) -> bool {
  3,123 ( 0.00%)          self.sess.contains_name(&self.get_attrs(did), attr)
      .               }
      .           
      .               /// Determines whether an item is annotated with `doc(hidden)`.
     63 ( 0.00%)      pub fn is_doc_hidden(self, did: DefId) -> bool {
      9 ( 0.00%)          self.get_attrs(did)
      .                       .iter()
      2 ( 0.00%)              .filter_map(|attr| if attr.has_name(sym::doc) { attr.meta_item_list() } else { None })
      .                       .any(|items| items.iter().any(|item| item.has_name(sym::hidden)))
     72 ( 0.00%)      }
      .           
      .               /// Returns `true` if this is an `auto trait`.
  1,036 ( 0.00%)      pub fn trait_is_auto(self, trait_def_id: DefId) -> bool {
    148 ( 0.00%)          self.trait_def(trait_def_id).has_auto_impl
  1,184 ( 0.00%)      }
      .           
      .               /// Returns layout of a generator. Layout might be unavailable if the
      .               /// generator is tainted by errors.
      .               pub fn generator_layout(self, def_id: DefId) -> Option<&'tcx GeneratorLayout<'tcx>> {
      .                   self.optimized_mir(def_id).generator_layout()
      .               }
      .           
      .               /// Given the `DefId` of an impl, returns the `DefId` of the trait it implements.
      .               /// If it implements no trait, returns `None`.
    252 ( 0.00%)      pub fn trait_id_of_impl(self, def_id: DefId) -> Option<DefId> {
      .                   self.impl_trait_ref(def_id).map(|tr| tr.def_id)
    324 ( 0.00%)      }
      .           
      .               /// If the given defid describes a method belonging to an impl, returns the
      .               /// `DefId` of the impl that the method belongs to; otherwise, returns `None`.
     14 ( 0.00%)      pub fn impl_of_method(self, def_id: DefId) -> Option<DefId> {
     56 ( 0.00%)          self.opt_associated_item(def_id).and_then(|trait_item| match trait_item.container {
      .                       TraitContainer(_) => None,
      .                       ImplContainer(def_id) => Some(def_id),
      .                   })
     28 ( 0.00%)      }
      .           
      .               /// Looks up the span of `impl_did` if the impl is local; otherwise returns `Err`
      .               /// with the name of the crate containing the impl.
      .               pub fn span_of_impl(self, impl_did: DefId) -> Result<Span, Symbol> {
      .                   if let Some(impl_did) = impl_did.as_local() {
      .                       Ok(self.def_span(impl_did))
      .                   } else {
      .                       Err(self.crate_name(impl_did.krate))
      .                   }
      .               }
      .           
      .               /// Hygienically compares a use-site name (`use_name`) for a field or an associated item with
      .               /// its supposed definition name (`def_name`). The method also needs `DefId` of the supposed
      .               /// definition's parent/scope to perform comparison.
    480 ( 0.00%)      pub fn hygienic_eq(self, use_name: Ident, def_name: Ident, def_parent_def_id: DefId) -> bool {
      .                   // We could use `Ident::eq` here, but we deliberately don't. The name
      .                   // comparison fails frequently, and we want to avoid the expensive
      .                   // `normalize_to_macros_2_0()` calls required for the span comparison whenever possible.
     60 ( 0.00%)          use_name.name == def_name.name
    180 ( 0.00%)              && use_name
      .                           .span
      .                           .ctxt()
      .                           .hygienic_eq(def_name.span.ctxt(), self.expn_that_defined(def_parent_def_id))
    480 ( 0.00%)      }
      .           
     81 ( 0.00%)      pub fn adjust_ident(self, mut ident: Ident, scope: DefId) -> Ident {
     18 ( 0.00%)          ident.span.normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope));
     18 ( 0.00%)          ident
     72 ( 0.00%)      }
      .           
    486 ( 0.00%)      pub fn adjust_ident_and_get_scope(
      .                   self,
      .                   mut ident: Ident,
      .                   scope: DefId,
      .                   block: hir::HirId,
      .               ) -> (Ident, DefId) {
     54 ( 0.00%)          let scope = ident
      .                       .span
      .                       .normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope))
      .                       .and_then(|actual_expansion| actual_expansion.expn_data().parent_module)
    216 ( 0.00%)              .unwrap_or_else(|| self.parent_module(block).to_def_id());
    324 ( 0.00%)          (ident, scope)
    486 ( 0.00%)      }
      .           
     42 ( 0.00%)      pub fn is_object_safe(self, key: DefId) -> bool {
      .                   self.object_safety_violations(key).is_empty()
     48 ( 0.00%)      }
      .           }
      .           
      .           /// Yields the parent function's `LocalDefId` if `def_id` is an `impl Trait` definition.
    405 ( 0.00%)  pub fn is_impl_trait_defn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<LocalDefId> {
    405 ( 0.00%)      let def_id = def_id.as_local()?;
    304 ( 0.00%)      if let Node::Item(item) = tcx.hir().get_by_def_id(def_id) {
    100 ( 0.00%)          if let hir::ItemKind::OpaqueTy(ref opaque_ty) = item.kind {
      .                       return match opaque_ty.origin {
      .                           hir::OpaqueTyOrigin::FnReturn(parent) | hir::OpaqueTyOrigin::AsyncFn(parent) => {
      .                               Some(parent)
      .                           }
      .                           hir::OpaqueTyOrigin::TyAlias => None,
      .                       };
      .                   }
      .               }
      .               None
    540 ( 0.00%)  }
      .           
      .           pub fn int_ty(ity: ast::IntTy) -> IntTy {
      .               match ity {
      .                   ast::IntTy::Isize => IntTy::Isize,
      .                   ast::IntTy::I8 => IntTy::I8,
      .                   ast::IntTy::I16 => IntTy::I16,
      .                   ast::IntTy::I32 => IntTy::I32,
      .                   ast::IntTy::I64 => IntTy::I64,
-- line 2216 ----------------------------------------
-- line 2231 ----------------------------------------
      .           
      .           pub fn float_ty(fty: ast::FloatTy) -> FloatTy {
      .               match fty {
      .                   ast::FloatTy::F32 => FloatTy::F32,
      .                   ast::FloatTy::F64 => FloatTy::F64,
      .               }
      .           }
      .           
     22 ( 0.00%)  pub fn ast_int_ty(ity: IntTy) -> ast::IntTy {
      .               match ity {
      .                   IntTy::Isize => ast::IntTy::Isize,
      .                   IntTy::I8 => ast::IntTy::I8,
      .                   IntTy::I16 => ast::IntTy::I16,
      .                   IntTy::I32 => ast::IntTy::I32,
      .                   IntTy::I64 => ast::IntTy::I64,
      .                   IntTy::I128 => ast::IntTy::I128,
      .               }
     22 ( 0.00%)  }
      .           
      .           pub fn ast_uint_ty(uty: UintTy) -> ast::UintTy {
      .               match uty {
      .                   UintTy::Usize => ast::UintTy::Usize,
      .                   UintTy::U8 => ast::UintTy::U8,
      .                   UintTy::U16 => ast::UintTy::U16,
      .                   UintTy::U32 => ast::UintTy::U32,
      .                   UintTy::U64 => ast::UintTy::U64,
-- line 2256 ----------------------------------------
-- line 2262 ----------------------------------------
      .               closure::provide(providers);
      .               context::provide(providers);
      .               erase_regions::provide(providers);
      .               layout::provide(providers);
      .               util::provide(providers);
      .               print::provide(providers);
      .               super::util::bug::provide(providers);
      .               super::middle::provide(providers);
      8 ( 0.00%)      *providers = ty::query::Providers {
      .                   trait_impls_of: trait_def::trait_impls_of_provider,
      .                   type_uninhabited_from: inhabitedness::type_uninhabited_from,
      .                   const_param_default: consts::const_param_default,
      .                   vtable_allocation: vtable::vtable_allocation_provider,
      .                   ..*providers
      .               };
      1 ( 0.00%)  }
      .           
      .           /// A map for the local crate mapping each type to a vector of its
      .           /// inherent impls. This is not meant to be used outside of coherence;
      .           /// rather, you should request the vector for a specific type via
      .           /// `tcx.inherent_impls(def_id)` so as to minimize your dependencies
      .           /// (constructing this map requires touching the entire crate).
      .           #[derive(Clone, Debug, Default, HashStable)]
      .           pub struct CrateInherentImpls {
-- line 2285 ----------------------------------------
-- line 2288 ----------------------------------------
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, HashStable)]
      .           pub struct SymbolName<'tcx> {
      .               /// `&str` gives a consistent ordering, which ensures reproducible builds.
      .               pub name: &'tcx str,
      .           }
      .           
      .           impl<'tcx> SymbolName<'tcx> {
     30 ( 0.00%)      pub fn new(tcx: TyCtxt<'tcx>, name: &str) -> SymbolName<'tcx> {
      .                   SymbolName {
      .                       name: unsafe { str::from_utf8_unchecked(tcx.arena.alloc_slice(name.as_bytes())) },
      .                   }
     40 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> fmt::Display for SymbolName<'tcx> {
      .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Display::fmt(&self.name, fmt)
      .               }
      .           }
      .           
-- line 2308 ----------------------------------------

137,952 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir               

-- line 57 ----------------------------------------
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
      .                   ///
      .                   /// ```
      .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
     26 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
     13 ( 0.00%)              from_str_radix(src, radix)
     39 ( 0.00%)          }
      .           
      .                   /// Returns the number of ones in the binary representation of `self`.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
      .                   ///
      .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
      .                   #[doc(alias = "popcount")]
      .                   #[doc(alias = "popcnt")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn count_ones(self) -> u32 {
  6,990 ( 0.00%)              intrinsics::ctpop(self as $ActualT) as u32
      .                   }
      .           
      .                   /// Returns the number of zeros in the binary representation of `self`.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
      .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
      .                   /// assert_eq!(n.leading_zeros(), 2);
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn leading_zeros(self) -> u32 {
 67,756 ( 0.04%)              intrinsics::ctlz(self as $ActualT) as u32
      .                   }
      .           
      .                   /// Returns the number of trailing zeros in the binary representation
      .                   /// of `self`.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
      .                   /// assert_eq!(n.trailing_zeros(), 3);
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn trailing_zeros(self) -> u32 {
 54,944 ( 0.03%)              intrinsics::cttz(self) as u32
      .                   }
      .           
      .                   /// Returns the number of leading ones in the binary representation of `self`.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
      .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn rotate_left(self, n: u32) -> Self {
971,681 ( 0.53%)              intrinsics::rotate_left(self, n as $SelfT)
      .                   }
      .           
      .                   /// Shifts the bits to the right by a specified amount, `n`,
      .                   /// wrapping the truncated bits to the beginning of the resulting
      .                   /// integer.
      .                   ///
      .                   /// Please note this isn't the same operation as the `>>` shifting operator!
      .                   ///
-- line 220 ----------------------------------------
-- line 456 ----------------------------------------
      .                   )]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
      .                   #[inline(always)]
      .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
      .                       // SAFETY: the caller must uphold the safety contract for
      .                       // `unchecked_add`.
154,241 ( 0.08%)              unsafe { intrinsics::unchecked_add(self, rhs) }
      .                   }
      .           
      .                   /// Checked addition with a signed integer. Computes `self + rhs`,
      .                   /// returning `None` if overflow occurred.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
      .                   )]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
      .                   #[inline(always)]
      .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
      .                       // SAFETY: the caller must uphold the safety contract for
      .                       // `unchecked_sub`.
  2,467 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
      .                   }
      .           
      .                   /// Checked integer multiplication. Computes `self * rhs`, returning
      .                   /// `None` if overflow occurred.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 1035 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
      .                   #[inline(always)]
      .                   pub const fn saturating_add(self, rhs: Self) -> Self {
  7,433 ( 0.00%)              intrinsics::saturating_add(self, rhs)
      .                   }
      .           
      .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
      .                   /// saturating at the numeric bounds instead of overflowing.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
      .                   #[inline(always)]
      .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
    354 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
      .                   }
      .           
      .                   /// Saturating integer multiplication. Computes `self * rhs`,
      .                   /// saturating at the numeric bounds instead of overflowing.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
456,223 ( 0.25%)              intrinsics::wrapping_add(self, rhs)
      .                   }
      .           
      .                   /// Wrapping (modular) addition with a signed integer. Computes
      .                   /// `self + rhs`, wrapping around at the boundary of the type.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
252,610 ( 0.14%)              intrinsics::wrapping_sub(self, rhs)
      .                   }
      .           
      .                   /// Wrapping (modular) multiplication. Computes `self *
      .                   /// rhs`, wrapping around at the boundary of the type.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
      .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
705,947 ( 0.39%)              intrinsics::wrapping_mul(self, rhs)
      .                   }
      .           
      .                   /// Wrapping (modular) division. Computes `self / rhs`.
      .                   /// Wrapped division on unsigned types is just normal division.
      .                   /// There's no way wrapping could ever happen.
      .                   /// This function exists, so that all operations
      .                   /// are accounted for in the wrapping operations.
      .                   ///
-- line 1256 ----------------------------------------
-- line 1491 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_add(2), (7, false));")]
      .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
      .                   /// ```
      .                   #[stable(feature = "wrapping", since = "1.7.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      1 ( 0.00%)          pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
 80,057 ( 0.04%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
      .                       (a as Self, b)
      2 ( 0.00%)          }
      .           
      .                   /// Calculates `self + rhs + carry` without the ability to overflow.
      .                   ///
      .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
      .                   /// additional bit of overflow. This allows for chaining together multiple additions
      .                   /// to create "big integers" which represent larger values.
      .                   ///
      .                   #[doc = concat!("This can be thought of as a ", stringify!($BITS), "-bit \"full adder\", in the electronics sense.")]
-- line 1510 ----------------------------------------
-- line 1587 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_sub(2), (3, false));")]
      .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
      .                   /// ```
      .                   #[stable(feature = "wrapping", since = "1.7.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      4 ( 0.00%)          pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
 44,565 ( 0.02%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
      .                       (a as Self, b)
      8 ( 0.00%)          }
      .           
      .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
      .                   ///
      .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
      .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
      .                   /// to create "big integers" which represent larger values.
      .                   ///
      .                   /// # Examples
-- line 1606 ----------------------------------------
-- line 1674 ----------------------------------------
      .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
      .                   /// ```
      .                   #[stable(feature = "wrapping", since = "1.7.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                     without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
122,932 ( 0.07%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
      .                       (a as Self, b)
      .                   }
      .           
      .                   /// Calculates the divisor when `self` is divided by `rhs`.
      .                   ///
      .                   /// Returns a tuple of the divisor along with a boolean indicating
      .                   /// whether an arithmetic overflow would occur. Note that for unsigned
      .                   /// integers overflow never occurs, so the second value is always
-- line 1690 ----------------------------------------
-- line 2132 ----------------------------------------
      .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
      .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
      .                   /// ```
      .                   #[must_use]
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
      .                   #[inline(always)]
      .                   pub const fn is_power_of_two(self) -> bool {
    156 ( 0.00%)              self.count_ones() == 1
      .                   }
      .           
      .                   // Returns one less than next power of two.
      .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
      .                   //
      .                   // 8u8.one_less_than_next_power_of_two() == 7
      .                   // 6u8.one_less_than_next_power_of_two() == 7
      .                   //
      .                   // This method cannot overflow, as in the `next_power_of_two`
      .                   // overflow cases it instead ends up returning the maximum value
      .                   // of the type, and can return 0 for 0.
      .                   #[inline]
      .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
      .                   const fn one_less_than_next_power_of_two(self) -> Self {
    514 ( 0.00%)              if self <= 1 { return 0; }
      .           
  1,702 ( 0.00%)              let p = self - 1;
      .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
      .                       // That means the shift is always in-bounds, and some processors
      .                       // (such as intel pre-haswell) have more efficient ctlz
      .                       // intrinsics when the argument is non-zero.
  5,085 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
  1,699 ( 0.00%)              <$SelfT>::MAX >> z
      .                   }
      .           
      .                   /// Returns the smallest power of two greater than or equal to `self`.
      .                   ///
      .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
      .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
      .                   /// release mode (the only situation in which method can return 0).
      .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline]
      .                   #[rustc_inherit_overflow_checks]
      .                   pub const fn next_power_of_two(self) -> Self {
  2,878 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
      .                   }
      .           
      .                   /// Returns the smallest power of two greater than or equal to `n`. If
      .                   /// the next power of two is greater than the type's maximum value,
      .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
      .                   ///
      .                   /// # Examples
      .                   ///
-- line 2195 ----------------------------------------

  6,933 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/bit.rs
--------------------------------------------------------------------------------
Ir               

-- line 267 ----------------------------------------
      .           macro_rules! bitor_impl {
      .               ($($t:ty)*) => ($(
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_unstable(feature = "const_ops", issue = "90080")]
      .                   impl const BitOr for $t {
      .                       type Output = $t;
      .           
      .                       #[inline]
     40 ( 0.00%)              fn bitor(self, rhs: $t) -> $t { self | rhs }
      .                   }
      .           
      .                   forward_ref_binop! { impl const BitOr, bitor for $t, $t }
      .               )*)
      .           }
      .           
      .           bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }
      .           
-- line 283 ----------------------------------------
-- line 368 ----------------------------------------
      .           macro_rules! bitxor_impl {
      .               ($($t:ty)*) => ($(
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_unstable(feature = "const_ops", issue = "90080")]
      .                   impl const BitXor for $t {
      .                       type Output = $t;
      .           
      .                       #[inline]
452,959 ( 0.25%)              fn bitxor(self, other: $t) -> $t { self ^ other }
      .                   }
      .           
      .                   forward_ref_binop! { impl const BitXor, bitxor for $t, $t }
      .               )*)
      .           }
      .           
      .           bitxor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }
      .           
-- line 384 ----------------------------------------

 64,547 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/bit.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir              

-- line 36 ----------------------------------------
     .           use rustc_session::parse::ParseSess;
     .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
     .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
     .           use tracing::debug;
     .           
     .           use std::ops::Range;
     .           use std::{cmp, mem, slice};
     .           
   720 ( 0.00%)  bitflags::bitflags! {
     .               struct Restrictions: u8 {
     .                   const STMT_EXPR         = 1 << 0;
     .                   const NO_STRUCT_LITERAL = 1 << 1;
     .                   const CONST_EXPR        = 1 << 2;
     .               }
     .           }
     .           
     .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
     .                               $self.bump();
     .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
     .                           }
     .                       }
     .                   }
     .               };
     .           }
     .           
 2,794 ( 0.00%)  #[derive(Clone)]
     .           pub struct Parser<'a> {
    76 ( 0.00%)      pub sess: &'a ParseSess,
     .               /// The current token.
    50 ( 0.00%)      pub token: Token,
     .               /// The spacing for the current token
    44 ( 0.00%)      pub token_spacing: Spacing,
     .               /// The previous token.
    75 ( 0.00%)      pub prev_token: Token,
    63 ( 0.00%)      pub capture_cfg: bool,
   145 ( 0.00%)      restrictions: Restrictions,
    88 ( 0.00%)      expected_tokens: Vec<TokenType>,
     .               // Important: This must only be advanced from `next_tok`
     .               // to ensure that `token_cursor.num_next_calls` is updated properly
     .               token_cursor: TokenCursor,
    88 ( 0.00%)      desugar_doc_comments: bool,
     .               /// This field is used to keep track of how many left angle brackets we have seen. This is
     .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
     .               /// appropriately.
     .               ///
     .               /// See the comments in the `parse_path_segment` function for more details.
    88 ( 0.00%)      unmatched_angle_bracket_count: u32,
   132 ( 0.00%)      max_angle_bracket_count: u32,
     .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
     .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
     .               /// error.
    44 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
     .               last_unexpected_token_span: Option<Span>,
     .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
     .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
     .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
     .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
     .               subparser_name: Option<&'static str>,
     .               capture_state: CaptureState,
     .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
     .           /// the first macro inner attribute to invoke a proc-macro).
     .           /// When create a `TokenStream`, the inner attributes get inserted
     .           /// into the proper place in the token stream.
     .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
     .           
     .           /// Controls how we capture tokens. Capturing can be expensive,
     .           /// so we try to avoid performing capturing in cases where
     .           /// we will never need an `AttrAnnotatedTokenStream`
    44 ( 0.00%)  #[derive(Copy, Clone)]
     .           pub enum Capturing {
     .               /// We aren't performing any capturing - this is the default mode.
     .               No,
     .               /// We are capturing tokens
     .               Yes,
     .           }
     .           
   183 ( 0.00%)  #[derive(Clone)]
     .           struct CaptureState {
   176 ( 0.00%)      capturing: Capturing,
    44 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
     .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
     .           }
     .           
     .           impl<'a> Drop for Parser<'a> {
     .               fn drop(&mut self) {
   307 ( 0.00%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
     .               }
     .           }
     .           
 4,974 ( 0.00%)  #[derive(Clone)]
     .           struct TokenCursor {
     .               frame: TokenCursorFrame,
 1,149 ( 0.00%)      stack: Vec<TokenCursorFrame>,
     .               desugar_doc_comments: bool,
     .               // Counts the number of calls to `next` or `next_desugared`,
     .               // depending on whether `desugar_doc_comments` is set.
   361 ( 0.00%)      num_next_calls: usize,
     .               // During parsing, we may sometimes need to 'unglue' a
     .               // glued token into two component tokens
     .               // (e.g. '>>' into '>' and '>), so that the parser
     .               // can consume them one at a time. This process
     .               // bypasses the normal capturing mechanism
     .               // (e.g. `num_next_calls` will not be incremented),
     .               // since the 'unglued' tokens due not exist in
     .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
     .               // in `Option<Vec<u8>>` requires us to unglue
     .               // the trailing `>>` token. The `break_last_token`
     .               // field is used to track this token - it gets
     .               // appended to the captured stream when
     .               // we evaluate a `LazyTokenStream`
     .               break_last_token: bool,
     .           }
     .           
 2,293 ( 0.00%)  #[derive(Clone)]
     .           struct TokenCursorFrame {
   792 ( 0.00%)      delim: token::DelimToken,
     .               span: DelimSpan,
     .               open_delim: bool,
 1,584 ( 0.00%)      tree_cursor: tokenstream::Cursor,
     .               close_delim: bool,
     .           }
     .           
     .           impl TokenCursorFrame {
     .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
   230 ( 0.00%)          TokenCursorFrame {
     .                       delim,
     .                       span,
     .                       open_delim: false,
 1,016 ( 0.00%)              tree_cursor: tts.into_trees(),
     .                       close_delim: false,
     .                   }
     .               }
     .           }
     .           
     .           impl TokenCursor {
76,284 ( 0.04%)      fn next(&mut self) -> (Token, Spacing) {
     .                   loop {
38,185 ( 0.02%)              let (tree, spacing) = if !self.frame.open_delim {
   920 ( 0.00%)                  self.frame.open_delim = true;
 4,600 ( 0.00%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
73,989 ( 0.04%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
     .                           tree
 3,762 ( 0.00%)              } else if !self.frame.close_delim {
   910 ( 0.00%)                  self.frame.close_delim = true;
 4,550 ( 0.00%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
 1,820 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
11,830 ( 0.01%)                  self.frame = frame;
     .                           continue;
     .                       } else {
 1,098 ( 0.00%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
     .                       };
     .           
14,546 ( 0.01%)              match tree {
     .                           TokenTree::Token(token) => {
50,856 ( 0.03%)                      return (token, spacing);
     .                           }
     .                           TokenTree::Delimited(sp, delim, tts) => {
     .                               let frame = TokenCursorFrame::new(sp, delim, tts);
     .                               self.stack.push(mem::replace(&mut self.frame, frame));
     .                           }
     .                       }
     .                   }
50,856 ( 0.03%)      }
     .           
23,150 ( 0.01%)      fn next_desugared(&mut self) -> (Token, Spacing) {
 6,953 ( 0.00%)          let (data, attr_style, sp) = match self.next() {
    12 ( 0.00%)              (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
     .                           (data, attr_style, span)
     .                       }
11,555 ( 0.01%)              tok => return tok,
     .                   };
     .           
     .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
     .                   // required to wrap the text.
     .                   let mut num_of_hashes = 0;
     .                   let mut count = 0;
 1,060 ( 0.00%)          for ch in data.as_str().chars() {
     .                       count = match ch {
     .                           '"' => 1,
     .                           '#' if count > 0 => count + 1,
     .                           _ => 0,
     .                       };
     .                       num_of_hashes = cmp::max(num_of_hashes, count);
     .                   }
     .           
    16 ( 0.00%)          let delim_span = DelimSpan::from_single(sp);
    20 ( 0.00%)          let body = TokenTree::Delimited(
     .                       delim_span,
     .                       token::Bracket,
    48 ( 0.00%)              [
    28 ( 0.00%)                  TokenTree::token(token::Ident(sym::doc, false), sp),
    16 ( 0.00%)                  TokenTree::token(token::Eq, sp),
    32 ( 0.00%)                  TokenTree::token(TokenKind::lit(token::StrRaw(num_of_hashes), data, None), sp),
     .                       ]
     .                       .iter()
     .                       .cloned()
     .                       .collect::<TokenStream>(),
     4 ( 0.00%)          );
     .           
     .                   self.stack.push(mem::replace(
     .                       &mut self.frame,
     .                       TokenCursorFrame::new(
     .                           delim_span,
     .                           token::NoDelim,
     4 ( 0.00%)                  if attr_style == AttrStyle::Inner {
     .                               [TokenTree::token(token::Pound, sp), TokenTree::token(token::Not, sp), body]
     .                                   .iter()
     .                                   .cloned()
     .                                   .collect::<TokenStream>()
     .                           } else {
    48 ( 0.00%)                      [TokenTree::token(token::Pound, sp), body]
     .                                   .iter()
     .                                   .cloned()
     .                                   .collect::<TokenStream>()
     .                           },
     .                       ),
     .                   ));
     .           
    12 ( 0.00%)          self.next()
20,835 ( 0.01%)      }
     .           }
     .           
 1,485 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
     .           enum TokenType {
 1,191 ( 0.00%)      Token(TokenKind),
     .               Keyword(Symbol),
     .               Operator,
     .               Lifetime,
     .               Ident,
     .               Path,
     .               Type,
     .               Const,
     .           }
-- line 353 ----------------------------------------
-- line 378 ----------------------------------------
     .               /// The separator token.
     .               sep: Option<TokenKind>,
     .               /// `true` if a trailing separator is allowed.
     .               trailing_sep_allowed: bool,
     .           }
     .           
     .           impl SeqSep {
     .               fn trailing_allowed(t: TokenKind) -> SeqSep {
    12 ( 0.00%)          SeqSep { sep: Some(t), trailing_sep_allowed: true }
     .               }
     .           
     .               fn none() -> SeqSep {
     .                   SeqSep { sep: None, trailing_sep_allowed: false }
     .               }
     .           }
     .           
     .           pub enum FollowedByType {
     .               Yes,
     .               No,
     .           }
     .           
     .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
    92 ( 0.00%)      Some(match token.kind {
   184 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
   184 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
   184 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
     .                   token::DocComment(..) => "doc comment",
     .                   _ => return None,
     .               })
     .           }
     .           
   322 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
    92 ( 0.00%)      let token_str = pprust::token_to_string(token);
     .               match token_descr_opt(token) {
     .                   Some(prefix) => format!("{} `{}`", prefix, token_str),
   322 ( 0.00%)          _ => format!("`{}`", token_str),
     .               }
   230 ( 0.00%)  }
     .           
     .           impl<'a> Parser<'a> {
   644 ( 0.00%)      pub fn new(
     .                   sess: &'a ParseSess,
     .                   tokens: TokenStream,
     .                   desugar_doc_comments: bool,
     .                   subparser_name: Option<&'static str>,
     .               ) -> Self {
    46 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
    92 ( 0.00%)          start_frame.open_delim = true;
     .                   start_frame.close_delim = true;
     .           
 1,426 ( 0.00%)          let mut parser = Parser {
     .                       sess,
    46 ( 0.00%)              token: Token::dummy(),
     .                       token_spacing: Spacing::Alone,
    46 ( 0.00%)              prev_token: Token::dummy(),
     .                       capture_cfg: false,
     .                       restrictions: Restrictions::empty(),
     .                       expected_tokens: Vec::new(),
     .                       token_cursor: TokenCursor {
   276 ( 0.00%)                  frame: start_frame,
     .                           stack: Vec::new(),
     .                           num_next_calls: 0,
     .                           desugar_doc_comments,
     .                           break_last_token: false,
     .                       },
     .                       desugar_doc_comments,
     .                       unmatched_angle_bracket_count: 0,
     .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
     .                           capturing: Capturing::No,
     .                           replace_ranges: Vec::new(),
     .                           inner_attr_ranges: Default::default(),
     .                       },
     .                       current_closure: None,
     .                   };
     .           
     .                   // Make parser point to the first token.
    92 ( 0.00%)          parser.bump();
     .           
     .                   parser
   414 ( 0.00%)      }
     .           
     .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
     .                   loop {
37,536 ( 0.02%)              let (mut next, spacing) = if self.desugar_doc_comments {
 9,260 ( 0.01%)                  self.token_cursor.next_desugared()
     .                       } else {
11,823 ( 0.01%)                  self.token_cursor.next()
     .                       };
25,024 ( 0.01%)              self.token_cursor.num_next_calls += 1;
     .                       // We've retrieved an token from the underlying
     .                       // cursor, so we no longer need to worry about
     .                       // an unglued token. See `break_and_eat` for more details
 6,256 ( 0.00%)              self.token_cursor.break_last_token = false;
25,024 ( 0.01%)              if next.span.is_dummy() {
     .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
   204 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
     .                       }
21,498 ( 0.01%)              if matches!(
12,512 ( 0.01%)                  next.kind,
     .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
     .                       ) {
     .                           continue;
     .                       }
24,992 ( 0.01%)              return (next, spacing);
     .                   }
     .               }
     .           
     .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
     .                   match self.expect_one_of(&[], &[]) {
     .                       Err(e) => Err(e),
     .                       // We can get `Ok(true)` from `recover_closing_delimiter`
     .                       // which is called in `expected_one_of_not_found`.
     .                       Ok(_) => FatalError.raise(),
     .                   }
     .               }
     .           
     .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
 2,871 ( 0.00%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
   319 ( 0.00%)          if self.expected_tokens.is_empty() {
   180 ( 0.00%)              if self.token == *t {
   150 ( 0.00%)                  self.bump();
     .                           Ok(false)
     .                       } else {
     .                           self.unexpected_try_recover(t)
     .                       }
     .                   } else {
 3,468 ( 0.00%)              self.expect_one_of(slice::from_ref(t), &[])
     .                   }
 4,785 ( 0.00%)      }
     .           
     .               /// Expect next token to be edible or inedible token.  If edible,
     .               /// then consume it; if inedible, then return without consuming
     .               /// anything.  Signal a fatal error if next token is unexpected.
 4,152 ( 0.00%)      pub fn expect_one_of(
     .                   &mut self,
     .                   edible: &[TokenKind],
     .                   inedible: &[TokenKind],
     .               ) -> PResult<'a, bool /* recovered */> {
   692 ( 0.00%)          if edible.contains(&self.token.kind) {
   891 ( 0.00%)              self.bump();
     .                       Ok(false)
     .                   } else if inedible.contains(&self.token.kind) {
     .                       // leave it in the input
     .                       Ok(false)
     .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
     .                       FatalError.raise();
     .                   } else {
     .                       self.expected_one_of_not_found(edible, inedible)
     .                   }
 5,190 ( 0.00%)      }
     .           
     .               // Public for rustfmt usage.
     .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
 2,658 ( 0.00%)          self.parse_ident_common(true)
     .               }
     .           
     .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
 1,995 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
     .                       TokenKind::DocComment(..) => {
     .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
     .                       }
     .                       _ => self.expected_ident_found(),
     .                   })
     .               }
     .           
 4,599 ( 0.00%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
   657 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
 3,942 ( 0.00%)          if !is_raw && ident.is_reserved() {
     .                       let mut err = self.expected_ident_found();
     .                       if recover {
     .                           err.emit();
     .                       } else {
     .                           return Err(err);
     .                       }
     .                   }
 2,628 ( 0.00%)          self.bump();
     .                   Ok(ident)
 6,570 ( 0.00%)      }
     .           
     .               /// Checks if the next token is `tok`, and returns `true` if so.
     .               ///
     .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
     .               /// encountered.
53,795 ( 0.03%)      fn check(&mut self, tok: &TokenKind) -> bool {
23,502 ( 0.01%)          let is_present = self.token == *tok;
15,914 ( 0.01%)          if !is_present {
32,870 ( 0.02%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
     .                   }
     .                   is_present
53,795 ( 0.03%)      }
     .           
     .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
    24 ( 0.00%)      pub fn eat(&mut self, tok: &TokenKind) -> bool {
11,771 ( 0.01%)          let is_present = self.check(tok);
 7,587 ( 0.00%)          if is_present {
 1,787 ( 0.00%)              self.bump()
     .                   }
     .                   is_present
    30 ( 0.00%)      }
     .           
     .               /// If the next token is the given keyword, returns `true` without eating it.
     .               /// An expectation is also added for diagnostics purposes.
 2,225 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
   592 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
15,601 ( 0.01%)          self.token.is_keyword(kw)
     .               }
     .           
     .               /// If the next token is the given keyword, eats it and returns `true`.
     .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
     .               // Public for rustfmt usage.
 4,400 ( 0.00%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
 3,484 ( 0.00%)          if self.check_keyword(kw) {
   421 ( 0.00%)              self.bump();
     .                       true
     .                   } else {
     .                       false
     .                   }
 4,400 ( 0.00%)      }
     .           
     .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
   508 ( 0.00%)          if self.token.is_keyword(kw) {
   118 ( 0.00%)              self.bump();
     .                       true
     .                   } else {
     .                       false
     .                   }
     .               }
     .           
     .               /// If the given word is not a keyword, signals an error.
     .               /// If the next token is not the given word, signals an error.
     .               /// Otherwise, eats it.
    55 ( 0.00%)      fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
     .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
    44 ( 0.00%)      }
     .           
     .               /// Is the given keyword `kw` followed by a non-reserved identifier?
 2,280 ( 0.00%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
 1,140 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
 2,565 ( 0.00%)      }
     .           
 2,874 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
 1,094 ( 0.00%)          if ok {
     .                       true
     .                   } else {
   480 ( 0.00%)              self.expected_tokens.push(typ);
     .                       false
     .                   }
 2,874 ( 0.00%)      }
     .           
     .               fn check_ident(&mut self) -> bool {
   834 ( 0.00%)          self.check_or_expected(self.token.is_ident(), TokenType::Ident)
     .               }
     .           
 1,048 ( 0.00%)      fn check_path(&mut self) -> bool {
 2,302 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
 1,310 ( 0.00%)      }
     .           
     .               fn check_type(&mut self) -> bool {
   224 ( 0.00%)          self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
     .               }
     .           
     .               fn check_const_arg(&mut self) -> bool {
   200 ( 0.00%)          self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
     .               }
     .           
   801 ( 0.00%)      fn check_inline_const(&self, dist: usize) -> bool {
   445 ( 0.00%)          self.is_keyword_ahead(dist, &[kw::Const])
     .                       && self.look_ahead(dist + 1, |t| match t.kind {
     .                           token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),
     .                           token::OpenDelim(DelimToken::Brace) => true,
     .                           _ => false,
     .                       })
   801 ( 0.00%)      }
     .           
     .               /// Checks to see if the next token is either `+` or `+=`.
     .               /// Otherwise returns `false`.
     .               fn check_plus(&mut self) -> bool {
   220 ( 0.00%)          self.check_or_expected(
   110 ( 0.00%)              self.token.is_like_plus(),
   110 ( 0.00%)              TokenType::Token(token::BinOp(token::Plus)),
     .                   )
     .               }
     .           
     .               /// Eats the expected token if it's present possibly breaking
     .               /// compound tokens like multi-character operators in process.
     .               /// Returns `true` if the token was eaten.
 4,032 ( 0.00%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
 2,352 ( 0.00%)          if self.token.kind == expected {
   130 ( 0.00%)              self.bump();
     .                       return true;
     .                   }
 1,355 ( 0.00%)          match self.token.kind.break_two_token_op() {
     3 ( 0.00%)              Some((first, second)) if first == expected => {
     .                           let first_span = self.sess.source_map().start_point(self.token.span);
     .                           let second_span = self.token.span.with_lo(first_span.hi());
     .                           self.token = Token::new(first, first_span);
     .                           // Keep track of this token - if we end token capturing now,
     .                           // we'll want to append this token to the captured stream.
     .                           //
     .                           // If we consume any additional tokens, then this token
     .                           // is not needed (we'll capture the entire 'glued' token),
-- line 683 ----------------------------------------
-- line 684 ----------------------------------------
     .                           // and `next_tok` will set this field to `None`
     .                           self.token_cursor.break_last_token = true;
     .                           // Use the spacing of the glued token as the spacing
     .                           // of the unglued second token.
     .                           self.bump_with((Token::new(second, second_span), self.token_spacing));
     .                           true
     .                       }
     .                       _ => {
   813 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
     .                           false
     .                       }
     .                   }
 4,109 ( 0.00%)      }
     .           
     .               /// Eats `+` possibly breaking tokens like `+=` in process.
     .               fn eat_plus(&mut self) -> bool {
     8 ( 0.00%)          self.break_and_eat(token::BinOp(token::Plus))
     .               }
     .           
     .               /// Eats `&` possibly breaking tokens like `&&` in process.
     .               /// Signals an error if `&` is not eaten.
     .               fn expect_and(&mut self) -> PResult<'a, ()> {
   126 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
     .               }
     .           
     .               /// Eats `|` possibly breaking tokens like `||` in process.
     .               /// Signals an error if `|` was not eaten.
     .               fn expect_or(&mut self) -> PResult<'a, ()> {
    24 ( 0.00%)          if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
     .               }
     .           
     .               /// Eats `<` possibly breaking tokens like `<<` in process.
   244 ( 0.00%)      fn eat_lt(&mut self) -> bool {
   925 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
   596 ( 0.00%)          if ate {
     .                       // See doc comment for `unmatched_angle_bracket_count`.
    80 ( 0.00%)              self.unmatched_angle_bracket_count += 1;
    84 ( 0.00%)              self.max_angle_bracket_count += 1;
     .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
     .                   }
     .                   ate
   244 ( 0.00%)      }
     .           
     .               /// Eats `<` possibly breaking tokens like `<<` in process.
     .               /// Signals an error if `<` was not eaten.
     .               fn expect_lt(&mut self) -> PResult<'a, ()> {
     .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
     .               }
     .           
     .               /// Eats `>` possibly breaking tokens like `>>` in process.
     .               /// Signals an error if `>` was not eaten.
     .               fn expect_gt(&mut self) -> PResult<'a, ()> {
   120 ( 0.00%)          if self.break_and_eat(token::Gt) {
     .                       // See doc comment for `unmatched_angle_bracket_count`.
    60 ( 0.00%)              if self.unmatched_angle_bracket_count > 0 {
    40 ( 0.00%)                  self.unmatched_angle_bracket_count -= 1;
     .                           debug!("expect_gt: (decrement) count={:?}", self.unmatched_angle_bracket_count);
     .                       }
     .                       Ok(())
     .                   } else {
     .                       self.unexpected()
     .                   }
     .               }
     .           
     .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
     .                   kets.iter().any(|k| match expect {
   975 ( 0.00%)              TokenExpectType::Expect => self.check(k),
    60 ( 0.00%)              TokenExpectType::NoExpect => self.token == **k,
     .                   })
     .               }
     .           
     .               fn parse_seq_to_before_tokens<T>(
     .                   &mut self,
     .                   kets: &[&TokenKind],
     .                   sep: SeqSep,
     .                   expect: TokenExpectType,
-- line 759 ----------------------------------------
-- line 761 ----------------------------------------
     .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
     .                   let mut first = true;
     .                   let mut recovered = false;
     .                   let mut trailing = false;
     .                   let mut v = vec![];
     .                   let unclosed_delims = !self.unclosed_delims.is_empty();
     .           
     .                   while !self.expect_any_with_type(kets, expect) {
   944 ( 0.00%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
     .                           break;
     .                       }
   690 ( 0.00%)              if let Some(ref t) = sep.sep {
   928 ( 0.00%)                  if first {
     .                               first = false;
     .                           } else {
   413 ( 0.00%)                      match self.expect(t) {
     .                                   Ok(false) => {
     .                                       self.current_closure.take();
     .                                   }
     .                                   Ok(true) => {
     .                                       self.current_closure.take();
     .                                       recovered = true;
     .                                       break;
     .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
     .                                               e.cancel();
     .                                               break;
     .                                           }
     .                                       }
     .                                   }
     .                               }
     .                           }
     .                       }
   344 ( 0.00%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
     .                           trailing = true;
     .                           break;
     .                       }
     .           
   238 ( 0.00%)              let t = f(self)?;
   452 ( 0.00%)              v.push(t);
     .                   }
     .           
   688 ( 0.00%)          Ok((v, trailing, recovered))
     .               }
     .           
     .               fn recover_missing_braces_around_closure_body(
     .                   &mut self,
     .                   closure_spans: ClosureSpans,
     .                   mut expect_err: DiagnosticBuilder<'_>,
     .               ) -> PResult<'a, ()> {
     .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
     .               /// `f` must consume tokens until reaching the next separator or
     .               /// closing bracket.
     .               fn parse_seq_to_before_end<T>(
     .                   &mut self,
     .                   ket: &TokenKind,
     .                   sep: SeqSep,
     .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
     .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
   750 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
     .               }
     .           
     .               /// Parses a sequence, including the closing delimiter. The function
     .               /// `f` must consume tokens until reaching the next separator or
     .               /// closing bracket.
 1,020 ( 0.00%)      fn parse_seq_to_end<T>(
     .                   &mut self,
     .                   ket: &TokenKind,
     .                   sep: SeqSep,
     .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
     .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
   443 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
   229 ( 0.00%)          if !recovered {
     .                       self.eat(ket);
     .                   }
 1,157 ( 0.00%)          Ok((val, trailing))
   816 ( 0.00%)      }
     .           
     .               /// Parses a sequence, including the closing delimiter. The function
     .               /// `f` must consume tokens until reaching the next separator or
     .               /// closing bracket.
     .               fn parse_unspanned_seq<T>(
     .                   &mut self,
     .                   bra: &TokenKind,
     .                   ket: &TokenKind,
     .                   sep: SeqSep,
     .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
     .               ) -> PResult<'a, (Vec<T>, bool)> {
   394 ( 0.00%)          self.expect(bra)?;
   816 ( 0.00%)          self.parse_seq_to_end(ket, sep, f)
     .               }
     .           
     .               fn parse_delim_comma_seq<T>(
     .                   &mut self,
     .                   delim: DelimToken,
     .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
     .               ) -> PResult<'a, (Vec<T>, bool)> {
     .                   self.parse_unspanned_seq(
   164 ( 0.00%)              &token::OpenDelim(delim),
   228 ( 0.00%)              &token::CloseDelim(delim),
     .                       SeqSep::trailing_allowed(token::Comma),
     .                       f,
     .                   )
     .               }
     .           
     .               fn parse_paren_comma_seq<T>(
     .                   &mut self,
     .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
     .               ) -> PResult<'a, (Vec<T>, bool)> {
     .                   self.parse_delim_comma_seq(token::Paren, f)
     .               }
     .           
     .               /// Advance the parser by one token using provided token as the next one.
81,224 ( 0.04%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
     .                   // Bumping after EOF is a bad sign, usually an infinite loop.
37,488 ( 0.02%)          if self.prev_token.kind == TokenKind::Eof {
     .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
     .                       self.span_bug(self.token.span, msg);
     .                   }
     .           
     .                   // Update the current and previous tokens.
24,992 ( 0.01%)          self.prev_token = mem::replace(&mut self.token, next_token);
 6,248 ( 0.00%)          self.token_spacing = next_spacing;
     .           
     .                   // Diagnostics.
 6,248 ( 0.00%)          self.expected_tokens.clear();
     .               }
     .           
     .               /// Advance the parser by one token.
49,984 ( 0.03%)      pub fn bump(&mut self) {
24,992 ( 0.01%)          let next_token = self.next_tok(self.token.span);
37,488 ( 0.02%)          self.bump_with(next_token);
49,984 ( 0.03%)      }
     .           
     .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
     .               /// When `dist == 0` then the current token is looked at.
     .               pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
   320 ( 0.00%)          if dist == 0 {
   130 ( 0.00%)              return looker(&self.token);
     .                   }
     .           
 1,087 ( 0.00%)          let frame = &self.token_cursor.frame;
 1,218 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
     .                       let all_normal = (0..dist).all(|i| {
 3,442 ( 0.00%)                  let token = frame.tree_cursor.look_ahead(i);
 4,601 ( 0.00%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
     .                       });
     .                       if all_normal {
 5,586 ( 0.00%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
 1,972 ( 0.00%)                      Some(tree) => match tree {
   839 ( 0.00%)                          TokenTree::Token(token) => looker(token),
     .                                   TokenTree::Delimited(dspan, delim, _) => {
 1,068 ( 0.00%)                              looker(&Token::new(token::OpenDelim(*delim), dspan.open))
     .                                   }
     .                               },
 1,076 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
     .                           };
     .                       }
     .                   }
     .           
     .                   let mut cursor = self.token_cursor.clone();
     .                   let mut i = 0;
    99 ( 0.00%)          let mut token = Token::dummy();
    78 ( 0.00%)          while i < dist {
   709 ( 0.00%)              token = cursor.next().0;
   318 ( 0.00%)              if matches!(
   194 ( 0.00%)                  token.kind,
     .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
     .                       ) {
     .                           continue;
     .                       }
    30 ( 0.00%)              i += 1;
     .                   }
     8 ( 0.00%)          return looker(&token);
     .               }
     .           
     .               /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.
 1,341 ( 0.00%)      fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {
   409 ( 0.00%)          self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))
 1,341 ( 0.00%)      }
     .           
     .               /// Parses asyncness: `async` or nothing.
     .               fn parse_asyncness(&mut self) -> Async {
     .                   if self.eat_keyword(kw::Async) {
     .                       let span = self.prev_token.uninterpolated_span();
     .                       Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }
     .                   } else {
     .                       Async::No
     .                   }
     .               }
     .           
     .               /// Parses unsafety: `unsafe` or nothing.
    92 ( 0.00%)      fn parse_unsafety(&mut self) -> Unsafe {
     .                   if self.eat_keyword(kw::Unsafe) {
    50 ( 0.00%)              Unsafe::Yes(self.prev_token.uninterpolated_span())
     .                   } else {
     .                       Unsafe::No
     .                   }
   368 ( 0.00%)      }
     .           
     .               /// Parses constness: `const` or nothing.
   792 ( 0.00%)      fn parse_constness(&mut self) -> Const {
     .                   // Avoid const blocks to be parsed as const items
   233 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
     .                       && self.eat_keyword(kw::Const)
     .                   {
     5 ( 0.00%)              Const::Yes(self.prev_token.uninterpolated_span())
     .                   } else {
     .                       Const::No
     .                   }
 1,386 ( 0.00%)      }
     .           
     .               /// Parses inline const expressions.
     .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
     .                   if pat {
     .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
     .                   } else {
     .                       self.sess.gated_spans.gate(sym::inline_const, span);
     .                   }
-- line 1104 ----------------------------------------
-- line 1110 ----------------------------------------
     .                   };
     .                   let blk_span = anon_const.value.span;
     .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
     .               }
     .           
     .               /// Parses mutability (`mut` or nothing).
     .               fn parse_mutability(&mut self) -> Mutability {
     .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
    44 ( 0.00%)      }
     .           
     .               /// Possibly parses mutability (`const` or `mut`).
   276 ( 0.00%)      fn parse_const_or_mut(&mut self) -> Option<Mutability> {
     .                   if self.eat_keyword(kw::Mut) {
     .                       Some(Mutability::Mut)
     .                   } else if self.eat_keyword(kw::Const) {
     .                       Some(Mutability::Not)
     .                   } else {
     .                       None
     .                   }
   276 ( 0.00%)      }
     .           
     .               fn parse_field_name(&mut self) -> PResult<'a, Ident> {
     2 ( 0.00%)          if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) = self.token.kind
     .                   {
     .                       self.expect_no_suffix(self.token.span, "a tuple index", suffix);
     .                       self.bump();
     .                       Ok(Ident::new(symbol, self.prev_token.span))
     .                   } else {
     3 ( 0.00%)              self.parse_ident_common(true)
     .                   }
     .               }
     .           
     .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
    51 ( 0.00%)          self.parse_mac_args_common(true).map(P)
     .               }
     .           
     .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
    60 ( 0.00%)          self.parse_mac_args_common(false)
     .               }
     .           
   342 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
   304 ( 0.00%)          Ok(
   214 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
    18 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Bracket))
    18 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Brace))
     .                       {
   136 ( 0.00%)                  match self.parse_token_tree() {
   170 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
     .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
     .                               {
    68 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
     .                               }
     .                               _ => unreachable!(),
     .                           }
     8 ( 0.00%)              } else if !delimited_only {
     .                           if self.eat(&token::Eq) {
     .                               let eq_span = self.prev_token.span;
     .           
     .                               // Collect tokens because they are used during lowering to HIR.
     .                               let expr = self.parse_expr_force_collect()?;
     .                               let span = expr.span;
     .           
     .                               let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));
-- line 1172 ----------------------------------------
-- line 1173 ----------------------------------------
     .                               MacArgs::Eq(eq_span, Token::new(token_kind, span))
     .                           } else {
     .                               MacArgs::Empty
     .                           }
     .                       } else {
     .                           return self.unexpected();
     .                       },
     .                   )
   266 ( 0.00%)      }
     .           
     .               fn parse_or_use_outer_attributes(
     .                   &mut self,
     .                   already_parsed_attrs: Option<AttrWrapper>,
     .               ) -> PResult<'a, AttrWrapper> {
   645 ( 0.00%)          if let Some(attrs) = already_parsed_attrs {
     .                       Ok(attrs)
     .                   } else {
   330 ( 0.00%)              self.parse_outer_attributes()
     .                   }
     .               }
     .           
     .               /// Parses a single token tree from the input.
   752 ( 0.00%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
   282 ( 0.00%)          match self.token.kind {
     .                       token::OpenDelim(..) => {
     .                           let depth = self.token_cursor.stack.len();
     .           
     .                           // We keep advancing the token cursor until we hit
     .                           // the matching `CloseDelim` token.
 8,952 ( 0.00%)                  while !(depth == self.token_cursor.stack.len()
     .                               && matches!(self.token.kind, token::CloseDelim(_)))
     .                           {
     .                               // Advance one token at a time, so `TokenCursor::next()`
     .                               // can capture these tokens if necessary.
 7,528 ( 0.00%)                      self.bump();
     .                           }
     .                           // We are still inside the frame corresponding
     .                           // to the delimited stream we captured, so grab
     .                           // the tokens from this frame.
     .                           let frame = &self.token_cursor.frame;
   188 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
   188 ( 0.00%)                  let span = frame.span;
    94 ( 0.00%)                  let delim = frame.delim;
     .                           // Consume close delimiter
   188 ( 0.00%)                  self.bump();
   470 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
     .                       }
     .                       token::CloseDelim(_) | token::Eof => unreachable!(),
     .                       _ => {
     .                           self.bump();
     .                           TokenTree::Token(self.prev_token.clone())
     .                       }
     .                   }
   658 ( 0.00%)      }
     .           
     .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
     .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
     .                   let mut tts = Vec::new();
     .                   while self.token != token::Eof {
     .                       tts.push(self.parse_token_tree());
     .                   }
     .                   Ok(tts)
-- line 1234 ----------------------------------------
-- line 1244 ----------------------------------------
     .                   }
     .                   TokenStream::new(result)
     .               }
     .           
     .               /// Evaluates the closure with restrictions in place.
     .               ///
     .               /// Afters the closure is evaluated, restrictions are reset.
     .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
   247 ( 0.00%)          let old = self.restrictions;
   324 ( 0.00%)          self.restrictions = res;
     .                   let res = f(self);
   331 ( 0.00%)          self.restrictions = old;
     .                   res
     .               }
     .           
 1,376 ( 0.00%)      fn is_crate_vis(&self) -> bool {
   860 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
 1,548 ( 0.00%)      }
     .           
     .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
     .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
     .               /// If the following element can't be a tuple (i.e., it's a function definition), then
     .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
     .               /// so emit a proper diagnostic.
     .               // Public for rustfmt usage.
 1,320 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
   267 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
     .           
   132 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
   528 ( 0.00%)          if self.is_crate_vis() {
     .                       self.bump(); // `crate`
     .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
     .                       return Ok(Visibility {
     .                           span: self.prev_token.span,
     .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
     .                           tokens: None,
     .                       });
     .                   }
     .           
     .                   if !self.eat_keyword(kw::Pub) {
     .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
     .                       // keyword to grab a span from for inherited visibility; an empty span at the
     .                       // beginning of the current token would seem to be the "Schelling span".
   113 ( 0.00%)              return Ok(Visibility {
   339 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
     .                           kind: VisibilityKind::Inherited,
     .                           tokens: None,
     .                       });
     .                   }
    19 ( 0.00%)          let lo = self.prev_token.span;
     .           
    95 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
     .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
     .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
     .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
     .                       // by the following tokens.
     .                       if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
     .                       // account for `pub(crate::foo)`
     .                       {
     .                           // Parse `pub(crate)`.
-- line 1303 ----------------------------------------
-- line 1338 ----------------------------------------
     .                       } else if let FollowedByType::No = fbt {
     .                           // Provide this diagnostic if a type cannot follow;
     .                           // in particular, if this is not a tuple struct.
     .                           self.recover_incorrect_vis_restriction()?;
     .                           // Emit diagnostic, but continue with public visibility.
     .                       }
     .                   }
     .           
    57 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
 1,188 ( 0.00%)      }
     .           
     .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
     .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
     .                   self.bump(); // `(`
     .                   let path = self.parse_path(PathStyle::Mod)?;
     .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
     .           
     .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1370 ----------------------------------------
     .                       )
     .                       .emit();
     .           
     .                   Ok(())
     .               }
     .           
     .               /// Parses `extern string_literal?`.
     .               fn parse_extern(&mut self) -> Extern {
    40 ( 0.00%)          if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }
     .               }
     .           
     .               /// Parses a string literal as an ABI spec.
    30 ( 0.00%)      fn parse_abi(&mut self) -> Option<StrLit> {
     .                   match self.parse_str_lit() {
     6 ( 0.00%)              Ok(str_lit) => Some(str_lit),
     .                       Err(Some(lit)) => match lit.kind {
     .                           ast::LitKind::Err(_) => None,
     .                           _ => {
     .                               self.struct_span_err(lit.span, "non-string ABI literal")
     .                                   .span_suggestion(
     .                                       lit.span,
     .                                       "specify the ABI with a string literal",
     .                                       "\"C\"".to_string(),
-- line 1392 ----------------------------------------
-- line 1393 ----------------------------------------
     .                                       Applicability::MaybeIncorrect,
     .                                   )
     .                                   .emit();
     .                               None
     .                           }
     .                       },
     .                       Err(None) => None,
     .                   }
    24 ( 0.00%)      }
     .           
    50 ( 0.00%)      pub fn collect_tokens_no_attrs<R: AstLike>(
     .                   &mut self,
     .                   f: impl FnOnce(&mut Self) -> PResult<'a, R>,
     .               ) -> PResult<'a, R> {
     .                   // The only reason to call `collect_tokens_no_attrs` is if you want tokens, so use
     .                   // `ForceCollect::Yes`
     .                   self.collect_tokens_trailing_token(
     .                       AttrWrapper::empty(),
     .                       ForceCollect::Yes,
     9 ( 0.00%)              |this, _attrs| Ok((f(this)?, TrailingToken::None)),
     .                   )
    50 ( 0.00%)      }
     .           
     .               /// `::{` or `::*`
 4,328 ( 0.00%)      fn is_import_coupler(&mut self) -> bool {
 2,164 ( 0.00%)          self.check(&token::ModSep)
     .                       && self.look_ahead(1, |t| {
 1,849 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
     .                       })
 3,897 ( 0.00%)      }
     .           
     .               pub fn clear_expected_tokens(&mut self) {
     .                   self.expected_tokens.clear();
     .               }
     .           }
     .           
     .           crate fn make_unclosed_delims_error(
     .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
     .                   err.span_label(sp, "closing delimiter possibly meant for this");
     .               }
     .               if let Some(sp) = unmatched.unclosed_span {
     .                   err.span_label(sp, "unclosed delimiter");
     .               }
     .               Some(err)
     .           }
     .           
   720 ( 0.00%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
   360 ( 0.00%)      *sess.reached_eof.borrow_mut() |=
     .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
   360 ( 0.00%)      for unmatched in unclosed_delims.drain(..) {
     .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
     .                       e.emit();
     .                   }
     .               }
   720 ( 0.00%)  }
     .           
     .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
     .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
     .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
     .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
     .           /// `AttrAnnotatedTokenTree::Delimited` tokens
     .           #[derive(Debug, Clone)]
     .           pub enum FlatToken {
-- line 1474 ----------------------------------------

30,119 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/imports.rs
--------------------------------------------------------------------------------
Ir               

-- line 109 ----------------------------------------
      .               /// The resolution of `module_path`.
      .               pub imported_module: Cell<Option<ModuleOrUniformRoot<'a>>>,
      .               pub vis: Cell<ty::Visibility>,
      .               pub used: Cell<bool>,
      .           }
      .           
      .           impl<'a> Import<'a> {
      .               pub fn is_glob(&self) -> bool {
    133 ( 0.00%)          matches!(self.kind, ImportKind::Glob { .. })
      .               }
      .           
      .               pub fn is_nested(&self) -> bool {
      .                   match self.kind {
      .                       ImportKind::Single { nested, .. } => nested,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               crate fn crate_lint(&self) -> CrateLint {
     50 ( 0.00%)          CrateLint::UsePath { root_id: self.root_id, root_span: self.root_span }
     86 ( 0.00%)      }
      .           }
      .           
 18,876 ( 0.01%)  #[derive(Clone, Default, Debug)]
      .           /// Records information about the resolution of a name in a namespace of a module.
      .           pub struct NameResolution<'a> {
      .               /// Single imports that may define the name in the namespace.
      .               /// Imports are arena-allocated, so it's ok to use pointers as keys.
      .               single_imports: FxHashSet<PtrKey<'a, Import<'a>>>,
      .               /// The least shadowable known binding for this name, or None if there are no known bindings.
      .               pub binding: Option<&'a NameBinding<'a>>,
      .               shadowed_glob: Option<&'a NameBinding<'a>>,
      .           }
      .           
      .           impl<'a> NameResolution<'a> {
      .               // Returns the binding for the name if it is known or None if it not known.
      .               pub(crate) fn binding(&self) -> Option<&'a NameBinding<'a>> {
  6,163 ( 0.00%)          self.binding.and_then(|binding| {
     19 ( 0.00%)              if !binding.is_glob_import() || self.single_imports.is_empty() {
      .                           Some(binding)
      .                       } else {
      .                           None
      .                       }
      .                   })
      .               }
      .           
      .               crate fn add_single_import(&mut self, import: &'a Import<'a>) {
-- line 155 ----------------------------------------
-- line 177 ----------------------------------------
      .                   &mut self,
      .                   module: ModuleOrUniformRoot<'a>,
      .                   ident: Ident,
      .                   ns: Namespace,
      .                   parent_scope: &ParentScope<'a>,
      .                   record_used: bool,
      .                   path_span: Span,
      .               ) -> Result<&'a NameBinding<'a>, Determinacy> {
  1,622 ( 0.00%)          self.resolve_ident_in_module_unadjusted_ext(
      .                       module,
      .                       ident,
      .                       ns,
      .                       parent_scope,
      .                       false,
      .                       record_used,
      .                       path_span,
      .                   )
      .                   .map_err(|(determinacy, _)| determinacy)
      .               }
      .           
      .               /// Attempts to resolve `ident` in namespaces `ns` of `module`.
      .               /// Invariant: if `record_used` is `Some`, expansion and import resolution must be complete.
 14,700 ( 0.01%)      crate fn resolve_ident_in_module_unadjusted_ext(
      .                   &mut self,
      .                   module: ModuleOrUniformRoot<'a>,
      .                   ident: Ident,
      .                   ns: Namespace,
      .                   parent_scope: &ParentScope<'a>,
      .                   restricted_shadowing: bool,
      .                   record_used: bool,
      .                   path_span: Span,
-- line 207 ----------------------------------------
-- line 259 ----------------------------------------
      .                               path_span,
      .                           );
      .                           return binding.map_err(|determinacy| (determinacy, Weak::No));
      .                       }
      .                   };
      .           
      .                   let key = self.new_key(ident, ns);
      .                   let resolution =
  5,600 ( 0.00%)              self.resolution(module, key).try_borrow_mut().map_err(|_| (Determined, Weak::No))?; // This happens when there is a cycle of imports.
      .           
  2,738 ( 0.00%)          if let Some(binding) = resolution.binding {
    319 ( 0.00%)              if !restricted_shadowing && binding.expansion != LocalExpnId::ROOT {
     74 ( 0.00%)                  if let NameBindingKind::Res(_, true) = binding.kind {
      .                               self.macro_expanded_macro_export_errors.insert((path_span, binding.span));
      .                           }
      .                       }
      .                   }
      .           
  2,800 ( 0.00%)          let check_usable = |this: &mut Self, binding: &'a NameBinding<'a>| {
    660 ( 0.00%)              if let Some(unusable_binding) = this.unusable_binding {
      .                           if ptr::eq(binding, unusable_binding) {
      .                               return Err((Determined, Weak::No));
      .                           }
      .                       }
    354 ( 0.00%)              let usable = this.is_accessible_from(binding.vis, parent_scope.module);
    408 ( 0.00%)              if usable { Ok(binding) } else { Err((Determined, Weak::No)) }
      .                   };
      .           
  1,400 ( 0.00%)          if record_used {
    662 ( 0.00%)              return resolution
      .                           .binding
      .                           .and_then(|binding| {
      .                               // If the primary binding is unusable, search further and return the shadowed glob
      .                               // binding if it exists. What we really want here is having two separate scopes in
      .                               // a module - one for non-globs and one for globs, but until that's done use this
      .                               // hack to avoid inconsistent resolution ICEs during import validation.
  1,101 ( 0.00%)                      if let Some(unusable_binding) = self.unusable_binding {
      .                                   if ptr::eq(binding, unusable_binding) {
      .                                       return resolution.shadowed_glob;
      .                                   }
      .                               }
      .                               Some(binding)
      .                           })
      .                           .ok_or((Determined, Weak::No))
      .                           .and_then(|binding| {
    466 ( 0.00%)                      if self.last_import_segment && check_usable(self, binding).is_err() {
      .                                   Err((Determined, Weak::No))
      .                               } else {
  1,302 ( 0.00%)                          self.record_use(ident, binding, restricted_shadowing);
      .           
    651 ( 0.00%)                          if let Some(shadowed_glob) = resolution.shadowed_glob {
      .                                       // Forbid expanded shadowing to avoid time travel.
      .                                       if restricted_shadowing
      .                                           && binding.expansion != LocalExpnId::ROOT
      .                                           && binding.res() != shadowed_glob.res()
      .                                       {
      .                                           self.ambiguity_errors.push(AmbiguityError {
      .                                               kind: AmbiguityKind::GlobVsExpanded,
      .                                               ident,
-- line 317 ----------------------------------------
-- line 318 ----------------------------------------
      .                                               b1: binding,
      .                                               b2: shadowed_glob,
      .                                               misc1: AmbiguityErrorMisc::None,
      .                                               misc2: AmbiguityErrorMisc::None,
      .                                           });
      .                                       }
      .                                   }
      .           
  1,085 ( 0.00%)                          if !self.is_accessible_from(binding.vis, parent_scope.module) {
      .                                       self.privacy_errors.push(PrivacyError {
      .                                           ident,
      .                                           binding,
      .                                           dedup_span: path_span,
      .                                       });
      .                                   }
      .           
      .                                   Ok(binding)
      .                               }
      .                           });
      .                   }
      .           
      .                   // Items and single imports are not shadowable, if we have one, then it's determined.
  1,107 ( 0.00%)          if let Some(binding) = resolution.binding {
     17 ( 0.00%)              if !binding.is_glob_import() {
      .                           return check_usable(self, binding);
      .                       }
      .                   }
      .           
      .                   // --- From now on we either have a glob resolution or no resolution. ---
      .           
      .                   // Check if one of single imports can still define the name,
      .                   // if it can then our result is not determined and can be invalidated.
  2,670 ( 0.00%)          for single_import in &resolution.single_imports {
      .                       if !self.is_accessible_from(single_import.vis.get(), parent_scope.module) {
      .                           continue;
      .                       }
      .                       let module = match single_import.imported_module.get() {
      .                           Some(x) => x,
      .                           None => return Err((Undetermined, Weak::No)),
      .                       };
      .                       let ident = match single_import.kind {
-- line 358 ----------------------------------------
-- line 385 ----------------------------------------
      .                   // Additionally, any macro in any module can plant names in the root module if it creates
      .                   // `macro_export` macros, so the root module effectively has unresolved invocations if any
      .                   // module has unresolved invocations.
      .                   // However, it causes resolution/expansion to stuck too often (#53144), so, to make
      .                   // progress, we have to ignore those potential unresolved invocations from other modules
      .                   // and prohibit access to macro-expanded `macro_export` macros instead (unless restricted
      .                   // shadowing is enabled, see `macro_expanded_macro_export_errors`).
      .                   let unexpanded_macros = !module.unexpanded_invocations.borrow().is_empty();
  1,335 ( 0.00%)          if let Some(binding) = resolution.binding {
      .                       if !unexpanded_macros || ns == MacroNS || restricted_shadowing {
      .                           return check_usable(self, binding);
      .                       } else {
      .                           return Err((Undetermined, Weak::No));
      .                       }
      .                   }
      .           
      .                   // --- From now on we have no resolution. ---
-- line 401 ----------------------------------------
-- line 403 ----------------------------------------
      .                   // Now we are in situation when new item/import can appear only from a glob or a macro
      .                   // expansion. With restricted shadowing names from globs and macro expansions cannot
      .                   // shadow names from outer scopes, so we can freely fallback from module search to search
      .                   // in outer scopes. For `early_resolve_ident_in_lexical_scope` to continue search in outer
      .                   // scopes we return `Undetermined` with `Weak::Yes`.
      .           
      .                   // Check if one of unexpanded macros can still define the name,
      .                   // if it can then our "no resolution" result is not determined and can be invalidated.
    267 ( 0.00%)          if unexpanded_macros {
      .                       return Err((Undetermined, Weak::Yes));
      .                   }
      .           
      .                   // Check if one of glob imports can still define the name,
      .                   // if it can then our "no resolution" result is not determined and can be invalidated.
  1,012 ( 0.00%)          for glob_import in module.globs.borrow().iter() {
      .                       if !self.is_accessible_from(glob_import.vis.get(), parent_scope.module) {
      .                           continue;
      .                       }
      .                       let module = match glob_import.imported_module.get() {
      .                           Some(ModuleOrUniformRoot::Module(module)) => module,
      .                           Some(_) => continue,
      .                           None => return Err((Undetermined, Weak::Yes)),
      .                       };
-- line 425 ----------------------------------------
-- line 452 ----------------------------------------
      .                               continue;
      .                           }
      .                           Ok(_) | Err(Undetermined) => return Err((Undetermined, Weak::Yes)),
      .                       }
      .                   }
      .           
      .                   // No resolution and no one else can define the name - determinate error.
      .                   Err((Determined, Weak::No))
 12,600 ( 0.01%)      }
      .           
      .               // Given a binding and an import that resolves to it,
      .               // return the corresponding binding defined by the import.
    730 ( 0.00%)      crate fn import(
      .                   &self,
      .                   binding: &'a NameBinding<'a>,
      .                   import: &'a Import<'a>,
      .               ) -> &'a NameBinding<'a> {
    730 ( 0.00%)          let vis = if binding.vis.is_at_least(import.vis.get(), self)
      .                       || pub_use_of_private_extern_crate_hack(import, binding)
      .                   {
      .                       import.vis.get()
      .                   } else {
      .                       binding.vis
      .                   };
      .           
    219 ( 0.00%)          if let ImportKind::Glob { ref max_vis, .. } = import.kind {
      .                       if vis == import.vis.get() || vis.is_at_least(max_vis.get(), self) {
      .                           max_vis.set(vis)
      .                       }
      .                   }
      .           
     73 ( 0.00%)          self.arenas.alloc_name_binding(NameBinding {
      .                       kind: NameBindingKind::Import { binding, import, used: Cell::new(false) },
      .                       ambiguity: None,
     73 ( 0.00%)              span: import.span,
      .                       vis,
     73 ( 0.00%)              expansion: import.parent_scope.expansion,
      .                   })
    584 ( 0.00%)      }
      .           
      .               // Define the name or return the existing binding if there is a collision.
 72,900 ( 0.04%)      crate fn try_define(
      .                   &mut self,
      .                   module: Module<'a>,
      .                   key: BindingKey,
      .                   binding: &'a NameBinding<'a>,
      .               ) -> Result<(), &'a NameBinding<'a>> {
      .                   let res = binding.res();
109,350 ( 0.06%)          self.check_reserved_macro_name(key.ident, res);
      .                   self.set_binding_parent_module(binding, module);
 36,450 ( 0.02%)          self.update_resolution(module, key, |this, resolution| {
      .                       if let Some(old_binding) = resolution.binding {
      .                           if res == Res::Err {
      .                               // Do not override real bindings with `Res::Err`s from error recovery.
      .                               return Ok(());
      .                           }
      .                           match (old_binding.is_glob_import(), binding.is_glob_import()) {
      .                               (true, true) => {
      .                                   if res != old_binding.res() {
-- line 510 ----------------------------------------
-- line 535 ----------------------------------------
      .                                   }
      .                                   resolution.shadowed_glob = Some(glob_binding);
      .                               }
      .                               (false, false) => {
      .                                   return Err(old_binding);
      .                               }
      .                           }
      .                       } else {
 18,225 ( 0.01%)                  resolution.binding = Some(binding);
      .                       }
      .           
      .                       Ok(())
      .                   })
 54,675 ( 0.03%)      }
      .           
      .               fn ambiguity(
      .                   &self,
      .                   kind: AmbiguityKind,
      .                   primary_binding: &'a NameBinding<'a>,
      .                   secondary_binding: &'a NameBinding<'a>,
      .               ) -> &'a NameBinding<'a> {
      .                   self.arenas.alloc_name_binding(NameBinding {
-- line 556 ----------------------------------------
-- line 563 ----------------------------------------
      .               // If the resolution becomes a success, define it in the module's glob importers.
      .               fn update_resolution<T, F>(&mut self, module: Module<'a>, key: BindingKey, f: F) -> T
      .               where
      .                   F: FnOnce(&mut Resolver<'a>, &mut NameResolution<'a>) -> T,
      .               {
      .                   // Ensure that `resolution` isn't borrowed when defining in the module's glob importers,
      .                   // during which the resolution might end up getting re-defined via a glob cycle.
      .                   let (binding, t) = {
 97,432 ( 0.05%)              let resolution = &mut *self.resolution(module, key).borrow_mut();
      .                       let old_binding = resolution.binding();
      .           
      .                       let t = f(self, resolution);
      .           
      .                       match resolution.binding() {
      .                           _ if old_binding.is_some() => return t,
      .                           None => return t,
      .                           Some(binding) => match old_binding {
-- line 579 ----------------------------------------
-- line 643 ----------------------------------------
      .               // This is a fixed-point algorithm. We resolve imports until our efforts
      .               // are stymied by an unresolved import; then we bail out of the current
      .               // module and continue. We terminate successfully once no more imports
      .               // remain or unsuccessfully when no forward progress in resolving imports
      .               // is made.
      .           
      .               /// Resolves all imports for the crate. This method performs the fixed-
      .               /// point iteration.
     16 ( 0.00%)      pub fn resolve_imports(&mut self) {
     10 ( 0.00%)          let mut prev_num_indeterminates = self.r.indeterminate_imports.len() + 1;
     29 ( 0.00%)          while self.r.indeterminate_imports.len() < prev_num_indeterminates {
      .                       prev_num_indeterminates = self.r.indeterminate_imports.len();
     40 ( 0.00%)              for import in mem::take(&mut self.r.indeterminate_imports) {
      .                           match self.resolve_import(&import) {
     17 ( 0.00%)                      true => self.r.determined_imports.push(import),
      4 ( 0.00%)                      false => self.r.indeterminate_imports.push(import),
      .                           }
      .                       }
      .                   }
     16 ( 0.00%)      }
      .           
      7 ( 0.00%)      pub fn finalize_imports(&mut self) {
      2 ( 0.00%)          for module in self.r.arenas.local_modules().iter() {
      8 ( 0.00%)              self.finalize_resolutions_in(module);
      .                   }
      .           
      .                   let mut seen_spans = FxHashSet::default();
      .                   let mut errors = vec![];
      .                   let mut prev_root_id: NodeId = NodeId::from_u32(0);
      1 ( 0.00%)          let determined_imports = mem::take(&mut self.r.determined_imports);
      1 ( 0.00%)          let indeterminate_imports = mem::take(&mut self.r.indeterminate_imports);
      .           
     12 ( 0.00%)          for (is_indeterminate, import) in determined_imports
      .                       .into_iter()
      .                       .map(|i| (false, i))
      .                       .chain(indeterminate_imports.into_iter().map(|i| (true, i)))
      .                   {
     96 ( 0.00%)              if let Some(err) = self.finalize_import(import) {
      .                           if let ImportKind::Single { source, ref source_bindings, .. } = import.kind {
      .                               if source.name == kw::SelfLower {
      .                                   // Silence `unresolved import` error if E0429 is already emitted
      .                                   if let Err(Determined) = source_bindings.value_ns.get() {
      .                                       continue;
      .                                   }
      .                               }
      .                           }
-- line 688 ----------------------------------------
-- line 703 ----------------------------------------
      .                               let path = import_path_to_string(
      .                                   &import.module_path.iter().map(|seg| seg.ident).collect::<Vec<_>>(),
      .                                   &import.kind,
      .                                   err.span,
      .                               );
      .                               errors.push((path, err));
      .                               prev_root_id = import.root_id;
      .                           }
     32 ( 0.00%)              } else if is_indeterminate {
      .                           // Consider erroneous imports used to avoid duplicate diagnostics.
      .                           self.r.used_imports.insert(import.id);
      .                           let path = import_path_to_string(
      .                               &import.module_path.iter().map(|seg| seg.ident).collect::<Vec<_>>(),
      .                               &import.kind,
      .                               import.span,
      .                           );
      .                           let err = UnresolvedImportError {
-- line 719 ----------------------------------------
-- line 721 ----------------------------------------
      .                               label: None,
      .                               note: Vec::new(),
      .                               suggestion: None,
      .                           };
      .                           errors.push((path, err));
      .                       }
      .                   }
      .           
      1 ( 0.00%)          if !errors.is_empty() {
      .                       self.throw_unresolved_import_error(errors, None);
      .                   }
      8 ( 0.00%)      }
      .           
      .               fn throw_unresolved_import_error(
      .                   &self,
      .                   errors: Vec<(String, UnresolvedImportError)>,
      .                   span: Option<MultiSpan>,
      .               ) {
      .                   /// Upper limit on the number of `span_label` messages.
      .                   const MAX_LABEL_COUNT: usize = 10;
-- line 740 ----------------------------------------
-- line 776 ----------------------------------------
      .               /// If successful, the resolved bindings are written into the module.
      .               fn resolve_import(&mut self, import: &'b Import<'b>) -> bool {
      .                   debug!(
      .                       "(resolving import for module) resolving import `{}::...` in `{}`",
      .                       Segment::names_to_string(&import.module_path),
      .                       module_to_string(import.parent_scope.module).unwrap_or_else(|| "???".to_string()),
      .                   );
      .           
     64 ( 0.00%)          let module = if let Some(module) = import.imported_module.get() {
      8 ( 0.00%)              module
      .                   } else {
      .                       // For better failure detection, pretend that the import will
      .                       // not define any names while resolving its module path.
      .                       let orig_vis = import.vis.replace(ty::Visibility::Invisible);
      .                       let path_res = self.r.resolve_path(
      .                           &import.module_path,
      .                           None,
     16 ( 0.00%)                  &import.parent_scope,
      .                           false,
      .                           import.span,
      .                           import.crate_lint(),
      .                       );
      .                       import.vis.set(orig_vis);
      .           
    112 ( 0.00%)              match path_res {
     80 ( 0.00%)                  PathResult::Module(module) => module,
      .                           PathResult::Indeterminate => return false,
      .                           PathResult::NonModule(..) | PathResult::Failed { .. } => return true,
      .                       }
      .                   };
      .           
      .                   import.imported_module.set(Some(module));
    233 ( 0.00%)          let (source, target, source_bindings, target_bindings, type_ns_only) = match import.kind {
      .                       ImportKind::Single {
      .                           source,
      .                           target,
     19 ( 0.00%)                  ref source_bindings,
     19 ( 0.00%)                  ref target_bindings,
     19 ( 0.00%)                  type_ns_only,
      .                           ..
      .                       } => (source, target, source_bindings, target_bindings, type_ns_only),
      .                       ImportKind::Glob { .. } => {
      .                           self.resolve_glob_import(import);
      .                           return true;
      .                       }
      .                       _ => unreachable!(),
      .                   };
      .           
     19 ( 0.00%)          let mut indeterminate = false;
    817 ( 0.00%)          self.r.per_ns(|this, ns| {
    171 ( 0.00%)              if !type_ns_only || ns == TypeNS {
    232 ( 0.00%)                  if let Err(Undetermined) = source_bindings[ns].get() {
      .                               // For better failure detection, pretend that the import will
      .                               // not define any names while resolving its module path.
     53 ( 0.00%)                      let orig_vis = import.vis.replace(ty::Visibility::Invisible);
      .                               let binding = this.resolve_ident_in_module(
    159 ( 0.00%)                          module,
    159 ( 0.00%)                          source,
      .                                   ns,
     53 ( 0.00%)                          &import.parent_scope,
      .                                   false,
     53 ( 0.00%)                          import.span,
      .                               );
      .                               import.vis.set(orig_vis);
      .                               source_bindings[ns].set(binding);
      .                           } else {
      .                               return;
      .                           };
      .           
     53 ( 0.00%)                  let parent = import.parent_scope.module;
    127 ( 0.00%)                  match source_bindings[ns].get() {
     24 ( 0.00%)                      Err(Undetermined) => indeterminate = true,
      .                               // Don't update the resolution, because it was never added.
     58 ( 0.00%)                      Err(Determined) if target.name == kw::Underscore => {}
      .                               Err(Determined) => {
     58 ( 0.00%)                          let key = this.new_key(target, ns);
      .                                   this.update_resolution(parent, key, |_, resolution| {
     58 ( 0.00%)                              resolution.single_imports.remove(&PtrKey(import));
      .                                   });
      .                               }
      .                               Ok(binding) if !binding.is_importable() => {
      .                                   let msg = format!("`{}` is not directly importable", target);
      .                                   struct_span_err!(this.session, import.span, E0253, "{}", &msg)
      .                                       .span_label(import.span, "cannot be imported directly")
      .                                       .emit();
      .                                   // Do not import this illegal binding. Import a dummy binding and pretend
      .                                   // everything is fine
      .                                   this.import_dummy_binding(import);
      .                               }
      .                               Ok(binding) => {
     64 ( 0.00%)                          let imported_binding = this.import(binding, import);
     16 ( 0.00%)                          target_bindings[ns].set(Some(imported_binding));
     48 ( 0.00%)                          this.define(parent, target, ns, imported_binding);
      .                               }
      .                           }
      .                       }
    456 ( 0.00%)          });
      .           
     53 ( 0.00%)          !indeterminate
      .               }
      .           
      .               /// Performs final import resolution, consistency checks and error reporting.
      .               ///
      .               /// Optionally returns an unresolved import error. This error is buffered and used to
      .               /// consolidate multiple unresolved import errors into a single diagnostic.
    160 ( 0.00%)      fn finalize_import(&mut self, import: &'b Import<'b>) -> Option<UnresolvedImportError> {
      .                   let orig_vis = import.vis.replace(ty::Visibility::Invisible);
     64 ( 0.00%)          let orig_unusable_binding = match &import.kind {
      .                       ImportKind::Single { target_bindings, .. } => {
     30 ( 0.00%)                  Some(mem::replace(&mut self.r.unusable_binding, target_bindings[TypeNS].get()))
      .                       }
      .                       _ => None,
      .                   };
     32 ( 0.00%)          let prev_ambiguity_errors_len = self.r.ambiguity_errors.len();
      .                   let path_res = self.r.resolve_path(
      .                       &import.module_path,
      .                       None,
     16 ( 0.00%)              &import.parent_scope,
      .                       true,
     16 ( 0.00%)              import.span,
      .                       import.crate_lint(),
      .                   );
     16 ( 0.00%)          let no_ambiguity = self.r.ambiguity_errors.len() == prev_ambiguity_errors_len;
     16 ( 0.00%)          if let Some(orig_unusable_binding) = orig_unusable_binding {
     15 ( 0.00%)              self.r.unusable_binding = orig_unusable_binding;
      .                   }
      .                   import.vis.set(orig_vis);
     80 ( 0.00%)          if let PathResult::Failed { .. } | PathResult::NonModule(..) = path_res {
      .                       // Consider erroneous imports used to avoid duplicate diagnostics.
      .                       self.r.used_imports.insert(import.id);
      .                   }
      .                   let module = match path_res {
     48 ( 0.00%)              PathResult::Module(module) => {
      .                           // Consistency checks, analogous to `finalize_macro_resolutions`.
     48 ( 0.00%)                  if let Some(initial_module) = import.imported_module.get() {
     48 ( 0.00%)                      if !ModuleOrUniformRoot::same_def(module, initial_module) && no_ambiguity {
      .                                   span_bug!(import.span, "inconsistent resolution for an import");
      .                               }
      .                           } else if self.r.privacy_errors.is_empty() {
      .                               let msg = "cannot determine resolution for the import";
      .                               let msg_note = "import resolution is stuck, try simplifying other imports";
      .                               self.r.session.struct_span_err(import.span, msg).note(msg_note).emit();
      .                           }
      .           
     48 ( 0.00%)                  module
      .                       }
      .                       PathResult::Failed { is_error_from_last_segment: false, span, label, suggestion } => {
      .                           if no_ambiguity {
      .                               assert!(import.imported_module.get().is_none());
      .                               self.r
      .                                   .report_error(span, ResolutionError::FailedToResolve { label, suggestion });
      .                           }
      .                           return None;
-- line 928 ----------------------------------------
-- line 961 ----------------------------------------
      .                               assert!(import.imported_module.get().is_none());
      .                           }
      .                           // The error was already reported earlier.
      .                           return None;
      .                       }
      .                       PathResult::Indeterminate => unreachable!(),
      .                   };
      .           
    185 ( 0.00%)          let (ident, target, source_bindings, target_bindings, type_ns_only) = match import.kind {
      .                       ImportKind::Single {
      .                           source,
      .                           target,
     15 ( 0.00%)                  ref source_bindings,
     15 ( 0.00%)                  ref target_bindings,
     15 ( 0.00%)                  type_ns_only,
      .                           ..
      .                       } => (source, target, source_bindings, target_bindings, type_ns_only),
      2 ( 0.00%)              ImportKind::Glob { is_prelude, ref max_vis } => {
      3 ( 0.00%)                  if import.module_path.len() <= 1 {
      .                               // HACK(eddyb) `lint_if_path_starts_with_module` needs at least
      .                               // 2 segments, so the `resolve_path` above won't trigger it.
      .                               let mut full_path = import.module_path.clone();
      .                               full_path.push(Segment::from_ident(Ident::empty()));
      .                               self.r.lint_if_path_starts_with_module(
      .                                   import.crate_lint(),
      .                                   &full_path,
      .                                   import.span,
      .                                   None,
      .                               );
      .                           }
      .           
      4 ( 0.00%)                  if let ModuleOrUniformRoot::Module(module) = module {
      1 ( 0.00%)                      if ptr::eq(module, import.parent_scope.module) {
      .                                   // Importing a module into itself is not allowed.
      .                                   return Some(UnresolvedImportError {
      .                                       span: import.span,
      .                                       label: Some(String::from("cannot glob-import a module into itself")),
      .                                       note: Vec::new(),
      .                                       suggestion: None,
      .                                   });
      .                               }
      .                           }
      1 ( 0.00%)                  if !is_prelude &&
      .                              max_vis.get() != ty::Visibility::Invisible && // Allow empty globs.
      .                              !max_vis.get().is_at_least(import.vis.get(), &*self)
      .                           {
      .                               let msg = "glob import doesn't reexport anything because no candidate is public enough";
      .                               self.r.lint_buffer.buffer_lint(UNUSED_IMPORTS, import.id, import.span, msg);
      .                           }
      .                           return None;
      .                       }
      .                       _ => unreachable!(),
      .                   };
      .           
     30 ( 0.00%)          let mut all_ns_err = true;
    690 ( 0.00%)          self.r.per_ns(|this, ns| {
    135 ( 0.00%)              if !type_ns_only || ns == TypeNS {
     45 ( 0.00%)                  let orig_vis = import.vis.replace(ty::Visibility::Invisible);
      .                           let orig_unusable_binding =
     90 ( 0.00%)                      mem::replace(&mut this.unusable_binding, target_bindings[ns].get());
      .                           let orig_last_import_segment = mem::replace(&mut this.last_import_segment, true);
      .                           let binding = this.resolve_ident_in_module(
    135 ( 0.00%)                      module,
    180 ( 0.00%)                      ident,
      .                               ns,
     45 ( 0.00%)                      &import.parent_scope,
      .                               true,
      .                               import.span,
      .                           );
     90 ( 0.00%)                  this.last_import_segment = orig_last_import_segment;
     90 ( 0.00%)                  this.unusable_binding = orig_unusable_binding;
      .                           import.vis.set(orig_vis);
      .           
      .                           match binding {
      .                               Ok(binding) => {
      .                                   // Consistency checks, analogous to `finalize_macro_resolutions`.
     48 ( 0.00%)                          let initial_res = source_bindings[ns].get().map(|initial_binding| {
     16 ( 0.00%)                              all_ns_err = false;
     48 ( 0.00%)                              if let Some(target_binding) = target_bindings[ns].get() {
     16 ( 0.00%)                                  if target.name == kw::Underscore
      .                                               && initial_binding.is_extern_crate()
      .                                               && !initial_binding.is_import()
      .                                           {
      .                                               this.record_use(
      .                                                   ident,
      .                                                   target_binding,
      .                                                   import.module_path.is_empty(),
      .                                               );
      .                                           }
      .                                       }
      .                                       initial_binding.res()
      .                                   });
      .                                   let res = binding.res();
    224 ( 0.00%)                          if let Ok(initial_res) = initial_res {
     48 ( 0.00%)                              if res != initial_res && this.ambiguity_errors.is_empty() {
      .                                           span_bug!(import.span, "inconsistent resolution for an import");
      .                                       }
      .                                   } else if res != Res::Err
      .                                       && this.ambiguity_errors.is_empty()
      .                                       && this.privacy_errors.is_empty()
      .                                   {
      .                                       let msg = "cannot determine resolution for the import";
      .                                       let msg_note =
-- line 1063 ----------------------------------------
-- line 1070 ----------------------------------------
      .                                   // single import (see test `issue-55884-2.rs`). In theory single imports should
      .                                   // always block globs, even if they are not yet resolved, so that this kind of
      .                                   // self-inconsistent resolution never happens.
      .                                   // Re-enable the assert when the issue is fixed.
      .                                   // assert!(result[ns].get().is_err());
      .                               }
      .                           }
      .                       }
    360 ( 0.00%)          });
      .           
     30 ( 0.00%)          if all_ns_err {
      .                       let mut all_ns_failed = true;
      .                       self.r.per_ns(|this, ns| {
      .                           if !type_ns_only || ns == TypeNS {
      .                               let binding = this.resolve_ident_in_module(
      .                                   module,
      .                                   ident,
      .                                   ns,
      .                                   &import.parent_scope,
-- line 1088 ----------------------------------------
-- line 1175 ----------------------------------------
      .                           })
      .                       } else {
      .                           // `resolve_ident_in_module` reported a privacy error.
      .                           self.r.import_dummy_binding(import);
      .                           None
      .                       };
      .                   }
      .           
     15 ( 0.00%)          let mut reexport_error = None;
     15 ( 0.00%)          let mut any_successful_reexport = false;
     30 ( 0.00%)          let mut crate_private_reexport = false;
    180 ( 0.00%)          self.r.per_ns(|this, ns| {
    105 ( 0.00%)              if let Ok(binding) = source_bindings[ns].get() {
     48 ( 0.00%)                  let vis = import.vis.get();
     96 ( 0.00%)                  if !binding.vis.is_at_least(vis, &*this) {
      .                               reexport_error = Some((ns, binding));
      .                               if let ty::Visibility::Restricted(binding_def_id) = binding.vis {
      .                                   if binding_def_id.is_top_level_module() {
      .                                       crate_private_reexport = true;
      .                                   }
      .                               }
      .                           } else {
     32 ( 0.00%)                      any_successful_reexport = true;
      .                           }
      .                       }
      .                   });
      .           
      .                   // All namespaces must be re-exported with extra visibility for an error to occur.
     30 ( 0.00%)          if !any_successful_reexport {
      .                       let (ns, binding) = reexport_error.unwrap();
      .                       if pub_use_of_private_extern_crate_hack(import, binding) {
      .                           let msg = format!(
      .                               "extern crate `{}` is private, and cannot be \
      .                                              re-exported (error E0365), consider declaring with \
      .                                              `pub`",
      .                               ident
      .                           );
-- line 1211 ----------------------------------------
-- line 1241 ----------------------------------------
      .                                   format!("consider marking `{}` as `pub` in the imported module", ident);
      .                               struct_span_err!(self.r.session, import.span, E0364, "{}", error_msg)
      .                                   .span_note(import.span, &note_msg)
      .                                   .emit();
      .                           }
      .                       }
      .                   }
      .           
     45 ( 0.00%)          if import.module_path.len() <= 1 {
      .                       // HACK(eddyb) `lint_if_path_starts_with_module` needs at least
      .                       // 2 segments, so the `resolve_path` above won't trigger it.
      .                       let mut full_path = import.module_path.clone();
      6 ( 0.00%)              full_path.push(Segment::from_ident(ident));
     14 ( 0.00%)              self.r.per_ns(|this, ns| {
     12 ( 0.00%)                  if let Ok(binding) = source_bindings[ns].get() {
      6 ( 0.00%)                      this.lint_if_path_starts_with_module(
      .                                   import.crate_lint(),
      .                                   &full_path,
      2 ( 0.00%)                          import.span,
      .                                   Some(binding),
      .                               );
      .                           }
      .                       });
      .                   }
      .           
      .                   // Record what this import resolves to for later uses in documentation,
      .                   // this may resolve to either a value or a type, but for documentation
      .                   // purposes it's good enough to just favor one over the other.
    420 ( 0.00%)          self.r.per_ns(|this, ns| {
    179 ( 0.00%)              if let Ok(binding) = source_bindings[ns].get() {
    256 ( 0.00%)                  this.import_res_map.entry(import.id).or_default()[ns] = Some(binding.res());
      .                       }
    360 ( 0.00%)          });
      .           
    135 ( 0.00%)          self.check_for_redundant_imports(ident, import, source_bindings, target_bindings, target);
      .           
      .                   debug!("(resolving single import) successfully resolved import");
      .                   None
    128 ( 0.00%)      }
      .           
      .               fn check_for_redundant_imports(
      .                   &mut self,
      .                   ident: Ident,
      .                   import: &'b Import<'b>,
      .                   source_bindings: &PerNS<Cell<Result<&'b NameBinding<'b>, Determinacy>>>,
      .                   target_bindings: &PerNS<Cell<Option<&'b NameBinding<'b>>>>,
      .                   target: Ident,
      .               ) {
      .                   // Skip if the import was produced by a macro.
     15 ( 0.00%)          if import.parent_scope.expansion != LocalExpnId::ROOT {
      .                       return;
      .                   }
      .           
      .                   // Skip if we are inside a named module (in contrast to an anonymous
      .                   // module defined by a block).
     45 ( 0.00%)          if let ModuleKind::Def(..) = import.parent_scope.module.kind {
      .                       return;
      .                   }
      .           
      .                   let mut is_redundant = PerNS { value_ns: None, type_ns: None, macro_ns: None };
      .           
      .                   let mut redundant_span = PerNS { value_ns: None, type_ns: None, macro_ns: None };
      .           
      .                   self.r.per_ns(|this, ns| {
-- line 1304 ----------------------------------------
-- line 1350 ----------------------------------------
      .                   let module = match import.imported_module.get().unwrap() {
      .                       ModuleOrUniformRoot::Module(module) => module,
      .                       _ => {
      .                           self.r.session.span_err(import.span, "cannot glob-import all possible crates");
      .                           return;
      .                       }
      .                   };
      .           
      3 ( 0.00%)          if module.is_trait() {
      .                       self.r.session.span_err(import.span, "items in traits are not importable");
      .                       return;
      1 ( 0.00%)          } else if ptr::eq(module, import.parent_scope.module) {
      .                       return;
      4 ( 0.00%)          } else if let ImportKind::Glob { is_prelude: true, .. } = import.kind {
      2 ( 0.00%)              self.r.prelude = Some(module);
      .                       return;
      .                   }
      .           
      .                   // Add to module's glob_importers
      .                   module.glob_importers.borrow_mut().push(import);
      .           
      .                   // Ensure that `resolutions` isn't borrowed during `try_define`,
      .                   // since it might get updated via a glob cycle.
-- line 1372 ----------------------------------------
-- line 1394 ----------------------------------------
      .                   // Record the destination of this import
      .                   self.r.record_partial_res(import.id, PartialRes::new(module.res().unwrap()));
      .               }
      .           
      .               // Miscellaneous post-processing, including recording re-exports,
      .               // reporting conflicts, and reporting unresolved imports.
      .               fn finalize_resolutions_in(&mut self, module: Module<'b>) {
      .                   // Since import resolution is finished, globs will not define any more names.
     32 ( 0.00%)          *module.globs.borrow_mut() = Vec::new();
      .           
      .                   let mut reexports = Vec::new();
      .           
     40 ( 0.00%)          module.for_each_child(self.r, |_, ident, _, binding| {
      .                       // Filter away ambiguous imports and anything that has def-site hygiene.
      .                       // FIXME: Implement actual cross-crate hygiene.
      .                       let is_good_import =
     68 ( 0.00%)                  binding.is_import() && !binding.is_ambiguity() && !ident.span.from_expansion();
    153 ( 0.00%)              if is_good_import || binding.is_macro_def() {
      .                           let res = binding.res().expect_non_local();
      .                           if res != def::Res::Err {
     80 ( 0.00%)                      reexports.push(ModChild { ident, res, vis: binding.vis, span: binding.span });
      .                           }
      .                       }
      .                   });
      .           
      8 ( 0.00%)          if !reexports.is_empty() {
      9 ( 0.00%)              if let Some(def_id) = module.opt_def_id() {
      .                           // Call to `expect_local` should be fine because current
      .                           // code is only called for local modules.
      .                           self.r.reexport_map.insert(def_id.expect_local(), reexports);
      .                       }
      .                   }
      .               }
      .           }
      .           
-- line 1428 ----------------------------------------

 40,079 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/imports.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/table.rs
--------------------------------------------------------------------------------
Ir              

-- line 38 ----------------------------------------
     .               ($byte_len:expr) => {
     .                   const BYTE_LEN: usize = $byte_len;
     .                   fn maybe_read_from_bytes_at(b: &[u8], i: usize) -> Option<Self> {
     .                       const BYTE_LEN: usize = $byte_len;
     .                       // HACK(eddyb) ideally this would be done with fully safe code,
     .                       // but slicing `[u8]` with `i * N..` is optimized worse, due to the
     .                       // possibility of `i * N` overflowing, than indexing `[[u8; N]]`.
     .                       let b = unsafe {
23,869 ( 0.01%)                  std::slice::from_raw_parts(b.as_ptr() as *const [u8; BYTE_LEN], b.len() / BYTE_LEN)
     .                       };
     .                       b.get(i).map(|b| FixedSizeEncoding::from_bytes(b))
     .                   }
     .                   fn write_to_bytes_at(self, b: &mut [u8], i: usize) {
     .                       const BYTE_LEN: usize = $byte_len;
     .                       // HACK(eddyb) ideally this would be done with fully safe code,
     .                       // see similar comment in `read_from_bytes_at` for why it can't yet.
     .                       let b = unsafe {
     .                           std::slice::from_raw_parts_mut(
     .                               b.as_mut_ptr() as *mut [u8; BYTE_LEN],
 1,122 ( 0.00%)                      b.len() / BYTE_LEN,
     .                           )
     .                       };
 2,244 ( 0.00%)              self.write_to_bytes(&mut b[i]);
     .                   }
     .               };
     .           }
     .           
     .           impl FixedSizeEncoding for u32 {
     .               fixed_size_encoding_byte_len_and_defaults!(4);
     .           
     .               fn from_bytes(b: &[u8]) -> Self {
-- line 68 ----------------------------------------
-- line 78 ----------------------------------------
     .           
     .           // NOTE(eddyb) there could be an impl for `usize`, which would enable a more
     .           // generic `Lazy<T>` impl, but in the general case we might not need / want to
     .           // fit every `usize` in `u32`.
     .           impl<T> FixedSizeEncoding for Option<Lazy<T>> {
     .               fixed_size_encoding_byte_len_and_defaults!(u32::BYTE_LEN);
     .           
     .               fn from_bytes(b: &[u8]) -> Self {
   836 ( 0.00%)          Some(Lazy::from_position(NonZeroUsize::new(u32::from_bytes(b) as usize)?))
     .               }
     .           
     .               fn write_to_bytes(self, b: &mut [u8]) {
     .                   let position = self.map_or(0, |lazy| lazy.position.get());
     .                   let position: u32 = position.try_into().unwrap();
     .           
     .                   position.write_to_bytes(b)
     .               }
-- line 94 ----------------------------------------
-- line 143 ----------------------------------------
     .               _marker: PhantomData<(fn(&I), T)>,
     .           }
     .           
     .           impl<I: Idx, T> Default for TableBuilder<I, T>
     .           where
     .               Option<T>: FixedSizeEncoding,
     .           {
     .               fn default() -> Self {
     3 ( 0.00%)          TableBuilder { bytes: vec![], _marker: PhantomData }
     .               }
     .           }
     .           
     .           impl<I: Idx, T> TableBuilder<I, T>
     .           where
     .               Option<T>: FixedSizeEncoding,
     .           {
 7,940 ( 0.00%)      pub(crate) fn set(&mut self, i: I, value: T) {
     .                   // FIXME(eddyb) investigate more compact encodings for sparse tables.
     .                   // On the PR @michaelwoerister mentioned:
     .                   // > Space requirements could perhaps be optimized by using the HAMT `popcnt`
     .                   // > trick (i.e. divide things into buckets of 32 or 64 items and then
     .                   // > store bit-masks of which item in each bucket is actually serialized).
     .                   let i = i.index();
 1,189 ( 0.00%)          let needed = (i + 1) * <Option<T>>::BYTE_LEN;
 3,525 ( 0.00%)          if self.bytes.len() < needed {
     .                       self.bytes.resize(needed, 0);
     .                   }
     .           
     .                   Some(value).write_to_bytes_at(&mut self.bytes, i);
 6,850 ( 0.00%)      }
     .           
     .               pub(crate) fn encode(&self, buf: &mut Encoder) -> Lazy<Table<I, T>> {
     .                   let pos = buf.position();
     .                   buf.emit_raw_bytes(&self.bytes).unwrap();
     .                   Lazy::from_position_and_meta(NonZeroUsize::new(pos as usize).unwrap(), self.bytes.len())
     .               }
     .           }
     .           
-- line 180 ----------------------------------------
-- line 186 ----------------------------------------
     .           }
     .           
     .           impl<I: Idx, T> Lazy<Table<I, T>>
     .           where
     .               Option<T>: FixedSizeEncoding,
     .           {
     .               /// Given the metadata, extract out the value at a particular index (if any).
     .               #[inline(never)]
23,026 ( 0.01%)      pub(super) fn get<'a, 'tcx, M: Metadata<'a, 'tcx>>(&self, metadata: M, i: I) -> Option<T> {
     .                   debug!("Table::lookup: index={:?} len={:?}", i, self.meta);
     .           
46,052 ( 0.03%)          let start = self.position.get();
46,052 ( 0.03%)          let bytes = &metadata.blob()[start..start + self.meta];
     .                   <Option<T>>::maybe_read_from_bytes_at(bytes, i.index())?
46,052 ( 0.03%)      }
     .           
     .               /// Size of the table in entries, including possible gaps.
     .               pub(super) fn size(&self) -> usize {
     .                   self.meta / <Option<T>>::BYTE_LEN
     .               }
     .           }

48,196 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/table.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/lib.rs
--------------------------------------------------------------------------------
Ir              

-- line 91 ----------------------------------------
     .           mod late;
     .           mod macros;
     .           
     .           enum Weak {
     .               Yes,
     .               No,
     .           }
     .           
   258 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Debug)]
     .           pub enum Determinacy {
     .               Determined,
     .               Undetermined,
     .           }
     .           
     .           impl Determinacy {
     .               fn determined(determined: bool) -> Determinacy {
     .                   if determined { Determinacy::Determined } else { Determinacy::Undetermined }
   172 ( 0.00%)      }
     .           }
     .           
     .           /// A specific scope in which a name can be looked up.
     .           /// This enum is currently used only for early resolution (imports and macros),
     .           /// but not for late resolution yet.
     .           #[derive(Clone, Copy)]
     .           enum Scope<'a> {
     .               DeriveHelpers(LocalExpnId),
-- line 116 ----------------------------------------
-- line 157 ----------------------------------------
     .               macro_rules: MacroRulesScopeRef<'a>,
     .               derives: &'a [ast::Path],
     .           }
     .           
     .           impl<'a> ParentScope<'a> {
     .               /// Creates a parent scope with the passed argument used as the module scope component,
     .               /// and other scope components set to default empty values.
     .               pub fn module(module: Module<'a>, resolver: &Resolver<'a>) -> ParentScope<'a> {
     8 ( 0.00%)          ParentScope {
     .                       module,
     .                       expansion: LocalExpnId::ROOT,
 6,029 ( 0.00%)              macro_rules: resolver.arenas.alloc_macro_rules_scope(MacroRulesScope::Empty),
     .                       derives: &[],
     .                   }
     .               }
     .           }
     .           
     .           #[derive(Copy, Debug, Clone)]
     .           enum ImplTraitContext {
     .               Existential,
-- line 176 ----------------------------------------
-- line 278 ----------------------------------------
     .               FailedToResolve(Span, String, Option<Suggestion>),
     .               ExpectedFound(Span, String, Res),
     .               Indeterminate(Span),
     .               ModuleOnly(Span),
     .           }
     .           
     .           /// A minimal representation of a path segment. We use this in resolve because we synthesize 'path
     .           /// segments' which don't have the rest of an AST or HIR `PathSegment`.
    35 ( 0.00%)  #[derive(Clone, Copy, Debug)]
     .           pub struct Segment {
     .               ident: Ident,
     .               id: Option<NodeId>,
     .               /// Signals whether this `PathSegment` has generic arguments. Used to avoid providing
     .               /// nonsensical suggestions.
     .               has_generic_args: bool,
     .           }
     .           
-- line 294 ----------------------------------------
-- line 303 ----------------------------------------
     .           
     .               fn names_to_string(segments: &[Segment]) -> String {
     .                   names_to_string(&segments.iter().map(|seg| seg.ident.name).collect::<Vec<_>>())
     .               }
     .           }
     .           
     .           impl<'a> From<&'a ast::PathSegment> for Segment {
     .               fn from(seg: &'a ast::PathSegment) -> Segment {
    60 ( 0.00%)          Segment { ident: seg.ident, id: Some(seg.id), has_generic_args: seg.args.is_some() }
     .               }
     .           }
     .           
     .           struct UsePlacementFinder {
     .               target_module: NodeId,
     .               span: Option<Span>,
     .               found_use: bool,
     .           }
-- line 319 ----------------------------------------
-- line 391 ----------------------------------------
     .           #[derive(Debug)]
     .           enum LexicalScopeBinding<'a> {
     .               Item(&'a NameBinding<'a>),
     .               Res(Res),
     .           }
     .           
     .           impl<'a> LexicalScopeBinding<'a> {
     .               fn res(self) -> Res {
    20 ( 0.00%)          match self {
     .                       LexicalScopeBinding::Item(binding) => binding.res(),
    30 ( 0.00%)              LexicalScopeBinding::Res(res) => res,
     .                   }
     .               }
     .           }
     .           
     .           #[derive(Copy, Clone, Debug)]
     .           enum ModuleOrUniformRoot<'a> {
     .               /// Regular module.
     .               Module(Module<'a>),
-- line 409 ----------------------------------------
-- line 418 ----------------------------------------
     .               /// Virtual module that denotes resolution in current scope.
     .               /// Used only for resolving single-segment imports. The reason it exists is that import paths
     .               /// are always split into two parts, the first of which should be some kind of module.
     .               CurrentScope,
     .           }
     .           
     .           impl ModuleOrUniformRoot<'_> {
     .               fn same_def(lhs: Self, rhs: Self) -> bool {
    64 ( 0.00%)          match (lhs, rhs) {
     .                       (ModuleOrUniformRoot::Module(lhs), ModuleOrUniformRoot::Module(rhs)) => {
     .                           ptr::eq(lhs, rhs)
     .                       }
     .                       (
     .                           ModuleOrUniformRoot::CrateRootAndExternPrelude,
     .                           ModuleOrUniformRoot::CrateRootAndExternPrelude,
     .                       )
     .                       | (ModuleOrUniformRoot::ExternPrelude, ModuleOrUniformRoot::ExternPrelude)
-- line 434 ----------------------------------------
-- line 491 ----------------------------------------
     .           /// A key that identifies a binding in a given `Module`.
     .           ///
     .           /// Multiple bindings in the same module can have the same key (in a valid
     .           /// program) if all but one of them come from glob imports.
     .           #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]
     .           struct BindingKey {
     .               /// The identifier for the binding, aways the `normalize_to_macros_2_0` version of the
     .               /// identifier.
13,224 ( 0.01%)      ident: Ident,
 3,332 ( 0.00%)      ns: Namespace,
     .               /// 0 if ident is not `_`, otherwise a value that's unique to the specific
     .               /// `_` in the expanded AST that introduced this binding.
 1,692 ( 0.00%)      disambiguator: u32,
     .           }
     .           
     .           type Resolutions<'a> = RefCell<FxIndexMap<BindingKey, &'a RefCell<NameResolution<'a>>>>;
     .           
     .           /// One node in the tree of modules.
     .           ///
     .           /// Note that a "module" in resolve is broader than a `mod` that you declare in Rust code. It may be one of these:
     .           ///
-- line 511 ----------------------------------------
-- line 551 ----------------------------------------
     .           impl<'a> ModuleData<'a> {
     .               fn new(
     .                   parent: Option<Module<'a>>,
     .                   kind: ModuleKind,
     .                   expansion: ExpnId,
     .                   span: Span,
     .                   no_implicit_prelude: bool,
     .               ) -> Self {
 2,485 ( 0.00%)          let is_foreign = match kind {
     .                       ModuleKind::Def(_, def_id, _) => !def_id.is_local(),
     .                       ModuleKind::Block(_) => false,
     .                   };
 8,165 ( 0.00%)          ModuleData {
     .                       parent,
     .                       kind,
     .                       lazy_resolutions: Default::default(),
     .                       populate_on_access: Cell::new(is_foreign),
     .                       unexpanded_invocations: Default::default(),
     .                       no_implicit_prelude,
     .                       glob_importers: RefCell::new(Vec::new()),
     .                       globs: RefCell::new(Vec::new()),
     .                       traits: RefCell::new(None),
     .                       span,
     .                       expansion,
     .                   }
     .               }
     .           
   102 ( 0.00%)      fn for_each_child<R, F>(&'a self, resolver: &mut R, mut f: F)
     .               where
     .                   R: AsMut<Resolver<'a>>,
     .                   F: FnMut(&mut R, Ident, Namespace, &'a NameBinding<'a>),
     .               {
    44 ( 0.00%)          for (key, name_resolution) in resolver.as_mut().resolutions(self).borrow().iter() {
 1,952 ( 0.00%)              if let Some(binding) = name_resolution.borrow().binding {
   147 ( 0.00%)                  f(resolver, key.ident, key.ns, binding);
     .                       }
     .                   }
    80 ( 0.00%)      }
     .           
     .               /// This modifies `self` in place. The traits will be stored in `self.traits`.
     .               fn ensure_traits<R>(&'a self, resolver: &mut R)
     .               where
     .                   R: AsMut<Resolver<'a>>,
     .               {
     .                   let mut traits = self.traits.borrow_mut();
    97 ( 0.00%)          if traits.is_none() {
     .                       let mut collected_traits = Vec::new();
     .                       self.for_each_child(resolver, |_, name, ns, binding| {
   119 ( 0.00%)                  if ns != TypeNS {
     .                               return;
     .                           }
   270 ( 0.00%)                  if let Res::Def(DefKind::Trait | DefKind::TraitAlias, _) = binding.res() {
     .                               collected_traits.push((name, binding))
     .                           }
     .                       });
    36 ( 0.00%)              *traits = Some(collected_traits.into_boxed_slice());
     .                   }
     .               }
     .           
     .               fn res(&self) -> Option<Res> {
 1,556 ( 0.00%)          match self.kind {
 2,326 ( 0.00%)              ModuleKind::Def(kind, def_id, _) => Some(Res::Def(kind, def_id)),
     .                       _ => None,
     .                   }
     .               }
     .           
     .               // Public for rustdoc.
     .               pub fn def_id(&self) -> DefId {
     .                   self.opt_def_id().expect("`ModuleData::def_id` is called on a block module")
     .               }
     .           
     .               fn opt_def_id(&self) -> Option<DefId> {
 1,222 ( 0.00%)          match self.kind {
     .                       ModuleKind::Def(_, def_id, _) => Some(def_id),
     .                       _ => None,
     .                   }
     .               }
     .           
     .               // `self` resolves to the first module ancestor that `is_normal`.
     .               fn is_normal(&self) -> bool {
   427 ( 0.00%)          matches!(self.kind, ModuleKind::Def(DefKind::Mod, _, _))
     .               }
     .           
     .               fn is_trait(&self) -> bool {
     1 ( 0.00%)          matches!(self.kind, ModuleKind::Def(DefKind::Trait, _, _))
     .               }
     .           
     .               fn nearest_item_scope(&'a self) -> Module<'a> {
   655 ( 0.00%)          match self.kind {
     .                       ModuleKind::Def(DefKind::Enum | DefKind::Trait, ..) => {
     1 ( 0.00%)                  self.parent.expect("enum or trait module without a parent")
     .                       }
     .                       _ => self,
     .                   }
     .               }
     .           
     .               /// The [`DefId`] of the nearest `mod` item ancestor (which may be this module).
     .               /// This may be the crate root.
   417 ( 0.00%)      fn nearest_parent_mod(&self) -> DefId {
 1,626 ( 0.00%)          match self.kind {
   790 ( 0.00%)              ModuleKind::Def(DefKind::Mod, def_id, _) => def_id,
    44 ( 0.00%)              _ => self.parent.expect("non-root module without parent").nearest_parent_mod(),
     .                   }
   834 ( 0.00%)      }
     .           
     .               fn is_ancestor_of(&self, mut other: &Self) -> bool {
     .                   while !ptr::eq(self, other) {
     .                       if let Some(parent) = other.parent {
     .                           other = parent;
     .                       } else {
     .                           return false;
     .                       }
-- line 662 ----------------------------------------
-- line 773 ----------------------------------------
     .               b1: &'a NameBinding<'a>,
     .               b2: &'a NameBinding<'a>,
     .               misc1: AmbiguityErrorMisc,
     .               misc2: AmbiguityErrorMisc,
     .           }
     .           
     .           impl<'a> NameBinding<'a> {
     .               fn module(&self) -> Option<Module<'a>> {
 7,819 ( 0.00%)          match self.kind {
 1,358 ( 0.00%)              NameBindingKind::Module(module) => Some(module),
    99 ( 0.00%)              NameBindingKind::Import { binding, .. } => binding.module(),
     .                       _ => None,
     .                   }
     .               }
     .           
     .               fn res(&self) -> Res {
34,684 ( 0.02%)          match self.kind {
29,653 ( 0.02%)              NameBindingKind::Res(res, _) => res,
   752 ( 0.00%)              NameBindingKind::Module(module) => module.res().unwrap(),
   244 ( 0.00%)              NameBindingKind::Import { binding, .. } => binding.res(),
     .                   }
     .               }
     .           
     .               fn is_ambiguity(&self) -> bool {
    43 ( 0.00%)          self.ambiguity.is_some()
    48 ( 0.00%)              || match self.kind {
    21 ( 0.00%)                  NameBindingKind::Import { binding, .. } => binding.is_ambiguity(),
     .                           _ => false,
     .                       }
     .               }
     .           
     .               fn is_possibly_imported_variant(&self) -> bool {
     .                   match self.kind {
     .                       NameBindingKind::Import { binding, .. } => binding.is_possibly_imported_variant(),
     .                       NameBindingKind::Res(
-- line 807 ----------------------------------------
-- line 822 ----------------------------------------
     .                           kind: ModuleKind::Def(DefKind::Mod, def_id, _),
     .                           ..
     .                       }) => def_id.index == CRATE_DEF_INDEX,
     .                       _ => false,
     .                   }
     .               }
     .           
     .               fn is_import(&self) -> bool {
    98 ( 0.00%)          matches!(self.kind, NameBindingKind::Import { .. })
     .               }
     .           
     .               fn is_glob_import(&self) -> bool {
18,412 ( 0.01%)          match self.kind {
    36 ( 0.00%)              NameBindingKind::Import { import, .. } => import.is_glob(),
     .                       _ => false,
     .                   }
     .               }
     .           
     .               fn is_importable(&self) -> bool {
    50 ( 0.00%)          !matches!(
     .                       self.res(),
     .                       Res::Def(DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy, _)
     .                   )
     .               }
     .           
     .               fn is_macro_def(&self) -> bool {
    30 ( 0.00%)          matches!(self.kind, NameBindingKind::Res(Res::Def(DefKind::Macro(..), _), _))
     .               }
     .           
     .               fn macro_kind(&self) -> Option<MacroKind> {
     .                   self.res().macro_kind()
     .               }
     .           
     .               // Suppose that we resolved macro invocation with `invoc_parent_expansion` to binding `binding`
     .               // at some expansion round `max(invoc, binding)` when they both emerged from macros.
-- line 856 ----------------------------------------
-- line 1065 ----------------------------------------
     .               /// they are declared in the static array generated by proc_macro_harness.
     .               proc_macros: Vec<NodeId>,
     .               confused_type_with_std_module: FxHashMap<Span, Span>,
     .           
     .               access_levels: AccessLevels,
     .           }
     .           
     .           /// Nothing really interesting here; it just provides memory for the rest of the crate.
     7 ( 0.00%)  #[derive(Default)]
     .           pub struct ResolverArenas<'a> {
     .               modules: TypedArena<ModuleData<'a>>,
     .               local_modules: RefCell<Vec<Module<'a>>>,
     .               imports: TypedArena<Import<'a>>,
     .               name_resolutions: TypedArena<RefCell<NameResolution<'a>>>,
     .               ast_paths: TypedArena<ast::Path>,
     .               dropless: DroplessArena,
     .           }
     .           
     .           impl<'a> ResolverArenas<'a> {
 4,615 ( 0.00%)      fn new_module(
     .                   &'a self,
     .                   parent: Option<Module<'a>>,
     .                   kind: ModuleKind,
     .                   expn_id: ExpnId,
     .                   span: Span,
     .                   no_implicit_prelude: bool,
     .                   module_map: &mut FxHashMap<DefId, Module<'a>>,
     .               ) -> Module<'a> {
     .                   let module =
     .                       self.modules.alloc(ModuleData::new(parent, kind, expn_id, span, no_implicit_prelude));
     .                   let def_id = module.opt_def_id();
 1,065 ( 0.00%)          if def_id.map_or(true, |def_id| def_id.is_local()) {
     .                       self.local_modules.borrow_mut().push(module);
     .                   }
   355 ( 0.00%)          if let Some(def_id) = def_id {
     .                       module_map.insert(def_id, module);
     .                   }
     .                   module
 3,195 ( 0.00%)      }
     .               fn local_modules(&'a self) -> std::cell::Ref<'a, Vec<Module<'a>>> {
     .                   self.local_modules.borrow()
     .               }
     .               fn alloc_name_binding(&'a self, name_binding: NameBinding<'a>) -> &'a NameBinding<'a> {
     .                   self.dropless.alloc(name_binding)
     .               }
    35 ( 0.00%)      fn alloc_import(&'a self, import: Import<'a>) -> &'a Import<'_> {
   436 ( 0.00%)          self.imports.alloc(import)
    35 ( 0.00%)      }
     .               fn alloc_name_resolution(&'a self) -> &'a RefCell<NameResolution<'a>> {
 6,292 ( 0.00%)          self.name_resolutions.alloc(Default::default())
     .               }
     .               fn alloc_macro_rules_scope(&'a self, scope: MacroRulesScope<'a>) -> MacroRulesScopeRef<'a> {
     .                   PtrKey(self.dropless.alloc(Cell::new(scope)))
     .               }
     .               fn alloc_macro_rules_binding(
     .                   &'a self,
     .                   binding: MacroRulesBinding<'a>,
     .               ) -> &'a MacroRulesBinding<'a> {
-- line 1122 ----------------------------------------
-- line 1133 ----------------------------------------
     .           impl<'a> AsMut<Resolver<'a>> for Resolver<'a> {
     .               fn as_mut(&mut self) -> &mut Resolver<'a> {
     .                   self
     .               }
     .           }
     .           
     .           impl<'a, 'b> DefIdTree for &'a Resolver<'b> {
     .               fn parent(self, id: DefId) -> Option<DefId> {
   107 ( 0.00%)          match id.as_local() {
     .                       Some(id) => self.definitions.def_key(id).parent,
     .                       None => self.cstore().def_key(id).parent,
     .                   }
     .                   .map(|index| DefId { index, ..id })
     .               }
     .           }
     .           
     .           /// This interface is used through the AST→HIR step, to embed full paths into the HIR. After that
     .           /// the resolver is no longer needed as all the relevant information is inline.
     .           impl ResolverAstLowering for Resolver<'_> {
    30 ( 0.00%)      fn def_key(&mut self, id: DefId) -> DefKey {
    18 ( 0.00%)          if let Some(id) = id.as_local() {
     .                       self.definitions().def_key(id)
     .                   } else {
   420 ( 0.00%)              self.cstore().def_key(id)
     .                   }
    24 ( 0.00%)      }
     .           
     .               #[inline]
     .               fn def_span(&self, id: LocalDefId) -> Span {
     .                   self.definitions.def_span(id)
     .               }
     .           
   510 ( 0.00%)      fn item_generics_num_lifetimes(&self, def_id: DefId) -> usize {
   123 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
    19 ( 0.00%)              self.item_generics_num_lifetimes[&def_id]
     .                   } else {
   528 ( 0.00%)              self.cstore().item_generics_num_lifetimes(def_id, self.session)
     .                   }
    76 ( 0.00%)      }
     .           
   102 ( 0.00%)      fn legacy_const_generic_args(&mut self, expr: &Expr) -> Option<Vec<usize>> {
    51 ( 0.00%)          self.legacy_const_generic_args(expr)
   153 ( 0.00%)      }
     .           
   657 ( 0.00%)      fn get_partial_res(&self, id: NodeId) -> Option<PartialRes> {
     .                   self.partial_res_map.get(&id).cloned()
 1,971 ( 0.00%)      }
     .           
   132 ( 0.00%)      fn get_import_res(&mut self, id: NodeId) -> PerNS<Option<Res>> {
    33 ( 0.00%)          self.import_res_map.get(&id).cloned().unwrap_or_default()
   165 ( 0.00%)      }
     .           
     .               fn get_label_res(&mut self, id: NodeId) -> Option<NodeId> {
     .                   self.label_res_map.get(&id).cloned()
     .               }
     .           
     .               fn definitions(&mut self) -> &mut Definitions {
    72 ( 0.00%)          &mut self.definitions
    72 ( 0.00%)      }
     .           
   588 ( 0.00%)      fn create_stable_hashing_context(&self) -> StableHashingContext<'_> {
   971 ( 0.00%)          StableHashingContext::new(self.session, &self.definitions, self.crate_loader.cstore())
   735 ( 0.00%)      }
     .           
     .               fn lint_buffer(&mut self) -> &mut LintBuffer {
     .                   &mut self.lint_buffer
     .               }
     .           
     .               fn next_node_id(&mut self) -> NodeId {
     .                   self.next_node_id()
     .               }
     .           
 4,728 ( 0.00%)      fn take_trait_map(&mut self, node: NodeId) -> Option<Vec<TraitCandidate>> {
     .                   self.trait_map.remove(&node)
 4,728 ( 0.00%)      }
     .           
 4,820 ( 0.00%)      fn opt_local_def_id(&self, node: NodeId) -> Option<LocalDefId> {
   751 ( 0.00%)          self.node_id_to_def_id.get(&node).copied()
 4,820 ( 0.00%)      }
     .           
   392 ( 0.00%)      fn local_def_id(&self, node: NodeId) -> LocalDefId {
     .                   self.opt_local_def_id(node).unwrap_or_else(|| panic!("no entry for node id: `{:?}`", node))
   392 ( 0.00%)      }
     .           
     .               fn def_path_hash(&self, def_id: DefId) -> DefPathHash {
     .                   match def_id.as_local() {
     .                       Some(def_id) => self.definitions.def_path_hash(def_id),
     .                       None => self.cstore().def_path_hash(def_id),
     .                   }
     .               }
     .           
     .               /// Adds a definition with a parent definition.
 1,785 ( 0.00%)      fn create_def(
     .                   &mut self,
     .                   parent: LocalDefId,
     .                   node_id: ast::NodeId,
     .                   data: DefPathData,
     .                   expn_id: ExpnId,
     .                   span: Span,
     .               ) -> LocalDefId {
   238 ( 0.00%)          assert!(
   238 ( 0.00%)              !self.node_id_to_def_id.contains_key(&node_id),
     .                       "adding a def'n for node-id {:?} and data {:?} but a previous def'n exists: {:?}",
     .                       node_id,
     .                       data,
     .                       self.definitions.def_key(self.node_id_to_def_id[&node_id]),
     .                   );
     .           
     .                   // Find the next free disambiguator for this key.
   119 ( 0.00%)          let next_disambiguator = &mut self.next_disambiguator;
     .                   let next_disambiguator = |parent, data| {
   595 ( 0.00%)              let next_disamb = next_disambiguator.entry((parent, data)).or_insert(0);
   119 ( 0.00%)              let disambiguator = *next_disamb;
   119 ( 0.00%)              *next_disamb = next_disamb.checked_add(1).expect("disambiguator overflow");
     .                       disambiguator
     .                   };
     .           
 1,190 ( 0.00%)          let def_id = self.definitions.create_def(parent, data, expn_id, next_disambiguator, span);
     .           
     .                   // Some things for which we allocate `LocalDefId`s don't correspond to
     .                   // anything in the AST, so they don't have a `NodeId`. For these cases
     .                   // we don't need a mapping from `NodeId` to `LocalDefId`.
   357 ( 0.00%)          if node_id != ast::DUMMY_NODE_ID {
     .                       debug!("create_def: def_id_to_node_id[{:?}] <-> {:?}", def_id, node_id);
     .                       self.node_id_to_def_id.insert(node_id, def_id);
     .                   }
   357 ( 0.00%)          assert_eq!(self.def_id_to_node_id.push(node_id), def_id);
     .           
     .                   def_id
 1,071 ( 0.00%)      }
     .           }
     .           
     .           impl<'a> Resolver<'a> {
    16 ( 0.00%)      pub fn new(
     .                   session: &'a Session,
     .                   krate: &Crate,
     .                   crate_name: &str,
     .                   metadata_loader: Box<MetadataLoaderDyn>,
     .                   arenas: &'a ResolverArenas<'a>,
     .               ) -> Resolver<'a> {
     .                   let root_def_id = CRATE_DEF_ID.to_def_id();
     .                   let mut module_map = FxHashMap::default();
    14 ( 0.00%)          let graph_root = arenas.new_module(
     .                       None,
     .                       ModuleKind::Def(DefKind::Mod, root_def_id, kw::Empty),
     1 ( 0.00%)              ExpnId::root(),
     1 ( 0.00%)              krate.span,
     2 ( 0.00%)              session.contains_name(&krate.attrs, sym::no_implicit_prelude),
     .                       &mut module_map,
     .                   );
    12 ( 0.00%)          let empty_module = arenas.new_module(
     .                       None,
     .                       ModuleKind::Def(DefKind::Mod, root_def_id, kw::Empty),
     1 ( 0.00%)              ExpnId::root(),
     .                       DUMMY_SP,
     .                       true,
     .                       &mut FxHashMap::default(),
     .                   );
     .           
     4 ( 0.00%)          let definitions = Definitions::new(session.local_stable_crate_id(), krate.span);
     2 ( 0.00%)          let root = definitions.get_root_def();
     .           
     .                   let mut visibilities = FxHashMap::default();
     .                   visibilities.insert(CRATE_DEF_ID, ty::Visibility::Public);
     .           
     .                   let mut def_id_to_node_id = IndexVec::default();
     2 ( 0.00%)          assert_eq!(def_id_to_node_id.push(CRATE_NODE_ID), root);
     .                   let mut node_id_to_def_id = FxHashMap::default();
     .                   node_id_to_def_id.insert(CRATE_NODE_ID, root);
     .           
     .                   let mut invocation_parents = FxHashMap::default();
     .                   invocation_parents.insert(LocalExpnId::ROOT, (root, ImplTraitContext::Existential));
     .           
     3 ( 0.00%)          let mut extern_prelude: FxHashMap<Ident, ExternPreludeEntry<'_>> = session
     .                       .opts
     .                       .externs
     .                       .iter()
     2 ( 0.00%)              .filter(|(_, entry)| entry.add_prelude)
     2 ( 0.00%)              .map(|(name, _)| (Ident::from_str(name), Default::default()))
     .                       .collect();
     .           
     9 ( 0.00%)          if !session.contains_name(&krate.attrs, sym::no_core) {
     .                       extern_prelude.insert(Ident::with_dummy_span(sym::core), Default::default());
     7 ( 0.00%)              if !session.contains_name(&krate.attrs, sym::no_std) {
     .                           extern_prelude.insert(Ident::with_dummy_span(sym::std), Default::default());
     .                       }
     .                   }
     .           
     8 ( 0.00%)          let (registered_attrs, registered_tools) =
     4 ( 0.00%)              macros::registered_attrs_and_tools(session, &krate.attrs);
     .           
     .                   let features = session.features_untracked();
     .           
   237 ( 0.00%)          let mut resolver = Resolver {
     .                       session,
     .           
     2 ( 0.00%)              definitions,
     .           
     .                       // The outermost module has def ID 0; this is not reflected in the
     .                       // AST.
     .                       graph_root,
     .                       prelude: None,
     4 ( 0.00%)              extern_prelude,
     .           
     .                       has_self: FxHashSet::default(),
     .                       field_names: FxHashMap::default(),
     .           
     .                       determined_imports: Vec::new(),
     .                       indeterminate_imports: Vec::new(),
     .           
     .                       last_import_segment: false,
-- line 1343 ----------------------------------------
-- line 1347 ----------------------------------------
     .                       partial_res_map: Default::default(),
     .                       import_res_map: Default::default(),
     .                       label_res_map: Default::default(),
     .                       extern_crate_map: Default::default(),
     .                       reexport_map: FxHashMap::default(),
     .                       trait_map: NodeMap::default(),
     .                       underscore_disambiguator: 0,
     .                       empty_module,
     4 ( 0.00%)              module_map,
     .                       block_map: Default::default(),
     .                       binding_parent_modules: FxHashMap::default(),
     .                       ast_transform_scopes: FxHashMap::default(),
     .           
     .                       glob_map: Default::default(),
     4 ( 0.00%)              visibilities,
     .                       used_imports: FxHashSet::default(),
     .                       maybe_unused_trait_imports: Default::default(),
     .                       maybe_unused_extern_crates: Vec::new(),
     .           
     .                       privacy_errors: Vec::new(),
     .                       ambiguity_errors: Vec::new(),
     .                       use_injections: Vec::new(),
     .                       macro_expanded_macro_export_errors: BTreeSet::new(),
-- line 1369 ----------------------------------------
-- line 1372 ----------------------------------------
     .                       dummy_binding: arenas.alloc_name_binding(NameBinding {
     .                           kind: NameBindingKind::Res(Res::Err, false),
     .                           ambiguity: None,
     .                           expansion: LocalExpnId::ROOT,
     .                           span: DUMMY_SP,
     .                           vis: ty::Visibility::Public,
     .                       }),
     .           
     6 ( 0.00%)              crate_loader: CrateLoader::new(session, metadata_loader, crate_name),
     .                       macro_names: FxHashSet::default(),
     .                       builtin_macros: Default::default(),
     4 ( 0.00%)              registered_attrs,
     4 ( 0.00%)              registered_tools,
     .                       macro_use_prelude: FxHashMap::default(),
     .                       all_macros: FxHashMap::default(),
     .                       macro_map: FxHashMap::default(),
     7 ( 0.00%)              dummy_ext_bang: Lrc::new(SyntaxExtension::dummy_bang(session.edition())),
     6 ( 0.00%)              dummy_ext_derive: Lrc::new(SyntaxExtension::dummy_derive(session.edition())),
     5 ( 0.00%)              non_macro_attr: Lrc::new(SyntaxExtension::non_macro_attr(session.edition())),
     .                       invocation_parent_scopes: Default::default(),
     .                       output_macro_rules_scopes: Default::default(),
     .                       helper_attrs: Default::default(),
     .                       derive_data: Default::default(),
     .                       local_macro_def_scopes: FxHashMap::default(),
     .                       name_already_seen: FxHashMap::default(),
     .                       potentially_unused_imports: Vec::new(),
     .                       struct_constructors: Default::default(),
-- line 1398 ----------------------------------------
-- line 1405 ----------------------------------------
     .                       active_features: features
     .                           .declared_lib_features
     .                           .iter()
     .                           .map(|(feat, ..)| *feat)
     .                           .chain(features.declared_lang_features.iter().map(|(feat, ..)| *feat))
     .                           .collect(),
     .                       lint_buffer: LintBuffer::default(),
     .                       next_node_id: CRATE_NODE_ID,
     4 ( 0.00%)              node_id_to_def_id,
     4 ( 0.00%)              def_id_to_node_id,
     .                       placeholder_field_indices: Default::default(),
     4 ( 0.00%)              invocation_parents,
     .                       next_disambiguator: Default::default(),
     .                       trait_impl_items: Default::default(),
     .                       legacy_const_generic_args: Default::default(),
     .                       item_generics_num_lifetimes: Default::default(),
     .                       main_def: Default::default(),
     .                       trait_impls: Default::default(),
     .                       proc_macros: Default::default(),
     .                       confused_type_with_std_module: Default::default(),
     .                       access_levels: Default::default(),
     .                   };
     .           
     .                   let root_parent_scope = ParentScope::module(graph_root, &resolver);
     .                   resolver.invocation_parent_scopes.insert(LocalExpnId::ROOT, root_parent_scope);
     .           
     .                   resolver
     9 ( 0.00%)      }
     .           
     .               fn new_module(
     .                   &mut self,
     .                   parent: Option<Module<'a>>,
     .                   kind: ModuleKind,
     .                   expn_id: ExpnId,
     .                   span: Span,
     .                   no_implicit_prelude: bool,
     .               ) -> Module<'a> {
     4 ( 0.00%)          let module_map = &mut self.module_map;
 3,516 ( 0.00%)          self.arenas.new_module(parent, kind, expn_id, span, no_implicit_prelude, module_map)
     .               }
     .           
     .               pub fn next_node_id(&mut self) -> NodeId {
     .                   let next =
 1,297 ( 0.00%)              self.next_node_id.as_u32().checked_add(1).expect("input too large; ran out of NodeIds");
     .                   mem::replace(&mut self.next_node_id, ast::NodeId::from_u32(next))
     .               }
     .           
     .               pub fn lint_buffer(&mut self) -> &mut LintBuffer {
     3 ( 0.00%)          &mut self.lint_buffer
     3 ( 0.00%)      }
     .           
     1 ( 0.00%)      pub fn arenas() -> ResolverArenas<'a> {
     .                   Default::default()
     1 ( 0.00%)      }
     .           
     9 ( 0.00%)      pub fn into_outputs(self) -> ResolverOutputs {
     .                   let proc_macros = self.proc_macros.iter().map(|id| self.local_def_id(*id)).collect();
     1 ( 0.00%)          let definitions = self.definitions;
     4 ( 0.00%)          let visibilities = self.visibilities;
     4 ( 0.00%)          let extern_crate_map = self.extern_crate_map;
     4 ( 0.00%)          let reexport_map = self.reexport_map;
     4 ( 0.00%)          let maybe_unused_trait_imports = self.maybe_unused_trait_imports;
     4 ( 0.00%)          let maybe_unused_extern_crates = self.maybe_unused_extern_crates;
     4 ( 0.00%)          let glob_map = self.glob_map;
     6 ( 0.00%)          let main_def = self.main_def;
     4 ( 0.00%)          let confused_type_with_std_module = self.confused_type_with_std_module;
     6 ( 0.00%)          let access_levels = self.access_levels;
    37 ( 0.00%)          ResolverOutputs {
     2 ( 0.00%)              definitions,
    11 ( 0.00%)              cstore: Box::new(self.crate_loader.into_cstore()),
     4 ( 0.00%)              visibilities,
     4 ( 0.00%)              access_levels,
     4 ( 0.00%)              extern_crate_map,
     4 ( 0.00%)              reexport_map,
     4 ( 0.00%)              glob_map,
     4 ( 0.00%)              maybe_unused_trait_imports,
     4 ( 0.00%)              maybe_unused_extern_crates,
     .                       extern_prelude: self
     .                           .extern_prelude
     .                           .iter()
     4 ( 0.00%)                  .map(|(ident, entry)| (ident.name, entry.introduced_by_item))
     .                           .collect(),
     6 ( 0.00%)              main_def,
     4 ( 0.00%)              trait_impls: self.trait_impls,
     4 ( 0.00%)              proc_macros,
     4 ( 0.00%)              confused_type_with_std_module,
     5 ( 0.00%)              registered_tools: self.registered_tools,
     .                   }
    19 ( 0.00%)      }
     .           
     .               pub fn clone_outputs(&self) -> ResolverOutputs {
     .                   let proc_macros = self.proc_macros.iter().map(|id| self.local_def_id(*id)).collect();
     .                   ResolverOutputs {
     .                       definitions: self.definitions.clone(),
     .                       access_levels: self.access_levels.clone(),
     .                       cstore: Box::new(self.cstore().clone()),
     .                       visibilities: self.visibilities.clone(),
-- line 1501 ----------------------------------------
-- line 1513 ----------------------------------------
     .                       trait_impls: self.trait_impls.clone(),
     .                       proc_macros,
     .                       confused_type_with_std_module: self.confused_type_with_std_module.clone(),
     .                       registered_tools: self.registered_tools.clone(),
     .                   }
     .               }
     .           
     .               pub fn cstore(&self) -> &CStore {
16,254 ( 0.01%)          self.crate_loader.cstore()
     .               }
     .           
     .               fn dummy_ext(&self, macro_kind: MacroKind) -> Lrc<SyntaxExtension> {
     .                   match macro_kind {
     .                       MacroKind::Bang => self.dummy_ext_bang.clone(),
     .                       MacroKind::Derive => self.dummy_ext_derive.clone(),
     .                       MacroKind::Attr => self.non_macro_attr.clone(),
     .                   }
     .               }
     .           
     .               /// Runs the function on each namespace.
   117 ( 0.00%)      fn per_ns<F: FnMut(&mut Self, Namespace)>(&mut self, mut f: F) {
   232 ( 0.00%)          f(self, TypeNS);
   226 ( 0.00%)          f(self, ValueNS);
   226 ( 0.00%)          f(self, MacroNS);
   102 ( 0.00%)      }
     .           
     .               fn is_builtin_macro(&mut self, res: Res) -> bool {
     .                   self.get_macro(res).map_or(false, |ext| ext.builtin_name.is_some())
     .               }
     .           
     .               fn macro_def(&self, mut ctxt: SyntaxContext) -> DefId {
     .                   loop {
     .                       match ctxt.outer_expn_data().macro_def_id {
     .                           Some(def_id) => return def_id,
     .                           None => ctxt.remove_mark(),
     .                       };
     .                   }
     .               }
     .           
     .               /// Entry point to crate resolution.
     2 ( 0.00%)      pub fn resolve_crate(&mut self, krate: &Crate) {
     4 ( 0.00%)          self.session.time("resolve_crate", || {
     3 ( 0.00%)              self.session.time("finalize_imports", || ImportResolver { r: self }.finalize_imports());
     .                       self.session.time("resolve_access_levels", || {
     3 ( 0.00%)                  AccessLevelsVisitor::compute_access_levels(self, krate)
     .                       });
     2 ( 0.00%)              self.session.time("finalize_macro_resolutions", || self.finalize_macro_resolutions());
     3 ( 0.00%)              self.session.time("late_resolve_crate", || self.late_resolve_crate(krate));
     2 ( 0.00%)              self.session.time("resolve_main", || self.resolve_main());
     3 ( 0.00%)              self.session.time("resolve_check_unused", || self.check_unused(krate));
     3 ( 0.00%)              self.session.time("resolve_report_errors", || self.report_errors(krate));
     4 ( 0.00%)              self.session.time("resolve_postprocess", || self.crate_loader.postprocess(krate));
     .                   });
     .               }
     .           
   552 ( 0.00%)      pub fn traits_in_scope(
     .                   &mut self,
     .                   current_trait: Option<Module<'a>>,
     .                   parent_scope: &ParentScope<'a>,
     .                   ctxt: SyntaxContext,
     .                   assoc_item: Option<(Symbol, Namespace)>,
     .               ) -> Vec<TraitCandidate> {
     .                   let mut found_traits = Vec::new();
     .           
    92 ( 0.00%)          if let Some(module) = current_trait {
     .                       if self.trait_may_have_item(Some(module), assoc_item) {
     .                           let def_id = module.def_id();
     .                           found_traits.push(TraitCandidate { def_id, import_ids: smallvec![] });
     .                       }
     .                   }
     .           
     .                   self.visit_scopes(ScopeSet::All(TypeNS, false), parent_scope, ctxt, |this, scope, _, _| {
     .                       match scope {
     .                           Scope::Module(module, _) => {
     .                               this.traits_in_module(module, assoc_item, &mut found_traits);
     .                           }
     .                           Scope::StdLibPrelude => {
   138 ( 0.00%)                      if let Some(module) = this.prelude {
     .                                   this.traits_in_module(module, assoc_item, &mut found_traits);
     .                               }
     .                           }
     .                           Scope::ExternPrelude | Scope::ToolPrelude | Scope::BuiltinTypes => {}
     .                           _ => unreachable!(),
     .                       }
     .                       None::<()>
     .                   });
     .           
     .                   found_traits
   368 ( 0.00%)      }
     .           
     .               fn traits_in_module(
     .                   &mut self,
     .                   module: Module<'a>,
     .                   assoc_item: Option<(Symbol, Namespace)>,
     .                   found_traits: &mut Vec<TraitCandidate>,
     .               ) {
     .                   module.ensure_traits(self);
     .                   let traits = module.traits.borrow();
 2,515 ( 0.00%)          for (trait_name, trait_binding) in traits.as_ref().unwrap().iter() {
     .                       if self.trait_may_have_item(trait_binding.module(), assoc_item) {
     .                           let def_id = trait_binding.res().def_id();
    24 ( 0.00%)                  let import_ids = self.find_transitive_imports(&trait_binding.kind, *trait_name);
    72 ( 0.00%)                  found_traits.push(TraitCandidate { def_id, import_ids });
     .                       }
     .                   }
     .               }
     .           
     .               // List of traits in scope is pruned on best effort basis. We reject traits not having an
     .               // associated item with the given name and namespace (if specified). This is a conservative
     .               // optimization, proper hygienic type-based resolution of associated items is done in typeck.
     .               // We don't reject trait aliases (`trait_module == None`) because we don't have access to their
     .               // associated items.
     .               fn trait_may_have_item(
     .                   &mut self,
     .                   trait_module: Option<Module<'a>>,
     .                   assoc_item: Option<(Symbol, Namespace)>,
     .               ) -> bool {
 1,229 ( 0.00%)          match (trait_module, assoc_item) {
     .                       (Some(trait_module), Some((name, ns))) => {
 2,448 ( 0.00%)                  self.resolutions(trait_module).borrow().iter().any(|resolution| {
     .                               let (&BindingKey { ident: assoc_ident, ns: assoc_ns, .. }, _) = resolution;
 8,946 ( 0.00%)                      assoc_ns == ns && assoc_ident.name == name
     .                           })
     .                       }
     .                       _ => true,
     .                   }
     .               }
     .           
     .               fn find_transitive_imports(
     .                   &mut self,
     .                   mut kind: &NameBindingKind<'_>,
     .                   trait_name: Ident,
     .               ) -> SmallVec<[LocalDefId; 1]> {
     .                   let mut import_ids = smallvec![];
    21 ( 0.00%)          while let NameBindingKind::Import { import, binding, .. } = kind {
     3 ( 0.00%)              let id = self.local_def_id(import.id);
     .                       self.maybe_unused_trait_imports.insert(id);
     1 ( 0.00%)              self.add_to_glob_map(&import, trait_name);
     .                       import_ids.push(id);
     1 ( 0.00%)              kind = &binding.kind;
     .                   }
     .                   import_ids
     .               }
     .           
     .               fn new_key(&mut self, ident: Ident, ns: Namespace) -> BindingKey {
38,801 ( 0.02%)          let ident = ident.normalize_to_macros_2_0();
 6,855 ( 0.00%)          let disambiguator = if ident.name == kw::Underscore {
     .                       self.underscore_disambiguator += 1;
     .                       self.underscore_disambiguator
     .                   } else {
     .                       0
     .                   };
     .                   BindingKey { ident, ns, disambiguator }
     .               }
     .           
64,728 ( 0.04%)      fn resolutions(&mut self, module: Module<'a>) -> &'a Resolutions<'a> {
 8,091 ( 0.00%)          if module.populate_on_access.get() {
     .                       module.populate_on_access.set(false);
     .                       self.build_reduced_graph_external(module);
     .                   }
 8,091 ( 0.00%)          &module.lazy_resolutions
72,819 ( 0.04%)      }
     .           
61,704 ( 0.03%)      fn resolution(
     .                   &mut self,
     .                   module: Module<'a>,
     .                   key: BindingKey,
     .               ) -> &'a RefCell<NameResolution<'a>> {
20,568 ( 0.01%)          *self
     .                       .resolutions(module)
     .                       .borrow_mut()
41,136 ( 0.02%)              .entry(key)
13,712 ( 0.01%)              .or_insert_with(|| self.arenas.alloc_name_resolution())
54,848 ( 0.03%)      }
     .           
 3,388 ( 0.00%)      fn record_use(
     .                   &mut self,
     .                   ident: Ident,
     .                   used_binding: &'a NameBinding<'a>,
     .                   is_lexical_scope: bool,
     .               ) {
   924 ( 0.00%)          if let Some((b2, kind)) = used_binding.ambiguity {
     .                       self.ambiguity_errors.push(AmbiguityError {
     .                           kind,
     .                           ident,
     .                           b1: used_binding,
     .                           b2,
     .                           misc1: AmbiguityErrorMisc::None,
     .                           misc2: AmbiguityErrorMisc::None,
     .                       });
     .                   }
   774 ( 0.00%)          if let NameBindingKind::Import { import, binding, ref used } = used_binding.kind {
     .                       // Avoid marking `extern crate` items that refer to a name from extern prelude,
     .                       // but not introduce it, as used if they are accessed from lexical scope.
   158 ( 0.00%)              if is_lexical_scope {
     .                           if let Some(entry) = self.extern_prelude.get(&ident.normalize_to_macros_2_0()) {
     .                               if let Some(crate_item) = entry.extern_crate_item {
     .                                   if ptr::eq(used_binding, crate_item) && !entry.introduced_by_item {
     .                                       return;
     .                                   }
     .                               }
     .                           }
     .                       }
     .                       used.set(true);
     .                       import.used.set(true);
    79 ( 0.00%)              self.used_imports.insert(import.id);
   395 ( 0.00%)              self.add_to_glob_map(&import, ident);
   474 ( 0.00%)              self.record_use(ident, binding, false);
     .                   }
 2,464 ( 0.00%)      }
     .           
     .               #[inline]
   237 ( 0.00%)      fn add_to_glob_map(&mut self, import: &Import<'_>, ident: Ident) {
    80 ( 0.00%)          if import.is_glob() {
     .                       let def_id = self.local_def_id(import.id);
     .                       self.glob_map.entry(def_id).or_default().insert(ident.name);
     .                   }
   316 ( 0.00%)      }
     .           
     .               /// A generic scope visitor.
     .               /// Visits scopes in order to resolve some identifier in them or perform other actions.
     .               /// If the callback returns `Some` result, we stop visiting scopes and return it.
     .               fn visit_scopes<T>(
     .                   &mut self,
     .                   scope_set: ScopeSet<'a>,
     .                   parent_scope: &ParentScope<'a>,
-- line 1738 ----------------------------------------
-- line 1780 ----------------------------------------
     .                   //    ambiguities with `macro_rules`.
     .                   // 4. `macro_use` prelude (open, the open part is from macro expansions, not controlled).
     .                   // 4a. User-defined prelude from macro-use
     .                   //    (open, the open part is from macro expansions, not controlled).
     .                   // 4b. "Standard library prelude" part implemented through `macro-use` (closed, controlled).
     .                   // 4c. Standard library prelude (de-facto closed, controlled).
     .                   // 6. Language prelude: builtin attributes (closed, controlled).
     .           
 2,451 ( 0.00%)          let rust_2015 = ctxt.edition() == Edition::Edition2015;
     .                   let (ns, macro_kind, is_absolute_path) = match scope_set {
     .                       ScopeSet::All(ns, _) => (ns, None, false),
     .                       ScopeSet::AbsolutePath(ns) => (ns, None, true),
     .                       ScopeSet::Macro(macro_kind) => (MacroNS, Some(macro_kind), false),
     .                       ScopeSet::Late(ns, ..) => (ns, None, false),
     .                   };
 7,196 ( 0.00%)          let module = match scope_set {
     .                       // Start with the specified module.
     .                       ScopeSet::Late(_, module, _) => module,
     .                       // Jump out of trait or enum modules, they do not act as scopes.
    85 ( 0.00%)              _ => parent_scope.module.nearest_item_scope(),
     .                   };
   514 ( 0.00%)          let mut scope = match ns {
 1,285 ( 0.00%)              _ if is_absolute_path => Scope::CrateRoot,
     .                       TypeNS | ValueNS => Scope::Module(module, None),
   117 ( 0.00%)              MacroNS => Scope::DeriveHelpers(parent_scope.expansion),
     .                   };
   606 ( 0.00%)          let mut ctxt = ctxt.normalize_to_macros_2_0();
 1,580 ( 0.00%)          let mut use_prelude = !module.no_implicit_prelude;
     .           
     .                   loop {
 8,388 ( 0.00%)              let visit = match scope {
     .                           // Derive helpers are not in scope when resolving derives in the same container.
     .                           Scope::DeriveHelpers(expn_id) => {
   121 ( 0.00%)                      !(expn_id == parent_scope.expansion && macro_kind == Some(MacroKind::Derive))
     .                           }
     .                           Scope::DeriveHelpersCompat => true,
     .                           Scope::MacroRules(macro_rules_scope) => {
     .                               // Use "path compression" on `macro_rules` scope chains. This is an optimization
     .                               // used to avoid long scope chains, see the comments on `MacroRulesScopeRef`.
     .                               // As another consequence of this optimization visitors never observe invocation
     .                               // scopes for macros that were already expanded.
    96 ( 0.00%)                      while let MacroRulesScope::Invocation(invoc_id) = macro_rules_scope.get() {
     .                                   if let Some(next_scope) = self.output_macro_rules_scopes.get(&invoc_id) {
     .                                       macro_rules_scope.set(next_scope.get());
     .                                   } else {
     .                                       break;
     .                                   }
     .                               }
     .                               true
     .                           }
     .                           Scope::CrateRoot => true,
     .                           Scope::Module(..) => true,
    39 ( 0.00%)                  Scope::RegisteredAttrs => use_prelude,
     .                           Scope::MacroUsePrelude => use_prelude || rust_2015,
     .                           Scope::BuiltinAttrs => true,
   186 ( 0.00%)                  Scope::ExternPrelude => use_prelude || is_absolute_path,
    62 ( 0.00%)                  Scope::ToolPrelude => use_prelude,
 1,100 ( 0.00%)                  Scope::StdLibPrelude => use_prelude || ns == MacroNS,
     .                           Scope::BuiltinTypes => true,
     .                       };
     .           
   245 ( 0.00%)              if visit {
   818 ( 0.00%)                  if let break_result @ Some(..) = visitor(self, scope, use_prelude, ctxt) {
     .                               return break_result;
     .                           }
     .                       }
     .           
 2,612 ( 0.00%)              scope = match scope {
     .                           Scope::DeriveHelpers(LocalExpnId::ROOT) => Scope::DeriveHelpersCompat,
     .                           Scope::DeriveHelpers(expn_id) => {
     .                               // Derive helpers are not visible to code generated by bang or derive macros.
     .                               let expn_data = expn_id.expn_data();
   135 ( 0.00%)                      match expn_data.kind {
     .                                   ExpnKind::Root
     .                                   | ExpnKind::Macro(MacroKind::Bang | MacroKind::Derive, _) => {
     .                                       Scope::DeriveHelpersCompat
     .                                   }
     4 ( 0.00%)                          _ => Scope::DeriveHelpers(expn_data.parent.expect_local()),
     .                               }
     .                           }
   117 ( 0.00%)                  Scope::DeriveHelpersCompat => Scope::MacroRules(parent_scope.macro_rules),
    78 ( 0.00%)                  Scope::MacroRules(macro_rules_scope) => match macro_rules_scope.get() {
     .                               MacroRulesScope::Binding(binding) => {
     .                                   Scope::MacroRules(binding.parent_macro_rules_scope)
     .                               }
     .                               MacroRulesScope::Invocation(invoc_id) => {
     .                                   Scope::MacroRules(self.invocation_parent_scopes[&invoc_id].macro_rules)
     .                               }
     .                               MacroRulesScope::Empty => Scope::Module(module, None),
     .                           },
-- line 1869 ----------------------------------------
-- line 1870 ----------------------------------------
     .                           Scope::CrateRoot => match ns {
     .                               TypeNS => {
     .                                   ctxt.adjust(ExpnId::root());
     .                                   Scope::ExternPrelude
     .                               }
     .                               ValueNS | MacroNS => break,
     .                           },
     .                           Scope::Module(module, prev_lint_id) => {
   858 ( 0.00%)                      use_prelude = !module.no_implicit_prelude;
     .                               let derive_fallback_lint_id = match scope_set {
     .                                   ScopeSet::Late(.., lint_id) => lint_id,
     .                                   _ => None,
     .                               };
 1,491 ( 0.00%)                      match self.hygienic_lexical_parent(module, &mut ctxt, derive_fallback_lint_id) {
     .                                   Some((parent_module, lint_id)) => {
     .                                       Scope::Module(parent_module, lint_id.or(prev_lint_id))
     .                                   }
     .                                   None => {
 1,141 ( 0.00%)                              ctxt.adjust(ExpnId::root());
   568 ( 0.00%)                              match ns {
     .                                           TypeNS => Scope::ExternPrelude,
     .                                           ValueNS => Scope::StdLibPrelude,
     .                                           MacroNS => Scope::RegisteredAttrs,
     .                                       }
     .                                   }
     .                               }
     .                           }
     .                           Scope::RegisteredAttrs => Scope::MacroUsePrelude,
     .                           Scope::MacroUsePrelude => Scope::StdLibPrelude,
     .                           Scope::BuiltinAttrs => break, // nowhere else to search
   124 ( 0.00%)                  Scope::ExternPrelude if is_absolute_path => break,
     .                           Scope::ExternPrelude => Scope::ToolPrelude,
     .                           Scope::ToolPrelude => Scope::StdLibPrelude,
   446 ( 0.00%)                  Scope::StdLibPrelude => match ns {
     .                               TypeNS => Scope::BuiltinTypes,
     .                               ValueNS => break, // nowhere else to search
     .                               MacroNS => Scope::BuiltinAttrs,
     .                           },
     .                           Scope::BuiltinTypes => break, // nowhere else to search
     .                       };
     .                   }
     .           
-- line 1911 ----------------------------------------
-- line 1924 ----------------------------------------
     .               ///    let g = || {};
     .               ///    fn g() {}
     .               ///    g(); // This resolves to the local variable `g` since it shadows the item.
     .               /// }
     .               /// ```
     .               ///
     .               /// Invariant: This must only be called during main resolution, not during
     .               /// import resolution.
 3,010 ( 0.00%)      fn resolve_ident_in_lexical_scope(
     .                   &mut self,
     .                   mut ident: Ident,
     .                   ns: Namespace,
     .                   parent_scope: &ParentScope<'a>,
     .                   record_used_id: Option<NodeId>,
     .                   path_span: Span,
     .                   ribs: &[Rib<'a>],
     .               ) -> Option<LexicalScopeBinding<'a>> {
   602 ( 0.00%)          assert!(ns == TypeNS || ns == ValueNS);
     .                   let orig_ident = ident;
 2,107 ( 0.00%)          if ident.name == kw::Empty {
     .                       return Some(LexicalScopeBinding::Res(Res::Err));
     .                   }
     .                   let (general_span, normalized_span) = if ident.name == kw::SelfUpper {
     .                       // FIXME(jseyfried) improve `Self` hygiene
     .                       let empty_span = ident.span.with_ctxt(SyntaxContext::root());
     .                       (empty_span, empty_span)
   288 ( 0.00%)          } else if ns == TypeNS {
   700 ( 0.00%)              let normalized_span = ident.span.normalize_to_macros_2_0();
     .                       (normalized_span, normalized_span)
     .                   } else {
   740 ( 0.00%)              (ident.span.normalize_to_macro_rules(), ident.span.normalize_to_macros_2_0())
     .                   };
     .                   ident.span = general_span;
     .                   let normalized_ident = Ident { span: normalized_span, ..ident };
     .           
     .                   // Walk backwards up the ribs in scope.
     .                   let record_used = record_used_id.is_some();
   903 ( 0.00%)          let mut module = self.graph_root;
     .                   for i in (0..ribs.len()).rev() {
     .                       debug!("walk rib\n{:?}", ribs[i].bindings);
     .                       // Use the rib kind to determine whether we are resolving parameters
     .                       // (macro 2.0 hygiene) or local variables (`macro_rules` hygiene).
 1,180 ( 0.00%)              let rib_ident = if ribs[i].kind.contains_params() { normalized_ident } else { ident };
     .                       if let Some((original_rib_ident_def, res)) = ribs[i].bindings.get_key_value(&rib_ident)
     .                       {
     .                           // The ident resolves to a type parameter or local variable.
   900 ( 0.00%)                  return Some(LexicalScopeBinding::Res(self.validate_res_from_ribs(
     .                               i,
   150 ( 0.00%)                      rib_ident,
   375 ( 0.00%)                      *res,
     .                               record_used,
     .                               path_span,
     .                               *original_rib_ident_def,
     .                               ribs,
     .                           )));
     .                       }
     .           
 6,803 ( 0.00%)              module = match ribs[i].kind {
   233 ( 0.00%)                  ModuleRibKind(module) => module,
     .                           MacroDefinition(def) if def == self.macro_def(ident.span.ctxt()) => {
     .                               // If an invocation of this macro created `ident`, give up on `ident`
     .                               // and switch to `ident`'s source from the macro definition.
     .                               ident.span.remove_mark();
     .                               continue;
     .                           }
     .                           _ => continue,
     .                       };
     .           
   699 ( 0.00%)              match module.kind {
     .                           ModuleKind::Block(..) => {} // We can see through blocks
     .                           _ => break,
     .                       }
     .           
     .                       let item = self.resolve_ident_in_module_unadjusted(
     .                           ModuleOrUniformRoot::Module(module),
     .                           ident,
     .                           ns,
     .                           parent_scope,
     .                           record_used,
     .                           path_span,
     .                       );
     .                       if let Ok(binding) = item {
     .                           // The ident resolves to an item.
     9 ( 0.00%)                  return Some(LexicalScopeBinding::Item(binding));
     .                       }
     .                   }
 3,791 ( 0.00%)          self.early_resolve_ident_in_lexical_scope(
     .                       orig_ident,
     .                       ScopeSet::Late(ns, module, record_used_id),
     .                       parent_scope,
     .                       record_used,
     .                       record_used,
     .                       path_span,
     .                   )
     .                   .ok()
     .                   .map(LexicalScopeBinding::Item)
 2,709 ( 0.00%)      }
     .           
 2,640 ( 0.00%)      fn hygienic_lexical_parent(
     .                   &mut self,
     .                   module: Module<'a>,
     .                   ctxt: &mut SyntaxContext,
     .                   derive_fallback_lint_id: Option<NodeId>,
     .               ) -> Option<(Module<'a>, Option<NodeId>)> {
 1,680 ( 0.00%)          if !module.expansion.outer_expn_is_descendant_of(*ctxt) {
    84 ( 0.00%)              return Some((self.expn_def_scope(ctxt.remove_mark()), None));
     .                   }
     .           
   452 ( 0.00%)          if let ModuleKind::Block(..) = module.kind {
     7 ( 0.00%)              return Some((module.parent.unwrap().nearest_item_scope(), None));
     .                   }
     .           
     .                   // We need to support the next case under a deprecation warning
     .                   // ```
     .                   // struct MyStruct;
     .                   // ---- begin: this comes from a proc macro derive
     .                   // mod implementation_details {
     .                   //     // Note that `MyStruct` is not in scope here.
     .                   //     impl SomeTrait for MyStruct { ... }
     .                   // }
     .                   // ---- end
     .                   // ```
     .                   // So we have to fall back to the module's parent during lexical resolution in this case.
   219 ( 0.00%)          if derive_fallback_lint_id.is_some() {
   123 ( 0.00%)              if let Some(parent) = module.parent {
     .                           // Inner module is inside the macro, parent module is outside of the macro.
   195 ( 0.00%)                  if module.expansion != parent.expansion
     .                               && module.expansion.is_descendant_of(parent.expansion)
     .                           {
     .                               // The macro is a proc macro derive
     .                               if let Some(def_id) = module.expansion.expn_data().macro_def_id {
     .                                   let ext = self.get_macro_by_def_id(def_id);
     .                                   if ext.builtin_name.is_none()
     .                                       && ext.macro_kind() == MacroKind::Derive
     .                                       && parent.expansion.outer_expn_is_descendant_of(*ctxt)
-- line 2058 ----------------------------------------
-- line 2060 ----------------------------------------
     .                                       return Some((parent, derive_fallback_lint_id));
     .                                   }
     .                               }
     .                           }
     .                       }
     .                   }
     .           
     .                   None
 2,400 ( 0.00%)      }
     .           
     .               fn resolve_ident_in_module(
     .                   &mut self,
     .                   module: ModuleOrUniformRoot<'a>,
     .                   ident: Ident,
     .                   ns: Namespace,
     .                   parent_scope: &ParentScope<'a>,
     .                   record_used: bool,
     .                   path_span: Span,
     .               ) -> Result<&'a NameBinding<'a>, Determinacy> {
 2,187 ( 0.00%)          self.resolve_ident_in_module_ext(module, ident, ns, parent_scope, record_used, path_span)
     .                       .map_err(|(determinacy, _)| determinacy)
     .               }
     .           
 4,960 ( 0.00%)      fn resolve_ident_in_module_ext(
     .                   &mut self,
     .                   module: ModuleOrUniformRoot<'a>,
     .                   mut ident: Ident,
     .                   ns: Namespace,
     .                   parent_scope: &ParentScope<'a>,
     .                   record_used: bool,
     .                   path_span: Span,
     .               ) -> Result<&'a NameBinding<'a>, (Determinacy, Weak)> {
     .                   let tmp_parent_scope;
     .                   let mut adjusted_parent_scope = parent_scope;
     .                   match module {
     .                       ModuleOrUniformRoot::Module(m) => {
 1,494 ( 0.00%)                  if let Some(def) = ident.span.normalize_to_macros_2_0_and_adjust(m.expansion) {
    90 ( 0.00%)                      tmp_parent_scope =
   108 ( 0.00%)                          ParentScope { module: self.expn_def_scope(def), ..*parent_scope };
     .                               adjusted_parent_scope = &tmp_parent_scope;
     .                           }
     .                       }
     .                       ModuleOrUniformRoot::ExternPrelude => {
     .                           ident.span.normalize_to_macros_2_0_and_adjust(ExpnId::root());
     .                       }
     .                       ModuleOrUniformRoot::CrateRootAndExternPrelude | ModuleOrUniformRoot::CurrentScope => {
     .                           // No adjustments
     .                       }
     .                   }
 2,738 ( 0.00%)          self.resolve_ident_in_module_unadjusted_ext(
     .                       module,
   498 ( 0.00%)              ident,
     .                       ns,
     .                       adjusted_parent_scope,
     .                       false,
     .                       record_used,
     .                       path_span,
     .                   )
 1,736 ( 0.00%)      }
     .           
   840 ( 0.00%)      fn resolve_crate_root(&mut self, ident: Ident) -> Module<'a> {
     .                   debug!("resolve_crate_root({:?})", ident);
    84 ( 0.00%)          let mut ctxt = ident.span.ctxt();
    84 ( 0.00%)          let mark = if ident.name == kw::DollarCrate {
     .                       // When resolving `$crate` from a `macro_rules!` invoked in a `macro`,
     .                       // we don't want to pretend that the `macro_rules!` definition is in the `macro`
     .                       // as described in `SyntaxContext::apply_mark`, so we ignore prepended opaque marks.
     .                       // FIXME: This is only a guess and it doesn't work correctly for `macro_rules!`
     .                       // definitions actually produced by `macro` and `macro` definitions produced by
     .                       // `macro_rules!`, but at least such configurations are not stable yet.
   102 ( 0.00%)              ctxt = ctxt.normalize_to_macro_rules();
     .                       debug!(
     .                           "resolve_crate_root: marks={:?}",
     .                           ctxt.marks().into_iter().map(|(i, t)| (i.expn_data(), t)).collect::<Vec<_>>()
     .                       );
   102 ( 0.00%)              let mut iter = ctxt.marks().into_iter().rev().peekable();
     .                       let mut result = None;
     .                       // Find the last opaque mark from the end if it exists.
   228 ( 0.00%)              while let Some(&(mark, transparency)) = iter.peek() {
     .                           if transparency == Transparency::Opaque {
     .                               result = Some(mark);
     .                               iter.next();
     .                           } else {
     .                               break;
     .                           }
     .                       }
     .                       debug!(
     .                           "resolve_crate_root: found opaque mark {:?} {:?}",
     .                           result,
     .                           result.map(|r| r.expn_data())
     .                       );
     .                       // Then find the last semi-transparent mark from the end if it exists.
   153 ( 0.00%)              for (mark, transparency) in iter {
     .                           if transparency == Transparency::SemiTransparent {
     .                               result = Some(mark);
     .                           } else {
     .                               break;
     .                           }
     .                       }
     .                       debug!(
     .                           "resolve_crate_root: found semi-transparent mark {:?} {:?}",
     .                           result,
     .                           result.map(|r| r.expn_data())
     .                       );
     .                       result
     .                   } else {
     .                       debug!("resolve_crate_root: not DollarCrate");
    33 ( 0.00%)              ctxt = ctxt.normalize_to_macros_2_0();
   231 ( 0.00%)              ctxt.adjust(ExpnId::root())
     .                   };
   168 ( 0.00%)          let module = match mark {
   250 ( 0.00%)              Some(def) => self.expn_def_scope(def),
     .                       None => {
     .                           debug!(
     .                               "resolve_crate_root({:?}): found no mark (ident.span = {:?})",
     .                               ident, ident.span
     .                           );
    68 ( 0.00%)                  return self.graph_root;
     .                       }
     .                   };
     .                   let module = self.expect_module(
     .                       module.opt_def_id().map_or(LOCAL_CRATE, |def_id| def_id.krate).as_def_id(),
     .                   );
     .                   debug!(
     .                       "resolve_crate_root({:?}): got module {:?} ({:?}) (ident.span = {:?})",
     .                       ident,
     .                       module,
     .                       module.kind.name(),
     .                       ident.span
     .                   );
     .                   module
   588 ( 0.00%)      }
     .           
     .               fn resolve_self(&mut self, ctxt: &mut SyntaxContext, module: Module<'a>) -> Module<'a> {
     .                   let mut module = self.expect_module(module.nearest_parent_mod());
     .                   while module.span.ctxt().normalize_to_macros_2_0() != *ctxt {
     .                       let parent = module.parent.unwrap_or_else(|| self.expn_def_scope(ctxt.remove_mark()));
     .                       module = self.expect_module(parent.nearest_parent_mod());
     .                   }
     .                   module
-- line 2199 ----------------------------------------
-- line 2203 ----------------------------------------
     .                   &mut self,
     .                   path: &[Segment],
     .                   opt_ns: Option<Namespace>, // `None` indicates a module path in import
     .                   parent_scope: &ParentScope<'a>,
     .                   record_used: bool,
     .                   path_span: Span,
     .                   crate_lint: CrateLint,
     .               ) -> PathResult<'a> {
   498 ( 0.00%)          self.resolve_path_with_ribs(
     .                       path,
     .                       opt_ns,
     .                       parent_scope,
     .                       record_used,
     .                       path_span,
     .                       crate_lint,
     .                       None,
     .                   )
     .               }
     .           
 4,590 ( 0.00%)      fn resolve_path_with_ribs(
     .                   &mut self,
     .                   path: &[Segment],
     .                   opt_ns: Option<Namespace>, // `None` indicates a module path in import
     .                   parent_scope: &ParentScope<'a>,
     .                   record_used: bool,
     .                   path_span: Span,
     .                   crate_lint: CrateLint,
     .                   ribs: Option<&PerNS<Vec<Rib<'a>>>>,
     .               ) -> PathResult<'a> {
   306 ( 0.00%)          let mut module = None;
     .                   let mut allow_super = true;
     .                   let mut second_binding = None;
     .           
     .                   debug!(
     .                       "resolve_path(path={:?}, opt_ns={:?}, record_used={:?}, \
     .                        path_span={:?}, crate_lint={:?})",
     .                       path, opt_ns, record_used, path_span, crate_lint,
     .                   );
     .           
 2,736 ( 0.00%)          for (i, &Segment { ident, id, has_generic_args: _ }) in path.iter().enumerate() {
     .                       debug!("resolve_path ident {} {:?} {:?}", i, ident, id);
 2,922 ( 0.00%)              let record_segment_res = |this: &mut Self, res| {
   642 ( 0.00%)                  if record_used {
   919 ( 0.00%)                      if let Some(id) = id {
   366 ( 0.00%)                          if !this.partial_res_map.contains_key(&id) {
   332 ( 0.00%)                              assert!(id != ast::DUMMY_NODE_ID, "Trying to resolve dummy id");
   664 ( 0.00%)                              this.record_partial_res(id, PartialRes::new(res));
     .                                   }
     .                               }
     .                           }
   856 ( 0.00%)              };
     .           
 1,166 ( 0.00%)              let is_last = i == path.len() - 1;
 2,280 ( 0.00%)              let ns = if is_last { opt_ns.unwrap_or(TypeNS) } else { TypeNS };
   456 ( 0.00%)              let name = ident.name;
     .           
   778 ( 0.00%)              allow_super &= ns == TypeNS && (name == kw::SelfLower || name == kw::Super);
     .           
     .                       if ns == TypeNS {
   644 ( 0.00%)                  if allow_super && name == kw::Super {
     .                               let mut ctxt = ident.span.ctxt().normalize_to_macros_2_0();
     .                               let self_module = match i {
     .                                   0 => Some(self.resolve_self(&mut ctxt, parent_scope.module)),
     .                                   _ => match module {
     .                                       Some(ModuleOrUniformRoot::Module(module)) => Some(module),
     .                                       _ => None,
     .                                   },
     .                               };
-- line 2270 ----------------------------------------
-- line 2279 ----------------------------------------
     .                               let msg = "there are too many leading `super` keywords".to_string();
     .                               return PathResult::Failed {
     .                                   span: ident.span,
     .                                   label: msg,
     .                                   suggestion: None,
     .                                   is_error_from_last_segment: false,
     .                               };
     .                           }
   644 ( 0.00%)                  if i == 0 {
   618 ( 0.00%)                      if name == kw::SelfLower {
     .                                   let mut ctxt = ident.span.ctxt().normalize_to_macros_2_0();
     .                                   module = Some(ModuleOrUniformRoot::Module(
     .                                       self.resolve_self(&mut ctxt, parent_scope.module),
     .                                   ));
     .                                   continue;
     .                               }
    99 ( 0.00%)                      if name == kw::PathRoot && ident.span.rust_2018() {
     .                                   module = Some(ModuleOrUniformRoot::ExternPrelude);
     .                                   continue;
     .                               }
   198 ( 0.00%)                      if name == kw::PathRoot && ident.span.rust_2015() && self.session.rust_2018() {
     .                                   // `::a::b` from 2015 macro on 2018 global edition
     .                                   module = Some(ModuleOrUniformRoot::CrateRootAndExternPrelude);
     .                                   continue;
     .                               }
     .                               if name == kw::PathRoot || name == kw::Crate || name == kw::DollarCrate {
     .                                   // `::a::b`, `crate::a::b` or `$crate::a::b`
   264 ( 0.00%)                          module = Some(ModuleOrUniformRoot::Module(self.resolve_crate_root(ident)));
     .                                   continue;
     .                               }
     .                           }
     .                       }
     .           
     .                       // Report special messages for path segment keywords in wrong positions.
 1,972 ( 0.00%)              if ident.is_path_segment_keyword() && i != 0 {
     .                           let name_str = if name == kw::PathRoot {
     .                               "crate root".to_string()
     .                           } else {
     .                               format!("`{}`", name)
     .                           };
     .                           let label = if i == 1 && path[0].ident.name == kw::PathRoot {
     .                               format!("global paths cannot start with {}", name_str)
     .                           } else {
-- line 2321 ----------------------------------------
-- line 2328 ----------------------------------------
     .                               is_error_from_last_segment: false,
     .                           };
     .                       }
     .           
     .                       enum FindBindingResult<'a> {
     .                           Binding(Result<&'a NameBinding<'a>, Determinacy>),
     .                           PathResult(PathResult<'a>),
     .                       }
12,480 ( 0.01%)              let find_binding_in_ns = |this: &mut Self, ns| {
 1,710 ( 0.00%)                  let binding = if let Some(module) = module {
     .                               this.resolve_ident_in_module(
     .                                   module,
   450 ( 0.00%)                          ident,
     .                                   ns,
     .                                   parent_scope,
   300 ( 0.00%)                          record_used,
   150 ( 0.00%)                          path_span,
     .                               )
 1,440 ( 0.00%)                  } else if ribs.is_none() || opt_ns.is_none() || opt_ns == Some(MacroNS) {
     .                               let scopes = ScopeSet::All(ns, opt_ns.is_none());
     .                               this.early_resolve_ident_in_lexical_scope(
     .                                   ident,
     .                                   scopes,
     .                                   parent_scope,
     .                                   record_used,
     .                                   record_used,
     .                                   path_span,
     .                               )
     .                           } else {
   960 ( 0.00%)                      let record_used_id = if record_used {
   189 ( 0.00%)                          crate_lint.node_id().or(Some(CRATE_NODE_ID))
     .                               } else {
     .                                   None
     .                               };
 3,470 ( 0.00%)                      match this.resolve_ident_in_lexical_scope(
   720 ( 0.00%)                          ident,
     .                                   ns,
   240 ( 0.00%)                          parent_scope,
     .                                   record_used_id,
   480 ( 0.00%)                          path_span,
     .                                   &ribs.unwrap()[ns],
     .                               ) {
     .                                   // we found a locally-imported or available item/module
   378 ( 0.00%)                          Some(LexicalScopeBinding::Item(binding)) => Ok(binding),
     .                                   // we found a local variable or type param
     .                                   Some(LexicalScopeBinding::Res(res))
   130 ( 0.00%)                              if opt_ns == Some(TypeNS) || opt_ns == Some(ValueNS) =>
     .                                   {
   585 ( 0.00%)                              record_segment_res(this, res);
   520 ( 0.00%)                              return FindBindingResult::PathResult(PathResult::NonModule(
   455 ( 0.00%)                                  PartialRes::with_unresolved_segments(res, path.len() - 1),
     .                                       ));
     .                                   }
   147 ( 0.00%)                          _ => Err(Determinacy::determined(record_used)),
     .                               }
     .                           };
 2,275 ( 0.00%)                  FindBindingResult::Binding(binding)
 3,120 ( 0.00%)              };
 2,730 ( 0.00%)              let binding = match find_binding_in_ns(self, ns) {
   910 ( 0.00%)                  FindBindingResult::PathResult(x) => return x,
     .                           FindBindingResult::Binding(binding) => binding,
     .                       };
   797 ( 0.00%)              match binding {
     .                           Ok(binding) => {
 1,380 ( 0.00%)                      if i == 1 {
     .                                   second_binding = Some(binding);
     .                               }
     .                               let res = binding.res();
 2,634 ( 0.00%)                      let maybe_assoc = opt_ns != Some(MacroNS) && PathSource::Type.is_expected(res);
     .                               if let Some(next_module) = binding.module() {
   298 ( 0.00%)                          module = Some(ModuleOrUniformRoot::Module(next_module));
 1,341 ( 0.00%)                          record_segment_res(self, res);
   889 ( 0.00%)                      } else if res == Res::ToolMod && i + 1 != path.len() {
     .                                   if binding.is_import() {
     .                                       self.session
     .                                           .struct_span_err(
     .                                               ident.span,
     .                                               "cannot use a tool module through an import",
     .                                           )
     .                                           .span_note(binding.span, "the tool module imported here")
     .                                           .emit();
     .                                   }
     .                                   let res = Res::NonMacroAttr(NonMacroAttrKind::Tool);
     .                                   return PathResult::NonModule(PartialRes::new(res));
   635 ( 0.00%)                      } else if res == Res::Err {
     .                                   return PathResult::NonModule(PartialRes::new(Res::Err));
   381 ( 0.00%)                      } else if opt_ns.is_some() && (is_last || maybe_assoc) {
   889 ( 0.00%)                          self.lint_if_path_starts_with_module(
   254 ( 0.00%)                              crate_lint,
     .                                       path,
   127 ( 0.00%)                              path_span,
     .                                       second_binding,
     .                                   );
   381 ( 0.00%)                          return PathResult::NonModule(PartialRes::with_unresolved_segments(
   508 ( 0.00%)                              res,
   508 ( 0.00%)                              path.len() - i - 1,
     .                                   ));
     .                               } else {
     .                                   let label = format!(
     .                                       "`{}` is {} {}, not a module",
     .                                       ident,
     .                                       res.article(),
     .                                       res.descr(),
     .                                   );
-- line 2431 ----------------------------------------
-- line 2433 ----------------------------------------
     .                                   return PathResult::Failed {
     .                                       span: ident.span,
     .                                       label,
     .                                       suggestion: None,
     .                                       is_error_from_last_segment: is_last,
     .                                   };
     .                               }
     .                           }
    98 ( 0.00%)                  Err(Undetermined) => return PathResult::Indeterminate,
     .                           Err(Determined) => {
     .                               if let Some(ModuleOrUniformRoot::Module(module)) = module {
     .                                   if opt_ns.is_some() && !module.is_normal() {
     .                                       return PathResult::NonModule(PartialRes::with_unresolved_segments(
     .                                           module.res().unwrap(),
     .                                           path.len() - i,
     .                                       ));
     .                                   }
-- line 2449 ----------------------------------------
-- line 2612 ----------------------------------------
     .                                   label,
     .                                   suggestion,
     .                                   is_error_from_last_segment: is_last,
     .                               };
     .                           }
     .                       }
     .                   }
     .           
   715 ( 0.00%)          self.lint_if_path_starts_with_module(crate_lint, path, path_span, second_binding);
     .           
   390 ( 0.00%)          PathResult::Module(match module {
   130 ( 0.00%)              Some(module) => module,
     .                       None if path.is_empty() => ModuleOrUniformRoot::CurrentScope,
     .                       _ => span_bug!(path_span, "resolve_path: non-empty path `{:?}` has no module", path),
     .                   })
 2,754 ( 0.00%)      }
     .           
 2,328 ( 0.00%)      fn lint_if_path_starts_with_module(
     .                   &mut self,
     .                   crate_lint: CrateLint,
     .                   path: &[Segment],
     .                   path_span: Span,
     .                   second_binding: Option<&NameBinding<'_>>,
     .               ) {
   970 ( 0.00%)          let (diag_id, diag_span) = match crate_lint {
     .                       CrateLint::No => return,
     .                       CrateLint::SimplePath(id) => (id, path_span),
     .                       CrateLint::UsePath { root_id, root_span } => (root_id, root_span),
     .                       CrateLint::QPathTrait { qpath_id, qpath_span } => (qpath_id, qpath_span),
     .                   };
     .           
   182 ( 0.00%)          let first_name = match path.get(0) {
     .                       // In the 2018 edition this lint is a hard error, so nothing to do
 1,032 ( 0.00%)              Some(seg) if seg.ident.span.rust_2015() && self.session.rust_2015() => seg.ident.name,
     .                       _ => return,
     .                   };
     .           
     .                   // We're only interested in `use` paths which should start with
     .                   // `{{root}}` currently.
   501 ( 0.00%)          if first_name != kw::PathRoot {
     .                       return;
     .                   }
     .           
     .                   match path.get(1) {
     .                       // If this import looks like `crate::...` it's already good
    31 ( 0.00%)              Some(Segment { ident, .. }) if ident.name == kw::Crate => return,
     .                       // Otherwise go below to see if it's an extern crate
     .                       Some(_) => {}
     .                       // If the path has length one (and it's `PathRoot` most likely)
     .                       // then we don't know whether we're gonna be importing a crate or an
     .                       // item in our crate. Defer this lint to elsewhere
     .                       None => return,
     .                   }
     .           
     .                   // If the first element of our path was actually resolved to an
     .                   // `ExternCrate` (also used for `crate::...`) then no need to issue a
     .                   // warning, this looks all good!
    62 ( 0.00%)          if let Some(binding) = second_binding {
    93 ( 0.00%)              if let NameBindingKind::Import { import, .. } = binding.kind {
     .                           // Careful: we still want to rewrite paths from renamed extern crates.
   124 ( 0.00%)                  if let ImportKind::ExternCrate { source: None, .. } = import.kind {
     .                               return;
     .                           }
     .                       }
     .                   }
     .           
     .                   let diag = BuiltinLintDiagnostics::AbsPathWithModule(diag_span);
     .                   self.lint_buffer.buffer_lint_with_diagnostic(
     .                       lint::builtin::ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE,
     .                       diag_id,
     .                       diag_span,
     .                       "absolute paths must start with `self`, `super`, \
     .                        `crate`, or an external crate name in the 2018 edition",
     .                       diag,
     .                   );
 1,552 ( 0.00%)      }
     .           
     .               // Validate a local resolution (from ribs).
     .               fn validate_res_from_ribs(
     .                   &mut self,
     .                   rib_index: usize,
     .                   rib_ident: Ident,
     .                   mut res: Res,
     .                   record_used: bool,
     .                   span: Span,
     .                   original_rib_ident_def: Ident,
     .                   all_ribs: &[Rib<'a>],
     .               ) -> Res {
     .                   const CG_BUG_STR: &str = "min_const_generics resolve check didn't stop compilation";
     .                   debug!("validate_res_from_ribs({:?})", res);
   150 ( 0.00%)          let ribs = &all_ribs[rib_index + 1..];
     .           
     .                   // An invalid forward use of a generic parameter from a previous default.
   300 ( 0.00%)          if let ForwardGenericParamBanRibKind = all_ribs[rib_index].kind {
     .                       if record_used {
     .                           let res_error = if rib_ident.name == kw::SelfUpper {
     .                               ResolutionError::SelfInGenericParamDefault
     .                           } else {
     .                               ResolutionError::ForwardDeclaredGenericParam
     .                           };
     .                           self.report_error(span, res_error);
     .                       }
     .                       assert_eq!(res, Res::Err);
     .                       return Res::Err;
     .                   }
     .           
   506 ( 0.00%)          match res {
     .                       Res::Local(_) => {
     .                           use ResolutionError::*;
    55 ( 0.00%)                  let mut res_err = None;
     .           
     .                           for rib in ribs {
   393 ( 0.00%)                      match rib.kind {
     .                                   NormalRibKind
     .                                   | ClosureOrAsyncRibKind
     .                                   | ModuleRibKind(..)
     .                                   | MacroDefinition(..)
     .                                   | ForwardGenericParamBanRibKind => {
     .                                       // Nothing to do. Continue.
     .                                   }
     .                                   ItemRibKind(_) | FnItemRibKind | AssocItemRibKind => {
     .                                       // This was an attempt to access an upvar inside a
     .                                       // named function item. This is not allowed, so we
     .                                       // report an error.
    37 ( 0.00%)                              if record_used {
     .                                           // We don't immediately trigger a resolve error, because
     .                                           // we want certain other resolution errors (namely those
     .                                           // emitted for `ConstantItemRibKind` below) to take
     .                                           // precedence.
     .                                           res_err = Some(CannotCaptureDynamicEnvironmentInFnItem);
     .                                       }
     .                                   }
     .                                   ConstantItemRibKind(_, item) => {
-- line 2744 ----------------------------------------
-- line 2773 ----------------------------------------
     .                                   ConstParamTyRibKind => {
     .                                       if record_used {
     .                                           self.report_error(span, ParamInTyOfConstParam(rib_ident.name));
     .                                       }
     .                                       return Res::Err;
     .                                   }
     .                               }
     .                           }
    64 ( 0.00%)                  if let Some(res_err) = res_err {
     .                               self.report_error(span, res_err);
     .                               return Res::Err;
     .                           }
     .                       }
     .                       Res::Def(DefKind::TyParam, _) | Res::SelfTy(..) => {
     .                           for rib in ribs {
    91 ( 0.00%)                      let has_generic_params: HasGenericParams = match rib.kind {
     .                                   NormalRibKind
     .                                   | ClosureOrAsyncRibKind
     .                                   | AssocItemRibKind
     .                                   | ModuleRibKind(..)
     .                                   | MacroDefinition(..)
     .                                   | ForwardGenericParamBanRibKind => {
     .                                       // Nothing to do. Continue.
     .                                       continue;
-- line 2796 ----------------------------------------
-- line 2799 ----------------------------------------
     .                                   ConstantItemRibKind(trivial, _) => {
     .                                       let features = self.session.features_untracked();
     .                                       // HACK(min_const_generics): We currently only allow `N` or `{ N }`.
     .                                       if !(trivial || features.generic_const_exprs) {
     .                                           // HACK(min_const_generics): If we encounter `Self` in an anonymous constant
     .                                           // we can't easily tell if it's generic at this stage, so we instead remember
     .                                           // this and then enforce the self type to be concrete later on.
     .                                           if let Res::SelfTy(trait_def, Some((impl_def, _))) = res {
    13 ( 0.00%)                                      res = Res::SelfTy(trait_def, Some((impl_def, true)));
     .                                           } else {
     .                                               if record_used {
     .                                                   self.report_error(
     .                                                       span,
     .                                                       ResolutionError::ParamInNonTrivialAnonConst {
     .                                                           name: rib_ident.name,
     .                                                           is_type: true,
     .                                                       },
-- line 2815 ----------------------------------------
-- line 2912 ----------------------------------------
     .                                       ),
     .                                   );
     .                               }
     .                               return Res::Err;
     .                           }
     .                       }
     .                       _ => {}
     .                   }
   300 ( 0.00%)          res
     .               }
     .           
     .               fn record_partial_res(&mut self, node_id: NodeId, resolution: PartialRes) {
     .                   debug!("(recording res) recording {:?} for {}", resolution, node_id);
   962 ( 0.00%)          if let Some(prev_res) = self.partial_res_map.insert(node_id, resolution) {
     .                       panic!("path resolved multiple times ({:?} before, {:?} now)", prev_res, resolution);
     .                   }
     .               }
     .           
     .               fn record_pat_span(&mut self, node: NodeId, span: Span) {
     .                   debug!("(recording pat) recording {:?} for {:?}", node, span);
     .                   self.pat_span_map.insert(node, span);
     .               }
     .           
     .               fn is_accessible_from(&self, vis: ty::Visibility, module: Module<'a>) -> bool {
 2,010 ( 0.00%)          vis.is_accessible_from(module.nearest_parent_mod(), self)
     .               }
     .           
     .               fn set_binding_parent_module(&mut self, binding: &'a NameBinding<'a>, module: Module<'a>) {
24,304 ( 0.01%)          if let Some(old_module) = self.binding_parent_modules.insert(PtrKey(binding), module) {
     .                       if !ptr::eq(module, old_module) {
     .                           span_bug!(binding.span, "parent module is reset for binding");
     .                       }
     .                   }
     .               }
     .           
     .               fn disambiguate_macro_rules_vs_modularized(
     .                   &self,
-- line 2948 ----------------------------------------
-- line 2959 ----------------------------------------
     .                       (Some(macro_rules), Some(modularized)) => {
     .                           macro_rules.nearest_parent_mod() == modularized.nearest_parent_mod()
     .                               && modularized.is_ancestor_of(macro_rules)
     .                       }
     .                       _ => false,
     .                   }
     .               }
     .           
     7 ( 0.00%)      fn report_errors(&mut self, krate: &Crate) {
     .                   self.report_with_use_injections(krate);
     .           
     6 ( 0.00%)          for &(span_use, span_def) in &self.macro_expanded_macro_export_errors {
     .                       let msg = "macro-expanded `macro_export` macros from the current crate \
     .                                  cannot be referred to by absolute paths";
     .                       self.lint_buffer.buffer_lint_with_diagnostic(
     .                           lint::builtin::MACRO_EXPANDED_MACRO_EXPORTS_ACCESSED_BY_ABSOLUTE_PATHS,
     .                           CRATE_NODE_ID,
     .                           span_use,
     .                           msg,
     .                           BuiltinLintDiagnostics::MacroExpandedMacroExportsAccessedByAbsolutePaths(span_def),
-- line 2978 ----------------------------------------
-- line 2984 ----------------------------------------
     .                   }
     .           
     .                   let mut reported_spans = FxHashSet::default();
     .                   for error in &self.privacy_errors {
     .                       if reported_spans.insert(error.dedup_span) {
     .                           self.report_privacy_error(error);
     .                       }
     .                   }
     8 ( 0.00%)      }
     .           
     .               fn report_with_use_injections(&mut self, krate: &Crate) {
     .                   for UseError { mut err, candidates, def_id, instead, suggestion } in
    10 ( 0.00%)              self.use_injections.drain(..)
     .                   {
     .                       let (span, found_use) = if let Some(def_id) = def_id.as_local() {
     .                           UsePlacementFinder::check(krate, self.def_id_to_node_id[def_id])
     .                       } else {
     .                           (None, false)
     .                       };
     .                       if !candidates.is_empty() {
     .                           diagnostics::show_candidates(
-- line 3004 ----------------------------------------
-- line 3284 ----------------------------------------
     .                       }
     .           
     .                       return;
     .                   }
     .           
     .                   err.span_suggestion(span, message, String::new(), Applicability::MachineApplicable);
     .               }
     .           
   620 ( 0.00%)      fn extern_prelude_get(
     .                   &mut self,
     .                   ident: Ident,
     .                   speculative: bool,
     .               ) -> Option<&'a NameBinding<'a>> {
   310 ( 0.00%)          if ident.is_path_segment_keyword() {
     .                       // Make sure `self`, `super` etc produce an error when passed to here.
     .                       return None;
     .                   }
   558 ( 0.00%)          self.extern_prelude.get(&ident.normalize_to_macros_2_0()).cloned().and_then(|entry| {
     .                       if let Some(binding) = entry.extern_crate_item {
     .                           if !speculative && entry.introduced_by_item {
     .                               self.record_use(ident, binding, false);
     .                           }
     .                           Some(binding)
     .                       } else {
     .                           let crate_id = if !speculative {
     .                               let Some(crate_id) =
-- line 3309 ----------------------------------------
-- line 3314 ----------------------------------------
     .                           };
     .                           let crate_root = self.expect_module(crate_id.as_def_id());
     .                           Some(
     .                               (crate_root, ty::Visibility::Public, DUMMY_SP, LocalExpnId::ROOT)
     .                                   .to_name_binding(self.arenas),
     .                           )
     .                       }
     .                   })
   496 ( 0.00%)      }
     .           
     .               /// Rustdoc uses this to resolve things in a recoverable way. `ResolutionError<'a>`
     .               /// isn't something that can be returned because it can't be made to live that long,
     .               /// and also it's a private type. Fortunately rustdoc doesn't need to know the error,
     .               /// just that an error occurred.
     .               // FIXME(Manishearth): intra-doc links won't get warned of epoch changes.
     .               pub fn resolve_str_path_error(
     .                   &mut self,
-- line 3330 ----------------------------------------
-- line 3422 ----------------------------------------
     .               #[inline]
     .               pub fn opt_span(&self, def_id: DefId) -> Option<Span> {
     .                   def_id.as_local().map(|def_id| self.definitions.def_span(def_id))
     .               }
     .           
     .               /// Checks if an expression refers to a function marked with
     .               /// `#[rustc_legacy_const_generics]` and returns the argument index list
     .               /// from the attribute.
   816 ( 0.00%)      pub fn legacy_const_generic_args(&mut self, expr: &Expr) -> Option<Vec<usize>> {
   408 ( 0.00%)          if let ExprKind::Path(None, path) = &expr.kind {
     .                       // Don't perform legacy const generics rewriting if the path already
     .                       // has generic arguments.
   102 ( 0.00%)              if path.segments.last().unwrap().args.is_some() {
     .                           return None;
     .                       }
     .           
     .                       let partial_res = self.partial_res_map.get(&expr.id)?;
   200 ( 0.00%)              if partial_res.unresolved_segments() != 0 {
     .                           return None;
     .                       }
     .           
   252 ( 0.00%)              if let Res::Def(def::DefKind::Fn, def_id) = partial_res.base_res() {
     .                           // We only support cross-crate argument rewriting. Uses
     .                           // within the same crate should be updated to use the new
     .                           // const generics style.
    54 ( 0.00%)                  if def_id.is_local() {
     .                               return None;
     .                           }
     .           
     .                           if let Some(v) = self.legacy_const_generic_args.get(&def_id) {
     .                               return v.clone();
     .                           }
     .           
   120 ( 0.00%)                  let attr = self
     .                               .cstore()
    40 ( 0.00%)                      .item_attrs_untracked(def_id, self.session)
     .                               .find(|a| a.has_name(sym::rustc_legacy_const_generics))?;
     .                           let mut ret = Vec::new();
     .                           for meta in attr.meta_item_list()? {
     .                               match meta.literal()?.kind {
     .                                   LitKind::Int(a, _) => ret.push(a as usize),
     .                                   _ => panic!("invalid arg index"),
     .                               }
     .                           }
     .                           // Cache the lookup to avoid parsing attributes for an iterm multiple times.
     .                           self.legacy_const_generic_args.insert(def_id, Some(ret.clone()));
     .                           return Some(ret);
     .                       }
     .                   }
     .                   None
   918 ( 0.00%)      }
     .           
     7 ( 0.00%)      fn resolve_main(&mut self) {
     2 ( 0.00%)          let module = self.graph_root;
     .                   let ident = Ident::with_dummy_span(sym::main);
     .                   let parent_scope = &ParentScope::module(module, self);
     .           
     .                   let name_binding = match self.resolve_ident_in_module(
     .                       ModuleOrUniformRoot::Module(module),
     .                       ident,
     .                       ValueNS,
     .                       parent_scope,
-- line 3483 ----------------------------------------
-- line 3490 ----------------------------------------
     .           
     .                   let res = name_binding.res();
     .                   let is_import = name_binding.is_import();
     .                   let span = name_binding.span;
     .                   if let Res::Def(DefKind::Fn, _) = res {
     .                       self.record_use(ident, name_binding, false);
     .                   }
     .                   self.main_def = Some(MainDefinition { res, is_import, span });
     8 ( 0.00%)      }
     .           }
     .           
     .           fn names_to_string(names: &[Symbol]) -> String {
     .               let mut result = String::new();
     .               for (i, name) in names.iter().filter(|name| **name != kw::PathRoot).enumerate() {
     .                   if i > 0 {
     .                       result.push_str("::");
     .                   }
-- line 3506 ----------------------------------------
-- line 3558 ----------------------------------------
     .               /// This is the "trait item" from a fully qualified path. For example,
     .               /// we might be resolving  `X::Y::Z` from a path like `<T as X::Y>::Z`.
     .               /// The `path_span` is the span of the to the trait itself (`X::Y`).
     .               QPathTrait { qpath_id: NodeId, qpath_span: Span },
     .           }
     .           
     .           impl CrateLint {
     .               fn node_id(&self) -> Option<NodeId> {
   567 ( 0.00%)          match *self {
     .                       CrateLint::No => None,
     .                       CrateLint::SimplePath(id)
     .                       | CrateLint::UsePath { root_id: id, .. }
     .                       | CrateLint::QPathTrait { qpath_id: id, .. } => Some(id),
     .                   }
     .               }
     .           }
     .           
     .           pub fn provide(providers: &mut Providers) {
     .               late::lifetimes::provide(providers);
     1 ( 0.00%)  }

30,386 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir               

-- line 186 ----------------------------------------
      .           /// // use the values stored in map
      .           /// ```
      .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
      .               pub(crate) hash_builder: S,
      .               pub(crate) table: RawTable<(K, V), A>,
      .           }
      .           
      .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
     40 ( 0.00%)      fn clone(&self) -> Self {
    232 ( 0.00%)          HashMap {
      .                       hash_builder: self.hash_builder.clone(),
     45 ( 0.00%)              table: self.table.clone(),
      .                   }
     45 ( 0.00%)      }
      .           
      .               fn clone_from(&mut self, source: &Self) {
      .                   self.table.clone_from(&source.table);
      .           
      .                   // Update hash_builder only if we successfully cloned all elements.
      .                   self.hash_builder.clone_from(&source.hash_builder);
      .               }
      .           }
-- line 207 ----------------------------------------
-- line 210 ----------------------------------------
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash,
      .               S: BuildHasher,
      .           {
 18,108 ( 0.01%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
      .           }
      .           
      .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: ?Sized + Eq,
      .           {
 17,584 ( 0.01%)      move |x| k.eq(x.0.borrow())
      .           }
      .           
      .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: ?Sized + Eq,
      .           {
 14,747 ( 0.01%)      move |x| k.eq(x.borrow())
      .           }
      .           
      .           #[cfg(not(feature = "nightly"))]
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
      .               use core::hash::Hasher;
      .               let mut state = hash_builder.build_hasher();
      .               val.hash(&mut state);
      .               state.finish()
      .           }
      .           
      .           #[cfg(feature = "nightly")]
      .           #[cfg_attr(feature = "inline-more", inline)]
      6 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash + ?Sized,
      .               S: BuildHasher,
      .           {
      .               hash_builder.hash_one(val)
     12 ( 0.00%)  }
      .           
      .           #[cfg(not(feature = "nightly"))]
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
      .           where
      .               K: Hash,
      .               S: BuildHasher,
      .           {
-- line 274 ----------------------------------------
-- line 367 ----------------------------------------
      .               /// let s = DefaultHashBuilder::default();
      .               /// let mut map = HashMap::with_hasher(s);
      .               /// map.insert(1, 2);
      .               /// ```
      .               ///
      .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub const fn with_hasher(hash_builder: S) -> Self {
  9,417 ( 0.01%)          Self {
      .                       hash_builder,
      .                       table: RawTable::new(),
      .                   }
      .               }
      .           
      .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
      .               /// to hash the keys.
      .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
      .               /// use hashbrown::hash_map::DefaultHashBuilder;
      .               ///
      .               /// let s = DefaultHashBuilder::default();
      .               /// let mut map = HashMap::with_hasher(s);
      .               /// map.insert(1, 2);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
     61 ( 0.00%)          Self {
      .                       hash_builder,
      .                       table: RawTable::new_in(alloc),
      .                   }
      .               }
      .           
      .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
      .               /// to hash the keys. It will be allocated with the given allocator.
      .               ///
-- line 453 ----------------------------------------
-- line 663 ----------------------------------------
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// assert_eq!(a.len(), 0);
      .               /// a.insert(1, "a");
      .               /// assert_eq!(a.len(), 1);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn len(&self) -> usize {
    837 ( 0.00%)          self.table.len()
      .               }
      .           
      .               /// Returns `true` if the map contains no elements.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// assert!(a.is_empty());
      .               /// a.insert(1, "a");
      .               /// assert!(!a.is_empty());
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn is_empty(&self) -> bool {
  4,066 ( 0.00%)          self.len() == 0
      .               }
      .           
      .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
      .               /// allocated memory for reuse.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// a.insert(1, "a");
      .               /// a.clear();
      .               /// assert!(a.is_empty());
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      6 ( 0.00%)      pub fn clear(&mut self) {
      .                   self.table.clear();
      6 ( 0.00%)      }
      .           
      .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
      .               /// The map cannot be used after calling this.
      .               /// The iterator element type is `K`.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
      .               /// }
      .               ///
      .               /// assert_eq!(letters[&'s'], 2);
      .               /// assert_eq!(letters[&'t'], 3);
      .               /// assert_eq!(letters[&'u'], 1);
      .               /// assert_eq!(letters.get(&'y'), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
    276 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
      .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
      .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
      5 ( 0.00%)              Entry::Occupied(OccupiedEntry {
      .                           hash,
      .                           key: Some(key),
      .                           elem,
      .                           table: self,
      .                       })
      .                   } else {
    340 ( 0.00%)              Entry::Vacant(VacantEntry {
      .                           hash,
      .                           key,
      .                           table: self,
      .                       })
      .                   }
    345 ( 0.00%)      }
      .           
      .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
      .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
      .               /// ```
      .               #[inline]
      .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
 25,427 ( 0.01%)          match self.get_inner(k) {
      .                       Some(&(_, ref v)) => Some(v),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Returns the key-value pair corresponding to the supplied key.
      .               ///
      .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
 68,213 ( 0.04%)          if self.table.is_empty() {
      .                       None
      .                   } else {
      3 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
      .                       self.table.get(hash, equivalent_key(k))
      .                   }
      .               }
      .           
      .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
      .               ///
      .               /// The supplied key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// assert_eq!(map.contains_key(&1), true);
      .               /// assert_eq!(map.contains_key(&2), false);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
 14,642 ( 0.01%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   self.get_inner(k).is_some()
 19,568 ( 0.01%)      }
      .           
      .               /// Returns a mutable reference to the value corresponding to the key.
      .               ///
      .               /// The key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
      .               ///
      .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// if let Some(x) = map.get_mut(&1) {
      .               ///     *x = "b";
      .               /// }
      .               /// assert_eq!(map[&1], "b");
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
     25 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
     75 ( 0.00%)          match self.get_inner_mut(k) {
      .                       Some(&mut (_, ref mut v)) => Some(v),
      .                       None => None,
      .                   }
     50 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
     25 ( 0.00%)          if self.table.is_empty() {
      .                       None
      .                   } else {
      .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
      .                       self.table.get_mut(hash, equivalent_key(k))
      .                   }
      .               }
      .           
      .               /// Attempts to get mutable references to `N` values in the map at once.
-- line 1219 ----------------------------------------
-- line 1495 ----------------------------------------
      .               /// assert_eq!(map.insert(37, "a"), None);
      .               /// assert_eq!(map.is_empty(), false);
      .               ///
      .               /// map.insert(37, "b");
      .               /// assert_eq!(map.insert(37, "c"), Some("b"));
      .               /// assert_eq!(map[&37], "c");
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
422,762 ( 0.23%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
      .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
     19 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
      .                       Some(mem::replace(item, v))
      .                   } else {
264,257 ( 0.15%)              self.table
224,475 ( 0.12%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
 16,953 ( 0.01%)              None
      .                   }
377,515 ( 0.21%)      }
      .           
      .               /// Insert a key-value pair into the map without checking
      .               /// if the key already exists in the map.
      .               ///
      .               /// Returns a reference to the key and value just inserted.
      .               ///
      .               /// This operation is safe if a key does not exist in the map.
      .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// assert_eq!(map.remove(&1), Some("a"));
      .               /// assert_eq!(map.remove(&1), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
  2,329 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
 99,798 ( 0.05%)          match self.remove_entry(k) {
    984 ( 0.00%)              Some((_, v)) => Some(v),
  2,130 ( 0.00%)              None => None,
      .                   }
  5,390 ( 0.00%)      }
      .           
      .               /// Removes a key from the map, returning the stored key and value if the
      .               /// key was previously in the map.
      .               ///
      .               /// The key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
      .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
 22,811 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
      .               }
      .           }
      .           
      .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
      .               /// Creates a raw entry builder for the HashMap.
      .               ///
      .               /// Raw entries provide the lowest level of control for searching and
      .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2209 ----------------------------------------
      .               /// Creates a `RawEntryMut` from the given key and its hash.
      .               #[inline]
      .               #[allow(clippy::wrong_self_convention)]
      .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Eq,
      .               {
 96,198 ( 0.05%)          self.from_hash(hash, equivalent(k))
      .               }
      .           }
      .           
      .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
      .               /// Creates a `RawEntryMut` from the given hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
240,709 ( 0.13%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   for<'b> F: FnMut(&'b K) -> bool,
      .               {
      .                   self.search(hash, is_match)
261,617 ( 0.14%)      }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   for<'b> F: FnMut(&'b K) -> bool,
      .               {
 22,010 ( 0.01%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
111,134 ( 0.06%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
      .                           elem,
      .                           table: &mut self.map.table,
      .                           hash_builder: &self.map.hash_builder,
      .                       }),
 42,613 ( 0.02%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
      .                           table: &mut self.map.table,
      .                           hash_builder: &self.map.hash_builder,
      .                       }),
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
      .               {
      .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
      .                   self.from_key_hashed_nocheck(hash, k)
      .               }
      .           
      .               /// Access an entry by a key and its hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
 57,055 ( 0.03%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Eq,
      .               {
 74,350 ( 0.04%)          self.from_hash(hash, equivalent(k))
104,140 ( 0.06%)      }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
      .               where
      .                   F: FnMut(&K) -> bool,
      .               {
 96,137 ( 0.05%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
      .                       Some(&(ref key, ref value)) => Some((key, value)),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Access an entry by hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
      .               /// and returns a mutable reference to it.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::shadow_unrelated)]
      .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
      .               where
      .                   K: Hash,
      .                   S: BuildHasher,
      .               {
 68,556 ( 0.04%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
      .                       hash,
      .                       (key, value),
      .                       make_hasher::<K, _, V, S>(self.hash_builder),
      .                   );
      .                   (k, v)
      .               }
      .           
      .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
      .               /// map.insert("a", 1);
      .               /// map.insert("b", 2);
      .               /// map.insert("c", 3);
      .               ///
      .               /// // Not possible with .iter()
      .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
     97 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
  2,797 ( 0.00%)          IntoIter {
  1,892 ( 0.00%)              inner: self.table.into_iter(),
      .                   }
    291 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
      .               type Item = (&'a K, &'a V);
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
  5,464 ( 0.00%)          match self.inner.next() {
      .                       Some(x) => unsafe {
      .                           let r = x.as_ref();
    102 ( 0.00%)                  Some((&r.0, &r.1))
      .                       },
      .                       None => None,
      .                   }
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
-- line 3006 ----------------------------------------
-- line 3051 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
      .               type Item = (K, V);
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<(K, V)> {
     92 ( 0.00%)          self.inner.next()
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
      .                   f.debug_list().entries(self.iter()).finish()
      .               }
      .           }
      .           
      .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
      .               type Item = &'a K;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      5 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
      .                   match self.inner.next() {
      .                       Some((k, _)) => Some(k),
      .                       None => None,
      .                   }
     10 ( 0.00%)      }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 3819 ----------------------------------------
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn insert(self, value: V) -> &'a mut V
      .               where
      .                   K: Hash,
      .                   S: BuildHasher,
      .               {
      .                   let table = &mut self.table.table;
     28 ( 0.00%)          let entry = table.insert_entry(
      .                       self.hash,
      .                       (self.key, value),
      .                       make_hasher::<K, _, V, S>(&self.table.hash_builder),
      .                   );
      .                   &mut entry.1
      .               }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3835 ----------------------------------------
-- line 4557 ----------------------------------------
      .           /// keys with new values returned from the iterator.
      .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
      .           where
      .               K: Eq + Hash,
      .               S: BuildHasher,
      .               A: Allocator + Clone,
      .           {
      .               #[cfg_attr(feature = "inline-more", inline)]
  1,929 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
      .                   // Keys may be already present or show multiple times in the iterator.
      .                   // Reserve the entire hint lower bound if the map is empty.
      .                   // Otherwise reserve half the hint (rounded up), so the map
      .                   // will only resize twice in the worst case.
  1,629 ( 0.00%)          let iter = iter.into_iter();
    842 ( 0.00%)          let reserve = if self.is_empty() {
      .                       iter.size_hint().0
      .                   } else {
     51 ( 0.00%)              (iter.size_hint().0 + 1) / 2
      .                   };
      .                   self.reserve(reserve);
      .                   iter.for_each(move |(k, v)| {
 15,843 ( 0.01%)              self.insert(k, v);
      .                   });
  1,127 ( 0.00%)      }
      .           
      .               #[inline]
      .               #[cfg(feature = "nightly")]
      .               fn extend_one(&mut self, (k, v): (K, V)) {
      .                   self.insert(k, v);
      .               }
      .           
      .               #[inline]
-- line 4588 ----------------------------------------

125,624 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir              

-- line 108 ----------------------------------------
     .                   suppress_errors: bool,
     .               },
     .           }
     .           
     .           impl RegionckMode {
     .               /// Indicates that the MIR borrowck will repeat these region
     .               /// checks, so we should ignore errors if NLL is (unconditionally)
     .               /// enabled.
    24 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
     .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
     .                   // this always `true` and then proceed to eliminate the dead code.
    24 ( 0.00%)          match tcx.borrowck_mode() {
     .                       // If we're on Migrate mode, report AST region errors
     .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
     .           
     .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
     .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
     .                   }
    48 ( 0.00%)      }
     .           }
     .           
     .           /// This type contains all the things within `InferCtxt` that sit within a
     .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
     .           /// operations are hot enough that we want only one call to `borrow_mut` per
     .           /// call to `start_snapshot` and `rollback_to`.
     .           pub struct InferCtxtInner<'tcx> {
     .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
     .               /// type instantiations (`ty::Infer`) to the actual opaque
     .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
     .               /// opaque type inference variables to their corresponding
     .               /// opaque type.
     .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
     .           }
     .           
     .           impl<'tcx> InferCtxtInner<'tcx> {
 5,420 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
36,856 ( 0.02%)          InferCtxtInner {
     .                       projection_cache: Default::default(),
     .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
     .                       undo_log: InferCtxtUndoLogs::default(),
     .                       const_unification_storage: ut::UnificationTableStorage::new(),
     .                       int_unification_storage: ut::UnificationTableStorage::new(),
     .                       float_unification_storage: ut::UnificationTableStorage::new(),
 3,252 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
     .                       region_obligations: vec![],
     .                       opaque_types: Default::default(),
     .                       opaque_types_vars: Default::default(),
     .                   }
 6,504 ( 0.00%)      }
     .           
     .               #[inline]
     .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
     .                   &self.region_obligations
     .               }
     .           
     .               #[inline]
     .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
   128 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
     .               }
     .           
     .               #[inline]
     .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
12,960 ( 0.01%)          self.type_variable_storage.with_log(&mut self.undo_log)
     .               }
     .           
     .               #[inline]
     .               fn int_unification_table(
     .                   &mut self,
     .               ) -> ut::UnificationTable<
     .                   ut::InPlace<
     .                       ty::IntVid,
-- line 245 ----------------------------------------
-- line 268 ----------------------------------------
     .                   &mut self,
     .               ) -> ut::UnificationTable<
     .                   ut::InPlace<
     .                       ty::ConstVid<'tcx>,
     .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
     .                       &mut InferCtxtUndoLogs<'tcx>,
     .                   >,
     .               > {
    47 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
     .               }
     .           
     .               #[inline]
     .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
 3,242 ( 0.00%)          self.region_constraint_storage
     .                       .as_mut()
     .                       .expect("region constraints already solved")
 4,022 ( 0.00%)              .with_log(&mut self.undo_log)
     .               }
     .           }
     .           
     .           pub struct InferCtxt<'a, 'tcx> {
     .               pub tcx: TyCtxt<'tcx>,
     .           
     .               /// The `DefId` of the item in whose context we are performing inference or typeck.
     .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
     .               /// item we are type-checking, and just consider those names as
     .               /// part of the root universe. So this would only get incremented
     .               /// when we enter into a higher-ranked (`for<..>`) type or trait
     .               /// bound.
     .               universe: Cell<ty::UniverseIndex>,
     .           }
     .           
     .           /// See the `error_reporting` module for more details.
 3,968 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
     .           pub enum ValuePairs<'tcx> {
     .               Types(ExpectedFound<Ty<'tcx>>),
     .               Regions(ExpectedFound<ty::Region<'tcx>>),
     .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
     .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
     .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
     .           }
     .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
     .           pub struct TypeTrace<'tcx> {
     .               cause: ObligationCause<'tcx>,
     .               values: ValuePairs<'tcx>,
     .           }
     .           
     .           /// The origin of a `r1 <= r2` constraint.
     .           ///
     .           /// See `error_reporting` module for more details
 4,009 ( 0.00%)  #[derive(Clone, Debug)]
     .           pub enum SubregionOrigin<'tcx> {
     .               /// Arose from a subtyping relation
   238 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
     .           
     .               /// When casting `&'a T` to an `&'b Trait` object,
     .               /// relating `'a` to `'b`
     .               RelateObjectBound(Span),
     .           
     .               /// Some type parameter was instantiated with the given type,
     .               /// and that type must outlive some region.
    27 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
     .           
     .               /// The given region parameter was instantiated with a region
     .               /// that must outlive some other region.
     .               RelateRegionParamBound(Span),
     .           
     .               /// Creating a pointer `b` to contents of another reference
     .               Reborrow(Span),
     .           
     .               /// Creating a pointer `b` to contents of an upvar
     .               ReborrowUpvar(Span, ty::UpvarId),
     .           
     .               /// Data with type `Ty<'tcx>` was borrowed
    27 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
     .           
     .               /// (&'a &'b T) where a >= b
    18 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
     .           
     .               /// Comparing the signature and requirements of an impl method against
     .               /// the containing trait.
     .               CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
     .           
     .               /// Comparing the signature and requirements of an impl associated type
     .               /// against the containing trait
     .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
-- line 426 ----------------------------------------
-- line 554 ----------------------------------------
     .               defining_use_anchor: Option<LocalDefId>,
     .           }
     .           
     .           pub trait TyCtxtInferExt<'tcx> {
     .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
     .           }
     .           
     .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
 1,084 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
 3,252 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
 1,084 ( 0.00%)      }
     .           }
     .           
     .           impl<'tcx> InferCtxtBuilder<'tcx> {
     .               /// Used only by `rustc_typeck` during body type-checking/inference,
     .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
     .               /// Will also change the scope for opaque type defining use checks to the given owner.
   585 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
   715 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
   325 ( 0.00%)          self.with_opaque_type_inference(table_owner)
   455 ( 0.00%)      }
     .           
     .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
     .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
     .               ///
     .               /// It is only meant to be called in two places, for typeck
     .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
     .               /// in mir borrowck.
    64 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
    32 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
   194 ( 0.00%)          self
    96 ( 0.00%)      }
     .           
     .               /// Given a canonical value `C` as a starting point, create an
     .               /// inference context that contains each of the bound values
     .               /// within instantiated as a fresh variable. The `f` closure is
     .               /// invoked with the new infcx, along with the instantiated value
     .               /// `V` and a substitution `S`. This substitution `S` maps from
     .               /// the bound values in `C` to their instantiated values in `V`
     .               /// (in other words, `S(C) = V`).
 2,846 ( 0.00%)      pub fn enter_with_canonical<T, R>(
     .                   &mut self,
     .                   span: Span,
     .                   canonical: &Canonical<'tcx, T>,
     .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
     .               ) -> R
     .               where
     .                   T: TypeFoldable<'tcx>,
     .               {
     .                   self.enter(|infcx| {
 3,546 ( 0.00%)              let (value, subst) =
   225 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
 5,382 ( 0.00%)              f(infcx, value, subst)
     .                   })
 3,087 ( 0.00%)      }
     .           
 4,579 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
 3,030 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
     .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
45,300 ( 0.02%)          f(InferCtxt {
     .                       tcx,
     .                       defining_use_anchor,
     .                       in_progress_typeck_results,
 1,084 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
     .                       lexical_region_resolutions: RefCell::new(None),
     .                       selection_cache: Default::default(),
     .                       evaluation_cache: Default::default(),
     .                       reported_trait_errors: Default::default(),
     .                       reported_closure_mismatch: Default::default(),
     .                       tainted_by_errors_flag: Cell::new(false),
 1,084 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
     .                       in_snapshot: Cell::new(false),
     .                       skip_leak_check: Cell::new(false),
     .                       universe: Cell::new(ty::UniverseIndex::ROOT),
     .                   })
 4,890 ( 0.00%)      }
     .           }
     .           
     .           impl<'tcx, T> InferOk<'tcx, T> {
     .               pub fn unit(self) -> InferOk<'tcx, ()> {
     .                   InferOk { value: (), obligations: self.obligations }
     .               }
     .           
     .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
     .               pub fn into_value_registering_obligations(
     .                   self,
     .                   infcx: &InferCtxt<'_, 'tcx>,
     .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
     .               ) -> T {
    55 ( 0.00%)          let InferOk { value, obligations } = self;
   232 ( 0.00%)          for obligation in obligations {
     .                       fulfill_cx.register_predicate_obligation(infcx, obligation);
     .                   }
     .                   value
     .               }
     .           }
     .           
     .           impl<'tcx> InferOk<'tcx, ()> {
   413 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
 1,652 ( 0.00%)          self.obligations
   413 ( 0.00%)      }
     .           }
     .           
     .           #[must_use = "once you start a snapshot, you should always consume it"]
     .           pub struct CombinedSnapshot<'a, 'tcx> {
     .               undo_snapshot: Snapshot<'tcx>,
     .               region_constraints_snapshot: RegionSnapshot,
     .               universe: ty::UniverseIndex,
     .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
     .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
     .                   debug!("canonical consts: {:?}", &canonical.value);
     .           
     .                   self.tcx.try_unify_abstract_consts(canonical.value)
     .               }
     .           
     .               pub fn is_in_snapshot(&self) -> bool {
     .                   self.in_snapshot.get()
   923 ( 0.00%)      }
     .           
 7,104 ( 0.00%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
 7,992 ( 0.00%)          t.fold_with(&mut self.freshener())
 7,992 ( 0.00%)      }
     .           
     .               /// Returns the origin of the type variable identified by `vid`, or `None`
     .               /// if this is not a type variable.
     .               ///
     .               /// No attempt is made to resolve `ty`.
    16 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
    32 ( 0.00%)          match *ty.kind() {
     8 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
    32 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
     .                       }
     .                       _ => None,
     .                   }
    32 ( 0.00%)      }
     .           
   888 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
     .                   freshen::TypeFreshener::new(self, false)
   888 ( 0.00%)      }
     .           
     .               /// Like `freshener`, but does not replace `'static` regions.
 3,669 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
     .                   freshen::TypeFreshener::new(self, true)
 3,669 ( 0.00%)      }
     .           
   116 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
    58 ( 0.00%)          let mut inner = self.inner.borrow_mut();
    58 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
     .                       .type_variables()
     .                       .unsolved_variables()
     .                       .into_iter()
    16 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
     .                       .collect();
     .                   vars.extend(
     .                       (0..inner.int_unification_table().len())
     .                           .map(|i| ty::IntVid { index: i as u32 })
     .                           .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
     .                           .map(|v| self.tcx.mk_int_var(v)),
     .                   );
     .                   vars.extend(
     .                       (0..inner.float_unification_table().len())
     .                           .map(|i| ty::FloatVid { index: i as u32 })
     .                           .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
     .                           .map(|v| self.tcx.mk_float_var(v)),
     .                   );
     .                   vars
   203 ( 0.00%)      }
     .           
 1,366 ( 0.00%)      fn combine_fields(
     .                   &'a self,
     .                   trace: TypeTrace<'tcx>,
     .                   param_env: ty::ParamEnv<'tcx>,
     .               ) -> CombineFields<'a, 'tcx> {
 5,504 ( 0.00%)          CombineFields {
     .                       infcx: self,
13,760 ( 0.01%)              trace,
     .                       cause: None,
     .                       param_env,
     .                       obligations: PredicateObligations::new(),
     .                   }
 1,366 ( 0.00%)      }
     .           
     .               /// Clear the "currently in a snapshot" flag, invoke the closure,
     .               /// then restore the flag to its original value. This flag is a
     .               /// debugging measure designed to detect cases where we start a
     .               /// snapshot, create type variables, and register obligations
     .               /// which may involve those type variables in the fulfillment cx,
     .               /// potentially leaving "dangling type variables" behind.
     .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 755 ----------------------------------------
     .               /// better than grovelling through megabytes of `RUSTC_LOG` output.
     .               ///
     .               /// HOWEVER, in some cases the flag is unhelpful. In particular, we
     .               /// sometimes create a "mini-fulfilment-cx" in which we enroll
     .               /// obligations. As long as this fulfillment cx is fully drained
     .               /// before we return, this is not a problem, as there won't be any
     .               /// escaping obligations in the main cx. In those cases, you can
     .               /// use this function.
     8 ( 0.00%)      pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
     .               where
     .                   F: FnOnce(&Self) -> R,
     .               {
     .                   let flag = self.in_snapshot.replace(false);
   285 ( 0.00%)          let result = func(self);
     .                   self.in_snapshot.set(flag);
     .                   result
     9 ( 0.00%)      }
     .           
 8,062 ( 0.00%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
     .                   debug!("start_snapshot()");
     .           
     .                   let in_snapshot = self.in_snapshot.replace(true);
     .           
     .                   let mut inner = self.inner.borrow_mut();
     .           
24,186 ( 0.01%)          CombinedSnapshot {
     .                       undo_snapshot: inner.undo_log.start_snapshot(),
     .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
     .                       universe: self.universe(),
     .                       was_in_snapshot: in_snapshot,
     .                       // Borrow typeck results "in progress" (i.e., during typeck)
     .                       // to ban writes from within a snapshot to them.
 4,031 ( 0.00%)              _in_progress_typeck_results: self
     .                           .in_progress_typeck_results
     .                           .map(|typeck_results| typeck_results.borrow()),
     .                   }
16,124 ( 0.01%)      }
     .           
16,610 ( 0.01%)      #[instrument(skip(self, snapshot), level = "debug")]
     .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
     .                   let CombinedSnapshot {
 1,510 ( 0.00%)              undo_snapshot,
 1,510 ( 0.00%)              region_constraints_snapshot,
 1,510 ( 0.00%)              universe,
 1,510 ( 0.00%)              was_in_snapshot,
 3,020 ( 0.00%)              _in_progress_typeck_results,
     .                   } = snapshot;
     .           
     .                   self.in_snapshot.set(was_in_snapshot);
     .                   self.universe.set(universe);
     .           
     .                   let mut inner = self.inner.borrow_mut();
 1,510 ( 0.00%)          inner.rollback_to(undo_snapshot);
     .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
     .               }
     .           
37,815 ( 0.02%)      #[instrument(skip(self, snapshot), level = "debug")]
     .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
     .                   let CombinedSnapshot {
 2,521 ( 0.00%)              undo_snapshot,
     .                       region_constraints_snapshot: _,
     .                       universe: _,
 2,521 ( 0.00%)              was_in_snapshot,
 5,042 ( 0.00%)              _in_progress_typeck_results,
     .                   } = snapshot;
     .           
     .                   self.in_snapshot.set(was_in_snapshot);
     .           
     .                   self.inner.borrow_mut().commit(undo_snapshot);
     .               }
     .           
     .               /// Executes `f` and commit the bindings.
 2,451 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
 3,025 ( 0.00%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
     .               where
     .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
     .               {
   275 ( 0.00%)          let snapshot = self.start_snapshot();
   959 ( 0.00%)          let r = f(&snapshot);
 1,925 ( 0.00%)          self.commit_from(snapshot);
 1,612 ( 0.00%)          r
     .               }
     .           
     .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
15,492 ( 0.01%)      #[instrument(skip(self, f), level = "debug")]
19,087 ( 0.01%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
     .               where
     .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
     .               {
 2,850 ( 0.00%)          let snapshot = self.start_snapshot();
 8,792 ( 0.00%)          let r = f(&snapshot);
     .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
 2,760 ( 0.00%)          match r {
     .                       Ok(_) => {
16,085 ( 0.01%)                  self.commit_from(snapshot);
     .                       }
     .                       Err(_) => {
 3,692 ( 0.00%)                  self.rollback_to("commit_if_ok -- error", snapshot);
     .                       }
     .                   }
15,802 ( 0.01%)          r
     .               }
     .           
     .               /// Execute `f` then unroll any bindings it creates.
 8,825 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
10,089 ( 0.01%)      pub fn probe<R, F>(&self, f: F) -> R
     .               where
     .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
     .               {
 2,212 ( 0.00%)          let snapshot = self.start_snapshot();
 3,184 ( 0.00%)          let r = f(&snapshot);
10,314 ( 0.01%)          self.rollback_to("probe", snapshot);
 1,091 ( 0.00%)          r
     .               }
     .           
     .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
     .               #[instrument(skip(self, f), level = "debug")]
     .               pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
     .               where
     .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
     .               {
-- line 875 ----------------------------------------
-- line 884 ----------------------------------------
     .                   r
     .               }
     .           
     .               /// Scan the constraints produced since `snapshot` began and returns:
     .               ///
     .               /// - `None` -- if none of them involve "region outlives" constraints
     .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
     .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
 1,074 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
     .                   &self,
     .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
     .               ) -> Option<bool> {
 2,148 ( 0.00%)          self.inner
     .                       .borrow_mut()
     .                       .unwrap_region_constraints()
     .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
 1,611 ( 0.00%)      }
     .           
     .               pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
     .                   self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
     .               }
     .           
    12 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
     .               where
     .                   T: at::ToTrace<'tcx>,
     .               {
     .                   let origin = &ObligationCause::dummy();
     .                   self.probe(|_| {
     .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
     .                           // Ignore obligations, since we are unrolling
     .                           // everything anyway.
     .                       })
     .                   })
     9 ( 0.00%)      }
     .           
   120 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
     .               where
     .                   T: at::ToTrace<'tcx>,
     .               {
     .                   let origin = &ObligationCause::dummy();
     .                   self.probe(|_| {
     .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
     .                           // Ignore obligations, since we are unrolling
     .                           // everything anyway.
     .                       })
     .                   })
    90 ( 0.00%)      }
     .           
 1,370 ( 0.00%)      #[instrument(skip(self), level = "debug")]
     .               pub fn sub_regions(
     .                   &self,
     .                   origin: SubregionOrigin<'tcx>,
     .                   a: ty::Region<'tcx>,
     .                   b: ty::Region<'tcx>,
     .               ) {
 1,233 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
     .               }
     .           
     .               /// Require that the region `r` be equal to one of the regions in
     .               /// the set `regions`.
     .               #[instrument(skip(self), level = "debug")]
     .               pub fn member_constraint(
     .                   &self,
     .                   opaque_type_def_id: DefId,
-- line 947 ----------------------------------------
-- line 969 ----------------------------------------
     .               /// to `subtype_predicate` -- that is, "coercing" `a` to `b` winds up
     .               /// actually requiring `a <: b`. This is of course a valid coercion,
     .               /// but it's not as flexible as `FnCtxt::coerce` would be.
     .               ///
     .               /// (We may refactor this in the future, but there are a number of
     .               /// practical obstacles. Among other things, `FnCtxt::coerce` presently
     .               /// records adjustments that are required on the HIR in order to perform
     .               /// the coercion, and we don't currently have a way to manage that.)
    18 ( 0.00%)      pub fn coerce_predicate(
     .                   &self,
     .                   cause: &ObligationCause<'tcx>,
     .                   param_env: ty::ParamEnv<'tcx>,
     .                   predicate: ty::PolyCoercePredicate<'tcx>,
     .               ) -> Option<InferResult<'tcx, ()>> {
    12 ( 0.00%)          let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
     .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
     .                       a: p.a,
     .                       b: p.b,
     .                   });
    30 ( 0.00%)          self.subtype_predicate(cause, param_env, subtype_predicate)
    24 ( 0.00%)      }
     .           
   312 ( 0.00%)      pub fn subtype_predicate(
     .                   &self,
     .                   cause: &ObligationCause<'tcx>,
     .                   param_env: ty::ParamEnv<'tcx>,
     .                   predicate: ty::PolySubtypePredicate<'tcx>,
     .               ) -> Option<InferResult<'tcx, ()>> {
     .                   // Check for two unresolved inference variables, in which case we can
     .                   // make no progress. This is partly a micro-optimization, but it's
     .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
     .                   // earlier that they are sub-unified).
     .                   //
     .                   // Note that we can just skip the binders here because
     .                   // type variables can't (at present, at
     .                   // least) capture any of the things bound by this binder.
     .                   //
     .                   // Note that this sub here is not just for diagnostics - it has semantic
     .                   // effects as well.
    26 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
    26 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
   164 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
    32 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
     .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
    32 ( 0.00%)                  return None;
     .                       }
     .                       _ => {}
     .                   }
     .           
     .                   Some(self.commit_if_ok(|_snapshot| {
    10 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
     .                           self.replace_bound_vars_with_placeholders(predicate);
     .           
    20 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
     .           
     .                       Ok(ok.unit())
     .                   }))
   234 ( 0.00%)      }
     .           
   492 ( 0.00%)      pub fn region_outlives_predicate(
     .                   &self,
     .                   cause: &traits::ObligationCause<'tcx>,
     .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
     .               ) -> UnitResult<'tcx> {
     .                   self.commit_if_ok(|_snapshot| {
     .                       let ty::OutlivesPredicate(r_a, r_b) =
     .                           self.replace_bound_vars_with_placeholders(predicate);
     .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
     .                           RelateRegionParamBound(cause.span)
     .                       });
   410 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
     .                       Ok(())
     .                   })
   328 ( 0.00%)      }
     .           
     .               /// Number of type variables created so far.
     5 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
     .                   self.inner.borrow_mut().type_variables().num_vars()
    10 ( 0.00%)      }
     .           
   544 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
 2,720 ( 0.00%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
   816 ( 0.00%)      }
     .           
   526 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
 1,895 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
   789 ( 0.00%)      }
     .           
    96 ( 0.00%)      pub fn next_ty_var_in_universe(
     .                   &self,
     .                   origin: TypeVariableOrigin,
     .                   universe: ty::UniverseIndex,
     .               ) -> Ty<'tcx> {
   528 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
    48 ( 0.00%)          self.tcx.mk_ty_var(vid)
   144 ( 0.00%)      }
     .           
     .               pub fn next_const_var(
     .                   &self,
     .                   ty: Ty<'tcx>,
     .                   origin: ConstVariableOrigin,
     .               ) -> &'tcx ty::Const<'tcx> {
     .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
     .               }
-- line 1074 ----------------------------------------
-- line 1108 ----------------------------------------
     .           
     .               pub fn next_float_var(&self) -> Ty<'tcx> {
     .                   self.tcx.mk_float_var(self.next_float_var_id())
     .               }
     .           
     .               /// Creates a fresh region variable with the next available index.
     .               /// The variable will be created in the maximum universe created
     .               /// thus far, allowing it to name any region created thus far.
   224 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
 5,497 ( 0.00%)          self.next_region_var_in_universe(origin, self.universe())
   448 ( 0.00%)      }
     .           
     .               /// Creates a fresh region variable with the next available index
     .               /// in the given universe; typically, you can use
     .               /// `next_region_var` and just use the maximal universe.
 2,466 ( 0.00%)      pub fn next_region_var_in_universe(
     .                   &self,
     .                   origin: RegionVariableOrigin,
     .                   universe: ty::UniverseIndex,
     .               ) -> ty::Region<'tcx> {
     .                   let region_var =
16,029 ( 0.01%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
 6,165 ( 0.00%)          self.tcx.mk_region(ty::ReVar(region_var))
 3,699 ( 0.00%)      }
     .           
     .               /// Return the universe that the region `r` was created in.  For
     .               /// most regions (e.g., `'static`, named regions from the user,
     .               /// etc) this is the root universe U0. For inference variables or
     .               /// placeholders, however, it will return the universe which which
     .               /// they are associated.
   284 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
     .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
   426 ( 0.00%)      }
     .           
     .               /// Number of region variables created so far.
   272 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
     .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
   408 ( 0.00%)      }
     .           
     .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
   500 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
     .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
 1,000 ( 0.00%)      }
     .           
     .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
     2 ( 0.00%)      pub fn next_nll_region_var_in_universe(
     .                   &self,
     .                   origin: NllRegionVariableOrigin,
     .                   universe: ty::UniverseIndex,
     .               ) -> ty::Region<'tcx> {
    22 ( 0.00%)          self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
     4 ( 0.00%)      }
     .           
 5,768 ( 0.00%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
 3,237 ( 0.00%)          match param.kind {
     .                       GenericParamDefKind::Lifetime => {
     .                           // Create a region inference variable for the given
     .                           // region parameter definition.
   184 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
     .                       }
     .                       GenericParamDefKind::Type { .. } => {
     .                           // Create a type inference variable for the given
     .                           // type parameter definition. The substitutions are
     .                           // for actual parameters that may be referred to by
     .                           // the default of this type parameter, if it exists.
     .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
     .                           // used in a path such as `Foo::<T, U>::new()` will
     .                           // use an inference variable for `C` with `[T, U]`
     .                           // as the substitutions for the default, `(T, U)`.
 2,148 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
     .                               self.universe(),
 2,685 ( 0.00%)                      TypeVariableOrigin {
     .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
   537 ( 0.00%)                              param.name,
   537 ( 0.00%)                              Some(param.def_id),
     .                                   ),
     .                                   span,
     .                               },
     .                           );
     .           
   537 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
     .                       }
     .                       GenericParamDefKind::Const { .. } => {
     .                           let origin = ConstVariableOrigin {
     .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
     .                                   param.name,
     .                                   param.def_id,
     .                               ),
     .                               span,
-- line 1196 ----------------------------------------
-- line 1202 ----------------------------------------
     .                               });
     .                           self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
     .                       }
     .                   }
     .               }
     .           
     .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
     .               /// type/region parameter to a fresh inference variable.
 1,227 ( 0.00%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
 5,644 ( 0.00%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
   818 ( 0.00%)      }
     .           
     .               /// Returns `true` if errors have been reported since this infcx was
     .               /// created. This is sometimes used as a heuristic to skip
     .               /// reporting errors that often occur as a result of earlier
     .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
     .               /// inference variables, regionck errors).
    64 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
     .                   debug!(
     .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
     .                        tainted_by_errors_flag={})",
     .                       self.tcx.sess.err_count(),
     .                       self.err_count_on_creation,
     .                       self.tainted_by_errors_flag.get()
     .                   );
     .           
 2,336 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
     .                       return true; // errors reported since this infcx was made
     .                   }
     .                   self.tainted_by_errors_flag.get()
    96 ( 0.00%)      }
     .           
     .               /// Set the "tainted by errors" flag to true. We call this when we
     .               /// observe an error from a prior pass.
     .               pub fn set_tainted_by_errors(&self) {
     .                   debug!("set_tainted_by_errors()");
     .                   self.tainted_by_errors_flag.set(true)
     .               }
     .           
     .               /// Process the region constraints and return any any errors that
     .               /// result. After this, no more unification operations should be
     .               /// done -- or the compiler will panic -- but it is legal to use
     .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
 2,464 ( 0.00%)      pub fn resolve_regions(
     .                   &self,
     .                   region_context: DefId,
     .                   outlives_env: &OutlivesEnvironment<'tcx>,
     .                   mode: RegionckMode,
     .               ) -> Vec<RegionResolutionError<'tcx>> {
 6,688 ( 0.00%)          let (var_infos, data) = {
     .                       let mut inner = self.inner.borrow_mut();
     .                       let inner = &mut *inner;
   352 ( 0.00%)              assert!(
 1,056 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
     .                           "region_obligations not empty: {:#?}",
     .                           inner.region_obligations
     .                       );
     .                       inner
     .                           .region_constraint_storage
     .                           .take()
     .                           .expect("regions already resolved")
     .                           .with_log(&mut inner.undo_log)
     .                           .into_infos_and_data()
   352 ( 0.00%)          };
     .           
     .                   let region_rels =
   352 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
     .           
 3,168 ( 0.00%)          let (lexical_region_resolutions, errors) =
 8,448 ( 0.00%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
     .           
 1,408 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
   352 ( 0.00%)          assert!(old_value.is_none());
     .           
     .                   errors
 3,168 ( 0.00%)      }
     .           
     .               /// Process the region constraints and report any errors that
     .               /// result. After this, no more unification operations should be
     .               /// done -- or the compiler will panic -- but it is legal to use
     .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
 3,520 ( 0.00%)      pub fn resolve_regions_and_report_errors(
     .                   &self,
     .                   region_context: DefId,
     .                   outlives_env: &OutlivesEnvironment<'tcx>,
     .                   mode: RegionckMode,
     .               ) {
   704 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
     .           
 1,056 ( 0.00%)          if !self.is_tainted_by_errors() {
     .                       // As a heuristic, just skip reporting region errors
     .                       // altogether if other errors have been reported while
     .                       // this infcx was in use.  This is totally hokey but
     .                       // otherwise we have a hard time separating legit region
     .                       // errors from silly ones.
   704 ( 0.00%)              self.report_region_errors(&errors);
     .                   }
 1,760 ( 0.00%)      }
     .           
     .               /// Obtains (and clears) the current set of region
     .               /// constraints. The inference context is still usable: further
     .               /// unifications will simply add new constraints.
     .               ///
     .               /// This method is not meant to be used with normal lexical region
     .               /// resolution. Rather, it is used in the NLL mode as a kind of
     .               /// interim hack: basically we run normal type-check and generate
-- line 1307 ----------------------------------------
-- line 1319 ----------------------------------------
     .               }
     .           
     .               /// Gives temporary access to the region constraint data.
     .               pub fn with_region_constraints<R>(
     .                   &self,
     .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
     .               ) -> R {
     .                   let mut inner = self.inner.borrow_mut();
 1,020 ( 0.00%)          op(inner.unwrap_region_constraints().data())
     .               }
     .           
     .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
     .                   let mut inner = self.inner.borrow_mut();
     .                   let inner = &mut *inner;
     .                   inner
     .                       .region_constraint_storage
     .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
     .                       .var_origin(vid)
     .               }
     .           
     .               /// Takes ownership of the list of variable regions. This implies
     .               /// that all the region constraints have already been taken, and
     .               /// hence that `resolve_regions_and_report_errors` can never be
     .               /// called. This is used only during NLL processing to "hand off" ownership
     .               /// of the set of region variables into the NLL region context.
   160 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
     .                   let mut inner = self.inner.borrow_mut();
   608 ( 0.00%)          let (var_infos, data) = inner
     .                       .region_constraint_storage
     .                       .take()
     .                       .expect("regions already resolved")
     .                       .with_log(&mut inner.undo_log)
    32 ( 0.00%)              .into_infos_and_data();
    32 ( 0.00%)          assert!(data.is_empty());
     .                   var_infos
   256 ( 0.00%)      }
     .           
     .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
     .                   self.resolve_vars_if_possible(t).to_string()
     .               }
     .           
     .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
     .               /// universe index of `TyVar(vid)`.
   312 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
     .                   use self::type_variable::TypeVariableValue;
     .           
   936 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
     .                       TypeVariableValue::Known { value } => Ok(value),
     .                       TypeVariableValue::Unknown { universe } => Err(universe),
     .                   }
 1,092 ( 0.00%)      }
     .           
     .               /// Resolve any type variables found in `value` -- but only one
     .               /// level.  So, if the variable `?X` is bound to some type
     .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
     .               /// itself be bound to a type).
     .               ///
     .               /// Useful when you only need to inspect the outermost level of
     .               /// the type and don't care about nested types (or perhaps you
     .               /// will be resolving them as well, e.g. in a loop).
     .               pub fn shallow_resolve<T>(&self, value: T) -> T
     .               where
     .                   T: TypeFoldable<'tcx>,
     .               {
 5,998 ( 0.00%)          value.fold_with(&mut ShallowResolver { infcx: self })
     .               }
     .           
   472 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
     .                   self.inner.borrow_mut().type_variables().root_var(var)
   708 ( 0.00%)      }
     .           
     .               /// Where possible, replaces type/const variables in
     .               /// `value` with their final value. Note that region variables
     .               /// are unaffected. If a type/const variable has not been unified, it
     .               /// is left as is. This is an idempotent operation that does
     .               /// not affect inference state in any way and so you can do it
     .               /// at will.
     4 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
     .               where
     .                   T: TypeFoldable<'tcx>,
     .               {
 5,401 ( 0.00%)          if !value.needs_infer() {
 6,864 ( 0.00%)              return value; // Avoid duplicated subst-folding.
     .                   }
 5,607 ( 0.00%)          let mut r = resolve::OpportunisticVarResolver::new(self);
 7,083 ( 0.00%)          value.fold_with(&mut r)
     5 ( 0.00%)      }
     .           
     .               /// Returns the first unresolved variable contained in `T`. In the
     .               /// process of visiting `T`, this will resolve (where possible)
     .               /// type variables in `T`, but it never constructs the final,
     .               /// resolved type, so it's more efficient than
     .               /// `resolve_vars_if_possible()`.
     .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
     .               where
-- line 1415 ----------------------------------------
-- line 1490 ----------------------------------------
     .                   expected: &'tcx ty::Const<'tcx>,
     .                   actual: &'tcx ty::Const<'tcx>,
     .                   err: TypeError<'tcx>,
     .               ) -> DiagnosticBuilder<'tcx> {
     .                   let trace = TypeTrace::consts(cause, true, expected, actual);
     .                   self.report_and_explain_type_error(trace, &err)
     .               }
     .           
   558 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
     .                   &self,
     .                   span: Span,
     .                   lbrct: LateBoundRegionConversionTime,
     .                   value: ty::Binder<'tcx, T>,
     .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
     .               where
     .                   T: TypeFoldable<'tcx>,
     .               {
     .                   let fld_r =
 2,023 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
     .                   let fld_t = |_| {
     .                       self.next_ty_var(TypeVariableOrigin {
     .                           kind: TypeVariableOriginKind::MiscVariable,
     .                           span,
     .                       })
     .                   };
     .                   let fld_c = |_, ty| {
     .                       self.next_const_var(
     .                           ty,
     .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
     .                       )
     .                   };
 5,590 ( 0.00%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
   372 ( 0.00%)      }
     .           
     .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
     .               pub fn verify_generic_bound(
     .                   &self,
     .                   origin: SubregionOrigin<'tcx>,
     .                   kind: GenericKind<'tcx>,
     .                   a: ty::Region<'tcx>,
     .                   bound: VerifyBound<'tcx>,
-- line 1530 ----------------------------------------
-- line 1535 ----------------------------------------
     .                       .borrow_mut()
     .                       .unwrap_region_constraints()
     .                       .verify_generic_bound(origin, kind, a, bound);
     .               }
     .           
     .               /// Obtains the latest type of the given closure; this may be a
     .               /// closure in the current function, in which case its
     .               /// `ClosureKind` may not yet be known.
   108 ( 0.00%)      pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
   216 ( 0.00%)          let closure_kind_ty = closure_substs.as_closure().kind_ty();
     .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
   162 ( 0.00%)          closure_kind_ty.to_opt_closure_kind()
     .               }
     .           
     .               /// Clears the selection, evaluation, and projection caches. This is useful when
     .               /// repeatedly attempting to select an `Obligation` while changing only
     .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
     .               pub fn clear_caches(&self) {
     .                   self.selection_cache.clear();
     .                   self.evaluation_cache.clear();
     .                   self.inner.borrow_mut().projection_cache().clear();
     .               }
     .           
     .               pub fn universe(&self) -> ty::UniverseIndex {
10,484 ( 0.01%)          self.universe.get()
 3,231 ( 0.00%)      }
     .           
     .               /// Creates and return a fresh universe that extends all previous
     .               /// universes. Updates `self.universe` to that new universe.
     .               pub fn create_next_universe(&self) -> ty::UniverseIndex {
     .                   let u = self.universe.get().next_universe();
     .                   self.universe.set(u);
     .                   u
     .               }
-- line 1568 ----------------------------------------
-- line 1606 ----------------------------------------
     .                   // variables, thus we don't need to substitute back the original values.
     .                   self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
     .               }
     .           
     .               /// If `typ` is a type variable of some kind, resolve it one level
     .               /// (but do not resolve types found in the result). If `typ` is
     .               /// not a type variable, just return it unmodified.
     .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
64,080 ( 0.04%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
33,372 ( 0.02%)          match *typ.kind() {
     .                       ty::Infer(ty::TyVar(v)) => {
     .                           // Not entirely obvious: if `typ` is a type variable,
     .                           // it can be resolved to an int/float variable, which
     .                           // can then be recursively resolved, hence the
     .                           // recursion. Note though that we prevent type
     .                           // variables from unifying to other type variables
     .                           // directly (though they may be embedded
     .                           // structurally), and we prevent cycles in any case,
     .                           // so this recursion should always be of very limited
     .                           // depth.
     .                           //
     .                           // Note: if these two lines are combined into one we get
     .                           // dynamic borrow errors on `self.inner`.
17,284 ( 0.01%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
     .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
     .                       }
     .           
     .                       ty::Infer(ty::IntVar(v)) => self
     .                           .inner
     .                           .borrow_mut()
     .                           .int_unification_table()
     .                           .probe_value(v)
-- line 1637 ----------------------------------------
-- line 1643 ----------------------------------------
     .                           .borrow_mut()
     .                           .float_unification_table()
     .                           .probe_value(v)
     .                           .map(|v| v.to_type(self.tcx))
     .                           .unwrap_or(typ),
     .           
     .                       _ => typ,
     .                   }
72,090 ( 0.04%)      }
     .           
     .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
     .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
     .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
     .               ///
     .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
     .               /// inlined, despite being large, because it has only two call sites that
     .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
     .               #[inline(always)]
     .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
     .                   match infer_var {
     .                       TyOrConstInferVar::Ty(v) => {
     .                           use self::type_variable::TypeVariableValue;
     .           
     .                           // If `inlined_probe` returns a `Known` value, it never equals
     .                           // `ty::Infer(ty::TyVar(v))`.
10,587 ( 0.01%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
     .                               TypeVariableValue::Unknown { .. } => false,
     .                               TypeVariableValue::Known { .. } => true,
     .                           }
     .                       }
     .           
     .                       TyOrConstInferVar::TyInt(v) => {
     .                           // If `inlined_probe_value` returns a value it's always a
     .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
-- line 1678 ----------------------------------------
-- line 1716 ----------------------------------------
     .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
     .               Const(ConstVid<'tcx>),
     .           }
     .           
     .           impl<'tcx> TyOrConstInferVar<'tcx> {
     .               /// Tries to extract an inference variable from a type or a constant, returns `None`
     .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
     .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
   167 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
     .                   match arg.unpack() {
     .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
     .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
     .                       GenericArgKind::Lifetime(_) => None,
     .                   }
   167 ( 0.00%)      }
     .           
     .               /// Tries to extract an inference variable from a type, returns `None`
     .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
    30 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
 1,773 ( 0.00%)          match *ty.kind() {
   394 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
     .                       ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
     .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
     .                       _ => None,
     .                   }
    30 ( 0.00%)      }
     .           
     .               /// Tries to extract an inference variable from a constant, returns `None`
     .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
     .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
     .                   match ct.val {
     .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
     .                       _ => None,
     .                   }
-- line 1749 ----------------------------------------
-- line 1755 ----------------------------------------
     .           }
     .           
     .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
     .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
     .                   self.infcx.tcx
     .               }
     .           
     .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
12,252 ( 0.01%)          self.infcx.shallow_resolve_ty(ty)
     .               }
     .           
     .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
     .                   if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
     .                       self.infcx
     .                           .inner
     .                           .borrow_mut()
     .                           .const_unification_table()
-- line 1771 ----------------------------------------
-- line 1818 ----------------------------------------
     .                       CompareImplTypeObligation { span, .. } => span,
     .                   }
     .               }
     .           
     .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
     .               where
     .                   F: FnOnce() -> Self,
     .               {
   822 ( 0.00%)          match *cause.code() {
   148 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
   740 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
     .                       }
     .           
     .                       traits::ObligationCauseCode::CompareImplMethodObligation {
     .                           impl_item_def_id,
     .                           trait_item_def_id,
     .                       } => SubregionOrigin::CompareImplMethodObligation {
     .                           span: cause.span,
     .                           impl_item_def_id,
-- line 1836 ----------------------------------------

53,588 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs
--------------------------------------------------------------------------------
Ir               

-- line 32 ----------------------------------------
      .           ///
      .           /// If the syntax extension is an MBE macro, it will attempt to match its
      .           /// LHS token tree against the provided token tree, and if it finds a
      .           /// match, will transcribe the RHS token tree, splicing in any captured
      .           /// `macro_parser::matched_nonterminals` into the `SubstNt`s it finds.
      .           ///
      .           /// The RHS of an MBE macro is the only place `SubstNt`s are substituted.
      .           /// Nothing special happens to misnamed or misplaced `SubstNt`s.
163,921 ( 0.09%)  #[derive(Debug, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
      .           pub enum TokenTree {
      .               /// A single token.
 39,712 ( 0.02%)      Token(Token),
      .               /// A delimited sequence of token trees.
  4,514 ( 0.00%)      Delimited(DelimSpan, DelimToken, TokenStream),
      .           }
      .           
      .           #[derive(Copy, Clone)]
      .           pub enum CanSynthesizeMissingTokens {
      .               Yes,
      .               No,
      .           }
      .           
-- line 53 ----------------------------------------
-- line 71 ----------------------------------------
      .                           delim == delim2 && tts.eq_unspanned(&tts2)
      .                       }
      .                       _ => false,
      .                   }
      .               }
      .           
      .               /// Retrieves the `TokenTree`'s span.
      .               pub fn span(&self) -> Span {
    102 ( 0.00%)          match self {
     61 ( 0.00%)              TokenTree::Token(token) => token.span,
     28 ( 0.00%)              TokenTree::Delimited(sp, ..) => sp.entire(),
      .                   }
     44 ( 0.00%)      }
      .           
      .               /// Modify the `TokenTree`'s span in-place.
      .               pub fn set_span(&mut self, span: Span) {
    102 ( 0.00%)          match self {
     44 ( 0.00%)              TokenTree::Token(token) => token.span = span,
     14 ( 0.00%)              TokenTree::Delimited(dspan, ..) => *dspan = DelimSpan::from_single(span),
      .                   }
     51 ( 0.00%)      }
      .           
     38 ( 0.00%)      pub fn token(kind: TokenKind, span: Span) -> TokenTree {
  7,472 ( 0.00%)          TokenTree::Token(Token::new(kind, span))
     38 ( 0.00%)      }
      .           
      .               /// Returns the opening delimiter as a token tree.
    920 ( 0.00%)      pub fn open_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
  2,760 ( 0.00%)          TokenTree::token(token::OpenDelim(delim), span.open)
    920 ( 0.00%)      }
      .           
      .               /// Returns the closing delimiter as a token tree.
    910 ( 0.00%)      pub fn close_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
  2,730 ( 0.00%)          TokenTree::token(token::CloseDelim(delim), span.close)
    910 ( 0.00%)      }
      .           
    165 ( 0.00%)      pub fn uninterpolate(self) -> TokenTree {
    110 ( 0.00%)          match self {
    495 ( 0.00%)              TokenTree::Token(token) => TokenTree::Token(token.uninterpolate().into_owned()),
      .                       tt => tt,
      .                   }
    220 ( 0.00%)      }
      .           }
      .           
      .           impl<CTX> HashStable<CTX> for TokenStream
      .           where
      .               CTX: crate::HashStableContext,
      .           {
  4,185 ( 0.00%)      fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
 27,114 ( 0.01%)          for sub_tt in self.trees() {
      .                       sub_tt.hash_stable(hcx, hasher);
      .                   }
  3,720 ( 0.00%)      }
      .           }
      .           
      .           pub trait CreateTokenStream: sync::Send + sync::Sync {
      .               fn create_token_stream(&self) -> AttrAnnotatedTokenStream;
      .           }
      .           
      .           impl CreateTokenStream for AttrAnnotatedTokenStream {
      .               fn create_token_stream(&self) -> AttrAnnotatedTokenStream {
-- line 131 ----------------------------------------
-- line 135 ----------------------------------------
      .           
      .           /// A lazy version of [`TokenStream`], which defers creation
      .           /// of an actual `TokenStream` until it is needed.
      .           /// `Box` is here only to reduce the structure size.
      .           #[derive(Clone)]
      .           pub struct LazyTokenStream(Lrc<Box<dyn CreateTokenStream>>);
      .           
      .           impl LazyTokenStream {
      4 ( 0.00%)      pub fn new(inner: impl CreateTokenStream + 'static) -> LazyTokenStream {
      .                   LazyTokenStream(Lrc::new(Box::new(inner)))
      4 ( 0.00%)      }
      .           
      .               pub fn create_token_stream(&self) -> AttrAnnotatedTokenStream {
      .                   self.0.create_token_stream()
      .               }
      .           }
      .           
      .           impl fmt::Debug for LazyTokenStream {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
-- line 153 ----------------------------------------
-- line 188 ----------------------------------------
      .               Delimited(DelimSpan, DelimToken, AttrAnnotatedTokenStream),
      .               /// Stores the attributes for an attribute target,
      .               /// along with the tokens for that attribute target.
      .               /// See `AttributesData` for more information
      .               Attributes(AttributesData),
      .           }
      .           
      .           impl AttrAnnotatedTokenStream {
  1,106 ( 0.00%)      pub fn new(tokens: Vec<(AttrAnnotatedTokenTree, Spacing)>) -> AttrAnnotatedTokenStream {
      .                   AttrAnnotatedTokenStream(Lrc::new(tokens))
  1,106 ( 0.00%)      }
      .           
      .               /// Converts this `AttrAnnotatedTokenStream` to a plain `TokenStream
      .               /// During conversion, `AttrAnnotatedTokenTree::Attributes` get 'flattened'
      .               /// back to a `TokenStream` of the form `outer_attr attr_target`.
      .               /// If there are inner attributes, they are inserted into the proper
      .               /// place in the attribute target tokens.
      .               pub fn to_tokenstream(&self) -> TokenStream {
      .                   let trees: Vec<_> = self
-- line 206 ----------------------------------------
-- line 316 ----------------------------------------
      .           pub struct TokenStream(pub(crate) Lrc<Vec<TreeAndSpacing>>);
      .           
      .           pub type TreeAndSpacing = (TokenTree, Spacing);
      .           
      .           // `TokenStream` is used a lot. Make sure it doesn't unintentionally get bigger.
      .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
      .           rustc_data_structures::static_assert_size!(TokenStream, 8);
      .           
 11,798 ( 0.01%)  #[derive(Clone, Copy, Debug, PartialEq, Encodable, Decodable)]
      .           pub enum Spacing {
      .               Alone,
      .               Joint,
      .           }
      .           
      .           impl TokenStream {
      .               /// Given a `TokenStream` with a `Stream` of only two arguments, return a new `TokenStream`
      .               /// separating the two arguments with a comma for diagnostic suggestions.
-- line 332 ----------------------------------------
-- line 371 ----------------------------------------
      .           impl From<(AttrAnnotatedTokenTree, Spacing)> for AttrAnnotatedTokenStream {
      .               fn from((tree, spacing): (AttrAnnotatedTokenTree, Spacing)) -> AttrAnnotatedTokenStream {
      .                   AttrAnnotatedTokenStream::new(vec![(tree, spacing)])
      .               }
      .           }
      .           
      .           impl From<TokenTree> for TokenStream {
      .               fn from(tree: TokenTree) -> TokenStream {
    300 ( 0.00%)          TokenStream::new(vec![(tree, Spacing::Alone)])
      .               }
      .           }
      .           
      .           impl From<TokenTree> for TreeAndSpacing {
      .               fn from(tree: TokenTree) -> TreeAndSpacing {
  2,549 ( 0.00%)          (tree, Spacing::Alone)
      .               }
      .           }
      .           
      .           impl iter::FromIterator<TokenTree> for TokenStream {
      .               fn from_iter<I: IntoIterator<Item = TokenTree>>(iter: I) -> Self {
      8 ( 0.00%)          TokenStream::new(iter.into_iter().map(Into::into).collect::<Vec<TreeAndSpacing>>())
      .               }
      .           }
      .           
      .           impl Eq for TokenStream {}
      .           
      .           impl PartialEq<TokenStream> for TokenStream {
      .               fn eq(&self, other: &TokenStream) -> bool {
      .                   self.trees().eq(other.trees())
-- line 399 ----------------------------------------
-- line 401 ----------------------------------------
      .           }
      .           
      .           impl TokenStream {
      .               pub fn new(streams: Vec<TreeAndSpacing>) -> TokenStream {
      .                   TokenStream(Lrc::new(streams))
      .               }
      .           
      .               pub fn is_empty(&self) -> bool {
    500 ( 0.00%)          self.0.is_empty()
    500 ( 0.00%)      }
      .           
      .               pub fn len(&self) -> usize {
 15,424 ( 0.01%)          self.0.len()
      7 ( 0.00%)      }
      .           
      .               pub fn from_streams(mut streams: SmallVec<[TokenStream; 2]>) -> TokenStream {
      .                   match streams.len() {
      .                       0 => TokenStream::default(),
      .                       1 => streams.pop().unwrap(),
      .                       _ => {
      .                           // We are going to extend the first stream in `streams` with
      .                           // the elements from the subsequent streams. This requires
-- line 422 ----------------------------------------
-- line 448 ----------------------------------------
      .           
      .                           // Create the final `TokenStream`.
      .                           TokenStream(first_stream_lrc)
      .                       }
      .                   }
      .               }
      .           
      .               pub fn trees(&self) -> Cursor {
  1,122 ( 0.00%)          self.clone().into_trees()
  2,244 ( 0.00%)      }
      .           
  1,211 ( 0.00%)      pub fn into_trees(self) -> Cursor {
      .                   Cursor::new(self)
  2,422 ( 0.00%)      }
      .           
      .               /// Compares two `TokenStream`s, checking equality without regarding span information.
      .               pub fn eq_unspanned(&self, other: &TokenStream) -> bool {
      .                   let mut t1 = self.trees();
      .                   let mut t2 = other.trees();
      .                   for (t1, t2) in iter::zip(&mut t1, &mut t2) {
      .                       if !t1.eq_unspanned(&t2) {
      .                           return false;
      .                       }
      .                   }
      .                   t1.next().is_none() && t2.next().is_none()
      .               }
      .           
      .               pub fn map_enumerated<F: FnMut(usize, &TokenTree) -> TokenTree>(self, mut f: F) -> TokenStream {
      6 ( 0.00%)          TokenStream(Lrc::new(
      .                       self.0
      .                           .iter()
      .                           .enumerate()
    306 ( 0.00%)                  .map(|(i, (tree, is_joint))| (f(i, tree), *is_joint))
      .                           .collect(),
      .                   ))
      .               }
      .           }
      .           
      .           // 99.5%+ of the time we have 1 or 2 elements in this vector.
      .           #[derive(Clone)]
      .           pub struct TokenStreamBuilder(SmallVec<[TokenStream; 2]>);
-- line 488 ----------------------------------------
-- line 572 ----------------------------------------
      .           pub struct Cursor {
      .               pub stream: TokenStream,
      .               index: usize,
      .           }
      .           
      .           impl Iterator for Cursor {
      .               type Item = TokenTree;
      .           
 23,883 ( 0.01%)      fn next(&mut self) -> Option<TokenTree> {
 40,430 ( 0.02%)          self.next_with_spacing().map(|(tree, _)| tree)
 31,844 ( 0.02%)      }
      .           }
      .           
      .           impl Cursor {
      .               fn new(stream: TokenStream) -> Self {
      .                   Cursor { stream, index: 0 }
      .               }
      .           
 37,245 ( 0.02%)      pub fn next_with_spacing(&mut self) -> Option<TreeAndSpacing> {
 46,230 ( 0.03%)          if self.index < self.stream.len() {
 24,140 ( 0.01%)              self.index += 1;
 38,332 ( 0.02%)              Some(self.stream.0[self.index - 1].clone())
      .                   } else {
  3,946 ( 0.00%)              None
      .                   }
 44,694 ( 0.02%)      }
      .           
      .               pub fn index(&self) -> usize {
      .                   self.index
      .               }
      .           
      .               pub fn append(&mut self, new_stream: TokenStream) {
      .                   if new_stream.is_empty() {
      .                       return;
      .                   }
      .                   let index = self.index;
      .                   let stream = mem::take(&mut self.stream);
      .                   *self = TokenStream::from_streams(smallvec![stream, new_stream]).into_trees();
      .                   self.index = index;
      .               }
      .           
  2,310 ( 0.00%)      pub fn look_ahead(&self, n: usize) -> Option<&TokenTree> {
  4,620 ( 0.00%)          self.stream.0[self.index..].get(n).map(|(tree, _)| tree)
  4,620 ( 0.00%)      }
      .           }
      .           
 10,786 ( 0.01%)  #[derive(Debug, Copy, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
      .           pub struct DelimSpan {
      .               pub open: Span,
      .               pub close: Span,
      .           }
      .           
      .           impl DelimSpan {
      5 ( 0.00%)      pub fn from_single(sp: Span) -> Self {
      .                   DelimSpan { open: sp, close: sp }
     10 ( 0.00%)      }
      .           
  1,000 ( 0.00%)      pub fn from_pair(open: Span, close: Span) -> Self {
      .                   DelimSpan { open, close }
    500 ( 0.00%)      }
      .           
      .               pub fn dummy() -> Self {
      .                   Self::from_single(DUMMY_SP)
    216 ( 0.00%)      }
      .           
  1,528 ( 0.00%)      pub fn entire(self) -> Span {
      .                   self.open.with_hi(self.close.hi())
  1,146 ( 0.00%)      }
      .           }

  7,288 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs
--------------------------------------------------------------------------------
Ir               

-- line 12 ----------------------------------------
      .           use rustc_data_structures::sync::Lrc;
      .           use rustc_macros::HashStable_Generic;
      .           use rustc_span::symbol::{kw, sym};
      .           use rustc_span::symbol::{Ident, Symbol};
      .           use rustc_span::{self, edition::Edition, Span, DUMMY_SP};
      .           use std::borrow::Cow;
      .           use std::{fmt, mem};
      .           
  8,494 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
      .           pub enum CommentKind {
      .               Line,
      .               Block,
      .           }
      .           
    114 ( 0.00%)  #[derive(Clone, PartialEq, Encodable, Decodable, Hash, Debug, Copy)]
      .           #[derive(HashStable_Generic)]
      .           pub enum BinOpToken {
      .               Plus,
      .               Minus,
      .               Star,
      .               Slash,
      .               Percent,
      .               Caret,
      .               And,
      .               Or,
      .               Shl,
      .               Shr,
      .           }
      .           
      .           /// A delimiter token.
  2,734 ( 0.00%)  #[derive(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Debug, Copy)]
      .           #[derive(HashStable_Generic)]
      .           pub enum DelimToken {
      .               /// A round parenthesis (i.e., `(` or `)`).
      .               Paren,
      .               /// A square bracket (i.e., `[` or `]`).
      .               Bracket,
      .               /// A curly brace (i.e., `{` or `}`).
      .               Brace,
      .               /// An empty delimiter.
      .               NoDelim,
      .           }
      .           
    799 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
      .           pub enum LitKind {
      .               Bool, // AST only, must never appear in a `Token`
      .               Byte,
      .               Char,
      .               Integer,
      .               Float,
      .               Str,
      .               StrRaw(u16), // raw string delimited by `n` hash symbols
      .               ByteStr,
      .               ByteStrRaw(u16), // raw byte string delimited by `n` hash symbols
      .               Err,
      .           }
      .           
      .           /// A literal token.
  4,224 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
      .           pub struct Lit {
      1 ( 0.00%)      pub kind: LitKind,
      1 ( 0.00%)      pub symbol: Symbol,
      3 ( 0.00%)      pub suffix: Option<Symbol>,
      .           }
      .           
      .           impl fmt::Display for Lit {
      5 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      9 ( 0.00%)          let Lit { kind, symbol, suffix } = *self;
      .                   match kind {
      .                       Byte => write!(f, "b'{}'", symbol)?,
      .                       Char => write!(f, "'{}'", symbol)?,
      .                       Str => write!(f, "\"{}\"", symbol)?,
      .                       StrRaw(n) => write!(
      .                           f,
      .                           "r{delim}\"{string}\"{delim}",
      .                           delim = "#".repeat(n as usize),
-- line 87 ----------------------------------------
-- line 89 ----------------------------------------
      .                       )?,
      .                       ByteStr => write!(f, "b\"{}\"", symbol)?,
      .                       ByteStrRaw(n) => write!(
      .                           f,
      .                           "br{delim}\"{string}\"{delim}",
      .                           delim = "#".repeat(n as usize),
      .                           string = symbol
      .                       )?,
      3 ( 0.00%)              Integer | Float | Bool | Err => write!(f, "{}", symbol)?,
      .                   }
      .           
      2 ( 0.00%)          if let Some(suffix) = suffix {
      .                       write!(f, "{}", suffix)?;
      .                   }
      .           
      .                   Ok(())
      5 ( 0.00%)      }
      .           }
      .           
      .           impl LitKind {
      .               /// An English article for the literal token kind.
      .               pub fn article(self) -> &'static str {
      .                   match self {
      .                       Integer | Err => "an",
      .                       _ => "a",
-- line 113 ----------------------------------------
-- line 130 ----------------------------------------
      .               crate fn may_have_suffix(self) -> bool {
      .                   matches!(self, Integer | Float | Err)
      .               }
      .           }
      .           
      .           impl Lit {
      .               pub fn new(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> Lit {
      .                   Lit { kind, symbol, suffix }
     80 ( 0.00%)      }
      .           }
      .           
      8 ( 0.00%)  pub fn ident_can_begin_expr(name: Symbol, span: Span, is_raw: bool) -> bool {
     14 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
      .           
      4 ( 0.00%)      !ident_token.is_reserved_ident()
      .                   || ident_token.is_path_segment_keyword()
      .                   || [
      .                       kw::Async,
      .                       kw::Do,
      .                       kw::Box,
      .                       kw::Break,
      .                       kw::Const,
      .                       kw::Continue,
-- line 152 ----------------------------------------
-- line 161 ----------------------------------------
      .                       kw::True,
      .                       kw::Try,
      .                       kw::Unsafe,
      .                       kw::While,
      .                       kw::Yield,
      .                       kw::Static,
      .                   ]
      .                   .contains(&name)
     10 ( 0.00%)  }
      .           
      .           fn ident_can_begin_type(name: Symbol, span: Span, is_raw: bool) -> bool {
    108 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
      .           
     44 ( 0.00%)      !ident_token.is_reserved_ident()
      .                   || ident_token.is_path_segment_keyword()
      .                   || [kw::Underscore, kw::For, kw::Impl, kw::Fn, kw::Unsafe, kw::Extern, kw::Typeof, kw::Dyn]
      .                       .contains(&name)
      .           }
      .           
406,801 ( 0.22%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
      .           pub enum TokenKind {
      .               /* Expression-operator symbols. */
      .               Eq,
      .               Lt,
      .               Le,
      .               EqEq,
      .               Ne,
      .               Ge,
      .               Gt,
      .               AndAnd,
      .               OrOr,
      .               Not,
      .               Tilde,
  4,380 ( 0.00%)      BinOp(BinOpToken),
      .               BinOpEq(BinOpToken),
      .           
      .               /* Structural symbols */
      .               At,
      .               Dot,
      .               DotDot,
      .               DotDotDot,
      .               DotDotEq,
-- line 202 ----------------------------------------
-- line 208 ----------------------------------------
      .               LArrow,
      .               FatArrow,
      .               Pound,
      .               Dollar,
      .               Question,
      .               /// Used by proc macros for representing lifetimes, not generated by lexer right now.
      .               SingleQuote,
      .               /// An opening delimiter (e.g., `{`).
  3,999 ( 0.00%)      OpenDelim(DelimToken),
      .               /// A closing delimiter (e.g., `}`).
  1,452 ( 0.00%)      CloseDelim(DelimToken),
      .           
      .               /* Literals */
  1,814 ( 0.00%)      Literal(Lit),
      .           
      .               /// Identifier token.
      .               /// Do not forget about `NtIdent` when you want to match on identifiers.
      .               /// It's recommended to use `Token::(ident,uninterpolate,uninterpolated_span)` to
      .               /// treat regular and interpolated identifiers in the same way.
  4,818 ( 0.00%)      Ident(Symbol, /* is_raw */ bool),
      .               /// Lifetime identifier token.
      .               /// Do not forget about `NtLifetime` when you want to match on lifetime identifiers.
      .               /// It's recommended to use `Token::(lifetime,uninterpolate,uninterpolated_span)` to
      .               /// treat regular and interpolated lifetime identifiers in the same way.
     63 ( 0.00%)      Lifetime(Symbol),
      .           
     43 ( 0.00%)      Interpolated(Lrc<Nonterminal>),
      .           
      .               /// A doc comment token.
      .               /// `Symbol` is the doc comment's data excluding its "quotes" (`///`, `/**`, etc)
      .               /// similarly to symbols in string literal tokens.
    186 ( 0.00%)      DocComment(CommentKind, ast::AttrStyle, Symbol),
      .           
      .               Eof,
      .           }
      .           
      .           // `TokenKind` is used a lot. Make sure it doesn't unintentionally get bigger.
      .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
      .           rustc_data_structures::static_assert_size!(TokenKind, 16);
      .           
 95,235 ( 0.05%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
      .           pub struct Token {
  3,782 ( 0.00%)      pub kind: TokenKind,
     18 ( 0.00%)      pub span: Span,
      .           }
      .           
      .           impl TokenKind {
      .               pub fn lit(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> TokenKind {
      .                   Literal(Lit::new(kind, symbol, suffix))
     20 ( 0.00%)      }
      .           
      .               // An approximation to proc-macro-style single-character operators used by rustc parser.
      .               // If the operator token can be broken into two tokens, the first of which is single-character,
      .               // then this function performs that operation, otherwise it returns `None`.
    271 ( 0.00%)      pub fn break_two_token_op(&self) -> Option<(TokenKind, TokenKind)> {
  1,088 ( 0.00%)          Some(match *self {
      .                       Le => (Lt, Eq),
      .                       EqEq => (Eq, Eq),
      .                       Ne => (Not, Eq),
      .                       Ge => (Gt, Eq),
      .                       AndAnd => (BinOp(And), BinOp(And)),
      .                       OrOr => (BinOp(Or), BinOp(Or)),
      .                       BinOp(Shl) => (Lt, Lt),
      .                       BinOp(Shr) => (Gt, Gt),
-- line 271 ----------------------------------------
-- line 280 ----------------------------------------
      .                       BinOpEq(Shl) => (Lt, Le),
      .                       BinOpEq(Shr) => (Gt, Ge),
      .                       DotDot => (Dot, Dot),
      .                       DotDotDot => (Dot, DotDot),
      .                       ModSep => (Colon, Colon),
      .                       RArrow => (BinOp(Minus), Gt),
      .                       LArrow => (Lt, BinOp(Minus)),
      .                       FatArrow => (Eq, Gt),
    270 ( 0.00%)              _ => return None,
      .                   })
    271 ( 0.00%)      }
      .           
      .               /// Returns tokens that are likely to be typed accidentally instead of the current token.
      .               /// Enables better error recovery when the wrong token is found.
      .               pub fn similar_tokens(&self) -> Option<Vec<TokenKind>> {
      .                   match *self {
      .                       Comma => Some(vec![Dot, Lt, Semi]),
      .                       Semi => Some(vec![Colon, Comma]),
      .                       FatArrow => Some(vec![Eq, RArrow]),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               pub fn should_end_const_arg(&self) -> bool {
     64 ( 0.00%)          matches!(self, Gt | Ge | BinOp(Shr) | BinOpEq(Shr))
     16 ( 0.00%)      }
      .           }
      .           
      .           impl Token {
  4,230 ( 0.00%)      pub fn new(kind: TokenKind, span: Span) -> Self {
 13,340 ( 0.01%)          Token { kind, span }
  4,230 ( 0.00%)      }
      .           
      .               /// Some token that will be thrown away later.
    190 ( 0.00%)      pub fn dummy() -> Self {
      .                   Token::new(TokenKind::Question, DUMMY_SP)
    190 ( 0.00%)      }
      .           
      .               /// Recovers a `Token` from an `Ident`. This creates a raw identifier if necessary.
      .               pub fn from_ast_ident(ident: Ident) -> Self {
     32 ( 0.00%)          Token::new(Ident(ident.name, ident.is_raw_guess()), ident.span)
      .               }
      .           
      .               /// Return this token by value and leave a dummy token in its place.
  2,763 ( 0.00%)      pub fn take(&mut self) -> Self {
      .                   mem::replace(self, Token::dummy())
  2,763 ( 0.00%)      }
      .           
      .               /// For interpolated tokens, returns a span of the fragment to which the interpolated
      .               /// token refers. For all other tokens this is just a regular span.
      .               /// It is particularly important to use this for identifiers and lifetimes
      .               /// for which spans affect name resolution and edition checks.
      .               /// Note that keywords are also identifiers, so they should use this
      .               /// if they keep spans or perform edition checks.
      .               pub fn uninterpolated_span(&self) -> Span {
    108 ( 0.00%)          match &self.kind {
      .                       Interpolated(nt) => nt.span(),
     54 ( 0.00%)              _ => self.span,
      .                   }
     54 ( 0.00%)      }
      .           
      .               pub fn is_op(&self) -> bool {
  8,289 ( 0.00%)          !matches!(
  2,763 ( 0.00%)              self.kind,
      .                       OpenDelim(..)
      .                           | CloseDelim(..)
      .                           | Literal(..)
      .                           | DocComment(..)
      .                           | Ident(..)
      .                           | Lifetime(..)
      .                           | Interpolated(..)
      .                           | Eof
      .                   )
  2,763 ( 0.00%)      }
      .           
      .               pub fn is_like_plus(&self) -> bool {
    805 ( 0.00%)          matches!(self.kind, BinOp(Plus) | BinOpEq(Plus))
    161 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token can appear at the start of an expression.
      5 ( 0.00%)      pub fn can_begin_expr(&self) -> bool {
     25 ( 0.00%)          match self.uninterpolate().kind {
     18 ( 0.00%)              Ident(name, is_raw)              =>
      6 ( 0.00%)                  ident_can_begin_expr(name, self.span, is_raw), // value name or keyword
      .                       OpenDelim(..)                     | // tuple, array or block
      .                       Literal(..)                       | // literal
      .                       Not                               | // operator not
      .                       BinOp(Minus)                      | // unary minus
      .                       BinOp(Star)                       | // dereference
      .                       BinOp(Or) | OrOr                  | // closure
      .                       BinOp(And)                        | // reference
      .                       AndAnd                            | // double reference
      .                       // DotDotDot is no longer supported, but we need some way to display the error
      .                       DotDot | DotDotDot | DotDotEq     | // range notation
      .                       Lt | BinOp(Shl)                   | // associated path
      .                       ModSep                            | // global path
      .                       Lifetime(..)                      | // labeled loop
      .                       Pound                             => true, // expression attributes
     16 ( 0.00%)              Interpolated(ref nt) => matches!(**nt, NtLiteral(..) |
      .                           NtExpr(..)    |
      .                           NtBlock(..)   |
      .                           NtPath(..)),
      .                       _ => false,
      .                   }
     10 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token can appear at the start of a type.
    136 ( 0.00%)      pub fn can_begin_type(&self) -> bool {
    258 ( 0.00%)          match self.uninterpolate().kind {
    162 ( 0.00%)              Ident(name, is_raw)        =>
     18 ( 0.00%)                  ident_can_begin_type(name, self.span, is_raw), // type name or keyword
      .                       OpenDelim(Paren)            | // tuple
      .                       OpenDelim(Bracket)          | // array
      .                       Not                         | // never
      .                       BinOp(Star)                 | // raw pointer
      .                       BinOp(And)                  | // reference
      .                       AndAnd                      | // double reference
      .                       Question                    | // maybe bound in trait object
      .                       Lifetime(..)                | // lifetime bound in trait object
      .                       Lt | BinOp(Shl)             | // associated path
      .                       ModSep                      => true, // global path
     44 ( 0.00%)              Interpolated(ref nt) => matches!(**nt, NtTy(..) | NtPath(..)),
      .                       _ => false,
      .                   }
    204 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token can appear at the start of a const param.
      .               pub fn can_begin_const_arg(&self) -> bool {
    125 ( 0.00%)          match self.kind {
      .                       OpenDelim(Brace) => true,
      8 ( 0.00%)              Interpolated(ref nt) => matches!(**nt, NtExpr(..) | NtBlock(..) | NtLiteral(..)),
     24 ( 0.00%)              _ => self.can_begin_literal_maybe_minus(),
      .                   }
      1 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token can appear at the start of a generic bound.
      .               pub fn can_begin_bound(&self) -> bool {
      .                   self.is_path_start()
      .                       || self.is_lifetime()
      .                       || self.is_keyword(kw::For)
      .                       || self == &Question
      .                       || self == &OpenDelim(Paren)
-- line 421 ----------------------------------------
-- line 427 ----------------------------------------
      .               }
      .           
      .               /// Returns `true` if the token is any literal, a minus (which can prefix a literal,
      .               /// for example a '-42', or one of the boolean idents).
      .               ///
      .               /// In other words, would this token be a valid start of `parse_literal_maybe_minus`?
      .               ///
      .               /// Keep this in sync with and `Lit::from_token`, excluding unary negation.
     28 ( 0.00%)      pub fn can_begin_literal_maybe_minus(&self) -> bool {
    257 ( 0.00%)          match self.uninterpolate().kind {
      .                       Literal(..) | BinOp(Minus) => true,
     68 ( 0.00%)              Ident(name, false) if name.is_bool_lit() => true,
      .                       Interpolated(ref nt) => match &**nt {
      .                           NtLiteral(_) => true,
      .                           NtExpr(e) => match &e.kind {
      .                               ast::ExprKind::Lit(_) => true,
      .                               ast::ExprKind::Unary(ast::UnOp::Neg, e) => {
      .                                   matches!(&e.kind, ast::ExprKind::Lit(_))
      .                               }
      .                               _ => false,
      .                           },
      .                           _ => false,
      .                       },
      .                       _ => false,
      .                   }
     56 ( 0.00%)      }
      .           
      .               // A convenience function for matching on identifiers during parsing.
      .               // Turns interpolated identifier (`$i: ident`) or lifetime (`$l: lifetime`) token
      .               // into the regular identifier or lifetime token it refers to,
      .               // otherwise returns the original token.
    349 ( 0.00%)      pub fn uninterpolate(&self) -> Cow<'_, Token> {
 29,451 ( 0.02%)          match &self.kind {
    757 ( 0.00%)              Interpolated(nt) => match **nt {
    131 ( 0.00%)                  NtIdent(ident, is_raw) => {
    328 ( 0.00%)                      Cow::Owned(Token::new(Ident(ident.name, is_raw), ident.span))
      .                           }
      .                           NtLifetime(ident) => Cow::Owned(Token::new(Lifetime(ident.name), ident.span)),
      .                           _ => Cow::Borrowed(self),
      .                       },
      .                       _ => Cow::Borrowed(self),
      .                   }
    349 ( 0.00%)      }
      .           
      .               /// Returns an identifier if this token is an identifier.
  3,509 ( 0.00%)      pub fn ident(&self) -> Option<(Ident, /* is_raw */ bool)> {
      .                   let token = self.uninterpolate();
 20,894 ( 0.01%)          match token.kind {
 90,262 ( 0.05%)              Ident(name, is_raw) => Some((Ident::new(name, token.span), is_raw)),
      .                       _ => None,
      .                   }
 25,484 ( 0.01%)      }
      .           
      .               /// Returns a lifetime identifier if this token is a lifetime.
    326 ( 0.00%)      pub fn lifetime(&self) -> Option<Ident> {
      .                   let token = self.uninterpolate();
    796 ( 0.00%)          match token.kind {
     56 ( 0.00%)              Lifetime(name) => Some(Ident::new(name, token.span)),
      .                       _ => None,
      .                   }
  2,282 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is an identifier.
      .               pub fn is_ident(&self) -> bool {
      .                   self.ident().is_some()
    455 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is a lifetime.
     72 ( 0.00%)      pub fn is_lifetime(&self) -> bool {
      .                   self.lifetime().is_some()
    144 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is an identifier whose name is the given
      .               /// string slice.
    136 ( 0.00%)      pub fn is_ident_named(&self, name: Symbol) -> bool {
      .                   self.ident().map_or(false, |(ident, _)| ident.name == name)
    272 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is an interpolated path.
      .               fn is_path(&self) -> bool {
  1,372 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
     10 ( 0.00%)              if let NtPath(..) = **nt {
      .                           return true;
      .                       }
      .                   }
      .                   false
      .               }
      .           
      .               /// Would `maybe_whole_expr` in `parser.rs` return `Ok(..)`?
      .               /// That is, is this a pre-parsed expression dropped into the token stream
-- line 516 ----------------------------------------
-- line 522 ----------------------------------------
      .                       }
      .                   }
      .           
      .                   false
      .               }
      .           
      .               // Is the token an interpolated block (`$b:block`)?
      .               pub fn is_whole_block(&self) -> bool {
     32 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
      .                       if let NtBlock(..) = **nt {
      .                           return true;
      .                       }
      .                   }
      .                   false
     16 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is either the `mut` or `const` keyword.
      .               pub fn is_mutability(&self) -> bool {
      .                   self.is_keyword(kw::Mut) || self.is_keyword(kw::Const)
      .               }
      .           
     80 ( 0.00%)      pub fn is_qpath_start(&self) -> bool {
    766 ( 0.00%)          self == &Lt || self == &BinOp(Shl)
      .               }
      .           
  1,376 ( 0.00%)      pub fn is_path_start(&self) -> bool {
  2,029 ( 0.00%)          self == &ModSep
      .                       || self.is_qpath_start()
      .                       || self.is_path()
      .                       || self.is_path_segment_keyword()
    324 ( 0.00%)              || self.is_ident() && !self.is_reserved_ident()
  1,720 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is a given keyword, `kw`.
  5,204 ( 0.00%)      pub fn is_keyword(&self, kw: Symbol) -> bool {
      .                   self.is_non_raw_ident_where(|id| id.name == kw)
 10,408 ( 0.01%)      }
      .           
     88 ( 0.00%)      pub fn is_path_segment_keyword(&self) -> bool {
      .                   self.is_non_raw_ident_where(Ident::is_path_segment_keyword)
      .               }
      .           
      .               // Returns true for reserved identifiers used internally for elided lifetimes,
      .               // unnamed method parameters, crate root module, error recovery etc.
     46 ( 0.00%)      pub fn is_special_ident(&self) -> bool {
      .                   self.is_non_raw_ident_where(Ident::is_special)
      .               }
      .           
      .               /// Returns `true` if the token is a keyword used in the language.
     46 ( 0.00%)      pub fn is_used_keyword(&self) -> bool {
      .                   self.is_non_raw_ident_where(Ident::is_used_keyword)
      .               }
      .           
      .               /// Returns `true` if the token is a keyword reserved for possible future use.
     46 ( 0.00%)      pub fn is_unused_keyword(&self) -> bool {
      .                   self.is_non_raw_ident_where(Ident::is_unused_keyword)
      .               }
      .           
      .               /// Returns `true` if the token is either a special identifier or a keyword.
      .               pub fn is_reserved_ident(&self) -> bool {
      .                   self.is_non_raw_ident_where(Ident::is_reserved)
      .               }
      .           
      .               /// Returns `true` if the token is the identifier `true` or `false`.
     88 ( 0.00%)      pub fn is_bool_lit(&self) -> bool {
    176 ( 0.00%)          self.is_non_raw_ident_where(|id| id.name.is_bool_lit())
      .               }
      .           
      .               pub fn is_numeric_lit(&self) -> bool {
      .                   matches!(
      .                       self.kind,
      .                       Literal(Lit { kind: LitKind::Integer, .. }) | Literal(Lit { kind: LitKind::Float, .. })
      .                   )
      .               }
      .           
      .               /// Returns `true` if the token is a non-raw identifier for which `pred` holds.
     28 ( 0.00%)      pub fn is_non_raw_ident_where(&self, pred: impl FnOnce(Ident) -> bool) -> bool {
 36,160 ( 0.02%)          match self.ident() {
    314 ( 0.00%)              Some((id, false)) => pred(id),
      .                       _ => false,
      .                   }
     35 ( 0.00%)      }
      .           
  7,660 ( 0.00%)      pub fn glue(&self, joint: &Token) -> Option<Token> {
  3,830 ( 0.00%)          let kind = match self.kind {
    162 ( 0.00%)              Eq => match joint.kind {
      .                           Eq => EqEq,
      .                           Gt => FatArrow,
      .                           _ => return None,
      .                       },
     54 ( 0.00%)              Lt => match joint.kind {
      .                           Eq => Le,
      .                           Lt => BinOp(Shl),
      .                           Le => BinOpEq(Shl),
      .                           BinOp(Minus) => LArrow,
      .                           _ => return None,
      .                       },
     14 ( 0.00%)              Gt => match joint.kind {
      .                           Eq => Ge,
      .                           Gt => BinOp(Shr),
      .                           Ge => BinOpEq(Shr),
      .                           _ => return None,
      .                       },
      2 ( 0.00%)              Not => match joint.kind {
      .                           Eq => Ne,
      .                           _ => return None,
      .                       },
    319 ( 0.00%)              BinOp(op) => match joint.kind {
      .                           Eq => BinOpEq(op),
      2 ( 0.00%)                  BinOp(And) if op == And => AndAnd,
      5 ( 0.00%)                  BinOp(Or) if op == Or => OrOr,
     33 ( 0.00%)                  Gt if op == Minus => RArrow,
      .                           _ => return None,
      .                       },
      5 ( 0.00%)              Dot => match joint.kind {
      .                           Dot => DotDot,
      .                           DotDot => DotDotDot,
      .                           _ => return None,
      .                       },
      .                       DotDot => match joint.kind {
      .                           Dot => DotDotDot,
      .                           Eq => DotDotEq,
      .                           _ => return None,
      .                       },
    318 ( 0.00%)              Colon => match joint.kind {
      .                           Colon => ModSep,
      .                           _ => return None,
      .                       },
      .                       SingleQuote => match joint.kind {
      .                           Ident(name, false) => Lifetime(Symbol::intern(&format!("'{}", name))),
      .                           _ => return None,
      .                       },
      .           
      .                       Le | EqEq | Ne | Ge | AndAnd | OrOr | Tilde | BinOpEq(..) | At | DotDotDot
      .                       | DotDotEq | Comma | Semi | ModSep | RArrow | LArrow | FatArrow | Pound | Dollar
      .                       | Question | OpenDelim(..) | CloseDelim(..) | Literal(..) | Ident(..)
      .                       | Lifetime(..) | Interpolated(..) | DocComment(..) | Eof => return None,
      .                   };
      .           
  2,951 ( 0.00%)          Some(Token::new(kind, self.span.to(joint.span)))
  6,894 ( 0.00%)      }
      .           }
      .           
      .           impl PartialEq<TokenKind> for Token {
      .               fn eq(&self, rhs: &TokenKind) -> bool {
 13,868 ( 0.01%)          self.kind == *rhs
      .               }
      .           }
      .           
      .           #[derive(Clone, Encodable, Decodable)]
      .           /// For interpolation during macro expansion.
      .           pub enum Nonterminal {
      .               NtItem(P<ast::Item>),
      .               NtBlock(P<ast::Block>),
-- line 675 ----------------------------------------
-- line 711 ----------------------------------------
      .               Path,
      .               Vis,
      .               TT,
      .           }
      .           
      .           impl NonterminalKind {
      .               /// The `edition` closure is used to get the edition for the given symbol. Doing
      .               /// `span.edition()` is expensive, so we do it lazily.
    376 ( 0.00%)      pub fn from_symbol(
      .                   symbol: Symbol,
      .                   edition: impl FnOnce() -> Edition,
      .               ) -> Option<NonterminalKind> {
    890 ( 0.00%)          Some(match symbol {
      .                       sym::item => NonterminalKind::Item,
      .                       sym::block => NonterminalKind::Block,
      .                       sym::stmt => NonterminalKind::Stmt,
      .                       sym::pat => match edition() {
      .                           Edition::Edition2015 | Edition::Edition2018 => {
      .                               NonterminalKind::PatParam { inferred: true }
      .                           }
      .                           Edition::Edition2021 => NonterminalKind::PatWithOr,
-- line 731 ----------------------------------------
-- line 737 ----------------------------------------
      .                       sym::lifetime => NonterminalKind::Lifetime,
      .                       sym::literal => NonterminalKind::Literal,
      .                       sym::meta => NonterminalKind::Meta,
      .                       sym::path => NonterminalKind::Path,
      .                       sym::vis => NonterminalKind::Vis,
      .                       sym::tt => NonterminalKind::TT,
      .                       _ => return None,
      .                   })
    376 ( 0.00%)      }
      .               fn symbol(self) -> Symbol {
      .                   match self {
      .                       NonterminalKind::Item => sym::item,
      .                       NonterminalKind::Block => sym::block,
      .                       NonterminalKind::Stmt => sym::stmt,
      .                       NonterminalKind::PatParam { inferred: false } => sym::pat_param,
      .                       NonterminalKind::PatParam { inferred: true } | NonterminalKind::PatWithOr => sym::pat,
      .                       NonterminalKind::Expr => sym::expr,
-- line 753 ----------------------------------------

128,463 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 111 ----------------------------------------
        .           const EMPTY: u8 = 0b1111_1111;
        .           
        .           /// Control byte value for a deleted bucket.
        .           const DELETED: u8 = 0b1000_0000;
        .           
        .           /// Checks whether a control byte represents a full bucket (top bit is clear).
        .           #[inline]
        .           fn is_full(ctrl: u8) -> bool {
  276,523 ( 0.15%)      ctrl & 0x80 == 0
        .           }
        .           
        .           /// Checks whether a control byte represents a special value (top bit is set).
        .           #[inline]
        .           fn is_special(ctrl: u8) -> bool {
        .               ctrl & 0x80 != 0
        .           }
        .           
        .           /// Checks whether a special control value is EMPTY (just check 1 bit).
        .           #[inline]
        .           fn special_is_empty(ctrl: u8) -> bool {
        .               debug_assert!(is_special(ctrl));
   21,346 ( 0.01%)      ctrl & 0x01 != 0
        .           }
        .           
        .           /// Primary hash function, used to select the initial bucket to probe from.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h1(hash: u64) -> usize {
        .               // On 32-bit platforms we simply ignore the higher hash bits.
        .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
        .           /// Secondary hash function, saved in the low 7 bits of the control byte.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h2(hash: u64) -> u8 {
        .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
        .               // value, some hash functions (such as FxHash) produce a usize result
        .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
        .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
1,990,712 ( 1.09%)      let top7 = hash >> (hash_len * 8 - 7);
        .               (top7 & 0x7f) as u8 // truncation
        .           }
        .           
        .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
        .           /// table size is a power of two) to visit every group of elements exactly once.
        .           ///
        .           /// A triangular probe has us jump by 1 more group every time. So first we
        .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
        .               #[inline]
        .               fn move_next(&mut self, bucket_mask: usize) {
        .                   // We should have found an empty bucket by now and ended the probe.
        .                   debug_assert!(
        .                       self.stride <= bucket_mask,
        .                       "Went past end of probe sequence"
        .                   );
        .           
   32,420 ( 0.02%)          self.stride += Group::WIDTH;
   32,420 ( 0.02%)          self.pos += self.stride;
   26,550 ( 0.01%)          self.pos &= bucket_mask;
        .               }
        .           }
        .           
        .           /// Returns the number of buckets needed to hold the given number of items,
        .           /// taking the maximum load factor into account.
        .           ///
        .           /// Returns `None` if an overflow occurs.
        .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
        .           #[cfg_attr(target_os = "emscripten", inline(never))]
        .           #[cfg_attr(not(target_os = "emscripten"), inline)]
        .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
        .               debug_assert_ne!(cap, 0);
        .           
        .               // For small tables we require at least 1 empty bucket so that lookups are
        .               // guaranteed to terminate if an element doesn't exist in the table.
    9,986 ( 0.01%)      if cap < 8 {
        .                   // We don't bother with a table size of 2 buckets since that can only
        .                   // hold a single element. Instead we skip directly to a 4 bucket table
        .                   // which can hold 3 elements.
   19,830 ( 0.01%)          return Some(if cap < 4 { 4 } else { 8 });
        .               }
        .           
        .               // Otherwise require 1/8 buckets to be empty (87.5% load)
        .               //
        .               // Be careful when modifying this, calculate_layout relies on the
        .               // overflow check here.
    6,162 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
        .           
        .               // Any overflows will have been caught by the checked_mul. Also, any
        .               // rounding errors from the division above will be cleaned up by
        .               // next_power_of_two (which can't overflow because of the previous division).
        .               Some(adjusted_cap.next_power_of_two())
        .           }
        .           
        .           /// Returns the maximum effective capacity for the given bucket mask, taking
        .           /// the maximum load factor into account.
        .           #[inline]
        .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
   25,895 ( 0.01%)      if bucket_mask < 8 {
        .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
        .                   // Keep in mind that the bucket mask is one less than the bucket count.
        .                   bucket_mask
        .               } else {
        .                   // For larger tables we reserve 12.5% of the slots as empty.
    8,328 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
        .               }
        .           }
        .           
        .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
        .           /// while keeping the rest of `calculate_layout_for` independent of `T`
        .           #[derive(Copy, Clone)]
        .           struct TableLayout {
        .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
        .           
        .               #[inline]
        .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   let TableLayout { size, ctrl_align } = self;
        .                   // Manual layout calculation since Layout methods are not yet stable.
        .                   let ctrl_offset =
   20,394 ( 0.01%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
   27,368 ( 0.02%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
        .           
        .                   Some((
        .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
        .                       ctrl_offset,
        .                   ))
        .               }
        .           }
        .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
        .                   }
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub unsafe fn drop(&self) {
        .                   self.as_ptr().drop_in_place();
        .               }
        .               #[inline]
        .               pub unsafe fn read(&self) -> T {
       22 ( 0.00%)          self.as_ptr().read()
        .               }
        .               #[inline]
        .               pub unsafe fn write(&self, val: T) {
        .                   self.as_ptr().write(val);
        .               }
        .               #[inline]
        .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
        .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
        .               /// Creates a new empty hash table without allocating any memory, using the
        .               /// given allocator.
        .               ///
        .               /// In effect this returns a table with exactly 1 bucket. However we can
        .               /// leave the data pointer dangling since that bucket is never written to
        .               /// due to our load factor forcing us to always have at least 1 free bucket.
        .               #[inline]
        .               pub fn new_in(alloc: A) -> Self {
      132 ( 0.00%)          Self {
        .                       table: RawTableInner::new_in(alloc),
        .                       marker: PhantomData,
        .                   }
        .               }
        .           
        .               /// Allocates a new hash table with the given number of buckets.
        .               ///
        .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
        .               unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   Ok(Self {
       35 ( 0.00%)              table: RawTableInner::new_uninitialized(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           buckets,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
        .               /// Attempts to allocate a new hash table with at least enough capacity
        .               /// for inserting the given number of elements without reallocating.
        .               fn fallible_with_capacity(
        .                   alloc: A,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   Ok(Self {
    1,048 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           capacity,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
        .                   debug_assert_ne!(self.table.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               /// Erases an element from the table without dropping it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    1,198 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    1,198 ( 0.00%)          let index = self.bucket_index(item);
        .                   self.table.erase(index);
    2,396 ( 0.00%)      }
        .           
        .               /// Erases an element from the table, dropping it in place.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
        .                   // Erase the element from the table first since drop might panic.
      438 ( 0.00%)          self.erase_no_drop(&item);
        .                   item.drop();
        .               }
        .           
        .               /// Finds and erases an element from the table, dropping it in place.
        .               /// Returns true if an element was found.
        .               #[cfg(feature = "raw")]
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// Removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    1,958 ( 0.00%)          self.erase_no_drop(&item);
        9 ( 0.00%)          item.read()
        .               }
        .           
        .               /// Finds and removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
   69,088 ( 0.04%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
       22 ( 0.00%)          match self.find(hash, eq) {
      339 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
    7,500 ( 0.00%)              None => None,
        .                   }
  104,809 ( 0.06%)      }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear_no_drop(&mut self) {
        .                   self.table.clear_no_drop();
        .               }
        .           
        .               /// Removes all elements from the table without freeing the backing memory.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear(&mut self) {
        .                   // Ensure that the table is reset even if one of the drops panic
        .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
        .                   unsafe {
        1 ( 0.00%)              self_.drop_elements();
        .                   }
        .               }
        .           
        7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
      954 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
        .                       for item in self.iter() {
        .                           item.drop();
        .                       }
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
        .                   // Calculate the minimal number of elements that we need to reserve
        .                   // space for.
        .                   let min_size = usize::max(self.table.items, min_size);
        .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Ensures that at least `additional` items can be inserted into the table
        .               /// without reallocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
   47,625 ( 0.03%)          if additional > self.table.growth_left {
        .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
   16,883 ( 0.01%)              if self
        .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
        .                           .is_err()
        .                       {
        .                           unsafe { hint::unreachable_unchecked() }
        .                       }
        .                   }
        .               }
        .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
        .                   } else {
        .                       Ok(())
        .                   }
        .               }
        .           
        .               /// Out-of-line slow path for `reserve` and `try_reserve`.
        .               #[cold]
        .               #[inline(never)]
   39,639 ( 0.02%)      fn reserve_rehash(
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
        .               ) -> Result<(), TryReserveError> {
        .                   unsafe {
        .                       self.table.reserve_rehash_inner(
        .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
        .                           TableLayout::new::<T>(),
        .                           if mem::needs_drop::<T>() {
        .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
        .                           } else {
        .                               None
        .                           },
        .                       )
        .                   }
   25,664 ( 0.01%)      }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
        .               /// current table into it.
        .               fn resize(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
        .                       )
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns its raw bucket.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
  453,764 ( 0.25%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
        .                   unsafe {
        .                       let mut index = self.table.find_insert_slot(hash);
        .           
        .                       // We can avoid growing the table once we have reached our load
        .                       // factor if we are replacing a tombstone. This works since the
        .                       // number of EMPTY slots does not change in this case.
      471 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
  269,325 ( 0.15%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
        .                           self.reserve(1, hasher);
        .                           index = self.table.find_insert_slot(hash);
        .                       }
        .           
        .                       self.table.record_item_insert_at(index, old_ctrl, hash);
        .           
        .                       let bucket = self.bucket(index);
        2 ( 0.00%)              bucket.write(value);
        .                       bucket
        .                   }
  333,153 ( 0.18%)      }
        .           
        .               /// Attempts to insert a new element without growing the table and return its raw bucket.
        .               ///
        .               /// Returns an `Err` containing the given element if inserting it would require growing the
        .               /// table.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns a mutable reference to it.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
   98,568 ( 0.05%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
      108 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
   73,926 ( 0.04%)      }
        .           
        .               /// Inserts a new element into the table, without growing the table.
        .               ///
        .               /// There must be enough space in the table to insert the new element.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
       66 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
   63,689 ( 0.03%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
      666 ( 0.00%)          let bucket = self.table.bucket(index);
        .           
        .                   // If we are replacing a DELETED entry then we don't need to update
        .                   // the load counter.
  128,966 ( 0.07%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
        .           
        .                   bucket.write(value);
  104,196 ( 0.06%)          self.table.items += 1;
        .                   bucket
      124 ( 0.00%)      }
        .           
        .               /// Temporary removes a bucket, applying the given function to the removed
        .               /// element and optionally put back the returned value in the same bucket.
        .               ///
        .               /// Returns `true` if the bucket still contains an element
        .               ///
        .               /// This does not check if the given bucket is actually occupied.
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// Searches for an element in the table.
        .               #[inline]
      152 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
      204 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    1,000 ( 0.00%)              eq(self.bucket(index).as_ref())
       14 ( 0.00%)          });
        .           
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match result {
        7 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
        .                       None => None,
        .                   }
      152 ( 0.00%)      }
        .           
        .               /// Gets a reference to an element in the table.
        .               #[inline]
        .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
      629 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Gets a mutable reference to an element in the table.
        .               #[inline]
        .               pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
      107 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Attempts to get mutable references to `N` entries in the table at once.
        .               ///
        .               /// Returns an array of length `N` with the results of each query.
-- line 855 ----------------------------------------
-- line 920 ----------------------------------------
        .               #[inline]
        .               pub fn len(&self) -> usize {
        .                   self.table.items
        .               }
        .           
        .               /// Returns `true` if the table contains no elements.
        .               #[inline]
        .               pub fn is_empty(&self) -> bool {
   69,302 ( 0.04%)          self.len() == 0
        .               }
        .           
        .               /// Returns the number of buckets in the table.
        .               #[inline]
        .               pub fn buckets(&self) -> usize {
        .                   self.table.bucket_mask + 1
        .               }
        .           
-- line 936 ----------------------------------------
-- line 938 ----------------------------------------
        .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
        .               /// Because we cannot make the `next` method unsafe on the `RawIter`
        .               /// struct, we have to make the `iter` method unsafe.
        .               #[inline]
        .               pub unsafe fn iter(&self) -> RawIter<T> {
        .                   let data = Bucket::from_base_index(self.data_end(), 0);
        .                   RawIter {
        .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
    6,700 ( 0.00%)              items: self.table.items,
        .                   }
        .               }
        .           
        .               /// Returns an iterator over occupied buckets that could match a given hash.
        .               ///
        .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
        .               /// return items that have a hash value different than the one provided. You
        .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
        .               /// Iteration starts at the provided iterator's current location.
        .               ///
        .               /// It is up to the caller to ensure that the iterator is valid for this
        .               /// `RawTable` and covers all items that remain in the table.
        .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
        .                   debug_assert_eq!(iter.len(), self.len());
        .           
        .                   let alloc = self.table.alloc.clone();
      888 ( 0.00%)          let allocation = self.into_allocation();
      666 ( 0.00%)          RawIntoIter {
    1,110 ( 0.00%)              iter,
        .                       allocation,
        .                       marker: PhantomData,
        .                       alloc,
        .                   }
        .               }
        .           
        .               /// Converts the table into a raw allocation. The contents of the table
        .               /// should be dropped using a `RawIter` before freeing the allocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
      319 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
        .                       None
        .                   } else {
        .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
        .                           Some(lco) => lco,
        .                           None => unsafe { hint::unreachable_unchecked() },
        .                       };
        .                       Some((
       96 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
        .                           layout,
        .                       ))
        .                   };
        .                   mem::forget(self);
        .                   alloc
        .               }
        .           }
        .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<A> RawTableInner<A> {
        .               #[inline]
        .               const fn new_in(alloc: A) -> Self {
   44,677 ( 0.02%)          Self {
        .                       // Be careful to cast the entire slice to a raw pointer.
        .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
        .                       bucket_mask: 0,
        .                       items: 0,
        .                       growth_left: 0,
        .                       alloc,
        .                   }
        .               }
        .           }
        .           
        .           impl<A: Allocator + Clone> RawTableInner<A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
   33,007 ( 0.02%)      unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
        .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
        .                   // such allocations will never succeed anyways.
        .                   //
        .                   // This mirrors what Vec does in the standard library.
        .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
        .                       return Err(fallibility.capacity_overflow());
        .                   }
        .           
    8,364 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
        .                       Ok(block) => block.cast(),
        .                       Err(_) => return Err(fallibility.alloc_err(layout)),
        .                   };
        .           
        .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
   19,614 ( 0.01%)          Ok(Self {
        .                       ctrl,
    8,269 ( 0.00%)              bucket_mask: buckets - 1,
        .                       items: 0,
        .                       growth_left: bucket_mask_to_capacity(buckets - 1),
        .                       alloc,
        .                   })
   24,184 ( 0.01%)      }
        .           
        .               #[inline]
    4,104 ( 0.00%)      fn fallible_with_capacity(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
    1,044 ( 0.00%)          if capacity == 0 {
      690 ( 0.00%)              Ok(Self::new_in(alloc))
        .                   } else {
        .                       unsafe {
        .                           let buckets =
        .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
        .           
   15,150 ( 0.01%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
        .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
        .           
    2,276 ( 0.00%)                  Ok(result)
        .                       }
        .                   }
    4,104 ( 0.00%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element and sets the hash for that slot.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
   21,286 ( 0.01%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
        .                   let index = self.find_insert_slot(hash);
   21,286 ( 0.01%)          let old_ctrl = *self.ctrl(index);
        .                   self.set_ctrl_h2(index, hash);
        .                   (index, old_ctrl)
   42,572 ( 0.02%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
        .               fn find_insert_slot(&self, hash: u64) -> usize {
        .                   let mut probe_seq = self.probe_seq(hash);
        .                   loop {
        .                       unsafe {
        .                           let group = Group::load(self.ctrl(probe_seq.pos));
  182,014 ( 0.10%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
  529,678 ( 0.29%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
        .           
        .                               // In tables smaller than the group width, trailing control
        .                               // bytes outside the range of the table are filled with
        .                               // EMPTY entries. These will unfortunately trigger a
        .                               // match, but once masked may point to a full bucket that
        .                               // is already occupied. We detect this situation here and
        .                               // perform a second scan starting at the beginning of the
        .                               // table. This second scan is guaranteed to find an empty
        .                               // slot (due to the load factor) before hitting the trailing
        .                               // control bytes (containing EMPTY).
  243,863 ( 0.13%)                      if unlikely(is_full(*self.ctrl(result))) {
        .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
        .                                   debug_assert_ne!(probe_seq.pos, 0);
        .                                   return Group::load_aligned(self.ctrl(0))
        .                                       .match_empty_or_deleted()
        .                                       .lowest_set_bit_nonzero();
        .                               }
        .           
        .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
        .           
        .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
        .               /// code generated, but it is eliminated by LLVM optimizations.
        .               #[inline]
        .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
        .                   let h2_hash = h2(hash);
        .                   let mut probe_seq = self.probe_seq(hash);
        .           
    4,092 ( 0.00%)          loop {
        .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
        .           
  284,606 ( 0.16%)              for bit in group.match_byte(h2_hash) {
  393,690 ( 0.22%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
        .           
  260,887 ( 0.14%)                  if likely(eq(index)) {
        .                               return Some(index);
        .                           }
        .                       }
        .           
  144,654 ( 0.08%)              if likely(group.match_empty().any_bit_set()) {
        .                           return None;
        .                       }
        .           
        .                       probe_seq.move_next(self.bucket_mask);
        .                   }
        .               }
        .           
        .               #[allow(clippy::mut_mut)]
-- line 1198 ----------------------------------------
-- line 1225 ----------------------------------------
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               #[inline]
        .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
        .                   debug_assert_ne!(self.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   let base: *mut u8 = self.data_end().as_ptr();
  674,760 ( 0.37%)          base.sub((index + 1) * size_of)
        .               }
        .           
        .               #[inline]
        .               unsafe fn data_end<T>(&self) -> NonNull<T> {
        .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
        .               }
        .           
        .               /// Returns an iterator-like object for a probe sequence on the table.
        .               ///
        .               /// This iterator never terminates, but is guaranteed to visit each bucket
        .               /// group exactly once. The loop using `probe_seq` must terminate upon
        .               /// reaching a group containing an empty bucket.
        .               #[inline]
        .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
        .                   ProbeSeq {
2,132,813 ( 1.17%)              pos: h1(hash) & self.bucket_mask,
        .                       stride: 0,
        .                   }
        .               }
        .           
        .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
        .               /// in the table, otherwise returns error
        .               #[cfg(feature = "raw")]
        .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
        .                   } else {
        .                       self.record_item_insert_at(index, old_ctrl, hash);
        .                       Ok(index)
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
  336,635 ( 0.18%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
        .                   self.set_ctrl_h2(index, hash);
  269,308 ( 0.15%)          self.items += 1;
        .               }
        .           
        .               #[inline]
        .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
        .                   let probe_seq_pos = self.probe_seq(hash).pos;
        .                   let probe_index =
        .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
        .                   probe_index(i) == probe_index(new_i)
-- line 1281 ----------------------------------------
-- line 1312 ----------------------------------------
        .                   // replicate the buckets at the end of the trailing group. For example
        .                   // with 2 buckets and a group size of 4, the control bytes will look
        .                   // like this:
        .                   //
        .                   //     Real    |             Replicated
        .                   // ---------------------------------------------
        .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
        .                   // ---------------------------------------------
  519,062 ( 0.29%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
        .           
  173,018 ( 0.10%)          *self.ctrl(index) = ctrl;
  173,081 ( 0.10%)          *self.ctrl(index2) = ctrl;
        .               }
        .           
        .               /// Returns a pointer to a control byte.
        .               #[inline]
        .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
        .                   debug_assert!(index < self.num_ctrl_bytes());
        .                   self.ctrl.as_ptr().add(index)
        .               }
        .           
        .               #[inline]
        .               fn buckets(&self) -> usize {
   22,013 ( 0.01%)          self.bucket_mask + 1
        .               }
        .           
        .               #[inline]
        .               fn num_ctrl_bytes(&self) -> usize {
   18,416 ( 0.01%)          self.bucket_mask + 1 + Group::WIDTH
        .               }
        .           
        .               #[inline]
        .               fn is_empty_singleton(&self) -> bool {
   97,222 ( 0.05%)          self.bucket_mask == 0
        .               }
        .           
        .               #[allow(clippy::mut_mut)]
        .               #[inline]
        .               unsafe fn prepare_resize(
        .                   &self,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
        .                   debug_assert!(self.items <= capacity);
        .           
        .                   // Allocate and initialize the new table.
      762 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
        .                       self.alloc.clone(),
        .                       table_layout,
        .                       capacity,
        .                       fallibility,
        .                   )?;
   10,491 ( 0.01%)          new_table.growth_left -= self.items;
        .                   new_table.items = self.items;
        .           
        .                   // The hash function may panic, in which case we simply free the new
        .                   // table without dropping any elements that may have been copied into
        .                   // it.
        .                   //
        .                   // This guard is also used to free the old table on success, see
        .                   // the comment at the bottom of this function.
        .                   Ok(guard(new_table, move |self_| {
    4,867 ( 0.00%)              if !self_.is_empty_singleton() {
        .                           self_.free_buckets(table_layout);
        .                       }
        .                   }))
        .               }
        .           
        .               /// Reserves or rehashes to make room for `additional` more elements.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .                   drop: Option<fn(*mut u8)>,
        .               ) -> Result<(), TryReserveError> {
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
    9,735 ( 0.01%)          let new_items = match self.items.checked_add(additional) {
        .                       Some(new_items) => new_items,
        .                       None => return Err(fallibility.capacity_overflow()),
        .                   };
    9,734 ( 0.01%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
   20,480 ( 0.01%)          if new_items <= full_capacity / 2 {
        .                       // Rehash in-place without re-allocating if we have plenty of spare
        .                       // capacity that is locked up due to DELETED entries.
        .                       self.rehash_in_place(hasher, layout.size, drop);
        .                       Ok(())
        .                   } else {
        .                       // Otherwise, conservatively resize to at least the next size up
        .                       // to avoid churning deletes into frequent rehashes.
        .                       self.resize_inner(
    4,867 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
        .                           hasher,
        .                           fallibility,
        .                           layout,
        .                       )
        .                   }
        .               }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
        .               #[inline(always)]
        .               unsafe fn resize_inner(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .               ) -> Result<(), TryReserveError> {
    1,882 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
        .           
        .                   // Copy all elements to the new table.
        .                   for i in 0..self.buckets() {
   99,987 ( 0.05%)              if !is_full(*self.ctrl(i)) {
        .                           continue;
        .                       }
        .           
        .                       // This may panic.
        .                       let hash = hasher(self, i);
        .           
        .                       // We can use a simpler version of insert() here since:
        .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
        .                   }
        .           
        .                   // We successfully copied all elements without panicking. Now replace
        .                   // self with the new table. The old table will have its memory freed but
        .                   // the items will not be dropped (since they have been moved into the
        .                   // new table).
        .                   mem::swap(self, &mut new_table);
        .           
    4,867 ( 0.00%)          Ok(())
        .               }
        .           
        .               /// Rehashes the contents of the table in place (i.e. without changing the
        .               /// allocation).
        .               ///
        .               /// If `hasher` panics then some the table's contents may be lost.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1554 ----------------------------------------
        .               #[inline]
        .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
        .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
        .                       Some(lco) => lco,
        .                       None => hint::unreachable_unchecked(),
        .                   };
        .                   self.alloc.deallocate(
    3,075 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
        .                       layout,
        .                   );
        .               }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[inline]
        .               fn clear_no_drop(&mut self) {
      396 ( 0.00%)          if !self.is_empty_singleton() {
        .                       unsafe {
        .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
        .                       }
        .                   }
      500 ( 0.00%)          self.items = 0;
      396 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
        .               }
        .           
        .               #[inline]
        .               unsafe fn erase(&mut self, index: usize) {
        .                   debug_assert!(is_full(*self.ctrl(index)));
   16,883 ( 0.01%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
        .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
        .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
        .           
        .                   // If we are inside a continuous block of Group::WIDTH full or deleted
        .                   // cells then a probe window may have seen a full block when trying to
        .                   // insert. We therefore need to keep that block non-empty so that
        .                   // lookups will continue searching to the next probe window.
        .                   //
        .                   // Note that in this context `leading_zeros` refers to the bytes at the
        .                   // end of a group, while `trailing_zeros` refers to the bytes at the
        .                   // beginning of a group.
   67,532 ( 0.04%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
        .                       DELETED
        .                   } else {
   84,285 ( 0.05%)              self.growth_left += 1;
        .                       EMPTY
        .                   };
        .                   self.set_ctrl(index, ctrl);
   67,532 ( 0.04%)          self.items -= 1;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
      368 ( 0.00%)      fn clone(&self) -> Self {
       51 ( 0.00%)          if self.table.is_empty_singleton() {
        .                       Self::new_in(self.table.alloc.clone())
        .                   } else {
        .                       unsafe {
        .                           let mut new_table = ManuallyDrop::new(
        .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
        .                               match Self::new_uninitialized(
        .                                   self.table.alloc.clone(),
        .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
        .                               // We need to free the memory allocated for the new table.
        .                               new_table.free_buckets();
        .                           });
        .           
        .                           // Return the newly created table.
        .                           ManuallyDrop::into_inner(new_table)
        .                       }
        .                   }
      414 ( 0.00%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   if source.table.is_empty_singleton() {
        .                       *self = Self::new_in(self.table.alloc.clone());
        .                   } else {
        .                       unsafe {
        .                           // First, drop all our elements without clearing the control bytes.
        .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
        .                       .table
        .                       .ctrl(0)
        .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
        .                   source
        .                       .data_start()
        .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
        .           
        .                   self.table.items = source.table.items;
       14 ( 0.00%)          self.table.growth_left = source.table.growth_left;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
        .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
        .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
        .               fn default() -> Self {
        .                   Self::new_in(Default::default())
        .               }
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
   48,326 ( 0.03%)      fn drop(&mut self) {
   42,308 ( 0.02%)          if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
        .                           self.free_buckets();
        .                       }
        .                   }
   51,894 ( 0.03%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
        .               type Item = T;
        .               type IntoIter = RawIntoIter<T, A>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
      888 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
        .                   unsafe {
        .                       let iter = self.iter();
        .                       self.into_iter_from(iter)
        .                   }
    1,110 ( 0.00%)      }
        .           }
        .           
        .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
        .           /// not track an item count.
        .           pub(crate) struct RawIterRange<T> {
        .               // Mask of full buckets in the current group. Bits are cleared from this
        .               // mask as each element is processed.
        .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
        .           
        .           impl<T> Iterator for RawIterRange<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<Bucket<T>> {
        .                   unsafe {
        .                       loop {
   14,767 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    1,599 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    2,379 ( 0.00%)                      return Some(self.data.next_n(index));
        .                           }
        .           
   12,885 ( 0.01%)                  if self.next_ctrl >= self.end {
        .                               return None;
        .                           }
        .           
        .                           // We might read past self.end up to the next group boundary,
        .                           // but this is fine because it only occurs on tables smaller
        .                           // than the group size where the trailing control bytes are all
        .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
        .                           // to the group size (since tables are power-of-two sized).
      457 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
      156 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
    1,068 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
        .                       }
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   // We don't have an item count, so just guess based on the range size.
        .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
        .                           }
        .                       } else {
        .                           // We must have already iterated past the removed item.
        .                       }
        .                   }
        .               }
        .           
        .               unsafe fn drop_elements(&mut self) {
      326 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
        .                       for item in self {
        .                           item.drop();
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Iterator for RawIter<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
    1,884 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
    4,022 ( 0.00%)          if let Some(b) = self.iter.next() {
   16,657 ( 0.01%)              self.items -= 1;
        .                       Some(b)
        .                   } else {
        .                       // We don't check against items == 0 here to allow the
        .                       // compiler to optimize away the item count entirely if the
        .                       // iterator length is never queried.
        .                       debug_assert_eq!(self.items, 0);
        .                       None
        .                   }
    3,768 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   (self.items, Some(self.items))
        .               }
        .           }
        .           
        .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
      618 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
        .           
        .                       // Free the table
    1,474 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
        .                           self.alloc.deallocate(ptr, layout);
        .                       }
        .                   }
      174 ( 0.00%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
       49 ( 0.00%)      fn next(&mut self) -> Option<T> {
       27 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
       98 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        6 ( 0.00%)          self.iter.size_hint()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
        .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
        .           
        .           /// Iterator which consumes elements without freeing the table storage.
        .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
        .           where
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
       64 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements. Note that this may panic.
        .                       self.iter.drop_elements();
        .           
        .                       // Reset the contents of the table now that all elements have been
        .                       // dropped.
        .                       self.table.clear_no_drop();
        .           
        .                       // Move the now empty table back to its original location.
        8 ( 0.00%)              self.orig_table
        .                           .as_ptr()
        .                           .copy_from_nonoverlapping(&*self.table, 1);
        .                   }
       64 ( 0.00%)      }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<T> {
        .                   unsafe {
-- line 2289 ----------------------------------------

1,138,754 ( 0.63%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/dl-lookup.c
  ./elf/do-rel.h
  ./malloc/malloc.c
  ./stdlib/cxa_finalize.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/strcmp.S

--------------------------------------------------------------------------------
Ir                  
--------------------------------------------------------------------------------
75,249,339 (41.34%)  events annotated

