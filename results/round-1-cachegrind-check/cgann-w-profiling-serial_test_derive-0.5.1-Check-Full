--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name serial_test_derive --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,metadata -C prefer-dynamic -C embed-bitcode=no -C debuginfo=2 -C metadata=1c5de167948aa0b3 -C extra-filename=-1c5de167948aa0b3 --out-dir /usr/home/liquid/tmp/.tmpBNJHXz/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmpBNJHXz/target/debug/deps --extern proc_macro2=/usr/home/liquid/tmp/.tmpBNJHXz/target/debug/deps/libproc_macro2-7b2f9f9525c82488.rmeta --extern quote=/usr/home/liquid/tmp/.tmpBNJHXz/target/debug/deps/libquote-50b0058a72366b95.rmeta --extern syn=/usr/home/liquid/tmp/.tmpBNJHXz/target/debug/deps/libsyn-66547f1ced09ec5a.rmeta --extern proc_macro -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-serial_test_derive-0.5.1-Check-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
217,146,407 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   file:function
--------------------------------------------------------------------------------
10,305,124 ( 4.75%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
 7,113,237 ( 3.28%)  ./malloc/malloc.c:_int_free
 6,658,942 ( 3.07%)  ./malloc/malloc.c:_int_malloc
 4,835,679 ( 2.23%)  ./elf/dl-lookup.c:do_lookup_x
 4,739,818 ( 2.18%)  ./malloc/malloc.c:malloc
 4,141,271 ( 1.91%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
 3,787,591 ( 1.74%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
 3,065,593 ( 1.41%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,733,289 ( 1.26%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,562,165 ( 1.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,157,152 ( 0.99%)  ./malloc/malloc.c:free
 2,139,033 ( 0.99%)  ./elf/do-rel.h:_dl_relocate_object
 2,124,191 ( 0.98%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/macro_parser.rs:rustc_expand::mbe::macro_parser::parse_tt
 1,674,270 ( 0.77%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::TokenCursor>::next
 1,635,058 ( 0.75%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump
 1,487,056 ( 0.68%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs:rustc_expand::mbe::macro_parser::parse_tt
 1,362,217 ( 0.63%)  ???:SetImpliedBits(llvm::FeatureBitset&, llvm::FeatureBitset const&, llvm::ArrayRef<llvm::SubtargetFeatureKV>)
 1,236,099 ( 0.57%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 1,183,299 ( 0.54%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
 1,178,831 ( 0.54%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
 1,175,443 ( 0.54%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
 1,140,444 ( 0.53%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs:<rustc_ast::tokenstream::Cursor>::next_with_spacing
 1,107,933 ( 0.51%)  ./malloc/malloc.c:malloc_consolidate
   949,918 ( 0.44%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
   864,856 ( 0.40%)  ./elf/dl-lookup.c:check_match
   861,798 ( 0.40%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   809,335 ( 0.37%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::Token as core::clone::Clone>::clone
   784,586 ( 0.36%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   762,599 ( 0.35%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
   742,225 ( 0.34%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump_with
   699,909 ( 0.32%)  ./malloc/malloc.c:unlink_chunk.constprop.0
   649,674 ( 0.30%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_middle::hir::map::Map>::attrs
   639,065 ( 0.29%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
   626,396 ( 0.29%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::Token>::ident
   621,293 ( 0.29%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   612,719 ( 0.28%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   583,939 ( 0.27%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs:<&str as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   557,634 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   542,731 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
   530,302 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/transcribe.rs:rustc_expand::mbe::transcribe::transcribe
   529,040 ( 0.24%)  ./string/../sysdeps/x86_64/strcmp.S:strcmp
   528,363 ( 0.24%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
   507,730 ( 0.23%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs:<hashbrown::map::HashMap<(rustc_span::hygiene::SyntaxContext, rustc_span::hygiene::ExpnId, rustc_span::hygiene::Transparency), rustc_span::hygiene::SyntaxContext, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
   495,616 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::TokenKind as core::cmp::PartialEq>::eq
   475,024 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<alloc::vec::Vec<rustc_parse::parser::TokenType>>::truncate
   464,533 ( 0.21%)  ./malloc/malloc.c:realloc
   459,321 ( 0.21%)  ???:llvm::StringMapImpl::LookupBucketFor(llvm::StringRef)
   443,826 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::TokenCursor>::next_desugared
   429,848 ( 0.20%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs:<smallvec::SmallVec<[rustc_expand::mbe::macro_parser::MatcherPosHandle; 1]> as core::ops::drop::Drop>::drop
   429,228 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   416,059 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
   409,093 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/nonterminal.rs:<rustc_parse::parser::Parser>::parse_nonterminal
   399,899 ( 0.18%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
   389,959 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   389,959 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   389,959 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   384,307 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:rustc_expand::mbe::macro_parser::parse_tt
   364,068 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
   363,732 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>)>>::remove_entry::<hashbrown::map::equivalent_key<rustc_span::def_id::DefId, rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>>::{closure#0}>
   362,462 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   354,983 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
   338,573 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/hygiene.rs:<rustc_span::hygiene::HygieneData>::apply_mark
   337,596 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/rc.rs:<alloc::rc::Rc<alloc::vec::Vec<(rustc_ast::tokenstream::TokenTree, rustc_ast::tokenstream::Spacing)>> as core::ops::drop::Drop>::drop
   335,903 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_u32
   333,018 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<rustc_span::hygiene::SyntaxContext as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   332,329 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs:<rustc_span::symbol::Symbol>::intern
   331,816 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser as alloc::borrow::ToOwned>::to_owned
   327,547 ( 0.15%)  ./malloc/malloc.c:_int_realloc
   322,070 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   321,822 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/span_encoding.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   320,558 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   319,652 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe.rs:rustc_expand::mbe::macro_parser::parse_tt
   311,734 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:core::ptr::drop_in_place::<rustc_expand::mbe::macro_parser::MatcherPos>
   307,127 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<rustc_span::symbol::Symbol>::intern
   306,060 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs:<smallvec::SmallVec<[rustc_expand::mbe::macro_parser::NamedMatch; 4]> as core::iter::traits::collect::Extend<rustc_expand::mbe::macro_parser::NamedMatch>>::extend::<core::iter::adapters::cloned::Cloned<core::slice::iter::Iter<rustc_expand::mbe::macro_parser::NamedMatch>>>
   305,899 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::check
   299,114 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
   298,475 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::source_map::SourceMap>::lookup_source_file_idx
   297,661 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(&str, rustc_span::symbol::Symbol)>>::insert::<hashbrown::map::make_hasher<&str, &str, rustc_span::symbol::Symbol, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   296,413 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::find_parent_node
   294,267 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   289,812 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/rc.rs:<alloc::rc::Rc<smallvec::SmallVec<[rustc_expand::mbe::macro_parser::NamedMatch; 4]>>>::make_mut
   280,030 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/hygiene.rs:<rustc_span::hygiene::HygieneData>::apply_mark_internal
   279,602 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/macro_parser.rs:rustc_expand::mbe::macro_parser::count_names::{closure#0}
   272,625 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/md-5-0.9.1/src/utils.rs:md5::utils::compress
   272,273 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/thread/local.rs:rustc_span::SESSION_GLOBALS::FOO::__getit
   271,060 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, rustc_infer::infer::region_constraints::Constraint, rustc_infer::infer::SubregionOrigin, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<rustc_infer::infer::region_constraints::Constraint>
   268,486 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
   267,201 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_parse::parser::Parser>::bump_with
   266,684 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<rustc_middle::ty::subst::SubstFolder as rustc_middle::ty::fold::TypeFolder>::fold_ty
   261,171 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
   258,252 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::TokenKind as core::clone::Clone>::clone
   255,539 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_traits/src/dropck_outlives.rs:<rustc_infer::infer::InferCtxtBuilder>::enter_with_canonical::<rustc_middle::ty::ParamEnvAnd<&rustc_middle::ty::TyS>, core::result::Result<&rustc_middle::infer::canonical::Canonical<rustc_middle::infer::canonical::QueryResponse<rustc_middle::traits::query::DropckOutlivesResult>>, rustc_middle::traits::query::NoSolution>, rustc_traits::dropck_outlives::dropck_outlives::{closure#0}>
   254,003 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
   253,639 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::HashMap<(rustc_span::hygiene::SyntaxContext, rustc_span::hygiene::ExpnId, rustc_span::hygiene::Transparency), rustc_span::hygiene::SyntaxContext, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
   251,350 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
   248,073 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::parse_token_tree
   244,783 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<rustc_metadata::creader::CrateMetadataRef>::opt_item_ident
   238,724 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core.rs:<indexmap::map::core::Entry<rustc_middle::ty::fast_reject::SimplifiedTypeGen<rustc_span::def_id::DefId>, alloc::vec::Vec<rustc_span::def_id::DefId>>>::or_default
   238,456 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:md5::utils::compress
   235,552 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::attrs
   235,466 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs:<smallvec::SmallVec<[rustc_expand::mbe::macro_parser::NamedMatch; 4]>>::try_reserve
   235,363 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::HashMap<&rustc_middle::ty::TyS, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::insert
   234,464 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/rc.rs:core::ptr::drop_in_place::<rustc_expand::mbe::macro_parser::MatcherPos>
   232,050 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/table.rs:<rustc_metadata::rmeta::Lazy<rustc_metadata::rmeta::table::Table<rustc_span::def_id::DefIndex, rustc_metadata::rmeta::Lazy<rustc_span::def_id::DefId, ()>>, usize>>::get::<rustc_metadata::creader::CrateMetadataRef>
   231,137 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::Token>::is_keyword
   229,954 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/lib.rs:<rustc_resolve::Resolver>::resolve_path_with_ribs
   225,519 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
   224,180 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<&str as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   223,381 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   223,098 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/query/normalize.rs:<rustc_infer::infer::at::At as rustc_trait_selection::traits::query::normalize::AtExt>::normalize::<&rustc_middle::ty::TyS>
   221,269 ( 0.10%)  ./stdlib/cxa_finalize.c:__cxa_finalize
   220,943 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<rustc_metadata::creader::CrateMetadataRef>::def_key
   218,449 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs:<rustc_borrowck::MirBorrowckCtxt>::access_place
   217,494 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::Token>::lifetime

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs
--------------------------------------------------------------------------------
Ir               

-- line 26 ----------------------------------------
      .           use tracing::debug;
      .           
      .           #[cfg(test)]
      .           mod tests;
      .           
      .           /// Returns the span itself if it doesn't come from a macro expansion,
      .           /// otherwise return the call site span up to the `enclosing_sp` by
      .           /// following the `expn_data` chain.
     28 ( 0.00%)  pub fn original_sp(sp: Span, enclosing_sp: Span) -> Span {
      .               let expn_data1 = sp.ctxt().outer_expn_data();
      .               let expn_data2 = enclosing_sp.ctxt().outer_expn_data();
      6 ( 0.00%)      if expn_data1.is_root() || !expn_data2.is_root() && expn_data1.call_site == expn_data2.call_site
      .               {
      .                   sp
      .               } else {
      6 ( 0.00%)          original_sp(expn_data1.call_site, enclosing_sp)
      .               }
     20 ( 0.00%)  }
      .           
      .           pub mod monotonic {
      .               use std::ops::{Deref, DerefMut};
      .           
      .               /// A `MonotonicVec` is a `Vec` which can only be grown.
      .               /// Once inserted, an element can never be removed or swapped,
      .               /// guaranteeing that any indices into a `MonotonicVec` are stable
      .               // This is declared in its own module to ensure that the private
-- line 51 ----------------------------------------
-- line 72 ----------------------------------------
      .                   fn deref(&self) -> &Self::Target {
      .                       &self.0
      .                   }
      .               }
      .           
      .               impl<T> !DerefMut for MonotonicVec<T> {}
      .           }
      .           
    273 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, Copy, HashStable_Generic)]
      .           pub struct Spanned<T> {
      .               pub node: T,
      .               pub span: Span,
      .           }
      .           
      .           pub fn respan<T>(sp: Span, t: T) -> Spanned<T> {
    491 ( 0.00%)      Spanned { node: t, span: sp }
  3,995 ( 0.00%)  }
      .           
      .           pub fn dummy_spanned<T>(t: T) -> Spanned<T> {
      .               respan(DUMMY_SP, t)
      .           }
      .           
      .           // _____________________________________________________________________________
      .           // SourceFile, MultiByteChar, FileName, FileLines
      .           //
-- line 96 ----------------------------------------
-- line 107 ----------------------------------------
      .           /// A FileLoader that uses std::fs to load real files.
      .           pub struct RealFileLoader;
      .           
      .           impl FileLoader for RealFileLoader {
      .               fn file_exists(&self, path: &Path) -> bool {
      .                   path.exists()
      .               }
      .           
      4 ( 0.00%)      fn read_file(&self, path: &Path) -> io::Result<String> {
      .                   fs::read_to_string(path)
      6 ( 0.00%)      }
      .           }
      .           
      .           /// This is a [SourceFile] identifier that is used to correlate source files between
      .           /// subsequent compilation sessions (which is something we need to do during
      .           /// incremental compilation).
      .           ///
      .           /// The [StableSourceFileId] also contains the CrateNum of the crate the source
      .           /// file was originally parsed for. This way we get two separate entries in
-- line 125 ----------------------------------------
-- line 128 ----------------------------------------
      .           /// at the point where we discover that there's a local use of the file in
      .           /// addition to the upstream one, we might already have made decisions based on
      .           /// the assumption that it's an upstream file. Treating the two files as
      .           /// different has no real downsides.
      .           #[derive(Copy, Clone, PartialEq, Eq, Hash, Encodable, Decodable, Debug)]
      .           pub struct StableSourceFileId {
      .               // A hash of the source file's FileName. This is hash so that it's size
      .               // is more predictable than if we included the actual FileName value.
     49 ( 0.00%)      pub file_name_hash: u64,
      .           
      .               // The CrateNum of the crate this source file was originally parsed for.
      .               // We cannot include this information in the hash because at the time
      .               // of hashing we don't have the context to map from the CrateNum's numeric
      .               // value to a StableCrateId.
      .               pub cnum: CrateNum,
      .           }
      .           
      .           // FIXME: we need a more globally consistent approach to the problem solved by
      .           // StableSourceFileId, perhaps built atop source_file.name_hash.
      .           impl StableSourceFileId {
      .               pub fn new(source_file: &SourceFile) -> StableSourceFileId {
  1,192 ( 0.00%)          StableSourceFileId::new_from_name(&source_file.name, source_file.cnum)
      .               }
      .           
  2,985 ( 0.00%)      fn new_from_name(name: &FileName, cnum: CrateNum) -> StableSourceFileId {
      .                   let mut hasher = StableHasher::new();
    597 ( 0.00%)          name.hash(&mut hasher);
      .                   StableSourceFileId { file_name_hash: hasher.finish(), cnum }
  3,582 ( 0.00%)      }
      .           }
      .           
      .           // _____________________________________________________________________________
      .           // SourceMap
      .           //
      .           
      .           #[derive(Default)]
      .           pub(super) struct SourceMapFiles {
-- line 164 ----------------------------------------
-- line 184 ----------------------------------------
      .               pub fn new(path_mapping: FilePathMapping) -> SourceMap {
      .                   Self::with_file_loader_and_hash_kind(
      .                       Box::new(RealFileLoader),
      .                       path_mapping,
      .                       SourceFileHashAlgorithm::Md5,
      .                   )
      .               }
      .           
      1 ( 0.00%)      pub fn with_file_loader_and_hash_kind(
      .                   file_loader: Box<dyn FileLoader + Sync + Send>,
      .                   path_mapping: FilePathMapping,
      .                   hash_kind: SourceFileHashAlgorithm,
      .               ) -> SourceMap {
      5 ( 0.00%)          SourceMap {
      .                       used_address_space: AtomicU32::new(0),
      .                       files: Default::default(),
      .                       file_loader,
      4 ( 0.00%)              path_mapping,
      .                       hash_kind,
      .                   }
      1 ( 0.00%)      }
      .           
      .               pub fn path_mapping(&self) -> &FilePathMapping {
      3 ( 0.00%)          &self.path_mapping
      3 ( 0.00%)      }
      .           
      .               pub fn file_exists(&self, path: &Path) -> bool {
      .                   self.file_loader.file_exists(path)
      .               }
      .           
     11 ( 0.00%)      pub fn load_file(&self, path: &Path) -> io::Result<Lrc<SourceFile>> {
      4 ( 0.00%)          let src = self.file_loader.read_file(path)?;
      .                   let filename = path.to_owned().into();
     18 ( 0.00%)          Ok(self.new_source_file(filename, src))
      9 ( 0.00%)      }
      .           
      .               /// Loads source file as a binary blob.
      .               ///
      .               /// Unlike `load_file`, guarantees that no normalization like BOM-removal
      .               /// takes place.
      .               pub fn load_binary_file(&self, path: &Path) -> io::Result<Vec<u8>> {
      .                   // Ideally, this should use `self.file_loader`, but it can't
      .                   // deal with binary files yet.
-- line 226 ----------------------------------------
-- line 233 ----------------------------------------
      .                   // empty string.
      .                   let text = std::str::from_utf8(&bytes).unwrap_or("").to_string();
      .                   self.new_source_file(path.to_owned().into(), text);
      .                   Ok(bytes)
      .               }
      .           
      .               // By returning a `MonotonicVec`, we ensure that consumers cannot invalidate
      .               // any existing indices pointing into `files`.
      4 ( 0.00%)      pub fn files(&self) -> MappedReadGuard<'_, monotonic::MonotonicVec<Lrc<SourceFile>>> {
      .                   ReadGuard::map(self.files.borrow(), |files| &files.source_files)
     12 ( 0.00%)      }
      .           
      4 ( 0.00%)      pub fn source_file_by_stable_id(
      .                   &self,
      .                   stable_id: StableSourceFileId,
      .               ) -> Option<Lrc<SourceFile>> {
      .                   self.files.borrow().stable_id_to_source_file.get(&stable_id).cloned()
      5 ( 0.00%)      }
      .           
      .               fn allocate_address_space(&self, size: usize) -> Result<usize, OffsetOverflowError> {
    597 ( 0.00%)          let size = u32::try_from(size).map_err(|_| OffsetOverflowError)?;
      .           
      .                   loop {
    597 ( 0.00%)              let current = self.used_address_space.load(Ordering::Relaxed);
  1,791 ( 0.00%)              let next = current
      .                           .checked_add(size)
      .                           // Add one so there is some space between files. This lets us distinguish
      .                           // positions in the `SourceMap`, even in the presence of zero-length files.
      .                           .and_then(|next| next.checked_add(1))
      .                           .ok_or(OffsetOverflowError)?;
      .           
      .                       if self
      .                           .used_address_space
-- line 265 ----------------------------------------
-- line 269 ----------------------------------------
      .                           return Ok(usize::try_from(current).unwrap());
      .                       }
      .                   }
      .               }
      .           
      .               /// Creates a new `SourceFile`.
      .               /// If a file already exists in the `SourceMap` with the same ID, that file is returned
      .               /// unmodified.
      8 ( 0.00%)      pub fn new_source_file(&self, filename: FileName, src: String) -> Lrc<SourceFile> {
     12 ( 0.00%)          self.try_new_source_file(filename, src).unwrap_or_else(|OffsetOverflowError| {
      .                       eprintln!("fatal error: rustc does not support files larger than 4GB");
      .                       crate::fatal_error::FatalError.raise()
      .                   })
      9 ( 0.00%)      }
      .           
      .               fn try_new_source_file(
      .                   &self,
      .                   filename: FileName,
      .                   src: String,
      .               ) -> Result<Lrc<SourceFile>, OffsetOverflowError> {
      .                   // Note that filename may not be a valid path, eg it may be `<anon>` etc,
      .                   // but this is okay because the directory determined by `path.pop()` will
      .                   // be empty, so the working directory will be used.
     13 ( 0.00%)          let (filename, _) = self.path_mapping.map_filename_prefix(&filename);
      .           
      2 ( 0.00%)          let file_id = StableSourceFileId::new_from_name(&filename, LOCAL_CRATE);
      .           
      6 ( 0.00%)          let lrc_sf = match self.source_file_by_stable_id(file_id) {
      .                       Some(lrc_sf) => lrc_sf,
      .                       None => {
      .                           let start_pos = self.allocate_address_space(src.len())?;
      .           
      6 ( 0.00%)                  let source_file = Lrc::new(SourceFile::new(
      9 ( 0.00%)                      filename,
      3 ( 0.00%)                      src,
      .                               Pos::from_usize(start_pos),
      .                               self.hash_kind,
      .                           ));
      .           
      .                           // Let's make sure the file_id we generated above actually matches
      .                           // the ID we generate for the SourceFile we just created.
      .                           debug_assert_eq!(StableSourceFileId::new(&source_file), file_id);
      .           
-- line 311 ----------------------------------------
-- line 319 ----------------------------------------
      .                   };
      .                   Ok(lrc_sf)
      .               }
      .           
      .               /// Allocates a new `SourceFile` representing a source file from an external
      .               /// crate. The source code of such an "imported `SourceFile`" is not available,
      .               /// but we still know enough to generate accurate debuginfo location
      .               /// information for things inlined from other crates.
  4,768 ( 0.00%)      pub fn new_imported_source_file(
      .                   &self,
      .                   filename: FileName,
      .                   src_hash: SourceFileHash,
      .                   name_hash: u128,
      .                   source_len: usize,
      .                   cnum: CrateNum,
      .                   mut file_local_lines: Vec<BytePos>,
      .                   mut file_local_multibyte_chars: Vec<MultiByteChar>,
-- line 335 ----------------------------------------
-- line 341 ----------------------------------------
      .                   let start_pos = self
      .                       .allocate_address_space(source_len)
      .                       .expect("not enough address space for imported source file");
      .           
      .                   let end_pos = Pos::from_usize(start_pos + source_len);
      .                   let start_pos = Pos::from_usize(start_pos);
      .           
      .                   for pos in &mut file_local_lines {
389,959 ( 0.18%)              *pos = *pos + start_pos;
      .                   }
      .           
      .                   for mbc in &mut file_local_multibyte_chars {
    844 ( 0.00%)              mbc.pos = mbc.pos + start_pos;
      .                   }
      .           
      .                   for swc in &mut file_local_non_narrow_chars {
    616 ( 0.00%)              *swc = *swc + start_pos;
      .                   }
      .           
      .                   for nc in &mut file_local_normalized_pos {
      .                       nc.pos = nc.pos + start_pos;
      .                   }
      .           
  1,788 ( 0.00%)          let source_file = Lrc::new(SourceFile {
  4,768 ( 0.00%)              name: filename,
      .                       src: None,
      .                       src_hash,
      .                       external_src: Lock::new(ExternalSource::Foreign {
      .                           kind: ExternalSourceKind::AbsentOk,
      .                           original_start_pos,
      .                           original_end_pos,
      .                       }),
      .                       start_pos,
-- line 373 ----------------------------------------
-- line 383 ----------------------------------------
      .                   let mut files = self.files.borrow_mut();
      .           
      .                   files.source_files.push(source_file.clone());
      .                   files
      .                       .stable_id_to_source_file
      .                       .insert(StableSourceFileId::new(&source_file), source_file.clone());
      .           
      .                   source_file
  5,364 ( 0.00%)      }
      .           
      .               // If there is a doctest offset, applies it to the line.
      .               pub fn doctest_offset_line(&self, file: &FileName, orig: usize) -> usize {
      .                   match file {
      .                       FileName::DocTest(_, offset) => {
      .                           if *offset < 0 {
      .                               orig - (-(*offset)) as usize
      .                           } else {
-- line 399 ----------------------------------------
-- line 400 ----------------------------------------
      .                               orig + *offset as usize
      .                           }
      .                       }
      .                       _ => orig,
      .                   }
      .               }
      .           
      .               /// Return the SourceFile that contains the given `BytePos`
      3 ( 0.00%)      pub fn lookup_source_file(&self, pos: BytePos) -> Lrc<SourceFile> {
      1 ( 0.00%)          let idx = self.lookup_source_file_idx(pos);
      1 ( 0.00%)          (*self.files.borrow().source_files)[idx].clone()
      3 ( 0.00%)      }
      .           
      .               /// Looks up source information about a `BytePos`.
      .               pub fn lookup_char_pos(&self, pos: BytePos) -> Loc {
      5 ( 0.00%)          let sf = self.lookup_source_file(pos);
      6 ( 0.00%)          let (line, col, col_display) = sf.lookup_file_pos_with_col_display(pos);
      3 ( 0.00%)          Loc { file: sf, line, col, col_display }
      .               }
      .           
      .               // If the corresponding `SourceFile` is empty, does not return a line number.
      .               pub fn lookup_line(&self, pos: BytePos) -> Result<SourceFileAndLine, Lrc<SourceFile>> {
      .                   let f = self.lookup_source_file(pos);
      .           
      .                   match f.lookup_line(pos) {
      .                       Some(line) => Ok(SourceFileAndLine { sf: f, line }),
-- line 425 ----------------------------------------
-- line 451 ----------------------------------------
      .           
      .               /// Format the span location to be printed in diagnostics. Must not be emitted
      .               /// to build artifacts as this may leak local file paths. Use span_to_embeddable_string
      .               /// for string suitable for embedding.
      .               pub fn span_to_diagnostic_string(&self, sp: Span) -> String {
      .                   self.span_to_string(sp, self.path_mapping.filename_display_for_diagnostics)
      .               }
      .           
     11 ( 0.00%)      pub fn span_to_filename(&self, sp: Span) -> FileName {
      3 ( 0.00%)          self.lookup_char_pos(sp.lo()).file.name.clone()
      8 ( 0.00%)      }
      .           
      .               pub fn filename_for_diagnostics<'a>(&self, filename: &'a FileName) -> FileNameDisplay<'a> {
      .                   filename.display(self.path_mapping.filename_display_for_diagnostics)
      .               }
      .           
    627 ( 0.00%)      pub fn is_multiline(&self, sp: Span) -> bool {
    228 ( 0.00%)          let lo = self.lookup_source_file_idx(sp.lo());
    228 ( 0.00%)          let hi = self.lookup_source_file_idx(sp.hi());
    114 ( 0.00%)          if lo != hi {
      .                       return true;
      .                   }
    114 ( 0.00%)          let f = (*self.files.borrow().source_files)[lo].clone();
      .                   f.lookup_line(sp.lo()) != f.lookup_line(sp.hi())
    513 ( 0.00%)      }
      .           
      .               #[instrument(skip(self), level = "trace")]
      .               pub fn is_valid_span(&self, sp: Span) -> Result<(Loc, Loc), SpanLinesError> {
      .                   let lo = self.lookup_char_pos(sp.lo());
      .                   trace!(?lo);
      .                   let hi = self.lookup_char_pos(sp.hi());
      .                   trace!(?hi);
      .                   if lo.file.start_pos != hi.file.start_pos {
-- line 483 ----------------------------------------
-- line 533 ----------------------------------------
      .           
      .               /// Extracts the source surrounding the given `Span` using the `extract_source` function. The
      .               /// extract function takes three arguments: a string slice containing the source, an index in
      .               /// the slice for the beginning of the span and an index in the slice for the end of the span.
      .               fn span_to_source<F, T>(&self, sp: Span, extract_source: F) -> Result<T, SpanSnippetError>
      .               where
      .                   F: Fn(&str, usize, usize) -> Result<T, SpanSnippetError>,
      .               {
    131 ( 0.00%)          let local_begin = self.lookup_byte_offset(sp.lo());
    131 ( 0.00%)          let local_end = self.lookup_byte_offset(sp.hi());
      .           
     38 ( 0.00%)          if local_begin.sf.start_pos != local_end.sf.start_pos {
      .                       Err(SpanSnippetError::DistinctSources(DistinctSources {
      .                           begin: (local_begin.sf.name.clone(), local_begin.sf.start_pos),
      .                           end: (local_end.sf.name.clone(), local_end.sf.start_pos),
      .                       }))
      .                   } else {
      .                       self.ensure_source_file_source_present(local_begin.sf.clone());
      .           
      .                       let start_index = local_begin.pos.to_usize();
      .                       let end_index = local_end.pos.to_usize();
     19 ( 0.00%)              let source_len = (local_begin.sf.end_pos - local_begin.sf.start_pos).to_usize();
      .           
     76 ( 0.00%)              if start_index > end_index || end_index > source_len {
      .                           return Err(SpanSnippetError::MalformedForSourcemap(MalformedSourceMapPositions {
      .                               name: local_begin.sf.name.clone(),
      .                               source_len,
      .                               begin_pos: local_begin.pos,
      .                               end_pos: local_end.pos,
      .                           }));
      .                       }
      .           
     57 ( 0.00%)              if let Some(ref src) = local_begin.sf.src {
      4 ( 0.00%)                  extract_source(src, start_index, end_index)
      4 ( 0.00%)              } else if let Some(src) = local_begin.sf.external_src.borrow().get_source() {
      4 ( 0.00%)                  extract_source(src, start_index, end_index)
      .                       } else {
      .                           Err(SpanSnippetError::SourceNotAvailable { filename: local_begin.sf.name.clone() })
      .                       }
      .                   }
      .               }
      .           
      .               /// Returns whether or not this span points into a file
      .               /// in the current crate. This may be `false` for spans
-- line 576 ----------------------------------------
-- line 579 ----------------------------------------
      .               pub fn is_local_span(&self, sp: Span) -> bool {
      .                   let local_begin = self.lookup_byte_offset(sp.lo());
      .                   let local_end = self.lookup_byte_offset(sp.hi());
      .                   // This might be a weird span that covers multiple files
      .                   local_begin.sf.src.is_some() && local_end.sf.src.is_some()
      .               }
      .           
      .               /// Returns the source snippet as `String` corresponding to the given `Span`.
    204 ( 0.00%)      pub fn span_to_snippet(&self, sp: Span) -> Result<String, SpanSnippetError> {
      .                   self.span_to_source(sp, |src, start_index, end_index| {
      .                       src.get(start_index..end_index)
      .                           .map(|s| s.to_string())
      .                           .ok_or(SpanSnippetError::IllFormedSpan(sp))
      .                   })
    153 ( 0.00%)      }
      .           
      .               pub fn span_to_margin(&self, sp: Span) -> Option<usize> {
      .                   Some(self.indentation_before(sp)?.len())
      .               }
      .           
      .               pub fn indentation_before(&self, sp: Span) -> Option<String> {
      .                   self.span_to_source(sp, |src, start_index, _| {
      .                       let before = &src[..start_index];
-- line 601 ----------------------------------------
-- line 659 ----------------------------------------
      .               }
      .           
      .               /// Extends the given `Span` while the next character matches the predicate
      .               pub fn span_extend_while(
      .                   &self,
      .                   span: Span,
      .                   f: impl Fn(char) -> bool,
      .               ) -> Result<Span, SpanSnippetError> {
     16 ( 0.00%)          self.span_to_source(span, |s, _start, end| {
      .                       let n = s[end..].char_indices().find(|&(_, c)| !f(c)).map_or(s.len() - end, |(i, _)| i);
     20 ( 0.00%)              Ok(span.with_hi(span.hi() + BytePos(n as u32)))
     16 ( 0.00%)          })
      .               }
      .           
      .               /// Extends the given `Span` to just after the next occurrence of `c`.
      .               pub fn span_extend_to_next_char(&self, sp: Span, c: char, accept_newlines: bool) -> Span {
      .                   if let Ok(next_source) = self.span_to_next_source(sp) {
      .                       let next_source = next_source.split(c).next().unwrap_or("");
      .                       if !next_source.is_empty() && (accept_newlines || !next_source.contains('\n')) {
      .                           return sp.with_hi(BytePos(sp.hi().0 + next_source.len() as u32));
-- line 678 ----------------------------------------
-- line 679 ----------------------------------------
      .                       }
      .                   }
      .           
      .                   sp
      .               }
      .           
      .               /// Given a `Span`, tries to get a shorter span ending before the first occurrence of `char`
      .               /// `c`.
    143 ( 0.00%)      pub fn span_until_char(&self, sp: Span, c: char) -> Span {
     52 ( 0.00%)          match self.span_to_snippet(sp) {
     52 ( 0.00%)              Ok(snippet) => {
      .                           let snippet = snippet.split(c).next().unwrap_or("").trim_end();
     24 ( 0.00%)                  if !snippet.is_empty() && !snippet.contains('\n') {
     50 ( 0.00%)                      sp.with_hi(BytePos(sp.lo().0 + snippet.len() as u32))
      .                           } else {
      .                               sp
      .                           }
      .                       }
      .                       _ => sp,
      .                   }
    117 ( 0.00%)      }
      .           
      .               /// Given a `Span`, tries to get a shorter span ending just after the first occurrence of `char`
      .               /// `c`.
      .               pub fn span_through_char(&self, sp: Span, c: char) -> Span {
      .                   if let Ok(snippet) = self.span_to_snippet(sp) {
      .                       if let Some(offset) = snippet.find(c) {
      .                           return sp.with_hi(BytePos(sp.lo().0 + (offset + c.len_utf8()) as u32));
      .                       }
-- line 707 ----------------------------------------
-- line 750 ----------------------------------------
      .               /// Given a `Span`, return a span ending in the closest `{`. This is useful when you have a
      .               /// `Span` enclosing a whole item but we need to point at only the head (usually the first
      .               /// line) of that item.
      .               ///
      .               /// *Only suitable for diagnostics.*
      .               pub fn guess_head_span(&self, sp: Span) -> Span {
      .                   // FIXME: extend the AST items to have a head span, or replace callers with pointing at
      .                   // the item's ident when appropriate.
     26 ( 0.00%)          self.span_until_char(sp, '{')
      .               }
      .           
      .               /// Returns a new span representing just the first character of the given span.
     12 ( 0.00%)      pub fn start_point(&self, sp: Span) -> Span {
      .                   let width = {
      .                       let sp = sp.data();
      5 ( 0.00%)              let local_begin = self.lookup_byte_offset(sp.lo);
      .                       let start_index = local_begin.pos.to_usize();
      .                       let src = local_begin.sf.external_src.borrow();
      .           
      3 ( 0.00%)              let snippet = if let Some(ref src) = local_begin.sf.src {
      .                           Some(&src[start_index..])
      .                       } else if let Some(src) = src.get_source() {
      .                           Some(&src[start_index..])
      .                       } else {
      .                           None
      .                       };
      .           
      1 ( 0.00%)              match snippet {
      .                           None => 1,
      .                           Some(snippet) => match snippet.chars().next() {
      .                               None => 1,
      .                               Some(c) => c.len_utf8(),
      .                           },
      .                       }
      .                   };
      .           
     12 ( 0.00%)          sp.with_hi(BytePos(sp.lo().0 + width as u32))
      .               }
      .           
      .               /// Returns a new span representing just the last character of this span.
  6,492 ( 0.00%)      pub fn end_point(&self, sp: Span) -> Span {
      .                   let pos = sp.hi().0;
      .           
  2,164 ( 0.00%)          let width = self.find_width_of_character_at_span(sp, false);
      .                   let corrected_end_position = pos.checked_sub(width).unwrap_or(pos);
      .           
      .                   let end_point = BytePos(cmp::max(corrected_end_position, sp.lo().0));
  5,410 ( 0.00%)          sp.with_lo(end_point)
      .               }
      .           
      .               /// Returns a new span representing the next character after the end-point of this span.
     11 ( 0.00%)      pub fn next_point(&self, sp: Span) -> Span {
      1 ( 0.00%)          if sp.is_dummy() {
      .                       return sp;
      .                   }
      .                   let start_of_next_point = sp.hi().0;
      .           
      .                   let width = self.find_width_of_character_at_span(sp.shrink_to_hi(), true);
      .                   // If the width is 1, then the next span should point to the same `lo` and `hi`. However,
      .                   // in the case of a multibyte character, where the width != 1, the next span should
      .                   // span multiple bytes to include the whole character.
      .                   let end_of_next_point =
      .                       start_of_next_point.checked_add(width - 1).unwrap_or(start_of_next_point);
      .           
      .                   let end_of_next_point = BytePos(cmp::max(sp.lo().0 + 1, end_of_next_point));
      .                   Span::new(BytePos(start_of_next_point), end_of_next_point, sp.ctxt(), None)
      9 ( 0.00%)      }
      .           
      .               /// Finds the width of the character, either before or after the end of provided span,
      .               /// depending on the `forwards` parameter.
  6,492 ( 0.00%)      fn find_width_of_character_at_span(&self, sp: Span, forwards: bool) -> u32 {
      .                   let sp = sp.data();
    541 ( 0.00%)          if sp.lo == sp.hi {
      .                       debug!("find_width_of_character_at_span: early return empty span");
      .                       return 1;
      .                   }
      .           
  3,759 ( 0.00%)          let local_begin = self.lookup_byte_offset(sp.lo);
  4,833 ( 0.00%)          let local_end = self.lookup_byte_offset(sp.hi);
      .                   debug!(
      .                       "find_width_of_character_at_span: local_begin=`{:?}`, local_end=`{:?}`",
      .                       local_begin, local_end
      .                   );
      .           
  1,074 ( 0.00%)          if local_begin.sf.start_pos != local_end.sf.start_pos {
      .                       debug!("find_width_of_character_at_span: begin and end are in different files");
      .                       return 1;
      .                   }
      .           
      .                   let start_index = local_begin.pos.to_usize();
      .                   let end_index = local_end.pos.to_usize();
      .                   debug!(
      .                       "find_width_of_character_at_span: start_index=`{:?}`, end_index=`{:?}`",
      .                       start_index, end_index
      .                   );
      .           
      .                   // Disregard indexes that are at the start or end of their spans, they can't fit bigger
      .                   // characters.
  2,148 ( 0.00%)          if (!forwards && end_index == usize::MIN) || (forwards && start_index == usize::MAX) {
      .                       debug!("find_width_of_character_at_span: start or end of span, cannot be multibyte");
      .                       return 1;
      .                   }
      .           
    537 ( 0.00%)          let source_len = (local_begin.sf.end_pos - local_begin.sf.start_pos).to_usize();
      .                   debug!("find_width_of_character_at_span: source_len=`{:?}`", source_len);
      .                   // Ensure indexes are also not malformed.
  2,148 ( 0.00%)          if start_index > end_index || end_index > source_len {
      .                       debug!("find_width_of_character_at_span: source indexes are malformed");
      .                       return 1;
      .                   }
      .           
      .                   let src = local_begin.sf.external_src.borrow();
      .           
      .                   // We need to extend the snippet to the end of the src rather than to end_index so when
      .                   // searching forwards for boundaries we've got somewhere to search.
  1,611 ( 0.00%)          let snippet = if let Some(ref src) = local_begin.sf.src {
      .                       &src[start_index..]
    444 ( 0.00%)          } else if let Some(src) = src.get_source() {
  2,125 ( 0.00%)              &src[start_index..]
      .                   } else {
      .                       return 1;
      .                   };
      .                   debug!("find_width_of_character_at_span: snippet=`{:?}`", snippet);
      .           
  3,108 ( 0.00%)          let mut target = if forwards { end_index + 1 } else { end_index - 1 };
      .                   debug!("find_width_of_character_at_span: initial target=`{:?}`", target);
      .           
  2,072 ( 0.00%)          while !snippet.is_char_boundary(target - start_index) && target < source_len {
      .                       target = if forwards {
      .                           target + 1
      .                       } else {
      .                           match target.checked_sub(1) {
      .                               Some(target) => target,
      .                               None => {
      .                                   break;
      .                               }
      .                           }
      .                       };
      .                       debug!("find_width_of_character_at_span: target=`{:?}`", target);
      .                   }
      .                   debug!("find_width_of_character_at_span: final target=`{:?}`", target);
      .           
  2,072 ( 0.00%)          if forwards { (target - end_index) as u32 } else { (end_index - target) as u32 }
  4,869 ( 0.00%)      }
      .           
      .               pub fn get_source_file(&self, filename: &FileName) -> Option<Lrc<SourceFile>> {
      .                   // Remap filename before lookup
      .                   let filename = self.path_mapping().map_filename_prefix(filename).0;
      .                   for sf in self.files.borrow().source_files.iter() {
      .                       if filename == sf.name {
      .                           return Some(sf.clone());
      .                       }
      .                   }
      .                   None
      .               }
      .           
      .               /// For a global `BytePos`, computes the local offset within the containing `SourceFile`.
  5,565 ( 0.00%)      pub fn lookup_byte_offset(&self, bpos: BytePos) -> SourceFileAndBytePos {
  1,113 ( 0.00%)          let idx = self.lookup_source_file_idx(bpos);
  2,226 ( 0.00%)          let sf = (*self.files.borrow().source_files)[idx].clone();
      .                   let offset = bpos - sf.start_pos;
      .                   SourceFileAndBytePos { sf, pos: offset }
  5,565 ( 0.00%)      }
      .           
      .               // Returns the index of the `SourceFile` (in `self.files`) that contains `pos`.
      .               // This index is guaranteed to be valid for the lifetime of this `SourceMap`,
      .               // since `source_files` is a `MonotonicVec`
  6,549 ( 0.00%)      pub fn lookup_source_file_idx(&self, pos: BytePos) -> usize {
      .                   self.files
      .                       .borrow()
      .                       .source_files
      .                       .binary_search_by_key(&pos, |key| key.start_pos)
  4,356 ( 0.00%)              .unwrap_or_else(|p| p - 1)
  8,732 ( 0.00%)      }
      .           
      .               pub fn count_lines(&self) -> usize {
      .                   self.files().iter().fold(0, |a, f| a + f.count_lines())
      .               }
      .           
      .               pub fn generate_fn_name_span(&self, span: Span) -> Option<Span> {
      .                   let prev_span = self.span_extend_to_prev_str(span, "fn", true);
      .                   if let Ok(snippet) = self.span_to_snippet(prev_span) {
-- line 931 ----------------------------------------
-- line 1010 ----------------------------------------
      .           
      .                           return Some((sugg_span, new_snippet));
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .               pub fn ensure_source_file_source_present(&self, source_file: Lrc<SourceFile>) -> bool {
    133 ( 0.00%)          source_file.add_external_src(|| {
      3 ( 0.00%)              match source_file.name {
      .                           FileName::Real(ref name) if let Some(local_path) = name.local_path() => {
      2 ( 0.00%)                      self.file_loader.read_file(local_path).ok()
      .                           }
      .                           _ => None,
      .                       }
      .                   })
      .               }
      .           
      .               pub fn is_imported(&self, sp: Span) -> bool {
      .                   let source_file_index = self.lookup_source_file_idx(sp.lo());
-- line 1029 ----------------------------------------
-- line 1043 ----------------------------------------
      .               }
      .           
      .               /// Tries to find the span of the semicolon of a macro call statement.
      .               /// The input must be the *call site* span of a statement from macro expansion.
      .               ///
      .               ///           v output
      .               ///     mac!();
      .               ///     ^^^^^^ input
     32 ( 0.00%)      pub fn mac_call_stmt_semi_span(&self, mac_call: Span) -> Option<Span> {
      .                   let span = self.span_extend_while(mac_call, char::is_whitespace).ok()?;
     12 ( 0.00%)          let span = span.shrink_to_hi().with_hi(BytePos(span.hi().0.checked_add(1)?));
      4 ( 0.00%)          if self.span_to_snippet(span).as_deref() != Ok(";") {
      .                       return None;
      .                   }
      .                   Some(span)
     26 ( 0.00%)      }
      .           }
      .           
      8 ( 0.00%)  #[derive(Clone)]
      .           pub struct FilePathMapping {
      4 ( 0.00%)      mapping: Vec<(PathBuf, PathBuf)>,
      2 ( 0.00%)      filename_display_for_diagnostics: FileNameDisplayPreference,
      .           }
      .           
      .           impl FilePathMapping {
      .               pub fn empty() -> FilePathMapping {
      .                   FilePathMapping::new(Vec::new())
      .               }
      .           
      3 ( 0.00%)      pub fn new(mapping: Vec<(PathBuf, PathBuf)>) -> FilePathMapping {
      .                   let filename_display_for_diagnostics = if mapping.is_empty() {
      .                       FileNameDisplayPreference::Local
      .                   } else {
      .                       FileNameDisplayPreference::Remapped
      .                   };
      .           
     12 ( 0.00%)          FilePathMapping { mapping, filename_display_for_diagnostics }
      3 ( 0.00%)      }
      .           
      .               /// Applies any path prefix substitution as defined by the mapping.
      .               /// The return value is the remapped path and a boolean indicating whether
      .               /// the path was affected by the mapping.
     45 ( 0.00%)      pub fn map_prefix(&self, path: PathBuf) -> (PathBuf, bool) {
      .                   // NOTE: We are iterating over the mapping entries from last to first
      .                   //       because entries specified later on the command line should
      .                   //       take precedence.
      .                   for &(ref from, ref to) in self.mapping.iter().rev() {
      .                       if let Ok(rest) = path.strip_prefix(from) {
      .                           return (to.join(rest), true);
      .                       }
      .                   }
      .           
     25 ( 0.00%)          (path, false)
     45 ( 0.00%)      }
      .           
      8 ( 0.00%)      fn map_filename_prefix(&self, file: &FileName) -> (FileName, bool) {
      2 ( 0.00%)          match file {
      2 ( 0.00%)              FileName::Real(realfile) if let RealFileName::LocalPath(local_path) = realfile => {
     14 ( 0.00%)                  let (mapped_path, mapped) = self.map_prefix(local_path.to_path_buf());
      1 ( 0.00%)                  let realfile = if mapped {
      .                               RealFileName::Remapped {
      .                                   local_path: Some(local_path.clone()),
      .                                   virtual_name: mapped_path,
      .                               }
      .                           } else {
      .                               realfile.clone()
      .                           };
     10 ( 0.00%)                  (FileName::Real(realfile), mapped)
      4 ( 0.00%)              }
      .                       FileName::Real(_) => unreachable!("attempted to remap an already remapped filename"),
      .                       other => (other.clone(), false),
      .                   }
      .               }
      .           }

 11,145 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/query/normalize.rs
--------------------------------------------------------------------------------
Ir              

-- line 37 ----------------------------------------
     .               /// If the normalization succeeds and is unambiguous, returns back
     .               /// the normalized value along with various outlives relations (in
     .               /// the form of obligations that must be discharged).
     .               ///
     .               /// N.B., this will *eventually* be the main means of
     .               /// normalizing, but for now should be used only when we actually
     .               /// know that normalization will succeed, since error reporting
     .               /// and other details are still "under development".
82,311 ( 0.04%)      fn normalize<T>(&self, value: T) -> Result<Normalized<'tcx, T>, NoSolution>
     .               where
     .                   T: TypeFoldable<'tcx>,
     .               {
     .                   debug!(
     .                       "normalize::<{}>(value={:?}, param_env={:?})",
     .                       std::any::type_name::<T>(),
     .                       value,
     .                       self.param_env,
     .                   );
23,502 ( 0.01%)          if !needs_normalization(&value, self.param_env.reveal()) {
35,226 ( 0.02%)              return Ok(Normalized { value, obligations: vec![] });
     .                   }
     .           
    69 ( 0.00%)          let mut normalizer = QueryNormalizer {
    11 ( 0.00%)              infcx: self.infcx,
     .                       cause: self.cause,
     .                       param_env: self.param_env,
     .                       obligations: vec![],
     .                       cache: SsoHashMap::new(),
     .                       anon_depth: 0,
     .                       universes: vec![],
     .                   };
     .           
-- line 68 ----------------------------------------
-- line 71 ----------------------------------------
     .                   // through tys and consts in a `TypeFoldable`. Importantly, it skips binders, leaving us
     .                   // with trying to normalize with escaping bound vars.
     .                   //
     .                   // Here, we just add the universes that we *would* have created had we passed through the binders.
     .                   //
     .                   // We *could* replace escaping bound vars eagerly here, but it doesn't seem really necessary.
     .                   // The rest of the code is already set up to be lazy about replacing bound vars,
     .                   // and only when we actually have to normalize.
     8 ( 0.00%)          if value.has_escaping_bound_vars() {
     .                       let mut max_visitor =
     .                           MaxEscapingBoundVarVisitor { outer_index: ty::INNERMOST, escaping: 0 };
     .                       value.visit_with(&mut max_visitor);
     .                       if max_visitor.escaping > 0 {
     .                           normalizer.universes.extend((0..max_visitor.escaping).map(|_| None));
     .                       }
     .                   }
    20 ( 0.00%)          let result = value.try_fold_with(&mut normalizer);
     .                   info!(
     .                       "normalize::<{}>: result={:?} with {} obligations",
     .                       std::any::type_name::<T>(),
     .                       result,
     .                       normalizer.obligations.len(),
     .                   );
     .                   debug!(
     .                       "normalize::<{}>: obligations={:?}",
     .                       std::any::type_name::<T>(),
     .                       normalizer.obligations,
     .                   );
    45 ( 0.00%)          result.map(|value| Normalized { value, obligations: normalizer.obligations })
82,293 ( 0.04%)      }
     .           }
     .           
     .           /// Visitor to find the maximum escaping bound var
     .           struct MaxEscapingBoundVarVisitor {
     .               // The index which would count as escaping
     .               outer_index: ty::DebruijnIndex,
     .               escaping: usize,
     .           }
-- line 108 ----------------------------------------
-- line 161 ----------------------------------------
     .               anon_depth: usize,
     .               universes: Vec<Option<ty::UniverseIndex>>,
     .           }
     .           
     .           impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {
     .               type Error = NoSolution;
     .           
     .               fn tcx<'c>(&'c self) -> TyCtxt<'tcx> {
    50 ( 0.00%)          self.infcx.tcx
    13 ( 0.00%)      }
     .           }
     .           
     .           impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {
    24 ( 0.00%)      fn try_fold_binder<T: TypeFoldable<'tcx>>(
     .                   &mut self,
     .                   t: ty::Binder<'tcx, T>,
     .               ) -> Result<ty::Binder<'tcx, T>, Self::Error> {
     .                   self.universes.push(None);
     3 ( 0.00%)          let t = t.try_super_fold_with(self);
     .                   self.universes.pop();
     .                   t
    21 ( 0.00%)      }
     .           
   765 ( 0.00%)      #[instrument(level = "debug", skip(self))]
     .               fn try_fold_ty(&mut self, ty: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {
    90 ( 0.00%)          if !needs_normalization(&ty, self.param_env.reveal()) {
     .                       return Ok(ty);
     .                   }
     .           
   108 ( 0.00%)          if let Some(ty) = self.cache.get(&ty) {
     .                       return Ok(ty);
     .                   }
     .           
     .                   // See note in `rustc_trait_selection::traits::project` about why we
     .                   // wait to fold the substs.
     .           
     .                   // Wrap this in a closure so we don't accidentally return from the outer function
   142 ( 0.00%)          let res = (|| match *ty.kind() {
     .                       // This is really important. While we *can* handle this, this has
     .                       // severe performance implications for large opaque types with
     .                       // late-bound regions. See `issue-88862` benchmark.
     .                       ty::Opaque(def_id, substs) if !substs.has_escaping_bound_vars() => {
     .                           // Only normalize `impl Trait` after type-checking, usually in codegen.
     .                           match self.param_env.reveal() {
     .                               Reveal::UserFacing => ty.try_super_fold_with(self),
     .           
-- line 206 ----------------------------------------
-- line 236 ----------------------------------------
     .                               }
     .                           }
     .                       }
     .           
     .                       ty::Projection(data) if !data.has_escaping_bound_vars() => {
     .                           // This branch is just an optimization: when we don't have escaping bound vars,
     .                           // we don't need to replace them with placeholders (see branch below).
     .           
    20 ( 0.00%)                  let tcx = self.infcx.tcx;
     .                           let data = data.try_super_fold_with(self)?;
     .           
    10 ( 0.00%)                  let mut orig_values = OriginalQueryValues::default();
     .                           // HACK(matthewjasper) `'static` is special-cased in selection,
     .                           // so we cannot canonicalize it.
    30 ( 0.00%)                  let c_data = self
     .                               .infcx
    50 ( 0.00%)                      .canonicalize_query_keep_static(self.param_env.and(data), &mut orig_values);
     .                           debug!("QueryNormalizer: c_data = {:#?}", c_data);
     .                           debug!("QueryNormalizer: orig_values = {:#?}", orig_values);
    50 ( 0.00%)                  let result = tcx.normalize_projection_ty(c_data)?;
     .                           // We don't expect ambiguity.
    20 ( 0.00%)                  if result.is_ambiguous() {
     .                               return Err(NoSolution);
     .                           }
    40 ( 0.00%)                  let InferOk { value: result, obligations } =
    30 ( 0.00%)                      self.infcx.instantiate_query_response_and_region_obligations(
    10 ( 0.00%)                          self.cause,
    30 ( 0.00%)                          self.param_env,
     .                                   &orig_values,
     .                                   result,
     .                               )?;
     .                           debug!("QueryNormalizer: result = {:#?}", result);
     .                           debug!("QueryNormalizer: obligations = {:#?}", obligations);
    60 ( 0.00%)                  self.obligations.extend(obligations);
     .                           Ok(result.normalized_ty)
    20 ( 0.00%)              }
     .           
     .                       ty::Projection(data) => {
     .                           // See note in `rustc_trait_selection::traits::project`
     .           
     .                           let tcx = self.infcx.tcx;
     .                           let infcx = self.infcx;
     .                           let (data, mapped_regions, mapped_types, mapped_consts) =
     .                               crate::traits::project::BoundVarReplacer::replace_bound_vars(
-- line 279 ----------------------------------------
-- line 311 ----------------------------------------
     .                               mapped_regions,
     .                               mapped_types,
     .                               mapped_consts,
     .                               &self.universes,
     .                               result.normalized_ty,
     .                           ))
     .                       }
     .           
    16 ( 0.00%)              _ => ty.try_super_fold_with(self),
     .                   })()?;
    90 ( 0.00%)          self.cache.insert(ty, res);
     .                   Ok(res)
     .               }
     .           
     .               fn try_fold_const(
     .                   &mut self,
     .                   constant: &'tcx ty::Const<'tcx>,
     .               ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {
     4 ( 0.00%)          let constant = constant.try_super_fold_with(self)?;
     3 ( 0.00%)          Ok(constant.eval(self.infcx.tcx, self.param_env))
     .               }
     .           
     4 ( 0.00%)      fn try_fold_mir_const(
     .                   &mut self,
     .                   constant: mir::ConstantKind<'tcx>,
     .               ) -> Result<mir::ConstantKind<'tcx>, Self::Error> {
     9 ( 0.00%)          constant.try_super_fold_with(self)
     4 ( 0.00%)      }
     .           }

   164 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/query/normalize.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_traits/src/dropck_outlives.rs
--------------------------------------------------------------------------------
Ir              

-- line 13 ----------------------------------------
     .           };
     .           use rustc_trait_selection::traits::query::normalize::AtExt;
     .           use rustc_trait_selection::traits::query::{CanonicalTyGoal, NoSolution};
     .           use rustc_trait_selection::traits::{
     .               Normalized, ObligationCause, TraitEngine, TraitEngineExt as _,
     .           };
     .           
     .           crate fn provide(p: &mut Providers) {
     4 ( 0.00%)      *p = Providers { dropck_outlives, adt_dtorck_constraint, ..*p };
     .           }
     .           
   174 ( 0.00%)  fn dropck_outlives<'tcx>(
     .               tcx: TyCtxt<'tcx>,
     .               canonical_goal: CanonicalTyGoal<'tcx>,
     .           ) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, DropckOutlivesResult<'tcx>>>, NoSolution> {
     .               debug!("dropck_outlives(goal={:#?})", canonical_goal);
     .           
   174 ( 0.00%)      tcx.infer_ctxt().enter_with_canonical(
     .                   DUMMY_SP,
     .                   &canonical_goal,
     .                   |ref infcx, goal, canonical_inference_vars| {
    29 ( 0.00%)              let tcx = infcx.tcx;
     .                       let ParamEnvAnd { param_env, value: for_ty } = goal;
     .           
    58 ( 0.00%)              let mut result = DropckOutlivesResult { kinds: vec![], overflows: vec![] };
     .           
     .                       // A stack of types left to process. Each round, we pop
     .                       // something from the stack and invoke
     .                       // `dtorck_constraint_for_ty`. This may produce new types that
     .                       // have to be pushed on the stack. This continues until we have explored
     .                       // all the reachable types from the type `for_ty`.
     .                       //
     .                       // Example: Imagine that we have the following code:
-- line 45 ----------------------------------------
-- line 65 ----------------------------------------
     .                       // accessed by any destructors in `a`. We begin by pushing `A`
     .                       // onto the stack, as that is the type of `a`. We will then
     .                       // invoke `dtorck_constraint_for_ty` which will expand `A`
     .                       // into the types of its fields `(B, Vec<A>)`. These will get
     .                       // pushed onto the stack. Eventually, expanding `Vec<A>` will
     .                       // lead to us trying to push `A` a second time -- to prevent
     .                       // infinite recursion, we notice that `A` was already pushed
     .                       // once and stop.
    58 ( 0.00%)              let mut ty_stack = vec![(for_ty, 0)];
     .           
     .                       // Set used to detect infinite recursion.
     .                       let mut ty_set = FxHashSet::default();
     .           
    87 ( 0.00%)              let mut fulfill_cx = <dyn TraitEngine<'_>>::new(infcx.tcx);
     .           
     .                       let cause = ObligationCause::dummy();
    29 ( 0.00%)              let mut constraints = DtorckConstraint::empty();
 1,858 ( 0.00%)              while let Some((ty, depth)) = ty_stack.pop() {
     .                           debug!(
     .                               "{} kinds, {} overflows, {} ty_stack",
     .                               result.kinds.len(),
     .                               result.overflows.len(),
     .                               ty_stack.len()
     .                           );
 6,503 ( 0.00%)                  dtorck_constraint_for_ty(tcx, DUMMY_SP, for_ty, depth, ty, &mut constraints)?;
     .           
     .                           // "outlives" represent types/regions that may be touched
     .                           // by a destructor.
     .                           result.kinds.append(&mut constraints.outlives);
     .                           result.overflows.append(&mut constraints.overflows);
     .           
     .                           // If we have even one overflow, we should stop trying to evaluate further --
     .                           // chances are, the subsequent overflows for this evaluation won't provide useful
     .                           // information and will just decrease the speed at which we can emit these errors
     .                           // (since we'll be printing for just that much longer for the often enormous types
     .                           // that result here).
   929 ( 0.00%)                  if !result.overflows.is_empty() {
     .                               break;
     .                           }
     .           
     .                           // dtorck types are "types that will get dropped but which
     .                           // do not themselves define a destructor", more or less. We have
     .                           // to push them onto the stack to be expanded.
28,129 ( 0.01%)                  for ty in constraints.dtorck_types.drain(..) {
70,452 ( 0.03%)                      match infcx.at(&cause, param_env).normalize(ty) {
     .                                   Ok(Normalized { value: ty, obligations }) => {
35,226 ( 0.02%)                              fulfill_cx.register_predicate_obligations(infcx, obligations);
     .           
     .                                       debug!("dropck_outlives: ty from dtorck_types = {:?}", ty);
     .           
70,452 ( 0.03%)                              match ty.kind() {
     .                                           // All parameters live for the duration of the
     .                                           // function.
     .                                           ty::Param(..) => {}
     .           
     .                                           // A projection that we couldn't resolve - it
     .                                           // might have a destructor.
     .                                           ty::Projection(..) | ty::Opaque(..) => {
     .                                               result.kinds.push(ty.into());
     .                                           }
     .           
     .                                           _ => {
23,484 ( 0.01%)                                      if ty_set.insert(ty) {
 1,800 ( 0.00%)                                          ty_stack.push((ty, depth + 1));
     .                                               }
     .                                           }
     .                                       }
     .                                   }
     .           
     .                                   // We don't actually expect to fail to normalize.
     .                                   // That implies a WF error somewhere else.
     .                                   Err(NoSolution) => {
-- line 136 ----------------------------------------
-- line 142 ----------------------------------------
     .           
     .                       debug!("dropck_outlives: result = {:#?}", result);
     .           
     .                       infcx.make_canonicalized_query_response(
     .                           canonical_inference_vars,
     .                           result,
     .                           &mut *fulfill_cx,
     .                       )
    58 ( 0.00%)          },
     .               )
   174 ( 0.00%)  }
     .           
     .           /// Returns a set of constraints that needs to be satisfied in
     .           /// order for `ty` to be valid for destruction.
40,239 ( 0.02%)  fn dtorck_constraint_for_ty<'tcx>(
     .               tcx: TyCtxt<'tcx>,
     .               span: Span,
     .               for_ty: Ty<'tcx>,
     .               depth: usize,
     .               ty: Ty<'tcx>,
     .               constraints: &mut DtorckConstraint<'tcx>,
     .           ) -> Result<(), NoSolution> {
     .               debug!("dtorck_constraint_for_ty({:?}, {:?}, {:?}, {:?})", span, for_ty, depth, ty);
     .           
 4,922 ( 0.00%)      if !tcx.recursion_limit().value_within_limit(depth) {
     .                   constraints.overflows.push(ty);
     .                   return Ok(());
     .               }
     .           
12,070 ( 0.01%)      if trivial_dropck_outlives(tcx, ty) {
     .                   return Ok(());
     .               }
     .           
 9,328 ( 0.00%)      match ty.kind() {
     .                   ty::Bool
     .                   | ty::Char
     .                   | ty::Int(_)
     .                   | ty::Uint(_)
     .                   | ty::Float(_)
     .                   | ty::Str
     .                   | ty::Never
     .                   | ty::Foreign(..)
-- line 183 ----------------------------------------
-- line 186 ----------------------------------------
     .                   | ty::FnDef(..)
     .                   | ty::FnPtr(_)
     .                   | ty::GeneratorWitness(..) => {
     .                       // these types never have a destructor
     .                   }
     .           
     .                   ty::Array(ety, _) | ty::Slice(ety) => {
     .                       // single-element containers, behave like their element
    47 ( 0.00%)              rustc_data_structures::stack::ensure_sufficient_stack(|| {
   141 ( 0.00%)                  dtorck_constraint_for_ty(tcx, span, for_ty, depth + 1, ety, constraints)
     .                       })?;
     .                   }
     .           
   212 ( 0.00%)          ty::Tuple(tys) => rustc_data_structures::stack::ensure_sufficient_stack(|| {
   643 ( 0.00%)              for ty in tys.iter() {
 3,017 ( 0.00%)                  dtorck_constraint_for_ty(
     .                               tcx,
     .                               span,
     .                               for_ty,
   212 ( 0.00%)                      depth + 1,
 1,724 ( 0.00%)                      ty.expect_ty(),
     .                               constraints,
     .                           )?;
     .                       }
     .                       Ok::<_, NoSolution>(())
     .                   })?,
     .           
     .                   ty::Closure(_, substs) => {
     .                       if !substs.as_closure().is_valid() {
-- line 214 ----------------------------------------
-- line 273 ----------------------------------------
     .                       constraints.outlives.push(substs.as_generator().resume_ty().into());
     .                   }
     .           
     .                   ty::Adt(def, substs) => {
     .                       let DtorckConstraint { dtorck_types, outlives, overflows } =
     .                           tcx.at(span).adt_dtorck_constraint(def.did)?;
     .                       // FIXME: we can try to recursively `dtorck_constraint_on_ty`
     .                       // there, but that needs some way to handle cycles.
 4,120 ( 0.00%)              constraints.dtorck_types.extend(dtorck_types.subst(tcx, substs));
 2,060 ( 0.00%)              constraints.outlives.extend(outlives.subst(tcx, substs));
 2,060 ( 0.00%)              constraints.overflows.extend(overflows.subst(tcx, substs));
     .                   }
     .           
     .                   // Objects must be alive in order for their destructor
     .                   // to be called.
     .                   ty::Dynamic(..) => {
     .                       constraints.outlives.push(ty.into());
     .                   }
     .           
-- line 291 ----------------------------------------
-- line 297 ----------------------------------------
     .                   ty::Placeholder(..) | ty::Bound(..) | ty::Infer(..) | ty::Error(_) => {
     .                       // By the time this code runs, all type variables ought to
     .                       // be fully resolved.
     .                       return Err(NoSolution);
     .                   }
     .               }
     .           
     .               Ok(())
18,936 ( 0.01%)  }
     .           
     .           /// Calculates the dtorck constraint for a type.
 2,736 ( 0.00%)  crate fn adt_dtorck_constraint(
     .               tcx: TyCtxt<'_>,
     .               def_id: DefId,
     .           ) -> Result<DtorckConstraint<'_>, NoSolution> {
     .               let def = tcx.adt_def(def_id);
     .               let span = tcx.def_span(def_id);
     .               debug!("dtorck_constraint: {:?}", def);
     .           
   342 ( 0.00%)      if def.is_phantom_data() {
     .                   // The first generic parameter here is guaranteed to be a type because it's
     .                   // `PhantomData`.
     5 ( 0.00%)          let substs = InternalSubsts::identity_for_item(tcx, def_id);
     3 ( 0.00%)          assert_eq!(substs.len(), 1);
     5 ( 0.00%)          let result = DtorckConstraint {
     .                       outlives: vec![],
     1 ( 0.00%)              dtorck_types: vec![substs.type_at(0)],
     .                       overflows: vec![],
     .                   };
     .                   debug!("dtorck_constraint: {:?} => {:?}", def, result);
     7 ( 0.00%)          return Ok(result);
     .               }
     .           
   341 ( 0.00%)      let mut result = DtorckConstraint::empty();
     .               for field in def.all_fields() {
 2,014 ( 0.00%)          let fty = tcx.type_of(field.did);
10,070 ( 0.00%)          dtorck_constraint_for_ty(tcx, span, fty, 0, fty, &mut result)?;
     .               }
 1,023 ( 0.00%)      result.outlives.extend(tcx.destructor_constraints(def));
     .               dedup_dtorck_constraint(&mut result);
     .           
     .               debug!("dtorck_constraint: {:?} => {:?}", def, result);
     .           
 3,751 ( 0.00%)      Ok(result)
 3,078 ( 0.00%)  }
     .           
     .           fn dedup_dtorck_constraint(c: &mut DtorckConstraint<'_>) {
     .               let mut outlives = FxHashSet::default();
     .               let mut dtorck_types = FxHashSet::default();
     .           
   682 ( 0.00%)      c.outlives.retain(|&val| outlives.replace(val).is_none());
 1,023 ( 0.00%)      c.dtorck_types.retain(|&val| dtorck_types.replace(val).is_none());
     .           }

43,658 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_traits/src/dropck_outlives.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 417 ----------------------------------------
        .               /// # #![allow(unused_mut)]
        .               /// let mut vec: Vec<i32> = Vec::new();
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        .               pub const fn new() -> Self {
  228,391 ( 0.11%)          Vec { buf: RawVec::NEW, len: 0 }
       40 ( 0.00%)      }
        .           
        .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
        .               ///
        .               /// The vector will be able to hold exactly `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the vector will not allocate.
        .               ///
        .               /// It is important to note that although the returned vector has the
        .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 601 ----------------------------------------
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
  135,454 ( 0.06%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
        .               }
        .           
        .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
-- line 617 ----------------------------------------
-- line 677 ----------------------------------------
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
    6,101 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
        .               }
        .           
        .               /// Decomposes a `Vec<T>` into its raw components.
        .               ///
        .               /// Returns the raw pointer to the underlying data, the length of
        .               /// the vector (in elements), and the allocated capacity of the
        .               /// data (in elements). These are the same arguments in the same
        .               /// order as the arguments to [`from_raw_parts`].
-- line 693 ----------------------------------------
-- line 778 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let vec: Vec<i32> = Vec::with_capacity(10);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn capacity(&self) -> usize {
   10,465 ( 0.00%)          self.buf.capacity()
        .               }
        .           
        .               /// Reserves capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 794 ----------------------------------------
-- line 801 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve(&mut self, additional: usize) {
   22,607 ( 0.01%)          self.buf.reserve(self.len, additional);
        .               }
        .           
        .               /// Reserves the minimum capacity for exactly `additional` more elements to
        .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
        .               /// capacity will be greater than or equal to `self.len() + additional`.
        .               /// Does nothing if the capacity is already sufficient.
        .               ///
        .               /// Note that the allocator may give the collection more space than it
-- line 817 ----------------------------------------
-- line 829 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve_exact(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve_exact(&mut self, additional: usize) {
      908 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
        .               }
        .           
        .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `try_reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 845 ----------------------------------------
-- line 930 ----------------------------------------
        .               /// assert!(vec.capacity() >= 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn shrink_to_fit(&mut self) {
        .                   // The capacity is never less than the length, and there's nothing to do when
        .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
        .                   // by only calling it with a greater capacity.
   16,372 ( 0.01%)          if self.capacity() > self.len {
      196 ( 0.00%)              self.buf.shrink_to_fit(self.len);
        .                   }
        .               }
        .           
        .               /// Shrinks the capacity of the vector with a lower bound.
        .               ///
        .               /// The capacity will remain at least as large as both the length
        .               /// and the supplied value.
        .               ///
-- line 947 ----------------------------------------
-- line 990 ----------------------------------------
        .               /// let slice = vec.into_boxed_slice();
        .               /// assert_eq!(slice.into_vec().capacity(), 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn into_boxed_slice(mut self) -> Box<[T], A> {
        .                   unsafe {
        .                       self.shrink_to_fit();
    6,218 ( 0.00%)              let me = ManuallyDrop::new(self);
        .                       let buf = ptr::read(&me.buf);
        .                       let len = me.len();
        .                       buf.into_box(len).assume_init()
        .                   }
        .               }
        .           
        .               /// Shortens the vector, keeping the first `len` elements and dropping
        .               /// the rest.
-- line 1006 ----------------------------------------
-- line 1040 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.truncate(0);
        .               /// assert_eq!(vec, []);
        .               /// ```
        .               ///
        .               /// [`clear`]: Vec::clear
        .               /// [`drain`]: Vec::drain
        .               #[stable(feature = "rust1", since = "1.0.0")]
  151,517 ( 0.07%)      pub fn truncate(&mut self, len: usize) {
        .                   // This is safe because:
        .                   //
        .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
        .                   //   case avoids creating an invalid slice, and
        .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
        .                   //   such that no value will be dropped twice in case `drop_in_place`
        .                   //   were to panic once (if it panics twice, the program aborts).
        .                   unsafe {
        .                       // Note: It's intentional that this is `>` and not `>=`.
        .                       //       Changing it to `>=` has negative performance
        .                       //       implications in some cases. See #78884 for more.
   92,930 ( 0.04%)              if len > self.len {
        .                           return;
        .                       }
        .                       let remaining_len = self.len - len;
        .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
   36,259 ( 0.02%)              self.len = len;
      304 ( 0.00%)              ptr::drop_in_place(s);
        .                   }
  181,820 ( 0.08%)      }
        .           
        .               /// Extracts a slice containing the entire vector.
        .               ///
        .               /// Equivalent to `&s[..]`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1076 ----------------------------------------
-- line 1126 ----------------------------------------
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_ptr(&self) -> *const T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref`, which creates an intermediate reference.
  336,584 ( 0.16%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns an unsafe mutable pointer to the vector's buffer.
        .               ///
-- line 1142 ----------------------------------------
-- line 1162 ----------------------------------------
        .               /// }
        .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
        .               /// ```
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_mut_ptr(&mut self) -> *mut T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref_mut`, which creates an intermediate reference.
  628,196 ( 0.29%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
-- line 1178 ----------------------------------------
-- line 1259 ----------------------------------------
        .               ///
        .               /// Normally, here, one would use [`clear`] instead to correctly drop
        .               /// the contents and thus not leak memory.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   debug_assert!(new_len <= self.capacity());
        .           
   50,871 ( 0.02%)          self.len = new_len;
       50 ( 0.00%)      }
        .           
        .               /// Removes an element from the vector and returns it.
        .               ///
        .               /// The removed element is replaced by the last element of the vector.
        .               ///
        .               /// This does not preserve ordering, but is *O*(1).
        .               /// If you need to preserve the element order, use [`remove`] instead.
        .               ///
-- line 1276 ----------------------------------------
-- line 1305 ----------------------------------------
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // We replace self[index] with the last element. Note that if the
        .                       // bounds check above succeeds there must be a last element (which
        .                       // can be self[index] itself).
        .                       let value = ptr::read(self.as_ptr().add(index));
        .                       let base_ptr = self.as_mut_ptr();
        1 ( 0.00%)              ptr::copy(base_ptr.add(len - 1), base_ptr.add(index), 1);
        .                       self.set_len(len - 1);
        .                       value
        .                   }
        .               }
        .           
        .               /// Inserts an element at position `index` within the vector, shifting all
        .               /// elements after it to the right.
        .               ///
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.insert(1, 4);
        .               /// assert_eq!(vec, [1, 4, 2, 3]);
        .               /// vec.insert(4, 5);
        .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      259 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
        .                   }
        .           
       37 ( 0.00%)          let len = self.len();
      692 ( 0.00%)          if index > len {
        .                       assert_failed(index, len);
        .                   }
        .           
        .                   // space for the new element
      712 ( 0.00%)          if len == self.buf.capacity() {
        .                       self.reserve(1);
        .                   }
        .           
        .                   unsafe {
        .                       // infallible
        .                       // The spot to put the new value
        .                       {
        .                           let p = self.as_mut_ptr().add(index);
        .                           // Shift everything over to make space. (Duplicating the
        .                           // `index`th element into two consecutive places.)
    1,068 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
        .                           // Write it in, overwriting the first copy of the `index`th
        .                           // element.
        .                           ptr::write(p, element);
        .                       }
      712 ( 0.00%)              self.set_len(len + 1);
        .                   }
      222 ( 0.00%)      }
        .           
        .               /// Removes and returns the element at position `index` within the vector,
        .               /// shifting all elements after it to the left.
        .               ///
        .               /// Note: Because this shifts over the remaining elements, it has a
        .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
        .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
        .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1395 ----------------------------------------
        .               pub fn remove(&mut self, index: usize) -> T {
        .                   #[cold]
        .                   #[inline(never)]
        .                   #[track_caller]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("removal index (is {}) should be < len (is {})", index, len);
        .                   }
        .           
       52 ( 0.00%)          let len = self.len();
      204 ( 0.00%)          if index >= len {
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // infallible
        .                       let ret;
        .                       {
        .                           // the place we are taking from.
        .                           let ptr = self.as_mut_ptr().add(index);
        .                           // copy it out, unsafely having a copy of the value on
        .                           // the stack and in the vector at the same time.
       64 ( 0.00%)                  ret = ptr::read(ptr);
        .           
        .                           // Shift everything down to fill in that spot.
      154 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
        .                       }
       52 ( 0.00%)              self.set_len(len - 1);
        .                       ret
        .                   }
        .               }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
-- line 1428 ----------------------------------------
-- line 1442 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3, 4, 5];
        .               /// let keep = [false, true, true, false, true];
        .               /// let mut iter = keep.iter();
        .               /// vec.retain(|_| *iter.next().unwrap());
        .               /// assert_eq!(vec, [2, 3, 5]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
   15,573 ( 0.01%)      pub fn retain<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&T) -> bool,
        .               {
      832 ( 0.00%)          self.retain_mut(|elem| f(elem));
   15,256 ( 0.01%)      }
        .           
        .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
        .               /// });
        .               /// assert_eq!(vec, [2, 3, 4]);
        .               /// ```
        .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
        .               pub fn retain_mut<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
    1,986 ( 0.00%)          let original_len = self.len();
        .                   // Avoid double drop if the drop guard is not executed,
        .                   // since we may make some holes during the process.
        .                   unsafe { self.set_len(0) };
        .           
        .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
        .                   //      |<-              processed len   ->| ^- next to check
        .                   //                  |<-  deleted cnt     ->|
        .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
        .                       v: &'a mut Vec<T, A>,
        .                       processed_len: usize,
        .                       deleted_cnt: usize,
        .                       original_len: usize,
        .                   }
        .           
        .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
        .                       fn drop(&mut self) {
    1,800 ( 0.00%)                  if self.deleted_cnt > 0 {
        .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
        .                               unsafe {
        .                                   ptr::copy(
        .                                       self.v.as_ptr().add(self.processed_len),
    1,685 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
        .                                       self.original_len - self.processed_len,
        .                                   );
        .                               }
        .                           }
        .                           // SAFETY: After filling holes, all items are in contiguous memory.
        .                           unsafe {
        2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
        .                           }
        .                       }
        .                   }
        .           
        .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
        .           
        .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
        .                       original_len: usize,
        .                       f: &mut F,
        .                       g: &mut BackshiftOnDrop<'_, T, A>,
        .                   ) where
        .                       F: FnMut(&mut T) -> bool,
        .                   {
   30,101 ( 0.01%)              while g.processed_len != original_len {
        .                           // SAFETY: Unchecked element must be valid.
        .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
   11,263 ( 0.01%)                  if !f(cur) {
        .                               // Advance early to avoid double drop if `drop_in_place` panicked.
    3,532 ( 0.00%)                      g.processed_len += 1;
    2,960 ( 0.00%)                      g.deleted_cnt += 1;
        .                               // SAFETY: We never touch this element again after dropped.
       18 ( 0.00%)                      unsafe { ptr::drop_in_place(cur) };
        .                               // We already advanced the counter.
        .                               if DELETED {
        .                                   continue;
        .                               } else {
        .                                   break;
        .                               }
        .                           }
        .                           if DELETED {
        .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
        .                               // We use copy for move, and never touch this element again.
        .                               unsafe {
    3,534 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
        .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
        .                               }
        .                           }
    2,356 ( 0.00%)                  g.processed_len += 1;
        .                       }
        .                   }
        .           
        .                   // Stage 1: Nothing was deleted.
        .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
        .           
        .                   // Stage 2: Some elements were deleted.
        .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
        .               ///
        .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
        .               ///
        .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
        .               /// ```
        .               #[stable(feature = "dedup_by", since = "1.16.0")]
        7 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
        .               where
        .                   F: FnMut(&mut T, &mut T) -> bool,
        .               {
        1 ( 0.00%)          let len = self.len();
       38 ( 0.00%)          if len <= 1 {
        .                       return;
        .                   }
        .           
        .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
        .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
        .                       /* Offset of the element we want to check if it is duplicate */
        .                       read: usize,
        .           
-- line 1627 ----------------------------------------
-- line 1699 ----------------------------------------
        .                       }
        .           
        .                       /* Technically we could let `gap` clean up with its Drop, but
        .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
        .                        * the codegen, so we just do it manually */
        .                       gap.vec.set_len(gap.write);
        .                       mem::forget(gap);
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Appends an element to the back of a collection.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
        .               ///
        .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2];
        .               /// vec.push(3);
        .               /// assert_eq!(vec, [1, 2, 3]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
       30 ( 0.00%)      pub fn push(&mut self, value: T) {
        .                   // This will panic or abort if we would allocate > isize::MAX bytes
        .                   // or if the length increment would overflow for zero-sized types.
1,502,114 ( 0.69%)          if self.len == self.buf.capacity() {
   45,165 ( 0.02%)              self.buf.reserve_for_push(self.len);
        .                   }
        .                   unsafe {
   20,432 ( 0.01%)              let end = self.as_mut_ptr().add(self.len);
        .                       ptr::write(end, value);
1,602,751 ( 0.74%)              self.len += 1;
        .                   }
       24 ( 0.00%)      }
        .           
        .               /// Removes the last element from a vector and returns it, or [`None`] if it
        .               /// is empty.
        .               ///
        .               /// If you'd like to pop the first element, consider using
        .               /// [`VecDeque::pop_front`] instead.
        .               ///
        .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3];
        .               /// assert_eq!(vec.pop(), Some(3));
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop(&mut self) -> Option<T> {
   75,908 ( 0.03%)          if self.len == 0 {
        8 ( 0.00%)              None
        .                   } else {
        .                       unsafe {
   58,549 ( 0.03%)                  self.len -= 1;
    7,076 ( 0.00%)                  Some(ptr::read(self.as_ptr().add(self.len())))
        .                       }
        .                   }
        .               }
        .           
        .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
        .               ///
        .               /// # Panics
        .               ///
-- line 1769 ----------------------------------------
-- line 1789 ----------------------------------------
        .               }
        .           
        .               /// Appends elements to `Self` from other buffer.
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               unsafe fn append_elements(&mut self, other: *const [T]) {
        .                   let count = unsafe { (*other).len() };
        .                   self.reserve(count);
    3,055 ( 0.00%)          let len = self.len();
        .                   unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
   45,497 ( 0.02%)          self.len += count;
        .               }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// When the iterator **is** dropped, all elements in the range are removed
        .               /// from the vector, even if the iterator was not fully consumed. If the
        .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
-- line 1807 ----------------------------------------
-- line 1834 ----------------------------------------
        .                   // When the Drain is first created, it shortens the length of
        .                   // the source vector to make sure no uninitialized or moved-from elements
        .                   // are accessible at all if the Drain's destructor never gets to run.
        .                   //
        .                   // Drain will ptr::read out the values to remove.
        .                   // When finished, remaining tail of the vec is copied back to cover
        .                   // the hole, and the vector length is restored to the new length.
        .                   //
    2,486 ( 0.00%)          let len = self.len();
        .                   let Range { start, end } = slice::range(range, ..len);
        .           
        .                   unsafe {
        .                       // set self.vec length's to start, to be safe in case Drain is leaked
        .                       self.set_len(start);
        .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
        .                       // whole Drain iterator (like &mut T).
        6 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
   10,413 ( 0.00%)              Drain {
        .                           tail_start: end,
        6 ( 0.00%)                  tail_len: len - end,
        .                           iter: range_slice.iter(),
        .                           vec: NonNull::from(self),
        .                       }
        .                   }
        .               }
        .           
        .               /// Clears the vector, removing all values.
        .               ///
-- line 1861 ----------------------------------------
-- line 1869 ----------------------------------------
        .               ///
        .               /// v.clear();
        .               ///
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn clear(&mut self) {
  268,739 ( 0.12%)          self.truncate(0)
        .               }
        .           
        .               /// Returns the number of elements in the vector, also referred to
        .               /// as its 'length'.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1885 ----------------------------------------
-- line 1900 ----------------------------------------
        .               /// let mut v = Vec::new();
        .               /// assert!(v.is_empty());
        .               ///
        .               /// v.push(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn is_empty(&self) -> bool {
   38,591 ( 0.02%)          self.len() == 0
        .               }
        .           
        .               /// Splits the collection into two at the given index.
        .               ///
        .               /// Returns a newly allocated vector containing the elements in the range
        .               /// `[at, len)`. After the call, the original vector will be left containing
        .               /// the elements `[0, at)` with its previous capacity unchanged.
        .               ///
-- line 1916 ----------------------------------------
-- line 1935 ----------------------------------------
        .                   A: Clone,
        .               {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(at: usize, len: usize) -> ! {
        .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
        .                   }
        .           
        6 ( 0.00%)          if at > self.len() {
        .                       assert_failed(at, self.len());
        .                   }
        .           
        6 ( 0.00%)          if at == 0 {
        .                       // the new vector can take over the original buffer and avoid the copy
        .                       return mem::replace(
        .                           self,
        .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
        .                       );
        .                   }
        .           
        .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
        .               ///
        .               /// let mut vec = vec![];
        .               /// let mut p = 1;
        .               /// vec.resize_with(4, || { p *= 2; p });
        .               /// assert_eq!(vec, [2, 4, 8, 16]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
    1,514 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
        .               where
        .                   F: FnMut() -> T,
        .               {
      210 ( 0.00%)          let len = self.len();
      420 ( 0.00%)          if new_len > len {
      849 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
    1,304 ( 0.00%)      }
        .           
        .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
        .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
        .               /// `'a`. If the type has only static references, or none at all, then this
        .               /// may be chosen to be `'static`.
        .               ///
        .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
        .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2070 ----------------------------------------
        .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
        .               #[inline]
        .               pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
        .                   // Note:
        .                   // This method is not implemented in terms of `split_at_spare_mut`,
        .                   // to prevent invalidation of pointers to the buffer.
        .                   unsafe {
        .                       slice::from_raw_parts_mut(
        2 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
       21 ( 0.00%)                  self.buf.capacity() - self.len,
        .                       )
        .                   }
        .               }
        .           
        .               /// Returns vector content as a slice of `T`, along with the remaining spare
        .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
        .               ///
        .               /// The returned spare capacity slice can be used to fill the vector with data
-- line 2087 ----------------------------------------
-- line 2189 ----------------------------------------
        .               /// assert_eq!(vec, ["hello", "world", "world"]);
        .               ///
        .               /// let mut vec = vec![1, 2, 3, 4];
        .               /// vec.resize(2, 0);
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize", since = "1.5.0")]
       40 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
        4 ( 0.00%)          let len = self.len();
        .           
       12 ( 0.00%)          if new_len > len {
      399 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
        4 ( 0.00%)      }
        .           
        .               /// Clones and appends all elements in a slice to the `Vec`.
        .               ///
        .               /// Iterates over the slice `other`, clones each element, and then appends
        .               /// it to this `Vec`. The `other` slice is traversed in-order.
        .               ///
        .               /// Note that this function is same as [`extend`] except that it is
        .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2271 ----------------------------------------
        .           trait ExtendWith<T> {
        .               fn next(&mut self) -> T;
        .               fn last(self) -> T;
        .           }
        .           
        .           struct ExtendElement<T>(T);
        .           impl<T: Clone> ExtendWith<T> for ExtendElement<T> {
        .               fn next(&mut self) -> T {
       11 ( 0.00%)          self.0.clone()
        .               }
        .               fn last(self) -> T {
        .                   self.0
        .               }
        .           }
        .           
        .           struct ExtendFunc<F>(F);
        .           impl<T, F: FnMut() -> T> ExtendWith<T> for ExtendFunc<F> {
-- line 2287 ----------------------------------------
-- line 2291 ----------------------------------------
        .               fn last(mut self) -> T {
        .                   (self.0)()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               #[cfg(not(no_global_oom_handling))]
        .               /// Extend the vector by `n` values, using the given generator.
   36,115 ( 0.02%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
        .                   self.reserve(n);
        .           
        .                   unsafe {
      147 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
        .                       // Use SetLenOnDrop to work around bug where compiler
        .                       // might not realize the store through `ptr` through self.set_len()
        .                       // don't alias.
        .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
        .           
        .                       // Write all elements except the last one
        .                       for _ in 1..n {
        .                           ptr::write(ptr, value.next());
        .                           ptr = ptr.offset(1);
        .                           // Increment the length in every step in case next() panics
        .                           local_len.increment_len(1);
        .                       }
        .           
   13,093 ( 0.01%)              if n > 0 {
        .                           // We can write the last element directly without cloning needlessly
        .                           ptr::write(ptr, value.last());
        .                           local_len.increment_len(1);
        .                       }
        .           
        .                       // len set by scope guard
        .                   }
   25,009 ( 0.01%)      }
        .           }
        .           
        .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
        .               /// Removes consecutive repeated elements in the vector according to the
        .               /// [`PartialEq`] trait implementation.
        .               ///
        .               /// If the vector is sorted, this removes all duplicates.
        .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
        .               ///
        .               /// vec.dedup();
        .               ///
        .               /// assert_eq!(vec, [1, 2, 3, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn dedup(&mut self) {
        2 ( 0.00%)          self.dedup_by(|a, b| a == b)
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Internal methods and functions
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
    1,946 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
   19,222 ( 0.01%)      <T as SpecFromElem>::from_elem(elem, n, Global)
    2,369 ( 0.00%)  }
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[unstable(feature = "allocator_api", issue = "32838")]
        .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
        .               <T as SpecFromElem>::from_elem(elem, n, alloc)
        .           }
        .           
-- line 2367 ----------------------------------------
-- line 2424 ----------------------------------------
        .           // Common trait implementations for Vec
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
        .               type Target = [T];
        .           
        .               fn deref(&self) -> &[T] {
  478,481 ( 0.22%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
        2 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
        .               fn deref_mut(&mut self) -> &mut [T] {
  109,809 ( 0.05%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           trait SpecCloneFrom {
        .               fn clone_from(this: &mut Self, other: &Self);
        .           }
        .           
-- line 2447 ----------------------------------------
-- line 2468 ----------------------------------------
        .                   this.extend_from_slice(other);
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
        .               #[cfg(not(test))]
  100,102 ( 0.05%)      fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
        2 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
  121,127 ( 0.06%)      }
        .           
        .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
        .               // required for this method definition, is not available. Instead use the
        .               // `slice::to_vec`  function which is only available with cfg(test)
        .               // NB see the slice::hack module in slice.rs for more information
        .               #[cfg(test)]
        .               fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
        .               type Output = I::Output;
        .           
        .               #[inline]
        .               fn index(&self, index: I) -> &Self::Output {
   15,174 ( 0.01%)          Index::index(&**self, index)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_on_unimplemented(
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {
        .               #[inline]
        .               fn index_mut(&mut self, index: I) -> &mut Self::Output {
       64 ( 0.00%)          IndexMut::index_mut(&mut **self, index)
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> FromIterator<T> for Vec<T> {
        .               #[inline]
        .               fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
   73,735 ( 0.03%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
        .               type Item = T;
        .               type IntoIter = IntoIter<T, A>;
        .           
-- line 2555 ----------------------------------------
-- line 2564 ----------------------------------------
        .               /// for s in v.into_iter() {
        .               ///     // s has type String, not &String
        .               ///     println!("{}", s);
        .               /// }
        .               /// ```
        .               #[inline]
        .               fn into_iter(self) -> IntoIter<T, A> {
        .                   unsafe {
   36,573 ( 0.02%)              let mut me = ManuallyDrop::new(self);
        .                       let alloc = ptr::read(me.allocator());
        .                       let begin = me.as_mut_ptr();
        .                       let end = if mem::size_of::<T>() == 0 {
        .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
        .                       } else {
        .                           begin.add(me.len()) as *const T
        .                       };
        .                       let cap = me.buf.capacity();
   15,349 ( 0.01%)              IntoIter {
        .                           buf: NonNull::new_unchecked(begin),
        .                           phantom: PhantomData,
        .                           cap,
        .                           alloc,
        .                           ptr: begin,
        .                           end,
        .                       }
        .                   }
-- line 2589 ----------------------------------------
-- line 2591 ----------------------------------------
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a Vec<T, A> {
        .               type Item = &'a T;
        .               type IntoIter = slice::Iter<'a, T>;
        .           
        .               fn into_iter(self) -> slice::Iter<'a, T> {
       13 ( 0.00%)          self.iter()
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
        .               type Item = &'a mut T;
        .               type IntoIter = slice::IterMut<'a, T>;
        .           
        .               fn into_iter(self) -> slice::IterMut<'a, T> {
    1,192 ( 0.00%)          self.iter_mut()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
        .               #[inline]
       80 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
   36,518 ( 0.02%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
       80 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, item: T) {
        .                   self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
-- line 2627 ----------------------------------------
-- line 2636 ----------------------------------------
        .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
        .                   // This is the case for a general iterator.
        .                   //
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iterator {
        .                   //          self.push(item);
        .                   //      }
    4,820 ( 0.00%)          while let Some(element) = iterator.next() {
    1,992 ( 0.00%)              let len = self.len();
   15,956 ( 0.01%)              if len == self.capacity() {
       81 ( 0.00%)                  let (lower, _) = iterator.size_hint();
        .                           self.reserve(lower.saturating_add(1));
        .                       }
        .                       unsafe {
        .                           ptr::write(self.as_mut_ptr().add(len), element);
        .                           // Since next() executes user code which can panic we have to bump the length
        .                           // after each step.
        .                           // NB can't overflow since we would have had to alloc the address space
   11,842 ( 0.01%)                  self.set_len(len + 1);
        .                       }
        .                   }
      130 ( 0.00%)      }
        .           
        .               /// Creates a splicing iterator that replaces the specified range in the vector
        .               /// with the given `replace_with` iterator and yields the removed items.
        .               /// `replace_with` does not need to be the same length as `range`.
        .               ///
        .               /// `range` is removed even if the iterator is not consumed until the end.
        .               ///
        .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2693 ----------------------------------------
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "vec_splice", since = "1.21.0")]
        .               pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter, A>
        .               where
        .                   R: RangeBounds<usize>,
        .                   I: IntoIterator<Item = T>,
        .               {
       64 ( 0.00%)          Splice { drain: self.drain(range), replace_with: replace_with.into_iter() }
        .               }
        .           
        .               /// Creates an iterator which uses a closure to determine if an element should be removed.
        .               ///
        .               /// If the closure returns true, then the element is removed and yielded.
        .               /// If the closure returns false, the element will remain in the vector and will not be yielded
        .               /// by the iterator.
        .               ///
-- line 2709 ----------------------------------------
-- line 2745 ----------------------------------------
        .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
        .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
        .               /// ```
        .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
        .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
      101 ( 0.00%)          let old_len = self.len();
        .           
        .                   // Guard against us getting leaked (leak amplification)
        .                   unsafe {
        .                       self.set_len(0);
        .                   }
        .           
      328 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
        .               }
        .           }
        .           
        .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
        .           ///
        .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
        .           /// append the entire slice at once.
        .           ///
-- line 2768 ----------------------------------------
-- line 2803 ----------------------------------------
        .               #[inline]
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   Ord::cmp(&**self, &**other)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
  116,193 ( 0.05%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // use drop for [T]
        .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
        .                       // could avoid questions of validity in certain cases
   41,173 ( 0.02%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
        .                   }
        .                   // RawVec handles deallocation
  136,044 ( 0.06%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
        .           impl<T> const Default for Vec<T> {
        .               /// Creates an empty `Vec<T>`.
        .               fn default() -> Vec<T> {
        .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
        .               /// newly-allocated buffer with exactly the right capacity.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
        .               /// ```
        .               fn from(v: Vec<T, A>) -> Self {
        4 ( 0.00%)          v.into_boxed_slice()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl From<&str> for Vec<u8> {
        .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
        .               ///
-- line 2992 ----------------------------------------

  163,279 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/thread/local.rs
--------------------------------------------------------------------------------
Ir               

-- line 173 ----------------------------------------
      .           #[unstable(feature = "thread_local_internals", reason = "should not be necessary", issue = "none")]
      .           #[macro_export]
      .           #[allow_internal_unstable(thread_local_internals, cfg_target_thread_local, thread_local)]
      .           #[allow_internal_unsafe]
      .           macro_rules! __thread_local_inner {
      .               // used to generate the `LocalKey` value for const-initialized thread locals
      .               (@key $t:ty, const $init:expr) => {{
      .                   #[cfg_attr(not(windows), inline)] // see comments below
      4 ( 0.00%)          unsafe fn __getit() -> $crate::option::Option<&'static $t> {
      .                       const INIT_EXPR: $t = $init;
      .           
      .                       // wasm without atomics maps directly to `static mut`, and dtors
      .                       // aren't implemented because thread dtors aren't really a thing
      .                       // on wasm right now
      .                       //
      .                       // FIXME(#84224) this should come after the `target_thread_local`
      .                       // block.
-- line 189 ----------------------------------------
-- line 211 ----------------------------------------
      .                           }
      .           
      .                           // 0 == dtor not registered
      .                           // 1 == dtor registered, dtor not run
      .                           // 2 == dtor registered and is running or has run
      .                           #[thread_local]
      .                           static mut STATE: u8 = 0;
      .           
      8 ( 0.00%)                  unsafe extern "C" fn destroy(ptr: *mut u8) {
      .                               let ptr = ptr as *mut $t;
      .           
      .                               unsafe {
      .                                   debug_assert_eq!(STATE, 1);
     12 ( 0.00%)                          STATE = 2;
      .                                   $crate::ptr::drop_in_place(ptr);
      .                               }
      8 ( 0.00%)                  }
      .           
      .                           unsafe {
     60 ( 0.00%)                      match STATE {
      .                                   // 0 == we haven't registered a destructor, so do
      .                                   //   so now.
      .                                   0 => {
      .                                       $crate::thread::__FastLocalKeyInner::<$t>::register_dtor(
      .                                           $crate::ptr::addr_of_mut!(VAL) as *mut u8,
      .                                           destroy,
      .                                       );
      8 ( 0.00%)                              STATE = 1;
      .                                       Some(&VAL)
      .                                   }
      .                                   // 1 == the destructor is registered and the value
      .                                   //   is valid, so return the pointer.
      .                                   1 => Some(&VAL),
      .                                   // otherwise the destructor has already run, so we
      .                                   // can't give access.
      .                                   _ => None,
-- line 246 ----------------------------------------
-- line 257 ----------------------------------------
      .                       {
      .                           #[inline]
      .                           const fn __init() -> $t { INIT_EXPR }
      .                           static __KEY: $crate::thread::__OsLocalKeyInner<$t> =
      .                               $crate::thread::__OsLocalKeyInner::new();
      .                           #[allow(unused_unsafe)]
      .                           unsafe { __KEY.get(__init) }
      .                       }
 27,293 ( 0.01%)          }
      .           
      .                   unsafe {
      .                       $crate::thread::LocalKey::new(__getit)
      .                   }
      .               }};
      .           
      .               // used to generate the `LocalKey` value for `thread_local!`
      .               (@key $t:ty, $init:expr) => {
-- line 273 ----------------------------------------
-- line 318 ----------------------------------------
      .                           static __KEY: $crate::thread::__OsLocalKeyInner<$t> =
      .                               $crate::thread::__OsLocalKeyInner::new();
      .           
      .                           // FIXME: remove the #[allow(...)] marker when macros don't
      .                           // raise warning for missing/extraneous unsafe blocks anymore.
      .                           // See https://github.com/rust-lang/rust/issues/74838.
      .                           #[allow(unused_unsafe)]
      .                           unsafe { __KEY.get(__init) }
217,848 ( 0.10%)              }
      .           
      .                       unsafe {
      .                           $crate::thread::LocalKey::new(__getit)
      .                       }
      .                   }
      .               };
      .               ($(#[$attr:meta])* $vis:vis $name:ident, $t:ty, $($init:tt)*) => {
      .                   $(#[$attr])* $vis const $name: $crate::thread::LocalKey<$t> =
-- line 334 ----------------------------------------
-- line 377 ----------------------------------------
      .               /// this key yet.
      .               ///
      .               /// # Panics
      .               ///
      .               /// This function will `panic!()` if the key currently has its
      .               /// destructor running, and it **may** panic if the destructor has
      .               /// previously been run for this thread.
      .               #[stable(feature = "rust1", since = "1.0.0")]
     12 ( 0.00%)      pub fn with<F, R>(&'static self, f: F) -> R
      .               where
      .                   F: FnOnce(&T) -> R,
      .               {
     17 ( 0.00%)          self.try_with(f).expect(
      .                       "cannot access a Thread Local Storage value \
      .                        during or after destruction",
      .                   )
     16 ( 0.00%)      }
      .           
      .               /// Acquires a reference to the value in this TLS key.
      .               ///
      .               /// This will lazily initialize the value if this thread has not referenced
      .               /// this key yet. If the key has been destroyed (which may happen if this is called
      .               /// in a destructor), this function will return an [`AccessError`].
      .               ///
      .               /// # Panics
-- line 401 ----------------------------------------
-- line 404 ----------------------------------------
      .               /// key's initializer panics.
      .               #[stable(feature = "thread_local_try_with", since = "1.26.0")]
      .               #[inline]
      .               pub fn try_with<F, R>(&'static self, f: F) -> Result<R, AccessError>
      .               where
      .                   F: FnOnce(&T) -> R,
      .               {
      .                   unsafe {
172,518 ( 0.08%)              let thread_local = (self.inner)().ok_or(AccessError)?;
 97,684 ( 0.04%)              Ok(f(thread_local))
      .                   }
      .               }
      .           }
      .           
      .           mod lazy {
      .               use crate::cell::UnsafeCell;
      .               use crate::hint;
      .               use crate::mem;
-- line 421 ----------------------------------------
-- line 434 ----------------------------------------
      .                       // the inner cell nor mutable reference to the Option<T> inside said
      .                       // cell. This make it safe to hand a reference, though the lifetime
      .                       // of 'static is itself unsafe, making the get method unsafe.
      .                       unsafe { (*self.inner.get()).as_ref() }
      .                   }
      .           
      .                   /// The caller must ensure that no reference is active: this method
      .                   /// needs unique access.
      9 ( 0.00%)          pub unsafe fn initialize<F: FnOnce() -> T>(&self, init: F) -> &'static T {
      .                       // Execute the initialization up front, *then* move it into our slot,
      .                       // just in case initialization fails.
      .                       let value = init();
      .                       let ptr = self.inner.get();
      .           
      .                       // SAFETY:
      .                       //
      .                       // note that this can in theory just be `*ptr = Some(value)`, but due to
-- line 450 ----------------------------------------
-- line 475 ----------------------------------------
      .                           // always work it empirically doesn't seem to always get optimized away,
      .                           // which means that using something like `try_with` can pull in
      .                           // panicking code and cause a large size bloat.
      .                           match *ptr {
      .                               Some(ref x) => x,
      .                               None => hint::unreachable_unchecked(),
      .                           }
      .                       }
     10 ( 0.00%)          }
      .           
      .                   /// The other methods hand out references while taking &self.
      .                   /// As such, callers of this method must ensure no `&` and `&mut` are
      .                   /// available and used at the same time.
      .                   #[allow(unused)]
      .                   pub unsafe fn take(&mut self) -> Option<T> {
      .                       // SAFETY: See doc comment for this method.
      .                       unsafe { (*self.inner.get()).take() }
-- line 491 ----------------------------------------
-- line 596 ----------------------------------------
      .                       // SAFETY: See the definitions of `LazyKeyInner::get` and
      .                       // `try_initialize` for more information.
      .                       //
      .                       // The caller must ensure no mutable references are ever active to
      .                       // the inner cell or the inner T when this is called.
      .                       // The `try_initialize` is dependant on the passed `init` function
      .                       // for this.
      .                       unsafe {
 70,236 ( 0.03%)                  match self.inner.get() {
      .                               Some(val) => Some(val),
     18 ( 0.00%)                      None => self.try_initialize(init),
      .                           }
      .                       }
      .                   }
      .           
      .                   // `try_initialize` is only called once per fast thread local variable,
      .                   // except in corner cases where thread_local dtors reference other
      .                   // thread_local's, or it is being recursively initialized.
      .                   //
      .                   // Macos: Inlining this function can cause two `tlv_get_addr` calls to
      .                   // be performed for every call to `Key::get`.
      .                   // LLVM issue: https://bugs.llvm.org/show_bug.cgi?id=41722
      .                   #[inline(never)]
      8 ( 0.00%)          unsafe fn try_initialize<F: FnOnce() -> T>(&self, init: F) -> Option<&'static T> {
      .                       // SAFETY: See comment above (this function doc).
      .                       if !mem::needs_drop::<T>() || unsafe { self.try_register_dtor() } {
      .                           // SAFETY: See comment above (his function doc).
      6 ( 0.00%)                  Some(unsafe { self.inner.initialize(init) })
      .                       } else {
      .                           None
      .                       }
      8 ( 0.00%)          }
      .           
      .                   // `try_register_dtor` is only called once per fast thread local
      .                   // variable, except in corner cases where thread_local dtors reference
      .                   // other thread_local's, or it is being recursively initialized.
      .                   unsafe fn try_register_dtor(&self) -> bool {
      6 ( 0.00%)              match self.dtor_state.get() {
      .                           DtorState::Unregistered => {
      .                               // SAFETY: dtor registration happens before initialization.
      .                               // Passing `self` as a pointer while using `destroy_value<T>`
      .                               // is safe because the function will build a pointer to a
      .                               // Key<T>, which is the type of self and so find the correct
      .                               // size.
      6 ( 0.00%)                      unsafe { register_dtor(self as *const _ as *mut u8, destroy_value::<T>) };
      .                               self.dtor_state.set(DtorState::Registered);
      .                               true
      .                           }
      .                           DtorState::Registered => {
      .                               // recursively initialized
      .                               true
      .                           }
      .                           DtorState::RunningOrHasRun => false,
      .                       }
      .                   }
      .               }
      .           
      4 ( 0.00%)      unsafe extern "C" fn destroy_value<T>(ptr: *mut u8) {
      .                   let ptr = ptr as *mut Key<T>;
      .           
      .                   // SAFETY:
      .                   //
      .                   // The pointer `ptr` has been built just above and comes from
      .                   // `try_register_dtor` where it is originally a Key<T> coming from `self`,
      .                   // making it non-NUL and of the correct type.
      .                   //
-- line 661 ----------------------------------------

      4 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/thread/local.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 36 ----------------------------------------
      .           use rustc_session::parse::ParseSess;
      .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
      .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
      .           use tracing::debug;
      .           
      .           use std::ops::Range;
      .           use std::{cmp, mem, slice};
      .           
  1,361 ( 0.00%)  bitflags::bitflags! {
      .               struct Restrictions: u8 {
      .                   const STMT_EXPR         = 1 << 0;
      .                   const NO_STRUCT_LITERAL = 1 << 1;
      .                   const CONST_EXPR        = 1 << 2;
      .               }
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
      .                               $self.bump();
      .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
      .                           }
      .                       }
      .                   }
      .               };
      .           }
      .           
181,695 ( 0.08%)  #[derive(Clone)]
      .           pub struct Parser<'a> {
  6,879 ( 0.00%)      pub sess: &'a ParseSess,
      .               /// The current token.
  6,456 ( 0.00%)      pub token: Token,
      .               /// The spacing for the current token
  3,235 ( 0.00%)      pub token_spacing: Spacing,
      .               /// The previous token.
  9,684 ( 0.00%)      pub prev_token: Token,
  3,242 ( 0.00%)      pub capture_cfg: bool,
  6,491 ( 0.00%)      restrictions: Restrictions,
  6,470 ( 0.00%)      expected_tokens: Vec<TokenType>,
      .               // Important: This must only be advanced from `next_tok`
      .               // to ensure that `token_cursor.num_next_calls` is updated properly
      .               token_cursor: TokenCursor,
  6,470 ( 0.00%)      desugar_doc_comments: bool,
      .               /// This field is used to keep track of how many left angle brackets we have seen. This is
      .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
      .               /// appropriately.
      .               ///
      .               /// See the comments in the `parse_path_segment` function for more details.
  6,470 ( 0.00%)      unmatched_angle_bracket_count: u32,
  9,705 ( 0.00%)      max_angle_bracket_count: u32,
      .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
      .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
      .               /// error.
  3,235 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
      .               last_unexpected_token_span: Option<Span>,
      .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
      .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
      .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
      .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
      .               subparser_name: Option<&'static str>,
      .               capture_state: CaptureState,
      .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
      .           /// the first macro inner attribute to invoke a proc-macro).
      .           /// When create a `TokenStream`, the inner attributes get inserted
      .           /// into the proper place in the token stream.
      .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
      .           
      .           /// Controls how we capture tokens. Capturing can be expensive,
      .           /// so we try to avoid performing capturing in cases where
      .           /// we will never need an `AttrAnnotatedTokenStream`
  3,235 ( 0.00%)  #[derive(Copy, Clone)]
      .           pub enum Capturing {
      .               /// We aren't performing any capturing - this is the default mode.
      .               No,
      .               /// We are capturing tokens
      .               Yes,
      .           }
      .           
 13,356 ( 0.01%)  #[derive(Clone)]
      .           struct CaptureState {
 12,940 ( 0.01%)      capturing: Capturing,
  3,235 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
      .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
      .           }
      .           
      .           impl<'a> Drop for Parser<'a> {
      .               fn drop(&mut self) {
 12,282 ( 0.01%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
      .               }
      .           }
      .           
 65,797 ( 0.03%)  #[derive(Clone)]
      .           struct TokenCursor {
      .               frame: TokenCursorFrame,
 15,439 ( 0.01%)      stack: Vec<TokenCursorFrame>,
      .               desugar_doc_comments: bool,
      .               // Counts the number of calls to `next` or `next_desugared`,
      .               // depending on whether `desugar_doc_comments` is set.
  4,962 ( 0.00%)      num_next_calls: usize,
      .               // During parsing, we may sometimes need to 'unglue' a
      .               // glued token into two component tokens
      .               // (e.g. '>>' into '>' and '>), so that the parser
      .               // can consume them one at a time. This process
      .               // bypasses the normal capturing mechanism
      .               // (e.g. `num_next_calls` will not be incremented),
      .               // since the 'unglued' tokens due not exist in
      .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
      .               // in `Option<Vec<u8>>` requires us to unglue
      .               // the trailing `>>` token. The `break_last_token`
      .               // field is used to track this token - it gets
      .               // appended to the captured stream when
      .               // we evaluate a `LazyTokenStream`
      .               break_last_token: bool,
      .           }
      .           
 29,815 ( 0.01%)  #[derive(Clone)]
      .           struct TokenCursorFrame {
  5,192 ( 0.00%)      delim: token::DelimToken,
      .               span: DelimSpan,
      .               open_delim: bool,
 10,384 ( 0.00%)      tree_cursor: tokenstream::Cursor,
      .               close_delim: bool,
      .           }
      .           
      .           impl TokenCursorFrame {
      .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
  4,275 ( 0.00%)          TokenCursorFrame {
      .                       delim,
      .                       span,
      .                       open_delim: false,
  5,773 ( 0.00%)              tree_cursor: tts.into_trees(),
      .                       close_delim: false,
      .                   }
      .               }
      .           }
      .           
      .           impl TokenCursor {
369,672 ( 0.17%)      fn next(&mut self) -> (Token, Spacing) {
      .                   loop {
181,471 ( 0.08%)              let (tree, spacing) = if !self.frame.open_delim {
  4,063 ( 0.00%)                  self.frame.open_delim = true;
 20,315 ( 0.01%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
356,519 ( 0.16%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
      .                           tree
 15,974 ( 0.01%)              } else if !self.frame.close_delim {
  3,563 ( 0.00%)                  self.frame.close_delim = true;
 17,815 ( 0.01%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
  7,126 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
 46,319 ( 0.02%)                  self.frame = frame;
      .                           continue;
      .                       } else {
 15,498 ( 0.01%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
      .                       };
      .           
 69,738 ( 0.03%)              match tree {
      .                           TokenTree::Token(token) => {
246,448 ( 0.11%)                      return (token, spacing);
      .                           }
      .                           TokenTree::Delimited(sp, delim, tts) => {
      .                               let frame = TokenCursorFrame::new(sp, delim, tts);
      .                               self.stack.push(mem::replace(&mut self.frame, frame));
      .                           }
      .                       }
      .                   }
246,448 ( 0.11%)      }
      .           
164,380 ( 0.08%)      fn next_desugared(&mut self) -> (Token, Spacing) {
 49,314 ( 0.02%)          let (data, attr_style, sp) = match self.next() {
      .                       (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
      .                           (data, attr_style, span)
      .                       }
 82,190 ( 0.04%)              tok => return tok,
      .                   };
      .           
      .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
      .                   // required to wrap the text.
      .                   let mut num_of_hashes = 0;
      .                   let mut count = 0;
      .                   for ch in data.as_str().chars() {
      .                       count = match ch {
-- line 298 ----------------------------------------
-- line 332 ----------------------------------------
      .                                   .iter()
      .                                   .cloned()
      .                                   .collect::<TokenStream>()
      .                           },
      .                       ),
      .                   ));
      .           
      .                   self.next()
147,942 ( 0.07%)      }
      .           }
      .           
    280 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
      .           enum TokenType {
    224 ( 0.00%)      Token(TokenKind),
      .               Keyword(Symbol),
      .               Operator,
      .               Lifetime,
      .               Ident,
      .               Path,
      .               Type,
      .               Const,
      .           }
-- line 353 ----------------------------------------
-- line 378 ----------------------------------------
      .               /// The separator token.
      .               sep: Option<TokenKind>,
      .               /// `true` if a trailing separator is allowed.
      .               trailing_sep_allowed: bool,
      .           }
      .           
      .           impl SeqSep {
      .               fn trailing_allowed(t: TokenKind) -> SeqSep {
      3 ( 0.00%)          SeqSep { sep: Some(t), trailing_sep_allowed: true }
      .               }
      .           
      .               fn none() -> SeqSep {
      .                   SeqSep { sep: None, trailing_sep_allowed: false }
      .               }
      .           }
      .           
      .           pub enum FollowedByType {
      .               Yes,
      .               No,
      .           }
      .           
      .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
      8 ( 0.00%)      Some(match token.kind {
     16 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
     16 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
     16 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
      .                   token::DocComment(..) => "doc comment",
      .                   _ => return None,
      .               })
      .           }
      .           
     28 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
      8 ( 0.00%)      let token_str = pprust::token_to_string(token);
      .               match token_descr_opt(token) {
      .                   Some(prefix) => format!("{} `{}`", prefix, token_str),
     28 ( 0.00%)          _ => format!("`{}`", token_str),
      .               }
     20 ( 0.00%)  }
      .           
      .           impl<'a> Parser<'a> {
 11,970 ( 0.01%)      pub fn new(
      .                   sess: &'a ParseSess,
      .                   tokens: TokenStream,
      .                   desugar_doc_comments: bool,
      .                   subparser_name: Option<&'static str>,
      .               ) -> Self {
    855 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
  1,710 ( 0.00%)          start_frame.open_delim = true;
      .                   start_frame.close_delim = true;
      .           
 26,505 ( 0.01%)          let mut parser = Parser {
      .                       sess,
    855 ( 0.00%)              token: Token::dummy(),
      .                       token_spacing: Spacing::Alone,
    855 ( 0.00%)              prev_token: Token::dummy(),
      .                       capture_cfg: false,
      .                       restrictions: Restrictions::empty(),
      .                       expected_tokens: Vec::new(),
      .                       token_cursor: TokenCursor {
  5,130 ( 0.00%)                  frame: start_frame,
      .                           stack: Vec::new(),
      .                           num_next_calls: 0,
      .                           desugar_doc_comments,
      .                           break_last_token: false,
      .                       },
      .                       desugar_doc_comments,
      .                       unmatched_angle_bracket_count: 0,
      .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
      .                           capturing: Capturing::No,
      .                           replace_ranges: Vec::new(),
      .                           inner_attr_ranges: Default::default(),
      .                       },
      .                       current_closure: None,
      .                   };
      .           
      .                   // Make parser point to the first token.
  1,710 ( 0.00%)          parser.bump();
      .           
      .                   parser
  7,695 ( 0.00%)      }
      .           
      .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
      .                   loop {
178,128 ( 0.08%)              let (mut next, spacing) = if self.desugar_doc_comments {
 65,752 ( 0.03%)                  self.token_cursor.next_desugared()
      .                       } else {
 39,750 ( 0.02%)                  self.token_cursor.next()
      .                       };
118,752 ( 0.05%)              self.token_cursor.num_next_calls += 1;
      .                       // We've retrieved an token from the underlying
      .                       // cursor, so we no longer need to worry about
      .                       // an unglued token. See `break_and_eat` for more details
 29,688 ( 0.01%)              self.token_cursor.break_last_token = false;
118,752 ( 0.05%)              if next.span.is_dummy() {
      .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
  3,424 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
      .                       }
100,252 ( 0.05%)              if matches!(
 59,376 ( 0.03%)                  next.kind,
      .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
      .                       ) {
      .                           continue;
      .                       }
118,752 ( 0.05%)              return (next, spacing);
      .                   }
      .               }
      .           
      .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
      .                   match self.expect_one_of(&[], &[]) {
      .                       Err(e) => Err(e),
      .                       // We can get `Ok(true)` from `recover_closing_delimiter`
      .                       // which is called in `expected_one_of_not_found`.
      .                       Ok(_) => FatalError.raise(),
      .                   }
      .               }
      .           
      .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
  2,754 ( 0.00%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
    306 ( 0.00%)          if self.expected_tokens.is_empty() {
     30 ( 0.00%)              if self.token == *t {
     25 ( 0.00%)                  self.bump();
      .                           Ok(false)
      .                       } else {
      .                           self.unexpected_try_recover(t)
      .                       }
      .                   } else {
  3,612 ( 0.00%)              self.expect_one_of(slice::from_ref(t), &[])
      .                   }
  4,590 ( 0.00%)      }
      .           
      .               /// Expect next token to be edible or inedible token.  If edible,
      .               /// then consume it; if inedible, then return without consuming
      .               /// anything.  Signal a fatal error if next token is unexpected.
  4,980 ( 0.00%)      pub fn expect_one_of(
      .                   &mut self,
      .                   edible: &[TokenKind],
      .                   inedible: &[TokenKind],
      .               ) -> PResult<'a, bool /* recovered */> {
    830 ( 0.00%)          if edible.contains(&self.token.kind) {
    948 ( 0.00%)              self.bump();
      .                       Ok(false)
      .                   } else if inedible.contains(&self.token.kind) {
      .                       // leave it in the input
      .                       Ok(false)
      .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
      .                       FatalError.raise();
      .                   } else {
      .                       self.expected_one_of_not_found(edible, inedible)
      .                   }
  6,225 ( 0.00%)      }
      .           
      .               // Public for rustfmt usage.
      .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
  4,487 ( 0.00%)          self.parse_ident_common(true)
      .               }
      .           
      .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
  3,309 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
      .                       TokenKind::DocComment(..) => {
      .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
      .                       }
      .                       _ => self.expected_ident_found(),
      .                   })
      .               }
      .           
  7,721 ( 0.00%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
  1,103 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
  6,618 ( 0.00%)          if !is_raw && ident.is_reserved() {
      .                       let mut err = self.expected_ident_found();
      .                       if recover {
      .                           err.emit();
      .                       } else {
      .                           return Err(err);
      .                       }
      .                   }
  4,412 ( 0.00%)          self.bump();
      .                   Ok(ident)
 11,030 ( 0.01%)      }
      .           
      .               /// Checks if the next token is `tok`, and returns `true` if so.
      .               ///
      .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
      .               /// encountered.
 94,906 ( 0.04%)      fn check(&mut self, tok: &TokenKind) -> bool {
 41,078 ( 0.02%)          let is_present = self.token == *tok;
 27,790 ( 0.01%)          if !is_present {
 47,978 ( 0.02%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
      .                   }
      .                   is_present
 94,906 ( 0.04%)      }
      .           
      .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
     12 ( 0.00%)      pub fn eat(&mut self, tok: &TokenKind) -> bool {
 19,293 ( 0.01%)          let is_present = self.check(tok);
 12,649 ( 0.01%)          if is_present {
  4,370 ( 0.00%)              self.bump()
      .                   }
      .                   is_present
     15 ( 0.00%)      }
      .           
      .               /// If the next token is the given keyword, returns `true` without eating it.
      .               /// An expectation is also added for diagnostics purposes.
  1,365 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
    741 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
 13,076 ( 0.01%)          self.token.is_keyword(kw)
      .               }
      .           
      .               /// If the next token is the given keyword, eats it and returns `true`.
      .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
      .               // Public for rustfmt usage.
  4,160 ( 0.00%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
  2,682 ( 0.00%)          if self.check_keyword(kw) {
    429 ( 0.00%)              self.bump();
      .                       true
      .                   } else {
      .                       false
      .                   }
  4,160 ( 0.00%)      }
      .           
      .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
     60 ( 0.00%)          if self.token.is_keyword(kw) {
     15 ( 0.00%)              self.bump();
      .                       true
      .                   } else {
      .                       false
      .                   }
      .               }
      .           
      .               /// If the given word is not a keyword, signals an error.
      .               /// If the next token is not the given word, signals an error.
      .               /// Otherwise, eats it.
      .               fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
      .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
      .               }
      .           
      .               /// Is the given keyword `kw` followed by a non-reserved identifier?
 16,616 ( 0.01%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
  8,308 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
 18,693 ( 0.01%)      }
      .           
  2,610 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
  1,910 ( 0.00%)          if ok {
      .                       true
      .                   } else {
    256 ( 0.00%)              self.expected_tokens.push(typ);
      .                       false
      .                   }
  2,610 ( 0.00%)      }
      .           
      .               fn check_ident(&mut self) -> bool {
    855 ( 0.00%)          self.check_or_expected(self.token.is_ident(), TokenType::Ident)
      .               }
      .           
  1,224 ( 0.00%)      fn check_path(&mut self) -> bool {
  3,098 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
  1,530 ( 0.00%)      }
      .           
      .               fn check_type(&mut self) -> bool {
     24 ( 0.00%)          self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
      .               }
      .           
      .               fn check_const_arg(&mut self) -> bool {
     24 ( 0.00%)          self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
      .               }
      .           
  1,044 ( 0.00%)      fn check_inline_const(&self, dist: usize) -> bool {
    580 ( 0.00%)          self.is_keyword_ahead(dist, &[kw::Const])
      .                       && self.look_ahead(dist + 1, |t| match t.kind {
      .                           token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),
      .                           token::OpenDelim(DelimToken::Brace) => true,
      .                           _ => false,
      .                       })
  1,044 ( 0.00%)      }
      .           
      .               /// Checks to see if the next token is either `+` or `+=`.
      .               /// Otherwise returns `false`.
      .               fn check_plus(&mut self) -> bool {
     60 ( 0.00%)          self.check_or_expected(
     30 ( 0.00%)              self.token.is_like_plus(),
     30 ( 0.00%)              TokenType::Token(token::BinOp(token::Plus)),
      .                   )
      .               }
      .           
      .               /// Eats the expected token if it's present possibly breaking
      .               /// compound tokens like multi-character operators in process.
      .               /// Returns `true` if the token was eaten.
  4,536 ( 0.00%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
  2,646 ( 0.00%)          if self.token.kind == expected {
    192 ( 0.00%)              self.bump();
      .                       return true;
      .                   }
  1,410 ( 0.00%)          match self.token.kind.break_two_token_op() {
      7 ( 0.00%)              Some((first, second)) if first == expected => {
      4 ( 0.00%)                  let first_span = self.sess.source_map().start_point(self.token.span);
      5 ( 0.00%)                  let second_span = self.token.span.with_lo(first_span.hi());
      9 ( 0.00%)                  self.token = Token::new(first, first_span);
      .                           // Keep track of this token - if we end token capturing now,
      .                           // we'll want to append this token to the captured stream.
      .                           //
      .                           // If we consume any additional tokens, then this token
      .                           // is not needed (we'll capture the entire 'glued' token),
      .                           // and `next_tok` will set this field to `None`
      1 ( 0.00%)                  self.token_cursor.break_last_token = true;
      .                           // Use the spacing of the glued token as the spacing
      .                           // of the unglued second token.
     14 ( 0.00%)                  self.bump_with((Token::new(second, second_span), self.token_spacing));
      .                           true
      .                       }
      .                       _ => {
    843 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
      .                           false
      .                       }
      .                   }
  4,526 ( 0.00%)      }
      .           
      .               /// Eats `+` possibly breaking tokens like `+=` in process.
      .               fn eat_plus(&mut self) -> bool {
      .                   self.break_and_eat(token::BinOp(token::Plus))
      .               }
      .           
      .               /// Eats `&` possibly breaking tokens like `&&` in process.
      .               /// Signals an error if `&` is not eaten.
      .               fn expect_and(&mut self) -> PResult<'a, ()> {
    540 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `|` possibly breaking tokens like `||` in process.
      .               /// Signals an error if `|` was not eaten.
      .               fn expect_or(&mut self) -> PResult<'a, ()> {
      6 ( 0.00%)          if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `<` possibly breaking tokens like `<<` in process.
     52 ( 0.00%)      fn eat_lt(&mut self) -> bool {
    861 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
    571 ( 0.00%)          if ate {
      .                       // See doc comment for `unmatched_angle_bracket_count`.
     12 ( 0.00%)              self.unmatched_angle_bracket_count += 1;
     12 ( 0.00%)              self.max_angle_bracket_count += 1;
      .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
      .                   }
      .                   ate
     52 ( 0.00%)      }
      .           
      .               /// Eats `<` possibly breaking tokens like `<<` in process.
      .               /// Signals an error if `<` was not eaten.
      .               fn expect_lt(&mut self) -> PResult<'a, ()> {
      .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `>` possibly breaking tokens like `>>` in process.
      .               /// Signals an error if `>` was not eaten.
      .               fn expect_gt(&mut self) -> PResult<'a, ()> {
     18 ( 0.00%)          if self.break_and_eat(token::Gt) {
      .                       // See doc comment for `unmatched_angle_bracket_count`.
      9 ( 0.00%)              if self.unmatched_angle_bracket_count > 0 {
      6 ( 0.00%)                  self.unmatched_angle_bracket_count -= 1;
      .                           debug!("expect_gt: (decrement) count={:?}", self.unmatched_angle_bracket_count);
      .                       }
      .                       Ok(())
      .                   } else {
      .                       self.unexpected()
      .                   }
      .               }
      .           
      .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
      .                   kets.iter().any(|k| match expect {
    732 ( 0.00%)              TokenExpectType::Expect => self.check(k),
     15 ( 0.00%)              TokenExpectType::NoExpect => self.token == **k,
      .                   })
      .               }
      .           
      .               fn parse_seq_to_before_tokens<T>(
      .                   &mut self,
      .                   kets: &[&TokenKind],
      .                   sep: SeqSep,
      .                   expect: TokenExpectType,
-- line 759 ----------------------------------------
-- line 761 ----------------------------------------
      .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
      .                   let mut first = true;
      .                   let mut recovered = false;
      .                   let mut trailing = false;
      .                   let mut v = vec![];
      .                   let unclosed_delims = !self.unclosed_delims.is_empty();
      .           
      .                   while !self.expect_any_with_type(kets, expect) {
  1,195 ( 0.00%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
      .                           break;
      .                       }
    790 ( 0.00%)              if let Some(ref t) = sep.sep {
    900 ( 0.00%)                  if first {
      .                               first = false;
      .                           } else {
    679 ( 0.00%)                      match self.expect(t) {
      .                                   Ok(false) => {
      .                                       self.current_closure.take();
      .                                   }
      .                                   Ok(true) => {
      .                                       self.current_closure.take();
      .                                       recovered = true;
      .                                       break;
      .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
      .                                               e.cancel();
      .                                               break;
      .                                           }
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
    404 ( 0.00%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
      .                           trailing = true;
      .                           break;
      .                       }
      .           
    215 ( 0.00%)              let t = f(self)?;
     15 ( 0.00%)              v.push(t);
      .                   }
      .           
    648 ( 0.00%)          Ok((v, trailing, recovered))
      .               }
      .           
      .               fn recover_missing_braces_around_closure_body(
      .                   &mut self,
      .                   closure_spans: ClosureSpans,
      .                   mut expect_err: DiagnosticBuilder<'_>,
      .               ) -> PResult<'a, ()> {
      .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
      .               fn parse_seq_to_before_end<T>(
      .                   &mut self,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
    648 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
      .               }
      .           
      .               /// Parses a sequence, including the closing delimiter. The function
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
  1,410 ( 0.00%)      fn parse_seq_to_end<T>(
      .                   &mut self,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
    463 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
    181 ( 0.00%)          if !recovered {
      .                       self.eat(ket);
      .                   }
  1,335 ( 0.00%)          Ok((val, trailing))
  1,128 ( 0.00%)      }
      .           
      .               /// Parses a sequence, including the closing delimiter. The function
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
      .               fn parse_unspanned_seq<T>(
      .                   &mut self,
      .                   bra: &TokenKind,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
    457 ( 0.00%)          self.expect(bra)?;
  1,128 ( 0.00%)          self.parse_seq_to_end(ket, sep, f)
      .               }
      .           
      .               fn parse_delim_comma_seq<T>(
      .                   &mut self,
      .                   delim: DelimToken,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
      .                   self.parse_unspanned_seq(
    161 ( 0.00%)              &token::OpenDelim(delim),
    181 ( 0.00%)              &token::CloseDelim(delim),
      .                       SeqSep::trailing_allowed(token::Comma),
      .                       f,
      .                   )
      .               }
      .           
      .               fn parse_paren_comma_seq<T>(
      .                   &mut self,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
      .                   self.parse_delim_comma_seq(token::Paren, f)
      .               }
      .           
      .               /// Advance the parser by one token using provided token as the next one.
385,957 ( 0.18%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
      .                   // Bumping after EOF is a bad sign, usually an infinite loop.
178,134 ( 0.08%)          if self.prev_token.kind == TokenKind::Eof {
      .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
      .                       self.span_bug(self.token.span, msg);
      .                   }
      .           
      .                   // Update the current and previous tokens.
118,756 ( 0.05%)          self.prev_token = mem::replace(&mut self.token, next_token);
 29,689 ( 0.01%)          self.token_spacing = next_spacing;
      .           
      .                   // Diagnostics.
 29,689 ( 0.01%)          self.expected_tokens.clear();
      .               }
      .           
      .               /// Advance the parser by one token.
237,504 ( 0.11%)      pub fn bump(&mut self) {
118,752 ( 0.05%)          let next_token = self.next_tok(self.token.span);
178,128 ( 0.08%)          self.bump_with(next_token);
237,504 ( 0.11%)      }
      .           
      .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
      .               /// When `dist == 0` then the current token is looked at.
     24 ( 0.00%)      pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
    248 ( 0.00%)          if dist == 0 {
    120 ( 0.00%)              return looker(&self.token);
      .                   }
      .           
  2,221 ( 0.00%)          let frame = &self.token_cursor.frame;
  2,371 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
      .                       let all_normal = (0..dist).all(|i| {
  3,760 ( 0.00%)                  let token = frame.tree_cursor.look_ahead(i);
  4,984 ( 0.00%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
      .                       });
      .                       if all_normal {
  6,153 ( 0.00%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
  2,252 ( 0.00%)                      Some(tree) => match tree {
  1,087 ( 0.00%)                          TokenTree::Token(token) => looker(token),
      .                                   TokenTree::Delimited(dspan, delim, _) => {
    378 ( 0.00%)                              looker(&Token::new(token::OpenDelim(*delim), dspan.open))
      .                                   }
      .                               },
    935 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
      .                           };
      .                       }
      .                   }
      .           
      .                   let mut cursor = self.token_cursor.clone();
      .                   let mut i = 0;
  1,118 ( 0.00%)          let mut token = Token::dummy();
     36 ( 0.00%)          while i < dist {
  7,838 ( 0.00%)              token = cursor.next().0;
  3,343 ( 0.00%)              if matches!(
  2,244 ( 0.00%)                  token.kind,
      .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
      .                       ) {
      .                           continue;
      .                       }
     15 ( 0.00%)              i += 1;
      .                   }
    521 ( 0.00%)          return looker(&token);
     27 ( 0.00%)      }
      .           
      .               /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.
  1,080 ( 0.00%)      fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {
    252 ( 0.00%)          self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))
  1,080 ( 0.00%)      }
      .           
      .               /// Parses asyncness: `async` or nothing.
      .               fn parse_asyncness(&mut self) -> Async {
      .                   if self.eat_keyword(kw::Async) {
      .                       let span = self.prev_token.uninterpolated_span();
      .                       Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }
      .                   } else {
      .                       Async::No
      .                   }
      .               }
      .           
      .               /// Parses unsafety: `unsafe` or nothing.
     12 ( 0.00%)      fn parse_unsafety(&mut self) -> Unsafe {
      .                   if self.eat_keyword(kw::Unsafe) {
      .                       Unsafe::Yes(self.prev_token.uninterpolated_span())
      .                   } else {
      .                       Unsafe::No
      .                   }
     48 ( 0.00%)      }
      .           
      .               /// Parses constness: `const` or nothing.
    264 ( 0.00%)      fn parse_constness(&mut self) -> Const {
      .                   // Avoid const blocks to be parsed as const items
     77 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
      .                       && self.eat_keyword(kw::Const)
      .                   {
      .                       Const::Yes(self.prev_token.uninterpolated_span())
      .                   } else {
      .                       Const::No
      .                   }
    462 ( 0.00%)      }
      .           
      .               /// Parses inline const expressions.
      .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
      .                   if pat {
      .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
      .                   } else {
      .                       self.sess.gated_spans.gate(sym::inline_const, span);
      .                   }
-- line 1104 ----------------------------------------
-- line 1108 ----------------------------------------
      .                       id: DUMMY_NODE_ID,
      .                       value: self.mk_expr(blk.span, ExprKind::Block(blk, None), AttrVec::new()),
      .                   };
      .                   let blk_span = anon_const.value.span;
      .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
      .               }
      .           
      .               /// Parses mutability (`mut` or nothing).
      4 ( 0.00%)      fn parse_mutability(&mut self) -> Mutability {
      .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
    186 ( 0.00%)      }
      .           
      .               /// Possibly parses mutability (`const` or `mut`).
      .               fn parse_const_or_mut(&mut self) -> Option<Mutability> {
      .                   if self.eat_keyword(kw::Mut) {
      .                       Some(Mutability::Mut)
      .                   } else if self.eat_keyword(kw::Const) {
      .                       Some(Mutability::Not)
      .                   } else {
-- line 1126 ----------------------------------------
-- line 1135 ----------------------------------------
      .                       self.bump();
      .                       Ok(Ident::new(symbol, self.prev_token.span))
      .                   } else {
      .                       self.parse_ident_common(true)
      .                   }
      .               }
      .           
      .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
    944 ( 0.00%)          self.parse_mac_args_common(true).map(P)
      .               }
      .           
      .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
     27 ( 0.00%)          self.parse_mac_args_common(false)
      .               }
      .           
  4,113 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
  3,656 ( 0.00%)          Ok(
  2,353 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
     51 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Bracket))
     51 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Brace))
      .                       {
  1,808 ( 0.00%)                  match self.parse_token_tree() {
  2,260 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
      .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
      .                               {
    904 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
      .                               }
      .                               _ => unreachable!(),
      .                           }
     10 ( 0.00%)              } else if !delimited_only {
      .                           if self.eat(&token::Eq) {
      .                               let eq_span = self.prev_token.span;
      .           
      .                               // Collect tokens because they are used during lowering to HIR.
      .                               let expr = self.parse_expr_force_collect()?;
      .                               let span = expr.span;
      .           
      .                               let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));
-- line 1172 ----------------------------------------
-- line 1173 ----------------------------------------
      .                               MacArgs::Eq(eq_span, Token::new(token_kind, span))
      .                           } else {
      .                               MacArgs::Empty
      .                           }
      .                       } else {
      .                           return self.unexpected();
      .                       },
      .                   )
  3,199 ( 0.00%)      }
      .           
      .               fn parse_or_use_outer_attributes(
      .                   &mut self,
      .                   already_parsed_attrs: Option<AttrWrapper>,
      .               ) -> PResult<'a, AttrWrapper> {
  1,326 ( 0.00%)          if let Some(attrs) = already_parsed_attrs {
      .                       Ok(attrs)
      .                   } else {
    780 ( 0.00%)              self.parse_outer_attributes()
      .                   }
      .               }
      .           
      .               /// Parses a single token tree from the input.
 47,512 ( 0.02%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
 36,009 ( 0.02%)          match self.token.kind {
      .                       token::OpenDelim(..) => {
      .                           let depth = self.token_cursor.stack.len();
      .           
      .                           // We keep advancing the token cursor until we hit
      .                           // the matching `CloseDelim` token.
 42,536 ( 0.02%)                  while !(depth == self.token_cursor.stack.len()
      .                               && matches!(self.token.kind, token::CloseDelim(_)))
      .                           {
      .                               // Advance one token at a time, so `TokenCursor::next()`
      .                               // can capture these tokens if necessary.
 27,742 ( 0.01%)                      self.bump();
      .                           }
      .                           // We are still inside the frame corresponding
      .                           // to the delimited stream we captured, so grab
      .                           // the tokens from this frame.
      .                           let frame = &self.token_cursor.frame;
  2,782 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
  2,782 ( 0.00%)                  let span = frame.span;
  1,391 ( 0.00%)                  let delim = frame.delim;
      .                           // Consume close delimiter
  2,782 ( 0.00%)                  self.bump();
  6,955 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
      .                       }
      .                       token::CloseDelim(_) | token::Eof => unreachable!(),
      .                       _ => {
  9,096 ( 0.00%)                  self.bump();
 22,740 ( 0.01%)                  TokenTree::Token(self.prev_token.clone())
      .                       }
      .                   }
 41,573 ( 0.02%)      }
      .           
      .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
      .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
      .                   let mut tts = Vec::new();
      .                   while self.token != token::Eof {
      .                       tts.push(self.parse_token_tree());
      .                   }
      .                   Ok(tts)
-- line 1234 ----------------------------------------
-- line 1244 ----------------------------------------
      .                   }
      .                   TokenStream::new(result)
      .               }
      .           
      .               /// Evaluates the closure with restrictions in place.
      .               ///
      .               /// Afters the closure is evaluated, restrictions are reset.
      .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
    502 ( 0.00%)          let old = self.restrictions;
    627 ( 0.00%)          self.restrictions = res;
      .                   let res = f(self);
    584 ( 0.00%)          self.restrictions = old;
      .                   res
      .               }
      .           
  4,264 ( 0.00%)      fn is_crate_vis(&self) -> bool {
  2,665 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
  4,797 ( 0.00%)      }
      .           
      .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
      .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
      .               /// If the following element can't be a tuple (i.e., it's a function definition), then
      .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
      .               /// so emit a proper diagnostic.
      .               // Public for rustfmt usage.
    430 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
     86 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
      .           
     43 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
    172 ( 0.00%)          if self.is_crate_vis() {
      .                       self.bump(); // `crate`
      .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
      .                       return Ok(Visibility {
      .                           span: self.prev_token.span,
      .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
      .                           tokens: None,
      .                       });
      .                   }
      .           
      .                   if !self.eat_keyword(kw::Pub) {
      .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
      .                       // keyword to grab a span from for inherited visibility; an empty span at the
      .                       // beginning of the current token would seem to be the "Schelling span".
     42 ( 0.00%)              return Ok(Visibility {
    126 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
      .                           kind: VisibilityKind::Inherited,
      .                           tokens: None,
      .                       });
      .                   }
      1 ( 0.00%)          let lo = self.prev_token.span;
      .           
      5 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
      .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
      .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
      .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
      .                       // by the following tokens.
      .                       if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
      .                       // account for `pub(crate::foo)`
      .                       {
      .                           // Parse `pub(crate)`.
-- line 1303 ----------------------------------------
-- line 1338 ----------------------------------------
      .                       } else if let FollowedByType::No = fbt {
      .                           // Provide this diagnostic if a type cannot follow;
      .                           // in particular, if this is not a tuple struct.
      .                           self.recover_incorrect_vis_restriction()?;
      .                           // Emit diagnostic, but continue with public visibility.
      .                       }
      .                   }
      .           
      3 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
    387 ( 0.00%)      }
      .           
      .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
      .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
      .                   self.bump(); // `(`
      .                   let path = self.parse_path(PathStyle::Mod)?;
      .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
      .           
      .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1370 ----------------------------------------
      .                       )
      .                       .emit();
      .           
      .                   Ok(())
      .               }
      .           
      .               /// Parses `extern string_literal?`.
      .               fn parse_extern(&mut self) -> Extern {
      6 ( 0.00%)          if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }
      .               }
      .           
      .               /// Parses a string literal as an ABI spec.
      .               fn parse_abi(&mut self) -> Option<StrLit> {
      .                   match self.parse_str_lit() {
      .                       Ok(str_lit) => Some(str_lit),
      .                       Err(Some(lit)) => match lit.kind {
      .                           ast::LitKind::Err(_) => None,
-- line 1386 ----------------------------------------
-- line 1395 ----------------------------------------
      .                                   .emit();
      .                               None
      .                           }
      .                       },
      .                       Err(None) => None,
      .                   }
      .               }
      .           
     40 ( 0.00%)      pub fn collect_tokens_no_attrs<R: AstLike>(
      .                   &mut self,
      .                   f: impl FnOnce(&mut Self) -> PResult<'a, R>,
      .               ) -> PResult<'a, R> {
      .                   // The only reason to call `collect_tokens_no_attrs` is if you want tokens, so use
      .                   // `ForceCollect::Yes`
      .                   self.collect_tokens_trailing_token(
      .                       AttrWrapper::empty(),
      .                       ForceCollect::Yes,
      4 ( 0.00%)              |this, _attrs| Ok((f(this)?, TrailingToken::None)),
      .                   )
     40 ( 0.00%)      }
      .           
      .               /// `::{` or `::*`
 12,152 ( 0.01%)      fn is_import_coupler(&mut self) -> bool {
  6,076 ( 0.00%)          self.check(&token::ModSep)
      .                       && self.look_ahead(1, |t| {
  7,424 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
      .                       })
 11,862 ( 0.01%)      }
      .           
      .               pub fn clear_expected_tokens(&mut self) {
      .                   self.expected_tokens.clear();
      .               }
      .           }
      .           
      .           crate fn make_unclosed_delims_error(
      .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
      .                   err.span_label(sp, "closing delimiter possibly meant for this");
      .               }
      .               if let Some(sp) = unmatched.unclosed_span {
      .                   err.span_label(sp, "unclosed delimiter");
      .               }
      .               Some(err)
      .           }
      .           
 32,720 ( 0.02%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
 16,360 ( 0.01%)      *sess.reached_eof.borrow_mut() |=
      .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
 16,360 ( 0.01%)      for unmatched in unclosed_delims.drain(..) {
      .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
      .                       e.emit();
      .                   }
      .               }
 32,720 ( 0.02%)  }
      .           
      .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
      .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
      .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
      .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
      .           /// `AttrAnnotatedTokenTree::Delimited` tokens
      .           #[derive(Debug, Clone)]
      .           pub enum FlatToken {
-- line 1474 ----------------------------------------

150,757 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 71 ----------------------------------------
      .               fn default() -> FxHasher {
      .                   FxHasher { hash: 0 }
      .               }
      .           }
      .           
      .           impl FxHasher {
      .               #[inline]
      .               fn add_to_hash(&mut self, i: usize) {
115,037 ( 0.05%)          self.hash = self.hash.rotate_left(5).bitxor(i).wrapping_mul(K);
      .               }
      .           }
      .           
      .           impl Hasher for FxHasher {
      .               #[inline]
  1,058 ( 0.00%)      fn write(&mut self, mut bytes: &[u8]) {
      .                   #[cfg(target_pointer_width = "32")]
      .                   let read_usize = |bytes: &[u8]| u32::from_ne_bytes(bytes[..4].try_into().unwrap());
      .                   #[cfg(target_pointer_width = "64")]
      .                   let read_usize = |bytes: &[u8]| u64::from_ne_bytes(bytes[..8].try_into().unwrap());
      .           
 31,329 ( 0.01%)          let mut hash = FxHasher { hash: self.hash };
      .                   assert!(size_of::<usize>() <= 8);
367,799 ( 0.17%)          while bytes.len() >= size_of::<usize>() {
      .                       hash.add_to_hash(read_usize(bytes) as usize);
      .                       bytes = &bytes[size_of::<usize>()..];
      .                   }
 61,666 ( 0.03%)          if (size_of::<usize>() > 4) && (bytes.len() >= 4) {
      .                       hash.add_to_hash(u32::from_ne_bytes(bytes[..4].try_into().unwrap()) as usize);
      .                       bytes = &bytes[4..];
      .                   }
 61,666 ( 0.03%)          if (size_of::<usize>() > 2) && bytes.len() >= 2 {
      .                       hash.add_to_hash(u16::from_ne_bytes(bytes[..2].try_into().unwrap()) as usize);
      .                       bytes = &bytes[2..];
      .                   }
 68,015 ( 0.03%)          if (size_of::<usize>() > 1) && bytes.len() >= 1 {
 16,283 ( 0.01%)              hash.add_to_hash(bytes[0] as usize);
      .                   }
  1,866 ( 0.00%)          self.hash = hash.hash;
  1,058 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn write_u8(&mut self, i: u8) {
     37 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u16(&mut self, i: u16) {
     36 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u32(&mut self, i: u32) {
235,945 ( 0.11%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[cfg(target_pointer_width = "32")]
      .               #[inline]
      .               fn write_u64(&mut self, i: u64) {
      .                   self.add_to_hash(i as usize);
      .                   self.add_to_hash((i >> 32) as usize);
      .               }
-- line 131 ----------------------------------------

      1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 293 ----------------------------------------
        .           
        .           #[allow(deprecated)]
        .           impl From<LayoutErr> for CollectionAllocErr {
        .               fn from(_: LayoutErr) -> Self {
        .                   CollectionAllocErr::CapacityOverflow
        .               }
        .           }
        .           
       71 ( 0.00%)  fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
   37,138 ( 0.02%)      match result {
        .                   Ok(x) => x,
        .                   Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
        .                   Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
        .               }
      142 ( 0.00%)  }
        .           
        .           /// FIXME: use `Layout::array` when we require a Rust version where it’s stable
        .           /// https://github.com/rust-lang/rust/issues/55724
        .           fn layout_array<T>(n: usize) -> Result<Layout, CollectionAllocErr> {
        .               let size = mem::size_of::<T>()
        .                   .checked_mul(n)
        .                   .ok_or(CollectionAllocErr::CapacityOverflow)?;
        .               let align = mem::align_of::<T>();
-- line 315 ----------------------------------------
-- line 422 ----------------------------------------
        .           #[cfg(feature = "union")]
        .           impl<A: Array> SmallVecData<A> {
        .               #[inline]
        .               unsafe fn inline(&self) -> *const A::Item {
        .                   self.inline.as_ptr() as *const A::Item
        .               }
        .               #[inline]
        .               unsafe fn inline_mut(&mut self) -> *mut A::Item {
    3,640 ( 0.00%)          self.inline.as_mut_ptr() as *mut A::Item
        .               }
        .               #[inline]
        .               fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
        .                   SmallVecData {
        .                       inline: core::mem::ManuallyDrop::new(inline),
        .                   }
        .               }
        .               #[inline]
        .               unsafe fn into_inline(self) -> MaybeUninit<A> {
        .                   core::mem::ManuallyDrop::into_inner(self.inline)
        .               }
        .               #[inline]
        .               unsafe fn heap(&self) -> (*mut A::Item, usize) {
    8,847 ( 0.00%)          self.heap
        .               }
        .               #[inline]
        .               unsafe fn heap_mut(&mut self) -> &mut (*mut A::Item, usize) {
        .                   &mut self.heap
        .               }
        .               #[inline]
        .               fn from_heap(ptr: *mut A::Item, len: usize) -> SmallVecData<A> {
        .                   SmallVecData { heap: (ptr, len) }
-- line 452 ----------------------------------------
-- line 557 ----------------------------------------
        .               #[inline]
        .               pub fn new() -> SmallVec<A> {
        .                   // Try to detect invalid custom implementations of `Array`. Hopefully,
        .                   // this check should be optimized away entirely for valid ones.
        .                   assert!(
        .                       mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
        .                           && mem::align_of::<A>() >= mem::align_of::<A::Item>()
        .                   );
   68,037 ( 0.03%)          SmallVec {
        .                       capacity: 0,
        .                       data: SmallVecData::from_inline(MaybeUninit::uninit()),
        .                   }
        .               }
        .           
        .               /// Construct an empty vector with enough capacity pre-allocated to store at least `n`
        .               /// elements.
        .               ///
-- line 573 ----------------------------------------
-- line 635 ----------------------------------------
        .               /// let small_vec: SmallVec<_> = SmallVec::from_buf(buf);
        .               ///
        .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
        .               /// ```
        .               #[inline]
        .               pub fn from_buf(buf: A) -> SmallVec<A> {
        .                   SmallVec {
        .                       capacity: A::size(),
      462 ( 0.00%)              data: SmallVecData::from_inline(MaybeUninit::new(buf)),
        .                   }
        .               }
        .           
        .               /// Constructs a new `SmallVec` on the stack from an `A` without
        .               /// copying elements. Also sets the length, which must be less or
        .               /// equal to the size of `buf`.
        .               ///
        .               /// ```rust
-- line 651 ----------------------------------------
-- line 653 ----------------------------------------
        .               ///
        .               /// let buf = [1, 2, 3, 4, 5, 0, 0, 0];
        .               /// let small_vec: SmallVec<_> = SmallVec::from_buf_and_len(buf, 5);
        .               ///
        .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
        .               /// ```
        .               #[inline]
        .               pub fn from_buf_and_len(buf: A, len: usize) -> SmallVec<A> {
       12 ( 0.00%)          assert!(len <= A::size());
       36 ( 0.00%)          unsafe { SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), len) }
        .               }
        .           
        .               /// Constructs a new `SmallVec` on the stack from an `A` without
        .               /// copying elements. Also sets the length. The user is responsible
        .               /// for ensuring that `len <= A::size()`.
        .               ///
        .               /// ```rust
        .               /// use smallvec::SmallVec;
-- line 670 ----------------------------------------
-- line 674 ----------------------------------------
        .               /// let small_vec: SmallVec<_> = unsafe {
        .               ///     SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), 5)
        .               /// };
        .               ///
        .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
        .               /// ```
        .               #[inline]
        .               pub unsafe fn from_buf_and_len_unchecked(buf: MaybeUninit<A>, len: usize) -> SmallVec<A> {
        6 ( 0.00%)          SmallVec {
        .                       capacity: len,
        .                       data: SmallVecData::from_inline(buf),
        .                   }
        .               }
        .           
        .               /// Sets the length of a vector.
        .               ///
        .               /// This will explicitly set the size of the vector, without actually
        .               /// modifying its buffers, so it is up to the caller to ensure that the
        .               /// vector is actually the specified size.
        .               pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   let (_, len_ptr, _) = self.triple_mut();
    7,006 ( 0.00%)          *len_ptr = new_len;
        .               }
        .           
        .               /// The maximum number of elements this vector can hold inline
        .               #[inline]
        .               fn inline_capacity() -> usize {
        .                   if mem::size_of::<A::Item>() > 0 {
        .                       A::size()
        .                   } else {
-- line 703 ----------------------------------------
-- line 725 ----------------------------------------
        .               #[inline]
        .               pub fn len(&self) -> usize {
        .                   self.triple().1
        .               }
        .           
        .               /// Returns `true` if the vector is empty
        .               #[inline]
        .               pub fn is_empty(&self) -> bool {
   38,466 ( 0.02%)          self.len() == 0
        .               }
        .           
        .               /// The number of items the vector can hold without reallocating
        .               #[inline]
        .               pub fn capacity(&self) -> usize {
        .                   self.triple().2
        .               }
        .           
        .               /// Returns a tuple with (data ptr, len, capacity)
        .               /// Useful to get all SmallVec properties with a single check of the current storage variant.
        .               #[inline]
        .               fn triple(&self) -> (*const A::Item, usize, usize) {
        .                   unsafe {
  229,945 ( 0.11%)              if self.spilled() {
        .                           let (ptr, len) = self.data.heap();
        .                           (ptr, len, self.capacity)
        .                       } else {
        .                           (self.data.inline(), self.capacity, Self::inline_capacity())
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns a tuple with (data ptr, len ptr, capacity)
        .               #[inline]
        .               fn triple_mut(&mut self) -> (*mut A::Item, &mut usize, usize) {
        .                   unsafe {
1,008,671 ( 0.46%)              if self.spilled() {
      284 ( 0.00%)                  let &mut (ptr, ref mut len_ptr) = self.data.heap_mut();
        .                           (ptr, len_ptr, self.capacity)
        .                       } else {
        .                           (
        .                               self.data.inline_mut(),
        .                               &mut self.capacity,
        .                               Self::inline_capacity(),
        .                           )
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns `true` if the data has spilled into a separate heap-allocated buffer.
        .               #[inline]
        .               pub fn spilled(&self) -> bool {
  692,838 ( 0.32%)          self.capacity > Self::inline_capacity()
        .               }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// Note 1: The element range is removed even if the iterator is only
        .               /// partially consumed or not consumed at all.
        .               ///
-- line 784 ----------------------------------------
-- line 821 ----------------------------------------
        .                           iter: range_slice.iter(),
        .                           vec: NonNull::from(self),
        .                       }
        .                   }
        .               }
        .           
        .               /// Append an item to the vector.
        .               #[inline]
    4,500 ( 0.00%)      pub fn push(&mut self, value: A::Item) {
        .                   unsafe {
        .                       let (mut ptr, mut len, cap) = self.triple_mut();
  146,319 ( 0.07%)              if *len == cap {
       19 ( 0.00%)                  self.reserve(1);
    1,300 ( 0.00%)                  let &mut (heap_ptr, ref mut heap_len) = self.data.heap_mut();
        .                           ptr = heap_ptr;
        .                           len = heap_len;
        .                       }
    2,278 ( 0.00%)              ptr::write(ptr.add(*len), value);
  187,081 ( 0.09%)              *len += 1;
        .                   }
    3,600 ( 0.00%)      }
        .           
        .               /// Remove an item from the end of the vector and return it, or None if empty.
        .               #[inline]
        .               pub fn pop(&mut self) -> Option<A::Item> {
        .                   unsafe {
        .                       let (ptr, len_ptr, _) = self.triple_mut();
   89,780 ( 0.04%)              if *len_ptr == 0 {
      170 ( 0.00%)                  return None;
        .                       }
   26,129 ( 0.01%)              let last_index = *len_ptr - 1;
   34,462 ( 0.02%)              *len_ptr = last_index;
    2,560 ( 0.00%)              Some(ptr::read(ptr.add(last_index)))
        .                   }
      380 ( 0.00%)      }
        .           
        .               /// Moves all the elements of `other` into `self`, leaving `other` empty.
        .               ///
        .               /// # Example
        .               ///
        .               /// ```
        .               /// # use smallvec::{SmallVec, smallvec};
        .               /// let mut v0: SmallVec<[u8; 16]> = smallvec![1, 2, 3];
-- line 863 ----------------------------------------
-- line 879 ----------------------------------------
        .               /// or if the capacity computation overflows `usize`.
        .               pub fn grow(&mut self, new_cap: usize) {
        .                   infallible(self.try_grow(new_cap))
        .               }
        .           
        .               /// Re-allocate to set the capacity to `max(new_cap, inline_size())`.
        .               ///
        .               /// Panics if `new_cap` is less than the vector's length
       56 ( 0.00%)      pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
        .                   unsafe {
        8 ( 0.00%)              let (ptr, &mut len, cap) = self.triple_mut();
        .                       let unspilled = !self.spilled();
    2,958 ( 0.00%)              assert!(new_cap >= len);
    2,958 ( 0.00%)              if new_cap <= self.inline_size() {
        .                           if unspilled {
        .                               return Ok(());
        .                           }
        .                           self.data = SmallVecData::from_inline(MaybeUninit::uninit());
        .                           ptr::copy_nonoverlapping(ptr, self.data.inline_mut(), len);
        .                           self.capacity = len;
        .                           deallocate(ptr, cap);
    2,958 ( 0.00%)              } else if new_cap != cap {
    2,699 ( 0.00%)                  let layout = layout_array::<A::Item>(new_cap)?;
        .                           debug_assert!(layout.size() > 0);
        .                           let new_alloc;
    1,479 ( 0.00%)                  if unspilled {
        .                               new_alloc = NonNull::new(alloc::alloc::alloc(layout))
        .                                   .ok_or(CollectionAllocErr::AllocErr { layout })?
        .                                   .cast()
        .                                   .as_ptr();
        .                               ptr::copy_nonoverlapping(ptr, new_alloc, len);
        .                           } else {
        .                               // This should never fail since the same succeeded
        .                               // when previously allocating `ptr`.
      841 ( 0.00%)                      let old_layout = layout_array::<A::Item>(cap)?;
        .           
        .                               let new_ptr = alloc::alloc::realloc(ptr as *mut u8, old_layout, layout.size());
        .                               new_alloc = NonNull::new(new_ptr)
        .                                   .ok_or(CollectionAllocErr::AllocErr { layout })?
        .                                   .cast()
        .                                   .as_ptr();
        .                           }
    2,958 ( 0.00%)                  self.data = SmallVecData::from_heap(new_alloc, len);
    4,285 ( 0.00%)                  self.capacity = new_cap;
        .                       }
        .                       Ok(())
        .                   }
       64 ( 0.00%)      }
        .           
        .               /// Reserve capacity for `additional` more elements to be inserted.
        .               ///
        .               /// May reserve more space to avoid frequent reallocations.
        .               ///
        .               /// Panics if the capacity computation overflows `usize`.
        .               #[inline]
   10,139 ( 0.00%)      pub fn reserve(&mut self, additional: usize) {
   40,273 ( 0.02%)          infallible(self.try_reserve(additional))
   11,568 ( 0.01%)      }
        .           
        .               /// Reserve capacity for `additional` more elements to be inserted.
        .               ///
        .               /// May reserve more space to avoid frequent reallocations.
  150,930 ( 0.07%)      pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
        .                   // prefer triple_mut() even if triple() would work
        .                   // so that the optimizer removes duplicated calls to it
        .                   // from callers like insert()
      333 ( 0.00%)          let (_, &mut len, cap) = self.triple_mut();
  116,036 ( 0.05%)          if cap - len >= additional {
        .                       return Ok(());
        .                   }
        .                   let new_cap = len
        .                       .checked_add(additional)
        .                       .and_then(usize::checked_next_power_of_two)
        .                       .ok_or(CollectionAllocErr::CapacityOverflow)?;
       16 ( 0.00%)          self.try_grow(new_cap)
  167,093 ( 0.08%)      }
        .           
        .               /// Reserve the minimum capacity for `additional` more elements to be inserted.
        .               ///
        .               /// Panics if the new capacity overflows `usize`.
        .               pub fn reserve_exact(&mut self, additional: usize) {
        .                   infallible(self.try_reserve_exact(additional))
        .               }
        .           
        .               /// Reserve the minimum capacity for `additional` more elements to be inserted.
        .               pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
        .                   let (_, &mut len, cap) = self.triple_mut();
    2,812 ( 0.00%)          if cap - len >= additional {
        .                       return Ok(());
        .                   }
        .                   let new_cap = len
        .                       .checked_add(additional)
        .                       .ok_or(CollectionAllocErr::CapacityOverflow)?;
        .                   self.try_grow(new_cap)
        .               }
        .           
-- line 974 ----------------------------------------
-- line 999 ----------------------------------------
        .               /// If `len` is greater than or equal to the vector's current length, this has no
        .               /// effect.
        .               ///
        .               /// This does not re-allocate.  If you want the vector's capacity to shrink, call
        .               /// `shrink_to_fit` after truncating.
        .               pub fn truncate(&mut self, len: usize) {
        .                   unsafe {
        .                       let (ptr, len_ptr, _) = self.triple_mut();
    2,720 ( 0.00%)              while len < *len_ptr {
        .                           let last_index = *len_ptr - 1;
        .                           *len_ptr = last_index;
        .                           ptr::drop_in_place(ptr.add(last_index));
        .                       }
        .                   }
        .               }
        .           
        .               /// Extracts a slice containing the entire vector.
-- line 1015 ----------------------------------------
-- line 1044 ----------------------------------------
        .               pub fn clear(&mut self) {
        .                   self.truncate(0);
        .               }
        .           
        .               /// Remove and return the element at position `index`, shifting all elements after it to the
        .               /// left.
        .               ///
        .               /// Panics if `index` is out of bounds.
        8 ( 0.00%)      pub fn remove(&mut self, index: usize) -> A::Item {
        .                   unsafe {
        .                       let (mut ptr, len_ptr, _) = self.triple_mut();
      203 ( 0.00%)              let len = *len_ptr;
      666 ( 0.00%)              assert!(index < len);
    1,189 ( 0.00%)              *len_ptr = len - 1;
        .                       ptr = ptr.add(index);
        .                       let item = ptr::read(ptr);
      444 ( 0.00%)              ptr::copy(ptr.add(1), ptr, len - index - 1);
        .                       item
        .                   }
       10 ( 0.00%)      }
        .           
        .               /// Insert an element at position `index`, shifting all elements after it to the right.
        .               ///
        .               /// Panics if `index` is out of bounds.
    2,803 ( 0.00%)      pub fn insert(&mut self, index: usize, element: A::Item) {
        .                   self.reserve(1);
        .           
        .                   unsafe {
        .                       let (mut ptr, len_ptr, _) = self.triple_mut();
      687 ( 0.00%)              let len = *len_ptr;
    1,374 ( 0.00%)              assert!(index <= len);
    2,748 ( 0.00%)              *len_ptr = len + 1;
        .                       ptr = ptr.add(index);
    1,374 ( 0.00%)              ptr::copy(ptr, ptr.add(1), len - index);
        .                       ptr::write(ptr, element);
        .                   }
    1,786 ( 0.00%)      }
        .           
        .               /// Insert multiple elements at position `index`, shifting all following elements toward the
        .               /// back.
        .               pub fn insert_many<I: IntoIterator<Item = A::Item>>(&mut self, index: usize, iterable: I) {
        .                   let mut iter = iterable.into_iter();
        .                   if index == self.len() {
        .                       return self.extend(iter);
        .                   }
-- line 1088 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place and preserves the order of the retained
        .               /// elements.
    6,570 ( 0.00%)      pub fn retain<F: FnMut(&mut A::Item) -> bool>(&mut self, mut f: F) {
        .                   let mut del = 0;
        .                   let len = self.len();
        .                   for i in 0..len {
    1,352 ( 0.00%)              if !f(&mut self[i]) {
        .                           del += 1;
      428 ( 0.00%)              } else if del > 0 {
        .                           self.swap(i - del, i);
        .                       }
        .                   }
    1,460 ( 0.00%)          self.truncate(len - del);
    5,840 ( 0.00%)      }
        .           
        .               /// Removes consecutive duplicate elements.
        .               pub fn dedup(&mut self)
        .               where
        .                   A::Item: PartialEq<A::Item>,
        .               {
        .                   self.dedup_by(|a, b| a == b);
        .               }
-- line 1228 ----------------------------------------
-- line 1418 ----------------------------------------
        .                           capacity: len,
        .                           data: SmallVecData::from_inline(unsafe {
        .                               let mut data: MaybeUninit<A> = MaybeUninit::uninit();
        .                               ptr::copy_nonoverlapping(
        .                                   slice.as_ptr(),
        .                                   data.as_mut_ptr() as *mut A::Item,
        .                                   len,
        .                               );
      492 ( 0.00%)                      data
        .                           }),
        .                       }
        .                   } else {
        .                       let mut b = slice.to_vec();
        .                       let (ptr, cap) = (b.as_mut_ptr(), b.capacity());
        .                       mem::forget(b);
        .                       SmallVec {
        .                           capacity: cap,
-- line 1434 ----------------------------------------
-- line 1436 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Copy elements from a slice into the vector at position `index`, shifting any following
        .               /// elements toward the back.
        .               ///
        .               /// For slices of `Copy` types, this is more efficient than `insert`.
    9,373 ( 0.00%)      pub fn insert_from_slice(&mut self, index: usize, slice: &[A::Item]) {
        .                   self.reserve(slice.len());
        .           
        .                   let len = self.len();
    2,904 ( 0.00%)          assert!(index <= len);
        .           
        .                   unsafe {
        .                       let slice_ptr = slice.as_ptr();
        .                       let ptr = self.as_mut_ptr().add(index);
        .                       ptr::copy(ptr, ptr.add(slice.len()), len - index);
        .                       ptr::copy_nonoverlapping(slice_ptr, ptr, slice.len());
    1,936 ( 0.00%)              self.set_len(len + slice.len());
        .                   }
    7,744 ( 0.00%)      }
        .           
        .               /// Copy elements from a slice and append them to the vector.
        .               ///
        .               /// For slices of `Copy` types, this is more efficient than `extend`.
        .               #[inline]
        .               pub fn extend_from_slice(&mut self, slice: &[A::Item]) {
        .                   let len = self.len();
    2,475 ( 0.00%)          self.insert_from_slice(len, slice);
        .               }
        .           }
        .           
        .           impl<A: Array> SmallVec<A>
        .           where
        .               A::Item: Clone,
        .           {
        .               /// Resizes the vector so that its length is equal to `len`.
-- line 1473 ----------------------------------------
-- line 1522 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<A: Array> ops::DerefMut for SmallVec<A> {
        .               #[inline]
        .               fn deref_mut(&mut self) -> &mut [A::Item] {
        .                   unsafe {
    8,900 ( 0.00%)              let (ptr, &mut len, _) = self.triple_mut();
        .                       slice::from_raw_parts_mut(ptr, len)
        .                   }
        .               }
        .           }
        .           
        .           impl<A: Array> AsRef<[A::Item]> for SmallVec<A> {
        .               #[inline]
        .               fn as_ref(&self) -> &[A::Item] {
-- line 1538 ----------------------------------------
-- line 1716 ----------------------------------------
        .                   SmallVec::extend_from_slice(self, other)
        .               }
        .           }
        .           
        .           impl<A: Array> FromIterator<A::Item> for SmallVec<A> {
        .               #[inline]
        .               fn from_iter<I: IntoIterator<Item = A::Item>>(iterable: I) -> SmallVec<A> {
        .                   let mut v = SmallVec::new();
   41,148 ( 0.02%)          v.extend(iterable);
        .                   v
        .               }
        .           }
        .           
        .           impl<A: Array> Extend<A::Item> for SmallVec<A> {
  187,523 ( 0.09%)      fn extend<I: IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
   23,502 ( 0.01%)          let mut iter = iterable.into_iter();
        .                   let (lower_size_bound, _) = iter.size_hint();
    2,065 ( 0.00%)          self.reserve(lower_size_bound);
        .           
        .                   unsafe {
        .                       let (ptr, len_ptr, cap) = self.triple_mut();
        .                       let mut len = SetLenOnDrop::new(len_ptr);
   75,698 ( 0.03%)              while len.get() < cap {
   33,189 ( 0.02%)                  if let Some(out) = iter.next() {
       12 ( 0.00%)                      ptr::write(ptr.add(len.get()), out);
        .                               len.increment_len(1);
        .                           } else {
        .                               return;
        .                           }
        .                       }
        .                   }
        .           
   12,510 ( 0.01%)          for elem in iter {
      184 ( 0.00%)              self.push(elem);
        .                   }
  158,933 ( 0.07%)      }
        .           }
        .           
        .           impl<A: Array> fmt::Debug for SmallVec<A>
        .           where
        .               A::Item: fmt::Debug,
        .           {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   f.debug_list().entries(self.iter()).finish()
-- line 1759 ----------------------------------------
-- line 1764 ----------------------------------------
        .               #[inline]
        .               fn default() -> SmallVec<A> {
        .                   SmallVec::new()
        .               }
        .           }
        .           
        .           #[cfg(feature = "may_dangle")]
        .           unsafe impl<#[may_dangle] A: Array> Drop for SmallVec<A> {
  327,678 ( 0.15%)      fn drop(&mut self) {
        .                   unsafe {
  138,812 ( 0.06%)              if self.spilled() {
        .                           let (ptr, len) = self.data.heap();
        .                           Vec::from_raw_parts(ptr, len, self.capacity);
        .                       } else {
        .                           ptr::drop_in_place(&mut self[..]);
        .                       }
        .                   }
  331,118 ( 0.15%)      }
        .           }
        .           
        .           #[cfg(not(feature = "may_dangle"))]
        .           impl<A: Array> Drop for SmallVec<A> {
        .               fn drop(&mut self) {
        .                   unsafe {
        .                       if self.spilled() {
        .                           let (ptr, len) = self.data.heap();
-- line 1789 ----------------------------------------
-- line 1888 ----------------------------------------
        .               A::Item: Clone,
        .           {
        .               fn clone(&self) -> IntoIter<A> {
        .                   SmallVec::from(self.as_slice()).into_iter()
        .               }
        .           }
        .           
        .           impl<A: Array> Drop for IntoIter<A> {
       27 ( 0.00%)      fn drop(&mut self) {
    2,403 ( 0.00%)          for _ in self {}
       24 ( 0.00%)      }
        .           }
        .           
        .           impl<A: Array> Iterator for IntoIter<A> {
        .               type Item = A::Item;
        .           
        .               #[inline]
        .               fn next(&mut self) -> Option<A::Item> {
   25,875 ( 0.01%)          if self.current == self.end {
        .                       None
        .                   } else {
        .                       unsafe {
        .                           let current = self.current;
   15,040 ( 0.01%)                  self.current += 1;
      231 ( 0.00%)                  Some(ptr::read(self.data.as_ptr().add(current)))
        .                       }
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
    1,084 ( 0.00%)          let size = self.end - self.current;
        .                   (size, Some(size))
        .               }
        .           }
        .           
        .           impl<A: Array> DoubleEndedIterator for IntoIter<A> {
        .               #[inline]
        .               fn next_back(&mut self) -> Option<A::Item> {
        .                   if self.current == self.end {
-- line 1927 ----------------------------------------
-- line 1955 ----------------------------------------
        .           impl<A: Array> IntoIterator for SmallVec<A> {
        .               type IntoIter = IntoIter<A>;
        .               type Item = A::Item;
        .               fn into_iter(mut self) -> Self::IntoIter {
        .                   unsafe {
        .                       // Set SmallVec len to zero as `IntoIter` drop handles dropping of the elements
        .                       let len = self.len();
        .                       self.set_len(0);
    1,598 ( 0.00%)              IntoIter {
   15,528 ( 0.01%)                  data: self,
        .                           current: 0,
        .                           end: len,
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, A: Array> IntoIterator for &'a SmallVec<A> {
-- line 1972 ----------------------------------------
-- line 2000 ----------------------------------------
        .               len: &'a mut usize,
        .               local_len: usize,
        .           }
        .           
        .           impl<'a> SetLenOnDrop<'a> {
        .               #[inline]
        .               fn new(len: &'a mut usize) -> Self {
        .                   SetLenOnDrop {
   20,583 ( 0.01%)              local_len: *len,
        .                       len,
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn get(&self) -> usize {
        .                   self.local_len
        .               }
        .           
        .               #[inline]
        .               fn increment_len(&mut self, increment: usize) {
    9,747 ( 0.00%)          self.local_len += increment;
        .               }
        .           }
        .           
        .           impl<'a> Drop for SetLenOnDrop<'a> {
        .               #[inline]
        .               fn drop(&mut self) {
   25,410 ( 0.01%)          *self.len = self.local_len;
        .               }
        .           }
        .           
        .           #[cfg(feature = "const_new")]
        .           impl<T, const N: usize> SmallVec<[T; N]> {
        .               /// Construct an empty vector.
        .               ///
        .               /// This is a `const` version of [`SmallVec::new`] that is enabled by the feature `const_new`, with the limitation that it only works for arrays.
-- line 2035 ----------------------------------------

  373,285 ( 0.17%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir               

-- line 23 ----------------------------------------
      .           use std::cmp::Ordering;
      .           use std::marker::PhantomData;
      .           use std::ops::Range;
      .           use ty::util::IntTypeExt;
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
      .           #[derive(HashStable, TypeFoldable, Lift)]
      .           pub struct TypeAndMut<'tcx> {
     27 ( 0.00%)      pub ty: Ty<'tcx>,
    135 ( 0.00%)      pub mutbl: hir::Mutability,
      .           }
      .           
      .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
      .           #[derive(HashStable)]
      .           /// A "free" region `fr` can be interpreted as "some region
      .           /// at least as big as the scope `fr.scope`".
      .           pub struct FreeRegion {
     22 ( 0.00%)      pub scope: DefId,
     45 ( 0.00%)      pub bound_region: BoundRegionKind,
      .           }
      .           
  8,318 ( 0.00%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
      .           #[derive(HashStable)]
      .           pub enum BoundRegionKind {
      .               /// An anonymous region parameter for a given fn (&T)
  1,182 ( 0.00%)      BrAnon(u32),
      .           
      .               /// Named region parameters for functions (a in &'a T)
      .               ///
      .               /// The `DefId` is needed to distinguish free regions in
      .               /// the event of shadowing.
     12 ( 0.00%)      BrNamed(DefId, Symbol),
      .           
      .               /// Anonymous region for the implicit env pointer parameter
      .               /// to a closure
      .               BrEnv,
      .           }
      .           
      .           #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
      .           #[derive(HashStable)]
      .           pub struct BoundRegion {
  1,660 ( 0.00%)      pub var: BoundVar,
  1,368 ( 0.00%)      pub kind: BoundRegionKind,
      .           }
      .           
      .           impl BoundRegionKind {
      .               pub fn is_named(&self) -> bool {
      .                   match *self {
      .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
      .                       _ => false,
      .                   }
      .               }
      .           }
      .           
      .           /// Defines the kinds of types.
      .           ///
      .           /// N.B., if you change this, you'll probably want to change the corresponding
      .           /// AST structure in `rustc_ast/src/ast.rs` as well.
432,774 ( 0.20%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
      .           #[derive(HashStable)]
      .           #[rustc_diagnostic_item = "TyKind"]
      .           pub enum TyKind<'tcx> {
      .               /// The primitive boolean type. Written as `bool`.
      .               Bool,
      .           
      .               /// The primitive character type; holds a Unicode scalar value
      .               /// (a non-surrogate code point). Written as `char`.
-- line 89 ----------------------------------------
-- line 99 ----------------------------------------
      .               Float(ty::FloatTy),
      .           
      .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
      .               ///
      .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
      .               /// That is, even after substitution it is possible that there are type
      .               /// variables. This happens when the `Adt` corresponds to an ADT
      .               /// definition and not a concrete use of it.
 38,596 ( 0.02%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
      .           
      .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
      .               Foreign(DefId),
      .           
      .               /// The pointee of a string slice. Written as `str`.
      .               Str,
      .           
      .               /// An array with the given length. Written as `[T; n]`.
    770 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
      .           
      .               /// The pointee of an array slice. Written as `[T]`.
      .               Slice(Ty<'tcx>),
      .           
      .               /// A raw pointer. Written as `*mut T` or `*const T`
      .               RawPtr(TypeAndMut<'tcx>),
      .           
      .               /// A reference; a pointer with an associated lifetime. Written as
      .               /// `&'a mut T` or `&'a T`.
 46,653 ( 0.02%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
      .           
      .               /// The anonymous type of a function declaration/definition. Each
      .               /// function has a unique type, which is output (for a function
      .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
      .               ///
      .               /// For example the type of `bar` here:
      .               ///
      .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
      .               ///
      .               /// ```rust
      .               /// fn foo() -> i32 { 1 }
      .               /// let bar: fn() -> i32 = foo;
      .               /// ```
      .               FnPtr(PolyFnSig<'tcx>),
      .           
      .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
      2 ( 0.00%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
      .           
      .               /// The anonymous type of a closure. Used to represent the type of
      .               /// `|a| a`.
      .               Closure(DefId, SubstsRef<'tcx>),
      .           
      .               /// The anonymous type of a generator. Used to represent the type of
      .               /// `|a| yield a`.
      .               Generator(DefId, SubstsRef<'tcx>, hir::Movability),
-- line 159 ----------------------------------------
-- line 180 ----------------------------------------
      .               /// The substitutions are for the generics of the function in question.
      .               /// After typeck, the concrete type can be found in the `types` map.
      .               Opaque(DefId, SubstsRef<'tcx>),
      .           
      .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
      .               Param(ParamTy),
      .           
      .               /// Bound type variable, used only when preparing a trait query.
     75 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
      .           
      .               /// A placeholder type - universally quantified higher-ranked type.
      .               Placeholder(ty::PlaceholderType),
      .           
      .               /// A type variable used during type checking.
      .               Infer(InferTy),
      .           
      .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 330 ----------------------------------------
      .               pub closure_kind_ty: T,
      .               pub closure_sig_as_fn_ptr_ty: T,
      .               pub tupled_upvars_ty: T,
      .           }
      .           
      .           impl<'tcx> ClosureSubsts<'tcx> {
      .               /// Construct `ClosureSubsts` from `ClosureSubstsParts`, containing `Substs`
      .               /// for the closure parent, alongside additional closure-specific components.
      1 ( 0.00%)      pub fn new(
      .                   tcx: TyCtxt<'tcx>,
      .                   parts: ClosureSubstsParts<'tcx, Ty<'tcx>>,
      .               ) -> ClosureSubsts<'tcx> {
      .                   ClosureSubsts {
      .                       substs: tcx.mk_substs(
      2 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
      4 ( 0.00%)                      [parts.closure_kind_ty, parts.closure_sig_as_fn_ptr_ty, parts.tupled_upvars_ty]
      .                                   .iter()
      .                                   .map(|&ty| ty.into()),
      .                           ),
      .                       ),
      .                   }
      2 ( 0.00%)      }
      .           
      .               /// Divides the closure substs into their respective components.
      .               /// The ordering assumed here must match that used by `ClosureSubsts::new` above.
     15 ( 0.00%)      fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {
      .                   match self.substs[..] {
    154 ( 0.00%)              [
     29 ( 0.00%)                  ref parent_substs @ ..,
     42 ( 0.00%)                  closure_kind_ty,
     28 ( 0.00%)                  closure_sig_as_fn_ptr_ty,
     22 ( 0.00%)                  tupled_upvars_ty,
     60 ( 0.00%)              ] => ClosureSubstsParts {
      .                           parent_substs,
      .                           closure_kind_ty,
      .                           closure_sig_as_fn_ptr_ty,
      .                           tupled_upvars_ty,
      .                       },
      .                       _ => bug!("closure substs missing synthetics"),
      .                   }
     45 ( 0.00%)      }
      .           
      .               /// Returns `true` only if enough of the synthetic types are known to
      .               /// allow using all of the methods on `ClosureSubsts` without panicking.
      .               ///
      .               /// Used primarily by `ty::print::pretty` to be able to handle closure
      .               /// types that haven't had their synthetic types substituted in.
      .               pub fn is_valid(self) -> bool {
      .                   self.substs.len() >= 3
-- line 378 ----------------------------------------
-- line 384 ----------------------------------------
      .                   self.split().parent_substs
      .               }
      .           
      .               /// Returns an iterator over the list of types of captured paths by the closure.
      .               /// In case there was a type error in figuring out the types of the captured path, an
      .               /// empty iterator is returned.
      .               #[inline]
      .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
      3 ( 0.00%)          match self.tupled_upvars_ty().kind() {
      .                       TyKind::Error(_) => None,
      2 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
      .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
      .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
      .                   }
      .                   .into_iter()
      .                   .flatten()
      .               }
      .           
      .               /// Returns the tuple type representing the upvars for this closure.
      .               #[inline]
      .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
     69 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
      .               }
      .           
      .               /// Returns the closure kind for this closure; may return a type
      .               /// variable during inference. To get the closure kind during
      .               /// inference, use `infcx.closure_kind(substs)`.
     18 ( 0.00%)      pub fn kind_ty(self) -> Ty<'tcx> {
      .                   self.split().closure_kind_ty.expect_ty()
     36 ( 0.00%)      }
      .           
      .               /// Returns the `fn` pointer type representing the closure signature for this
      .               /// closure.
      .               // FIXME(eddyb) this should be unnecessary, as the shallowly resolved
      .               // type is known at the time of the creation of `ClosureSubsts`,
      .               // see `rustc_typeck::check::closure`.
      .               pub fn sig_as_fn_ptr_ty(self) -> Ty<'tcx> {
      .                   self.split().closure_sig_as_fn_ptr_ty.expect_ty()
-- line 421 ----------------------------------------
-- line 426 ----------------------------------------
      .               /// there are no type variables.
      .               ///
      .               /// If you have an inference context, use `infcx.closure_kind()`.
      .               pub fn kind(self) -> ty::ClosureKind {
      .                   self.kind_ty().to_opt_closure_kind().unwrap()
      .               }
      .           
      .               /// Extracts the signature from the closure.
     21 ( 0.00%)      pub fn sig(self) -> ty::PolyFnSig<'tcx> {
      .                   let ty = self.sig_as_fn_ptr_ty();
     42 ( 0.00%)          match ty.kind() {
     84 ( 0.00%)              ty::FnPtr(sig) => *sig,
      .                       _ => bug!("closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}", ty.kind()),
      .                   }
     63 ( 0.00%)      }
      .           }
      .           
      .           /// Similar to `ClosureSubsts`; see the above documentation for more.
      .           #[derive(Copy, Clone, Debug, TypeFoldable)]
      .           pub struct GeneratorSubsts<'tcx> {
      .               pub substs: SubstsRef<'tcx>,
      .           }
      .           
-- line 448 ----------------------------------------
-- line 676 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> UpvarSubsts<'tcx> {
      .               /// Returns an iterator over the list of types of captured paths by the closure/generator.
      .               /// In case there was a type error in figuring out the types of the captured path, an
      .               /// empty iterator is returned.
      .               #[inline]
      .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
      2 ( 0.00%)          let tupled_tys = match self {
      3 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
      .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
      .                   };
      .           
      5 ( 0.00%)          match tupled_tys.kind() {
      .                       TyKind::Error(_) => None,
      4 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
      .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
      .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
      .                   }
      .                   .into_iter()
      .                   .flatten()
      .               }
      .           
      .               #[inline]
      .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
      4 ( 0.00%)          match self {
      4 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
      .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
      .                   }
      .               }
      .           }
      .           
      .           /// An inline const is modeled like
      .           ///
      .           ///     const InlineConst<'l0...'li, T0...Tj, R>: R;
-- line 710 ----------------------------------------
-- line 760 ----------------------------------------
      .               }
      .           
      .               /// Returns the type of this inline const.
      .               pub fn ty(self) -> Ty<'tcx> {
      .                   self.split().ty.expect_ty()
      .               }
      .           }
      .           
     20 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
      .           #[derive(HashStable, TypeFoldable)]
      .           pub enum ExistentialPredicate<'tcx> {
      .               /// E.g., `Iterator`.
      .               Trait(ExistentialTraitRef<'tcx>),
      .               /// E.g., `Iterator::Item = T`.
      .               Projection(ExistentialProjection<'tcx>),
      .               /// E.g., `Send`.
      .               AutoTrait(DefId),
      .           }
      .           
      .           impl<'tcx> ExistentialPredicate<'tcx> {
      .               /// Compares via an ordering that will not change if modules are reordered or other changes are
      .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
      5 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
      .                   use self::ExistentialPredicate::*;
      4 ( 0.00%)          match (*self, *other) {
      .                       (Trait(_), Trait(_)) => Ordering::Equal,
      .                       (Projection(ref a), Projection(ref b)) => {
      .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
      .                       }
      .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
      .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
      .                       }
      .                       (Trait(_), _) => Ordering::Less,
      .                       (Projection(_), Trait(_)) => Ordering::Greater,
      .                       (Projection(_), _) => Ordering::Less,
      .                       (AutoTrait(_), _) => Ordering::Greater,
      .                   }
      6 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
      .               pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
      .                   use crate::ty::ToPredicate;
      .                   match self.skip_binder() {
      .                       ExistentialPredicate::Trait(tr) => {
      .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
-- line 805 ----------------------------------------
-- line 886 ----------------------------------------
      .           ///     T: Foo<U>
      .           ///
      .           /// This would be represented by a trait-reference where the `DefId` is the
      .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
      .           /// and `U` as parameter 1.
      .           ///
      .           /// Trait references also appear in object types like `Foo<U>`, but in
      .           /// that case the `Self` parameter is absent from the substitutions.
  1,800 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
 21,708 ( 0.01%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct TraitRef<'tcx> {
     40 ( 0.00%)      pub def_id: DefId,
 16,753 ( 0.01%)      pub substs: SubstsRef<'tcx>,
      .           }
      .           
      .           impl<'tcx> TraitRef<'tcx> {
     38 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
      .                   TraitRef { def_id, substs }
    152 ( 0.00%)      }
      .           
      .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
      .               /// are the parameters defined on trait.
    117 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
     52 ( 0.00%)          ty::Binder::dummy(TraitRef {
      .                       def_id,
     78 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
      .                   })
    104 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn self_ty(&self) -> Ty<'tcx> {
      .                   self.substs.type_at(0)
      .               }
      .           
     40 ( 0.00%)      pub fn from_method(
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_id: DefId,
      .                   substs: SubstsRef<'tcx>,
      .               ) -> ty::TraitRef<'tcx> {
      .                   let defs = tcx.generics_of(trait_id);
      .           
      5 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
     55 ( 0.00%)      }
      .           }
      .           
      .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
      .           
      .           impl<'tcx> PolyTraitRef<'tcx> {
      .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
      .                   self.map_bound_ref(|tr| tr.self_ty())
      .               }
      .           
      .               pub fn def_id(&self) -> DefId {
      9 ( 0.00%)          self.skip_binder().def_id
      3 ( 0.00%)      }
      .           
     70 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
    140 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
      .                       trait_ref,
      .                       constness: ty::BoundConstness::NotConst,
      .                       polarity: ty::ImplPolarity::Positive,
      .                   })
     70 ( 0.00%)      }
      .           }
      .           
      .           /// An existential reference to a trait, where `Self` is erased.
      .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
      .           ///
      .           ///     exists T. T: Trait<'a, 'b, X, Y>
      .           ///
      .           /// The substitutions don't include the erased `Self`, only trait
      .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
      4 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
      .           #[derive(HashStable, TypeFoldable)]
      .           pub struct ExistentialTraitRef<'tcx> {
      .               pub def_id: DefId,
      .               pub substs: SubstsRef<'tcx>,
      .           }
      .           
      .           impl<'tcx> ExistentialTraitRef<'tcx> {
      .               pub fn erase_self_ty(
-- line 966 ----------------------------------------
-- line 999 ----------------------------------------
      .               /// we convert the principal trait-ref into a normal trait-ref,
      .               /// you must give *some* self type. A common choice is `mk_err()`
      .               /// or some placeholder type.
      .               pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
      .                   self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
      .               }
      .           }
      .           
  1,881 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
      .           #[derive(HashStable)]
      .           pub enum BoundVariableKind {
      .               Ty(BoundTyKind),
      .               Region(BoundRegionKind),
      .               Const,
      .           }
      .           
      .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
-- line 1015 ----------------------------------------
-- line 1016 ----------------------------------------
      .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
      .           /// (which would be represented by the type `PolyTraitRef ==
      .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
      .           /// erase, or otherwise "discharge" these bound vars, we change the
      .           /// type from `Binder<'tcx, T>` to just `T` (see
      .           /// e.g., `liberate_late_bound_regions`).
      .           ///
      .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
     16 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
 18,633 ( 0.01%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
      .           
      .           impl<'tcx, T> Binder<'tcx, T>
      .           where
      .               T: TypeFoldable<'tcx>,
      .           {
      .               /// Wraps `value` in a binder, asserting that `value` does not
      .               /// contain any bound vars that would be bound by the
      .               /// binder. This is commonly used to 'inject' a value T into a
      .               /// different binding level.
  1,260 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
  5,585 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
 11,627 ( 0.01%)          Binder(value, ty::List::empty())
  1,260 ( 0.00%)      }
      .           
      .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
      .                   if cfg!(debug_assertions) {
      .                       let mut validator = ValidateBoundVars::new(vars);
      .                       value.visit_with(&mut validator);
      .                   }
  1,070 ( 0.00%)          Binder(value, vars)
      .               }
      .           }
      .           
      .           impl<'tcx, T> Binder<'tcx, T> {
      .               /// Skips the binder and returns the "bound" value. This is a
      .               /// risky thing to do because it's easy to get confused about
      .               /// De Bruijn indices and the like. It is usually better to
      .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
      .               /// accounting.
      .               ///
      .               /// Some examples where `skip_binder` is reasonable:
      .               ///
      .               /// - extracting the `DefId` from a PolyTraitRef;
      .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
      .               ///   a type parameter `X`, since the type `X` does not reference any regions
      .               pub fn skip_binder(self) -> T {
 34,845 ( 0.02%)          self.0
      .               }
      .           
      .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
     11 ( 0.00%)          self.1
      .               }
      .           
      .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
    138 ( 0.00%)          Binder(&self.0, self.1)
      .               }
      .           
      .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
      .               where
      .                   F: FnOnce(&T) -> U,
      .               {
      .                   let value = f(&self.0);
      .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
      .           
      .               pub fn map_bound_ref<F, U: TypeFoldable<'tcx>>(&self, f: F) -> Binder<'tcx, U>
      .               where
      .                   F: FnOnce(&T) -> U,
      .               {
      .                   self.as_ref().map_bound(f)
      .               }
      .           
      8 ( 0.00%)      pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
      .               where
      .                   F: FnOnce(T) -> U,
      .               {
  2,307 ( 0.00%)          let value = f(self.0);
      .                   if cfg!(debug_assertions) {
      .                       let mut validator = ValidateBoundVars::new(self.1);
      .                       value.visit_with(&mut validator);
      .                   }
  9,814 ( 0.00%)          Binder(value, self.1)
      8 ( 0.00%)      }
      .           
      .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
      .               where
      .                   F: FnOnce(T) -> Result<U, E>,
      .               {
      .                   let value = f(self.0)?;
      .                   if cfg!(debug_assertions) {
      .                       let mut validator = ValidateBoundVars::new(self.1);
      .                       value.visit_with(&mut validator);
      .                   }
    138 ( 0.00%)          Ok(Binder(value, self.1))
      .               }
      .           
      .               /// Wraps a `value` in a binder, using the same bound variables as the
      .               /// current `Binder`. This should not be used if the new value *changes*
      .               /// the bound variables. Note: the (old or new) value itself does not
      .               /// necessarily need to *name* all the bound variables.
      .               ///
      .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
      .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
      .               where
      .                   U: TypeFoldable<'tcx>,
      .               {
      .                   if cfg!(debug_assertions) {
      .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
      .                       value.visit_with(&mut validator);
      .                   }
    402 ( 0.00%)          Binder(value, self.1)
      .               }
      .           
      .               /// Unwraps and returns the value within, but only if it contains
      .               /// no bound vars at all. (In other words, if this binder --
      .               /// and indeed any enclosing binder -- doesn't bind anything at
      .               /// all.) Otherwise, returns `None`.
      .               ///
      .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
      .               /// binder, but permits late-bound vars bound by enclosing
      .               /// binders, but that would require adjusting the debruijn
      .               /// indices, and given the shallow binding structure we often use,
      .               /// would not be that useful.)
      .               pub fn no_bound_vars(self) -> Option<T>
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
  4,977 ( 0.00%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
      .               }
      .           
      .               /// Splits the contents into two things that share the same binder
      .               /// level as the original, returning two distinct binders.
      .               ///
      .               /// `f` should consider bound regions at depth 1 to be free, and
      .               /// anything it produces with bound regions at depth 1 will be
      .               /// bound in the resulting return values.
-- line 1159 ----------------------------------------
-- line 1170 ----------------------------------------
      .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
      .                   let bound_vars = self.1;
      .                   self.0.map(|v| Binder(v, bound_vars))
      .               }
      .           }
      .           
      .           /// Represents the projection of an associated type. In explicit UFCS
      .           /// form this would be written `<T as Trait<..>>::N`.
     42 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
    770 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct ProjectionTy<'tcx> {
      .               /// The parameters of the associated item.
    520 ( 0.00%)      pub substs: SubstsRef<'tcx>,
      .           
      .               /// The `DefId` of the `TraitItem` for the associated type `N`.
      .               ///
      .               /// Note that this is not the `DefId` of the `TraitRef` containing this
      .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
    415 ( 0.00%)      pub item_def_id: DefId,
      .           }
      .           
      .           impl<'tcx> ProjectionTy<'tcx> {
    364 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
    104 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
    416 ( 0.00%)      }
      .           
      .               /// Extracts the underlying trait reference and own substs from this projection.
      .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
      .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
     77 ( 0.00%)      pub fn trait_ref_and_own_substs(
      .                   &self,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
     33 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
      .                   let trait_generics = tcx.generics_of(def_id);
     55 ( 0.00%)          (
      .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
      .                       &self.substs[trait_generics.count()..],
      .                   )
     99 ( 0.00%)      }
      .           
      .               /// Extracts the underlying trait reference from this projection.
      .               /// For example, if this is a projection of `<T as Iterator>::Item`,
      .               /// then this function would return a `T: Iterator` trait reference.
      .               ///
      .               /// WARNING: This will drop the substs for generic associated types
      .               /// consider calling [Self::trait_ref_and_own_substs] to get those
      .               /// as well.
    459 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
     51 ( 0.00%)          let def_id = self.trait_def_id(tcx);
     51 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
    561 ( 0.00%)      }
      .           
    105 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
    315 ( 0.00%)          self.substs.type_at(0)
    210 ( 0.00%)      }
      .           }
      .           
      .           #[derive(Copy, Clone, Debug, TypeFoldable)]
      .           pub struct GenSig<'tcx> {
      .               pub resume_ty: Ty<'tcx>,
      .               pub yield_ty: Ty<'tcx>,
      .               pub return_ty: Ty<'tcx>,
      .           }
-- line 1233 ----------------------------------------
-- line 1235 ----------------------------------------
      .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
      .           
      .           /// Signature of a function type, which we have arbitrarily
      .           /// decided to use to refer to the input/output types.
      .           ///
      .           /// - `inputs`: is the list of arguments and their modes.
      .           /// - `output`: is the return type.
      .           /// - `c_variadic`: indicates whether this is a C-variadic function.
  1,938 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
  1,091 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct FnSig<'tcx> {
    128 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
  1,165 ( 0.00%)      pub c_variadic: bool,
    237 ( 0.00%)      pub unsafety: hir::Unsafety,
  1,191 ( 0.00%)      pub abi: abi::Abi,
      .           }
      .           
      .           impl<'tcx> FnSig<'tcx> {
  1,180 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
  4,921 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
  2,360 ( 0.00%)      }
      .           
    686 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
  4,979 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
  1,372 ( 0.00%)      }
      .           
      .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
      .               // method.
      .               fn fake() -> FnSig<'tcx> {
      .                   FnSig {
      .                       inputs_and_output: List::empty(),
      .                       c_variadic: false,
      .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
      .               }
      .           }
      .           
      .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
      .           
      .           impl<'tcx> PolyFnSig<'tcx> {
      .               #[inline]
      .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
    225 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
      .               }
      .               #[inline]
      .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
  1,183 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
      .               }
      .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
      .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
      3 ( 0.00%)      }
      .               #[inline]
      .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
    585 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
      .               }
      .               pub fn c_variadic(&self) -> bool {
      6 ( 0.00%)          self.skip_binder().c_variadic
      3 ( 0.00%)      }
      .               pub fn unsafety(&self) -> hir::Unsafety {
    288 ( 0.00%)          self.skip_binder().unsafety
    144 ( 0.00%)      }
      .               pub fn abi(&self) -> abi::Abi {
    612 ( 0.00%)          self.skip_binder().abi
    153 ( 0.00%)      }
      .           }
      .           
      .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
      .           #[derive(HashStable)]
      .           pub struct ParamTy {
      .               pub index: u32,
-- line 1307 ----------------------------------------
-- line 1321 ----------------------------------------
      .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
      .                   tcx.mk_ty_param(self.index, self.name)
      .               }
      .           }
      .           
      .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
      .           #[derive(HashStable)]
      .           pub struct ParamConst {
     10 ( 0.00%)      pub index: u32,
     10 ( 0.00%)      pub name: Symbol,
      .           }
      .           
      .           impl ParamConst {
      .               pub fn new(index: u32, name: Symbol) -> ParamConst {
      .                   ParamConst { index, name }
      .               }
      .           
      .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
      .           /// the inference variable is supposed to satisfy the relation
      .           /// *for every value of the placeholder region*. To ensure that doesn't
      .           /// happen, you can use `leak_check`. This is more clearly explained
      .           /// by the [rustc dev guide].
      .           ///
      .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
      .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
      .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
148,187 ( 0.07%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
     14 ( 0.00%)  pub enum RegionKind {
      .               /// Region bound in a type or fn declaration which will be
      .               /// substituted 'early' -- that is, at the same time when type
      .               /// parameters are substituted.
      .               ReEarlyBound(EarlyBoundRegion),
      .           
      .               /// Region bound in a function scope, which will be substituted when the
      .               /// function is called.
  2,736 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
      .           
      .               /// When checking a function body, the types of all arguments and so forth
      .               /// that refer to bound region parameters are modified to refer to free
      .               /// region parameters.
      .               ReFree(FreeRegion),
      .           
      .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
      .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
      .               /// regions visible from `U`, but not less than regions not visible
      .               /// from `U`.
      .               ReEmpty(ty::UniverseIndex),
      .           
      .               /// Erased region, used by trait selection, in MIR and during codegen.
      .               ReErased,
      .           }
      .           
  2,322 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
      .           pub struct EarlyBoundRegion {
      .               pub def_id: DefId,
  1,188 ( 0.00%)      pub index: u32,
    155 ( 0.00%)      pub name: Symbol,
      .           }
      .           
      .           /// A **`const`** **v**ariable **ID**.
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
      .           pub struct ConstVid<'tcx> {
     37 ( 0.00%)      pub index: u32,
      .               pub phantom: PhantomData<&'tcx ()>,
      .           }
      .           
      .           rustc_index::newtype_index! {
      .               /// A **region** (lifetime) **v**ariable **ID**.
      .               pub struct RegionVid {
      .                   DEBUG_FORMAT = custom,
      .               }
-- line 1504 ----------------------------------------
-- line 1513 ----------------------------------------
      .           rustc_index::newtype_index! {
      .               pub struct BoundVar { .. }
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
      .           #[derive(HashStable)]
      .           pub struct BoundTy {
      .               pub var: BoundVar,
     75 ( 0.00%)      pub kind: BoundTyKind,
      .           }
      .           
  1,335 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
      .           #[derive(HashStable)]
      .           pub enum BoundTyKind {
      .               Anon,
      .               Param(Symbol),
      .           }
      .           
      .           impl From<BoundVar> for BoundTy {
      .               fn from(var: BoundVar) -> Self {
-- line 1532 ----------------------------------------
-- line 1616 ----------------------------------------
      .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
      .                       RegionKind::ReEmpty(_) => false,
      .                       RegionKind::ReErased => false,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_late_bound(&self) -> bool {
     52 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_placeholder(&self) -> bool {
      .                   matches!(*self, ty::RePlaceholder(..))
      .               }
      .           
      .               #[inline]
      .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
  2,779 ( 0.00%)          match *self {
      .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               pub fn type_flags(&self) -> TypeFlags {
      .                   let mut flags = TypeFlags::empty();
      .           
 12,570 ( 0.01%)          match *self {
      .                       ty::ReVar(..) => {
      .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
      .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
      .                           flags = flags | TypeFlags::HAS_RE_INFER;
      .                       }
      .                       ty::RePlaceholder(..) => {
      .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
      .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
      .                       ty::ReErased => {
      .                           flags = flags | TypeFlags::HAS_RE_ERASED;
      .                       }
      .                   }
      .           
      .                   debug!("type_flags({:?}) = {:?}", self, flags);
      .           
      .                   flags
    160 ( 0.00%)      }
      .           
      .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
      .               /// For example, consider the regions in this snippet of code:
      .               ///
      .               /// ```
      .               /// impl<'a> Foo {
      .               ///      ^^ -- early bound, declared on an impl
      .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
      .           
      .               #[inline(always)]
      .               pub fn flags(&self) -> TypeFlags {
      .                   self.flags
      .               }
      .           
      .               #[inline]
      .               pub fn is_unit(&self) -> bool {
    292 ( 0.00%)          match self.kind() {
    109 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
      .                       _ => false,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_never(&self) -> bool {
  1,993 ( 0.00%)          matches!(self.kind(), Never)
      .               }
      .           
      .               #[inline]
      .               pub fn is_primitive(&self) -> bool {
      .                   self.kind().is_primitive()
      .               }
      .           
      .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn is_ref(&self) -> bool {
      .                   matches!(self.kind(), Ref(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_ty_var(&self) -> bool {
  2,647 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
      .               }
      .           
      .               #[inline]
      .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
  1,434 ( 0.00%)          match self.kind() {
    149 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_ty_infer(&self) -> bool {
      3 ( 0.00%)          matches!(self.kind(), Infer(_))
      .               }
      .           
      .               #[inline]
      .               pub fn is_phantom_data(&self) -> bool {
      .                   if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
      .               }
      .           
      .               #[inline]
-- line 1770 ----------------------------------------
-- line 1791 ----------------------------------------
      .                   match self.kind() {
      .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
      .                       _ => false,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_array(&self) -> bool {
     36 ( 0.00%)          matches!(self.kind(), Array(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_simd(&self) -> bool {
      .                   match self.kind() {
      .                       Adt(def, _) => def.repr.simd(),
      .                       _ => false,
      .                   }
      .               }
      .           
     10 ( 0.00%)      pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
     20 ( 0.00%)          match self.kind() {
      .                       Array(ty, _) | Slice(ty) => ty,
      .                       Str => tcx.mk_mach_uint(ty::UintTy::U8),
      .                       _ => bug!("`sequence_element_type` called on non-sequence value: {}", self),
      .                   }
     10 ( 0.00%)      }
      .           
      .               pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {
      .                   match self.kind() {
      .                       Adt(def, substs) => {
      .                           assert!(def.repr.simd(), "`simd_size_and_type` called on non-SIMD type");
      .                           let variant = def.non_enum_variant();
      .                           let f0_ty = variant.fields[0].ty(tcx, substs);
      .           
-- line 1824 ----------------------------------------
-- line 1861 ----------------------------------------
      .                   match self.kind() {
      .                       Ref(_, _, mutability) => Some(*mutability),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_unsafe_ptr(&self) -> bool {
    144 ( 0.00%)          matches!(self.kind(), RawPtr(_))
      .               }
      .           
      .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
      .               #[inline]
      .               pub fn is_any_ptr(&self) -> bool {
      .                   self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
      .               }
      .           
      .               #[inline]
      .               pub fn is_box(&self) -> bool {
  2,016 ( 0.00%)          match self.kind() {
    513 ( 0.00%)              Adt(def, _) => def.is_box(),
      .                       _ => false,
      .                   }
      .               }
      .           
      .               /// Panics if called on any type other than `Box<T>`.
      2 ( 0.00%)      pub fn boxed_ty(&self) -> Ty<'tcx> {
      2 ( 0.00%)          match self.kind() {
      5 ( 0.00%)              Adt(def, substs) if def.is_box() => substs.type_at(0),
      .                       _ => bug!("`boxed_ty` is called on non-box type {:?}", self),
      .                   }
      2 ( 0.00%)      }
      .           
      .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
      .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
      .               /// contents are abstract to rustc.)
      .               #[inline]
      .               pub fn is_scalar(&self) -> bool {
      6 ( 0.00%)          matches!(
     12 ( 0.00%)              self.kind(),
      .                       Bool | Char
      .                           | Int(_)
      .                           | Float(_)
      .                           | Uint(_)
      .                           | FnDef(..)
      .                           | FnPtr(_)
      .                           | RawPtr(_)
      .                           | Infer(IntVar(_) | FloatVar(_))
-- line 1908 ----------------------------------------
-- line 1922 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn is_enum(&self) -> bool {
      .                   matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
      .               }
      .           
      .               #[inline]
      .               pub fn is_union(&self) -> bool {
    487 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
      .               }
      .           
      .               #[inline]
      .               pub fn is_closure(&self) -> bool {
     30 ( 0.00%)          matches!(self.kind(), Closure(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_generator(&self) -> bool {
     45 ( 0.00%)          matches!(self.kind(), Generator(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_integral(&self) -> bool {
    146 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
      .               }
      .           
      .               #[inline]
      .               pub fn is_fresh_ty(&self) -> bool {
      .                   matches!(self.kind(), Infer(FreshTy(_)))
      .               }
      .           
      .               #[inline]
      .               pub fn is_fresh(&self) -> bool {
    235 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
      .               }
      .           
      .               #[inline]
      .               pub fn is_char(&self) -> bool {
      .                   matches!(self.kind(), Char)
      .               }
      .           
      .               #[inline]
-- line 1963 ----------------------------------------
-- line 1967 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn is_signed(&self) -> bool {
      .                   matches!(self.kind(), Int(_))
      .               }
      .           
      .               #[inline]
      .               pub fn is_ptr_sized_integral(&self) -> bool {
      6 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
      .               }
      .           
      .               #[inline]
      .               pub fn has_concrete_skeleton(&self) -> bool {
      .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
      .               }
      .           
      .               /// Returns the type and mutability of `*ty`.
      .               ///
      .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
      .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
    426 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
  2,186 ( 0.00%)          match self.kind() {
     42 ( 0.00%)              Adt(def, _) if def.is_box() => {
      2 ( 0.00%)                  Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
      .                       }
  1,322 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
      .                       RawPtr(mt) if explicit => Some(*mt),
      .                       _ => None,
      .                   }
    852 ( 0.00%)      }
      .           
      .               /// Returns the type of `ty[i]`.
      .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
      4 ( 0.00%)          match self.kind() {
      .                       Array(ty, _) | Slice(ty) => Some(ty),
      .                       _ => None,
      .                   }
      1 ( 0.00%)      }
      .           
  3,248 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
  1,624 ( 0.00%)          match self.kind() {
  1,218 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
      .                       FnPtr(f) => *f,
      .                       Error(_) => {
      .                           // ignore errors (#54954)
      .                           ty::Binder::dummy(FnSig::fake())
      .                       }
      .                       Closure(..) => bug!(
      .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
      .                       ),
      .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
      .                   }
  3,654 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn is_fn(&self) -> bool {
     33 ( 0.00%)          matches!(self.kind(), FnDef(..) | FnPtr(_))
      .               }
      .           
      .               #[inline]
      .               pub fn is_fn_ptr(&self) -> bool {
      .                   matches!(self.kind(), FnPtr(_))
      .               }
      .           
      .               #[inline]
      .               pub fn is_impl_trait(&self) -> bool {
      .                   matches!(self.kind(), Opaque(..))
      .               }
      .           
      .               #[inline]
      .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
    175 ( 0.00%)          match self.kind() {
      .                       Adt(adt, _) => Some(adt),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               /// Iterates over tuple fields.
      .               /// Panics when called on anything but a tuple.
      3 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
    174 ( 0.00%)          match self.kind() {
     87 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
      .                       _ => bug!("tuple_fields called on non-tuple"),
      .                   }
      6 ( 0.00%)      }
      .           
      .               /// Get the `i`-th element of a tuple.
      .               /// Panics when called on anything but a tuple.
      .               pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
      .                   match self.kind() {
      .                       Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
      .                       _ => bug!("tuple_fields called on non-tuple"),
      .                   }
-- line 2059 ----------------------------------------
-- line 2073 ----------------------------------------
      .                   }
      .               }
      .           
      .               /// If the type contains variants, returns the variant for `variant_index`.
      .               /// Panics if `variant_index` is out of range.
      .               //
      .               // FIXME: This requires the optimized MIR in the case of generators.
      .               #[inline]
     10 ( 0.00%)      pub fn discriminant_for_variant(
      .                   &self,
      .                   tcx: TyCtxt<'tcx>,
      .                   variant_index: VariantIdx,
      .               ) -> Option<Discr<'tcx>> {
      5 ( 0.00%)          match self.kind() {
      2 ( 0.00%)              TyKind::Adt(adt, _) if adt.variants.is_empty() => {
      .                           // This can actually happen during CTFE, see
      .                           // https://github.com/rust-lang/rust/issues/89765.
      .                           None
      .                       }
      1 ( 0.00%)              TyKind::Adt(adt, _) if adt.is_enum() => {
      .                           Some(adt.discriminant_for_variant(tcx, variant_index))
      .                       }
      .                       TyKind::Generator(def_id, substs, _) => {
      .                           Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
      .                       }
      .                       _ => None,
      .                   }
      8 ( 0.00%)      }
      .           
      .               /// Returns the type of the discriminant of this type.
    230 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
    115 ( 0.00%)          match self.kind() {
    184 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
      .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
      .           
      .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
      .                           let assoc_items = tcx.associated_item_def_ids(
      .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
      .                           );
      .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
      .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
      .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
      .           
      .                       ty::Bound(..)
      .                       | ty::Placeholder(_)
      .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
      .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
      .                       }
      .                   }
    184 ( 0.00%)      }
      .           
      .               /// Returns the type of metadata for (potentially fat) pointers to this type.
      .               pub fn ptr_metadata_ty(
      .                   &'tcx self,
      .                   tcx: TyCtxt<'tcx>,
      .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
      .               ) -> Ty<'tcx> {
      .                   let tail = tcx.struct_tail_with_normalize(self, normalize);
-- line 2151 ----------------------------------------
-- line 2200 ----------------------------------------
      .               /// function converts such a special type into the closure
      .               /// kind. To go the other way, use
      .               /// `tcx.closure_kind_ty(closure_kind)`.
      .               ///
      .               /// Note that during type checking, we use an inference variable
      .               /// to represent the closure kind, because it has not yet been
      .               /// inferred. Once upvar inference (in `rustc_typeck/src/check/upvar.rs`)
      .               /// is complete, that type variable will be unified.
     40 ( 0.00%)      pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {
     80 ( 0.00%)          match self.kind() {
     80 ( 0.00%)              Int(int_ty) => match int_ty {
      .                           ty::IntTy::I8 => Some(ty::ClosureKind::Fn),
      .                           ty::IntTy::I16 => Some(ty::ClosureKind::FnMut),
      .                           ty::IntTy::I32 => Some(ty::ClosureKind::FnOnce),
      .                           _ => bug!("cannot convert type `{:?}` to a closure kind", self),
      .                       },
      .           
      .                       // "Bound" types appear in canonical queries when the
      .                       // closure type is not yet known
      .                       Bound(..) | Infer(_) => None,
      .           
      .                       Error(_) => Some(ty::ClosureKind::Fn),
      .           
      .                       _ => bug!("cannot convert type `{:?}` to a closure kind", self),
      .                   }
     40 ( 0.00%)      }
      .           
      .               /// Fast path helper for testing if a type is `Sized`.
      .               ///
      .               /// Returning true means the type is known to be sized. Returning
      .               /// `false` means nothing -- could be sized, might not be.
      .               ///
      .               /// Note that we could never rely on the fact that a type such as `[_]` is
      .               /// trivially `!Sized` because we could be in a type environment with a
      .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
      .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
      .               /// this method doesn't return `Option<bool>`.
  8,514 ( 0.00%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
  5,676 ( 0.00%)          match self.kind() {
      .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
      .                       | ty::Uint(_)
      .                       | ty::Int(_)
      .                       | ty::Bool
      .                       | ty::Float(_)
      .                       | ty::FnDef(..)
      .                       | ty::FnPtr(_)
      .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
      .                       | ty::GeneratorWitness(..)
      .                       | ty::Array(..)
      .                       | ty::Closure(..)
      .                       | ty::Never
      .                       | ty::Error(_) => true,
      .           
      .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
      .           
    111 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
      .           
    627 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
      .           
      .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
      .           
      .                       ty::Infer(ty::TyVar(_)) => false,
      .           
      .                       ty::Bound(..)
      .                       | ty::Placeholder(..)
      .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
      .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
      .                       }
      .                   }
  8,514 ( 0.00%)      }
      .           }
      .           
      .           /// Extra information about why we ended up with a particular variance.
      .           /// This is only used to add more information to error messages, and
      .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
      .           /// may lead to confusing notes in error messages, it will never cause
      .           /// a miscompilation or unsoundness.
      .           ///
-- line 2280 ----------------------------------------
-- line 2295 ----------------------------------------
      .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
      .                   param_index: u32,
      .               },
      .           }
      .           
      .           impl<'tcx> VarianceDiagInfo<'tcx> {
      .               /// Mirrors `Variance::xform` - used to 'combine' the existing
      .               /// and new `VarianceDiagInfo`s when our variance changes.
  2,084 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
      .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
  3,126 ( 0.00%)          match self {
      .                       VarianceDiagInfo::None => other,
      .                       VarianceDiagInfo::Invariant { .. } => self,
      .                   }
  1,042 ( 0.00%)      }
      .           }

523,521 ( 0.24%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
  194,570 ( 0.09%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
       13 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    1,178 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
        .               LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
-- line 173 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    2,970 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
        2 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
        8 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 213 ----------------------------------------
        .               }
        .           }
        .           
        .           impl RealFileName {
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path(&self) -> Option<&Path> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => {
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    2,372 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
        2 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
        1 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
        .               pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
        1 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
    6,061 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    7,116 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        .               QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
-- line 281 ----------------------------------------
-- line 288 ----------------------------------------
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
        7 ( 0.00%)      fn from(p: PathBuf) -> Self {
        2 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
        6 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
        7 ( 0.00%)      }
        .           }
        .           
        2 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
        4 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
        6 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
        6 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
        5 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
        .               pub fn to_string_lossy(&self) -> Cow<'_, str> {
        .                   match self.inner {
        .                       FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
        .               }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
    1,194 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
-- line 353 ----------------------------------------
-- line 357 ----------------------------------------
        .               }
        .           
        .               pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
        .               }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
        1 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
        2 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
        1 ( 0.00%)      pub lo: BytePos,
        1 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
        3 ( 0.00%)      pub ctxt: SyntaxContext,
        1 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
   37,855 ( 0.02%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
       15 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
    5,464 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
    4,098 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
    5,464 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
   10,854 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
    7,236 ( 0.00%)      }
        .               #[inline]
      172 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
      172 ( 0.00%)      }
        .               #[inline]
      675 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
      450 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
    4,285 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
    2,571 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
        .               pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
        .               }
-- line 566 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// Returns a new span representing an empty span at the beginning of this span.
        .               #[inline]
        .               pub fn shrink_to_lo(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_hi(span.lo)
        .               }
        .               /// Returns a new span representing an empty span at the end of this span.
        .               #[inline]
       12 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_lo(span.hi)
        8 ( 0.00%)      }
        .           
        .               #[inline]
        .               /// Returns `true` if `hi == lo`.
        .               pub fn is_empty(self) -> bool {
        .                   let span = self.data_untracked();
        .                   span.hi == span.lo
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
       45 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
       30 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
-- line 638 ----------------------------------------
-- line 663 ----------------------------------------
        .               /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,
        .               /// if any.
        .               pub fn parent_callsite(self) -> Option<Span> {
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(expn_data.call_site) } else { None }
        .               }
        .           
        .               /// Walk down the expansion ancestors to find a span that's contained within `outer`.
       50 ( 0.00%)      pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
       25 ( 0.00%)          while !outer.contains(self) {
        .                       self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
       55 ( 0.00%)      }
        .           
        .               /// Edition of the crate from which this span came.
      891 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
      594 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
      197 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
       98 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
      131 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
      125 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
       25 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
      100 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
    1,540 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
    1,320 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
    1,100 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
       20 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
       24 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
       16 ( 0.00%)      }
        .           
        .               /// Checks if a span is "internal" to a macro in which `unsafe`
        .               /// can be used without triggering the `unsafe_code` lint.
        .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
        .               pub fn allows_unsafe(self) -> bool {
        .                   self.ctxt().outer_expn_data().allow_internal_unsafe
        .               }
        .           
-- line 745 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
   45,144 ( 0.02%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
    8,098 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
      110 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
      110 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
   28,483 ( 0.01%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
   36,936 ( 0.02%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
-- line 804 ----------------------------------------
-- line 815 ----------------------------------------
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
       44 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
        8 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
       28 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
       36 ( 0.00%)      }
        .           
       33 ( 0.00%)      pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
       21 ( 0.00%)      }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
      104 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
        6 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
        .                   self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
      660 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
      385 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
   59,355 ( 0.03%)          span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
        .               pub fn remove_mark(&mut self) -> ExpnId {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.remove_mark();
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
-- line 897 ----------------------------------------
-- line 901 ----------------------------------------
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
   11,232 ( 0.01%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
    7,488 ( 0.00%)          let mut span = self.data();
    6,240 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
   11,232 ( 0.01%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
   12,480 ( 0.01%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
      117 ( 0.00%)      pub fn reverse_glob_adjust(
        .                   &mut self,
        .                   expn_id: ExpnId,
        .                   glob_span: Span,
        .               ) -> Option<Option<ExpnId>> {
      182 ( 0.00%)          let mut span = self.data();
      273 ( 0.00%)          let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
      533 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
      130 ( 0.00%)      }
        .           
        .               #[inline]
    2,192 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
    1,918 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1048 ----------------------------------------
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_span(primary_span: Span) -> MultiSpan {
      100 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
        .                   MultiSpan { primary_spans: vec, span_labels: vec![] }
        .               }
        .           
        .               pub fn push_span_label(&mut self, span: Span, label: String) {
        .                   self.span_labels.push((span, label));
        .               }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
        4 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
        .               }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
-- line 1079 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
      100 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
      100 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
        .               fn from(spans: Vec<Span>) -> MultiSpan {
        .                   MultiSpan::from_spans(spans)
        .               }
        .           }
        .           
-- line 1157 ----------------------------------------
-- line 1160 ----------------------------------------
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      308 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      154 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      462 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
        3 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1257 ----------------------------------------
        .               AbsentOk,
        .               /// A failed attempt has been made to load the external source.
        .               AbsentErr,
        .               Unneeded,
        .           }
        .           
        .           impl ExternalSource {
        .               pub fn get_source(&self) -> Option<&Lrc<String>> {
      454 ( 0.00%)          match self {
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::Present(ref src), .. } => Some(src),
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
    1,192 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
        6 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    2,384 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        1 ( 0.00%)          let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
        6 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
        .                   hash
        .               }
        .           
        .               /// Check if the stored hash matches the hash of the string.
        .               pub fn matches(&self, src: &str) -> bool {
        1 ( 0.00%)          Self::new(self.kind, src) == *self
        .               }
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
        .                   let len = self.hash_len();
        .                   &self.value[..len]
        .               }
        .           
        .               fn hash_len(&self) -> usize {
        5 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
       58 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
        1 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
        1 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
        1 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
        4 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
        2 ( 0.00%)                          0..=0xFF => 1,
        .                                   0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
        2 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
        3 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
       11 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    5,364 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      596 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
  946,368 ( 0.44%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    1,192 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    6,556 ( 0.00%)              SourceFile {
    4,768 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    2,384 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    2,384 ( 0.00%)                  lines,
    2,384 ( 0.00%)                  multibyte_chars,
    2,384 ( 0.00%)                  non_narrow_chars,
    2,384 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    5,364 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
       11 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
        3 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
        2 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
        2 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
        3 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
       12 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
        2 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
       17 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
       11 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
        4 ( 0.00%)              lines,
        4 ( 0.00%)              multibyte_chars,
        4 ( 0.00%)              non_narrow_chars,
        4 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
        9 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
        .               pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
        .                   self.lines[line_index]
        .               }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
      133 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
       27 ( 0.00%)          if matches!(
       38 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        1 ( 0.00%)              let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        3 ( 0.00%)              if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
        .                       {
        5 ( 0.00%)                  if let Some(mut src) = src {
        .                               // The src_hash needs to be computed on the pre-normalized src.
        1 ( 0.00%)                      if self.src_hash.matches(&src) {
        3 ( 0.00%)                          normalize_src(&mut src, BytePos::from_usize(0));
        8 ( 0.00%)                          *src_kind = ExternalSourceKind::Present(Lrc::new(src));
        .                                   return true;
        .                               }
        .                           } else {
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
       18 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
      171 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
        .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
        .                   fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
      597 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
      644 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
    1,868 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
    6,284 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
    3,824 ( 0.00%)          assert!(line_index < self.lines.len());
    5,694 ( 0.00%)          if line_index == (self.lines.len() - 1) {
        3 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
    3,794 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
        2 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
        6 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
        .                       if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
        .                           total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
        .                           assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
       12 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
       10 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
        4 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
        7 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
        2 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
        .                   match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
        1 ( 0.00%)                  let linebpos = self.lines[a];
        2 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
        1 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
        8 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
        3 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
        2 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
        1 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
        5 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
        7 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
       20 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
       18 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        2 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        2 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
    4,819 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
      190 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
    3,466 ( 0.00%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
1,696,073 ( 0.78%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
  907,184 ( 0.42%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
        .               }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
  134,000 ( 0.06%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2042 ----------------------------------------
        .           /// Range inside of a `Span` used for diagnostics when we only have access to relative positions.
        .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           pub struct InnerSpan {
        .               pub start: usize,
        .               pub end: usize,
        .           }
        .           
        .           impl InnerSpan {
       16 ( 0.00%)      pub fn new(start: usize, end: usize) -> InnerSpan {
        .                   InnerSpan { start, end }
        8 ( 0.00%)      }
        .           }
        .           
        .           /// Requirements for a `StableHashingContext` to be used in this crate.
        .           ///
        .           /// This is a hack to allow using the [`HashStable_Generic`] derive macro
        .           /// instead of implementing everything in rustc_middle.
        .           pub trait HashStableContext {
        .               fn def_path_hash(&self, def_id: DefId) -> DefPathHash;
-- line 2060 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
   26,208 ( 0.01%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
    3,922 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
   22,286 ( 0.01%)          let span = self.data_untracked();
   10,698 ( 0.00%)          span.ctxt.hash_stable(ctx, hasher);
   11,232 ( 0.01%)          span.parent.hash_stable(ctx, hasher);
        .           
    7,571 ( 0.00%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
    7,322 ( 0.00%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
   14,644 ( 0.01%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
    7,322 ( 0.00%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
    3,661 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
    3,661 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
   29,952 ( 0.01%)      }
        .           }

1,328,863 ( 0.61%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core.rs
--------------------------------------------------------------------------------
Ir              

-- line 26 ----------------------------------------
     .               /// indices mapping from the entry hash to its index.
     .               indices: RawTable<usize>,
     .               /// entries is a dense vec of entries in their order.
     .               entries: Vec<Bucket<K, V>>,
     .           }
     .           
     .           #[inline(always)]
     .           fn get_hash<K, V>(entries: &[Bucket<K, V>]) -> impl Fn(&usize) -> u64 + '_ {
52,964 ( 0.02%)      move |&i| entries[i].hash.get()
     .           }
     .           
     .           #[inline]
     .           fn equivalent<'a, K, V, Q: ?Sized + Equivalent<K>>(
     .               key: &'a Q,
     .               entries: &'a [Bucket<K, V>],
     .           ) -> impl Fn(&usize) -> bool + 'a {
 8,082 ( 0.00%)      move |&i| Q::equivalent(key, &entries[i].key)
     .           }
     .           
     .           #[inline]
     .           fn erase_index(table: &mut RawTable<usize>, hash: HashValue, index: usize) {
     .               table.erase_entry(hash.get(), move |&i| i == index);
     .           }
     .           
     .           #[inline]
-- line 50 ----------------------------------------
-- line 132 ----------------------------------------
     .                   IndexMapCore {
     .                       indices: RawTable::with_capacity(n),
     .                       entries: Vec::with_capacity(n),
     .                   }
     .               }
     .           
     .               #[inline]
     .               pub(crate) fn len(&self) -> usize {
    70 ( 0.00%)          self.indices.len()
     .               }
     .           
     .               #[inline]
     .               pub(crate) fn capacity(&self) -> usize {
     .                   cmp::min(self.indices.capacity(), self.entries.capacity())
     .               }
     .           
     .               pub(crate) fn clear(&mut self) {
-- line 148 ----------------------------------------
-- line 152 ----------------------------------------
     .           
     .               pub(crate) fn truncate(&mut self, len: usize) {
     .                   if len < self.len() {
     .                       self.erase_indices(len, self.entries.len());
     .                       self.entries.truncate(len);
     .                   }
     .               }
     .           
    27 ( 0.00%)      pub(crate) fn drain<R>(&mut self, range: R) -> Drain<'_, Bucket<K, V>>
     .               where
     .                   R: RangeBounds<usize>,
     .               {
     9 ( 0.00%)          let range = simplify_range(range, self.entries.len());
     .                   self.erase_indices(range.start, range.end);
     .                   self.entries.drain(range)
    24 ( 0.00%)      }
     .           
     .               #[cfg(feature = "rayon")]
     .               pub(crate) fn par_drain<R>(&mut self, range: R) -> rayon::vec::Drain<'_, Bucket<K, V>>
     .               where
     .                   K: Send,
     .                   V: Send,
     .                   R: RangeBounds<usize>,
     .               {
-- line 175 ----------------------------------------
-- line 194 ----------------------------------------
     .               /// Reserve capacity for `additional` more key-value pairs.
     .               pub(crate) fn reserve(&mut self, additional: usize) {
     .                   self.indices.reserve(additional, get_hash(&self.entries));
     .                   self.reserve_entries();
     .               }
     .           
     .               /// Reserve entries capacity to match the indices
     .               fn reserve_entries(&mut self) {
 1,803 ( 0.00%)          let additional = self.indices.capacity() - self.entries.len();
     .                   self.entries.reserve_exact(additional);
     .               }
     .           
     .               /// Shrink the capacity of the map as much as possible.
     .               pub(crate) fn shrink_to_fit(&mut self) {
     .                   self.indices.shrink_to(0, get_hash(&self.entries));
     .                   self.entries.shrink_to_fit();
     .               }
-- line 210 ----------------------------------------
-- line 218 ----------------------------------------
     .                   } else {
     .                       None
     .                   }
     .               }
     .           
     .               /// Append a key-value pair, *without* checking whether it already exists,
     .               /// and return the pair's new index.
     .               fn push(&mut self, hash: HashValue, key: K, value: V) -> usize {
 7,196 ( 0.00%)          let i = self.entries.len();
     .                   self.indices.insert(hash.get(), i, get_hash(&self.entries));
14,933 ( 0.01%)          if i == self.entries.capacity() {
     .                       // Reserve our own capacity synced to the indices,
     .                       // rather than letting `Vec::push` just double it.
     .                       self.reserve_entries();
     .                   }
40,552 ( 0.02%)          self.entries.push(Bucket { hash, key, value });
     .                   i
     .               }
     .           
     .               /// Return the index in `entries` where an equivalent key can be found
 5,950 ( 0.00%)      pub(crate) fn get_index_of<Q>(&self, hash: HashValue, key: &Q) -> Option<usize>
     .               where
     .                   Q: ?Sized + Equivalent<K>,
     .               {
   364 ( 0.00%)          let eq = equivalent(key, &self.entries);
     .                   self.indices.get(hash.get(), eq).copied()
 5,950 ( 0.00%)      }
     .           
 1,987 ( 0.00%)      pub(crate) fn insert_full(&mut self, hash: HashValue, key: K, value: V) -> (usize, Option<V>)
     .               where
     .                   K: Eq,
     .               {
     .                   match self.get_index_of(hash, &key) {
     .                       Some(i) => (i, Some(replace(&mut self.entries[i].value, value))),
   354 ( 0.00%)              None => (self.push(hash, key, value), None),
     .                   }
 1,633 ( 0.00%)      }
     .           
     .               /// Remove an entry by shifting all entries that follow it
     .               pub(crate) fn shift_remove_full<Q>(&mut self, hash: HashValue, key: &Q) -> Option<(usize, K, V)>
     .               where
     .                   Q: ?Sized + Equivalent<K>,
     .               {
     .                   let eq = equivalent(key, &self.entries);
     .                   match self.indices.remove_entry(hash.get(), eq) {
-- line 262 ----------------------------------------
-- line 361 ----------------------------------------
     .                   let (init, shifted_entries) = self.entries.split_at(end);
     .                   let (start_entries, erased_entries) = init.split_at(start);
     .           
     .                   let erased = erased_entries.len();
     .                   let shifted = shifted_entries.len();
     .                   let half_capacity = self.indices.buckets() / 2;
     .           
     .                   // Use a heuristic between different strategies
     6 ( 0.00%)          if erased == 0 {
     .                       // Degenerate case, nothing to do
     .                   } else if start + shifted < half_capacity && start < erased {
     .                       // Reinsert everything, as there are few kept indices
     .                       self.indices.clear();
     .           
     .                       // Reinsert stable indices
     .                       for (i, entry) in enumerate(start_entries) {
     .                           self.indices.insert_no_grow(entry.hash.get(), i);
-- line 377 ----------------------------------------
-- line 468 ----------------------------------------
     .                       Entry::Vacant(entry) => entry.insert(default),
     .                   }
     .               }
     .           
     .               /// Inserts the result of the `call` function in the entry if it is vacant and returns a mutable
     .               /// reference to it. Otherwise a mutable reference to an already existent value is returned.
     .               ///
     .               /// Computes in **O(1)** time (amortized average).
24,918 ( 0.01%)      pub fn or_insert_with<F>(self, call: F) -> &'a mut V
     .               where
     .                   F: FnOnce() -> V,
     .               {
 6,230 ( 0.00%)          match self {
 1,510 ( 0.00%)              Entry::Occupied(entry) => entry.into_mut(),
 1,861 ( 0.00%)              Entry::Vacant(entry) => entry.insert(call()),
     .                   }
24,920 ( 0.01%)      }
     .           
     .               /// Inserts the result of the `call` function with a reference to the entry's key if it is
     .               /// vacant, and returns a mutable reference to the new value. Otherwise a mutable reference to
     .               /// an already existent value is returned.
     .               ///
     .               /// Computes in **O(1)** time (amortized average).
     .               pub fn or_insert_with_key<F>(self, call: F) -> &'a mut V
     .               where
-- line 492 ----------------------------------------
-- line 531 ----------------------------------------
     .                       x => x,
     .                   }
     .               }
     .           
     .               /// Inserts a default-constructed value in the entry if it is vacant and returns a mutable
     .               /// reference to it. Otherwise a mutable reference to an already existent value is returned.
     .               ///
     .               /// Computes in **O(1)** time (amortized average).
45,416 ( 0.02%)      pub fn or_default(self) -> &'a mut V
     .               where
     .                   V: Default,
     .               {
12,976 ( 0.01%)          match self {
 1,000 ( 0.00%)              Entry::Occupied(entry) => entry.into_mut(),
16,464 ( 0.01%)              Entry::Vacant(entry) => entry.insert(V::default()),
     .                   }
51,904 ( 0.02%)      }
     .           }
     .           
     .           impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for Entry<'_, K, V> {
     .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     .                   match *self {
     .                       Entry::Vacant(ref v) => f.debug_tuple(stringify!(Entry)).field(v).finish(),
     .                       Entry::Occupied(ref o) => f.debug_tuple(stringify!(Entry)).field(o).finish(),
     .                   }
-- line 555 ----------------------------------------
-- line 634 ----------------------------------------
     .           
     .               /// Return the index where the key-value pair will be inserted.
     .               pub fn index(&self) -> usize {
     .                   self.map.len()
     .               }
     .           
     .               /// Inserts the entry's key and the given value into the map, and returns a mutable reference
     .               /// to the value.
   971 ( 0.00%)      pub fn insert(self, value: V) -> &'a mut V {
16,840 ( 0.01%)          let i = self.map.push(self.hash, self.key, value);
    48 ( 0.00%)          &mut self.map.entries[i].value
   854 ( 0.00%)      }
     .           }
     .           
     .           impl<K: fmt::Debug, V> fmt::Debug for VacantEntry<'_, K, V> {
     .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     .                   f.debug_tuple(stringify!(VacantEntry))
     .                       .field(self.key())
     .                       .finish()
     .               }
-- line 653 ----------------------------------------

54,751 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 180 ----------------------------------------
        .           /// assert_eq!(v, &[0.into()]);
        .           ///
        .           /// // Ensure that the last item was dropped.
        .           /// assert!(weak.upgrade().is_none());
        .           /// ```
        .           #[stable(feature = "drop_in_place", since = "1.8.0")]
        .           #[lang = "drop_in_place"]
        .           #[allow(unconditional_recursion)]
2,348,740 ( 1.08%)  pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
        .               // Code here does not matter - this is replaced by the
        .               // real drop glue by the compiler.
        .           
        .               // SAFETY: see comment above
        .               unsafe { drop_in_place(to_drop) }
        .           }
        .           
        .           /// Creates a null raw pointer.
-- line 196 ----------------------------------------
-- line 448 ----------------------------------------
        .                       return;
        .                   }
        .               }
        .           
        .               // Direct swapping, for the cases not going through the block optimization.
        .               // SAFETY: the caller must guarantee that `x` and `y` are valid
        .               // for writes, properly aligned, and non-overlapping.
        .               unsafe {
       12 ( 0.00%)          let z = read(x);
        8 ( 0.00%)          copy_nonoverlapping(y, x, 1);
        .                   write(y, z);
        .               }
        .           }
        .           
        .           #[inline]
        .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
        .           const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {
        .               // The approach here is to utilize simd to swap x & y efficiently. Testing reveals
-- line 465 ----------------------------------------
-- line 693 ----------------------------------------
        .               let mut tmp = MaybeUninit::<T>::uninit();
        .               // SAFETY: the caller must guarantee that `src` is valid for reads.
        .               // `src` cannot overlap `tmp` because `tmp` was just allocated on
        .               // the stack as a separate allocated object.
        .               //
        .               // Also, since we just wrote a valid value into `tmp`, it is guaranteed
        .               // to be properly initialized.
        .               unsafe {
  206,218 ( 0.09%)          copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
  362,697 ( 0.17%)          tmp.assume_init()
        .               }
        .           }
        .           
        .           /// Reads the value from `src` without moving it. This leaves the
        .           /// memory in `src` unchanged.
        .           ///
        .           /// Unlike [`read`], `read_unaligned` works with unaligned pointers.
        .           ///
-- line 710 ----------------------------------------
-- line 884 ----------------------------------------
        .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
        .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
        .               }
        .           
        .               // SAFETY: the caller must guarantee that `dst` is valid for writes.
        .               // `dst` cannot overlap `src` because the caller has mutable access
        .               // to `dst` while `src` is owned by this function.
        .               unsafe {
3,040,142 ( 1.40%)          copy_nonoverlapping(&src as *const T, dst, 1);
        .                   intrinsics::forget(src);
        .               }
        .           }
        .           
        .           /// Overwrites a memory location with the given value without reading or
        .           /// dropping the old value.
        .           ///
        .           /// Unlike [`write()`], the pointer may be unaligned.
-- line 900 ----------------------------------------
-- line 1206 ----------------------------------------
        .               if stride == 1 {
        .                   // `stride == 1` case can be computed more simply through `-p (mod a)`, but doing so
        .                   // inhibits LLVM's ability to select instructions like `lea`. Instead we compute
        .                   //
        .                   //    round_up_to_next_alignment(p, a) - p
        .                   //
        .                   // which distributes operations around the load-bearing, but pessimizing `and` sufficiently
        .                   // for LLVM to be able to utilize the various optimizations it knows about.
       52 ( 0.00%)          return wrapping_sub(
      310 ( 0.00%)              wrapping_add(p as usize, a_minus_one) & wrapping_sub(0, a),
        .                       p as usize,
        .                   );
        .               }
        .           
        .               let pmoda = p as usize & a_minus_one;
        .               if pmoda == 0 {
        .                   // Already aligned. Yay!
        .                   return 0;
-- line 1223 ----------------------------------------
-- line 1348 ----------------------------------------
        .           /// assert!(std::ptr::eq(
        .           ///     &wrapper as &dyn Trait as *const dyn Trait as *const u8,
        .           ///     &wrapper.member as &dyn Trait as *const dyn Trait as *const u8,
        .           /// ));
        .           /// ```
        .           #[stable(feature = "ptr_eq", since = "1.17.0")]
        .           #[inline]
        .           pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {
   49,042 ( 0.02%)      a == b
        .           }
        .           
        .           /// Hash a raw pointer.
        .           ///
        .           /// This can be used to hash a `&T` reference (which coerces to `*const T` implicitly)
        .           /// by its address rather than the value it points to
        .           /// (which is what the `Hash for &T` implementation does).
        .           ///
-- line 1364 ----------------------------------------

  342,252 ( 0.16%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 111 ----------------------------------------
        .           const EMPTY: u8 = 0b1111_1111;
        .           
        .           /// Control byte value for a deleted bucket.
        .           const DELETED: u8 = 0b1000_0000;
        .           
        .           /// Checks whether a control byte represents a full bucket (top bit is clear).
        .           #[inline]
        .           fn is_full(ctrl: u8) -> bool {
  230,610 ( 0.11%)      ctrl & 0x80 == 0
        .           }
        .           
        .           /// Checks whether a control byte represents a special value (top bit is set).
        .           #[inline]
        .           fn is_special(ctrl: u8) -> bool {
        .               ctrl & 0x80 != 0
        .           }
        .           
        .           /// Checks whether a special control value is EMPTY (just check 1 bit).
        .           #[inline]
        .           fn special_is_empty(ctrl: u8) -> bool {
        .               debug_assert!(is_special(ctrl));
   18,029 ( 0.01%)      ctrl & 0x01 != 0
        .           }
        .           
        .           /// Primary hash function, used to select the initial bucket to probe from.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h1(hash: u64) -> usize {
        .               // On 32-bit platforms we simply ignore the higher hash bits.
        .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
        .           /// Secondary hash function, saved in the low 7 bits of the control byte.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h2(hash: u64) -> u8 {
        .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
        .               // value, some hash functions (such as FxHash) produce a usize result
        .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
        .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
2,137,493 ( 0.98%)      let top7 = hash >> (hash_len * 8 - 7);
        .               (top7 & 0x7f) as u8 // truncation
        .           }
        .           
        .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
        .           /// table size is a power of two) to visit every group of elements exactly once.
        .           ///
        .           /// A triangular probe has us jump by 1 more group every time. So first we
        .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
        .               #[inline]
        .               fn move_next(&mut self, bucket_mask: usize) {
        .                   // We should have found an empty bucket by now and ended the probe.
        .                   debug_assert!(
        .                       self.stride <= bucket_mask,
        .                       "Went past end of probe sequence"
        .                   );
        .           
   26,716 ( 0.01%)          self.stride += Group::WIDTH;
   26,716 ( 0.01%)          self.pos += self.stride;
   22,350 ( 0.01%)          self.pos &= bucket_mask;
        .               }
        .           }
        .           
        .           /// Returns the number of buckets needed to hold the given number of items,
        .           /// taking the maximum load factor into account.
        .           ///
        .           /// Returns `None` if an overflow occurs.
        .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
        .           #[cfg_attr(target_os = "emscripten", inline(never))]
        .           #[cfg_attr(not(target_os = "emscripten"), inline)]
        .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
        .               debug_assert_ne!(cap, 0);
        .           
        .               // For small tables we require at least 1 empty bucket so that lookups are
        .               // guaranteed to terminate if an element doesn't exist in the table.
    9,912 ( 0.00%)      if cap < 8 {
        .                   // We don't bother with a table size of 2 buckets since that can only
        .                   // hold a single element. Instead we skip directly to a 4 bucket table
        .                   // which can hold 3 elements.
   19,620 ( 0.01%)          return Some(if cap < 4 { 4 } else { 8 });
        .               }
        .           
        .               // Otherwise require 1/8 buckets to be empty (87.5% load)
        .               //
        .               // Be careful when modifying this, calculate_layout relies on the
        .               // overflow check here.
    6,192 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
        .           
        .               // Any overflows will have been caught by the checked_mul. Also, any
        .               // rounding errors from the division above will be cleaned up by
        .               // next_power_of_two (which can't overflow because of the previous division).
        .               Some(adjusted_cap.next_power_of_two())
        .           }
        .           
        .           /// Returns the maximum effective capacity for the given bucket mask, taking
        .           /// the maximum load factor into account.
        .           #[inline]
        .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
   24,853 ( 0.01%)      if bucket_mask < 8 {
        .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
        .                   // Keep in mind that the bucket mask is one less than the bucket count.
        .                   bucket_mask
        .               } else {
        .                   // For larger tables we reserve 12.5% of the slots as empty.
    8,328 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
        .               }
        .           }
        .           
        .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
        .           /// while keeping the rest of `calculate_layout_for` independent of `T`
        .           #[derive(Copy, Clone)]
        .           struct TableLayout {
        .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
        .           
        .               #[inline]
        .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   let TableLayout { size, ctrl_align } = self;
        .                   // Manual layout calculation since Layout methods are not yet stable.
        .                   let ctrl_offset =
   19,696 ( 0.01%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
   28,102 ( 0.01%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
        .           
        .                   Some((
        .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
        .                       ctrl_offset,
        .                   ))
        .               }
        .           }
        .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
        .                   }
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub unsafe fn drop(&self) {
        .                   self.as_ptr().drop_in_place();
        .               }
        .               #[inline]
        .               pub unsafe fn read(&self) -> T {
       16 ( 0.00%)          self.as_ptr().read()
        .               }
        .               #[inline]
        .               pub unsafe fn write(&self, val: T) {
        .                   self.as_ptr().write(val);
        .               }
        .               #[inline]
        .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
        .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
        .               /// Creates a new empty hash table without allocating any memory, using the
        .               /// given allocator.
        .               ///
        .               /// In effect this returns a table with exactly 1 bucket. However we can
        .               /// leave the data pointer dangling since that bucket is never written to
        .               /// due to our load factor forcing us to always have at least 1 free bucket.
        .               #[inline]
        .               pub fn new_in(alloc: A) -> Self {
    9,705 ( 0.00%)          Self {
        .                       table: RawTableInner::new_in(alloc),
        .                       marker: PhantomData,
        .                   }
        .               }
        .           
        .               /// Allocates a new hash table with the given number of buckets.
        .               ///
        .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
        .               unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   Ok(Self {
       20 ( 0.00%)              table: RawTableInner::new_uninitialized(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           buckets,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
        .               /// Attempts to allocate a new hash table with at least enough capacity
        .               /// for inserting the given number of elements without reallocating.
        .               fn fallible_with_capacity(
        .                   alloc: A,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   Ok(Self {
      908 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           capacity,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
        .                   debug_assert_ne!(self.table.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               /// Erases an element from the table without dropping it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    1,039 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    1,039 ( 0.00%)          let index = self.bucket_index(item);
        .                   self.table.erase(index);
    2,078 ( 0.00%)      }
        .           
        .               /// Erases an element from the table, dropping it in place.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
        .                   // Erase the element from the table first since drop might panic.
      396 ( 0.00%)          self.erase_no_drop(&item);
        .                   item.drop();
        .               }
        .           
        .               /// Finds and erases an element from the table, dropping it in place.
        .               /// Returns true if an element was found.
        .               #[cfg(feature = "raw")]
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// Removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    1,682 ( 0.00%)          self.erase_no_drop(&item);
      400 ( 0.00%)          item.read()
        .               }
        .           
        .               /// Finds and removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
   54,442 ( 0.03%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match self.find(hash, eq) {
      372 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
    9,570 ( 0.00%)              None => None,
        .                   }
   81,454 ( 0.04%)      }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear_no_drop(&mut self) {
        .                   self.table.clear_no_drop();
        .               }
        .           
        .               /// Removes all elements from the table without freeing the backing memory.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear(&mut self) {
        .                   // Ensure that the table is reset even if one of the drops panic
        .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
        .                   unsafe {
        1 ( 0.00%)              self_.drop_elements();
        .                   }
        .               }
        .           
        7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
    1,412 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
        .                       for item in self.iter() {
        .                           item.drop();
        .                       }
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
        .                   // Calculate the minimal number of elements that we need to reserve
        .                   // space for.
        .                   let min_size = usize::max(self.table.items, min_size);
        .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Ensures that at least `additional` items can be inserted into the table
        .               /// without reallocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
   40,136 ( 0.02%)          if additional > self.table.growth_left {
        .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
   18,126 ( 0.01%)              if self
        .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
        .                           .is_err()
        .                       {
        .                           unsafe { hint::unreachable_unchecked() }
        .                       }
        .                   }
        .               }
        .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
        .                   } else {
        .                       Ok(())
        .                   }
        .               }
        .           
        .               /// Out-of-line slow path for `reserve` and `try_reserve`.
        .               #[cold]
        .               #[inline(never)]
   39,614 ( 0.02%)      fn reserve_rehash(
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
        .               ) -> Result<(), TryReserveError> {
        .                   unsafe {
        .                       self.table.reserve_rehash_inner(
        .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
        .                           TableLayout::new::<T>(),
        .                           if mem::needs_drop::<T>() {
        .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
        .                           } else {
        .                               None
        .                           },
        .                       )
        .                   }
   24,360 ( 0.01%)      }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
        .               /// current table into it.
        .               fn resize(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
        .                       )
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns its raw bucket.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
  325,606 ( 0.15%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
        .                   unsafe {
        .                       let mut index = self.table.find_insert_slot(hash);
        .           
        .                       // We can avoid growing the table once we have reached our load
        .                       // factor if we are replacing a tombstone. This works since the
        .                       // number of EMPTY slots does not change in this case.
      277 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
  214,652 ( 0.10%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
        .                           self.reserve(1, hasher);
        .                           index = self.table.find_insert_slot(hash);
        .                       }
        .           
        .                       self.table.record_item_insert_at(index, old_ctrl, hash);
        .           
        .                       let bucket = self.bucket(index);
        2 ( 0.00%)              bucket.write(value);
        .                       bucket
        .                   }
  241,165 ( 0.11%)      }
        .           
        .               /// Attempts to insert a new element without growing the table and return its raw bucket.
        .               ///
        .               /// Returns an `Err` containing the given element if inserting it would require growing the
        .               /// table.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns a mutable reference to it.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
   95,216 ( 0.04%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
    5,817 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
   71,412 ( 0.03%)      }
        .           
        .               /// Inserts a new element into the table, without growing the table.
        .               ///
        .               /// There must be enough space in the table to insert the new element.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
      396 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
   52,880 ( 0.02%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
    2,764 ( 0.00%)          let bucket = self.table.bucket(index);
        .           
        .                   // If we are replacing a DELETED entry then we don't need to update
        .                   // the load counter.
  105,663 ( 0.05%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
        .           
        .                   bucket.write(value);
   87,261 ( 0.04%)          self.table.items += 1;
        .                   bucket
      787 ( 0.00%)      }
        .           
        .               /// Temporary removes a bucket, applying the given function to the removed
        .               /// element and optionally put back the returned value in the same bucket.
        .               ///
        .               /// Returns `true` if the bucket still contains an element
        .               ///
        .               /// This does not check if the given bucket is actually occupied.
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 814 ----------------------------------------
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// Searches for an element in the table.
        .               #[inline]
        .               pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
      179 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    3,815 ( 0.00%)              eq(self.bucket(index).as_ref())
       86 ( 0.00%)          });
        .           
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match result {
       27 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Gets a reference to an element in the table.
        .               #[inline]
        .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
    8,207 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Gets a mutable reference to an element in the table.
        .               #[inline]
        .               pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
       19 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Attempts to get mutable references to `N` entries in the table at once.
        .               ///
        .               /// Returns an array of length `N` with the results of each query.
-- line 855 ----------------------------------------
-- line 920 ----------------------------------------
        .               #[inline]
        .               pub fn len(&self) -> usize {
        .                   self.table.items
        .               }
        .           
        .               /// Returns `true` if the table contains no elements.
        .               #[inline]
        .               pub fn is_empty(&self) -> bool {
   76,028 ( 0.04%)          self.len() == 0
        .               }
        .           
        .               /// Returns the number of buckets in the table.
        .               #[inline]
        .               pub fn buckets(&self) -> usize {
        .                   self.table.bucket_mask + 1
        .               }
        .           
-- line 936 ----------------------------------------
-- line 938 ----------------------------------------
        .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
        .               /// Because we cannot make the `next` method unsafe on the `RawIter`
        .               /// struct, we have to make the `iter` method unsafe.
        .               #[inline]
        .               pub unsafe fn iter(&self) -> RawIter<T> {
        .                   let data = Bucket::from_base_index(self.data_end(), 0);
        .                   RawIter {
        .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
    6,839 ( 0.00%)              items: self.table.items,
        .                   }
        .               }
        .           
        .               /// Returns an iterator over occupied buckets that could match a given hash.
        .               ///
        .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
        .               /// return items that have a hash value different than the one provided. You
        .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
        .               /// Iteration starts at the provided iterator's current location.
        .               ///
        .               /// It is up to the caller to ensure that the iterator is valid for this
        .               /// `RawTable` and covers all items that remain in the table.
        .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
        .                   debug_assert_eq!(iter.len(), self.len());
        .           
        .                   let alloc = self.table.alloc.clone();
      496 ( 0.00%)          let allocation = self.into_allocation();
      372 ( 0.00%)          RawIntoIter {
      620 ( 0.00%)              iter,
        .                       allocation,
        .                       marker: PhantomData,
        .                       alloc,
        .                   }
        .               }
        .           
        .               /// Converts the table into a raw allocation. The contents of the table
        .               /// should be dropped using a `RawIter` before freeing the allocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
      133 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
        .                       None
        .                   } else {
        .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
        .                           Some(lco) => lco,
        .                           None => unsafe { hint::unreachable_unchecked() },
        .                       };
        .                       Some((
       76 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
        .                           layout,
        .                       ))
        .                   };
        .                   mem::forget(self);
        .                   alloc
        .               }
        .           }
        .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<A> RawTableInner<A> {
        .               #[inline]
        .               const fn new_in(alloc: A) -> Self {
   42,925 ( 0.02%)          Self {
        .                       // Be careful to cast the entire slice to a raw pointer.
        .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
        .                       bucket_mask: 0,
        .                       items: 0,
        .                       growth_left: 0,
        .                       alloc,
        .                   }
        .               }
        .           }
        .           
        .           impl<A: Allocator + Clone> RawTableInner<A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
   34,345 ( 0.02%)      unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
        .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
        .                   // such allocations will never succeed anyways.
        .                   //
        .                   // This mirrors what Vec does in the standard library.
        .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
        .                       return Err(fallibility.capacity_overflow());
        .                   }
        .           
    9,088 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
        .                       Ok(block) => block.cast(),
        .                       Err(_) => return Err(fallibility.alloc_err(layout)),
        .                   };
        .           
        .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
   22,728 ( 0.01%)          Ok(Self {
        .                       ctrl,
    8,748 ( 0.00%)              bucket_mask: buckets - 1,
        .                       items: 0,
        .                       growth_left: bucket_mask_to_capacity(buckets - 1),
        .                       alloc,
        .                   })
   25,422 ( 0.01%)      }
        .           
        .               #[inline]
    3,852 ( 0.00%)      fn fallible_with_capacity(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
      966 ( 0.00%)          if capacity == 0 {
      706 ( 0.00%)              Ok(Self::new_in(alloc))
        .                   } else {
        .                       unsafe {
        .                           let buckets =
        .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
        .           
   14,781 ( 0.01%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
        .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
        .           
    2,046 ( 0.00%)                  Ok(result)
        .                       }
        .                   }
    3,852 ( 0.00%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element and sets the hash for that slot.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
   17,638 ( 0.01%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
        .                   let index = self.find_insert_slot(hash);
   17,638 ( 0.01%)          let old_ctrl = *self.ctrl(index);
        .                   self.set_ctrl_h2(index, hash);
        .                   (index, old_ctrl)
   35,276 ( 0.02%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
        .               fn find_insert_slot(&self, hash: u64) -> usize {
        .                   let mut probe_seq = self.probe_seq(hash);
        .                   loop {
        .                       unsafe {
        .                           let group = Group::load(self.ctrl(probe_seq.pos));
  149,801 ( 0.07%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
  438,856 ( 0.20%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
        .           
        .                               // In tables smaller than the group width, trailing control
        .                               // bytes outside the range of the table are filled with
        .                               // EMPTY entries. These will unfortunately trigger a
        .                               // match, but once masked may point to a full bucket that
        .                               // is already occupied. We detect this situation here and
        .                               // perform a second scan starting at the beginning of the
        .                               // table. This second scan is guaranteed to find an empty
        .                               // slot (due to the load factor) before hitting the trailing
        .                               // control bytes (containing EMPTY).
  199,460 ( 0.09%)                      if unlikely(is_full(*self.ctrl(result))) {
        .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
        .                                   debug_assert_ne!(probe_seq.pos, 0);
        .                                   return Group::load_aligned(self.ctrl(0))
        .                                       .match_empty_or_deleted()
        .                                       .lowest_set_bit_nonzero();
        .                               }
        .           
        .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
        .           
        .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
        .               /// code generated, but it is eliminated by LLVM optimizations.
        .               #[inline]
        .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
        .                   let h2_hash = h2(hash);
        .                   let mut probe_seq = self.probe_seq(hash);
        .           
    2,992 ( 0.00%)          loop {
        .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
        .           
  319,454 ( 0.15%)              for bit in group.match_byte(h2_hash) {
  517,294 ( 0.24%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
        .           
  312,600 ( 0.14%)                  if likely(eq(index)) {
        .                               return Some(index);
        .                           }
        .                       }
        .           
  124,927 ( 0.06%)              if likely(group.match_empty().any_bit_set()) {
        .                           return None;
        .                       }
        .           
        .                       probe_seq.move_next(self.bucket_mask);
        .                   }
        .               }
        .           
        .               #[allow(clippy::mut_mut)]
-- line 1198 ----------------------------------------
-- line 1225 ----------------------------------------
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               #[inline]
        .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
        .                   debug_assert_ne!(self.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   let base: *mut u8 = self.data_end().as_ptr();
  568,952 ( 0.26%)          base.sub((index + 1) * size_of)
        .               }
        .           
        .               #[inline]
        .               unsafe fn data_end<T>(&self) -> NonNull<T> {
        .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
        .               }
        .           
        .               /// Returns an iterator-like object for a probe sequence on the table.
        .               ///
        .               /// This iterator never terminates, but is guaranteed to visit each bucket
        .               /// group exactly once. The loop using `probe_seq` must terminate upon
        .               /// reaching a group containing an empty bucket.
        .               #[inline]
        .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
        .                   ProbeSeq {
2,180,299 ( 1.00%)              pos: h1(hash) & self.bucket_mask,
        .                       stride: 0,
        .                   }
        .               }
        .           
        .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
        .               /// in the table, otherwise returns error
        .               #[cfg(feature = "raw")]
        .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
        .                   } else {
        .                       self.record_item_insert_at(index, old_ctrl, hash);
        .                       Ok(index)
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
  268,315 ( 0.12%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
        .                   self.set_ctrl_h2(index, hash);
  214,652 ( 0.10%)          self.items += 1;
        .               }
        .           
        .               #[inline]
        .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
        .                   let probe_seq_pos = self.probe_seq(hash).pos;
        .                   let probe_index =
        .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
        .                   probe_index(i) == probe_index(new_i)
-- line 1281 ----------------------------------------
-- line 1312 ----------------------------------------
        .                   // replicate the buckets at the end of the trailing group. For example
        .                   // with 2 buckets and a group size of 4, the control bytes will look
        .                   // like this:
        .                   //
        .                   //     Real    |             Replicated
        .                   // ---------------------------------------------
        .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
        .                   // ---------------------------------------------
  428,433 ( 0.20%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
        .           
  142,811 ( 0.07%)          *self.ctrl(index) = ctrl;
  142,892 ( 0.07%)          *self.ctrl(index2) = ctrl;
        .               }
        .           
        .               /// Returns a pointer to a control byte.
        .               #[inline]
        .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
        .                   debug_assert!(index < self.num_ctrl_bytes());
        .                   self.ctrl.as_ptr().add(index)
        .               }
        .           
        .               #[inline]
        .               fn buckets(&self) -> usize {
   22,581 ( 0.01%)          self.bucket_mask + 1
        .               }
        .           
        .               #[inline]
        .               fn num_ctrl_bytes(&self) -> usize {
   23,696 ( 0.01%)          self.bucket_mask + 1 + Group::WIDTH
        .               }
        .           
        .               #[inline]
        .               fn is_empty_singleton(&self) -> bool {
   91,274 ( 0.04%)          self.bucket_mask == 0
        .               }
        .           
        .               #[allow(clippy::mut_mut)]
        .               #[inline]
        .               unsafe fn prepare_resize(
        .                   &self,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
        .                   debug_assert!(self.items <= capacity);
        .           
        .                   // Allocate and initialize the new table.
      765 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
        .                       self.alloc.clone(),
        .                       table_layout,
        .                       capacity,
        .                       fallibility,
        .                   )?;
   11,278 ( 0.01%)          new_table.growth_left -= self.items;
        .                   new_table.items = self.items;
        .           
        .                   // The hash function may panic, in which case we simply free the new
        .                   // table without dropping any elements that may have been copied into
        .                   // it.
        .                   //
        .                   // This guard is also used to free the old table on success, see
        .                   // the comment at the bottom of this function.
        .                   Ok(guard(new_table, move |self_| {
    4,870 ( 0.00%)              if !self_.is_empty_singleton() {
        .                           self_.free_buckets(table_layout);
        .                       }
        .                   }))
        .               }
        .           
        .               /// Reserves or rehashes to make room for `additional` more elements.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .                   drop: Option<fn(*mut u8)>,
        .               ) -> Result<(), TryReserveError> {
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
    9,740 ( 0.00%)          let new_items = match self.items.checked_add(additional) {
        .                       Some(new_items) => new_items,
        .                       None => return Err(fallibility.capacity_overflow()),
        .                   };
    9,740 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
   20,530 ( 0.01%)          if new_items <= full_capacity / 2 {
        .                       // Rehash in-place without re-allocating if we have plenty of spare
        .                       // capacity that is locked up due to DELETED entries.
        .                       self.rehash_in_place(hasher, layout.size, drop);
        .                       Ok(())
        .                   } else {
        .                       // Otherwise, conservatively resize to at least the next size up
        .                       // to avoid churning deletes into frequent rehashes.
        .                       self.resize_inner(
    4,870 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
        .                           hasher,
        .                           fallibility,
        .                           layout,
        .                       )
        .                   }
        .               }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
        .               #[inline(always)]
        .               unsafe fn resize_inner(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .               ) -> Result<(), TryReserveError> {
    1,884 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
        .           
        .                   // Copy all elements to the new table.
        .                   for i in 0..self.buckets() {
   84,813 ( 0.04%)              if !is_full(*self.ctrl(i)) {
        .                           continue;
        .                       }
        .           
        .                       // This may panic.
        .                       let hash = hasher(self, i);
        .           
        .                       // We can use a simpler version of insert() here since:
        .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
        .                   }
        .           
        .                   // We successfully copied all elements without panicking. Now replace
        .                   // self with the new table. The old table will have its memory freed but
        .                   // the items will not be dropped (since they have been moved into the
        .                   // new table).
        .                   mem::swap(self, &mut new_table);
        .           
    4,870 ( 0.00%)          Ok(())
        .               }
        .           
        .               /// Rehashes the contents of the table in place (i.e. without changing the
        .               /// allocation).
        .               ///
        .               /// If `hasher` panics then some the table's contents may be lost.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1554 ----------------------------------------
        .               #[inline]
        .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
        .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
        .                       Some(lco) => lco,
        .                       None => hint::unreachable_unchecked(),
        .                   };
        .                   self.alloc.deallocate(
    3,001 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
        .                       layout,
        .                   );
        .               }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[inline]
        .               fn clear_no_drop(&mut self) {
    1,179 ( 0.00%)          if !self.is_empty_singleton() {
        .                       unsafe {
        .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
        .                       }
        .                   }
    1,621 ( 0.00%)          self.items = 0;
    1,179 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
        .               }
        .           
        .               #[inline]
        .               unsafe fn erase(&mut self, index: usize) {
        .                   debug_assert!(is_full(*self.ctrl(index)));
   11,398 ( 0.01%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
        .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
        .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
        .           
        .                   // If we are inside a continuous block of Group::WIDTH full or deleted
        .                   // cells then a probe window may have seen a full block when trying to
        .                   // insert. We therefore need to keep that block non-empty so that
        .                   // lookups will continue searching to the next probe window.
        .                   //
        .                   // Note that in this context `leading_zeros` refers to the bytes at the
        .                   // end of a group, while `trailing_zeros` refers to the bytes at the
        .                   // beginning of a group.
   45,592 ( 0.02%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
        .                       DELETED
        .                   } else {
   56,610 ( 0.03%)              self.growth_left += 1;
        .                       EMPTY
        .                   };
        .                   self.set_ctrl(index, ctrl);
   45,592 ( 0.02%)          self.items -= 1;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
   25,904 ( 0.01%)      fn clone(&self) -> Self {
    3,239 ( 0.00%)          if self.table.is_empty_singleton() {
        .                       Self::new_in(self.table.alloc.clone())
        .                   } else {
        .                       unsafe {
        .                           let mut new_table = ManuallyDrop::new(
        .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
        .                               match Self::new_uninitialized(
        .                                   self.table.alloc.clone(),
        .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
        .                               // We need to free the memory allocated for the new table.
        .                               new_table.free_buckets();
        .                           });
        .           
        .                           // Return the newly created table.
        .                           ManuallyDrop::into_inner(new_table)
        .                       }
        .                   }
   29,142 ( 0.01%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   if source.table.is_empty_singleton() {
        .                       *self = Self::new_in(self.table.alloc.clone());
        .                   } else {
        .                       unsafe {
        .                           // First, drop all our elements without clearing the control bytes.
        .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
        .                       .table
        .                       .ctrl(0)
        .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
        .                   source
        .                       .data_start()
        .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
        .           
        .                   self.table.items = source.table.items;
        8 ( 0.00%)          self.table.growth_left = source.table.growth_left;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
        .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
        .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
        .               fn default() -> Self {
        .                   Self::new_in(Default::default())
        .               }
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
   77,373 ( 0.04%)      fn drop(&mut self) {
   35,245 ( 0.02%)          if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
        .                           self.free_buckets();
        .                       }
        .                   }
   83,086 ( 0.04%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
        .               type Item = T;
        .               type IntoIter = RawIntoIter<T, A>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
      496 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
        .                   unsafe {
        .                       let iter = self.iter();
        .                       self.into_iter_from(iter)
        .                   }
      620 ( 0.00%)      }
        .           }
        .           
        .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
        .           /// not track an item count.
        .           pub(crate) struct RawIterRange<T> {
        .               // Mask of full buckets in the current group. Bits are cleared from this
        .               // mask as each element is processed.
        .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
        .           
        .           impl<T> Iterator for RawIterRange<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<Bucket<T>> {
        .                   unsafe {
        .                       loop {
   20,563 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    2,558 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    3,378 ( 0.00%)                      return Some(self.data.next_n(index));
        .                           }
        .           
   16,890 ( 0.01%)                  if self.next_ctrl >= self.end {
        .                               return None;
        .                           }
        .           
        .                           // We might read past self.end up to the next group boundary,
        .                           // but this is fine because it only occurs on tables smaller
        .                           // than the group size where the trailing control bytes are all
        .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
        .                           // to the group size (since tables are power-of-two sized).
      835 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
      258 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
    1,306 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
        .                       }
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   // We don't have an item count, so just guess based on the range size.
        .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
        .                           }
        .                       } else {
        .                           // We must have already iterated past the removed item.
        .                       }
        .                   }
        .               }
        .           
        .               unsafe fn drop_elements(&mut self) {
    1,529 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
        .                       for item in self {
        .                           item.drop();
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Iterator for RawIter<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
    2,228 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
    5,144 ( 0.00%)          if let Some(b) = self.iter.next() {
   35,917 ( 0.02%)              self.items -= 1;
        .                       Some(b)
        .                   } else {
        .                       // We don't check against items == 0 here to allow the
        .                       // compiler to optimize away the item count entirely if the
        .                       // iterator length is never queried.
        .                       debug_assert_eq!(self.items, 0);
        .                       None
        .                   }
    4,456 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   (self.items, Some(self.items))
        .               }
        .           }
        .           
        .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
      526 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
        .           
        .                       // Free the table
      593 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
        .                           self.alloc.deallocate(ptr, layout);
        .                       }
        .                   }
      178 ( 0.00%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
       10 ( 0.00%)      fn next(&mut self) -> Option<T> {
        3 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
       20 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        2 ( 0.00%)          self.iter.size_hint()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
        .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
        .           
        .           /// Iterator which consumes elements without freeing the table storage.
        .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
        .           where
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
    3,336 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements. Note that this may panic.
        .                       self.iter.drop_elements();
        .           
        .                       // Reset the contents of the table now that all elements have been
        .                       // dropped.
        .                       self.table.clear_no_drop();
        .           
        .                       // Move the now empty table back to its original location.
      417 ( 0.00%)              self.orig_table
        .                           .as_ptr()
        .                           .copy_from_nonoverlapping(&*self.table, 1);
        .                   }
    3,336 ( 0.00%)      }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<T> {
        .                   unsafe {
-- line 2289 ----------------------------------------

1,085,883 ( 0.50%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/macro_parser.rs
--------------------------------------------------------------------------------
Ir               

-- line 90 ----------------------------------------
      .           use std::collections::hash_map::Entry::{Occupied, Vacant};
      .           use std::mem;
      .           use std::ops::{Deref, DerefMut};
      .           
      .           // To avoid costly uniqueness checks, we require that `MatchSeq` always has a nonempty body.
      .           
      .           /// Either a sequence of token trees or a single one. This is used as the representation of the
      .           /// sequence of tokens that make up a matcher.
 26,591 ( 0.01%)  #[derive(Clone)]
      .           enum TokenTreeOrTokenTreeSlice<'tt> {
     36 ( 0.00%)      Tt(TokenTree),
  6,487 ( 0.00%)      TtSeq(&'tt [TokenTree]),
      .           }
      .           
      .           impl<'tt> TokenTreeOrTokenTreeSlice<'tt> {
      .               /// Returns the number of constituent top-level token trees of `self` (top-level in that it
      .               /// will not recursively descend into subtrees).
      .               fn len(&self) -> usize {
111,749 ( 0.05%)          match *self {
 20,686 ( 0.01%)              TtSeq(ref v) => v.len(),
      .                       Tt(ref tt) => tt.len(),
      .                   }
      .               }
      .           
      .               /// The `index`-th token tree of `self`.
      .               fn get_tt(&self, index: usize) -> TokenTree {
 23,124 ( 0.01%)          match *self {
 62,584 ( 0.03%)              TtSeq(ref v) => v[index].clone(),
 32,435 ( 0.01%)              Tt(ref tt) => tt.get_tt(index),
      .                   }
      .               }
      .           }
      .           
      .           /// An unzipping of `TokenTree`s... see the `stack` field of `MatcherPos`.
      .           ///
      .           /// This is used by `inner_parse_loop` to keep track of delimited submatchers that we have
      .           /// descended into.
  3,992 ( 0.00%)  #[derive(Clone)]
      .           struct MatcherTtFrame<'tt> {
      .               /// The "parent" matcher that we are descending into.
      .               elts: TokenTreeOrTokenTreeSlice<'tt>,
      .               /// The position of the "dot" in `elts` at the time we descended.
  1,996 ( 0.00%)      idx: usize,
      .           }
      .           
      .           type NamedMatchVec = SmallVec<[NamedMatch; 4]>;
      .           
      .           /// Represents a single "position" (aka "matcher position", aka "item"), as
      .           /// described in the module documentation.
      .           ///
      .           /// Here:
-- line 140 ----------------------------------------
-- line 147 ----------------------------------------
      .           ///   position refers to.
      .           ///
      .           /// It is important to distinguish these two lifetimes because we have a
      .           /// `SmallVec<TokenTreeOrTokenTreeSlice<'tt>>` below, and the destructor of
      .           /// that is considered to possibly access the data from its elements (it lacks
      .           /// a `#[may_dangle]` attribute). As a result, the compiler needs to know that
      .           /// all the elements in that `SmallVec` strictly outlive the root stack slot
      .           /// lifetime. By separating `'tt` from `'root`, we can show that.
118,393 ( 0.05%)  #[derive(Clone)]
      .           struct MatcherPos<'root, 'tt> {
      .               /// The token or sequence of tokens that make up the matcher
      .               top_elts: TokenTreeOrTokenTreeSlice<'tt>,
      .           
      .               /// The position of the "dot" in this matcher
  2,519 ( 0.00%)      idx: usize,
      .           
      .               /// For each named metavar in the matcher, we keep track of token trees matched against the
      .               /// metavar by the black box parser. In particular, there may be more than one match per
      .               /// metavar if we are in a repetition (each repetition matches each of the variables).
      .               /// Moreover, matchers and repetitions can be nested; the `matches` field is shared (hence the
      .               /// `Rc`) among all "nested" matchers. `match_lo`, `match_cur`, and `match_hi` keep track of
      .               /// the current position of the `self` matcher position in the shared `matches` list.
      .               ///
      .               /// Also, note that while we are descending into a sequence, matchers are given their own
      .               /// `matches` vector. Only once we reach the end of a full repetition of the sequence do we add
      .               /// all bound matches from the submatcher into the shared top-level `matches` vector. If `sep`
      .               /// and `up` are `Some`, then `matches` is _not_ the shared top-level list. Instead, if one
      .               /// wants the shared `matches`, one should use `up.matches`.
 10,076 ( 0.00%)      matches: Box<[Lrc<NamedMatchVec>]>,
      .               /// The position in `matches` corresponding to the first metavar in this matcher's sequence of
      .               /// token trees. In other words, the first metavar in the first token of `top_elts` corresponds
      .               /// to `matches[match_lo]`.
  2,519 ( 0.00%)      match_lo: usize,
      .               /// The position in `matches` corresponding to the metavar we are currently trying to match
      .               /// against the source token stream. `match_lo <= match_cur <= match_hi`.
      .               match_cur: usize,
      .               /// Similar to `match_lo` except `match_hi` is the position in `matches` of the _last_ metavar
      .               /// in this matcher.
  2,519 ( 0.00%)      match_hi: usize,
      .           
      .               // The following fields are used if we are matching a repetition. If we aren't, they should be
      .               // `None`.
      .               /// The KleeneOp of this sequence if we are in a repetition.
  2,519 ( 0.00%)      seq_op: Option<mbe::KleeneOp>,
      .           
      .               /// The separator if we are in a repetition.
      .               sep: Option<Token>,
      .           
      .               /// The "parent" matcher position if we are in a repetition. That is, the matcher position just
      .               /// before we enter the sequence.
  5,038 ( 0.00%)      up: Option<MatcherPosHandle<'root, 'tt>>,
      .           
      .               /// Specifically used to "unzip" token trees. By "unzip", we mean to unwrap the delimiters from
      .               /// a delimited token tree (e.g., something wrapped in `(` `)`) or to get the contents of a doc
      .               /// comment...
      .               ///
      .               /// When matching against matchers with nested delimited submatchers (e.g., `pat ( pat ( .. )
      .               /// pat ) pat`), we need to keep track of the matchers we are descending into. This stack does
      .               /// that where the bottom of the stack is the outermost matcher.
      .               /// Also, throughout the comments, this "descent" is often referred to as "unzipping"...
      .               stack: SmallVec<[MatcherTtFrame<'tt>; 1]>,
      .           }
      .           
      .           impl<'root, 'tt> MatcherPos<'root, 'tt> {
      .               /// Adds `m` as a named match for the `idx`-th metavar.
      .               fn push_match(&mut self, idx: usize, m: NamedMatch) {
 43,052 ( 0.02%)          let matches = Lrc::make_mut(&mut self.matches[idx]);
      .                   matches.push(m);
      .               }
      .           }
      .           
      .           // Lots of MatcherPos instances are created at runtime. Allocating them on the
      .           // heap is slow. Furthermore, using SmallVec<MatcherPos> to allocate them all
      .           // on the stack is also slow, because MatcherPos is quite a large type and
      .           // instances get moved around a lot between vectors, which requires lots of
-- line 221 ----------------------------------------
-- line 226 ----------------------------------------
      .           // and this type is used to encapsulate both cases.
      .           enum MatcherPosHandle<'root, 'tt> {
      .               Ref(&'root mut MatcherPos<'root, 'tt>),
      .               Box(Box<MatcherPos<'root, 'tt>>),
      .           }
      .           
      .           impl<'root, 'tt> Clone for MatcherPosHandle<'root, 'tt> {
      .               // This always produces a new Box.
 10,076 ( 0.00%)      fn clone(&self) -> Self {
  5,038 ( 0.00%)          MatcherPosHandle::Box(match *self {
  2,538 ( 0.00%)              MatcherPosHandle::Ref(ref r) => Box::new((**r).clone()),
      .                       MatcherPosHandle::Box(ref b) => b.clone(),
      .                   })
 15,114 ( 0.01%)      }
      .           }
      .           
      .           impl<'root, 'tt> Deref for MatcherPosHandle<'root, 'tt> {
      .               type Target = MatcherPos<'root, 'tt>;
      .               fn deref(&self) -> &Self::Target {
      .                   match *self {
      .                       MatcherPosHandle::Ref(ref r) => r,
      .                       MatcherPosHandle::Box(ref b) => b,
-- line 247 ----------------------------------------
-- line 272 ----------------------------------------
      .           
      .           /// A `ParseResult` where the `Success` variant contains a mapping of
      .           /// `MacroRulesNormalizedIdent`s to `NamedMatch`es. This represents the mapping
      .           /// of metavars to the token trees they bind to.
      .           crate type NamedParseResult = ParseResult<FxHashMap<MacroRulesNormalizedIdent, NamedMatch>>;
      .           
      .           /// Count how many metavars are named in the given matcher `ms`.
      .           pub(super) fn count_names(ms: &[TokenTree]) -> usize {
 62,136 ( 0.03%)      ms.iter().fold(0, |count, elt| {
 31,068 ( 0.01%)          count
 93,204 ( 0.04%)              + match *elt {
  2,554 ( 0.00%)                  TokenTree::Sequence(_, ref seq) => seq.num_captures,
  2,139 ( 0.00%)                  TokenTree::Delimited(_, ref delim) => count_names(&delim.tts),
      .                           TokenTree::MetaVar(..) => 0,
      .                           TokenTree::MetaVarDecl(..) => 1,
      .                           TokenTree::Token(..) => 0,
      .                       }
 77,670 ( 0.04%)      })
      .           }
      .           
      .           /// `len` `Vec`s (initially shared and empty) that will store matches of metavars.
      .           fn create_matches(len: usize) -> Box<[Lrc<NamedMatchVec>]> {
  9,254 ( 0.00%)      if len == 0 {
      .                   vec![]
      .               } else {
      .                   let empty_matches = Lrc::new(SmallVec::new());
      .                   vec![empty_matches; len]
      .               }
      .               .into_boxed_slice()
      .           }
      .           
      .           /// Generates the top-level matcher position in which the "dot" is before the first token of the
      .           /// matcher `ms`.
      .           fn initial_matcher_pos<'root, 'tt>(ms: &'tt [TokenTree]) -> MatcherPos<'root, 'tt> {
      .               let match_idx_hi = count_names(ms);
      .               let matches = create_matches(match_idx_hi);
 42,540 ( 0.02%)      MatcherPos {
      .                   // Start with the top level matcher given to us
      .                   top_elts: TtSeq(ms), // "elts" is an abbr. for "elements"
      .                   // The "dot" is before the first token of the matcher
      .                   idx: 0,
      .           
      .                   // Initialize `matches` to a bunch of empty `Vec`s -- one for each metavar in `top_elts`.
      .                   // `match_lo` for `top_elts` is 0 and `match_hi` is `matches.len()`. `match_cur` is 0 since
      .                   // we haven't actually matched anything yet.
-- line 316 ----------------------------------------
-- line 340 ----------------------------------------
      .           /// particular token tree.
      .           ///
      .           /// The width of each `MatchedSeq` in the `NamedMatch`, and the identity of
      .           /// the `MatchedNonterminal`s, will depend on the token tree it was applied
      .           /// to: each `MatchedSeq` corresponds to a single `TTSeq` in the originating
      .           /// token tree. The depth of the `NamedMatch` structure will therefore depend
      .           /// only on the nesting depth of `ast::TTSeq`s in the originating
      .           /// token tree it was derived from.
    380 ( 0.00%)  #[derive(Debug, Clone)]
      .           crate enum NamedMatch {
      .               MatchedSeq(Lrc<NamedMatchVec>),
      .               MatchedNonterminal(Lrc<Nonterminal>),
      .           }
      .           
      .           /// Takes a sequence of token trees `ms` representing a matcher which successfully matched input
      .           /// and an iterator of items that matched input and produces a `NamedParseResult`.
      .           fn nameize<I: Iterator<Item = NamedMatch>>(
-- line 356 ----------------------------------------
-- line 357 ----------------------------------------
      .               sess: &ParseSess,
      .               ms: &[TokenTree],
      .               mut res: I,
      .           ) -> NamedParseResult {
      .               // Recursively descend into each type of matcher (e.g., sequences, delimited, metavars) and make
      .               // sure that each metavar has _exactly one_ binding. If a metavar does not have exactly one
      .               // binding, then there is an error. If it does, then we insert the binding into the
      .               // `NamedParseResult`.
 34,485 ( 0.02%)      fn n_rec<I: Iterator<Item = NamedMatch>>(
      .                   sess: &ParseSess,
      .                   m: &TokenTree,
      .                   res: &mut I,
      .                   ret_val: &mut FxHashMap<MacroRulesNormalizedIdent, NamedMatch>,
      .               ) -> Result<(), (rustc_span::Span, String)> {
 20,081 ( 0.01%)          match *m {
      .                       TokenTree::Sequence(_, ref seq) => {
    302 ( 0.00%)                  for next_m in &seq.tts {
  2,004 ( 0.00%)                      n_rec(sess, next_m, res.by_ref(), ret_val)?
      .                           }
      .                       }
      .                       TokenTree::Delimited(_, ref delim) => {
    317 ( 0.00%)                  for next_m in &delim.tts {
  1,902 ( 0.00%)                      n_rec(sess, next_m, res.by_ref(), ret_val)?;
      .                           }
      .                       }
      .                       TokenTree::MetaVarDecl(span, _, None) => {
      .                           if sess.missing_fragment_specifiers.borrow_mut().remove(&span).is_some() {
      .                               return Err((span, "missing fragment specifier".to_string()));
      .                           }
      .                       }
 13,218 ( 0.01%)              TokenTree::MetaVarDecl(sp, bind_name, _) => match ret_val
  8,812 ( 0.00%)                  .entry(MacroRulesNormalizedIdent::new(bind_name))
      .                       {
      .                           Vacant(spot) => {
      .                               spot.insert(res.next().unwrap());
      .                           }
      .                           Occupied(..) => return Err((sp, format!("duplicated bind name: {}", bind_name))),
      .                       },
      .                       TokenTree::MetaVar(..) | TokenTree::Token(..) => (),
      .                   }
      .           
  3,135 ( 0.00%)          Ok(())
 25,080 ( 0.01%)      }
      .           
      .               let mut ret_val = FxHashMap::default();
      .               for m in ms {
 22,012 ( 0.01%)          match n_rec(sess, m, res.by_ref(), &mut ret_val) {
      .                       Ok(_) => {}
      .                       Err((sp, msg)) => return Error(sp, msg),
      .                   }
      .               }
      .           
  3,888 ( 0.00%)      Success(ret_val)
      .           }
      .           
      .           /// Performs a token equality check, ignoring syntax context (that is, an unhygienic comparison)
      .           fn token_name_eq(t1: &Token, t2: &Token) -> bool {
 30,105 ( 0.01%)      if let (Some((ident1, is_raw1)), Some((ident2, is_raw2))) = (t1.ident(), t2.ident()) {
      .                   ident1.name == ident2.name && is_raw1 == is_raw2
 42,147 ( 0.02%)      } else if let (Some(ident1), Some(ident2)) = (t1.lifetime(), t2.lifetime()) {
      .                   ident1.name == ident2.name
      .               } else {
 17,977 ( 0.01%)          t1.kind == t2.kind
      .               }
      .           }
      .           
      .           /// Process the matcher positions of `cur_items` until it is empty. In the process, this will
      .           /// produce more items in `next_items`, `eof_items`, and `bb_items`.
      .           ///
      .           /// For more info about the how this happens, see the module-level doc comments and the inline
      .           /// comments of this function.
-- line 427 ----------------------------------------
-- line 443 ----------------------------------------
      .               sess: &ParseSess,
      .               cur_items: &mut SmallVec<[MatcherPosHandle<'root, 'tt>; 1]>,
      .               next_items: &mut Vec<MatcherPosHandle<'root, 'tt>>,
      .               eof_items: &mut SmallVec<[MatcherPosHandle<'root, 'tt>; 1]>,
      .               bb_items: &mut SmallVec<[MatcherPosHandle<'root, 'tt>; 1]>,
      .               token: &Token,
      .           ) -> ParseResult<()> {
      .               // Pop items from `cur_items` until it is empty.
 76,068 ( 0.04%)      while let Some(mut item) = cur_items.pop() {
      .                   // When unzipped trees end, remove them. This corresponds to backtracking out of a
      .                   // delimited submatcher into which we already descended. In backtracking out again, we need
      .                   // to advance the "dot" past the delimiters in the outer matcher.
235,432 ( 0.11%)          while item.idx >= item.top_elts.len() {
    770 ( 0.00%)              match item.stack.pop() {
      .                           Some(MatcherTtFrame { elts, idx }) => {
  3,465 ( 0.00%)                      item.top_elts = elts;
  1,540 ( 0.00%)                      item.idx = idx + 1;
      .                           }
      .                           None => break,
      .                       }
      .                   }
      .           
      .                   // Get the current position of the "dot" (`idx`) in `item` and the number of token trees in
      .                   // the matcher (`len`).
      .                   let idx = item.idx;
      .                   let len = item.top_elts.len();
      .           
      .                   // If `idx >= len`, then we are at or past the end of the matcher of `item`.
 49,764 ( 0.02%)          if idx >= len {
      .                       // We are repeating iff there is a parent. If the matcher is inside of a repetition,
      .                       // then we could be at the end of a sequence or at the beginning of the next
      .                       // repetition.
  3,045 ( 0.00%)              if item.up.is_some() {
      .                           // At this point, regardless of whether there is a separator, we should add all
      .                           // matches from the complete repetition of the sequence to the shared, top-level
      .                           // `matches` list (actually, `up.matches`, which could itself not be the top-level,
      .                           // but anyway...). Moreover, we add another item to `cur_items` in which the "dot"
      .                           // is at the end of the `up` matcher. This ensures that the "dot" in the `up`
      .                           // matcher is also advanced sufficiently.
      .                           //
      .                           // NOTE: removing the condition `idx == len` allows trailing separators.
  4,432 ( 0.00%)                  if idx == len {
      .                               // Get the `up` matcher
      .                               let mut new_pos = item.up.clone().unwrap();
      .           
      .                               // Add matches from this repetition to the `matches` of `up`
  4,262 ( 0.00%)                      for idx in item.match_lo..item.match_hi {
 10,650 ( 0.00%)                          let sub = item.matches[idx].clone();
  6,390 ( 0.00%)                          new_pos.push_match(idx, MatchedSeq(sub));
      .                               }
      .           
      .                               // Move the "dot" past the repetition in `up`
  4,175 ( 0.00%)                      new_pos.match_cur = item.match_hi;
 12,786 ( 0.01%)                      new_pos.idx += 1;
      .                               cur_items.push(new_pos);
      .                           }
      .           
      .                           // Check if we need a separator.
  2,131 ( 0.00%)                  if idx == len && item.sep.is_some() {
      .                               // We have a separator, and it is the current token. We can advance past the
      .                               // separator token.
    172 ( 0.00%)                      if item.sep.as_ref().map_or(false, |sep| token_name_eq(token, sep)) {
    595 ( 0.00%)                          item.idx += 1;
      .                                   next_items.push(item);
      .                               }
      .                           }
      .                           // We don't need a separator. Move the "dot" back to the beginning of the matcher
      .                           // and try to match again UNLESS we are only allowed to have _one_ repetition.
  2,130 ( 0.00%)                  else if item.seq_op != Some(mbe::KleeneOp::ZeroOrOne) {
  4,256 ( 0.00%)                      item.match_cur = item.match_lo;
  8,512 ( 0.00%)                      item.idx = 0;
      .                               cur_items.push(item);
      .                           }
      .                       }
      .                       // If we are not in a repetition, then being at the end of a matcher means that we have
      .                       // reached the potential end of the input.
      .                       else {
      .                           eof_items.push(item);
      .                       }
      .                   }
      .                   // We are in the middle of a matcher.
      .                   else {
      .                       // Look at what token in the matcher we are trying to match the current token (`token`)
      .                       // against. Depending on that, we may generate new items.
 83,352 ( 0.04%)              match item.top_elts.get_tt(idx) {
      .                           // Need to descend into a sequence
  1,872 ( 0.00%)                  TokenTree::Sequence(sp, seq) => {
      .                               // Examine the case where there are 0 matches of this sequence. We are
      .                               // implicitly disallowing OneOrMore from having 0 matches here. Thus, that will
      .                               // result in a "no rules expected token" error by virtue of this matcher not
      .                               // working.
    812 ( 0.00%)                      if seq.kleene.op == mbe::KleeneOp::ZeroOrMore
      .                                   || seq.kleene.op == mbe::KleeneOp::ZeroOrOne
      .                               {
    776 ( 0.00%)                          let mut new_item = item.clone();
  1,552 ( 0.00%)                          new_item.match_cur += seq.num_captures;
  1,940 ( 0.00%)                          new_item.idx += 1;
  2,328 ( 0.00%)                          for idx in item.match_cur..item.match_cur + seq.num_captures {
    900 ( 0.00%)                              new_item.push_match(idx, MatchedSeq(Lrc::new(smallvec![])));
      .                                   }
      .                                   cur_items.push(new_item);
      .                               }
      .           
    406 ( 0.00%)                      let matches = create_matches(item.matches.len());
  4,872 ( 0.00%)                      cur_items.push(MatcherPosHandle::Box(Box::new(MatcherPos {
    406 ( 0.00%)                          stack: smallvec![],
      .                                   sep: seq.separator.clone(),
    406 ( 0.00%)                          seq_op: Some(seq.kleene.op),
      .                                   idx: 0,
  2,030 ( 0.00%)                          matches,
    812 ( 0.00%)                          match_lo: item.match_cur,
      .                                   match_cur: item.match_cur,
    812 ( 0.00%)                          match_hi: item.match_cur + seq.num_captures,
      .                                   up: Some(item),
  2,842 ( 0.00%)                          top_elts: Tt(TokenTree::Sequence(sp, seq)),
      .                               })));
      .                           }
      .           
      .                           // We need to match a metavar (but the identifier is invalid)... this is an error
      .                           TokenTree::MetaVarDecl(span, _, None) => {
      .                               if sess.missing_fragment_specifiers.borrow_mut().remove(&span).is_some() {
      .                                   return Error(span, "missing fragment specifier".to_string());
      .                               }
-- line 565 ----------------------------------------
-- line 568 ----------------------------------------
      .                           // We need to match a metavar with a valid ident... call out to the black-box
      .                           // parser by adding an item to `bb_items`.
      .                           TokenTree::MetaVarDecl(_, _, Some(kind)) => {
      .                               // Built-in nonterminals never start with these tokens, so we can eliminate
      .                               // them from consideration.
      .                               //
      .                               // We use the span of the metavariable declaration to determine any
      .                               // edition-specific matching behavior for non-terminals.
 43,250 ( 0.02%)                      if Parser::nonterminal_may_begin_with(kind, token) {
      .                                   bb_items.push(item);
      .                               }
      .                           }
      .           
      .                           // We need to descend into a delimited submatcher or a doc comment. To do this, we
      .                           // push the current matcher onto a stack and push a new item containing the
      .                           // submatcher onto `cur_items`.
      .                           //
      .                           // At the beginning of the loop, if we reach the end of the delimited submatcher,
      .                           // we pop the stack to backtrack out of the descent.
  4,905 ( 0.00%)                  seq @ (TokenTree::Delimited(..)
      .                           | TokenTree::Token(Token { kind: DocComment(..), .. })) => {
      .                               let lower_elts = mem::replace(&mut item.top_elts, Tt(seq));
    981 ( 0.00%)                      let idx = item.idx;
  6,867 ( 0.00%)                      item.stack.push(MatcherTtFrame { elts: lower_elts, idx });
  3,924 ( 0.00%)                      item.idx = 0;
      .                               cur_items.push(item);
      .                           }
      .           
      .                           // We just matched a normal token. We can just advance the parser.
 20,515 ( 0.01%)                  TokenTree::Token(t) if token_name_eq(&t, token) => {
 12,103 ( 0.01%)                      item.idx += 1;
      .                               next_items.push(item);
      .                           }
      .           
      .                           // There was another token that was not `token`... This means we can't add any
      .                           // rules. NOTE that this is not necessarily an error unless _all_ items in
      .                           // `cur_items` end up doing this. There may still be some other matchers that do
      .                           // end up working out.
      .                           TokenTree::Token(..) | TokenTree::MetaVar(..) => {}
      .                       }
 80,890 ( 0.04%)          }
 29,982 ( 0.01%)      }
      .           
      .               // Yay a successful parse (so far)!
      .               Success(())
      .           }
      .           
      .           /// Use the given sequence of token trees (`ms`) as a matcher. Match the token
      .           /// stream from the given `parser` against it and return the match.
 28,360 ( 0.01%)  pub(super) fn parse_tt(
      .               parser: &mut Cow<'_, Parser<'_>>,
      .               ms: &[TokenTree],
      .               macro_name: Ident,
      .           ) -> NamedParseResult {
      .               // A queue of possible matcher positions. We initialize it with the matcher position in which
      .               // the "dot" is before the first token of the first token tree in `ms`. `inner_parse_loop` then
      .               // processes all of these possible matcher positions and produces possible next positions into
      .               // `next_items`. After some post-processing, the contents of `next_items` replenish `cur_items`
      .               // and we start over again.
      .               //
      .               // This MatcherPos instance is allocated on the stack. All others -- and
      .               // there are frequently *no* others! -- are allocated on the heap.
      .               let mut initial = initial_matcher_pos(ms);
 14,180 ( 0.01%)      let mut cur_items = smallvec![MatcherPosHandle::Ref(&mut initial)];
      .               let mut next_items = Vec::new();
      .           
      .               loop {
      .                   // Matcher positions black-box parsed by parser.rs (`parser`)
      .                   let mut bb_items = SmallVec::new();
      .           
      .                   // Matcher positions that would be valid if the macro invocation was over now
      .                   let mut eof_items = SmallVec::new();
 12,898 ( 0.01%)          assert!(next_items.is_empty());
      .           
      .                   // Process `cur_items` until either we have finished the input or we need to get some
      .                   // parsing from the black-box parser done. The result is that `next_items` will contain a
      .                   // bunch of possible next matcher positions in `next_items`.
      .                   match inner_parse_loop(
      .                       parser.sess,
      .                       &mut cur_items,
      .                       &mut next_items,
-- line 648 ----------------------------------------
-- line 652 ----------------------------------------
      .                   ) {
      .                       Success(_) => {}
      .                       Failure(token, msg) => return Failure(token, msg),
      .                       Error(sp, msg) => return Error(sp, msg),
      .                       ErrorReported => return ErrorReported,
      .                   }
      .           
      .                   // inner parse loop handled all cur_items, so it's empty
 12,898 ( 0.01%)          assert!(cur_items.is_empty());
      .           
      .                   // We need to do some post processing after the `inner_parser_loop`.
      .                   //
      .                   // Error messages here could be improved with links to original rules.
      .           
      .                   // If we reached the EOF, check that there is EXACTLY ONE possible matcher. Otherwise,
      .                   // either the parse is ambiguous (which should never happen) or there is a syntax error.
 64,490 ( 0.03%)          if parser.token == token::Eof {
  1,728 ( 0.00%)              if eof_items.len() == 1 {
      .                           let matches =
  3,067 ( 0.00%)                      eof_items[0].matches.iter_mut().map(|dv| Lrc::make_mut(dv).pop().unwrap());
  1,296 ( 0.00%)                  return nameize(parser.sess, ms, matches);
      .                       } else if eof_items.len() > 1 {
      .                           return Error(
      .                               parser.token.span,
      .                               "ambiguity: multiple successful parses".to_string(),
      .                           );
      .                       } else {
      .                           return Failure(
      .                               Token::new(
-- line 680 ----------------------------------------
-- line 687 ----------------------------------------
      .                               ),
      .                               "missing tokens in macro arguments",
      .                           );
      .                       }
      .                   }
      .                   // Performance hack: eof_items may share matchers via Rc with other things that we want
      .                   // to modify. Dropping eof_items now may drop these refcounts to 1, preventing an
      .                   // unnecessary implicit clone later in Rc::make_mut.
 49,864 ( 0.02%)          drop(eof_items);
      .           
      .                   // If there are no possible next positions AND we aren't waiting for the black-box parser,
      .                   // then there is a syntax error.
 41,531 ( 0.02%)          if bb_items.is_empty() && next_items.is_empty() {
 31,252 ( 0.01%)              return Failure(parser.token.clone(), "no rules expected this token in macro call");
      .                   }
      .                   // Another possibility is that we need to call out to parse some rust nonterminal
      .                   // (black-box) parser. However, if there is not EXACTLY ONE of these, something is wrong.
 33,332 ( 0.02%)          else if (!bb_items.is_empty() && !next_items.is_empty()) || bb_items.len() > 1 {
      .                       let nts = bb_items
      .                           .iter()
      .                           .map(|item| match item.top_elts.get_tt(item.idx) {
      .                               TokenTree::MetaVarDecl(_, bind, Some(kind)) => format!("{} ('{}')", kind, bind),
      .                               _ => panic!(),
      .                           })
      .                           .collect::<Vec<String>>()
      .                           .join(" or ");
-- line 712 ----------------------------------------
-- line 721 ----------------------------------------
      .                                   n => format!("built-in NTs {} or {} other options.", nts, n),
      .                               }
      .                           ),
      .                       );
      .                   }
      .                   // Dump all possible `next_items` into `cur_items` for the next iteration.
      .                   else if !next_items.is_empty() {
      .                       // Now process the next token
  5,187 ( 0.00%)              cur_items.extend(next_items.drain(..));
  1,729 ( 0.00%)              parser.to_mut().bump();
      .                   }
      .                   // Finally, we have the case where we need to call the black-box parser to get some
      .                   // nonterminal.
      .                   else {
      .                       assert_eq!(bb_items.len(), 1);
      .           
 16,666 ( 0.01%)              let mut item = bb_items.pop().unwrap();
 48,268 ( 0.02%)              if let TokenTree::MetaVarDecl(span, _, Some(kind)) = item.top_elts.get_tt(item.idx) {
  8,333 ( 0.00%)                  let match_cur = item.match_cur;
      .                           // We use the span of the metavariable declaration to determine any
      .                           // edition-specific matching behavior for non-terminals.
 52,810 ( 0.02%)                  let nt = match parser.to_mut().parse_nonterminal(kind) {
      .                               Err(mut err) => {
      .                                   err.span_label(
      .                                       span,
      .                                       format!("while parsing argument for this `{}` macro fragment", kind),
      .                                   )
      .                                   .emit();
      .                                   return ErrorReported;
      .                               }
 49,998 ( 0.02%)                      Ok(nt) => nt,
      .                           };
 33,332 ( 0.02%)                  item.push_match(match_cur, MatchedNonterminal(Lrc::new(nt)));
 33,332 ( 0.02%)                  item.idx += 1;
 49,998 ( 0.02%)                  item.match_cur += 1;
      .                       } else {
      .                           unreachable!()
      .                       }
      .                       cur_items.push(item);
      .                   }
      .           
 20,124 ( 0.01%)          assert!(!cur_items.is_empty());
      .               }
 25,524 ( 0.01%)  }

311,223 ( 0.14%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/macro_parser.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs
--------------------------------------------------------------------------------
Ir               

-- line 26 ----------------------------------------
      .               /// }
      .               ///
      .               /// assert_eq!(letters[&'s'], 2);
      .               /// assert_eq!(letters[&'t'], 3);
      .               /// assert_eq!(letters[&'u'], 1);
      .               /// assert_eq!(letters.get(&'y'), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
483,548 ( 0.22%)      pub fn rustc_entry(&mut self, key: K) -> RustcEntry<'_, K, V, A> {
      .                   let hash = make_insert_hash(&self.hash_builder, &key);
    191 ( 0.00%)          if let Some(elem) = self.table.find(hash, |q| q.0.eq(&key)) {
 42,541 ( 0.02%)              RustcEntry::Occupied(RustcOccupiedEntry {
 91,692 ( 0.04%)                  key: Some(key),
      .                           elem,
      .                           table: &mut self.table,
      .                       })
      .                   } else {
      .                       // Ideally we would put this in VacantEntry::insert, but Entry is not
      .                       // generic over the BuildHasher and adding a generic parameter would be
      .                       // a breaking change.
      .                       self.reserve(1);
      .           
 64,898 ( 0.03%)              RustcEntry::Vacant(RustcVacantEntry {
      .                           hash,
 22,348 ( 0.01%)                  key,
      .                           table: &mut self.table,
      .                       })
      .                   }
320,484 ( 0.15%)      }
      .           }
      .           
      .           /// A view into a single entry in a map, which may either be vacant or occupied.
      .           ///
      .           /// This `enum` is constructed from the [`entry`] method on [`HashMap`].
      .           ///
      .           /// [`HashMap`]: struct.HashMap.html
      .           /// [`entry`]: struct.HashMap.html#method.rustc_entry
-- line 62 ----------------------------------------
-- line 405 ----------------------------------------
      .               /// if let RustcEntry::Occupied(o) = map.rustc_entry("poneyland") {
      .               ///     *o.into_mut() += 10;
      .               /// }
      .               ///
      .               /// assert_eq!(map["poneyland"], 22);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn into_mut(self) -> &'a mut V {
  4,295 ( 0.00%)          unsafe { &mut self.elem.as_mut().1 }
      .               }
      .           
      .               /// Sets the value of the entry, and returns the entry's old value.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 421 ----------------------------------------
-- line 568 ----------------------------------------
      .               /// let mut map: HashMap<&str, u32> = HashMap::new();
      .               ///
      .               /// if let RustcEntry::Vacant(o) = map.rustc_entry("poneyland") {
      .               ///     o.insert(37);
      .               /// }
      .               /// assert_eq!(map["poneyland"], 37);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
  1,774 ( 0.00%)      pub fn insert(self, value: V) -> &'a mut V {
      .                   unsafe {
 21,777 ( 0.01%)              let bucket = self.table.insert_no_grow(self.hash, (self.key, value));
    523 ( 0.00%)              &mut bucket.as_mut().1
      .                   }
  2,315 ( 0.00%)      }
      .           
      .               /// Sets the value of the entry with the RustcVacantEntry's key,
      .               /// and returns a RustcOccupiedEntry.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 589 ----------------------------------------

 92,114 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 141 ----------------------------------------
      .               /// ```
      .               /// let a = [1, 2, 3];
      .               /// assert!(!a.is_empty());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
      .               #[inline]
      .               pub const fn is_empty(&self) -> bool {
 32,920 ( 0.02%)          self.len() == 0
      .               }
      .           
      .               /// Returns the first element of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 159 ----------------------------------------
      .               ///
      .               /// let w: &[i32] = &[];
      .               /// assert_eq!(None, w.first());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn first(&self) -> Option<&T> {
    100 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
      .               }
      .           
      .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 178 ----------------------------------------
      .               ///     *first = 5;
      .               /// }
      .               /// assert_eq!(x, &[5, 1, 2]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
      .               #[inline]
      .               pub const fn first_mut(&mut self) -> Option<&mut T> {
     76 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
      .               }
      .           
      .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 237 ----------------------------------------
      .               ///     assert_eq!(last, &2);
      .               ///     assert_eq!(elements, &[0, 1]);
      .               /// }
      .               /// ```
      .               #[stable(feature = "slice_splits", since = "1.5.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
    690 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
      .               }
      .           
      .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
      .               ///
      .               /// let w: &[i32] = &[];
      .               /// assert_eq!(None, w.last());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn last(&self) -> Option<&T> {
 16,740 ( 0.01%)          if let [.., last] = self { Some(last) } else { None }
      .               }
      .           
      .               /// Returns a mutable pointer to the last item in the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 295 ----------------------------------------
      .               ///     *last = 10;
      .               /// }
      .               /// assert_eq!(x, &[0, 1, 10]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
      .               #[inline]
      .               pub const fn last_mut(&mut self) -> Option<&mut T> {
 54,981 ( 0.03%)          if let [.., last] = self { Some(last) } else { None }
      .               }
      .           
      .               /// Returns a reference to an element or subslice depending on the type of
      .               /// index.
      .               ///
      .               /// - If given a position, returns a reference to the element at that
      .               ///   position or `None` if out of bounds.
      .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 448 ----------------------------------------
      .               /// }
      .               /// ```
      .               ///
      .               /// [`as_mut_ptr`]: slice::as_mut_ptr
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
      .               #[inline]
      .               pub const fn as_ptr(&self) -> *const T {
 43,668 ( 0.02%)          self as *const [T] as *const T
      .               }
      .           
      .               /// Returns an unsafe mutable pointer to the slice's buffer.
      .               ///
      .               /// The caller must ensure that the slice outlives the pointer this
      .               /// function returns, or else it will end up pointing to garbage.
      .               ///
      .               /// Modifying the container referenced by this slice may cause its buffer
-- line 464 ----------------------------------------
-- line 476 ----------------------------------------
      .               ///     }
      .               /// }
      .               /// assert_eq!(x, &[3, 4, 6]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
      .               #[inline]
      .               pub const fn as_mut_ptr(&mut self) -> *mut T {
      2 ( 0.00%)          self as *mut [T] as *mut T
      .               }
      .           
      .               /// Returns the two raw pointers spanning the slice.
      .               ///
      .               /// The returned range is half-open, which means that the end pointer
      .               /// points *one past* the last element of the slice. This way, an empty
      .               /// slice is represented by two equal pointers, and the difference between
      .               /// the two pointers represents the size of the slice.
-- line 492 ----------------------------------------
-- line 582 ----------------------------------------
      .               /// v.swap(2, 4);
      .               /// assert!(v == ["a", "b", "e", "d", "c"]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
      .               #[inline]
      .               #[track_caller]
      .               pub const fn swap(&mut self, a: usize, b: usize) {
    552 ( 0.00%)          let _ = &self[a];
  3,884 ( 0.00%)          let _ = &self[b];
      .           
      .                   // SAFETY: we just checked that both `a` and `b` are in bounds
      .                   unsafe { self.swap_unchecked(a, b) }
      .               }
      .           
      .               /// Swaps two elements in the slice, without doing bounds checking.
      .               ///
      .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 677 ----------------------------------------
      .           
      .                       // Because this function is first compiled in isolation,
      .                       // this check tells LLVM that the indexing below is
      .                       // in-bounds.  Then after inlining -- once the actual
      .                       // lengths of the slices are known -- it's removed.
      .                       let (a, b) = (&mut a[..n], &mut b[..n]);
      .           
      .                       for i in 0..n {
    142 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
      .                       }
      .                   }
      .               }
      .           
      .               /// Returns an iterator over the slice.
      .               ///
      .               /// # Examples
      .               ///
-- line 693 ----------------------------------------
-- line 1499 ----------------------------------------
      .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
      .               ///     assert_eq!(right, []);
      .               /// }
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               #[track_caller]
      .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
     18 ( 0.00%)          assert!(mid <= self.len());
      .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
      .                   // fulfills the requirements of `from_raw_parts_mut`.
      .                   unsafe { self.split_at_unchecked(mid) }
      .               }
      .           
      .               /// Divides one mutable slice into two at an index.
      .               ///
      .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
      .               /// left[1] = 2;
      .               /// right[1] = 4;
      .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               #[track_caller]
      .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
  3,078 ( 0.00%)          assert!(mid <= self.len());
      .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
      .                   // fulfills the requirements of `from_raw_parts_mut`.
      .                   unsafe { self.split_at_mut_unchecked(mid) }
      .               }
      .           
      .               /// Divides one slice into two at an index, without doing bounds checking.
      .               ///
      .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
      .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
      .                   let len = self.len();
      .                   let ptr = self.as_mut_ptr();
      .           
      .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
      .                   //
      .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
      .                   // is fine.
    194 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
      .               }
      .           
      .               /// Divides one slice into an array and a remainder slice at an index.
      .               ///
      .               /// The array will contain all indices from `[0, N)` (excluding
      .               /// the index `N` itself) and the slice will contain all
      .               /// indices from `[N, len)` (excluding the index `len` itself).
      .               ///
-- line 1644 ----------------------------------------
-- line 2113 ----------------------------------------
      .               /// assert!(!v.iter().any(|e| e == "hi"));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               pub fn contains(&self, x: &T) -> bool
      .               where
      .                   T: PartialEq,
      .               {
     54 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
      .               }
      .           
      .               /// Returns `true` if `needle` is a prefix of the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 2129 ----------------------------------------
-- line 2142 ----------------------------------------
      .               /// assert!(v.starts_with(&[]));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn starts_with(&self, needle: &[T]) -> bool
      .               where
      .                   T: PartialEq,
      .               {
      .                   let n = needle.len();
  5,626 ( 0.00%)          self.len() >= n && needle == &self[..n]
      .               }
      .           
      .               /// Returns `true` if `needle` is a suffix of the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 2158 ----------------------------------------
-- line 2171 ----------------------------------------
      .               /// assert!(v.ends_with(&[]));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn ends_with(&self, needle: &[T]) -> bool
      .               where
      .                   T: PartialEq,
      .               {
      .                   let (m, n) = (self.len(), needle.len());
  3,182 ( 0.00%)          m >= n && needle == &self[m - n..]
      .               }
      .           
      .               /// Returns a subslice with the prefix removed.
      .               ///
      .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
      .               /// If `prefix` is empty, simply returns the original slice.
      .               ///
      .               /// If the slice does not start with `prefix`, returns `None`.
-- line 2187 ----------------------------------------
-- line 2293 ----------------------------------------
      .               /// s.insert(idx, num);
      .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
      .               where
      .                   T: Ord,
      .               {
      3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
      .               }
      .           
      .               /// Binary searches this sorted slice with a comparator function.
      .               ///
      .               /// The comparator function should implement an order consistent
      .               /// with the sort order of the underlying slice, returning an
      .               /// order code that indicates whether its argument is `Less`,
      .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
      .               #[inline]
      .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
      .               where
      .                   F: FnMut(&'a T) -> Ordering,
      .               {
      .                   let mut size = self.len();
      .                   let mut left = 0;
      .                   let mut right = size;
333,297 ( 0.15%)          while left < right {
455,906 ( 0.21%)              let mid = left + size / 2;
      .           
      .                       // SAFETY: the call is made safe by the following invariants:
      .                       // - `mid >= 0`
      .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
114,122 ( 0.05%)              let cmp = f(unsafe { self.get_unchecked(mid) });
      .           
      .                       // The reason why we use if/else control flow rather than match
      .                       // is because match reorders comparison operations, which is perf sensitive.
      .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
139,375 ( 0.06%)              if cmp == Less {
195,767 ( 0.09%)                  left = mid + 1;
 67,597 ( 0.03%)              } else if cmp == Greater {
      .                           right = mid;
      .                       } else {
      .                           // SAFETY: same as the `get_unchecked` above
      .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
      .                           return Ok(mid);
      .                       }
      .           
410,793 ( 0.19%)              size = right - left;
      .                   }
      .                   Err(left)
      .               }
      .           
      .               /// Binary searches this sorted slice with a key extraction function.
      .               ///
      .               /// Assumes that the slice is sorted by the key, for instance with
      .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3203 ----------------------------------------
      .                   #[track_caller]
      .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
      .                       panic!(
      .                           "source slice length ({}) does not match destination slice length ({})",
      .                           src_len, dst_len,
      .                       );
      .                   }
      .           
  6,438 ( 0.00%)          if self.len() != src.len() {
      .                       len_mismatch_fail(self.len(), src.len());
      .                   }
      .           
      .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
      .                   // checked to have the same length. The slices cannot overlap because
      .                   // mutable references are exclusive.
      .                   unsafe {
      .                       ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
-- line 3219 ----------------------------------------
-- line 3382 ----------------------------------------
      .                   }
      .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
      .                   let ts: usize = mem::size_of::<U>() / gcd;
      .                   let us: usize = mem::size_of::<T>() / gcd;
      .           
      .                   // Armed with this knowledge, we can find how many `U`s we can fit!
      .                   let us_len = self.len() / ts * us;
      .                   // And how many `T`s will be in the trailing slice!
    104 ( 0.00%)          let ts_len = self.len() % ts;
      .                   (us_len, ts_len)
      .               }
      .           
      .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
      .               /// maintained.
      .               ///
      .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
      .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
      .                       return (self, &[], &[]);
      .                   }
      .           
      .                   // First, find at what point do we split between the first and 2nd slice. Easy with
      .                   // ptr.align_offset.
      .                   let ptr = self.as_ptr();
      .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
      .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
    104 ( 0.00%)          if offset > self.len() {
      .                       (self, &[], &[])
      .                   } else {
      .                       let (left, rest) = self.split_at(offset);
      .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
      .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
      .                       // since the caller guarantees that we can transmute `T` to `U` safely.
      .                       unsafe {
      .                           (
      .                               left,
      .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
    104 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
      .                           )
      .                       }
      .                   }
      .               }
      .           
      .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
      .               /// maintained.
      .               ///
-- line 3456 ----------------------------------------

272,339 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs
--------------------------------------------------------------------------------
Ir                 

-- line 12 ----------------------------------------
        .           use rustc_data_structures::sync::Lrc;
        .           use rustc_macros::HashStable_Generic;
        .           use rustc_span::symbol::{kw, sym};
        .           use rustc_span::symbol::{Ident, Symbol};
        .           use rustc_span::{self, edition::Edition, Span, DUMMY_SP};
        .           use std::borrow::Cow;
        .           use std::{fmt, mem};
        .           
    5,208 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum CommentKind {
        .               Line,
        .               Block,
        .           }
        .           
      307 ( 0.00%)  #[derive(Clone, PartialEq, Encodable, Decodable, Hash, Debug, Copy)]
        .           #[derive(HashStable_Generic)]
        .           pub enum BinOpToken {
        .               Plus,
        .               Minus,
        .               Star,
        .               Slash,
        .               Percent,
        .               Caret,
        .               And,
        .               Or,
        .               Shl,
        .               Shr,
        .           }
        .           
        .           /// A delimiter token.
    8,849 ( 0.00%)  #[derive(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Debug, Copy)]
        .           #[derive(HashStable_Generic)]
        .           pub enum DelimToken {
        .               /// A round parenthesis (i.e., `(` or `)`).
        .               Paren,
        .               /// A square bracket (i.e., `[` or `]`).
        .               Bracket,
        .               /// A curly brace (i.e., `{` or `}`).
        .               Brace,
        .               /// An empty delimiter.
        .               NoDelim,
        .           }
        .           
    2,612 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum LitKind {
        .               Bool, // AST only, must never appear in a `Token`
        .               Byte,
        .               Char,
        .               Integer,
        .               Float,
        .               Str,
        .               StrRaw(u16), // raw string delimited by `n` hash symbols
        .               ByteStr,
        .               ByteStrRaw(u16), // raw byte string delimited by `n` hash symbols
        .               Err,
        .           }
        .           
        .           /// A literal token.
    9,538 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub struct Lit {
        2 ( 0.00%)      pub kind: LitKind,
        2 ( 0.00%)      pub symbol: Symbol,
        2 ( 0.00%)      pub suffix: Option<Symbol>,
        .           }
        .           
        .           impl fmt::Display for Lit {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   let Lit { kind, symbol, suffix } = *self;
        .                   match kind {
        .                       Byte => write!(f, "b'{}'", symbol)?,
        .                       Char => write!(f, "'{}'", symbol)?,
-- line 82 ----------------------------------------
-- line 130 ----------------------------------------
        .               crate fn may_have_suffix(self) -> bool {
        .                   matches!(self, Integer | Float | Err)
        .               }
        .           }
        .           
        .           impl Lit {
        .               pub fn new(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> Lit {
        .                   Lit { kind, symbol, suffix }
      241 ( 0.00%)      }
        .           }
        .           
        8 ( 0.00%)  pub fn ident_can_begin_expr(name: Symbol, span: Span, is_raw: bool) -> bool {
       14 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
        .           
        4 ( 0.00%)      !ident_token.is_reserved_ident()
        .                   || ident_token.is_path_segment_keyword()
        .                   || [
        .                       kw::Async,
        .                       kw::Do,
        .                       kw::Box,
        .                       kw::Break,
        .                       kw::Const,
        .                       kw::Continue,
-- line 152 ----------------------------------------
-- line 161 ----------------------------------------
        .                       kw::True,
        .                       kw::Try,
        .                       kw::Unsafe,
        .                       kw::While,
        .                       kw::Yield,
        .                       kw::Static,
        .                   ]
        .                   .contains(&name)
       10 ( 0.00%)  }
        .           
        .           fn ident_can_begin_type(name: Symbol, span: Span, is_raw: bool) -> bool {
       18 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
        .           
        6 ( 0.00%)      !ident_token.is_reserved_ident()
        .                   || ident_token.is_path_segment_keyword()
        .                   || [kw::Underscore, kw::For, kw::Impl, kw::Fn, kw::Unsafe, kw::Extern, kw::Typeof, kw::Dyn]
        .                       .contains(&name)
        .           }
        .           
1,358,689 ( 0.63%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum TokenKind {
        .               /* Expression-operator symbols. */
        .               Eq,
        .               Lt,
        .               Le,
        .               EqEq,
        .               Ne,
        .               Ge,
        .               Gt,
        .               AndAnd,
        .               OrOr,
        .               Not,
        .               Tilde,
    5,715 ( 0.00%)      BinOp(BinOpToken),
      903 ( 0.00%)      BinOpEq(BinOpToken),
        .           
        .               /* Structural symbols */
        .               At,
        .               Dot,
        .               DotDot,
        .               DotDotDot,
        .               DotDotEq,
        .               Comma,
-- line 203 ----------------------------------------
-- line 208 ----------------------------------------
        .               LArrow,
        .               FatArrow,
        .               Pound,
        .               Dollar,
        .               Question,
        .               /// Used by proc macros for representing lifetimes, not generated by lexer right now.
        .               SingleQuote,
        .               /// An opening delimiter (e.g., `{`).
    5,514 ( 0.00%)      OpenDelim(DelimToken),
        .               /// A closing delimiter (e.g., `}`).
    1,617 ( 0.00%)      CloseDelim(DelimToken),
        .           
        .               /* Literals */
    5,368 ( 0.00%)      Literal(Lit),
        .           
        .               /// Identifier token.
        .               /// Do not forget about `NtIdent` when you want to match on identifiers.
        .               /// It's recommended to use `Token::(ident,uninterpolate,uninterpolated_span)` to
        .               /// treat regular and interpolated identifiers in the same way.
   15,548 ( 0.01%)      Ident(Symbol, /* is_raw */ bool),
        .               /// Lifetime identifier token.
        .               /// Do not forget about `NtLifetime` when you want to match on lifetime identifiers.
        .               /// It's recommended to use `Token::(lifetime,uninterpolate,uninterpolated_span)` to
        .               /// treat regular and interpolated lifetime identifiers in the same way.
        .               Lifetime(Symbol),
        .           
    3,697 ( 0.00%)      Interpolated(Lrc<Nonterminal>),
        .           
        .               /// A doc comment token.
        .               /// `Symbol` is the doc comment's data excluding its "quotes" (`///`, `/**`, etc)
        .               /// similarly to symbols in string literal tokens.
      141 ( 0.00%)      DocComment(CommentKind, ast::AttrStyle, Symbol),
        .           
        .               Eof,
        .           }
        .           
        .           // `TokenKind` is used a lot. Make sure it doesn't unintentionally get bigger.
        .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
        .           rustc_data_structures::static_assert_size!(TokenKind, 16);
        .           
  232,630 ( 0.11%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub struct Token {
   19,252 ( 0.01%)      pub kind: TokenKind,
        .               pub span: Span,
        .           }
        .           
        .           impl TokenKind {
        .               pub fn lit(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> TokenKind {
        .                   Literal(Lit::new(kind, symbol, suffix))
        .               }
        .           
        .               // An approximation to proc-macro-style single-character operators used by rustc parser.
        .               // If the operator token can be broken into two tokens, the first of which is single-character,
        .               // then this function performs that operation, otherwise it returns `None`.
      282 ( 0.00%)      pub fn break_two_token_op(&self) -> Option<(TokenKind, TokenKind)> {
    1,137 ( 0.00%)          Some(match *self {
        .                       Le => (Lt, Eq),
        .                       EqEq => (Eq, Eq),
        .                       Ne => (Not, Eq),
        .                       Ge => (Gt, Eq),
        .                       AndAnd => (BinOp(And), BinOp(And)),
        .                       OrOr => (BinOp(Or), BinOp(Or)),
        .                       BinOp(Shl) => (Lt, Lt),
        .                       BinOp(Shr) => (Gt, Gt),
-- line 271 ----------------------------------------
-- line 280 ----------------------------------------
        .                       BinOpEq(Shl) => (Lt, Le),
        .                       BinOpEq(Shr) => (Gt, Ge),
        .                       DotDot => (Dot, Dot),
        .                       DotDotDot => (Dot, DotDot),
        .                       ModSep => (Colon, Colon),
        .                       RArrow => (BinOp(Minus), Gt),
        .                       LArrow => (Lt, BinOp(Minus)),
        .                       FatArrow => (Eq, Gt),
      281 ( 0.00%)              _ => return None,
        .                   })
      282 ( 0.00%)      }
        .           
        .               /// Returns tokens that are likely to be typed accidentally instead of the current token.
        .               /// Enables better error recovery when the wrong token is found.
        .               pub fn similar_tokens(&self) -> Option<Vec<TokenKind>> {
        .                   match *self {
        .                       Comma => Some(vec![Dot, Lt, Semi]),
        .                       Semi => Some(vec![Colon, Comma]),
        .                       FatArrow => Some(vec![Eq, RArrow]),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               pub fn should_end_const_arg(&self) -> bool {
       18 ( 0.00%)          matches!(self, Gt | Ge | BinOp(Shr) | BinOpEq(Shr))
        3 ( 0.00%)      }
        .           }
        .           
        .           impl Token {
    5,492 ( 0.00%)      pub fn new(kind: TokenKind, span: Span) -> Self {
   24,983 ( 0.01%)          Token { kind, span }
    5,492 ( 0.00%)      }
        .           
        .               /// Some token that will be thrown away later.
    2,829 ( 0.00%)      pub fn dummy() -> Self {
        .                   Token::new(TokenKind::Question, DUMMY_SP)
    2,829 ( 0.00%)      }
        .           
        .               /// Recovers a `Token` from an `Ident`. This creates a raw identifier if necessary.
        .               pub fn from_ast_ident(ident: Ident) -> Self {
        8 ( 0.00%)          Token::new(Ident(ident.name, ident.is_raw_guess()), ident.span)
        .               }
        .           
        .               /// Return this token by value and leave a dummy token in its place.
      801 ( 0.00%)      pub fn take(&mut self) -> Self {
        .                   mem::replace(self, Token::dummy())
      801 ( 0.00%)      }
        .           
        .               /// For interpolated tokens, returns a span of the fragment to which the interpolated
        .               /// token refers. For all other tokens this is just a regular span.
        .               /// It is particularly important to use this for identifiers and lifetimes
        .               /// for which spans affect name resolution and edition checks.
        .               /// Note that keywords are also identifiers, so they should use this
        .               /// if they keep spans or perform edition checks.
        .               pub fn uninterpolated_span(&self) -> Span {
       98 ( 0.00%)          match &self.kind {
        .                       Interpolated(nt) => nt.span(),
       49 ( 0.00%)              _ => self.span,
        .                   }
       49 ( 0.00%)      }
        .           
        .               pub fn is_op(&self) -> bool {
    2,403 ( 0.00%)          !matches!(
      801 ( 0.00%)              self.kind,
        .                       OpenDelim(..)
        .                           | CloseDelim(..)
        .                           | Literal(..)
        .                           | DocComment(..)
        .                           | Ident(..)
        .                           | Lifetime(..)
        .                           | Interpolated(..)
        .                           | Eof
        .                   )
      801 ( 0.00%)      }
        .           
        .               pub fn is_like_plus(&self) -> bool {
      154 ( 0.00%)          matches!(self.kind, BinOp(Plus) | BinOpEq(Plus))
       30 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token can appear at the start of an expression.
       14 ( 0.00%)      pub fn can_begin_expr(&self) -> bool {
       70 ( 0.00%)          match self.uninterpolate().kind {
       18 ( 0.00%)              Ident(name, is_raw)              =>
        6 ( 0.00%)                  ident_can_begin_expr(name, self.span, is_raw), // value name or keyword
        .                       OpenDelim(..)                     | // tuple, array or block
        .                       Literal(..)                       | // literal
        .                       Not                               | // operator not
        .                       BinOp(Minus)                      | // unary minus
        .                       BinOp(Star)                       | // dereference
        .                       BinOp(Or) | OrOr                  | // closure
        .                       BinOp(And)                        | // reference
        .                       AndAnd                            | // double reference
-- line 371 ----------------------------------------
-- line 376 ----------------------------------------
        .                       Lifetime(..)                      | // labeled loop
        .                       Pound                             => true, // expression attributes
        .                       Interpolated(ref nt) => matches!(**nt, NtLiteral(..) |
        .                           NtExpr(..)    |
        .                           NtBlock(..)   |
        .                           NtPath(..)),
        .                       _ => false,
        .                   }
       28 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token can appear at the start of a type.
       12 ( 0.00%)      pub fn can_begin_type(&self) -> bool {
       15 ( 0.00%)          match self.uninterpolate().kind {
       27 ( 0.00%)              Ident(name, is_raw)        =>
        3 ( 0.00%)                  ident_can_begin_type(name, self.span, is_raw), // type name or keyword
        .                       OpenDelim(Paren)            | // tuple
        .                       OpenDelim(Bracket)          | // array
        .                       Not                         | // never
        .                       BinOp(Star)                 | // raw pointer
        .                       BinOp(And)                  | // reference
        .                       AndAnd                      | // double reference
        .                       Question                    | // maybe bound in trait object
        .                       Lifetime(..)                | // lifetime bound in trait object
        .                       Lt | BinOp(Shl)             | // associated path
        .                       ModSep                      => true, // global path
        .                       Interpolated(ref nt) => matches!(**nt, NtTy(..) | NtPath(..)),
        .                       _ => false,
        .                   }
       18 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token can appear at the start of a const param.
        .               pub fn can_begin_const_arg(&self) -> bool {
       15 ( 0.00%)          match self.kind {
        .                       OpenDelim(Brace) => true,
        .                       Interpolated(ref nt) => matches!(**nt, NtExpr(..) | NtBlock(..) | NtLiteral(..)),
        3 ( 0.00%)              _ => self.can_begin_literal_maybe_minus(),
        .                   }
        .               }
        .           
        .               /// Returns `true` if the token can appear at the start of a generic bound.
        .               pub fn can_begin_bound(&self) -> bool {
        .                   self.is_path_start()
        .                       || self.is_lifetime()
        .                       || self.is_keyword(kw::For)
-- line 419 ----------------------------------------
-- line 427 ----------------------------------------
        .               }
        .           
        .               /// Returns `true` if the token is any literal, a minus (which can prefix a literal,
        .               /// for example a '-42', or one of the boolean idents).
        .               ///
        .               /// In other words, would this token be a valid start of `parse_literal_maybe_minus`?
        .               ///
        .               /// Keep this in sync with and `Lit::from_token`, excluding unary negation.
        4 ( 0.00%)      pub fn can_begin_literal_maybe_minus(&self) -> bool {
       40 ( 0.00%)          match self.uninterpolate().kind {
        .                       Literal(..) | BinOp(Minus) => true,
       16 ( 0.00%)              Ident(name, false) if name.is_bool_lit() => true,
        .                       Interpolated(ref nt) => match &**nt {
        .                           NtLiteral(_) => true,
        .                           NtExpr(e) => match &e.kind {
        .                               ast::ExprKind::Lit(_) => true,
        .                               ast::ExprKind::Unary(ast::UnOp::Neg, e) => {
        .                                   matches!(&e.kind, ast::ExprKind::Lit(_))
        .                               }
        .                               _ => false,
        .                           },
        .                           _ => false,
        .                       },
        .                       _ => false,
        .                   }
        8 ( 0.00%)      }
        .           
        .               // A convenience function for matching on identifiers during parsing.
        .               // Turns interpolated identifier (`$i: ident`) or lifetime (`$l: lifetime`) token
        .               // into the regular identifier or lifetime token it refers to,
        .               // otherwise returns the original token.
      566 ( 0.00%)      pub fn uninterpolate(&self) -> Cow<'_, Token> {
  100,208 ( 0.05%)          match &self.kind {
   38,559 ( 0.02%)              Interpolated(nt) => match **nt {
   12,907 ( 0.01%)                  NtIdent(ident, is_raw) => {
   32,320 ( 0.01%)                      Cow::Owned(Token::new(Ident(ident.name, is_raw), ident.span))
        .                           }
        .                           NtLifetime(ident) => Cow::Owned(Token::new(Lifetime(ident.name), ident.span)),
        .                           _ => Cow::Borrowed(self),
        .                       },
        .                       _ => Cow::Borrowed(self),
        .                   }
      566 ( 0.00%)      }
        .           
        .               /// Returns an identifier if this token is an identifier.
   22,404 ( 0.01%)      pub fn ident(&self) -> Option<(Ident, /* is_raw */ bool)> {
        .                   let token = self.uninterpolate();
   65,418 ( 0.03%)          match token.kind {
  257,864 ( 0.12%)              Ident(name, is_raw) => Some((Ident::new(name, token.span), is_raw)),
        .                       _ => None,
        .                   }
  140,629 ( 0.06%)      }
        .           
        .               /// Returns a lifetime identifier if this token is a lifetime.
   12,083 ( 0.01%)      pub fn lifetime(&self) -> Option<Ident> {
        .                   let token = self.uninterpolate();
   24,352 ( 0.01%)          match token.kind {
        .                       Lifetime(name) => Some(Ident::new(name, token.span)),
        .                       _ => None,
        .                   }
   84,581 ( 0.04%)      }
        .           
        .               /// Returns `true` if the token is an identifier.
        .               pub fn is_ident(&self) -> bool {
        .                   self.ident().is_some()
      649 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is a lifetime.
       93 ( 0.00%)      pub fn is_lifetime(&self) -> bool {
        .                   self.lifetime().is_some()
      186 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is an identifier whose name is the given
        .               /// string slice.
      290 ( 0.00%)      pub fn is_ident_named(&self, name: Symbol) -> bool {
        .                   self.ident().map_or(false, |(ident, _)| ident.name == name)
      580 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is an interpolated path.
        .               fn is_path(&self) -> bool {
    3,356 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
      202 ( 0.00%)              if let NtPath(..) = **nt {
        .                           return true;
        .                       }
        .                   }
        .                   false
        .               }
        .           
        .               /// Would `maybe_whole_expr` in `parser.rs` return `Ok(..)`?
        .               /// That is, is this a pre-parsed expression dropped into the token stream
-- line 516 ----------------------------------------
-- line 522 ----------------------------------------
        .                       }
        .                   }
        .           
        .                   false
        .               }
        .           
        .               // Is the token an interpolated block (`$b:block`)?
        .               pub fn is_whole_block(&self) -> bool {
       50 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
        .                       if let NtBlock(..) = **nt {
        .                           return true;
        .                       }
        .                   }
        .                   false
       25 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is either the `mut` or `const` keyword.
        .               pub fn is_mutability(&self) -> bool {
        .                   self.is_keyword(kw::Mut) || self.is_keyword(kw::Const)
        .               }
        .           
      980 ( 0.00%)      pub fn is_qpath_start(&self) -> bool {
    2,658 ( 0.00%)          self == &Lt || self == &BinOp(Shl)
        .               }
        .           
    3,356 ( 0.00%)      pub fn is_path_start(&self) -> bool {
    5,121 ( 0.00%)          self == &ModSep
        .                       || self.is_qpath_start()
        .                       || self.is_path()
        .                       || self.is_path_segment_keyword()
      205 ( 0.00%)              || self.is_ident() && !self.is_reserved_ident()
    4,195 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is a given keyword, `kw`.
    7,924 ( 0.00%)      pub fn is_keyword(&self, kw: Symbol) -> bool {
        .                   self.is_non_raw_ident_where(|id| id.name == kw)
   15,848 ( 0.01%)      }
        .           
       93 ( 0.00%)      pub fn is_path_segment_keyword(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_path_segment_keyword)
        .               }
        .           
        .               // Returns true for reserved identifiers used internally for elided lifetimes,
        .               // unnamed method parameters, crate root module, error recovery etc.
        4 ( 0.00%)      pub fn is_special_ident(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_special)
        .               }
        .           
        .               /// Returns `true` if the token is a keyword used in the language.
        4 ( 0.00%)      pub fn is_used_keyword(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_used_keyword)
        .               }
        .           
        .               /// Returns `true` if the token is a keyword reserved for possible future use.
        4 ( 0.00%)      pub fn is_unused_keyword(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_unused_keyword)
        .               }
        .           
        .               /// Returns `true` if the token is either a special identifier or a keyword.
        .               pub fn is_reserved_ident(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_reserved)
        .               }
        .           
        .               /// Returns `true` if the token is the identifier `true` or `false`.
       93 ( 0.00%)      pub fn is_bool_lit(&self) -> bool {
      186 ( 0.00%)          self.is_non_raw_ident_where(|id| id.name.is_bool_lit())
        .               }
        .           
        .               pub fn is_numeric_lit(&self) -> bool {
        .                   matches!(
        .                       self.kind,
        .                       Literal(Lit { kind: LitKind::Integer, .. }) | Literal(Lit { kind: LitKind::Float, .. })
        .                   )
        .               }
        .           
        .               /// Returns `true` if the token is a non-raw identifier for which `pred` holds.
        .               pub fn is_non_raw_ident_where(&self, pred: impl FnOnce(Ident) -> bool) -> bool {
   55,784 ( 0.03%)          match self.ident() {
      299 ( 0.00%)              Some((id, false)) => pred(id),
        .                       _ => false,
        .                   }
        .               }
        .           
    2,010 ( 0.00%)      pub fn glue(&self, joint: &Token) -> Option<Token> {
    1,005 ( 0.00%)          let kind = match self.kind {
       45 ( 0.00%)              Eq => match joint.kind {
        .                           Eq => EqEq,
        .                           Gt => FatArrow,
        .                           _ => return None,
        .                       },
        .                       Lt => match joint.kind {
        .                           Eq => Le,
        .                           Lt => BinOp(Shl),
        .                           Le => BinOpEq(Shl),
        .                           BinOp(Minus) => LArrow,
        .                           _ => return None,
        .                       },
        7 ( 0.00%)              Gt => match joint.kind {
        .                           Eq => Ge,
        .                           Gt => BinOp(Shr),
        .                           Ge => BinOpEq(Shr),
        .                           _ => return None,
        .                       },
        .                       Not => match joint.kind {
        .                           Eq => Ne,
        .                           _ => return None,
        .                       },
      135 ( 0.00%)              BinOp(op) => match joint.kind {
        .                           Eq => BinOpEq(op),
        .                           BinOp(And) if op == And => AndAnd,
        9 ( 0.00%)                  BinOp(Or) if op == Or => OrOr,
        6 ( 0.00%)                  Gt if op == Minus => RArrow,
        .                           _ => return None,
        .                       },
        .                       Dot => match joint.kind {
        .                           Dot => DotDot,
        .                           DotDot => DotDotDot,
        .                           _ => return None,
        .                       },
        .                       DotDot => match joint.kind {
        .                           Dot => DotDotDot,
        .                           Eq => DotDotEq,
        .                           _ => return None,
        .                       },
       76 ( 0.00%)              Colon => match joint.kind {
        .                           Colon => ModSep,
        .                           _ => return None,
        .                       },
        .                       SingleQuote => match joint.kind {
        .                           Ident(name, false) => Lifetime(Symbol::intern(&format!("'{}", name))),
        .                           _ => return None,
        .                       },
        .           
        .                       Le | EqEq | Ne | Ge | AndAnd | OrOr | Tilde | BinOpEq(..) | At | DotDotDot
        .                       | DotDotEq | Comma | Semi | ModSep | RArrow | LArrow | FatArrow | Pound | Dollar
        .                       | Question | OpenDelim(..) | CloseDelim(..) | Literal(..) | Ident(..)
        .                       | Lifetime(..) | Interpolated(..) | DocComment(..) | Eof => return None,
        .                   };
        .           
      819 ( 0.00%)          Some(Token::new(kind, self.span.to(joint.span)))
    1,809 ( 0.00%)      }
        .           }
        .           
        .           impl PartialEq<TokenKind> for Token {
        .               fn eq(&self, rhs: &TokenKind) -> bool {
   43,172 ( 0.02%)          self.kind == *rhs
        .               }
        .           }
        .           
        .           #[derive(Clone, Encodable, Decodable)]
        .           /// For interpolation during macro expansion.
        .           pub enum Nonterminal {
        .               NtItem(P<ast::Item>),
        .               NtBlock(P<ast::Block>),
-- line 675 ----------------------------------------
-- line 711 ----------------------------------------
        .               Path,
        .               Vis,
        .               TT,
        .           }
        .           
        .           impl NonterminalKind {
        .               /// The `edition` closure is used to get the edition for the given symbol. Doing
        .               /// `span.edition()` is expensive, so we do it lazily.
      736 ( 0.00%)      pub fn from_symbol(
        .                   symbol: Symbol,
        .                   edition: impl FnOnce() -> Edition,
        .               ) -> Option<NonterminalKind> {
    1,828 ( 0.00%)          Some(match symbol {
        .                       sym::item => NonterminalKind::Item,
        .                       sym::block => NonterminalKind::Block,
        .                       sym::stmt => NonterminalKind::Stmt,
        .                       sym::pat => match edition() {
        .                           Edition::Edition2015 | Edition::Edition2018 => {
        .                               NonterminalKind::PatParam { inferred: true }
        .                           }
        .                           Edition::Edition2021 => NonterminalKind::PatWithOr,
-- line 731 ----------------------------------------
-- line 737 ----------------------------------------
        .                       sym::lifetime => NonterminalKind::Lifetime,
        .                       sym::literal => NonterminalKind::Literal,
        .                       sym::meta => NonterminalKind::Meta,
        .                       sym::path => NonterminalKind::Path,
        .                       sym::vis => NonterminalKind::Vis,
        .                       sym::tt => NonterminalKind::TT,
        .                       _ => return None,
        .                   })
      736 ( 0.00%)      }
        .               fn symbol(self) -> Symbol {
        .                   match self {
        .                       NonterminalKind::Item => sym::item,
        .                       NonterminalKind::Block => sym::block,
        .                       NonterminalKind::Stmt => sym::stmt,
        .                       NonterminalKind::PatParam { inferred: false } => sym::pat_param,
        .                       NonterminalKind::PatParam { inferred: true } | NonterminalKind::PatWithOr => sym::pat,
        .                       NonterminalKind::Expr => sym::expr,
-- line 753 ----------------------------------------

  491,524 ( 0.23%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir               

-- line 118 ----------------------------------------
      .               stability: InternedSet<'tcx, attr::Stability>,
      .           
      .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
      .               const_stability: InternedSet<'tcx, attr::ConstStability>,
      .           }
      .           
      .           impl<'tcx> CtxtInterners<'tcx> {
      .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
     17 ( 0.00%)          CtxtInterners {
      .                       arena,
      .                       type_: Default::default(),
      .                       type_list: Default::default(),
      .                       substs: Default::default(),
      .                       region: Default::default(),
      .                       poly_existential_predicates: Default::default(),
      .                       canonical_var_infos: Default::default(),
      .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
      .                       stability: Default::default(),
      .                       const_stability: Default::default(),
      .                   }
      .               }
      .           
      .               /// Interns a type.
      .               #[allow(rustc::usage_of_ty_tykind)]
      .               #[inline(never)]
 98,200 ( 0.05%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
      .                   self.type_
 61,375 ( 0.03%)              .intern(kind, |kind| {
  8,304 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
      .           
      .                           let ty_struct = TyS {
 16,608 ( 0.01%)                      kind,
      .                               flags: flags.flags,
      .                               outer_exclusive_binder: flags.outer_exclusive_binder,
      .                           };
      .           
      .                           Interned(self.arena.alloc(ty_struct))
      .                       })
      .                       .0
110,475 ( 0.05%)      }
      .           
      .               #[inline(never)]
 33,496 ( 0.02%)      fn intern_predicate(
      .                   &self,
      .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
      .               ) -> &'tcx PredicateInner<'tcx> {
      .                   self.predicate
 29,309 ( 0.01%)              .intern(kind, |kind| {
 13,140 ( 0.01%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
      .           
      .                           let predicate_struct = PredicateInner {
      .                               kind,
      .                               flags: flags.flags,
      .                               outer_exclusive_binder: flags.outer_exclusive_binder,
      .                           };
      .           
      .                           Interned(self.arena.alloc(predicate_struct))
      .                       })
      .                       .0
 37,683 ( 0.02%)      }
      .           }
      .           
      .           pub struct CommonTypes<'tcx> {
      .               pub unit: Ty<'tcx>,
      .               pub bool: Ty<'tcx>,
      .               pub char: Ty<'tcx>,
      .               pub isize: Ty<'tcx>,
      .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
      .           /// safely used as a key in the maps of a TypeckResults. For that to be
      .           /// the case, the HirId must have the same `owner` as all the other IDs in
      .           /// this table (signified by `hir_owner`). Otherwise the HirId
      .           /// would be in a different frame of reference and using its `local_id`
      .           /// would result in lookup errors, or worse, in silently wrong data being
      .           /// stored/returned.
      .           #[inline]
      .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
 15,396 ( 0.01%)      if hir_id.owner != hir_owner {
      .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
      .               }
      .           }
      .           
      .           #[cold]
      .           #[inline(never)]
      .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
      .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
      .           }
      .           
      .           impl<'a, V> LocalTableInContext<'a, V> {
      .               pub fn contains_key(&self, id: hir::HirId) -> bool {
      .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.data.contains_key(&id.local_id)
      .               }
      .           
 11,849 ( 0.01%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
  2,356 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
  2,356 ( 0.00%)          self.data.get(&id.local_id)
  9,496 ( 0.00%)      }
      .           
      .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
      .                   self.data.iter()
      .               }
      .           }
      .           
      .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
      .               type Output = V;
      .           
     18 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
      .                   self.get(key).expect("LocalTableInContext: key not found")
     12 ( 0.00%)      }
      .           }
      .           
      .           pub struct LocalTableInContextMut<'a, V> {
      .               hir_owner: LocalDefId,
      .               data: &'a mut ItemLocalMap<V>,
      .           }
      .           
      .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
      .               pub treat_byte_string_as_slice: ItemLocalSet,
      .           
      .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
      .               /// on closure size.
      .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
      .           }
      .           
      .           impl<'tcx> TypeckResults<'tcx> {
     72 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
    852 ( 0.00%)          TypeckResults {
      .                       hir_owner,
      .                       type_dependent_defs: Default::default(),
      .                       field_indices: Default::default(),
      .                       user_provided_types: Default::default(),
      .                       user_provided_sigs: Default::default(),
      .                       node_types: Default::default(),
      .                       node_substs: Default::default(),
      .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
      .                       tainted_by_errors: None,
      .                       concrete_opaque_types: Default::default(),
      .                       closure_min_captures: Default::default(),
      .                       closure_fake_reads: Default::default(),
      .                       generator_interior_types: ty::Binder::dummy(Default::default()),
      .                       treat_byte_string_as_slice: Default::default(),
      .                       closure_size_eval: Default::default(),
      .                   }
     72 ( 0.00%)      }
      .           
      .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
  3,120 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
  2,080 ( 0.00%)          match *qpath {
  5,622 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
      .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
      .                           .type_dependent_def(id)
    618 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
      .                   }
  5,200 ( 0.00%)      }
      .           
     26 ( 0.00%)      pub fn type_dependent_defs(
      .                   &self,
      .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
    140 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
     26 ( 0.00%)      }
      .           
    187 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
    370 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
    374 ( 0.00%)      }
      .           
    320 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
      .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
    320 ( 0.00%)      }
      .           
    903 ( 0.00%)      pub fn type_dependent_defs_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
    903 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
    903 ( 0.00%)      }
      .           
      .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
     52 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
     18 ( 0.00%)      }
      .           
      .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
     48 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
     24 ( 0.00%)      }
      .           
      .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
    412 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    206 ( 0.00%)      }
      .           
      .               pub fn user_provided_types_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
     48 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
     24 ( 0.00%)      }
      .           
      .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
  2,382 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
  1,191 ( 0.00%)      }
      .           
      .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
  3,792 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
  1,896 ( 0.00%)      }
      .           
 17,478 ( 0.01%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
  2,913 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
      .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
      .                   })
 14,565 ( 0.01%)      }
      .           
  3,804 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
  3,804 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_types.get(&id.local_id).cloned()
  7,608 ( 0.00%)      }
      .           
      .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
    306 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
    153 ( 0.00%)      }
      .           
  1,391 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
  1,391 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
  2,782 ( 0.00%)      }
      .           
    788 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
    788 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_substs.get(&id.local_id).cloned()
  1,576 ( 0.00%)      }
      .           
      .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
      .               // doesn't provide type parameter substitutions.
      .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
    156 ( 0.00%)          self.node_type(pat.hir_id)
      .               }
      .           
      .               // Returns the type of an expression as a monotype.
      .               //
      .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
      .               // some cases, we insert `Adjustment` annotations such as auto-deref or
      .               // auto-ref.  The type returned by this function does not consider such
      .               // adjustments.  See `expr_ty_adjusted()` instead.
      .               //
      .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
      .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
      .               // instead of "fn(ty) -> T with T = isize".
      .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
  3,708 ( 0.00%)          self.node_type(expr.hir_id)
      .               }
      .           
      .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
  3,455 ( 0.00%)          self.node_type_opt(expr.hir_id)
      .               }
      .           
      .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
  1,602 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
    801 ( 0.00%)      }
      .           
      .               pub fn adjustments_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
  2,626 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
  1,313 ( 0.00%)      }
      .           
  1,529 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
  3,058 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
      .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
  3,058 ( 0.00%)      }
      .           
      .               /// Returns the type of `expr`, considering any `Adjustment`
      .               /// entry recorded for that expression.
     80 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
     16 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
      .               }
      .           
     20 ( 0.00%)      pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
      4 ( 0.00%)          self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
     12 ( 0.00%)      }
      .           
    114 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
      .                   // Only paths and method calls/overloaded operators have
      .                   // entries in type_dependent_defs, ignore the former here.
    228 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
      .                       return false;
      .                   }
      .           
    256 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
    228 ( 0.00%)      }
      .           
    549 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
      .                   self.pat_binding_modes().get(id).copied().or_else(|| {
      .                       s.delay_span_bug(sp, "missing binding mode");
      .                       None
      .                   })
    732 ( 0.00%)      }
      .           
      .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
    459 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
    138 ( 0.00%)      }
      .           
      .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
    244 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
    122 ( 0.00%)      }
      .           
      .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
    572 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
    286 ( 0.00%)      }
      .           
      .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
    184 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
     92 ( 0.00%)      }
      .           
      .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
      .               /// by the closure.
     36 ( 0.00%)      pub fn closure_min_captures_flattened(
      .                   &self,
      .                   closure_def_id: DefId,
      .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
      .                   self.closure_min_captures
      .                       .get(&closure_def_id)
      .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
      .                       .into_iter()
      .                       .flatten()
     45 ( 0.00%)      }
      .           
      .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
      8 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
      4 ( 0.00%)      }
      .           
      .               pub fn closure_kind_origins_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
      .               }
      .           
      .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
     20 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
     10 ( 0.00%)      }
      .           
      .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
     12 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
      6 ( 0.00%)      }
      .           
      .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
      8 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
      4 ( 0.00%)      }
      .           
      .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
      .               }
      .           
      .               pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
      .                   validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
      .                   self.coercion_casts.contains(&hir_id.local_id)
      .               }
      .           
      .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
      .                   self.coercion_casts.insert(id);
      .               }
      .           
      .               pub fn coercion_casts(&self) -> &ItemLocalSet {
      4 ( 0.00%)          &self.coercion_casts
      4 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
      .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
      .                   let ty::TypeckResults {
      .                       hir_owner,
      .                       ref type_dependent_defs,
      .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
      .                   const START_INDEX = 0,
      .               }
      .           }
      .           
      .           /// Mapping of type annotation indices to canonical user type annotations.
      .           pub type CanonicalUserTypeAnnotations<'tcx> =
      .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
      .           
     36 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
      .           pub struct CanonicalUserTypeAnnotation<'tcx> {
      .               pub user_ty: CanonicalUserType<'tcx>,
      .               pub span: Span,
     18 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
      .           }
      .           
      .           /// Canonicalized user type annotation.
      .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
      .           
      .           impl<'tcx> CanonicalUserType<'tcx> {
      .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
      .               /// i.e., each thing is mapped to a canonical variable with the same index.
     52 ( 0.00%)      pub fn is_identity(&self) -> bool {
    104 ( 0.00%)          match self.value {
      .                       UserType::Ty(_) => false,
      .                       UserType::TypeOf(_, user_substs) => {
     52 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
      .                               return false;
      .                           }
      .           
      .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
      .                               match kind.unpack() {
    102 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
      .                                       ty::Bound(debruijn, b) => {
      .                                           // We only allow a `ty::INNERMOST` index in substitutions.
     50 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
      .                                           cvar == b.var
      .                                       }
      .                                       _ => false,
      .                                   },
      .           
      .                                   GenericArgKind::Lifetime(r) => match r {
      .                                       ty::ReLateBound(debruijn, br) => {
      .                                           // We only allow a `ty::INNERMOST` index in substitutions.
-- line 861 ----------------------------------------
-- line 872 ----------------------------------------
      .                                           cvar == b
      .                                       }
      .                                       _ => false,
      .                                   },
      .                               }
      .                           })
      .                       }
      .                   }
    104 ( 0.00%)      }
      .           }
      .           
      .           /// A user-given type annotation attached to a constant. These arise
      .           /// from constants that are named via paths, like `Foo::<A>::new` and
      .           /// so forth.
    108 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
    600 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
      .           pub enum UserType<'tcx> {
      .               Ty(Ty<'tcx>),
      .           
      .               /// The canonical type is the result of `type_of(def_id)` with the
      .               /// given substitutions applied.
      .               TypeOf(DefId, UserSubsts<'tcx>),
      .           }
      .           
      .           impl<'tcx> CommonTypes<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
    111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
      .           
      .                   CommonTypes {
      .                       unit: mk(Tuple(List::empty())),
      .                       bool: mk(Bool),
      .                       char: mk(Char),
      .                       never: mk(Never),
      .                       isize: mk(Int(ty::IntTy::Isize)),
      .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
      .           
      .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> CommonLifetimes<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
     67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
      .           
      .                   CommonLifetimes {
      5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
      5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
      5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> CommonConsts<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
      6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
      .           
      .                   CommonConsts {
      .                       unit: mk_const(ty::Const {
      .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
      .                           ty: types.unit,
      .                       }),
      .                   }
      .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
      .           
      .               /// Stores memory for globals (statics/consts).
      .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
      .           
      .               output_filenames: Arc<OutputFilenames>,
      .           }
      .           
      .           impl<'tcx> TyCtxt<'tcx> {
    260 ( 0.00%)      pub fn typeck_opt_const_arg(
      .                   self,
      .                   def: ty::WithOptConstParam<LocalDefId>,
      .               ) -> &'tcx TypeckResults<'tcx> {
    104 ( 0.00%)          if let Some(param_did) = def.const_param_did {
      .                       self.typeck_const_arg((def.did, param_did))
      .                   } else {
      .                       self.typeck(def.did)
      .                   }
    208 ( 0.00%)      }
      .           
     15 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
      5 ( 0.00%)          self.arena.alloc(Steal::new(thir))
     20 ( 0.00%)      }
      .           
     85 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
     17 ( 0.00%)          self.arena.alloc(Steal::new(mir))
    119 ( 0.00%)      }
      .           
     20 ( 0.00%)      pub fn alloc_steal_promoted(
      .                   self,
      .                   promoted: IndexVec<Promoted, Body<'tcx>>,
      .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
      5 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
     25 ( 0.00%)      }
      .           
  3,087 ( 0.00%)      pub fn alloc_adt_def(
      .                   self,
      .                   did: DefId,
      .                   kind: AdtKind,
      .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
      .                   repr: ReprOptions,
      .               ) -> &'tcx ty::AdtDef {
  5,488 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
  1,372 ( 0.00%)      }
      .           
      .               /// Allocates a read-only byte or string literal for `mir::interpret`.
      .               pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
      .                   // Create an allocation that just contains these bytes.
      .                   let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
      .                   let alloc = self.intern_const_alloc(alloc);
      .                   self.create_memory_alloc(alloc)
      .               }
      .           
      .               /// Returns a range of the start/end indices specified with the
      .               /// `rustc_layout_scalar_valid_range` attribute.
      .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
    264 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
    132 ( 0.00%)          let attrs = self.get_attrs(def_id);
    561 ( 0.00%)          let get = |name| {
    132 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
      .                           Some(attr) => attr,
      .                           None => return Bound::Unbounded,
      .                       };
      .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
      .                       if let Some(
      .                           &[
      .                               ast::NestedMetaItem::Literal(ast::Lit {
      .                                   kind: ast::LitKind::Int(a, _), ..
-- line 1111 ----------------------------------------
-- line 1114 ----------------------------------------
      .                       ) = attr.meta_item_list().as_deref()
      .                       {
      .                           Bound::Included(a)
      .                       } else {
      .                           self.sess
      .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
      .                           Bound::Unbounded
      .                       }
    660 ( 0.00%)          };
    198 ( 0.00%)          (
    198 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
     99 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
      .                   )
    264 ( 0.00%)      }
      .           
      .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
      .                   value.lift_to_tcx(self)
      .               }
      .           
      .               /// Creates a type context and call the closure with a `TyCtxt` reference
      .               /// to the context. The closure enforces that the type context and any interned
      .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
      .               /// reference to the context, to allow formatting values that need it.
     23 ( 0.00%)      pub fn create_global_ctxt(
      .                   s: &'tcx Session,
      .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
      .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
      .                   resolutions: ty::ResolverOutputs,
      .                   krate: &'tcx hir::Crate<'tcx>,
      .                   dep_graph: DepGraph,
      .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
      .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
      .                   query_kinds: &'tcx [DepKindStruct],
      .                   crate_name: &str,
      .                   output_filenames: OutputFilenames,
      .               ) -> GlobalCtxt<'tcx> {
      1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
      .                       s.fatal(&err);
      .                   });
      .                   let interners = CtxtInterners::new(arena);
      .                   let common_types = CommonTypes::new(&interners);
      .                   let common_lifetimes = CommonLifetimes::new(&interners);
      .                   let common_consts = CommonConsts::new(&interners, &common_types);
      .           
    127 ( 0.00%)          GlobalCtxt {
      .                       sess: s,
      6 ( 0.00%)              lint_store,
      .                       arena,
      2 ( 0.00%)              interners,
      5 ( 0.00%)              dep_graph,
      4 ( 0.00%)              untracked_resolutions: resolutions,
      2 ( 0.00%)              prof: s.prof.clone(),
      .                       types: common_types,
      .                       lifetimes: common_lifetimes,
      .                       consts: common_consts,
      .                       untracked_crate: krate,
      .                       on_disk_cache,
      .                       queries,
      .                       query_caches: query::QueryCaches::default(),
      .                       query_kinds,
      .                       ty_rcache: Default::default(),
      .                       pred_rcache: Default::default(),
      .                       selection_cache: Default::default(),
      .                       evaluation_cache: Default::default(),
      1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
      .                       data_layout,
      .                       alloc_map: Lock::new(interpret::AllocMap::new()),
      .                       output_filenames: Arc::new(output_filenames),
      .                   }
      9 ( 0.00%)      }
      .           
      .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
      .                   &self.query_kinds[k as usize]
      .               }
      .           
      .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
      .               #[track_caller]
      .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1223 ----------------------------------------
      .               }
      .           
      .               pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
      .                   let cname = self.crate_name(LOCAL_CRATE);
      .                   self.sess.consider_optimizing(cname.as_str(), msg)
      .               }
      .           
      .               /// Obtain all lang items of this crate and all dependencies (recursively)
 60,375 ( 0.03%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
      .                   self.get_lang_items(())
 77,625 ( 0.04%)      }
      .           
      .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
      .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
      .               pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
      .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
      .               }
      .           
      .               /// Obtain the diagnostic item's name
  2,373 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
      .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
  2,712 ( 0.00%)      }
      .           
      .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
  1,435 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
      .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
  1,640 ( 0.00%)      }
      .           
     35 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
      .                   self.stability_index(())
     45 ( 0.00%)      }
      .           
 14,049 ( 0.01%)      pub fn features(self) -> &'tcx rustc_feature::Features {
      .                   self.features_query(())
 16,056 ( 0.01%)      }
      .           
      .               pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
      .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
    400 ( 0.00%)          if let Some(id) = id.as_local() {
      .                       self.untracked_resolutions.definitions.def_key(id)
      .                   } else {
    630 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
      .                   }
      .               }
      .           
      .               /// Converts a `DefId` into its fully expanded `DefPath` (every
      .               /// `DefId` is really just an interned `DefPath`).
      .               ///
      .               /// Note that if `id` is not local to this crate, the result will
      .               ///  be a non-local `DefPath`.
-- line 1272 ----------------------------------------
-- line 1277 ----------------------------------------
      .                   } else {
      .                       self.untracked_resolutions.cstore.def_path(id)
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
      .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
     25 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
      .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
      .                   } else {
      8 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
      .                   if crate_num == LOCAL_CRATE {
      .                       self.sess.local_stable_crate_id()
      .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
      .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
      .                       self.def_path(def_id).to_string_no_crate_verbose()
      .                   )
      .               }
      .           
      .               /// Note that this is *untracked* and should only be used within the query
      .               /// system if the result is otherwise tracked through queries
      .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
 13,630 ( 0.01%)          &*self.untracked_resolutions.cstore
  6,815 ( 0.00%)      }
      .           
      .               /// Note that this is *untracked* and should only be used within the query
      .               /// system if the result is otherwise tracked through queries
      .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
      .                   &self.untracked_resolutions.definitions
      .               }
      .           
      .               #[inline(always)]
      .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
      3 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
     14 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
      .               }
      .           
      .               #[inline(always)]
      .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
      .                   let resolutions = &self.gcx.untracked_resolutions;
      .                   StableHashingContext::ignore_spans(
      .                       self.sess,
      .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
      .               /// If `true`, we should use the MIR-based borrowck, but also
      .               /// fall back on the AST borrowck if the MIR-based one errors.
      .               pub fn migrate_borrowck(self) -> bool {
      .                   self.borrowck_mode().migrate()
      .               }
      .           
      .               /// What mode(s) of borrowck should we run? AST? MIR? both?
      .               /// (Also considers the `#![feature(nll)]` setting.)
      8 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
      .                   // Here are the main constraints we need to deal with:
      .                   //
      .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
      .                   //    synonymous with no `-Z borrowck=...` flag at all.
      .                   //
      .                   // 2. We want to allow developers on the Nightly channel
      .                   //    to opt back into the "hard error" mode for NLL,
      .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
      .                   //   errors. (To simplify the code here, it now even overrides
      .                   //   a user's attempt to specify `-Z borrowck=compare`, which
      .                   //   we arguably do not need anymore and should remove.)
      .                   //
      .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
      .                   //
      .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
      .           
     12 ( 0.00%)          if self.features().nll {
      .                       return BorrowckMode::Mir;
      .                   }
      .           
      4 ( 0.00%)          self.sess.opts.borrowck_mode
     16 ( 0.00%)      }
      .           
      .               /// If `true`, we should use lazy normalization for constants, otherwise
      .               /// we still evaluate them eagerly.
      .               #[inline]
      .               pub fn lazy_normalization(self) -> bool {
      .                   let features = self.features();
      .                   // Note: We only use lazy normalization for generic const expressions.
      .                   features.generic_const_exprs
-- line 1434 ----------------------------------------
-- line 1554 ----------------------------------------
      .                   self.mk_imm_ref(
      .                       self.lifetimes.re_static,
      .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
      .                           .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
      .                   )
      .               }
      .           
      .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
     44 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
     32 ( 0.00%)          match self.def_kind(def_id) {
      .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
      .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
      .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
      .                       },
     72 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
      .                   }
     36 ( 0.00%)      }
      .           
      .               pub fn type_length_limit(self) -> Limit {
      .                   self.limits(()).type_length_limit
      .               }
      .           
 29,155 ( 0.01%)      pub fn recursion_limit(self) -> Limit {
      .                   self.limits(()).recursion_limit
 33,320 ( 0.02%)      }
      .           
      .               pub fn move_size_limit(self) -> Limit {
      .                   self.limits(()).move_size_limit
      .               }
      .           
     35 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
      .                   self.limits(()).const_eval_limit
     40 ( 0.00%)      }
      .           
      .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
      .                   iter::once(LOCAL_CRATE)
      .                       .chain(self.crates(()).iter().copied())
      .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
      .               }
      .           }
      .           
-- line 1594 ----------------------------------------
-- line 1684 ----------------------------------------
      .               /// This is the implicit state of rustc. It contains the current
      .               /// `TyCtxt` and query. It is updated when creating a local interner or
      .               /// executing a new query. Whenever there's a `TyCtxt` value available
      .               /// you should also have access to an `ImplicitCtxt` through the functions
      .               /// in this module.
      .               #[derive(Clone)]
      .               pub struct ImplicitCtxt<'a, 'tcx> {
      .                   /// The current `TyCtxt`.
      1 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
      .           
      .                   /// The current query job, if any. This is updated by `JobOwner::start` in
      .                   /// `ty::query::plumbing` when executing a query.
      .                   pub query: Option<query::QueryJobId<DepKind>>,
      .           
      .                   /// Where to store diagnostics for the current query job, if any.
      .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
      .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
      .                   pub layout_depth: usize,
      .           
      .                   /// The current dep graph task. This is used to add dependencies to queries
      .                   /// when executing them.
      .                   pub task_deps: TaskDepsRef<'a>,
      .               }
      .           
      .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
      5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
      .                       let tcx = TyCtxt { gcx };
     25 ( 0.00%)              ImplicitCtxt {
      .                           tcx,
      .                           query: None,
      .                           diagnostics: None,
      .                           layout_depth: 0,
      .                           task_deps: TaskDepsRef::Ignore,
      .                       }
      5 ( 0.00%)          }
      .               }
      .           
      .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
      .               /// to `value` during the call to `f`. It is restored to its previous value after.
      .               /// This is used to set the pointer to the new `ImplicitCtxt`.
      .               #[cfg(parallel_compiler)]
      .               #[inline]
      .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
      .           
      .               /// Sets TLV to `value` during the call to `f`.
      .               /// It is restored to its previous value after.
      .               /// This is used to set the pointer to the new `ImplicitCtxt`.
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
      .                   let old = get_tlv();
  9,024 ( 0.00%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
      .                   TLV.with(|tlv| tlv.set(value));
      .                   f()
      .               }
      .           
      .               /// Gets the pointer to the current `ImplicitCtxt`.
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
      .               }
      .           
      .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
      .               #[inline]
      .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
      .               where
      .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
      .               {
      1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
      .               }
      .           
      .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
      .               #[inline]
      .               pub fn with_context_opt<F, R>(f: F) -> R
      .               where
      .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
      .               {
      .                   let context = get_tlv();
 36,892 ( 0.02%)          if context == 0 {
      .                       f(None)
      .                   } else {
      .                       // We could get an `ImplicitCtxt` pointer from another thread.
      .                       // Ensure that `ImplicitCtxt` is `Sync`.
      .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
      .           
      .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
      .                   }
-- line 1789 ----------------------------------------
-- line 1805 ----------------------------------------
      .               /// This will panic if you pass it a `TyCtxt` which is different from the current
      .               /// `ImplicitCtxt`'s `tcx` field.
      .               #[inline]
      .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
      .               where
      .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
      .               {
      .                   with_context(|context| unsafe {
 18,228 ( 0.01%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
      .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
 18,188 ( 0.01%)              f(context)
      .                   })
      .               }
      .           
      .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
      .               /// Panics if there is no `ImplicitCtxt` available.
      .               #[inline]
      .               pub fn with<F, R>(f: F) -> R
      .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
      .               fn into_pointer(&self) -> *const () {
      .                   self.0 as *const _ as *const ()
      .               }
      .           }
      .           
      .           #[allow(rustc::usage_of_ty_tykind)]
      .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
      .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
  8,598 ( 0.00%)          &self.0.kind()
      .               }
      .           }
      .           
      .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
      .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
      .           
      .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
 21,492 ( 0.01%)          self.0.kind().hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
  2,241 ( 0.00%)          &self.0.kind
      .               }
      .           }
      .           
      .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
      .           
      .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  3,580 ( 0.00%)          self.0.kind.hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
      .               fn borrow<'a>(&'a self) -> &'a [T] {
  7,119 ( 0.00%)          &self.0[..]
      .               }
      .           }
      .           
      .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
      .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
      .           
      .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  4,561 ( 0.00%)          self.0[..].hash(s)
      .               }
      .           }
      .           
      .           macro_rules! direct_interners {
      .               ($($name:ident: $method:ident($ty:ty),)+) => {
      .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
      .                       fn borrow<'a>(&'a self) -> &'a $ty {
  3,188 ( 0.00%)                  &self.0
      .                       }
      .                   }
      .           
      .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
      .                       fn eq(&self, other: &Self) -> bool {
      .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
      .                           // equals `x == y`.
      .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
      .                   }
      .           
      .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
      .           
      .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
      .                       fn hash<H: Hasher>(&self, s: &mut H) {
      .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
      .                           // x.hash(s)`.
  7,017 ( 0.00%)                  self.0.hash(s)
      .                       }
      .                   }
      .           
      .                   impl<'tcx> TyCtxt<'tcx> {
 38,098 ( 0.02%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
 20,963 ( 0.01%)                  self.interners.$name.intern(v, |v| {
  1,690 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
      .                           }).0
 43,056 ( 0.02%)              }
      .                   })+
      .               }
      .           }
      .           
      .           direct_interners! {
      .               region: mk_region(RegionKind),
      .               const_: mk_const(Const<'tcx>),
      .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
      .               adt_def: intern_adt_def(AdtDef),
      .               stability: intern_stability(attr::Stability),
      .               const_stability: intern_const_stability(attr::ConstStability),
      .           }
      .           
      .           macro_rules! slice_interners {
      .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
      .                   impl<'tcx> TyCtxt<'tcx> {
104,432 ( 0.05%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
      .                           self.interners.$field.intern_ref(v, || {
      .                               Interned(List::from_arena(&*self.arena, v))
      .                           }).0
 93,438 ( 0.04%)              })+
      .                   }
      .               );
      .           }
      .           
      .           slice_interners!(
      .               type_list: _intern_type_list(Ty<'tcx>),
      .               substs: _intern_substs(GenericArg<'tcx>),
      .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2188 ----------------------------------------
      .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
      .                   })
      .               }
      .           
      .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
      .               /// `*r == kind`.
      .               #[inline]
      .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
  3,300 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
      .               }
      .           
      .               #[allow(rustc::usage_of_ty_tykind)]
      .               #[inline]
      .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
 84,281 ( 0.04%)          self.interners.intern_ty(st)
      .               }
      .           
      .               #[inline]
      .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
 45,797 ( 0.02%)          let inner = self.interners.intern_predicate(binder);
      .                   Predicate { inner }
      .               }
      .           
      .               #[inline]
 25,400 ( 0.01%)      pub fn reuse_or_mk_predicate(
      .                   self,
      .                   pred: Predicate<'tcx>,
      .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
      .               ) -> Predicate<'tcx> {
  1,323 ( 0.00%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
 25,400 ( 0.01%)      }
      .           
      .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
      .                   match tm {
      .                       IntTy::Isize => self.types.isize,
      .                       IntTy::I8 => self.types.i8,
      .                       IntTy::I16 => self.types.i16,
      .                       IntTy::I32 => self.types.i32,
      .                       IntTy::I64 => self.types.i64,
      .                       IntTy::I128 => self.types.i128,
      .                   }
      .               }
      .           
      .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
      4 ( 0.00%)          match tm {
      .                       UintTy::Usize => self.types.usize,
      .                       UintTy::U8 => self.types.u8,
      .                       UintTy::U16 => self.types.u16,
      .                       UintTy::U32 => self.types.u32,
      .                       UintTy::U64 => self.types.u64,
      .                       UintTy::U128 => self.types.u128,
      .                   }
      4 ( 0.00%)      }
      .           
      .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
      .                   match tm {
      .                       FloatTy::F32 => self.types.f32,
      .                       FloatTy::F64 => self.types.f64,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn mk_static_str(self) -> Ty<'tcx> {
     50 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
      .               }
      .           
      .               #[inline]
      .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   // Take a copy of substs so that we own the vectors inside.
      .                   self.mk_ty(Adt(def, substs))
      .               }
      .           
-- line 2259 ----------------------------------------
-- line 2329 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
      .               }
      .           
      .               #[inline]
    115 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
      .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
    120 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(Slice(ty))
      .               }
      .           
      .               #[inline]
      .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
      .                   let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
      3 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
      .               }
      .           
      .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
    510 ( 0.00%)          iter.intern_with(|ts| {
     88 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
    404 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
    459 ( 0.00%)          })
      .               }
      .           
      .               #[inline]
      .               pub fn mk_unit(self) -> Ty<'tcx> {
     38 ( 0.00%)          self.types.unit
      .               }
      .           
      .               #[inline]
      .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
     16 ( 0.00%)          if self.features().never_type_fallback { self.types.never } else { self.types.unit }
      .               }
      .           
      .               #[inline]
      .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(FnDef(def_id, substs))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
     86 ( 0.00%)          self.mk_ty(FnPtr(fty))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_dynamic(
      .                   self,
      .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
      .                   reg: ty::Region<'tcx>,
      .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2445 ----------------------------------------
      .                   self.mk_ty(Param(ParamTy { index, name }))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
      .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
      .               }
      .           
    126 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
     88 ( 0.00%)          match param.kind {
      .                       GenericParamDefKind::Lifetime => {
      6 ( 0.00%)                  self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
      .                       }
     34 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
      .                       GenericParamDefKind::Const { .. } => {
      .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
      .                       }
      .                   }
    126 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(Opaque(def_id, substs))
      .               }
      .           
      .               pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
      .                   self.mk_place_elem(place, PlaceElem::Field(f, ty))
-- line 2471 ----------------------------------------
-- line 2504 ----------------------------------------
      .               /// flight.
      .               pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
      .                   let mut projection = place.projection.to_vec();
      .                   projection.push(elem);
      .           
      .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
      .               }
      .           
      7 ( 0.00%)      pub fn intern_poly_existential_predicates(
      .                   self,
      .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
      .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
      1 ( 0.00%)          assert!(!eps.is_empty());
      .                   assert!(
      .                       eps.array_windows()
      5 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
      .                               != Ordering::Greater)
      .                   );
      4 ( 0.00%)          self._intern_poly_existential_predicates(eps)
      8 ( 0.00%)      }
      .           
      .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
      .                   // FIXME consider asking the input slice to be sorted to avoid
      .                   // re-interning permutations, in which case that would be asserted
      .                   // here.
    240 ( 0.00%)          if preds.is_empty() {
      .                       // The macro-generated method below asserts we don't intern an empty slice.
      .                       List::empty()
      .                   } else {
     68 ( 0.00%)              self._intern_predicates(preds)
      .                   }
    344 ( 0.00%)      }
      .           
      .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
  1,419 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
    118 ( 0.00%)      }
      .           
      .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
 18,358 ( 0.01%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
  3,434 ( 0.00%)      }
      .           
      .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
      .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
      .               }
      .           
      .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
    574 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
    420 ( 0.00%)      }
      .           
      .               pub fn intern_canonical_var_infos(
      .                   self,
      .                   ts: &[CanonicalVarInfo<'tcx>],
      .               ) -> CanonicalVarInfos<'tcx> {
    885 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
     54 ( 0.00%)      }
      .           
      .               pub fn intern_bound_variable_kinds(
      .                   self,
      .                   ts: &[ty::BoundVariableKind],
      .               ) -> &'tcx List<ty::BoundVariableKind> {
    318 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
    432 ( 0.00%)      }
      .           
      .               pub fn mk_fn_sig<I>(
      .                   self,
      .                   inputs: I,
      .                   output: I::Item,
      .                   c_variadic: bool,
      .                   unsafety: hir::Unsafety,
      .                   abi: abi::Abi,
      .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
      .               where
      .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
      .               {
      .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
     27 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
      6 ( 0.00%)              c_variadic,
      7 ( 0.00%)              unsafety,
     10 ( 0.00%)              abi,
     10 ( 0.00%)          })
      .               }
      .           
      .               pub fn mk_poly_existential_predicates<
      .                   I: InternAs<
      .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
      .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
      .                   >,
      .               >(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
      4 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
      .               }
      .           
      .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
      .                   iter.intern_with(|xs| self.intern_predicates(xs))
      .               }
      .           
      .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
    362 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
      .               }
      .           
      .               pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
 29,828 ( 0.01%)          iter.intern_with(|xs| self.intern_substs(xs))
      .               }
      .           
      .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
    385 ( 0.00%)          iter.intern_with(|xs| self.intern_place_elems(xs))
      .               }
      .           
  1,128 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
      .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
  2,256 ( 0.00%)      }
      .           
      .               pub fn mk_bound_variable_kinds<
      .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
      .               >(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
  2,050 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
      .               }
      .           
      .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
      .               /// It stops at `bound` and just returns it if reached.
  9,912 ( 0.00%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
  9,912 ( 0.00%)          let hir = self.hir();
      .                   loop {
 37,974 ( 0.02%)              if id == bound {
      .                           return bound;
      .                       }
      .           
 56,370 ( 0.03%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
      .                           return id;
      .                       }
      .                       let next = hir.get_parent_node(id);
 33,726 ( 0.02%)              if next == id {
      .                           bug!("lint traversal reached the root of the crate");
      .                       }
      .                       id = next;
      .                   }
 14,160 ( 0.01%)      }
      .           
    272 ( 0.00%)      pub fn lint_level_at_node(
      .                   self,
      .                   lint: &'static Lint,
      .                   mut id: hir::HirId,
      .               ) -> (Level, LintLevelSource) {
      .                   let sets = self.lint_levels(());
      .                   loop {
  4,454 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
      .                           return pair;
      .                       }
    442 ( 0.00%)              let next = self.hir().get_parent_node(id);
  1,326 ( 0.00%)              if next == id {
      .                           bug!("lint traversal reached the root of the crate");
      .                       }
      .                       id = next;
      .                   }
    272 ( 0.00%)      }
      .           
      .               pub fn struct_span_lint_hir(
      .                   self,
      .                   lint: &'static Lint,
      .                   hir_id: HirId,
      .                   span: impl Into<MultiSpan>,
      .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
      .               ) {
    132 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
     30 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
      .               }
      .           
      .               pub fn struct_lint_node(
      .                   self,
      .                   lint: &'static Lint,
      .                   id: HirId,
      .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
      .               ) {
      .                   let (level, src) = self.lint_level_at_node(lint, id);
      .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
      .               }
      .           
    364 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
    104 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
      .                   let candidates = map.get(&id.local_id)?;
    104 ( 0.00%)          Some(&*candidates)
    416 ( 0.00%)      }
      .           
     49 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
      .                   debug!(?id, "named_region");
      .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
     63 ( 0.00%)      }
      .           
      .               pub fn is_late_bound(self, id: HirId) -> bool {
      .                   self.is_late_bound_map(id.owner)
      .                       .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
      .               }
      .           
    126 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
      .                   self.object_lifetime_defaults_map(id.owner)
    162 ( 0.00%)      }
      .           
     27 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
      .                   self.mk_bound_variable_kinds(
      .                       self.late_bound_vars_map(id.owner)
      .                           .and_then(|map| map.get(&id.local_id).cloned())
      .                           .unwrap_or_else(|| {
      .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
      .                           })
      .                           .iter(),
      .                   )
     27 ( 0.00%)      }
      .           
      .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
      .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
      .               }
      .           
      .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
      .               /// feature gates
     20 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
      2 ( 0.00%)          if self.is_const_fn_raw(def_id) {
      .                       match self.lookup_const_stability(def_id) {
      .                           Some(stability) if stability.level.is_unstable() => {
      .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
      .                               // corresponding feature gate.
      .                               self.features()
      .                                   .declared_lib_features
      .                                   .iter()
      .                                   .any(|&(sym, _)| sym == stability.feature)
-- line 2741 ----------------------------------------
-- line 2743 ----------------------------------------
      .                           // functions without const stability are either stable user written
      .                           // const fn or the user is using feature gates and we thus don't
      .                           // care what they do
      .                           _ => true,
      .                       }
      .                   } else {
      .                       false
      .                   }
     18 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> TyCtxtAt<'tcx> {
      .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
      .               #[track_caller]
      .               pub fn ty_error(self) -> Ty<'tcx> {
      .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
      .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
      .           }
      .           
      .           impl<I, T, R, E> InternAs<[T], R> for I
      .           where
      .               E: InternIteratorElement<T, R>,
      .               I: Iterator<Item = E>,
      .           {
      .               type Output = E::Output;
 14,664 ( 0.01%)      fn intern_with<F>(self, f: F) -> Self::Output
      .               where
      .                   F: FnOnce(&[T]) -> R,
      .               {
 48,665 ( 0.02%)          E::intern_with(self, f)
 11,826 ( 0.01%)      }
      .           }
      .           
      .           pub trait InternIteratorElement<T, R>: Sized {
      .               type Output;
      .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
      .           }
      .           
      .           impl<T, R> InternIteratorElement<T, R> for T {
      .               type Output = R;
  6,994 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
      .                   mut iter: I,
      .                   f: F,
      .               ) -> Self::Output {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
      .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
      .                   // `assert`.
 13,901 ( 0.01%)          match iter.size_hint() {
      .                       (0, Some(0)) => {
      .                           assert!(iter.next().is_none());
      .                           f(&[])
      .                       }
      .                       (1, Some(1)) => {
      .                           let t0 = iter.next().unwrap();
      .                           assert!(iter.next().is_none());
  2,002 ( 0.00%)                  f(&[t0])
      .                       }
      .                       (2, Some(2)) => {
      .                           let t0 = iter.next().unwrap();
      .                           let t1 = iter.next().unwrap();
      2 ( 0.00%)                  assert!(iter.next().is_none());
  1,302 ( 0.00%)                  f(&[t0, t1])
      .                       }
     16 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
      .                   }
  6,638 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
      .           where
      .               T: Clone + 'a,
      .           {
      .               type Output = R;
     28 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
      .                   // This code isn't hot.
      4 ( 0.00%)          f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
     26 ( 0.00%)      }
      .           }
      .           
      .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
      .               type Output = Result<R, E>;
 15,511 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
      .                   mut iter: I,
      .                   f: F,
      .               ) -> Self::Output {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
      .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
      .                   // `assert`, unless a failure happens first, in which case the result
      .                   // will be an error anyway.
 10,886 ( 0.01%)          Ok(match iter.size_hint() {
      .                       (0, Some(0)) => {
      .                           assert!(iter.next().is_none());
      .                           f(&[])
      .                       }
      .                       (1, Some(1)) => {
      .                           let t0 = iter.next().unwrap()?;
      .                           assert!(iter.next().is_none());
    535 ( 0.00%)                  f(&[t0])
      .                       }
      .                       (2, Some(2)) => {
     22 ( 0.00%)                  let t0 = iter.next().unwrap()?;
     22 ( 0.00%)                  let t1 = iter.next().unwrap()?;
     33 ( 0.00%)                  assert!(iter.next().is_none());
  1,054 ( 0.00%)                  f(&[t0, t1])
      .                       }
    110 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
      .                   })
 17,493 ( 0.01%)      }
      .           }
      .           
      .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
      .           // won't work for us.
      .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
 18,228 ( 0.01%)      t as *const () == u as *const ()
      .           }
      .           
      .           pub fn provide(providers: &mut ty::query::Providers) {
      2 ( 0.00%)      providers.in_scope_traits_map =
      .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
      3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
      2 ( 0.00%)      providers.module_reexports =
      .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
      2 ( 0.00%)      providers.crate_name = |tcx, id| {
      1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
      1 ( 0.00%)          tcx.crate_name
      .               };
      2 ( 0.00%)      providers.maybe_unused_trait_import =
      .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
      2 ( 0.00%)      providers.maybe_unused_extern_crates =
      .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
      2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
      .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
      .               };
      .           
     11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
      2 ( 0.00%)      providers.lookup_const_stability =
      .                   |tcx, id| tcx.stability().local_const_stability(id.expect_local());
      2 ( 0.00%)      providers.lookup_deprecation_entry =
     24 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
      2 ( 0.00%)      providers.extern_mod_stmt_cnum =
      .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
      3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
      3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
      2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
      .                   assert_eq!(cnum, LOCAL_CRATE);
      .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
      .               };
      2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
      .                   assert_eq!(cnum, LOCAL_CRATE);
      .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
      .               };
      2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
      1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
      .                   // We want to check if the panic handler was defined in this crate
      3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
      .               };
      .           }

 76,661 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/lib.rs
--------------------------------------------------------------------------------
Ir              

-- line 91 ----------------------------------------
     .           mod late;
     .           mod macros;
     .           
     .           enum Weak {
     .               Yes,
     .               No,
     .           }
     .           
   198 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Debug)]
     .           pub enum Determinacy {
     .               Determined,
     .               Undetermined,
     .           }
     .           
     .           impl Determinacy {
     .               fn determined(determined: bool) -> Determinacy {
     .                   if determined { Determinacy::Determined } else { Determinacy::Undetermined }
   132 ( 0.00%)      }
     .           }
     .           
     .           /// A specific scope in which a name can be looked up.
     .           /// This enum is currently used only for early resolution (imports and macros),
     .           /// but not for late resolution yet.
     .           #[derive(Clone, Copy)]
     .           enum Scope<'a> {
     .               DeriveHelpers(LocalExpnId),
-- line 116 ----------------------------------------
-- line 157 ----------------------------------------
     .               macro_rules: MacroRulesScopeRef<'a>,
     .               derives: &'a [ast::Path],
     .           }
     .           
     .           impl<'a> ParentScope<'a> {
     .               /// Creates a parent scope with the passed argument used as the module scope component,
     .               /// and other scope components set to default empty values.
     .               pub fn module(module: Module<'a>, resolver: &Resolver<'a>) -> ParentScope<'a> {
     8 ( 0.00%)          ParentScope {
     .                       module,
     .                       expansion: LocalExpnId::ROOT,
 1,320 ( 0.00%)              macro_rules: resolver.arenas.alloc_macro_rules_scope(MacroRulesScope::Empty),
     .                       derives: &[],
     .                   }
     .               }
     .           }
     .           
     .           #[derive(Copy, Debug, Clone)]
     .           enum ImplTraitContext {
     .               Existential,
-- line 176 ----------------------------------------
-- line 303 ----------------------------------------
     .           
     .               fn names_to_string(segments: &[Segment]) -> String {
     .                   names_to_string(&segments.iter().map(|seg| seg.ident.name).collect::<Vec<_>>())
     .               }
     .           }
     .           
     .           impl<'a> From<&'a ast::PathSegment> for Segment {
     .               fn from(seg: &'a ast::PathSegment) -> Segment {
    50 ( 0.00%)          Segment { ident: seg.ident, id: Some(seg.id), has_generic_args: seg.args.is_some() }
     .               }
     .           }
     .           
     .           struct UsePlacementFinder {
     .               target_module: NodeId,
     .               span: Option<Span>,
     .               found_use: bool,
     .           }
-- line 319 ----------------------------------------
-- line 418 ----------------------------------------
     .               /// Virtual module that denotes resolution in current scope.
     .               /// Used only for resolving single-segment imports. The reason it exists is that import paths
     .               /// are always split into two parts, the first of which should be some kind of module.
     .               CurrentScope,
     .           }
     .           
     .           impl ModuleOrUniformRoot<'_> {
     .               fn same_def(lhs: Self, rhs: Self) -> bool {
    40 ( 0.00%)          match (lhs, rhs) {
     .                       (ModuleOrUniformRoot::Module(lhs), ModuleOrUniformRoot::Module(rhs)) => {
     .                           ptr::eq(lhs, rhs)
     .                       }
     .                       (
     .                           ModuleOrUniformRoot::CrateRootAndExternPrelude,
     .                           ModuleOrUniformRoot::CrateRootAndExternPrelude,
     .                       )
     .                       | (ModuleOrUniformRoot::ExternPrelude, ModuleOrUniformRoot::ExternPrelude)
-- line 434 ----------------------------------------
-- line 491 ----------------------------------------
     .           /// A key that identifies a binding in a given `Module`.
     .           ///
     .           /// Multiple bindings in the same module can have the same key (in a valid
     .           /// program) if all but one of them come from glob imports.
     .           #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]
     .           struct BindingKey {
     .               /// The identifier for the binding, aways the `normalize_to_macros_2_0` version of the
     .               /// identifier.
19,428 ( 0.01%)      ident: Ident,
 6,258 ( 0.00%)      ns: Namespace,
     .               /// 0 if ident is not `_`, otherwise a value that's unique to the specific
     .               /// `_` in the expanded AST that introduced this binding.
 4,530 ( 0.00%)      disambiguator: u32,
     .           }
     .           
     .           type Resolutions<'a> = RefCell<FxIndexMap<BindingKey, &'a RefCell<NameResolution<'a>>>>;
     .           
     .           /// One node in the tree of modules.
     .           ///
     .           /// Note that a "module" in resolve is broader than a `mod` that you declare in Rust code. It may be one of these:
     .           ///
-- line 511 ----------------------------------------
-- line 551 ----------------------------------------
     .           impl<'a> ModuleData<'a> {
     .               fn new(
     .                   parent: Option<Module<'a>>,
     .                   kind: ModuleKind,
     .                   expansion: ExpnId,
     .                   span: Span,
     .                   no_implicit_prelude: bool,
     .               ) -> Self {
 3,325 ( 0.00%)          let is_foreign = match kind {
     .                       ModuleKind::Def(_, def_id, _) => !def_id.is_local(),
     .                       ModuleKind::Block(_) => false,
     .                   };
10,925 ( 0.01%)          ModuleData {
     .                       parent,
     .                       kind,
     .                       lazy_resolutions: Default::default(),
     .                       populate_on_access: Cell::new(is_foreign),
     .                       unexpanded_invocations: Default::default(),
     .                       no_implicit_prelude,
     .                       glob_importers: RefCell::new(Vec::new()),
     .                       globs: RefCell::new(Vec::new()),
     .                       traits: RefCell::new(None),
     .                       span,
     .                       expansion,
     .                   }
     .               }
     .           
   301 ( 0.00%)      fn for_each_child<R, F>(&'a self, resolver: &mut R, mut f: F)
     .               where
     .                   R: AsMut<Resolver<'a>>,
     .                   F: FnMut(&mut R, Ident, Namespace, &'a NameBinding<'a>),
     .               {
   178 ( 0.00%)          for (key, name_resolution) in resolver.as_mut().resolutions(self).borrow().iter() {
 1,688 ( 0.00%)              if let Some(binding) = name_resolution.borrow().binding {
    75 ( 0.00%)                  f(resolver, key.ident, key.ns, binding);
     .                       }
     .                   }
   240 ( 0.00%)      }
     .           
     .               /// This modifies `self` in place. The traits will be stored in `self.traits`.
     .               fn ensure_traits<R>(&'a self, resolver: &mut R)
     .               where
     .                   R: AsMut<Resolver<'a>>,
     .               {
     .                   let mut traits = self.traits.borrow_mut();
   189 ( 0.00%)          if traits.is_none() {
     .                       let mut collected_traits = Vec::new();
     .                       self.for_each_child(resolver, |_, name, ns, binding| {
   103 ( 0.00%)                  if ns != TypeNS {
     .                               return;
     .                           }
   232 ( 0.00%)                  if let Res::Def(DefKind::Trait | DefKind::TraitAlias, _) = binding.res() {
     .                               collected_traits.push((name, binding))
     .                           }
     .                       });
   180 ( 0.00%)              *traits = Some(collected_traits.into_boxed_slice());
     .                   }
     .               }
     .           
     .               fn res(&self) -> Option<Res> {
 1,843 ( 0.00%)          match self.kind {
 2,690 ( 0.00%)              ModuleKind::Def(kind, def_id, _) => Some(Res::Def(kind, def_id)),
     .                       _ => None,
     .                   }
     .               }
     .           
     .               // Public for rustdoc.
     .               pub fn def_id(&self) -> DefId {
     .                   self.opt_def_id().expect("`ModuleData::def_id` is called on a block module")
     .               }
     .           
     .               fn opt_def_id(&self) -> Option<DefId> {
 2,816 ( 0.00%)          match self.kind {
     .                       ModuleKind::Def(_, def_id, _) => Some(def_id),
     .                       _ => None,
     .                   }
     .               }
     .           
     .               // `self` resolves to the first module ancestor that `is_normal`.
     .               fn is_normal(&self) -> bool {
     7 ( 0.00%)          matches!(self.kind, ModuleKind::Def(DefKind::Mod, _, _))
     .               }
     .           
     .               fn is_trait(&self) -> bool {
     5 ( 0.00%)          matches!(self.kind, ModuleKind::Def(DefKind::Trait, _, _))
     .               }
     .           
     .               fn nearest_item_scope(&'a self) -> Module<'a> {
 1,350 ( 0.00%)          match self.kind {
     .                       ModuleKind::Def(DefKind::Enum | DefKind::Trait, ..) => {
     .                           self.parent.expect("enum or trait module without a parent")
     .                       }
     .                       _ => self,
     .                   }
     .               }
     .           
     .               /// The [`DefId`] of the nearest `mod` item ancestor (which may be this module).
     .               /// This may be the crate root.
 4,475 ( 0.00%)      fn nearest_parent_mod(&self) -> DefId {
12,490 ( 0.01%)          match self.kind {
 3,540 ( 0.00%)              ModuleKind::Def(DefKind::Mod, def_id, _) => def_id,
 5,410 ( 0.00%)              _ => self.parent.expect("non-root module without parent").nearest_parent_mod(),
     .                   }
 8,950 ( 0.00%)      }
     .           
     .               fn is_ancestor_of(&self, mut other: &Self) -> bool {
     .                   while !ptr::eq(self, other) {
     .                       if let Some(parent) = other.parent {
     .                           other = parent;
     .                       } else {
     .                           return false;
     .                       }
-- line 662 ----------------------------------------
-- line 773 ----------------------------------------
     .               b1: &'a NameBinding<'a>,
     .               b2: &'a NameBinding<'a>,
     .               misc1: AmbiguityErrorMisc,
     .               misc2: AmbiguityErrorMisc,
     .           }
     .           
     .           impl<'a> NameBinding<'a> {
     .               fn module(&self) -> Option<Module<'a>> {
14,526 ( 0.01%)          match self.kind {
 1,821 ( 0.00%)              NameBindingKind::Module(module) => Some(module),
   102 ( 0.00%)              NameBindingKind::Import { binding, .. } => binding.module(),
     .                       _ => None,
     .                   }
     .               }
     .           
     .               fn res(&self) -> Res {
15,763 ( 0.01%)          match self.kind {
10,407 ( 0.00%)              NameBindingKind::Res(res, _) => res,
   915 ( 0.00%)              NameBindingKind::Module(module) => module.res().unwrap(),
   262 ( 0.00%)              NameBindingKind::Import { binding, .. } => binding.res(),
     .                   }
     .               }
     .           
     .               fn is_ambiguity(&self) -> bool {
    46 ( 0.00%)          self.ambiguity.is_some()
    52 ( 0.00%)              || match self.kind {
    20 ( 0.00%)                  NameBindingKind::Import { binding, .. } => binding.is_ambiguity(),
     .                           _ => false,
     .                       }
     .               }
     .           
     .               fn is_possibly_imported_variant(&self) -> bool {
     .                   match self.kind {
     .                       NameBindingKind::Import { binding, .. } => binding.is_possibly_imported_variant(),
     .                       NameBindingKind::Res(
-- line 807 ----------------------------------------
-- line 822 ----------------------------------------
     .                           kind: ModuleKind::Def(DefKind::Mod, def_id, _),
     .                           ..
     .                       }) => def_id.index == CRATE_DEF_INDEX,
     .                       _ => false,
     .                   }
     .               }
     .           
     .               fn is_import(&self) -> bool {
    50 ( 0.00%)          matches!(self.kind, NameBindingKind::Import { .. })
     .               }
     .           
     .               fn is_glob_import(&self) -> bool {
 5,123 ( 0.00%)          match self.kind {
    48 ( 0.00%)              NameBindingKind::Import { import, .. } => import.is_glob(),
     .                       _ => false,
     .                   }
     .               }
     .           
     .               fn is_importable(&self) -> bool {
    14 ( 0.00%)          !matches!(
     .                       self.res(),
     .                       Res::Def(DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy, _)
     .                   )
     .               }
     .           
     .               fn is_macro_def(&self) -> bool {
     7 ( 0.00%)          matches!(self.kind, NameBindingKind::Res(Res::Def(DefKind::Macro(..), _), _))
     .               }
     .           
     .               fn macro_kind(&self) -> Option<MacroKind> {
     .                   self.res().macro_kind()
     .               }
     .           
     .               // Suppose that we resolved macro invocation with `invoc_parent_expansion` to binding `binding`
     .               // at some expansion round `max(invoc, binding)` when they both emerged from macros.
-- line 856 ----------------------------------------
-- line 1065 ----------------------------------------
     .               /// they are declared in the static array generated by proc_macro_harness.
     .               proc_macros: Vec<NodeId>,
     .               confused_type_with_std_module: FxHashMap<Span, Span>,
     .           
     .               access_levels: AccessLevels,
     .           }
     .           
     .           /// Nothing really interesting here; it just provides memory for the rest of the crate.
     7 ( 0.00%)  #[derive(Default)]
     .           pub struct ResolverArenas<'a> {
     .               modules: TypedArena<ModuleData<'a>>,
     .               local_modules: RefCell<Vec<Module<'a>>>,
     .               imports: TypedArena<Import<'a>>,
     .               name_resolutions: TypedArena<RefCell<NameResolution<'a>>>,
     .               ast_paths: TypedArena<ast::Path>,
     .               dropless: DroplessArena,
     .           }
     .           
     .           impl<'a> ResolverArenas<'a> {
 6,175 ( 0.00%)      fn new_module(
     .                   &'a self,
     .                   parent: Option<Module<'a>>,
     .                   kind: ModuleKind,
     .                   expn_id: ExpnId,
     .                   span: Span,
     .                   no_implicit_prelude: bool,
     .                   module_map: &mut FxHashMap<DefId, Module<'a>>,
     .               ) -> Module<'a> {
     .                   let module =
     .                       self.modules.alloc(ModuleData::new(parent, kind, expn_id, span, no_implicit_prelude));
     .                   let def_id = module.opt_def_id();
 1,425 ( 0.00%)          if def_id.map_or(true, |def_id| def_id.is_local()) {
     .                       self.local_modules.borrow_mut().push(module);
     .                   }
   475 ( 0.00%)          if let Some(def_id) = def_id {
     .                       module_map.insert(def_id, module);
     .                   }
     .                   module
 4,275 ( 0.00%)      }
     .               fn local_modules(&'a self) -> std::cell::Ref<'a, Vec<Module<'a>>> {
     .                   self.local_modules.borrow()
     .               }
     .               fn alloc_name_binding(&'a self, name_binding: NameBinding<'a>) -> &'a NameBinding<'a> {
     .                   self.dropless.alloc(name_binding)
     .               }
    28 ( 0.00%)      fn alloc_import(&'a self, import: Import<'a>) -> &'a Import<'_> {
   276 ( 0.00%)          self.imports.alloc(import)
    28 ( 0.00%)      }
     .               fn alloc_name_resolution(&'a self) -> &'a RefCell<NameResolution<'a>> {
 1,603 ( 0.00%)          self.name_resolutions.alloc(Default::default())
     .               }
     .               fn alloc_macro_rules_scope(&'a self, scope: MacroRulesScope<'a>) -> MacroRulesScopeRef<'a> {
     .                   PtrKey(self.dropless.alloc(Cell::new(scope)))
     .               }
     .               fn alloc_macro_rules_binding(
     .                   &'a self,
     .                   binding: MacroRulesBinding<'a>,
     .               ) -> &'a MacroRulesBinding<'a> {
-- line 1122 ----------------------------------------
-- line 1133 ----------------------------------------
     .           impl<'a> AsMut<Resolver<'a>> for Resolver<'a> {
     .               fn as_mut(&mut self) -> &mut Resolver<'a> {
     .                   self
     .               }
     .           }
     .           
     .           impl<'a, 'b> DefIdTree for &'a Resolver<'b> {
     .               fn parent(self, id: DefId) -> Option<DefId> {
    35 ( 0.00%)          match id.as_local() {
     .                       Some(id) => self.definitions.def_key(id).parent,
     .                       None => self.cstore().def_key(id).parent,
     .                   }
     .                   .map(|index| DefId { index, ..id })
     .               }
     .           }
     .           
     .           /// This interface is used through the AST→HIR step, to embed full paths into the HIR. After that
     .           /// the resolver is no longer needed as all the relevant information is inline.
     .           impl ResolverAstLowering for Resolver<'_> {
     .               fn def_key(&mut self, id: DefId) -> DefKey {
     .                   if let Some(id) = id.as_local() {
     .                       self.definitions().def_key(id)
     .                   } else {
 8,600 ( 0.00%)              self.cstore().def_key(id)
     .                   }
     .               }
     .           
     .               #[inline]
     .               fn def_span(&self, id: LocalDefId) -> Span {
     .                   self.definitions.def_span(id)
     .               }
     .           
   252 ( 0.00%)      fn item_generics_num_lifetimes(&self, def_id: DefId) -> usize {
    42 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
     .                       self.item_generics_num_lifetimes[&def_id]
     .                   } else {
   336 ( 0.00%)              self.cstore().item_generics_num_lifetimes(def_id, self.session)
     .                   }
     .               }
     .           
   212 ( 0.00%)      fn legacy_const_generic_args(&mut self, expr: &Expr) -> Option<Vec<usize>> {
   106 ( 0.00%)          self.legacy_const_generic_args(expr)
   318 ( 0.00%)      }
     .           
 1,068 ( 0.00%)      fn get_partial_res(&self, id: NodeId) -> Option<PartialRes> {
     .                   self.partial_res_map.get(&id).cloned()
 3,204 ( 0.00%)      }
     .           
    40 ( 0.00%)      fn get_import_res(&mut self, id: NodeId) -> PerNS<Option<Res>> {
    10 ( 0.00%)          self.import_res_map.get(&id).cloned().unwrap_or_default()
    50 ( 0.00%)      }
     .           
     .               fn get_label_res(&mut self, id: NodeId) -> Option<NodeId> {
     .                   self.label_res_map.get(&id).cloned()
     .               }
     .           
     .               fn definitions(&mut self) -> &mut Definitions {
    21 ( 0.00%)          &mut self.definitions
    21 ( 0.00%)      }
     .           
   168 ( 0.00%)      fn create_stable_hashing_context(&self) -> StableHashingContext<'_> {
 2,914 ( 0.00%)          StableHashingContext::new(self.session, &self.definitions, self.crate_loader.cstore())
   210 ( 0.00%)      }
     .           
     .               fn lint_buffer(&mut self) -> &mut LintBuffer {
     .                   &mut self.lint_buffer
     .               }
     .           
     .               fn next_node_id(&mut self) -> NodeId {
     .                   self.next_node_id()
     .               }
     .           
 6,956 ( 0.00%)      fn take_trait_map(&mut self, node: NodeId) -> Option<Vec<TraitCandidate>> {
     .                   self.trait_map.remove(&node)
 6,956 ( 0.00%)      }
     .           
 7,062 ( 0.00%)      fn opt_local_def_id(&self, node: NodeId) -> Option<LocalDefId> {
   181 ( 0.00%)          self.node_id_to_def_id.get(&node).copied()
 7,062 ( 0.00%)      }
     .           
    94 ( 0.00%)      fn local_def_id(&self, node: NodeId) -> LocalDefId {
     .                   self.opt_local_def_id(node).unwrap_or_else(|| panic!("no entry for node id: `{:?}`", node))
    94 ( 0.00%)      }
     .           
     .               fn def_path_hash(&self, def_id: DefId) -> DefPathHash {
     .                   match def_id.as_local() {
     .                       Some(def_id) => self.definitions.def_path_hash(def_id),
     .                       None => self.cstore().def_path_hash(def_id),
     .                   }
     .               }
     .           
     .               /// Adds a definition with a parent definition.
   420 ( 0.00%)      fn create_def(
     .                   &mut self,
     .                   parent: LocalDefId,
     .                   node_id: ast::NodeId,
     .                   data: DefPathData,
     .                   expn_id: ExpnId,
     .                   span: Span,
     .               ) -> LocalDefId {
    56 ( 0.00%)          assert!(
    56 ( 0.00%)              !self.node_id_to_def_id.contains_key(&node_id),
     .                       "adding a def'n for node-id {:?} and data {:?} but a previous def'n exists: {:?}",
     .                       node_id,
     .                       data,
     .                       self.definitions.def_key(self.node_id_to_def_id[&node_id]),
     .                   );
     .           
     .                   // Find the next free disambiguator for this key.
    28 ( 0.00%)          let next_disambiguator = &mut self.next_disambiguator;
     .                   let next_disambiguator = |parent, data| {
   140 ( 0.00%)              let next_disamb = next_disambiguator.entry((parent, data)).or_insert(0);
    28 ( 0.00%)              let disambiguator = *next_disamb;
    28 ( 0.00%)              *next_disamb = next_disamb.checked_add(1).expect("disambiguator overflow");
     .                       disambiguator
     .                   };
     .           
   280 ( 0.00%)          let def_id = self.definitions.create_def(parent, data, expn_id, next_disambiguator, span);
     .           
     .                   // Some things for which we allocate `LocalDefId`s don't correspond to
     .                   // anything in the AST, so they don't have a `NodeId`. For these cases
     .                   // we don't need a mapping from `NodeId` to `LocalDefId`.
    84 ( 0.00%)          if node_id != ast::DUMMY_NODE_ID {
     .                       debug!("create_def: def_id_to_node_id[{:?}] <-> {:?}", def_id, node_id);
     .                       self.node_id_to_def_id.insert(node_id, def_id);
     .                   }
    84 ( 0.00%)          assert_eq!(self.def_id_to_node_id.push(node_id), def_id);
     .           
     .                   def_id
   252 ( 0.00%)      }
     .           }
     .           
     .           impl<'a> Resolver<'a> {
    16 ( 0.00%)      pub fn new(
     .                   session: &'a Session,
     .                   krate: &Crate,
     .                   crate_name: &str,
     .                   metadata_loader: Box<MetadataLoaderDyn>,
     .                   arenas: &'a ResolverArenas<'a>,
     .               ) -> Resolver<'a> {
     .                   let root_def_id = CRATE_DEF_ID.to_def_id();
     .                   let mut module_map = FxHashMap::default();
    14 ( 0.00%)          let graph_root = arenas.new_module(
     .                       None,
     .                       ModuleKind::Def(DefKind::Mod, root_def_id, kw::Empty),
     1 ( 0.00%)              ExpnId::root(),
     1 ( 0.00%)              krate.span,
     2 ( 0.00%)              session.contains_name(&krate.attrs, sym::no_implicit_prelude),
     .                       &mut module_map,
     .                   );
    12 ( 0.00%)          let empty_module = arenas.new_module(
     .                       None,
     .                       ModuleKind::Def(DefKind::Mod, root_def_id, kw::Empty),
     1 ( 0.00%)              ExpnId::root(),
     .                       DUMMY_SP,
     .                       true,
     .                       &mut FxHashMap::default(),
     .                   );
     .           
     4 ( 0.00%)          let definitions = Definitions::new(session.local_stable_crate_id(), krate.span);
     2 ( 0.00%)          let root = definitions.get_root_def();
     .           
     .                   let mut visibilities = FxHashMap::default();
     .                   visibilities.insert(CRATE_DEF_ID, ty::Visibility::Public);
     .           
     .                   let mut def_id_to_node_id = IndexVec::default();
     2 ( 0.00%)          assert_eq!(def_id_to_node_id.push(CRATE_NODE_ID), root);
     .                   let mut node_id_to_def_id = FxHashMap::default();
     .                   node_id_to_def_id.insert(CRATE_NODE_ID, root);
     .           
     .                   let mut invocation_parents = FxHashMap::default();
     .                   invocation_parents.insert(LocalExpnId::ROOT, (root, ImplTraitContext::Existential));
     .           
     3 ( 0.00%)          let mut extern_prelude: FxHashMap<Ident, ExternPreludeEntry<'_>> = session
     .                       .opts
     .                       .externs
     .                       .iter()
     4 ( 0.00%)              .filter(|(_, entry)| entry.add_prelude)
     4 ( 0.00%)              .map(|(name, _)| (Ident::from_str(name), Default::default()))
     .                       .collect();
     .           
     9 ( 0.00%)          if !session.contains_name(&krate.attrs, sym::no_core) {
     .                       extern_prelude.insert(Ident::with_dummy_span(sym::core), Default::default());
     7 ( 0.00%)              if !session.contains_name(&krate.attrs, sym::no_std) {
     .                           extern_prelude.insert(Ident::with_dummy_span(sym::std), Default::default());
     .                       }
     .                   }
     .           
     8 ( 0.00%)          let (registered_attrs, registered_tools) =
     4 ( 0.00%)              macros::registered_attrs_and_tools(session, &krate.attrs);
     .           
     .                   let features = session.features_untracked();
     .           
   237 ( 0.00%)          let mut resolver = Resolver {
     .                       session,
     .           
     2 ( 0.00%)              definitions,
     .           
     .                       // The outermost module has def ID 0; this is not reflected in the
     .                       // AST.
     .                       graph_root,
     .                       prelude: None,
     4 ( 0.00%)              extern_prelude,
     .           
     .                       has_self: FxHashSet::default(),
     .                       field_names: FxHashMap::default(),
     .           
     .                       determined_imports: Vec::new(),
     .                       indeterminate_imports: Vec::new(),
     .           
     .                       last_import_segment: false,
-- line 1343 ----------------------------------------
-- line 1347 ----------------------------------------
     .                       partial_res_map: Default::default(),
     .                       import_res_map: Default::default(),
     .                       label_res_map: Default::default(),
     .                       extern_crate_map: Default::default(),
     .                       reexport_map: FxHashMap::default(),
     .                       trait_map: NodeMap::default(),
     .                       underscore_disambiguator: 0,
     .                       empty_module,
     4 ( 0.00%)              module_map,
     .                       block_map: Default::default(),
     .                       binding_parent_modules: FxHashMap::default(),
     .                       ast_transform_scopes: FxHashMap::default(),
     .           
     .                       glob_map: Default::default(),
     4 ( 0.00%)              visibilities,
     .                       used_imports: FxHashSet::default(),
     .                       maybe_unused_trait_imports: Default::default(),
     .                       maybe_unused_extern_crates: Vec::new(),
     .           
     .                       privacy_errors: Vec::new(),
     .                       ambiguity_errors: Vec::new(),
     .                       use_injections: Vec::new(),
     .                       macro_expanded_macro_export_errors: BTreeSet::new(),
-- line 1369 ----------------------------------------
-- line 1372 ----------------------------------------
     .                       dummy_binding: arenas.alloc_name_binding(NameBinding {
     .                           kind: NameBindingKind::Res(Res::Err, false),
     .                           ambiguity: None,
     .                           expansion: LocalExpnId::ROOT,
     .                           span: DUMMY_SP,
     .                           vis: ty::Visibility::Public,
     .                       }),
     .           
     6 ( 0.00%)              crate_loader: CrateLoader::new(session, metadata_loader, crate_name),
     .                       macro_names: FxHashSet::default(),
     .                       builtin_macros: Default::default(),
     4 ( 0.00%)              registered_attrs,
     4 ( 0.00%)              registered_tools,
     .                       macro_use_prelude: FxHashMap::default(),
     .                       all_macros: FxHashMap::default(),
     .                       macro_map: FxHashMap::default(),
     7 ( 0.00%)              dummy_ext_bang: Lrc::new(SyntaxExtension::dummy_bang(session.edition())),
     6 ( 0.00%)              dummy_ext_derive: Lrc::new(SyntaxExtension::dummy_derive(session.edition())),
     5 ( 0.00%)              non_macro_attr: Lrc::new(SyntaxExtension::non_macro_attr(session.edition())),
     .                       invocation_parent_scopes: Default::default(),
     .                       output_macro_rules_scopes: Default::default(),
     .                       helper_attrs: Default::default(),
     .                       derive_data: Default::default(),
     .                       local_macro_def_scopes: FxHashMap::default(),
     .                       name_already_seen: FxHashMap::default(),
     .                       potentially_unused_imports: Vec::new(),
     .                       struct_constructors: Default::default(),
-- line 1398 ----------------------------------------
-- line 1405 ----------------------------------------
     .                       active_features: features
     .                           .declared_lib_features
     .                           .iter()
     .                           .map(|(feat, ..)| *feat)
     .                           .chain(features.declared_lang_features.iter().map(|(feat, ..)| *feat))
     .                           .collect(),
     .                       lint_buffer: LintBuffer::default(),
     .                       next_node_id: CRATE_NODE_ID,
     4 ( 0.00%)              node_id_to_def_id,
     4 ( 0.00%)              def_id_to_node_id,
     .                       placeholder_field_indices: Default::default(),
     4 ( 0.00%)              invocation_parents,
     .                       next_disambiguator: Default::default(),
     .                       trait_impl_items: Default::default(),
     .                       legacy_const_generic_args: Default::default(),
     .                       item_generics_num_lifetimes: Default::default(),
     .                       main_def: Default::default(),
     .                       trait_impls: Default::default(),
     .                       proc_macros: Default::default(),
     .                       confused_type_with_std_module: Default::default(),
     .                       access_levels: Default::default(),
     .                   };
     .           
     .                   let root_parent_scope = ParentScope::module(graph_root, &resolver);
     .                   resolver.invocation_parent_scopes.insert(LocalExpnId::ROOT, root_parent_scope);
     .           
     .                   resolver
     9 ( 0.00%)      }
     .           
     .               fn new_module(
     .                   &mut self,
     .                   parent: Option<Module<'a>>,
     .                   kind: ModuleKind,
     .                   expn_id: ExpnId,
     .                   span: Span,
     .                   no_implicit_prelude: bool,
     .               ) -> Module<'a> {
    27 ( 0.00%)          let module_map = &mut self.module_map;
 4,784 ( 0.00%)          self.arenas.new_module(parent, kind, expn_id, span, no_implicit_prelude, module_map)
     .               }
     .           
     .               pub fn next_node_id(&mut self) -> NodeId {
     .                   let next =
 1,810 ( 0.00%)              self.next_node_id.as_u32().checked_add(1).expect("input too large; ran out of NodeIds");
     .                   mem::replace(&mut self.next_node_id, ast::NodeId::from_u32(next))
     .               }
     .           
     .               pub fn lint_buffer(&mut self) -> &mut LintBuffer {
     3 ( 0.00%)          &mut self.lint_buffer
     3 ( 0.00%)      }
     .           
     1 ( 0.00%)      pub fn arenas() -> ResolverArenas<'a> {
     .                   Default::default()
     1 ( 0.00%)      }
     .           
     9 ( 0.00%)      pub fn into_outputs(self) -> ResolverOutputs {
     .                   let proc_macros = self.proc_macros.iter().map(|id| self.local_def_id(*id)).collect();
     1 ( 0.00%)          let definitions = self.definitions;
     4 ( 0.00%)          let visibilities = self.visibilities;
     4 ( 0.00%)          let extern_crate_map = self.extern_crate_map;
     4 ( 0.00%)          let reexport_map = self.reexport_map;
     4 ( 0.00%)          let maybe_unused_trait_imports = self.maybe_unused_trait_imports;
     4 ( 0.00%)          let maybe_unused_extern_crates = self.maybe_unused_extern_crates;
     4 ( 0.00%)          let glob_map = self.glob_map;
     6 ( 0.00%)          let main_def = self.main_def;
     4 ( 0.00%)          let confused_type_with_std_module = self.confused_type_with_std_module;
     6 ( 0.00%)          let access_levels = self.access_levels;
    37 ( 0.00%)          ResolverOutputs {
     2 ( 0.00%)              definitions,
    11 ( 0.00%)              cstore: Box::new(self.crate_loader.into_cstore()),
     4 ( 0.00%)              visibilities,
     4 ( 0.00%)              access_levels,
     4 ( 0.00%)              extern_crate_map,
     4 ( 0.00%)              reexport_map,
     4 ( 0.00%)              glob_map,
     4 ( 0.00%)              maybe_unused_trait_imports,
     4 ( 0.00%)              maybe_unused_extern_crates,
     .                       extern_prelude: self
     .                           .extern_prelude
     .                           .iter()
     7 ( 0.00%)                  .map(|(ident, entry)| (ident.name, entry.introduced_by_item))
     .                           .collect(),
     6 ( 0.00%)              main_def,
     4 ( 0.00%)              trait_impls: self.trait_impls,
     4 ( 0.00%)              proc_macros,
     4 ( 0.00%)              confused_type_with_std_module,
     5 ( 0.00%)              registered_tools: self.registered_tools,
     .                   }
    19 ( 0.00%)      }
     .           
     .               pub fn clone_outputs(&self) -> ResolverOutputs {
     .                   let proc_macros = self.proc_macros.iter().map(|id| self.local_def_id(*id)).collect();
     .                   ResolverOutputs {
     .                       definitions: self.definitions.clone(),
     .                       access_levels: self.access_levels.clone(),
     .                       cstore: Box::new(self.cstore().clone()),
     .                       visibilities: self.visibilities.clone(),
-- line 1501 ----------------------------------------
-- line 1513 ----------------------------------------
     .                       trait_impls: self.trait_impls.clone(),
     .                       proc_macros,
     .                       confused_type_with_std_module: self.confused_type_with_std_module.clone(),
     .                       registered_tools: self.registered_tools.clone(),
     .                   }
     .               }
     .           
     .               pub fn cstore(&self) -> &CStore {
16,162 ( 0.01%)          self.crate_loader.cstore()
     .               }
     .           
     .               fn dummy_ext(&self, macro_kind: MacroKind) -> Lrc<SyntaxExtension> {
     3 ( 0.00%)          match macro_kind {
     .                       MacroKind::Bang => self.dummy_ext_bang.clone(),
     .                       MacroKind::Derive => self.dummy_ext_derive.clone(),
     1 ( 0.00%)              MacroKind::Attr => self.non_macro_attr.clone(),
     .                   }
     .               }
     .           
     .               /// Runs the function on each namespace.
    59 ( 0.00%)      fn per_ns<F: FnMut(&mut Self, Namespace)>(&mut self, mut f: F) {
    90 ( 0.00%)          f(self, TypeNS);
    78 ( 0.00%)          f(self, ValueNS);
    78 ( 0.00%)          f(self, MacroNS);
    54 ( 0.00%)      }
     .           
     .               fn is_builtin_macro(&mut self, res: Res) -> bool {
     .                   self.get_macro(res).map_or(false, |ext| ext.builtin_name.is_some())
     .               }
     .           
     .               fn macro_def(&self, mut ctxt: SyntaxContext) -> DefId {
     .                   loop {
     .                       match ctxt.outer_expn_data().macro_def_id {
     .                           Some(def_id) => return def_id,
     .                           None => ctxt.remove_mark(),
     .                       };
     .                   }
     .               }
     .           
     .               /// Entry point to crate resolution.
     2 ( 0.00%)      pub fn resolve_crate(&mut self, krate: &Crate) {
     4 ( 0.00%)          self.session.time("resolve_crate", || {
     3 ( 0.00%)              self.session.time("finalize_imports", || ImportResolver { r: self }.finalize_imports());
     .                       self.session.time("resolve_access_levels", || {
     3 ( 0.00%)                  AccessLevelsVisitor::compute_access_levels(self, krate)
     .                       });
     2 ( 0.00%)              self.session.time("finalize_macro_resolutions", || self.finalize_macro_resolutions());
     3 ( 0.00%)              self.session.time("late_resolve_crate", || self.late_resolve_crate(krate));
     2 ( 0.00%)              self.session.time("resolve_main", || self.resolve_main());
     3 ( 0.00%)              self.session.time("resolve_check_unused", || self.check_unused(krate));
     3 ( 0.00%)              self.session.time("resolve_report_errors", || self.report_errors(krate));
     4 ( 0.00%)              self.session.time("resolve_postprocess", || self.crate_loader.postprocess(krate));
     .                   });
     .               }
     .           
   720 ( 0.00%)      pub fn traits_in_scope(
     .                   &mut self,
     .                   current_trait: Option<Module<'a>>,
     .                   parent_scope: &ParentScope<'a>,
     .                   ctxt: SyntaxContext,
     .                   assoc_item: Option<(Symbol, Namespace)>,
     .               ) -> Vec<TraitCandidate> {
     .                   let mut found_traits = Vec::new();
     .           
   120 ( 0.00%)          if let Some(module) = current_trait {
     .                       if self.trait_may_have_item(Some(module), assoc_item) {
     .                           let def_id = module.def_id();
     .                           found_traits.push(TraitCandidate { def_id, import_ids: smallvec![] });
     .                       }
     .                   }
     .           
     .                   self.visit_scopes(ScopeSet::All(TypeNS, false), parent_scope, ctxt, |this, scope, _, _| {
     .                       match scope {
     .                           Scope::Module(module, _) => {
     .                               this.traits_in_module(module, assoc_item, &mut found_traits);
     .                           }
     .                           Scope::StdLibPrelude => {
   177 ( 0.00%)                      if let Some(module) = this.prelude {
     .                                   this.traits_in_module(module, assoc_item, &mut found_traits);
     .                               }
     .                           }
     .                           Scope::ExternPrelude | Scope::ToolPrelude | Scope::BuiltinTypes => {}
     .                           _ => unreachable!(),
     .                       }
     .                       None::<()>
     .                   });
     .           
     .                   found_traits
   480 ( 0.00%)      }
     .           
     .               fn traits_in_module(
     .                   &mut self,
     .                   module: Module<'a>,
     .                   assoc_item: Option<(Symbol, Namespace)>,
     .                   found_traits: &mut Vec<TraitCandidate>,
     .               ) {
     .                   module.ensure_traits(self);
     .                   let traits = module.traits.borrow();
 3,423 ( 0.00%)          for (trait_name, trait_binding) in traits.as_ref().unwrap().iter() {
     .                       if self.trait_may_have_item(trait_binding.module(), assoc_item) {
     .                           let def_id = trait_binding.res().def_id();
    99 ( 0.00%)                  let import_ids = self.find_transitive_imports(&trait_binding.kind, *trait_name);
   297 ( 0.00%)                  found_traits.push(TraitCandidate { def_id, import_ids });
     .                       }
     .                   }
     .               }
     .           
     .               // List of traits in scope is pruned on best effort basis. We reject traits not having an
     .               // associated item with the given name and namespace (if specified). This is a conservative
     .               // optimization, proper hygienic type-based resolution of associated items is done in typeck.
     .               // We don't reject trait aliases (`trait_module == None`) because we don't have access to their
     .               // associated items.
     .               fn trait_may_have_item(
     .                   &mut self,
     .                   trait_module: Option<Module<'a>>,
     .                   assoc_item: Option<(Symbol, Namespace)>,
     .               ) -> bool {
 1,617 ( 0.00%)          match (trait_module, assoc_item) {
     .                       (Some(trait_module), Some((name, ns))) => {
 3,234 ( 0.00%)                  self.resolutions(trait_module).borrow().iter().any(|resolution| {
     .                               let (&BindingKey { ident: assoc_ident, ns: assoc_ns, .. }, _) = resolution;
11,798 ( 0.01%)                      assoc_ns == ns && assoc_ident.name == name
     .                           })
     .                       }
     .                       _ => true,
     .                   }
     .               }
     .           
     .               fn find_transitive_imports(
     .                   &mut self,
     .                   mut kind: &NameBindingKind<'_>,
     .                   trait_name: Ident,
     .               ) -> SmallVec<[LocalDefId; 1]> {
     .                   let mut import_ids = smallvec![];
   151 ( 0.00%)          while let NameBindingKind::Import { import, binding, .. } = kind {
    51 ( 0.00%)              let id = self.local_def_id(import.id);
     .                       self.maybe_unused_trait_imports.insert(id);
    17 ( 0.00%)              self.add_to_glob_map(&import, trait_name);
     .                       import_ids.push(id);
    17 ( 0.00%)              kind = &binding.kind;
     .                   }
     .                   import_ids
     .               }
     .           
     .               fn new_key(&mut self, ident: Ident, ns: Namespace) -> BindingKey {
13,283 ( 0.01%)          let ident = ident.normalize_to_macros_2_0();
 3,097 ( 0.00%)          let disambiguator = if ident.name == kw::Underscore {
     4 ( 0.00%)              self.underscore_disambiguator += 1;
     .                       self.underscore_disambiguator
     .                   } else {
     .                       0
     .                   };
     .                   BindingKey { ident, ns, disambiguator }
     .               }
     .           
38,352 ( 0.02%)      fn resolutions(&mut self, module: Module<'a>) -> &'a Resolutions<'a> {
 4,794 ( 0.00%)          if module.populate_on_access.get() {
     .                       module.populate_on_access.set(false);
     .                       self.build_reduced_graph_external(module);
     .                   }
 4,794 ( 0.00%)          &module.lazy_resolutions
43,146 ( 0.02%)      }
     .           
28,017 ( 0.01%)      fn resolution(
     .                   &mut self,
     .                   module: Module<'a>,
     .                   key: BindingKey,
     .               ) -> &'a RefCell<NameResolution<'a>> {
 9,339 ( 0.00%)          *self
     .                       .resolutions(module)
     .                       .borrow_mut()
18,678 ( 0.01%)              .entry(key)
 6,226 ( 0.00%)              .or_insert_with(|| self.arenas.alloc_name_resolution())
24,904 ( 0.01%)      }
     .           
 9,020 ( 0.00%)      fn record_use(
     .                   &mut self,
     .                   ident: Ident,
     .                   used_binding: &'a NameBinding<'a>,
     .                   is_lexical_scope: bool,
     .               ) {
 2,460 ( 0.00%)          if let Some((b2, kind)) = used_binding.ambiguity {
     .                       self.ambiguity_errors.push(AmbiguityError {
     .                           kind,
     .                           ident,
     .                           b1: used_binding,
     .                           b2,
     .                           misc1: AmbiguityErrorMisc::None,
     .                           misc2: AmbiguityErrorMisc::None,
     .                       });
     .                   }
 1,724 ( 0.00%)          if let NameBindingKind::Import { import, binding, ref used } = used_binding.kind {
     .                       // Avoid marking `extern crate` items that refer to a name from extern prelude,
     .                       // but not introduce it, as used if they are accessed from lexical scope.
    84 ( 0.00%)              if is_lexical_scope {
    66 ( 0.00%)                  if let Some(entry) = self.extern_prelude.get(&ident.normalize_to_macros_2_0()) {
    30 ( 0.00%)                      if let Some(crate_item) = entry.extern_crate_item {
     4 ( 0.00%)                          if ptr::eq(used_binding, crate_item) && !entry.introduced_by_item {
     .                                       return;
     .                                   }
     .                               }
     .                           }
     .                       }
     .                       used.set(true);
     .                       import.used.set(true);
    41 ( 0.00%)              self.used_imports.insert(import.id);
   205 ( 0.00%)              self.add_to_glob_map(&import, ident);
   246 ( 0.00%)              self.record_use(ident, binding, false);
     .                   }
 6,560 ( 0.00%)      }
     .           
     .               #[inline]
   123 ( 0.00%)      fn add_to_glob_map(&mut self, import: &Import<'_>, ident: Ident) {
    58 ( 0.00%)          if import.is_glob() {
    32 ( 0.00%)              let def_id = self.local_def_id(import.id);
     .                       self.glob_map.entry(def_id).or_default().insert(ident.name);
     .                   }
   164 ( 0.00%)      }
     .           
     .               /// A generic scope visitor.
     .               /// Visits scopes in order to resolve some identifier in them or perform other actions.
     .               /// If the callback returns `Some` result, we stop visiting scopes and return it.
     .               fn visit_scopes<T>(
     .                   &mut self,
     .                   scope_set: ScopeSet<'a>,
     .                   parent_scope: &ParentScope<'a>,
-- line 1738 ----------------------------------------
-- line 1780 ----------------------------------------
     .                   //    ambiguities with `macro_rules`.
     .                   // 4. `macro_use` prelude (open, the open part is from macro expansions, not controlled).
     .                   // 4a. User-defined prelude from macro-use
     .                   //    (open, the open part is from macro expansions, not controlled).
     .                   // 4b. "Standard library prelude" part implemented through `macro-use` (closed, controlled).
     .                   // 4c. Standard library prelude (de-facto closed, controlled).
     .                   // 6. Language prelude: builtin attributes (closed, controlled).
     .           
 1,899 ( 0.00%)          let rust_2015 = ctxt.edition() == Edition::Edition2015;
     .                   let (ns, macro_kind, is_absolute_path) = match scope_set {
     .                       ScopeSet::All(ns, _) => (ns, None, false),
     .                       ScopeSet::AbsolutePath(ns) => (ns, None, true),
     .                       ScopeSet::Macro(macro_kind) => (MacroNS, Some(macro_kind), false),
     .                       ScopeSet::Late(ns, ..) => (ns, None, false),
     .                   };
 5,348 ( 0.00%)          let module = match scope_set {
     .                       // Start with the specified module.
     .                       ScopeSet::Late(_, module, _) => module,
     .                       // Jump out of trait or enum modules, they do not act as scopes.
   145 ( 0.00%)              _ => parent_scope.module.nearest_item_scope(),
     .                   };
   382 ( 0.00%)          let mut scope = match ns {
   955 ( 0.00%)              _ if is_absolute_path => Scope::CrateRoot,
     .                       TypeNS | ValueNS => Scope::Module(module, None),
   207 ( 0.00%)              MacroNS => Scope::DeriveHelpers(parent_scope.expansion),
     .                   };
   502 ( 0.00%)          let mut ctxt = ctxt.normalize_to_macros_2_0();
 1,484 ( 0.00%)          let mut use_prelude = !module.no_implicit_prelude;
     .           
     .                   loop {
 8,835 ( 0.00%)              let visit = match scope {
     .                           // Derive helpers are not in scope when resolving derives in the same container.
     .                           Scope::DeriveHelpers(expn_id) => {
   207 ( 0.00%)                      !(expn_id == parent_scope.expansion && macro_kind == Some(MacroKind::Derive))
     .                           }
     .                           Scope::DeriveHelpersCompat => true,
     .                           Scope::MacroRules(macro_rules_scope) => {
     .                               // Use "path compression" on `macro_rules` scope chains. This is an optimization
     .                               // used to avoid long scope chains, see the comments on `MacroRulesScopeRef`.
     .                               // As another consequence of this optimization visitors never observe invocation
     .                               // scopes for macros that were already expanded.
   452 ( 0.00%)                      while let MacroRulesScope::Invocation(invoc_id) = macro_rules_scope.get() {
     .                                   if let Some(next_scope) = self.output_macro_rules_scopes.get(&invoc_id) {
     .                                       macro_rules_scope.set(next_scope.get());
     .                                   } else {
     .                                       break;
     .                                   }
     .                               }
     .                               true
     .                           }
     .                           Scope::CrateRoot => true,
     .                           Scope::Module(..) => true,
    65 ( 0.00%)                  Scope::RegisteredAttrs => use_prelude,
     .                           Scope::MacroUsePrelude => use_prelude || rust_2015,
     .                           Scope::BuiltinAttrs => true,
    81 ( 0.00%)                  Scope::ExternPrelude => use_prelude || is_absolute_path,
    12 ( 0.00%)                  Scope::ToolPrelude => use_prelude,
   906 ( 0.00%)                  Scope::StdLibPrelude => use_prelude || ns == MacroNS,
     .                           Scope::BuiltinTypes => true,
     .                       };
     .           
   242 ( 0.00%)              if visit {
   815 ( 0.00%)                  if let break_result @ Some(..) = visitor(self, scope, use_prelude, ctxt) {
     .                               return break_result;
     .                           }
     .                       }
     .           
 3,400 ( 0.00%)              scope = match scope {
     .                           Scope::DeriveHelpers(LocalExpnId::ROOT) => Scope::DeriveHelpersCompat,
     .                           Scope::DeriveHelpers(expn_id) => {
     .                               // Derive helpers are not visible to code generated by bang or derive macros.
     .                               let expn_data = expn_id.expn_data();
   360 ( 0.00%)                      match expn_data.kind {
     .                                   ExpnKind::Root
     .                                   | ExpnKind::Macro(MacroKind::Bang | MacroKind::Derive, _) => {
     .                                       Scope::DeriveHelpersCompat
     .                                   }
     .                                   _ => Scope::DeriveHelpers(expn_data.parent.expect_local()),
     .                               }
     .                           }
   207 ( 0.00%)                  Scope::DeriveHelpersCompat => Scope::MacroRules(parent_scope.macro_rules),
   138 ( 0.00%)                  Scope::MacroRules(macro_rules_scope) => match macro_rules_scope.get() {
     .                               MacroRulesScope::Binding(binding) => {
     .                                   Scope::MacroRules(binding.parent_macro_rules_scope)
     .                               }
     .                               MacroRulesScope::Invocation(invoc_id) => {
     .                                   Scope::MacroRules(self.invocation_parent_scopes[&invoc_id].macro_rules)
     .                               }
     .                               MacroRulesScope::Empty => Scope::Module(module, None),
     .                           },
-- line 1869 ----------------------------------------
-- line 1870 ----------------------------------------
     .                           Scope::CrateRoot => match ns {
     .                               TypeNS => {
     .                                   ctxt.adjust(ExpnId::root());
     .                                   Scope::ExternPrelude
     .                               }
     .                               ValueNS | MacroNS => break,
     .                           },
     .                           Scope::Module(module, prev_lint_id) => {
 1,260 ( 0.00%)                      use_prelude = !module.no_implicit_prelude;
     .                               let derive_fallback_lint_id = match scope_set {
     .                                   ScopeSet::Late(.., lint_id) => lint_id,
     .                                   _ => None,
     .                               };
 2,410 ( 0.00%)                      match self.hygienic_lexical_parent(module, &mut ctxt, derive_fallback_lint_id) {
     .                                   Some((parent_module, lint_id)) => {
     .                                       Scope::Module(parent_module, lint_id.or(prev_lint_id))
     .                                   }
     .                                   None => {
 1,190 ( 0.00%)                              ctxt.adjust(ExpnId::root());
   610 ( 0.00%)                              match ns {
     .                                           TypeNS => Scope::ExternPrelude,
     .                                           ValueNS => Scope::StdLibPrelude,
     .                                           MacroNS => Scope::RegisteredAttrs,
     .                                       }
     .                                   }
     .                               }
     .                           }
     .                           Scope::RegisteredAttrs => Scope::MacroUsePrelude,
     .                           Scope::MacroUsePrelude => Scope::StdLibPrelude,
     .                           Scope::BuiltinAttrs => break, // nowhere else to search
    24 ( 0.00%)                  Scope::ExternPrelude if is_absolute_path => break,
     .                           Scope::ExternPrelude => Scope::ToolPrelude,
     .                           Scope::ToolPrelude => Scope::StdLibPrelude,
   416 ( 0.00%)                  Scope::StdLibPrelude => match ns {
     .                               TypeNS => Scope::BuiltinTypes,
     .                               ValueNS => break, // nowhere else to search
     .                               MacroNS => Scope::BuiltinAttrs,
     .                           },
     .                           Scope::BuiltinTypes => break, // nowhere else to search
     .                       };
     .                   }
     .           
-- line 1911 ----------------------------------------
-- line 1924 ----------------------------------------
     .               ///    let g = || {};
     .               ///    fn g() {}
     .               ///    g(); // This resolves to the local variable `g` since it shadows the item.
     .               /// }
     .               /// ```
     .               ///
     .               /// Invariant: This must only be called during main resolution, not during
     .               /// import resolution.
 2,740 ( 0.00%)      fn resolve_ident_in_lexical_scope(
     .                   &mut self,
     .                   mut ident: Ident,
     .                   ns: Namespace,
     .                   parent_scope: &ParentScope<'a>,
     .                   record_used_id: Option<NodeId>,
     .                   path_span: Span,
     .                   ribs: &[Rib<'a>],
     .               ) -> Option<LexicalScopeBinding<'a>> {
   548 ( 0.00%)          assert!(ns == TypeNS || ns == ValueNS);
     .                   let orig_ident = ident;
 1,918 ( 0.00%)          if ident.name == kw::Empty {
     .                       return Some(LexicalScopeBinding::Res(Res::Err));
     .                   }
     .                   let (general_span, normalized_span) = if ident.name == kw::SelfUpper {
     .                       // FIXME(jseyfried) improve `Self` hygiene
     .                       let empty_span = ident.span.with_ctxt(SyntaxContext::root());
     .                       (empty_span, empty_span)
   274 ( 0.00%)          } else if ns == TypeNS {
   180 ( 0.00%)              let normalized_span = ident.span.normalize_to_macros_2_0();
     .                       (normalized_span, normalized_span)
     .                   } else {
 1,190 ( 0.00%)              (ident.span.normalize_to_macro_rules(), ident.span.normalize_to_macros_2_0())
     .                   };
     .                   ident.span = general_span;
     .                   let normalized_ident = Ident { span: normalized_span, ..ident };
     .           
     .                   // Walk backwards up the ribs in scope.
     .                   let record_used = record_used_id.is_some();
   822 ( 0.00%)          let mut module = self.graph_root;
     .                   for i in (0..ribs.len()).rev() {
     .                       debug!("walk rib\n{:?}", ribs[i].bindings);
     .                       // Use the rib kind to determine whether we are resolving parameters
     .                       // (macro 2.0 hygiene) or local variables (`macro_rules` hygiene).
   891 ( 0.00%)              let rib_ident = if ribs[i].kind.contains_params() { normalized_ident } else { ident };
     .                       if let Some((original_rib_ident_def, res)) = ribs[i].bindings.get_key_value(&rib_ident)
     .                       {
     .                           // The ident resolves to a type parameter or local variable.
 1,992 ( 0.00%)                  return Some(LexicalScopeBinding::Res(self.validate_res_from_ribs(
     .                               i,
   332 ( 0.00%)                      rib_ident,
   830 ( 0.00%)                      *res,
     .                               record_used,
     .                               path_span,
     .                               *original_rib_ident_def,
     .                               ribs,
     .                           )));
     .                       }
     .           
 3,987 ( 0.00%)              module = match ribs[i].kind {
   272 ( 0.00%)                  ModuleRibKind(module) => module,
     .                           MacroDefinition(def) if def == self.macro_def(ident.span.ctxt()) => {
     .                               // If an invocation of this macro created `ident`, give up on `ident`
     .                               // and switch to `ident`'s source from the macro definition.
     .                               ident.span.remove_mark();
     .                               continue;
     .                           }
     .                           _ => continue,
     .                       };
     .           
   816 ( 0.00%)              match module.kind {
     .                           ModuleKind::Block(..) => {} // We can see through blocks
     .                           _ => break,
     .                       }
     .           
     .                       let item = self.resolve_ident_in_module_unadjusted(
     .                           ModuleOrUniformRoot::Module(module),
     .                           ident,
     .                           ns,
     .                           parent_scope,
     .                           record_used,
     .                           path_span,
     .                       );
     .                       if let Ok(binding) = item {
     .                           // The ident resolves to an item.
     6 ( 0.00%)                  return Some(LexicalScopeBinding::Item(binding));
     .                       }
     .                   }
 1,802 ( 0.00%)          self.early_resolve_ident_in_lexical_scope(
     .                       orig_ident,
     .                       ScopeSet::Late(ns, module, record_used_id),
     .                       parent_scope,
     .                       record_used,
     .                       record_used,
     .                       path_span,
     .                   )
     .                   .ok()
     .                   .map(LexicalScopeBinding::Item)
 2,466 ( 0.00%)      }
     .           
 4,180 ( 0.00%)      fn hygienic_lexical_parent(
     .                   &mut self,
     .                   module: Module<'a>,
     .                   ctxt: &mut SyntaxContext,
     .                   derive_fallback_lint_id: Option<NodeId>,
     .               ) -> Option<(Module<'a>, Option<NodeId>)> {
 2,660 ( 0.00%)          if !module.expansion.outer_expn_is_descendant_of(*ctxt) {
    54 ( 0.00%)              return Some((self.expn_def_scope(ctxt.remove_mark()), None));
     .                   }
     .           
   742 ( 0.00%)          if let ModuleKind::Block(..) = module.kind {
   145 ( 0.00%)              return Some((module.parent.unwrap().nearest_item_scope(), None));
     .                   }
     .           
     .                   // We need to support the next case under a deprecation warning
     .                   // ```
     .                   // struct MyStruct;
     .                   // ---- begin: this comes from a proc macro derive
     .                   // mod implementation_details {
     .                   //     // Note that `MyStruct` is not in scope here.
     .                   //     impl SomeTrait for MyStruct { ... }
     .                   // }
     .                   // ---- end
     .                   // ```
     .                   // So we have to fall back to the module's parent during lexical resolution in this case.
   226 ( 0.00%)          if derive_fallback_lint_id.is_some() {
    45 ( 0.00%)              if let Some(parent) = module.parent {
     .                           // Inner module is inside the macro, parent module is outside of the macro.
     .                           if module.expansion != parent.expansion
     .                               && module.expansion.is_descendant_of(parent.expansion)
     .                           {
     .                               // The macro is a proc macro derive
     .                               if let Some(def_id) = module.expansion.expn_data().macro_def_id {
     .                                   let ext = self.get_macro_by_def_id(def_id);
     .                                   if ext.builtin_name.is_none()
-- line 2056 ----------------------------------------
-- line 2060 ----------------------------------------
     .                                       return Some((parent, derive_fallback_lint_id));
     .                                   }
     .                               }
     .                           }
     .                       }
     .                   }
     .           
     .                   None
 3,800 ( 0.00%)      }
     .           
     .               fn resolve_ident_in_module(
     .                   &mut self,
     .                   module: ModuleOrUniformRoot<'a>,
     .                   ident: Ident,
     .                   ns: Namespace,
     .                   parent_scope: &ParentScope<'a>,
     .                   record_used: bool,
     .                   path_span: Span,
     .               ) -> Result<&'a NameBinding<'a>, Determinacy> {
10,632 ( 0.00%)          self.resolve_ident_in_module_ext(module, ident, ns, parent_scope, record_used, path_span)
     .                       .map_err(|(determinacy, _)| determinacy)
     .               }
     .           
23,660 ( 0.01%)      fn resolve_ident_in_module_ext(
     .                   &mut self,
     .                   module: ModuleOrUniformRoot<'a>,
     .                   mut ident: Ident,
     .                   ns: Namespace,
     .                   parent_scope: &ParentScope<'a>,
     .                   record_used: bool,
     .                   path_span: Span,
     .               ) -> Result<&'a NameBinding<'a>, (Determinacy, Weak)> {
     .                   let tmp_parent_scope;
     .                   let mut adjusted_parent_scope = parent_scope;
     .                   match module {
     .                       ModuleOrUniformRoot::Module(m) => {
 7,044 ( 0.00%)                  if let Some(def) = ident.span.normalize_to_macros_2_0_and_adjust(m.expansion) {
    55 ( 0.00%)                      tmp_parent_scope =
    66 ( 0.00%)                          ParentScope { module: self.expn_def_scope(def), ..*parent_scope };
     .                               adjusted_parent_scope = &tmp_parent_scope;
     .                           }
     .                       }
     .                       ModuleOrUniformRoot::ExternPrelude => {
     .                           ident.span.normalize_to_macros_2_0_and_adjust(ExpnId::root());
     .                       }
     .                       ModuleOrUniformRoot::CrateRootAndExternPrelude | ModuleOrUniformRoot::CurrentScope => {
     .                           // No adjustments
     .                       }
     .                   }
13,023 ( 0.01%)          self.resolve_ident_in_module_unadjusted_ext(
     .                       module,
 2,368 ( 0.00%)              ident,
     .                       ns,
     .                       adjusted_parent_scope,
     .                       false,
     .                       record_used,
     .                       path_span,
     .                   )
 8,281 ( 0.00%)      }
     .           
12,840 ( 0.01%)      fn resolve_crate_root(&mut self, ident: Ident) -> Module<'a> {
     .                   debug!("resolve_crate_root({:?})", ident);
 1,284 ( 0.00%)          let mut ctxt = ident.span.ctxt();
 1,284 ( 0.00%)          let mark = if ident.name == kw::DollarCrate {
     .                       // When resolving `$crate` from a `macro_rules!` invoked in a `macro`,
     .                       // we don't want to pretend that the `macro_rules!` definition is in the `macro`
     .                       // as described in `SyntaxContext::apply_mark`, so we ignore prepended opaque marks.
     .                       // FIXME: This is only a guess and it doesn't work correctly for `macro_rules!`
     .                       // definitions actually produced by `macro` and `macro` definitions produced by
     .                       // `macro_rules!`, but at least such configurations are not stable yet.
 2,568 ( 0.00%)              ctxt = ctxt.normalize_to_macro_rules();
     .                       debug!(
     .                           "resolve_crate_root: marks={:?}",
     .                           ctxt.marks().into_iter().map(|(i, t)| (i.expn_data(), t)).collect::<Vec<_>>()
     .                       );
 2,568 ( 0.00%)              let mut iter = ctxt.marks().into_iter().rev().peekable();
     .                       let mut result = None;
     .                       // Find the last opaque mark from the end if it exists.
 3,963 ( 0.00%)              while let Some(&(mark, transparency)) = iter.peek() {
     .                           if transparency == Transparency::Opaque {
     .                               result = Some(mark);
     .                               iter.next();
     .                           } else {
     .                               break;
     .                           }
     .                       }
     .                       debug!(
     .                           "resolve_crate_root: found opaque mark {:?} {:?}",
     .                           result,
     .                           result.map(|r| r.expn_data())
     .                       );
     .                       // Then find the last semi-transparent mark from the end if it exists.
 3,852 ( 0.00%)              for (mark, transparency) in iter {
     .                           if transparency == Transparency::SemiTransparent {
     .                               result = Some(mark);
     .                           } else {
     .                               break;
     .                           }
     .                       }
     .                       debug!(
     .                           "resolve_crate_root: found semi-transparent mark {:?} {:?}",
-- line 2160 ----------------------------------------
-- line 2162 ----------------------------------------
     .                           result.map(|r| r.expn_data())
     .                       );
     .                       result
     .                   } else {
     .                       debug!("resolve_crate_root: not DollarCrate");
     .                       ctxt = ctxt.normalize_to_macros_2_0();
     .                       ctxt.adjust(ExpnId::root())
     .                   };
 2,568 ( 0.00%)          let module = match mark {
 6,400 ( 0.00%)              Some(def) => self.expn_def_scope(def),
     .                       None => {
     .                           debug!(
     .                               "resolve_crate_root({:?}): found no mark (ident.span = {:?})",
     .                               ident, ident.span
     .                           );
     8 ( 0.00%)                  return self.graph_root;
     .                       }
     .                   };
     .                   let module = self.expect_module(
     .                       module.opt_def_id().map_or(LOCAL_CRATE, |def_id| def_id.krate).as_def_id(),
     .                   );
     .                   debug!(
     .                       "resolve_crate_root({:?}): got module {:?} ({:?}) (ident.span = {:?})",
     .                       ident,
     .                       module,
     .                       module.kind.name(),
     .                       ident.span
     .                   );
     .                   module
 8,988 ( 0.00%)      }
     .           
     .               fn resolve_self(&mut self, ctxt: &mut SyntaxContext, module: Module<'a>) -> Module<'a> {
     .                   let mut module = self.expect_module(module.nearest_parent_mod());
     .                   while module.span.ctxt().normalize_to_macros_2_0() != *ctxt {
     .                       let parent = module.parent.unwrap_or_else(|| self.expn_def_scope(ctxt.remove_mark()));
     .                       module = self.expect_module(parent.nearest_parent_mod());
     .                   }
     .                   module
-- line 2199 ----------------------------------------
-- line 2203 ----------------------------------------
     .                   &mut self,
     .                   path: &[Segment],
     .                   opt_ns: Option<Namespace>, // `None` indicates a module path in import
     .                   parent_scope: &ParentScope<'a>,
     .                   record_used: bool,
     .                   path_span: Span,
     .                   crate_lint: CrateLint,
     .               ) -> PathResult<'a> {
11,388 ( 0.01%)          self.resolve_path_with_ribs(
     .                       path,
     .                       opt_ns,
     .                       parent_scope,
     .                       record_used,
     .                       path_span,
     .                       crate_lint,
     .                       None,
     .                   )
     .               }
     .           
17,550 ( 0.01%)      fn resolve_path_with_ribs(
     .                   &mut self,
     .                   path: &[Segment],
     .                   opt_ns: Option<Namespace>, // `None` indicates a module path in import
     .                   parent_scope: &ParentScope<'a>,
     .                   record_used: bool,
     .                   path_span: Span,
     .                   crate_lint: CrateLint,
     .                   ribs: Option<&PerNS<Vec<Rib<'a>>>>,
     .               ) -> PathResult<'a> {
 1,170 ( 0.00%)          let mut module = None;
     .                   let mut allow_super = true;
     .                   let mut second_binding = None;
     .           
     .                   debug!(
     .                       "resolve_path(path={:?}, opt_ns={:?}, record_used={:?}, \
     .                        path_span={:?}, crate_lint={:?})",
     .                       path, opt_ns, record_used, path_span, crate_lint,
     .                   );
     .           
13,902 ( 0.01%)          for (i, &Segment { ident, id, has_generic_args: _ }) in path.iter().enumerate() {
     .                       debug!("resolve_path ident {} {:?} {:?}", i, ident, id);
12,656 ( 0.01%)              let record_segment_res = |this: &mut Self, res| {
 1,071 ( 0.00%)                  if record_used {
 1,693 ( 0.00%)                      if let Some(id) = id {
   674 ( 0.00%)                          if !this.partial_res_map.contains_key(&id) {
   674 ( 0.00%)                              assert!(id != ast::DUMMY_NODE_ID, "Trying to resolve dummy id");
 1,348 ( 0.00%)                              this.record_partial_res(id, PartialRes::new(res));
     .                                   }
     .                               }
     .                           }
 1,428 ( 0.00%)              };
     .           
 6,606 ( 0.00%)              let is_last = i == path.len() - 1;
11,585 ( 0.01%)              let ns = if is_last { opt_ns.unwrap_or(TypeNS) } else { TypeNS };
 2,317 ( 0.00%)              let name = ident.name;
     .           
 3,531 ( 0.00%)              allow_super &= ns == TypeNS && (name == kw::SelfLower || name == kw::Super);
     .           
     .                       if ns == TypeNS {
 2,428 ( 0.00%)                  if allow_super && name == kw::Super {
     .                               let mut ctxt = ident.span.ctxt().normalize_to_macros_2_0();
     .                               let self_module = match i {
     .                                   0 => Some(self.resolve_self(&mut ctxt, parent_scope.module)),
     .                                   _ => match module {
     .                                       Some(ModuleOrUniformRoot::Module(module)) => Some(module),
     .                                       _ => None,
     .                                   },
     .                               };
-- line 2270 ----------------------------------------
-- line 2279 ----------------------------------------
     .                               let msg = "there are too many leading `super` keywords".to_string();
     .                               return PathResult::Failed {
     .                                   span: ident.span,
     .                                   label: msg,
     .                                   suggestion: None,
     .                                   is_error_from_last_segment: false,
     .                               };
     .                           }
 2,428 ( 0.00%)                  if i == 0 {
 2,994 ( 0.00%)                      if name == kw::SelfLower {
     .                                   let mut ctxt = ident.span.ctxt().normalize_to_macros_2_0();
     .                                   module = Some(ModuleOrUniformRoot::Module(
     .                                       self.resolve_self(&mut ctxt, parent_scope.module),
     .                                   ));
     .                                   continue;
     .                               }
     .                               if name == kw::PathRoot && ident.span.rust_2018() {
     .                                   module = Some(ModuleOrUniformRoot::ExternPrelude);
-- line 2296 ----------------------------------------
-- line 2298 ----------------------------------------
     .                               }
     .                               if name == kw::PathRoot && ident.span.rust_2015() && self.session.rust_2018() {
     .                                   // `::a::b` from 2015 macro on 2018 global edition
     .                                   module = Some(ModuleOrUniformRoot::CrateRootAndExternPrelude);
     .                                   continue;
     .                               }
     .                               if name == kw::PathRoot || name == kw::Crate || name == kw::DollarCrate {
     .                                   // `::a::b`, `crate::a::b` or `$crate::a::b`
 3,860 ( 0.00%)                          module = Some(ModuleOrUniformRoot::Module(self.resolve_crate_root(ident)));
     .                                   continue;
     .                               }
     .                           }
     .                       }
     .           
     .                       // Report special messages for path segment keywords in wrong positions.
 6,760 ( 0.00%)              if ident.is_path_segment_keyword() && i != 0 {
     .                           let name_str = if name == kw::PathRoot {
     .                               "crate root".to_string()
     .                           } else {
     .                               format!("`{}`", name)
     .                           };
     .                           let label = if i == 1 && path[0].ident.name == kw::PathRoot {
     .                               format!("global paths cannot start with {}", name_str)
     .                           } else {
-- line 2321 ----------------------------------------
-- line 2328 ----------------------------------------
     .                               is_error_from_last_segment: false,
     .                           };
     .                       }
     .           
     .                       enum FindBindingResult<'a> {
     .                           Binding(Result<&'a NameBinding<'a>, Determinacy>),
     .                           PathResult(PathResult<'a>),
     .                       }
43,264 ( 0.02%)              let find_binding_in_ns = |this: &mut Self, ns| {
 6,557 ( 0.00%)                  let binding = if let Some(module) = module {
     .                               this.resolve_ident_in_module(
     .                                   module,
 3,447 ( 0.00%)                          ident,
     .                                   ns,
     .                                   parent_scope,
 2,298 ( 0.00%)                          record_used,
 1,149 ( 0.00%)                          path_span,
     .                               )
 1,178 ( 0.00%)                  } else if ribs.is_none() || opt_ns.is_none() || opt_ns == Some(MacroNS) {
     .                               let scopes = ScopeSet::All(ns, opt_ns.is_none());
   170 ( 0.00%)                      this.early_resolve_ident_in_lexical_scope(
    30 ( 0.00%)                          ident,
     .                                   scopes,
    10 ( 0.00%)                          parent_scope,
    20 ( 0.00%)                          record_used,
     .                                   record_used,
    10 ( 0.00%)                          path_span,
     .                               )
     .                           } else {
   772 ( 0.00%)                      let record_used_id = if record_used {
   182 ( 0.00%)                          crate_lint.node_id().or(Some(CRATE_NODE_ID))
     .                               } else {
     .                                   None
     .                               };
 2,589 ( 0.00%)                      match this.resolve_ident_in_lexical_scope(
   579 ( 0.00%)                          ident,
     .                                   ns,
   193 ( 0.00%)                          parent_scope,
     .                                   record_used_id,
   386 ( 0.00%)                          path_span,
     .                                   &ribs.unwrap()[ns],
     .                               ) {
     .                                   // we found a locally-imported or available item/module
    96 ( 0.00%)                          Some(LexicalScopeBinding::Item(binding)) => Ok(binding),
     .                                   // we found a local variable or type param
     .                                   Some(LexicalScopeBinding::Res(res))
   306 ( 0.00%)                              if opt_ns == Some(TypeNS) || opt_ns == Some(ValueNS) =>
     .                                   {
 1,377 ( 0.00%)                              record_segment_res(this, res);
 1,224 ( 0.00%)                              return FindBindingResult::PathResult(PathResult::NonModule(
 1,071 ( 0.00%)                                  PartialRes::with_unresolved_segments(res, path.len() - 1),
     .                                       ));
     .                                   }
    24 ( 0.00%)                          _ => Err(Determinacy::determined(record_used)),
     .                               }
     .                           };
 8,393 ( 0.00%)                  FindBindingResult::Binding(binding)
10,816 ( 0.00%)              };
 9,464 ( 0.00%)              let binding = match find_binding_in_ns(self, ns) {
 2,142 ( 0.00%)                  FindBindingResult::PathResult(x) => return x,
     .                           FindBindingResult::Binding(binding) => binding,
     .                       };
 2,425 ( 0.00%)              match binding {
     .                           Ok(binding) => {
 5,950 ( 0.00%)                      if i == 1 {
     .                                   second_binding = Some(binding);
     .                               }
     .                               let res = binding.res();
 4,412 ( 0.00%)                      let maybe_assoc = opt_ns != Some(MacroNS) && PathSource::Type.is_expected(res);
     .                               if let Some(next_module) = binding.module() {
   408 ( 0.00%)                          module = Some(ModuleOrUniformRoot::Module(next_module));
 1,836 ( 0.00%)                          record_segment_res(self, res);
 6,902 ( 0.00%)                      } else if res == Res::ToolMod && i + 1 != path.len() {
     .                                   if binding.is_import() {
     .                                       self.session
     .                                           .struct_span_err(
     .                                               ident.span,
     .                                               "cannot use a tool module through an import",
     .                                           )
     .                                           .span_note(binding.span, "the tool module imported here")
     .                                           .emit();
     .                                   }
     .                                   let res = Res::NonMacroAttr(NonMacroAttrKind::Tool);
     .                                   return PathResult::NonModule(PartialRes::new(res));
 4,930 ( 0.00%)                      } else if res == Res::Err {
     .                                   return PathResult::NonModule(PartialRes::new(Res::Err));
 2,958 ( 0.00%)                      } else if opt_ns.is_some() && (is_last || maybe_assoc) {
 6,902 ( 0.00%)                          self.lint_if_path_starts_with_module(
 1,972 ( 0.00%)                              crate_lint,
     .                                       path,
   986 ( 0.00%)                              path_span,
     .                                       second_binding,
     .                                   );
 2,958 ( 0.00%)                          return PathResult::NonModule(PartialRes::with_unresolved_segments(
 3,944 ( 0.00%)                              res,
 3,944 ( 0.00%)                              path.len() - i - 1,
     .                                   ));
     .                               } else {
     .                                   let label = format!(
     .                                       "`{}` is {} {}, not a module",
     .                                       ident,
     .                                       res.article(),
     .                                       res.descr(),
     .                                   );
-- line 2431 ----------------------------------------
-- line 2433 ----------------------------------------
     .                                   return PathResult::Failed {
     .                                       span: ident.span,
     .                                       label,
     .                                       suggestion: None,
     .                                       is_error_from_last_segment: is_last,
     .                                   };
     .                               }
     .                           }
    16 ( 0.00%)                  Err(Undetermined) => return PathResult::Indeterminate,
     .                           Err(Determined) => {
     4 ( 0.00%)                      if let Some(ModuleOrUniformRoot::Module(module)) = module {
     4 ( 0.00%)                          if opt_ns.is_some() && !module.is_normal() {
     3 ( 0.00%)                              return PathResult::NonModule(PartialRes::with_unresolved_segments(
     .                                           module.res().unwrap(),
     2 ( 0.00%)                                  path.len() - i,
     .                                       ));
     .                                   }
     .                               }
     .                               let module_res = match module {
     .                                   Some(ModuleOrUniformRoot::Module(module)) => module.res(),
     .                                   _ => None,
     .                               };
     .                               let (label, suggestion) = if module_res == self.graph_root.res() {
-- line 2455 ----------------------------------------
-- line 2612 ----------------------------------------
     .                                   label,
     .                                   suggestion,
     .                                   is_error_from_last_segment: is_last,
     .                               };
     .                           }
     .                       }
     .                   }
     .           
   242 ( 0.00%)          self.lint_if_path_starts_with_module(crate_lint, path, path_span, second_binding);
     .           
   132 ( 0.00%)          PathResult::Module(match module {
    40 ( 0.00%)              Some(module) => module,
     2 ( 0.00%)              None if path.is_empty() => ModuleOrUniformRoot::CurrentScope,
     .                       _ => span_bug!(path_span, "resolve_path: non-empty path `{:?}` has no module", path),
     .                   })
10,530 ( 0.00%)      }
     .           
12,144 ( 0.01%)      fn lint_if_path_starts_with_module(
     .                   &mut self,
     .                   crate_lint: CrateLint,
     .                   path: &[Segment],
     .                   path_span: Span,
     .                   second_binding: Option<&NameBinding<'_>>,
     .               ) {
 5,060 ( 0.00%)          let (diag_id, diag_span) = match crate_lint {
     .                       CrateLint::No => return,
     .                       CrateLint::SimplePath(id) => (id, path_span),
     .                       CrateLint::UsePath { root_id, root_span } => (root_id, root_span),
     .                       CrateLint::QPathTrait { qpath_id, qpath_span } => (qpath_id, qpath_span),
     .                   };
     .           
   181 ( 0.00%)          let first_name = match path.get(0) {
     .                       // In the 2018 edition this lint is a hard error, so nothing to do
   358 ( 0.00%)              Some(seg) if seg.ident.span.rust_2015() && self.session.rust_2015() => seg.ident.name,
     .                       _ => return,
     .                   };
     .           
     .                   // We're only interested in `use` paths which should start with
     .                   // `{{root}}` currently.
     .                   if first_name != kw::PathRoot {
     .                       return;
     .                   }
-- line 2653 ----------------------------------------
-- line 2679 ----------------------------------------
     .                   self.lint_buffer.buffer_lint_with_diagnostic(
     .                       lint::builtin::ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE,
     .                       diag_id,
     .                       diag_span,
     .                       "absolute paths must start with `self`, `super`, \
     .                        `crate`, or an external crate name in the 2018 edition",
     .                       diag,
     .                   );
 8,096 ( 0.00%)      }
     .           
     .               // Validate a local resolution (from ribs).
     .               fn validate_res_from_ribs(
     .                   &mut self,
     .                   rib_index: usize,
     .                   rib_ident: Ident,
     .                   mut res: Res,
     .                   record_used: bool,
     .                   span: Span,
     .                   original_rib_ident_def: Ident,
     .                   all_ribs: &[Rib<'a>],
     .               ) -> Res {
     .                   const CG_BUG_STR: &str = "min_const_generics resolve check didn't stop compilation";
     .                   debug!("validate_res_from_ribs({:?})", res);
   332 ( 0.00%)          let ribs = &all_ribs[rib_index + 1..];
     .           
     .                   // An invalid forward use of a generic parameter from a previous default.
   664 ( 0.00%)          if let ForwardGenericParamBanRibKind = all_ribs[rib_index].kind {
     .                       if record_used {
     .                           let res_error = if rib_ident.name == kw::SelfUpper {
     .                               ResolutionError::SelfInGenericParamDefault
     .                           } else {
     .                               ResolutionError::ForwardDeclaredGenericParam
     .                           };
     .                           self.report_error(span, res_error);
     .                       }
     .                       assert_eq!(res, Res::Err);
     .                       return Res::Err;
     .                   }
     .           
 1,162 ( 0.00%)          match res {
     .                       Res::Local(_) => {
     .                           use ResolutionError::*;
   166 ( 0.00%)                  let mut res_err = None;
     .           
     .                           for rib in ribs {
   746 ( 0.00%)                      match rib.kind {
     .                                   NormalRibKind
     .                                   | ClosureOrAsyncRibKind
     .                                   | ModuleRibKind(..)
     .                                   | MacroDefinition(..)
     .                                   | ForwardGenericParamBanRibKind => {
     .                                       // Nothing to do. Continue.
     .                                   }
     .                                   ItemRibKind(_) | FnItemRibKind | AssocItemRibKind => {
     .                                       // This was an attempt to access an upvar inside a
     .                                       // named function item. This is not allowed, so we
     .                                       // report an error.
    50 ( 0.00%)                              if record_used {
     .                                           // We don't immediately trigger a resolve error, because
     .                                           // we want certain other resolution errors (namely those
     .                                           // emitted for `ConstantItemRibKind` below) to take
     .                                           // precedence.
     .                                           res_err = Some(CannotCaptureDynamicEnvironmentInFnItem);
     .                                       }
     .                                   }
     .                                   ConstantItemRibKind(_, item) => {
-- line 2744 ----------------------------------------
-- line 2773 ----------------------------------------
     .                                   ConstParamTyRibKind => {
     .                                       if record_used {
     .                                           self.report_error(span, ParamInTyOfConstParam(rib_ident.name));
     .                                       }
     .                                       return Res::Err;
     .                                   }
     .                               }
     .                           }
    84 ( 0.00%)                  if let Some(res_err) = res_err {
     .                               self.report_error(span, res_err);
     .                               return Res::Err;
     .                           }
     .                       }
     .                       Res::Def(DefKind::TyParam, _) | Res::SelfTy(..) => {
     .                           for rib in ribs {
     .                               let has_generic_params: HasGenericParams = match rib.kind {
     .                                   NormalRibKind
-- line 2789 ----------------------------------------
-- line 2912 ----------------------------------------
     .                                       ),
     .                                   );
     .                               }
     .                               return Res::Err;
     .                           }
     .                       }
     .                       _ => {}
     .                   }
   664 ( 0.00%)          res
     .               }
     .           
     .               fn record_partial_res(&mut self, node_id: NodeId, resolution: PartialRes) {
     .                   debug!("(recording res) recording {:?} for {}", resolution, node_id);
 1,572 ( 0.00%)          if let Some(prev_res) = self.partial_res_map.insert(node_id, resolution) {
     .                       panic!("path resolved multiple times ({:?} before, {:?} now)", prev_res, resolution);
     .                   }
     .               }
     .           
     .               fn record_pat_span(&mut self, node: NodeId, span: Span) {
     .                   debug!("(recording pat) recording {:?} for {:?}", node, span);
     .                   self.pat_span_map.insert(node, span);
     .               }
     .           
   520 ( 0.00%)      fn is_accessible_from(&self, vis: ty::Visibility, module: Module<'a>) -> bool {
 7,624 ( 0.00%)          vis.is_accessible_from(module.nearest_parent_mod(), self)
   468 ( 0.00%)      }
     .           
     .               fn set_binding_parent_module(&mut self, binding: &'a NameBinding<'a>, module: Module<'a>) {
 5,380 ( 0.00%)          if let Some(old_module) = self.binding_parent_modules.insert(PtrKey(binding), module) {
     .                       if !ptr::eq(module, old_module) {
     .                           span_bug!(binding.span, "parent module is reset for binding");
     .                       }
     .                   }
     .               }
     .           
     .               fn disambiguate_macro_rules_vs_modularized(
     .                   &self,
-- line 2948 ----------------------------------------
-- line 2959 ----------------------------------------
     .                       (Some(macro_rules), Some(modularized)) => {
     .                           macro_rules.nearest_parent_mod() == modularized.nearest_parent_mod()
     .                               && modularized.is_ancestor_of(macro_rules)
     .                       }
     .                       _ => false,
     .                   }
     .               }
     .           
     7 ( 0.00%)      fn report_errors(&mut self, krate: &Crate) {
     .                   self.report_with_use_injections(krate);
     .           
     6 ( 0.00%)          for &(span_use, span_def) in &self.macro_expanded_macro_export_errors {
     .                       let msg = "macro-expanded `macro_export` macros from the current crate \
     .                                  cannot be referred to by absolute paths";
     .                       self.lint_buffer.buffer_lint_with_diagnostic(
     .                           lint::builtin::MACRO_EXPANDED_MACRO_EXPORTS_ACCESSED_BY_ABSOLUTE_PATHS,
     .                           CRATE_NODE_ID,
     .                           span_use,
     .                           msg,
     .                           BuiltinLintDiagnostics::MacroExpandedMacroExportsAccessedByAbsolutePaths(span_def),
-- line 2978 ----------------------------------------
-- line 2984 ----------------------------------------
     .                   }
     .           
     .                   let mut reported_spans = FxHashSet::default();
     .                   for error in &self.privacy_errors {
     .                       if reported_spans.insert(error.dedup_span) {
     .                           self.report_privacy_error(error);
     .                       }
     .                   }
     8 ( 0.00%)      }
     .           
     .               fn report_with_use_injections(&mut self, krate: &Crate) {
     .                   for UseError { mut err, candidates, def_id, instead, suggestion } in
    10 ( 0.00%)              self.use_injections.drain(..)
     .                   {
     .                       let (span, found_use) = if let Some(def_id) = def_id.as_local() {
     .                           UsePlacementFinder::check(krate, self.def_id_to_node_id[def_id])
     .                       } else {
     .                           (None, false)
     .                       };
     .                       if !candidates.is_empty() {
     .                           diagnostics::show_candidates(
-- line 3004 ----------------------------------------
-- line 3284 ----------------------------------------
     .                       }
     .           
     .                       return;
     .                   }
     .           
     .                   err.span_suggestion(span, message, String::new(), Applicability::MachineApplicable);
     .               }
     .           
   240 ( 0.00%)      fn extern_prelude_get(
     .                   &mut self,
     .                   ident: Ident,
     .                   speculative: bool,
     .               ) -> Option<&'a NameBinding<'a>> {
   120 ( 0.00%)          if ident.is_path_segment_keyword() {
     .                       // Make sure `self`, `super` etc produce an error when passed to here.
     .                       return None;
     .                   }
   216 ( 0.00%)          self.extern_prelude.get(&ident.normalize_to_macros_2_0()).cloned().and_then(|entry| {
    40 ( 0.00%)              if let Some(binding) = entry.extern_crate_item {
     6 ( 0.00%)                  if !speculative && entry.introduced_by_item {
     .                               self.record_use(ident, binding, false);
     .                           }
     .                           Some(binding)
     .                       } else {
    36 ( 0.00%)                  let crate_id = if !speculative {
    14 ( 0.00%)                      let Some(crate_id) =
    21 ( 0.00%)                          self.crate_loader.process_path_extern(ident.name, ident.span) else { return Some(self.dummy_binding); };
     .                               crate_id
     .                           } else {
    44 ( 0.00%)                      self.crate_loader.maybe_process_path_extern(ident.name)?
     .                           };
     .                           let crate_root = self.expect_module(crate_id.as_def_id());
     .                           Some(
     .                               (crate_root, ty::Visibility::Public, DUMMY_SP, LocalExpnId::ROOT)
    18 ( 0.00%)                          .to_name_binding(self.arenas),
     .                           )
     .                       }
     .                   })
   192 ( 0.00%)      }
     .           
     .               /// Rustdoc uses this to resolve things in a recoverable way. `ResolutionError<'a>`
     .               /// isn't something that can be returned because it can't be made to live that long,
     .               /// and also it's a private type. Fortunately rustdoc doesn't need to know the error,
     .               /// just that an error occurred.
     .               // FIXME(Manishearth): intra-doc links won't get warned of epoch changes.
     .               pub fn resolve_str_path_error(
     .                   &mut self,
-- line 3330 ----------------------------------------
-- line 3422 ----------------------------------------
     .               #[inline]
     .               pub fn opt_span(&self, def_id: DefId) -> Option<Span> {
     .                   def_id.as_local().map(|def_id| self.definitions.def_span(def_id))
     .               }
     .           
     .               /// Checks if an expression refers to a function marked with
     .               /// `#[rustc_legacy_const_generics]` and returns the argument index list
     .               /// from the attribute.
 1,696 ( 0.00%)      pub fn legacy_const_generic_args(&mut self, expr: &Expr) -> Option<Vec<usize>> {
   848 ( 0.00%)          if let ExprKind::Path(None, path) = &expr.kind {
     .                       // Don't perform legacy const generics rewriting if the path already
     .                       // has generic arguments.
   212 ( 0.00%)              if path.segments.last().unwrap().args.is_some() {
     .                           return None;
     .                       }
     .           
     .                       let partial_res = self.partial_res_map.get(&expr.id)?;
   424 ( 0.00%)              if partial_res.unresolved_segments() != 0 {
     .                           return None;
     .                       }
     .           
   640 ( 0.00%)              if let Res::Def(def::DefKind::Fn, def_id) = partial_res.base_res() {
     .                           // We only support cross-crate argument rewriting. Uses
     .                           // within the same crate should be updated to use the new
     .                           // const generics style.
   114 ( 0.00%)                  if def_id.is_local() {
     .                               return None;
     .                           }
     .           
     .                           if let Some(v) = self.legacy_const_generic_args.get(&def_id) {
     .                               return v.clone();
     .                           }
     .           
   672 ( 0.00%)                  let attr = self
     .                               .cstore()
   224 ( 0.00%)                      .item_attrs_untracked(def_id, self.session)
     .                               .find(|a| a.has_name(sym::rustc_legacy_const_generics))?;
     .                           let mut ret = Vec::new();
     .                           for meta in attr.meta_item_list()? {
     .                               match meta.literal()?.kind {
     .                                   LitKind::Int(a, _) => ret.push(a as usize),
     .                                   _ => panic!("invalid arg index"),
     .                               }
     .                           }
     .                           // Cache the lookup to avoid parsing attributes for an iterm multiple times.
     .                           self.legacy_const_generic_args.insert(def_id, Some(ret.clone()));
     .                           return Some(ret);
     .                       }
     .                   }
     .                   None
 1,908 ( 0.00%)      }
     .           
     7 ( 0.00%)      fn resolve_main(&mut self) {
     2 ( 0.00%)          let module = self.graph_root;
     .                   let ident = Ident::with_dummy_span(sym::main);
     .                   let parent_scope = &ParentScope::module(module, self);
     .           
     .                   let name_binding = match self.resolve_ident_in_module(
     .                       ModuleOrUniformRoot::Module(module),
     .                       ident,
     .                       ValueNS,
     .                       parent_scope,
-- line 3483 ----------------------------------------
-- line 3490 ----------------------------------------
     .           
     .                   let res = name_binding.res();
     .                   let is_import = name_binding.is_import();
     .                   let span = name_binding.span;
     .                   if let Res::Def(DefKind::Fn, _) = res {
     .                       self.record_use(ident, name_binding, false);
     .                   }
     .                   self.main_def = Some(MainDefinition { res, is_import, span });
     8 ( 0.00%)      }
     .           }
     .           
     .           fn names_to_string(names: &[Symbol]) -> String {
     .               let mut result = String::new();
     .               for (i, name) in names.iter().filter(|name| **name != kw::PathRoot).enumerate() {
     .                   if i > 0 {
     .                       result.push_str("::");
     .                   }
-- line 3506 ----------------------------------------
-- line 3558 ----------------------------------------
     .               /// This is the "trait item" from a fully qualified path. For example,
     .               /// we might be resolving  `X::Y::Z` from a path like `<T as X::Y>::Z`.
     .               /// The `path_span` is the span of the to the trait itself (`X::Y`).
     .               QPathTrait { qpath_id: NodeId, qpath_span: Span },
     .           }
     .           
     .           impl CrateLint {
     .               fn node_id(&self) -> Option<NodeId> {
   546 ( 0.00%)          match *self {
     .                       CrateLint::No => None,
     .                       CrateLint::SimplePath(id)
     .                       | CrateLint::UsePath { root_id: id, .. }
     .                       | CrateLint::QPathTrait { qpath_id: id, .. } => Some(id),
     .                   }
     .               }
     .           }
     .           
     .           pub fn provide(providers: &mut Providers) {
     .               late::lifetimes::provide(providers);
     1 ( 0.00%)  }

59,327 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/md-5-0.9.1/src/utils.rs
--------------------------------------------------------------------------------
Ir              

     .           #![allow(clippy::many_single_char_names)]
     .           use crate::consts::RC;
     .           use core::convert::TryInto;
     .           
     .           #[inline(always)]
     .           fn op_f(w: u32, x: u32, y: u32, z: u32, m: u32, c: u32, s: u32) -> u32 {
77,789 ( 0.04%)      ((x & y) | (!x & z))
     .                   .wrapping_add(w)
     .                   .wrapping_add(m)
     .                   .wrapping_add(c)
     .                   .rotate_left(s)
     .                   .wrapping_add(x)
     .           }
     .           #[inline(always)]
     .           fn op_g(w: u32, x: u32, y: u32, z: u32, m: u32, c: u32, s: u32) -> u32 {
74,154 ( 0.03%)      ((x & z) | (y & !z))
     .                   .wrapping_add(w)
     .                   .wrapping_add(m)
     .                   .wrapping_add(c)
     .                   .rotate_left(s)
     .                   .wrapping_add(x)
     .           }
     .           
     .           #[inline(always)]
     .           fn op_h(w: u32, x: u32, y: u32, z: u32, m: u32, c: u32, s: u32) -> u32 {
36,350 ( 0.02%)      (x ^ y ^ z)
     .                   .wrapping_add(w)
     .                   .wrapping_add(m)
     .                   .wrapping_add(c)
     .                   .rotate_left(s)
     .                   .wrapping_add(x)
     .           }
     .           
     .           #[inline(always)]
     .           fn op_i(w: u32, x: u32, y: u32, z: u32, m: u32, c: u32, s: u32) -> u32 {
46,528 ( 0.02%)      (y ^ (x | !z))
     .                   .wrapping_add(w)
     .                   .wrapping_add(m)
     .                   .wrapping_add(c)
     .                   .rotate_left(s)
     .                   .wrapping_add(x)
     .           }
     .           
     .           #[inline]
 6,543 ( 0.00%)  pub fn compress(state: &mut [u32; 4], input: &[u8; 64]) {
 1,454 ( 0.00%)      let mut a = state[0];
   727 ( 0.00%)      let mut b = state[1];
   727 ( 0.00%)      let mut c = state[2];
   727 ( 0.00%)      let mut d = state[3];
     .           
     .               let mut data = [0u32; 16];
     .               for (o, chunk) in data.iter_mut().zip(input.chunks_exact(4)) {
18,175 ( 0.01%)          *o = u32::from_le_bytes(chunk.try_into().unwrap());
     .               }
     .           
     .               // round 1
     .               a = op_f(a, b, c, d, data[0], RC[0], 7);
     .               d = op_f(d, a, b, c, data[1], RC[1], 12);
     .               c = op_f(c, d, a, b, data[2], RC[2], 17);
     .               b = op_f(b, c, d, a, data[3], RC[3], 22);
     .           
-- line 61 ----------------------------------------
-- line 132 ----------------------------------------
     .               c = op_i(c, d, a, b, data[6], RC[58], 15);
     .               b = op_i(b, c, d, a, data[13], RC[59], 21);
     .           
     .               a = op_i(a, b, c, d, data[4], RC[60], 6);
     .               d = op_i(d, a, b, c, data[11], RC[61], 10);
     .               c = op_i(c, d, a, b, data[2], RC[62], 15);
     .               b = op_i(b, c, d, a, data[9], RC[63], 21);
     .           
 1,454 ( 0.00%)      state[0] = state[0].wrapping_add(a);
   727 ( 0.00%)      state[1] = state[1].wrapping_add(b);
   727 ( 0.00%)      state[2] = state[2].wrapping_add(c);
   727 ( 0.00%)      state[3] = state[3].wrapping_add(d);
 5,816 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir               

-- line 186 ----------------------------------------
      .           /// // use the values stored in map
      .           /// ```
      .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
      .               pub(crate) hash_builder: S,
      .               pub(crate) table: RawTable<(K, V), A>,
      .           }
      .           
      .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
      8 ( 0.00%)      fn clone(&self) -> Self {
 15,770 ( 0.01%)          HashMap {
      .                       hash_builder: self.hash_builder.clone(),
  3,240 ( 0.00%)              table: self.table.clone(),
      .                   }
      9 ( 0.00%)      }
      .           
      .               fn clone_from(&mut self, source: &Self) {
      .                   self.table.clone_from(&source.table);
      .           
      .                   // Update hash_builder only if we successfully cloned all elements.
      .                   self.hash_builder.clone_from(&source.hash_builder);
      .               }
      .           }
-- line 207 ----------------------------------------
-- line 210 ----------------------------------------
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash,
      .               S: BuildHasher,
      .           {
  9,952 ( 0.00%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
      .           }
      .           
      .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: ?Sized + Eq,
      .           {
 26,533 ( 0.01%)      move |x| k.eq(x.0.borrow())
      .           }
      .           
      .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: ?Sized + Eq,
      .           {
 15,463 ( 0.01%)      move |x| k.eq(x.borrow())
      .           }
      .           
      .           #[cfg(not(feature = "nightly"))]
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
      .               use core::hash::Hasher;
      .               let mut state = hash_builder.build_hasher();
      .               val.hash(&mut state);
      .               state.finish()
      .           }
      .           
      .           #[cfg(feature = "nightly")]
      .           #[cfg_attr(feature = "inline-more", inline)]
      4 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash + ?Sized,
      .               S: BuildHasher,
      .           {
      .               hash_builder.hash_one(val)
      8 ( 0.00%)  }
      .           
      .           #[cfg(not(feature = "nightly"))]
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
      .           where
      .               K: Hash,
      .               S: BuildHasher,
      .           {
-- line 274 ----------------------------------------
-- line 367 ----------------------------------------
      .               /// let s = DefaultHashBuilder::default();
      .               /// let mut map = HashMap::with_hasher(s);
      .               /// map.insert(1, 2);
      .               /// ```
      .               ///
      .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub const fn with_hasher(hash_builder: S) -> Self {
 13,309 ( 0.01%)          Self {
      .                       hash_builder,
      .                       table: RawTable::new(),
      .                   }
      .               }
      .           
      .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
      .               /// to hash the keys.
      .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
      .               /// use hashbrown::hash_map::DefaultHashBuilder;
      .               ///
      .               /// let s = DefaultHashBuilder::default();
      .               /// let mut map = HashMap::with_hasher(s);
      .               /// map.insert(1, 2);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
     70 ( 0.00%)          Self {
      .                       hash_builder,
      .                       table: RawTable::new_in(alloc),
      .                   }
      .               }
      .           
      .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
      .               /// to hash the keys. It will be allocated with the given allocator.
      .               ///
-- line 453 ----------------------------------------
-- line 663 ----------------------------------------
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// assert_eq!(a.len(), 0);
      .               /// a.insert(1, "a");
      .               /// assert_eq!(a.len(), 1);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn len(&self) -> usize {
    828 ( 0.00%)          self.table.len()
      .               }
      .           
      .               /// Returns `true` if the map contains no elements.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// assert!(a.is_empty());
      .               /// a.insert(1, "a");
      .               /// assert!(!a.is_empty());
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn is_empty(&self) -> bool {
  5,646 ( 0.00%)          self.len() == 0
      .               }
      .           
      .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
      .               /// allocated memory for reuse.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// a.insert(1, "a");
      .               /// a.clear();
      .               /// assert!(a.is_empty());
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      6 ( 0.00%)      pub fn clear(&mut self) {
      .                   self.table.clear();
      6 ( 0.00%)      }
      .           
      .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
      .               /// The map cannot be used after calling this.
      .               /// The iterator element type is `K`.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
      .               /// }
      .               ///
      .               /// assert_eq!(letters[&'s'], 2);
      .               /// assert_eq!(letters[&'t'], 3);
      .               /// assert_eq!(letters[&'u'], 1);
      .               /// assert_eq!(letters.get(&'y'), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
 17,044 ( 0.01%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
      .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
      .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
  8,620 ( 0.00%)              Entry::Occupied(OccupiedEntry {
      .                           hash,
      .                           key: Some(key),
      .                           elem,
      .                           table: self,
      .                       })
      .                   } else {
 12,685 ( 0.01%)              Entry::Vacant(VacantEntry {
      .                           hash,
      .                           key,
      .                           table: self,
      .                       })
      .                   }
 21,305 ( 0.01%)      }
      .           
      .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
      .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
      .               /// ```
      .               #[inline]
      .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
 53,324 ( 0.02%)          match self.get_inner(k) {
      .                       Some(&(_, ref v)) => Some(v),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Returns the key-value pair corresponding to the supplied key.
      .               ///
      .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
 82,662 ( 0.04%)          if self.table.is_empty() {
      .                       None
      .                   } else {
      2 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
      .                       self.table.get(hash, equivalent_key(k))
      .                   }
      .               }
      .           
      .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
      .               ///
      .               /// The supplied key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// assert_eq!(map.contains_key(&1), true);
      .               /// assert_eq!(map.contains_key(&2), false);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
 15,266 ( 0.01%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   self.get_inner(k).is_some()
 20,072 ( 0.01%)      }
      .           
      .               /// Returns a mutable reference to the value corresponding to the key.
      .               ///
      .               /// The key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
      .               ///
      .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// if let Some(x) = map.get_mut(&1) {
      .               ///     *x = "b";
      .               /// }
      .               /// assert_eq!(map[&1], "b");
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      9 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
     27 ( 0.00%)          match self.get_inner_mut(k) {
      .                       Some(&mut (_, ref mut v)) => Some(v),
      .                       None => None,
      .                   }
     18 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      9 ( 0.00%)          if self.table.is_empty() {
      .                       None
      .                   } else {
      .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
      .                       self.table.get_mut(hash, equivalent_key(k))
      .                   }
      .               }
      .           
      .               /// Attempts to get mutable references to `N` values in the map at once.
-- line 1219 ----------------------------------------
-- line 1495 ----------------------------------------
      .               /// assert_eq!(map.insert(37, "a"), None);
      .               /// assert_eq!(map.is_empty(), false);
      .               ///
      .               /// map.insert(37, "b");
      .               /// assert_eq!(map.insert(37, "c"), Some("b"));
      .               /// assert_eq!(map[&37], "c");
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
346,713 ( 0.16%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
      .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
      .                   if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
      .                       Some(mem::replace(item, v))
      .                   } else {
164,604 ( 0.08%)              self.table
161,544 ( 0.07%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
 14,223 ( 0.01%)              None
      .                   }
310,587 ( 0.14%)      }
      .           
      .               /// Insert a key-value pair into the map without checking
      .               /// if the key already exists in the map.
      .               ///
      .               /// Returns a reference to the key and value just inserted.
      .               ///
      .               /// This operation is safe if a key does not exist in the map.
      .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// assert_eq!(map.remove(&1), Some("a"));
      .               /// assert_eq!(map.remove(&1), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
  4,020 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
 65,723 ( 0.03%)          match self.remove_entry(k) {
  8,364 ( 0.00%)              Some((_, v)) => Some(v),
  3,273 ( 0.00%)              None => None,
      .                   }
  9,340 ( 0.00%)      }
      .           
      .               /// Removes a key from the map, returning the stored key and value if the
      .               /// key was previously in the map.
      .               ///
      .               /// The key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
      .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
 19,319 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
      .               }
      .           }
      .           
      .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
      .               /// Creates a raw entry builder for the HashMap.
      .               ///
      .               /// Raw entries provide the lowest level of control for searching and
      .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2209 ----------------------------------------
      .               /// Creates a `RawEntryMut` from the given key and its hash.
      .               #[inline]
      .               #[allow(clippy::wrong_self_convention)]
      .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Eq,
      .               {
 84,028 ( 0.04%)          self.from_hash(hash, equivalent(k))
      .               }
      .           }
      .           
      .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
      .               /// Creates a `RawEntryMut` from the given hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
229,298 ( 0.11%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   for<'b> F: FnMut(&'b K) -> bool,
      .               {
      .                   self.search(hash, is_match)
243,804 ( 0.11%)      }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   for<'b> F: FnMut(&'b K) -> bool,
      .               {
 20,122 ( 0.01%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
101,705 ( 0.05%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
      .                           elem,
      .                           table: &mut self.map.table,
      .                           hash_builder: &self.map.hash_builder,
      .                       }),
 40,979 ( 0.02%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
      .                           table: &mut self.map.table,
      .                           hash_builder: &self.map.hash_builder,
      .                       }),
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
      .               {
      .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
      .                   self.from_key_hashed_nocheck(hash, k)
      .               }
      .           
      .               /// Access an entry by a key and its hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
 64,203 ( 0.03%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Eq,
      .               {
 76,909 ( 0.04%)          self.from_hash(hash, equivalent(k))
118,684 ( 0.05%)      }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
      .               where
      .                   F: FnMut(&K) -> bool,
      .               {
131,331 ( 0.06%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
      .                       Some(&(ref key, ref value)) => Some((key, value)),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Access an entry by hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
      .               /// and returns a mutable reference to it.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::shadow_unrelated)]
      .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
      .               where
      .                   K: Hash,
      .                   S: BuildHasher,
      .               {
 65,844 ( 0.03%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
      .                       hash,
      .                       (key, value),
      .                       make_hasher::<K, _, V, S>(self.hash_builder),
      .                   );
      .                   (k, v)
      .               }
      .           
      .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
      .               /// map.insert("a", 1);
      .               /// map.insert("b", 2);
      .               /// map.insert("c", 3);
      .               ///
      .               /// // Not possible with .iter()
      .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      9 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
  1,088 ( 0.00%)          IntoIter {
  1,042 ( 0.00%)              inner: self.table.into_iter(),
      .                   }
     27 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
      .               type Item = (&'a K, &'a V);
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
  6,853 ( 0.00%)          match self.inner.next() {
      .                       Some(x) => unsafe {
      .                           let r = x.as_ref();
     21 ( 0.00%)                  Some((&r.0, &r.1))
      .                       },
      .                       None => None,
      .                   }
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      2 ( 0.00%)          self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V> ExactSizeIterator for Iter<'_, K, V> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn len(&self) -> usize {
      .                   self.inner.len()
      .               }
      .           }
-- line 3013 ----------------------------------------
-- line 3051 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
      .               type Item = (K, V);
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<(K, V)> {
     18 ( 0.00%)          self.inner.next()
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
      .                   f.debug_list().entries(self.iter()).finish()
      .               }
      .           }
      .           
      .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
      .               type Item = &'a K;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      3 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
      .                   match self.inner.next() {
      .                       Some((k, _)) => Some(k),
      .                       None => None,
      .                   }
      6 ( 0.00%)      }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 3819 ----------------------------------------
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn insert(self, value: V) -> &'a mut V
      .               where
      .                   K: Hash,
      .                   S: BuildHasher,
      .               {
      .                   let table = &mut self.table.table;
    384 ( 0.00%)          let entry = table.insert_entry(
      .                       self.hash,
      .                       (self.key, value),
      .                       make_hasher::<K, _, V, S>(&self.table.hash_builder),
      .                   );
      .                   &mut entry.1
      .               }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3835 ----------------------------------------
-- line 4557 ----------------------------------------
      .           /// keys with new values returned from the iterator.
      .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
      .           where
      .               K: Eq + Hash,
      .               S: BuildHasher,
      .               A: Allocator + Clone,
      .           {
      .               #[cfg_attr(feature = "inline-more", inline)]
    472 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
      .                   // Keys may be already present or show multiple times in the iterator.
      .                   // Reserve the entire hint lower bound if the map is empty.
      .                   // Otherwise reserve half the hint (rounded up), so the map
      .                   // will only resize twice in the worst case.
    438 ( 0.00%)          let iter = iter.into_iter();
  1,002 ( 0.00%)          let reserve = if self.is_empty() {
      .                       iter.size_hint().0
      .                   } else {
     15 ( 0.00%)              (iter.size_hint().0 + 1) / 2
      .                   };
      .                   self.reserve(reserve);
      .                   iter.for_each(move |(k, v)| {
 16,269 ( 0.01%)              self.insert(k, v);
      .                   });
    278 ( 0.00%)      }
      .           
      .               #[inline]
      .               #[cfg(feature = "nightly")]
      .               fn extend_one(&mut self, (k, v): (K, V)) {
      .                   self.insert(k, v);
      .               }
      .           
      .               #[inline]
-- line 4588 ----------------------------------------

147,946 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir              

-- line 27 ----------------------------------------
     .           impl CacheEntry {
     .               #[inline]
     .               fn update(
     .                   &mut self,
     .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
     .                   pos: BytePos,
     .                   time_stamp: usize,
     .               ) {
 1,364 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
 2,135 ( 0.00%)              self.file = file;
 2,500 ( 0.00%)              self.file_index = file_idx;
     .                   }
     .           
   353 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
     .                   let line_bounds = self.file.line_bounds(line_index);
 3,796 ( 0.00%)          self.line_number = line_index + 1;
 6,256 ( 0.00%)          self.line = line_bounds;
     .                   self.touch(time_stamp);
     .               }
     .           
     .               #[inline]
     .               fn touch(&mut self, time_stamp: usize) {
 6,014 ( 0.00%)          self.time_stamp = time_stamp;
     .               }
     .           }
     .           
     .           #[derive(Clone)]
     .           pub struct CachingSourceMapView<'sm> {
     .               source_map: &'sm SourceMap,
     .               line_cache: [CacheEntry; 3],
     .               time_stamp: usize,
     .           }
     .           
     .           impl<'sm> CachingSourceMapView<'sm> {
   926 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
     .                   let files = source_map.files();
   463 ( 0.00%)          let first_file = files[0].clone();
     .                   let entry = CacheEntry {
     .                       time_stamp: 0,
     .                       line_number: 0,
     .                       line: BytePos(0)..BytePos(0),
     .                       file: first_file,
     .                       file_index: 0,
     .                   };
     .           
 2,315 ( 0.00%)          CachingSourceMapView {
     .                       source_map,
 3,241 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
     .                       time_stamp: 0,
     .                   }
 1,852 ( 0.00%)      }
     .           
     .               pub fn byte_pos_to_line_and_col(
     .                   &mut self,
     .                   pos: BytePos,
     .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
     .                   self.time_stamp += 1;
     .           
     .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
     .                   };
     .           
     .                   let cache_entry = &mut self.line_cache[oldest];
     .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
     .           
     .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
     .               }
     .           
25,627 ( 0.01%)      pub fn span_data_to_lines_and_cols(
     .                   &mut self,
     .                   span_data: &SpanData,
     .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
14,644 ( 0.01%)          self.time_stamp += 1;
     .           
     .                   // Check if lo and hi are in the cached lines.
 3,661 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
 3,661 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
     .           
 4,812 ( 0.00%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
     .                       // Cache hit for span lo and hi. Check if they belong to the same file.
     .                       let result = {
 4,706 ( 0.00%)                  let lo = &self.line_cache[lo_cache_idx as usize];
     .                           let hi = &self.line_cache[hi_cache_idx as usize];
     .           
14,118 ( 0.01%)                  if lo.file_index != hi.file_index {
     .                               return None;
     .                           }
     .           
     .                           (
 4,706 ( 0.00%)                      lo.file.clone(),
     .                               lo.line_number,
     .                               span_data.lo - lo.line.start,
 2,353 ( 0.00%)                      hi.line_number,
     .                               span_data.hi - hi.line.start,
     .                           )
     .                       };
     .           
 2,353 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
 2,353 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
     .           
 9,412 ( 0.00%)              return Some(result);
     .                   }
     .           
     .                   // No cache hit or cache hit for only one of span lo and hi.
 2,510 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
     .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
     .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
     .                   } else {
     .                       self.oldest_cache_entry_index()
     .                   };
     .           
     .                   // If the entry doesn't point to the correct file, get the new file and index.
     .                   // Return early if the file containing beginning of span doesn't contain end of span.
10,320 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
 4,775 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
 5,730 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
     .                           return None;
     .                       }
     .           
 3,820 ( 0.00%)              Some(new_file_and_idx)
     .                   } else {
     .                       let file = &self.line_cache[oldest].file;
 1,059 ( 0.00%)              if !file_contains(&file, span_data.hi) {
     .                           return None;
     .                       }
     .           
 1,059 ( 0.00%)              None
     .                   };
     .           
     .                   // Update the cache entries.
 6,540 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
     .                       // Oldest cache entry is for span_data.lo line.
     .                       (-1, -1) => {
     .                           let lo = &mut self.line_cache[oldest];
     .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
     .           
 3,681 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
     .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
     .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
     .                               let hi = &mut self.line_cache[next_oldest];
     .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
     .                               (oldest, next_oldest)
     .                           } else {
     .                               (oldest, oldest)
     .                           }
     .                       }
     .                       // Oldest cache entry is for span_data.lo line.
     .                       (-1, _) => {
     .                           let lo = &mut self.line_cache[oldest];
     .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
   106 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
   159 ( 0.00%)                  hi.touch(self.time_stamp);
     .                           (oldest, hi_cache_idx as usize)
     .                       }
     .                       // Oldest cache entry is for span_data.hi line.
     .                       (_, -1) => {
     .                           let hi = &mut self.line_cache[oldest];
    28 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
    56 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
   112 ( 0.00%)                  lo.touch(self.time_stamp);
     .                           (lo_cache_idx as usize, oldest)
     .                       }
     .                       _ => {
     .                           panic!();
     .                       }
     .                   };
     .           
     .                   let lo = &self.line_cache[lo_idx];
     .                   let hi = &self.line_cache[hi_idx];
     .           
     .                   // Span lo and hi may equal line end when last line doesn't
     .                   // end in newline, hence the inclusive upper bounds below.
 2,616 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
 1,308 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
 2,616 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
 1,308 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
 6,540 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
 3,924 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
 3,924 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
     .           
 3,924 ( 0.00%)          Some((
 1,308 ( 0.00%)              lo.file.clone(),
     .                       lo.line_number,
     .                       span_data.lo - lo.line.start,
 1,308 ( 0.00%)              hi.line_number,
     .                       span_data.hi - hi.line.start,
     .                   ))
32,949 ( 0.02%)      }
     .           
     .               fn cache_entry_index(&self, pos: BytePos) -> isize {
     .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
47,822 ( 0.02%)              if cache_entry.line.contains(&pos) {
     .                           return idx as isize;
     .                       }
     .                   }
     .           
     .                   -1
     .               }
     .           
     .               fn oldest_cache_entry_index(&self) -> usize {
     .                   let mut oldest = 0;
     .           
     .                   for idx in 1..self.line_cache.len() {
 7,362 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
     .                           oldest = idx;
     .                       }
     .                   }
     .           
     .                   oldest
     .               }
     .           
     .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
     .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
     .           
     .                   for idx in 0..self.line_cache.len() {
 3,636 ( 0.00%)              if idx != avoid_idx
 2,700 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
     .                       {
     .                           oldest = idx;
     .                       }
     .                   }
     .           
     .                   oldest
     .               }
     .           
 4,775 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
   955 ( 0.00%)          if !self.source_map.files().is_empty() {
 1,910 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
     .                       let file = &self.source_map.files()[file_idx];
     .           
 7,640 ( 0.00%)              if file_contains(file, pos) {
     .                           return Some((file.clone(), file_idx));
     .                       }
     .                   }
     .           
     .                   None
 4,775 ( 0.00%)      }
     .           }
     .           
     .           #[inline]
     .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
     .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
     .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
     .               // purposes of converting a byte position to a line and column number, we can't come up with a
     .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

78,869 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir               

-- line 57 ----------------------------------------
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
      .                   ///
      .                   /// ```
      .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      6 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
      3 ( 0.00%)              from_str_radix(src, radix)
      9 ( 0.00%)          }
      .           
      .                   /// Returns the number of ones in the binary representation of `self`.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
      .                   ///
      .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
      .                   #[doc(alias = "popcount")]
      .                   #[doc(alias = "popcnt")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn count_ones(self) -> u32 {
  2,355 ( 0.00%)              intrinsics::ctpop(self as $ActualT) as u32
      .                   }
      .           
      .                   /// Returns the number of zeros in the binary representation of `self`.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
      .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
      .                   /// assert_eq!(n.leading_zeros(), 2);
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn leading_zeros(self) -> u32 {
 45,610 ( 0.02%)              intrinsics::ctlz(self as $ActualT) as u32
      .                   }
      .           
      .                   /// Returns the number of trailing zeros in the binary representation
      .                   /// of `self`.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
      .                   /// assert_eq!(n.trailing_zeros(), 3);
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn trailing_zeros(self) -> u32 {
 40,442 ( 0.02%)              intrinsics::cttz(self) as u32
      .                   }
      .           
      .                   /// Returns the number of leading ones in the binary representation of `self`.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
      .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn rotate_left(self, n: u32) -> Self {
981,902 ( 0.45%)              intrinsics::rotate_left(self, n as $SelfT)
      .                   }
      .           
      .                   /// Shifts the bits to the right by a specified amount, `n`,
      .                   /// wrapping the truncated bits to the beginning of the resulting
      .                   /// integer.
      .                   ///
      .                   /// Please note this isn't the same operation as the `>>` shifting operator!
      .                   ///
-- line 220 ----------------------------------------
-- line 456 ----------------------------------------
      .                   )]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
      .                   #[inline(always)]
      .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
      .                       // SAFETY: the caller must uphold the safety contract for
      .                       // `unchecked_add`.
124,040 ( 0.06%)              unsafe { intrinsics::unchecked_add(self, rhs) }
      .                   }
      .           
      .                   /// Checked addition with a signed integer. Computes `self + rhs`,
      .                   /// returning `None` if overflow occurred.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
      .                   )]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
      .                   #[inline(always)]
      .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
      .                       // SAFETY: the caller must uphold the safety contract for
      .                       // `unchecked_sub`.
  1,821 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
      .                   }
      .           
      .                   /// Checked integer multiplication. Computes `self * rhs`, returning
      .                   /// `None` if overflow occurred.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 1035 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
      .                   #[inline(always)]
      .                   pub const fn saturating_add(self, rhs: Self) -> Self {
  6,528 ( 0.00%)              intrinsics::saturating_add(self, rhs)
      .                   }
      .           
      .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
      .                   /// saturating at the numeric bounds instead of overflowing.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
      .                   #[inline(always)]
      .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
    250 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
      .                   }
      .           
      .                   /// Saturating integer multiplication. Computes `self * rhs`,
      .                   /// saturating at the numeric bounds instead of overflowing.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
576,736 ( 0.27%)              intrinsics::wrapping_add(self, rhs)
      .                   }
      .           
      .                   /// Wrapping (modular) addition with a signed integer. Computes
      .                   /// `self + rhs`, wrapping around at the boundary of the type.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
211,564 ( 0.10%)              intrinsics::wrapping_sub(self, rhs)
      .                   }
      .           
      .                   /// Wrapping (modular) multiplication. Computes `self *
      .                   /// rhs`, wrapping around at the boundary of the type.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
      .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
652,284 ( 0.30%)              intrinsics::wrapping_mul(self, rhs)
      .                   }
      .           
      .                   /// Wrapping (modular) division. Computes `self / rhs`.
      .                   /// Wrapped division on unsigned types is just normal division.
      .                   /// There's no way wrapping could ever happen.
      .                   /// This function exists, so that all operations
      .                   /// are accounted for in the wrapping operations.
      .                   ///
-- line 1256 ----------------------------------------
-- line 1492 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
      .                   /// ```
      .                   #[stable(feature = "wrapping", since = "1.7.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
 73,266 ( 0.03%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
      .                       (a as Self, b)
      .                   }
      .           
      .                   /// Calculates `self + rhs + carry` without the ability to overflow.
      .                   ///
      .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
      .                   /// additional bit of overflow. This allows for chaining together multiple additions
      .                   /// to create "big integers" which represent larger values.
-- line 1508 ----------------------------------------
-- line 1588 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
      .                   /// ```
      .                   #[stable(feature = "wrapping", since = "1.7.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
 35,228 ( 0.02%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
      .                       (a as Self, b)
      .                   }
      .           
      .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
      .                   ///
      .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
      .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
      .                   /// to create "big integers" which represent larger values.
-- line 1604 ----------------------------------------
-- line 1674 ----------------------------------------
      .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
      .                   /// ```
      .                   #[stable(feature = "wrapping", since = "1.7.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                     without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
177,790 ( 0.08%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
      .                       (a as Self, b)
      .                   }
      .           
      .                   /// Calculates the divisor when `self` is divided by `rhs`.
      .                   ///
      .                   /// Returns a tuple of the divisor along with a boolean indicating
      .                   /// whether an arithmetic overflow would occur. Note that for unsigned
      .                   /// integers overflow never occurs, so the second value is always
-- line 1690 ----------------------------------------
-- line 2132 ----------------------------------------
      .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
      .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
      .                   /// ```
      .                   #[must_use]
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
      .                   #[inline(always)]
      .                   pub const fn is_power_of_two(self) -> bool {
    162 ( 0.00%)              self.count_ones() == 1
      .                   }
      .           
      .                   // Returns one less than next power of two.
      .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
      .                   //
      .                   // 8u8.one_less_than_next_power_of_two() == 7
      .                   // 6u8.one_less_than_next_power_of_two() == 7
      .                   //
      .                   // This method cannot overflow, as in the `next_power_of_two`
      .                   // overflow cases it instead ends up returning the maximum value
      .                   // of the type, and can return 0 for 0.
      .                   #[inline]
      .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
      .                   const fn one_less_than_next_power_of_two(self) -> Self {
  2,964 ( 0.00%)              if self <= 1 { return 0; }
      .           
  2,769 ( 0.00%)              let p = self - 1;
      .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
      .                       // That means the shift is always in-bounds, and some processors
      .                       // (such as intel pre-haswell) have more efficient ctlz
      .                       // intrinsics when the argument is non-zero.
  8,124 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
  2,952 ( 0.00%)              <$SelfT>::MAX >> z
      .                   }
      .           
      .                   /// Returns the smallest power of two greater than or equal to `self`.
      .                   ///
      .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
      .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
      .                   /// release mode (the only situation in which method can return 0).
      .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline]
      .                   #[rustc_inherit_overflow_checks]
      .                   pub const fn next_power_of_two(self) -> Self {
  2,574 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
      .                   }
      .           
      .                   /// Returns the smallest power of two greater than or equal to `n`. If
      .                   /// the next power of two is greater than the type's maximum value,
      .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
      .                   ///
      .                   /// # Examples
      .                   ///
-- line 2195 ----------------------------------------

 13,178 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs
--------------------------------------------------------------------------------
Ir                 

-- line 14 ----------------------------------------
        .           
        .           pub type EncodeResult = Result<(), !>;
        .           
        .           pub struct Encoder {
        .               pub data: Vec<u8>,
        .           }
        .           
        .           impl Encoder {
        1 ( 0.00%)      pub fn new(data: Vec<u8>) -> Encoder {
        4 ( 0.00%)          Encoder { data }
        1 ( 0.00%)      }
        .           
        1 ( 0.00%)      pub fn into_inner(self) -> Vec<u8> {
        4 ( 0.00%)          self.data
        1 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn position(&self) -> usize {
       42 ( 0.00%)          self.data.len()
        .               }
        .           }
        .           
        .           macro_rules! write_leb128 {
        .               ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{
        .                   const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);
        .                   let old_len = $enc.data.len();
        .           
-- line 40 ----------------------------------------
-- line 67 ----------------------------------------
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> EncodeResult {
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn emit_usize(&mut self, v: usize) -> EncodeResult {
    2,206 ( 0.00%)          write_leb128!(self, v, usize, write_usize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u128(&mut self, v: u128) -> EncodeResult {
        7 ( 0.00%)          write_leb128!(self, v, u128, write_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u64(&mut self, v: u64) -> EncodeResult {
       14 ( 0.00%)          write_leb128!(self, v, u64, write_u64_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u32(&mut self, v: u32) -> EncodeResult {
    1,195 ( 0.00%)          write_leb128!(self, v, u32, write_u32_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u16(&mut self, v: u16) -> EncodeResult {
        .                   self.data.extend_from_slice(&v.to_le_bytes());
        .                   Ok(())
        .               }
        .           
-- line 98 ----------------------------------------
-- line 131 ----------------------------------------
        .               #[inline]
        .               fn emit_i8(&mut self, v: i8) -> EncodeResult {
        .                   let as_u8: u8 = unsafe { std::mem::transmute(v) };
        .                   self.emit_u8(as_u8)
        .               }
        .           
        .               #[inline]
        .               fn emit_bool(&mut self, v: bool) -> EncodeResult {
       11 ( 0.00%)          self.emit_u8(if v { 1 } else { 0 })
        .               }
        .           
        .               #[inline]
        .               fn emit_f64(&mut self, v: f64) -> EncodeResult {
        .                   let as_u64: u64 = v.to_bits();
        .                   self.emit_u64(as_u64)
        .               }
        .           
-- line 147 ----------------------------------------
-- line 549 ----------------------------------------
        .               #[inline]
        .               pub fn advance(&mut self, bytes: usize) {
        .                   self.position += bytes;
        .               }
        .           
        .               #[inline]
        .               pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {
        .                   let start = self.position;
       24 ( 0.00%)          self.position += bytes;
       24 ( 0.00%)          &self.data[start..self.position]
        .               }
        .           }
        .           
        .           macro_rules! read_leb128 {
        .               ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};
        .           }
        .           
        .           impl<'a> serialize::Decoder for Decoder<'a> {
        .               #[inline]
        .               fn read_unit(&mut self) -> () {
        .                   ()
        .               }
        .           
        .               #[inline]
        .               fn read_u128(&mut self) -> u128 {
      602 ( 0.00%)          read_leb128!(self, read_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_u64(&mut self) -> u64 {
    2,060 ( 0.00%)          read_leb128!(self, read_u64_leb128)
        .               }
        .           
        .               #[inline]
   35,681 ( 0.02%)      fn read_u32(&mut self) -> u32 {
  131,425 ( 0.06%)          read_leb128!(self, read_u32_leb128)
   71,362 ( 0.03%)      }
        .           
        .               #[inline]
        .               fn read_u16(&mut self) -> u16 {
  594,356 ( 0.27%)          let bytes = [self.data[self.position], self.data[self.position + 1]];
   84,908 ( 0.04%)          let value = u16::from_le_bytes(bytes);
  171,990 ( 0.08%)          self.position += 2;
        .                   value
        .               }
        .           
        .               #[inline]
        .               fn read_u8(&mut self) -> u8 {
2,069,809 ( 0.95%)          let value = self.data[self.position];
  401,612 ( 0.18%)          self.position += 1;
        .                   value
        .               }
        .           
        .               #[inline]
  135,671 ( 0.06%)      fn read_usize(&mut self) -> usize {
  135,697 ( 0.06%)          read_leb128!(self, read_usize_leb128)
  271,342 ( 0.12%)      }
        .           
        .               #[inline]
        .               fn read_i128(&mut self) -> i128 {
        .                   read_leb128!(self, read_i128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_i64(&mut self) -> i64 {
-- line 613 ----------------------------------------
-- line 637 ----------------------------------------
        .               #[inline]
        .               fn read_isize(&mut self) -> isize {
        .                   read_leb128!(self, read_isize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_bool(&mut self) -> bool {
        .                   let value = self.read_u8();
   10,291 ( 0.00%)          value != 0
        .               }
        .           
        .               #[inline]
        .               fn read_f64(&mut self) -> f64 {
        .                   let bits = self.read_u64();
        .                   f64::from_bits(bits)
        .               }
        .           
-- line 653 ----------------------------------------
-- line 660 ----------------------------------------
        .               #[inline]
        .               fn read_char(&mut self) -> char {
        .                   let bits = self.read_u32();
        .                   std::char::from_u32(bits).unwrap()
        .               }
        .           
        .               #[inline]
        .               fn read_str(&mut self) -> Cow<'_, str> {
   20,941 ( 0.01%)          let len = self.read_usize();
  131,530 ( 0.06%)          let sentinel = self.data[self.position + len];
   32,902 ( 0.02%)          assert!(sentinel == STR_SENTINEL);
        .                   let s = unsafe {
        .                       std::str::from_utf8_unchecked(&self.data[self.position..self.position + len])
        .                   };
   82,255 ( 0.04%)          self.position += len + 1;
   13,539 ( 0.01%)          Cow::Borrowed(s)
        .               }
        .           
        .               #[inline]
        .               fn read_raw_bytes_into(&mut self, s: &mut [u8]) {
       96 ( 0.00%)          let start = self.position;
    2,109 ( 0.00%)          self.position += s.len();
       96 ( 0.00%)          s.copy_from_slice(&self.data[start..self.position]);
        .               }
        .           }
        .           
        .           // Specializations for contiguous byte sequences follow. The default implementations for slices
        .           // encode and decode each element individually. This isn't necessary for `u8` slices when using
        .           // opaque encoders and decoders, because each `u8` is unchanged by encoding and decoding.
        .           // Therefore, we can use more efficient implementations that process the entire sequence at once.
        .           
-- line 690 ----------------------------------------

  359,786 ( 0.17%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs
--------------------------------------------------------------------------------
Ir               

-- line 22 ----------------------------------------
      .           
      .           /// An entity in the Rust type system, which can be one of
      .           /// several kinds (types, lifetimes, and consts).
      .           /// To reduce memory usage, a `GenericArg` is an interned pointer,
      .           /// with the lowest 2 bits being reserved for a tag to
      .           /// indicate the type (`Ty`, `Region`, or `Const`) it points to.
      .           #[derive(Copy, Clone, PartialEq, Eq, Hash)]
      .           pub struct GenericArg<'tcx> {
  8,508 ( 0.00%)      ptr: NonZeroUsize,
 25,963 ( 0.01%)      marker: PhantomData<(Ty<'tcx>, ty::Region<'tcx>, &'tcx ty::Const<'tcx>)>,
      .           }
      .           
      .           const TAG_MASK: usize = 0b11;
      .           const TYPE_TAG: usize = 0b00;
      .           const REGION_TAG: usize = 0b01;
      .           const CONST_TAG: usize = 0b10;
      .           
  6,922 ( 0.00%)  #[derive(Debug, TyEncodable, TyDecodable, PartialEq, Eq, PartialOrd, Ord, HashStable)]
      .           pub enum GenericArgKind<'tcx> {
      .               Lifetime(ty::Region<'tcx>),
      .               Type(Ty<'tcx>),
      .               Const(&'tcx ty::Const<'tcx>),
      .           }
      .           
      .           impl<'tcx> GenericArgKind<'tcx> {
  1,890 ( 0.00%)      fn pack(self) -> GenericArg<'tcx> {
  1,890 ( 0.00%)          let (tag, ptr) = match self {
      .                       GenericArgKind::Lifetime(lt) => {
      .                           // Ensure we can use the tag bits.
      .                           assert_eq!(mem::align_of_val(lt) & TAG_MASK, 0);
      .                           (REGION_TAG, lt as *const _ as usize)
      .                       }
      .                       GenericArgKind::Type(ty) => {
      .                           // Ensure we can use the tag bits.
      .                           assert_eq!(mem::align_of_val(ty) & TAG_MASK, 0);
-- line 56 ----------------------------------------
-- line 58 ----------------------------------------
      .                       }
      .                       GenericArgKind::Const(ct) => {
      .                           // Ensure we can use the tag bits.
      .                           assert_eq!(mem::align_of_val(ct) & TAG_MASK, 0);
      .                           (CONST_TAG, ct as *const _ as usize)
      .                       }
      .                   };
      .           
  5,570 ( 0.00%)          GenericArg { ptr: unsafe { NonZeroUsize::new_unchecked(ptr | tag) }, marker: PhantomData }
  1,890 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> fmt::Debug for GenericArg<'tcx> {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   match self.unpack() {
      .                       GenericArgKind::Lifetime(lt) => lt.fmt(f),
      .                       GenericArgKind::Type(ty) => ty.fmt(f),
      .                       GenericArgKind::Const(ct) => ct.fmt(f),
-- line 75 ----------------------------------------
-- line 85 ----------------------------------------
      .           
      .           impl<'tcx> PartialOrd for GenericArg<'tcx> {
      .               fn partial_cmp(&self, other: &GenericArg<'_>) -> Option<Ordering> {
      .                   Some(self.cmp(&other))
      .               }
      .           }
      .           
      .           impl<'tcx> From<ty::Region<'tcx>> for GenericArg<'tcx> {
  2,849 ( 0.00%)      fn from(r: ty::Region<'tcx>) -> GenericArg<'tcx> {
      .                   GenericArgKind::Lifetime(r).pack()
  2,849 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> From<Ty<'tcx>> for GenericArg<'tcx> {
 15,209 ( 0.01%)      fn from(ty: Ty<'tcx>) -> GenericArg<'tcx> {
      .                   GenericArgKind::Type(ty).pack()
 15,209 ( 0.01%)      }
      .           }
      .           
      .           impl<'tcx> From<&'tcx ty::Const<'tcx>> for GenericArg<'tcx> {
      .               fn from(c: &'tcx ty::Const<'tcx>) -> GenericArg<'tcx> {
      .                   GenericArgKind::Const(c).pack()
      .               }
      .           }
      .           
      .           impl<'tcx> GenericArg<'tcx> {
      .               #[inline]
      .               pub fn unpack(self) -> GenericArgKind<'tcx> {
      .                   let ptr = self.ptr.get();
      .                   unsafe {
221,250 ( 0.10%)              match ptr & TAG_MASK {
  2,473 ( 0.00%)                  REGION_TAG => GenericArgKind::Lifetime(&*((ptr & !TAG_MASK) as *const _)),
 50,819 ( 0.02%)                  TYPE_TAG => GenericArgKind::Type(&*((ptr & !TAG_MASK) as *const _)),
     10 ( 0.00%)                  CONST_TAG => GenericArgKind::Const(&*((ptr & !TAG_MASK) as *const _)),
      .                           _ => intrinsics::unreachable(),
      .                       }
      .                   }
      .               }
      .           
      .               /// Unpack the `GenericArg` as a type when it is known certainly to be a type.
      .               /// This is true in cases where `Substs` is used in places where the kinds are known
      .               /// to be limited (e.g. in tuples, where the only parameters are type parameters).
      .               pub fn expect_ty(self) -> Ty<'tcx> {
      .                   match self.unpack() {
      .                       GenericArgKind::Type(ty) => ty,
      .                       _ => bug!("expected a type, but found another kind"),
      .                   }
  2,004 ( 0.00%)      }
      .           
      .               /// Unpack the `GenericArg` as a const when it is known certainly to be a const.
      .               pub fn expect_const(self) -> &'tcx ty::Const<'tcx> {
      .                   match self.unpack() {
      .                       GenericArgKind::Const(c) => c,
      .                       _ => bug!("expected a const, but found another kind"),
      .                   }
      .               }
-- line 140 ----------------------------------------
-- line 175 ----------------------------------------
      .           
      .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for GenericArg<'tcx> {
      .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
      .                   self.unpack().encode(e)
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for GenericArg<'tcx> {
  9,450 ( 0.00%)      fn decode(d: &mut D) -> GenericArg<'tcx> {
  9,450 ( 0.00%)          GenericArgKind::decode(d).pack()
      .               }
      .           }
      .           
      .           /// A substitution mapping generic parameters to new values.
      .           pub type InternalSubsts<'tcx> = List<GenericArg<'tcx>>;
      .           
      .           pub type SubstsRef<'tcx> = &'tcx InternalSubsts<'tcx>;
      .           
      .           impl<'a, 'tcx> InternalSubsts<'tcx> {
      .               /// Interpret these substitutions as the substitutions of a closure type.
      .               /// Closure substitutions have a particular structure controlled by the
      .               /// compiler that encodes information like the signature and closure kind;
      .               /// see `ty::ClosureSubsts` struct for more comments.
     53 ( 0.00%)      pub fn as_closure(&'a self) -> ClosureSubsts<'a> {
      .                   ClosureSubsts { substs: self }
     53 ( 0.00%)      }
      .           
      .               /// Interpret these substitutions as the substitutions of a generator type.
      .               /// Generator substitutions have a particular structure controlled by the
      .               /// compiler that encodes information like the signature and generator kind;
      .               /// see `ty::GeneratorSubsts` struct for more comments.
      .               pub fn as_generator(&'tcx self) -> GeneratorSubsts<'tcx> {
      .                   GeneratorSubsts { substs: self }
      .               }
-- line 208 ----------------------------------------
-- line 211 ----------------------------------------
      .               /// Inline const substitutions have a particular structure controlled by the
      .               /// compiler that encodes information like the inferred type;
      .               /// see `ty::InlineConstSubsts` struct for more comments.
      .               pub fn as_inline_const(&'tcx self) -> InlineConstSubsts<'tcx> {
      .                   InlineConstSubsts { substs: self }
      .               }
      .           
      .               /// Creates an `InternalSubsts` that maps each generic parameter to itself.
    250 ( 0.00%)      pub fn identity_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {
     72 ( 0.00%)          Self::for_item(tcx, def_id, |param, _| tcx.mk_param_from_def(param))
    225 ( 0.00%)      }
      .           
      .               /// Creates an `InternalSubsts` for generic parameter definitions,
      .               /// by calling closures to obtain each kind.
      .               /// The closures get to observe the `InternalSubsts` as they're
      .               /// being built, which can be used to correctly
      .               /// substitute defaults of generic parameters.
  4,693 ( 0.00%)      pub fn for_item<F>(tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
      .               where
      .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
      .               {
      .                   let defs = tcx.generics_of(def_id);
      .                   let count = defs.count();
      .                   let mut substs = SmallVec::with_capacity(count);
  1,657 ( 0.00%)          Self::fill_item(&mut substs, tcx, defs, &mut mk_kind);
  1,046 ( 0.00%)          tcx.intern_substs(&substs)
  4,716 ( 0.00%)      }
      .           
      .               pub fn extend_to<F>(&self, tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
      .               where
      .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
      .               {
      .                   Self::for_item(tcx, def_id, |param, substs| {
      .                       self.get(param.index as usize).cloned().unwrap_or_else(|| mk_kind(param, substs))
      .                   })
      .               }
      .           
  5,593 ( 0.00%)      pub fn fill_item<F>(
      .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
      .                   tcx: TyCtxt<'tcx>,
      .                   defs: &ty::Generics,
      .                   mk_kind: &mut F,
      .               ) where
      .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
      .               {
  2,315 ( 0.00%)          if let Some(def_id) = defs.parent {
      .                       let parent_defs = tcx.generics_of(def_id);
     50 ( 0.00%)              Self::fill_item(substs, tcx, parent_defs, mk_kind);
      .                   }
      .                   Self::fill_single(substs, defs, mk_kind)
  4,472 ( 0.00%)      }
      .           
      .               pub fn fill_single<F>(
      .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
      .                   defs: &ty::Generics,
      .                   mk_kind: &mut F,
      .               ) where
      .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
      .               {
      .                   substs.reserve(defs.params.len());
      .                   for param in &defs.params {
      .                       let kind = mk_kind(param, substs);
  4,650 ( 0.00%)              assert_eq!(param.index as usize, substs.len());
      .                       substs.push(kind);
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn types(&'a self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> + 'a {
      .                   self.iter()
      .                       .filter_map(|k| if let GenericArgKind::Type(ty) = k.unpack() { Some(ty) } else { None })
-- line 281 ----------------------------------------
-- line 302 ----------------------------------------
      .                   self.iter().filter_map(|k| match k.unpack() {
      .                       GenericArgKind::Lifetime(_) => None,
      .                       generic => Some(generic),
      .                   })
      .               }
      .           
      .               #[inline]
      .               pub fn type_at(&self, i: usize) -> Ty<'tcx> {
 10,644 ( 0.00%)          if let GenericArgKind::Type(ty) = self[i].unpack() {
      .                       ty
      .                   } else {
      .                       bug!("expected type for param #{} in {:?}", i, self);
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn region_at(&self, i: usize) -> ty::Region<'tcx> {
-- line 318 ----------------------------------------
-- line 350 ----------------------------------------
      .               /// impl<U> X<U> for U { fn f<V>() {} }
      .               /// ```
      .               ///
      .               /// * If `self` is `[Self, S, T]`: the identity substs of `f` in the trait.
      .               /// * If `source_ancestor` is the def_id of the trait.
      .               /// * If `target_substs` is `[U]`, the substs for the impl.
      .               /// * Then we will return `[U, T]`, the subst for `f` in the impl that
      .               ///   are needed for it to match the trait.
    280 ( 0.00%)      pub fn rebase_onto(
      .                   &self,
      .                   tcx: TyCtxt<'tcx>,
      .                   source_ancestor: DefId,
      .                   target_substs: SubstsRef<'tcx>,
      .               ) -> SubstsRef<'tcx> {
      .                   let defs = tcx.generics_of(source_ancestor);
     80 ( 0.00%)          tcx.mk_substs(target_substs.iter().chain(self.iter().skip(defs.params.len())))
    320 ( 0.00%)      }
      .           
      .               pub fn truncate_to(&self, tcx: TyCtxt<'tcx>, generics: &ty::Generics) -> SubstsRef<'tcx> {
      .                   tcx.mk_substs(self.iter().take(generics.count()))
      .               }
      .           }
      .           
      .           impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {
    735 ( 0.00%)      fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
      .                   self,
      .                   folder: &mut F,
      .               ) -> Result<Self, F::Error> {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // The match arms are in order of frequency. The 1, 2, and 0 cases are
      .                   // typically hit in 90--99.99% of cases. When folding doesn't change
      .                   // the substs, it's faster to reuse the existing substs rather than
      .                   // calling `intern_substs`.
 41,670 ( 0.02%)          match self.len() {
      .                       1 => {
  6,361 ( 0.00%)                  let param0 = self[0].try_fold_with(folder)?;
 23,672 ( 0.01%)                  if param0 == self[0] { Ok(self) } else { Ok(folder.tcx().intern_substs(&[param0])) }
      .                       }
      .                       2 => {
  4,452 ( 0.00%)                  let param0 = self[0].try_fold_with(folder)?;
 10,607 ( 0.00%)                  let param1 = self[1].try_fold_with(folder)?;
 10,480 ( 0.00%)                  if param0 == self[0] && param1 == self[1] {
      .                               Ok(self)
      .                           } else {
 10,079 ( 0.00%)                      Ok(folder.tcx().intern_substs(&[param0, param1]))
      .                           }
      .                       }
      .                       0 => Ok(self),
      .                       _ => {
      .                           let params: SmallVec<[_; 8]> =
    334 ( 0.00%)                      self.iter().map(|k| k.try_fold_with(folder)).collect::<Result<_, _>>()?;
     32 ( 0.00%)                  if params[..] == self[..] {
      .                               Ok(self)
      .                           } else {
     32 ( 0.00%)                      Ok(folder.tcx().intern_substs(&params))
      .                           }
      .                       }
      .                   }
  2,046 ( 0.00%)      }
      .           
      .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
  8,282 ( 0.00%)          self.iter().try_for_each(|t| t.visit_with(visitor))
      .               }
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           // Public trait `Subst`
      .           //
      .           // Just call `foo.subst(tcx, substs)` to perform a substitution across
      .           // `foo`. Or use `foo.subst_spanned(tcx, substs, Some(span))` when
-- line 420 ----------------------------------------
-- line 435 ----------------------------------------
      .           
      .           impl<'tcx, T: TypeFoldable<'tcx>> Subst<'tcx> for T {
      .               fn subst_spanned(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   substs: &[GenericArg<'tcx>],
      .                   span: Option<Span>,
      .               ) -> T {
 52,346 ( 0.02%)          let mut folder = SubstFolder { tcx, substs, span, binders_passed: 0 };
      .                   self.fold_with(&mut folder)
      .               }
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           // The actual substitution engine itself is a type folder.
      .           
      .           struct SubstFolder<'a, 'tcx> {
-- line 451 ----------------------------------------
-- line 456 ----------------------------------------
      .               span: Option<Span>,
      .           
      .               /// Number of region binders we have passed through while doing the substitution
      .               binders_passed: u32,
      .           }
      .           
      .           impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {
      .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
  2,572 ( 0.00%)          self.tcx
      .               }
      .           
      .               fn fold_binder<T: TypeFoldable<'tcx>>(
      .                   &mut self,
      .                   t: ty::Binder<'tcx, T>,
      .               ) -> ty::Binder<'tcx, T> {
  4,600 ( 0.00%)          self.binders_passed += 1;
    864 ( 0.00%)          let t = t.super_fold_with(self);
  4,600 ( 0.00%)          self.binders_passed -= 1;
      .                   t
      .               }
      .           
  5,076 ( 0.00%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
      .                   // Note: This routine only handles regions that are bound on
      .                   // type declarations and other outer declarations, not those
      .                   // bound in *fn types*. Region substitution of the bound
      .                   // regions that appear in a function signature is done using
      .                   // the specialized routine `ty::replace_late_regions()`.
  1,692 ( 0.00%)          match *r {
  1,304 ( 0.00%)              ty::ReEarlyBound(data) => {
  1,304 ( 0.00%)                  let rk = self.substs.get(data.index as usize).map(|k| k.unpack());
      .                           match rk {
    652 ( 0.00%)                      Some(GenericArgKind::Lifetime(lt)) => self.shift_region_through_binders(lt),
      .                               _ => {
      .                                   let span = self.span.unwrap_or(DUMMY_SP);
      .                                   let msg = format!(
      .                                       "Region parameter out of range \
      .                                        when substituting in region {} (index={})",
      .                                       data.name, data.index
      .                                   );
      .                                   span_bug!(span, "{}", msg);
      .                               }
      .                           }
      .                       }
      .                       _ => r,
      .                   }
  5,922 ( 0.00%)      }
      .           
 66,204 ( 0.03%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
 22,068 ( 0.01%)          if !t.needs_subst() {
      .                       return t;
      .                   }
      .           
  9,730 ( 0.00%)          match *t.kind() {
 18,205 ( 0.01%)              ty::Param(p) => self.ty_for_param(p, t),
  7,344 ( 0.00%)              _ => t.super_fold_with(self),
      .                   }
104,220 ( 0.05%)      }
      .           
     56 ( 0.00%)      fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
     16 ( 0.00%)          if let ty::ConstKind::Param(p) = c.val {
      .                       self.const_for_param(p, c)
      .                   } else {
     72 ( 0.00%)              c.super_fold_with(self)
      .                   }
      .               }
      .           
      .               #[inline]
      .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {
      .                   c.super_fold_with(self)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> SubstFolder<'a, 'tcx> {
      .               fn ty_for_param(&self, p: ty::ParamTy, source_ty: Ty<'tcx>) -> Ty<'tcx> {
      .                   // Look up the type in the substitutions. It really should be in there.
  7,282 ( 0.00%)          let opt_ty = self.substs.get(p.index as usize).map(|k| k.unpack());
      .                   let ty = match opt_ty {
      .                       Some(GenericArgKind::Type(ty)) => ty,
      .                       Some(kind) => {
      .                           let span = self.span.unwrap_or(DUMMY_SP);
      .                           span_bug!(
      .                               span,
      .                               "expected type for `{:?}` ({:?}/{}) but found {:?} \
      .                                when substituting, substs={:?}",
-- line 539 ----------------------------------------
-- line 645 ----------------------------------------
      .               fn shift_vars_through_binders<T: TypeFoldable<'tcx>>(&self, val: T) -> T {
      .                   debug!(
      .                       "shift_vars(val={:?}, binders_passed={:?}, has_escaping_bound_vars={:?})",
      .                       val,
      .                       self.binders_passed,
      .                       val.has_escaping_bound_vars()
      .                   );
      .           
 12,202 ( 0.01%)          if self.binders_passed == 0 || !val.has_escaping_bound_vars() {
      .                       return val;
      .                   }
      .           
      .                   let result = ty::fold::shift_vars(self.tcx(), val, self.binders_passed);
      .                   debug!("shift_vars: shifted result = {:?}", result);
      .           
      .                   result
      .               }
      .           
      .               fn shift_region_through_binders(&self, region: ty::Region<'tcx>) -> ty::Region<'tcx> {
  1,537 ( 0.00%)          if self.binders_passed == 0 || !region.has_escaping_bound_vars() {
      .                       return region;
      .                   }
      .                   ty::fold::shift_region(self.tcx, region, self.binders_passed)
      .               }
      .           }
      .           
      .           /// Stores the user-given substs to reach some fully qualified path
      .           /// (e.g., `<T>::Item` or `<T as Trait>::Item`).
      .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
    202 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
      .           pub struct UserSubsts<'tcx> {
      .               /// The substitutions for the item as given by the user.
      .               pub substs: SubstsRef<'tcx>,
      .           
      .               /// The self type, in the case of a `<T>::Item` path (when applied
      .               /// to an inherent impl). See `UserSelfTy` below.
     38 ( 0.00%)      pub user_self_ty: Option<UserSelfTy<'tcx>>,
      .           }
      .           
      .           /// Specifies the user-given self type. In the case of a path that
      .           /// refers to a member in an inherent impl, this self type is
      .           /// sometimes needed to constrain the type parameters on the impl. For
      .           /// example, in this code:
      .           ///
      .           /// ```
-- line 689 ----------------------------------------
-- line 696 ----------------------------------------
      .           /// self type `Foo<u32>`. Then we can instantiate the parameters of
      .           /// the impl (with the substs from `UserSubsts`) and apply those to
      .           /// the self type, giving `Foo<?A>`. Finally, we unify that with
      .           /// the self type here, which contains `?A` to be `&'static u32`
      .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
      .           #[derive(HashStable, TypeFoldable, Lift)]
      .           pub struct UserSelfTy<'tcx> {
      .               pub impl_def_id: DefId,
     15 ( 0.00%)      pub self_ty: Ty<'tcx>,
      .           }

 70,092 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs
--------------------------------------------------------------------------------
Ir               

-- line 15 ----------------------------------------
      .           use std::str;
      .           
      .           use crate::{with_session_globals, Edition, Span, DUMMY_SP};
      .           
      .           #[cfg(test)]
      .           mod tests;
      .           
      .           // The proc macro code for this is in `compiler/rustc_macros/src/symbols.rs`.
      8 ( 0.00%)  symbols! {
      .               // After modifying this list adjust `is_special`, `is_used_keyword`/`is_unused_keyword`,
      .               // this should be rarely necessary though if the keywords are kept in alphabetic order.
      .               Keywords {
      .                   // Special reserved identifiers used internally for elided lifetimes,
      .                   // unnamed method parameters, crate root module, error recovery etc.
      .                   Empty:              "",
      .                   PathRoot:           "{{root}}",
      .                   DollarCrate:        "$crate",
-- line 31 ----------------------------------------
-- line 1498 ----------------------------------------
      .                   write_str,
      .                   writeln_macro,
      .                   x87_reg,
      .                   xer,
      .                   xmm_reg,
      .                   ymm_reg,
      .                   zmm_reg,
      .               }
     10 ( 0.00%)  }
      .           
 24,665 ( 0.01%)  #[derive(Copy, Clone, Eq, HashStable_Generic, Encodable, Decodable)]
      .           pub struct Ident {
      .               pub name: Symbol,
      .               pub span: Span,
      .           }
      .           
      .           impl Ident {
      .               #[inline]
      .               /// Constructs a new identifier from a symbol and a span.
      .               pub const fn new(name: Symbol, span: Span) -> Ident {
      .                   Ident { name, span }
 94,338 ( 0.04%)      }
      .           
      .               /// Constructs a new identifier with a dummy span.
      .               #[inline]
      .               pub const fn with_dummy_span(name: Symbol) -> Ident {
      .                   Ident::new(name, DUMMY_SP)
      .               }
      .           
      .               #[inline]
      .               pub fn empty() -> Ident {
      .                   Ident::with_dummy_span(kw::Empty)
      .               }
      .           
      .               /// Maps a string to an identifier with a dummy span.
      6 ( 0.00%)      pub fn from_str(string: &str) -> Ident {
      6 ( 0.00%)          Ident::with_dummy_span(Symbol::intern(string))
     24 ( 0.00%)      }
      .           
      .               /// Maps a string and a span to an identifier.
      .               pub fn from_str_and_span(string: &str, span: Span) -> Ident {
      .                   Ident::new(Symbol::intern(string), span)
      .               }
      .           
      .               /// Replaces `lo` and `hi` with those from `span`, but keep hygiene context.
  4,528 ( 0.00%)      pub fn with_span_pos(self, span: Span) -> Ident {
      .                   Ident::new(self.name, span.with_ctxt(self.span.ctxt()))
  2,830 ( 0.00%)      }
      .           
      .               pub fn without_first_quote(self) -> Ident {
      .                   Ident::new(Symbol::intern(self.as_str().trim_start_matches('\'')), self.span)
      .               }
      .           
      .               /// "Normalize" ident for use in comparisons using "item hygiene".
      .               /// Identifiers with same string value become same if they came from the same macro 2.0 macro
      .               /// (e.g., `macro` item, but not `macro_rules` item) and stay different if they came from
      .               /// different macro 2.0 macros.
      .               /// Technically, this operation strips all non-opaque marks from ident's syntactic context.
 28,476 ( 0.01%)      pub fn normalize_to_macros_2_0(self) -> Ident {
      .                   Ident::new(self.name, self.span.normalize_to_macros_2_0())
 22,148 ( 0.01%)      }
      .           
      .               /// "Normalize" ident for use in comparisons using "local variable hygiene".
      .               /// Identifiers with same string value become same if they came from the same non-transparent
      .               /// macro (e.g., `macro` or `macro_rules!` items) and stay different if they came from different
      .               /// non-transparent macros.
      .               /// Technically, this operation strips all transparent marks from ident's syntactic context.
 56,205 ( 0.03%)      pub fn normalize_to_macro_rules(self) -> Ident {
      .                   Ident::new(self.name, self.span.normalize_to_macro_rules())
 43,715 ( 0.02%)      }
      .           
      .               /// Access the underlying string. This is a slowish operation because it
      .               /// requires locking the symbol interner.
      .               ///
      .               /// Note that the lifetime of the return value is a lie. See
      .               /// `Symbol::as_str()` for details.
      .               pub fn as_str(&self) -> &str {
    839 ( 0.00%)          self.name.as_str()
      .               }
      .           }
      .           
      .           impl PartialEq for Ident {
 17,040 ( 0.01%)      fn eq(&self, rhs: &Self) -> bool {
 44,444 ( 0.02%)          self.name == rhs.name && self.span.ctxt() == rhs.span.ctxt()
 22,720 ( 0.01%)      }
      .           }
      .           
      .           impl Hash for Ident {
      .               fn hash<H: Hasher>(&self, state: &mut H) {
  1,517 ( 0.00%)          self.name.hash(state);
 10,333 ( 0.00%)          self.span.ctxt().hash(state);
      .               }
      .           }
      .           
      .           impl fmt::Debug for Ident {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Display::fmt(self, f)?;
      .                   fmt::Debug::fmt(&self.span.ctxt(), f)
      .               }
-- line 1596 ----------------------------------------
-- line 1622 ----------------------------------------
      .               is_raw: bool,
      .               /// Span used for retrieving the crate name to which `$crate` refers to,
      .               /// if this field is `None` then the `$crate` conversion doesn't happen.
      .               convert_dollar_crate: Option<Span>,
      .           }
      .           
      .           impl IdentPrinter {
      .               /// The most general `IdentPrinter` constructor. Do not use this.
      4 ( 0.00%)      pub fn new(symbol: Symbol, is_raw: bool, convert_dollar_crate: Option<Span>) -> IdentPrinter {
    148 ( 0.00%)          IdentPrinter { symbol, is_raw, convert_dollar_crate }
      4 ( 0.00%)      }
      .           
      .               /// This implementation is supposed to be used when printing identifiers
      .               /// as a part of pretty-printing for larger AST pieces.
      .               /// Do not use this either.
     66 ( 0.00%)      pub fn for_ast_ident(ident: Ident, is_raw: bool) -> IdentPrinter {
     66 ( 0.00%)          IdentPrinter::new(ident.name, is_raw, Some(ident.span))
     33 ( 0.00%)      }
      .           }
      .           
      .           impl fmt::Display for IdentPrinter {
    185 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     74 ( 0.00%)          if self.is_raw {
      .                       f.write_str("r#")?;
     37 ( 0.00%)          } else if self.symbol == kw::DollarCrate {
      .                       if let Some(span) = self.convert_dollar_crate {
      .                           let converted = span.ctxt().dollar_crate_name();
      .                           if !converted.is_path_segment_keyword() {
      .                               f.write_str("::")?;
      .                           }
      .                           return fmt::Display::fmt(&converted, f);
      .                       }
      .                   }
-- line 1654 ----------------------------------------
-- line 1656 ----------------------------------------
      .               }
      .           }
      .           
      .           /// An newtype around `Ident` that calls [Ident::normalize_to_macro_rules] on
      .           /// construction.
      .           // FIXME(matthewj, petrochenkov) Use this more often, add a similar
      .           // `ModernIdent` struct and use that as well.
      .           #[derive(Copy, Clone, Eq, PartialEq, Hash)]
 19,223 ( 0.01%)  pub struct MacroRulesNormalizedIdent(Ident);
      .           
      .           impl MacroRulesNormalizedIdent {
      .               pub fn new(ident: Ident) -> Self {
  6,184 ( 0.00%)          Self(ident.normalize_to_macro_rules())
      .               }
      .           }
      .           
      .           impl fmt::Debug for MacroRulesNormalizedIdent {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Debug::fmt(&self.0, f)
      .               }
      .           }
-- line 1676 ----------------------------------------
-- line 1686 ----------------------------------------
      .           /// Internally, a `Symbol` is implemented as an index, and all operations
      .           /// (including hashing, equality, and ordering) operate on that index. The use
      .           /// of `rustc_index::newtype_index!` means that `Option<Symbol>` only takes up 4 bytes,
      .           /// because `rustc_index::newtype_index!` reserves the last 256 values for tagging purposes.
      .           ///
      .           /// Note that `Symbol` cannot directly be a `rustc_index::newtype_index!` because it
      .           /// implements `fmt::Debug`, `Encodable`, and `Decodable` in special ways.
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
  7,361 ( 0.00%)  pub struct Symbol(SymbolIndex);
      .           
      .           rustc_index::newtype_index! {
      .               struct SymbolIndex { .. }
      .           }
      .           
      .           impl Symbol {
      .               const fn new(n: u32) -> Self {
      .                   Symbol(SymbolIndex::from_u32(n))
     12 ( 0.00%)      }
      .           
      .               /// Maps a string to its interned representation.
147,915 ( 0.07%)      pub fn intern(string: &str) -> Self {
      .                   with_session_globals(|session_globals| session_globals.symbol_interner.intern(string))
147,915 ( 0.07%)      }
      .           
      .               /// Access the underlying string. This is a slowish operation because it
      .               /// requires locking the symbol interner.
      .               ///
      .               /// Note that the lifetime of the return value is a lie. It's not the same
      .               /// as `&self`, but actually tied to the lifetime of the underlying
      .               /// interner. Interners are long-lived, and there are very few of them, and
      .               /// this function is typically used for short-lived things, so in practice
      .               /// it works out ok.
  9,474 ( 0.00%)      pub fn as_str(&self) -> &str {
  3,158 ( 0.00%)          with_session_globals(|session_globals| unsafe {
      .                       std::mem::transmute::<&str, &str>(session_globals.symbol_interner.get(*self))
      .                   })
 12,632 ( 0.01%)      }
      .           
      .               pub fn as_u32(self) -> u32 {
      .                   self.0.as_u32()
      .               }
      .           
      .               pub fn is_empty(self) -> bool {
      .                   self == kw::Empty
      .               }
-- line 1730 ----------------------------------------
-- line 1740 ----------------------------------------
      .           
      .           impl fmt::Debug for Symbol {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Debug::fmt(self.as_str(), f)
      .               }
      .           }
      .           
      .           impl fmt::Display for Symbol {
    182 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    879 ( 0.00%)          fmt::Display::fmt(self.as_str(), f)
      .               }
      .           }
      .           
      .           impl<S: Encoder> Encodable<S> for Symbol {
      .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
    511 ( 0.00%)          s.emit_str(self.as_str())
      .               }
      .           }
      .           
      .           impl<D: Decoder> Decodable<D> for Symbol {
      .               #[inline]
 14,392 ( 0.01%)      fn decode(d: &mut D) -> Symbol {
 36,048 ( 0.02%)          Symbol::intern(&d.read_str())
      .               }
      .           }
      .           
      .           impl<CTX> HashStable<CTX> for Symbol {
      .               #[inline]
  4,140 ( 0.00%)      fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
  2,971 ( 0.00%)          self.as_str().hash_stable(hcx, hasher);
  4,080 ( 0.00%)      }
      .           }
      .           
      .           impl<CTX> ToStableHashKey<CTX> for Symbol {
      .               type KeyType = String;
      .               #[inline]
      .               fn to_stable_hash_key(&self, _: &CTX) -> String {
      .                   self.as_str().to_string()
      .               }
-- line 1778 ----------------------------------------
-- line 1785 ----------------------------------------
      .           //
      .           // The `FxHashMap`+`Vec` pair could be replaced by `FxIndexSet`, but #75278
      .           // found that to regress performance up to 2% in some cases. This might be
      .           // revisited after further improvements to `indexmap`.
      .           //
      .           // This type is private to prevent accidentally constructing more than one
      .           // `Interner` on the same thread, which makes it easy to mixup `Symbol`s
      .           // between `Interner`s.
      2 ( 0.00%)  #[derive(Default)]
      .           struct InternerInner {
      .               arena: DroplessArena,
      .               names: FxHashMap<&'static str, Symbol>,
      .               strings: Vec<&'static str>,
      .           }
      .           
      .           impl Interner {
      .               fn prefill(init: &[&'static str]) -> Self {
     30 ( 0.00%)          Interner(Lock::new(InternerInner {
      .                       strings: init.into(),
      .                       names: init.iter().copied().zip((0..).map(Symbol::new)).collect(),
      .                       ..Default::default()
      .                   }))
      .               }
      .           
      .               #[inline]
      .               fn intern(&self, string: &str) -> Symbol {
      .                   let mut inner = self.0.lock();
 25,616 ( 0.01%)          if let Some(&name) = inner.names.get(string) {
      .                       return name;
      .                   }
      .           
  3,627 ( 0.00%)          let name = Symbol::new(inner.strings.len() as u32);
      .           
      .                   // SAFETY: we convert from `&str` to `&[u8]`, clone it into the arena,
      .                   // and immediately convert the clone back to `&[u8], all because there
      .                   // is no `inner.arena.alloc_str()` method. This is clearly safe.
      .                   let string: &str =
      .                       unsafe { str::from_utf8_unchecked(inner.arena.alloc_slice(string.as_bytes())) };
      .           
      .                   // SAFETY: we can extend the arena allocation to `'static` because we
-- line 1824 ----------------------------------------
-- line 1831 ----------------------------------------
      .                   // #91445 for details.
      .                   inner.names.insert(string, name);
      .                   name
      .               }
      .           
      .               // Get the symbol as a string. `Symbol::as_str()` should be used in
      .               // preference to this function.
      .               fn get(&self, symbol: Symbol) -> &str {
  9,474 ( 0.00%)          self.0.lock().strings[symbol.0.as_usize()]
      .               }
      .           }
      .           
      .           // This module has a very short name because it's used a lot.
      .           /// This module contains all the defined keyword `Symbol`s.
      .           ///
      .           /// Given that `kw` is imported, use them like `kw::keyword_name`.
      .           /// For example `kw::Loop` or `kw::Break`.
-- line 1847 ----------------------------------------
-- line 1863 ----------------------------------------
      .           
      .               // Used from a macro in `librustc_feature/accepted.rs`
      .               pub use super::kw::MacroRules as macro_rules;
      .           
      .               /// Get the symbol for an integer.
      .               ///
      .               /// The first few non-negative integers each have a static symbol and therefore
      .               /// are fast.
     24 ( 0.00%)      pub fn integer<N: TryInto<usize> + Copy + ToString>(n: N) -> Symbol {
     24 ( 0.00%)          if let Result::Ok(idx) = n.try_into() {
      .                       if idx < 10 {
     24 ( 0.00%)                  return Symbol::new(super::SYMBOL_DIGITS_BASE + idx as u32);
      .                       }
      .                   }
      .                   Symbol::intern(&n.to_string())
      .               }
      .           }
      .           
      .           impl Symbol {
      .               fn is_special(self) -> bool {
      .                   self <= kw::Underscore
      .               }
      .           
      .               fn is_used_keyword_always(self) -> bool {
     12 ( 0.00%)          self >= kw::As && self <= kw::While
      .               }
      .           
      .               fn is_used_keyword_conditional(self, edition: impl FnOnce() -> Edition) -> bool {
  4,080 ( 0.00%)          (self >= kw::Async && self <= kw::Dyn) && edition() >= Edition::Edition2018
      .               }
      .           
      .               fn is_unused_keyword_always(self) -> bool {
     12 ( 0.00%)          self >= kw::Abstract && self <= kw::Yield
      .               }
      .           
      .               fn is_unused_keyword_conditional(self, edition: impl FnOnce() -> Edition) -> bool {
      4 ( 0.00%)          self == kw::Try && edition() >= Edition::Edition2018
      .               }
      .           
      .               pub fn is_reserved(self, edition: impl Copy + FnOnce() -> Edition) -> bool {
  7,115 ( 0.00%)          self.is_special()
      .                       || self.is_used_keyword_always()
      .                       || self.is_unused_keyword_always()
      .                       || self.is_used_keyword_conditional(edition)
      .                       || self.is_unused_keyword_conditional(edition)
      .               }
      .           
      .               /// A keyword or reserved identifier that can be used as a path segment.
      .               pub fn is_path_segment_keyword(self) -> bool {
 28,595 ( 0.01%)          self == kw::Super
      .                       || self == kw::SelfLower
      .                       || self == kw::SelfUpper
      .                       || self == kw::Crate
      .                       || self == kw::PathRoot
      .                       || self == kw::DollarCrate
      .               }
      .           
      .               /// Returns `true` if the symbol is `true` or `false`.
      .               pub fn is_bool_lit(self) -> bool {
    160 ( 0.00%)          self == kw::True || self == kw::False
    160 ( 0.00%)      }
      .           
      .               /// Returns `true` if this symbol can be a raw identifier.
      .               pub fn can_be_raw(self) -> bool {
     38 ( 0.00%)          self != kw::Empty && self != kw::Underscore && !self.is_path_segment_keyword()
      1 ( 0.00%)      }
      .           }
      .           
      .           impl Ident {
      .               // Returns `true` for reserved identifiers used internally for elided lifetimes,
      .               // unnamed method parameters, crate root module, error recovery etc.
      .               pub fn is_special(self) -> bool {
      .                   self.name.is_special()
      4 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is a keyword used in the language.
      4 ( 0.00%)      pub fn is_used_keyword(self) -> bool {
      .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
      4 ( 0.00%)          self.name.is_used_keyword_always()
      .                       || self.name.is_used_keyword_conditional(|| self.span.edition())
      8 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is a keyword reserved for possible future use.
      4 ( 0.00%)      pub fn is_unused_keyword(self) -> bool {
      .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
      4 ( 0.00%)          self.name.is_unused_keyword_always()
      .                       || self.name.is_unused_keyword_conditional(|| self.span.edition())
      8 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is either a special identifier or a keyword.
  1,407 ( 0.00%)      pub fn is_reserved(self) -> bool {
      .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
      .                   self.name.is_reserved(|| self.span.edition())
  2,814 ( 0.00%)      }
      .           
      .               /// A keyword or reserved identifier that can be used as a path segment.
      .               pub fn is_path_segment_keyword(self) -> bool {
      .                   self.name.is_path_segment_keyword()
  4,085 ( 0.00%)      }
      .           
      .               /// We see this identifier in a normal identifier position, like variable name or a type.
      .               /// How was it written originally? Did it use the raw form? Let's try to guess.
     16 ( 0.00%)      pub fn is_raw_guess(self) -> bool {
      .                   self.name.can_be_raw() && self.is_reserved()
     32 ( 0.00%)      }
      .           }

 22,246 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/nonterminal.rs
--------------------------------------------------------------------------------
Ir              

-- line 8 ----------------------------------------
     .           use crate::parser::pat::{RecoverColon, RecoverComma};
     .           use crate::parser::{FollowedByType, ForceCollect, Parser, PathStyle};
     .           
     .           impl<'a> Parser<'a> {
     .               /// Checks whether a non-terminal may begin with a particular token.
     .               ///
     .               /// Returning `false` is a *stability guarantee* that such a matcher will *never* begin with that
     .               /// token. Be conservative (return true) if not sure.
17,300 ( 0.01%)      pub fn nonterminal_may_begin_with(kind: NonterminalKind, token: &Token) -> bool {
     .                   /// Checks whether the non-terminal may contain a single (non-keyword) identifier.
     .                   fn may_be_ident(nt: &token::Nonterminal) -> bool {
     .                       match *nt {
     .                           token::NtItem(_) | token::NtBlock(_) | token::NtVis(_) | token::NtLifetime(_) => {
     .                               false
     .                           }
     .                           _ => true,
     .                       }
     .                   }
     .           
86,500 ( 0.04%)          match kind {
     .                       NonterminalKind::Expr => {
    24 ( 0.00%)                  token.can_begin_expr()
     .                           // This exception is here for backwards compatibility.
    12 ( 0.00%)                  && !token.is_keyword(kw::Let)
     .                           // This exception is here for backwards compatibility.
    16 ( 0.00%)                  && !token.is_keyword(kw::Const)
     .                       }
     .                       NonterminalKind::Ty => token.can_begin_type(),
     .                       NonterminalKind::Ident => get_macro_ident(token).is_some(),
     .                       NonterminalKind::Literal => token.can_begin_literal_maybe_minus(),
     .                       NonterminalKind::Vis => match token.kind {
     .                           // The follow-set of :vis + "priv" keyword + interpolated
     .                           token::Comma | token::Ident(..) | token::Interpolated(..) => true,
     .                           _ => token.can_begin_type(),
-- line 41 ----------------------------------------
-- line 85 ----------------------------------------
     .                       NonterminalKind::Lifetime => match token.kind {
     .                           token::Lifetime(_) => true,
     .                           token::Interpolated(ref nt) => {
     .                               matches!(**nt, token::NtLifetime(_) | token::NtTT(_))
     .                           }
     .                           _ => false,
     .                       },
     .                       NonterminalKind::TT | NonterminalKind::Item | NonterminalKind::Stmt => {
11,608 ( 0.01%)                  !matches!(token.kind, token::CloseDelim(_))
     .                       }
     .                   }
17,300 ( 0.01%)      }
     .           
     .               /// Parse a non-terminal (e.g. MBE `:pat` or `:ident`).
74,997 ( 0.03%)      pub fn parse_nonterminal(&mut self, kind: NonterminalKind) -> PResult<'a, Nonterminal> {
     .                   // Any `Nonterminal` which stores its tokens (currently `NtItem` and `NtExpr`)
     .                   // needs to have them force-captured here.
     .                   // A `macro_rules!` invocation may pass a captured item/expr to a proc-macro,
     .                   // which requires having captured tokens available. Since we cannot determine
     .                   // in advance whether or not a proc-macro will be (transitively) invoked,
     .                   // we always capture tokens for any `Nonterminal` which needs them.
91,663 ( 0.04%)          let mut nt = match kind {
     .                       NonterminalKind::Item => match self.parse_item(ForceCollect::Yes)? {
     .                           Some(item) => token::NtItem(item),
     .                           None => {
     .                               return Err(self.struct_span_err(self.token.span, "expected an item keyword"));
     .                           }
     .                       },
     .                       NonterminalKind::Block => {
     .                           // While a block *expression* may have attributes (e.g. `#[my_attr] { ... }`),
-- line 114 ----------------------------------------
-- line 126 ----------------------------------------
     .                               NonterminalKind::PatParam { .. } => this.parse_pat_no_top_alt(None),
     .                               NonterminalKind::PatWithOr { .. } => {
     .                                   this.parse_pat_allow_top_alt(None, RecoverComma::No, RecoverColon::No)
     .                               }
     .                               _ => unreachable!(),
     .                           })?)
     .                       }
     .           
    16 ( 0.00%)              NonterminalKind::Expr => token::NtExpr(self.parse_expr_force_collect()?),
     .                       NonterminalKind::Literal => {
     .                           // The `:literal` matcher does not support attributes
     .                           token::NtLiteral(
     .                               self.collect_tokens_no_attrs(|this| this.parse_literal_maybe_minus())?,
     .                           )
     .                       }
     .           
     .                       NonterminalKind::Ty => {
     .                           token::NtTy(self.collect_tokens_no_attrs(|this| this.parse_ty())?)
     .                       }
     .                       // this could be handled like a token, since it is one
     .                       NonterminalKind::Ident
17,052 ( 0.01%)                  if let Some((ident, is_raw)) = get_macro_ident(&self.token) =>
     .                       {
 5,684 ( 0.00%)                  self.bump();
19,894 ( 0.01%)                  token::NtIdent(ident, is_raw)
     .                       }
     .                       NonterminalKind::Ident => {
     .                           let token_str = pprust::token_to_string(&self.token);
     .                           let msg = &format!("expected ident, found {}", &token_str);
     .                           return Err(self.struct_span_err(self.token.span, msg));
     .                       }
     .                       NonterminalKind::Path => token::NtPath(
     .                           self.collect_tokens_no_attrs(|this| this.parse_path(PathStyle::Type))?,
     .                       ),
     .                       NonterminalKind::Meta => token::NtMeta(P(self.parse_attr_item(true)?)),
27,435 ( 0.01%)              NonterminalKind::TT => token::NtTT(self.parse_token_tree()),
     .                       NonterminalKind::Vis => token::NtVis(
     .                           self.collect_tokens_no_attrs(|this| this.parse_visibility(FollowedByType::Yes))?,
     .                       ),
     .                       NonterminalKind::Lifetime => {
     .                           if self.check_lifetime() {
     .                               token::NtLifetime(self.expect_lifetime().ident)
     .                           } else {
     .                               let token_str = pprust::token_to_string(&self.token);
     .                               let msg = &format!("expected a lifetime, found `{}`", &token_str);
     .                               return Err(self.struct_span_err(self.token.span, msg));
     .                           }
     .                       }
     .                   };
     .           
     .                   // If tokens are supported at all, they should be collected.
25,007 ( 0.01%)          if matches!(nt.tokens_mut(), Some(None)) {
     .                       panic!(
     .                           "Missing tokens for nt {:?} at {:?}: {:?}",
     .                           nt,
     .                           nt.span(),
     .                           pprust::nonterminal_to_string(&nt)
     .                       );
     .                   }
     .           
58,331 ( 0.03%)          Ok(nt)
74,997 ( 0.03%)      }
     .           }
     .           
     .           /// The token is an identifier, but not `_`.
     .           /// We prohibit passing `_` to macros expecting `ident` for now.
     .           fn get_macro_ident(token: &Token) -> Option<(Ident, bool)> {
11,368 ( 0.01%)      token.ident().filter(|(ident, _)| ident.name != kw::Underscore)
     .           }

 8,333 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/nonterminal.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe.rs
--------------------------------------------------------------------------------
Ir               

-- line 23 ----------------------------------------
      .           struct Delimited {
      .               delim: token::DelimToken,
      .               tts: Vec<TokenTree>,
      .           }
      .           
      .           impl Delimited {
      .               /// Returns a `self::TokenTree` with a `Span` corresponding to the opening delimiter.
      .               fn open_tt(&self, span: DelimSpan) -> TokenTree {
  3,083 ( 0.00%)          TokenTree::token(token::OpenDelim(self.delim), span.open)
      .               }
      .           
      .               /// Returns a `self::TokenTree` with a `Span` corresponding to the closing delimiter.
      .               fn close_tt(&self, span: DelimSpan) -> TokenTree {
  8,624 ( 0.00%)          TokenTree::token(token::CloseDelim(self.delim), span.close)
      .               }
      .           }
      .           
      .           #[derive(Clone, PartialEq, Encodable, Decodable, Debug)]
      .           struct SequenceRepetition {
      .               /// The sequence of token trees
      .               tts: Vec<TokenTree>,
      .               /// The optional separator
      .               separator: Option<Token>,
      .               /// Whether the sequence can be repeated zero (*), or one or more times (+)
      .               kleene: KleeneToken,
      .               /// The number of `Match`s that appear in the sequence (and subsequences)
      .               num_captures: usize,
      .           }
      .           
     97 ( 0.00%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, Copy)]
      .           struct KleeneToken {
      .               span: Span,
      .               op: KleeneOp,
      .           }
      .           
      .           impl KleeneToken {
      .               fn new(op: KleeneOp, span: Span) -> KleeneToken {
      .                   KleeneToken { span, op }
      .               }
      .           }
      .           
      .           /// A Kleene-style [repetition operator](https://en.wikipedia.org/wiki/Kleene_star)
      .           /// for token sequences.
     65 ( 0.00%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, Copy)]
      .           enum KleeneOp {
      .               /// Kleene star (`*`) for zero or more repetitions
      .               ZeroOrMore,
      .               /// Kleene plus (`+`) for one or more repetitions
      .               OneOrMore,
      .               /// Kleene optional (`?`) for zero or one repetitions
      .               ZeroOrOne,
      .           }
      .           
      .           /// Similar to `tokenstream::TokenTree`, except that `$i`, `$i:ident`, and `$(...)`
      .           /// are "first-class" token trees. Useful for parsing macros.
335,734 ( 0.15%)  #[derive(Debug, Clone, PartialEq, Encodable, Decodable)]
      .           enum TokenTree {
  9,489 ( 0.00%)      Token(Token),
  4,073 ( 0.00%)      Delimited(DelimSpan, Lrc<Delimited>),
      .               /// A kleene-style repetition sequence
    712 ( 0.00%)      Sequence(DelimSpan, Lrc<SequenceRepetition>),
      .               /// e.g., `$var`
      .               MetaVar(Span, Ident),
      .               /// e.g., `$var:expr`. This is only used in the left hand side of MBE macros.
 17,230 ( 0.01%)      MetaVarDecl(Span, Ident /* name to bind */, Option<NonterminalKind>),
      .           }
      .           
      .           impl TokenTree {
      .               /// Return the number of tokens in the tree.
      .               fn len(&self) -> usize {
 68,977 ( 0.03%)          match *self {
 23,667 ( 0.01%)              TokenTree::Delimited(_, ref delimed) => match delimed.delim {
      .                           token::NoDelim => delimed.tts.len(),
 15,778 ( 0.01%)                  _ => delimed.tts.len() + 2,
      .                       },
 24,610 ( 0.01%)              TokenTree::Sequence(_, ref seq) => seq.tts.len(),
      .                       _ => 0,
      .                   }
      .               }
      .           
      .               /// Returns `true` if the given token tree is delimited.
      .               fn is_delimited(&self) -> bool {
      .                   matches!(*self, TokenTree::Delimited(..))
      .               }
-- line 106 ----------------------------------------
-- line 109 ----------------------------------------
      .               fn is_token(&self, expected_kind: &TokenKind) -> bool {
      .                   match self {
      .                       TokenTree::Token(Token { kind: actual_kind, .. }) => actual_kind == expected_kind,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               /// Gets the `index`-th sub-token-tree. This only makes sense for delimited trees and sequences.
 25,977 ( 0.01%)      fn get_tt(&self, index: usize) -> TokenTree {
 35,649 ( 0.02%)          match (self, index) {
 11,469 ( 0.01%)              (&TokenTree::Delimited(_, ref delimed), _) if delimed.delim == token::NoDelim => {
      .                           delimed.tts[index].clone()
      .                       }
      .                       (&TokenTree::Delimited(span, ref delimed), _) => {
  7,646 ( 0.00%)                  if index == 0 {
      .                               return delimed.open_tt(span);
      .                           }
 17,052 ( 0.01%)                  if index == delimed.tts.len() + 1 {
      .                               return delimed.close_tt(span);
      .                           }
    721 ( 0.00%)                  delimed.tts[index - 1].clone()
      .                       }
  4,836 ( 0.00%)              (&TokenTree::Sequence(_, ref seq), _) => seq.tts[index].clone(),
      .                       _ => panic!("Cannot expand a token tree"),
      .                   }
 34,636 ( 0.02%)      }
      .           
      .               /// Retrieves the `TokenTree`'s span.
      .               fn span(&self) -> Span {
  8,339 ( 0.00%)          match *self {
      .                       TokenTree::Token(Token { span, .. })
      .                       | TokenTree::MetaVar(span, _)
      .                       | TokenTree::MetaVarDecl(span, _, _) => span,
    932 ( 0.00%)              TokenTree::Delimited(span, _) | TokenTree::Sequence(span, _) => span.entire(),
      .                   }
      .               }
      .           
      .               fn token(kind: TokenKind, span: Span) -> TokenTree {
  1,848 ( 0.00%)          TokenTree::Token(Token::new(kind, span))
      .               }
      .           }

 60,871 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs
--------------------------------------------------------------------------------
Ir               

-- line 223 ----------------------------------------
      .               fn eq(&self, other: &Rhs) -> bool;
      .           
      .               /// This method tests for `!=`.
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn ne(&self, other: &Rhs) -> bool {
  6,794 ( 0.00%)          !self.eq(other)
      .               }
      .           }
      .           
      .           /// Derive macro generating an impl of the trait `PartialEq`.
      .           #[rustc_builtin_macro]
      .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
      .           #[allow_internal_unstable(core_intrinsics, structural_match)]
      .           pub macro PartialEq($item:item) {
-- line 239 ----------------------------------------
-- line 328 ----------------------------------------
      .           /// assert_eq!(Ordering::Less, result);
      .           ///
      .           /// let result = 1.cmp(&1);
      .           /// assert_eq!(Ordering::Equal, result);
      .           ///
      .           /// let result = 2.cmp(&1);
      .           /// assert_eq!(Ordering::Greater, result);
      .           /// ```
      7 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Debug, Hash)]
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           #[repr(i8)]
      .           pub enum Ordering {
      .               /// An ordering where a compared value is less than another.
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               Less = -1,
      .               /// An ordering where a compared value is equal to another.
      .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 344 ----------------------------------------
-- line 569 ----------------------------------------
      .               /// let result = x.0.cmp(&y.0).then_with(|| x.1.cmp(&y.1)).then_with(|| x.2.cmp(&y.2));
      .               ///
      .               /// assert_eq!(result, Ordering::Less);
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "ordering_chaining", since = "1.17.0")]
      .               pub fn then_with<F: FnOnce() -> Ordering>(self, f: F) -> Ordering {
      9 ( 0.00%)          match self {
      .                       Equal => f(),
      .                       _ => self,
      .                   }
      .               }
      .           }
      .           
      .           /// A helper struct for reverse ordering.
      .           ///
-- line 585 ----------------------------------------
-- line 792 ----------------------------------------
      .               /// ```
      .               #[stable(feature = "ord_max_min", since = "1.21.0")]
      .               #[inline]
      .               #[must_use]
      .               fn max(self, other: Self) -> Self
      .               where
      .                   Self: Sized,
      .               {
  6,512 ( 0.00%)          max_by(self, other, Ord::cmp)
      .               }
      .           
      .               /// Compares and returns the minimum of two values.
      .               ///
      .               /// Returns the first argument if the comparison determines them to be equal.
      .               ///
      .               /// # Examples
      .               ///
-- line 808 ----------------------------------------
-- line 812 ----------------------------------------
      .               /// ```
      .               #[stable(feature = "ord_max_min", since = "1.21.0")]
      .               #[inline]
      .               #[must_use]
      .               fn min(self, other: Self) -> Self
      .               where
      .                   Self: Sized,
      .               {
    270 ( 0.00%)          min_by(self, other, Ord::cmp)
      .               }
      .           
      .               /// Restrict a value to a certain interval.
      .               ///
      .               /// Returns `max` if `self` is greater than `max`, and `min` if `self` is
      .               /// less than `min`. Otherwise this returns `self`.
      .               ///
      .               /// # Panics
-- line 828 ----------------------------------------
-- line 1097 ----------------------------------------
      .               /// let result = 2.0 < 1.0;
      .               /// assert_eq!(result, false);
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn lt(&self, other: &Rhs) -> bool {
  3,008 ( 0.00%)          matches!(self.partial_cmp(other), Some(Less))
      .               }
      .           
      .               /// This method tests less than or equal to (for `self` and `other`) and is used by the `<=`
      .               /// operator.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 1113 ----------------------------------------
-- line 1121 ----------------------------------------
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn le(&self, other: &Rhs) -> bool {
      .                   // Pattern `Some(Less | Eq)` optimizes worse than negating `None | Some(Greater)`.
      .                   // FIXME: The root cause was fixed upstream in LLVM with:
      .                   // https://github.com/llvm/llvm-project/commit/9bad7de9a3fb844f1ca2965f35d0c2a3d1e11775
      .                   // Revert this workaround once support for LLVM 12 gets dropped.
 52,291 ( 0.02%)          !matches!(self.partial_cmp(other), None | Some(Greater))
      .               }
      .           
      .               /// This method tests greater than (for `self` and `other`) and is used by the `>` operator.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let result = 1.0 > 2.0;
-- line 1137 ----------------------------------------
-- line 1140 ----------------------------------------
      .               /// let result = 2.0 > 2.0;
      .               /// assert_eq!(result, false);
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn gt(&self, other: &Rhs) -> bool {
 76,238 ( 0.04%)          matches!(self.partial_cmp(other), Some(Greater))
      .               }
      .           
      .               /// This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`
      .               /// operator.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 1156 ----------------------------------------
-- line 1160 ----------------------------------------
      .               /// let result = 2.0 >= 2.0;
      .               /// assert_eq!(result, true);
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn ge(&self, other: &Rhs) -> bool {
     24 ( 0.00%)          matches!(self.partial_cmp(other), Some(Greater | Equal))
      .               }
      .           }
      .           
      .           /// Derive macro generating an impl of the trait `PartialOrd`.
      .           #[rustc_builtin_macro]
      .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
      .           #[allow_internal_unstable(core_intrinsics)]
      .           pub macro PartialOrd($item:item) {
-- line 1176 ----------------------------------------
-- line 1210 ----------------------------------------
      .           ///
      .           /// assert_eq!(cmp::min_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 1);
      .           /// assert_eq!(cmp::min_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
      .           /// ```
      .           #[inline]
      .           #[must_use]
      .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
      .           pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
 13,837 ( 0.01%)      match compare(&v1, &v2) {
      .                   Ordering::Less | Ordering::Equal => v1,
      .                   Ordering::Greater => v2,
      .               }
      .           }
      .           
      .           /// Returns the element that gives the minimum value from the specified function.
      .           ///
      .           /// Returns the first argument if the comparison determines them to be equal.
-- line 1226 ----------------------------------------
-- line 1273 ----------------------------------------
      .           ///
      .           /// assert_eq!(cmp::max_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
      .           /// assert_eq!(cmp::max_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 2);
      .           /// ```
      .           #[inline]
      .           #[must_use]
      .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
      .           pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
 41,386 ( 0.02%)      match compare(&v1, &v2) {
      .                   Ordering::Less | Ordering::Equal => v2,
      .                   Ordering::Greater => v1,
      .               }
      .           }
      .           
      .           /// Returns the element that gives the maximum value from the specified function.
      .           ///
      .           /// Returns the second argument if the comparison determines them to be equal.
-- line 1289 ----------------------------------------
-- line 1308 ----------------------------------------
      .               use crate::cmp::Ordering::{self, Equal, Greater, Less};
      .               use crate::hint::unreachable_unchecked;
      .           
      .               macro_rules! partial_eq_impl {
      .                   ($($t:ty)*) => ($(
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl PartialEq for $t {
      .                           #[inline]
    821 ( 0.00%)                  fn eq(&self, other: &$t) -> bool { (*self) == (*other) }
      .                           #[inline]
  4,247 ( 0.00%)                  fn ne(&self, other: &$t) -> bool { (*self) != (*other) }
      .                       }
      .                   )*)
      .               }
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl PartialEq for () {
      .                   #[inline]
      .                   fn eq(&self, _other: &()) -> bool {
-- line 1326 ----------------------------------------
-- line 1392 ----------------------------------------
      .                   ($($t:ty)*) => ($(
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl PartialOrd for $t {
      .                           #[inline]
      .                           fn partial_cmp(&self, other: &$t) -> Option<Ordering> {
      .                               Some(self.cmp(other))
      .                           }
      .                           #[inline]
949,541 ( 0.44%)                  fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
      .                           #[inline]
  2,460 ( 0.00%)                  fn le(&self, other: &$t) -> bool { (*self) <= (*other) }
      .                           #[inline]
      .                           fn ge(&self, other: &$t) -> bool { (*self) >= (*other) }
      .                           #[inline]
      .                           fn gt(&self, other: &$t) -> bool { (*self) > (*other) }
      .                       }
      .           
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl Ord for $t {
      .                           #[inline]
      .                           fn cmp(&self, other: &$t) -> Ordering {
      .                               // The order here is important to generate more optimal assembly.
      .                               // See <https://github.com/rust-lang/rust/issues/63758> for more info.
292,497 ( 0.13%)                      if *self < *other { Less }
      .                               else if *self == *other { Equal }
      .                               else { Greater }
      .                           }
      .                       }
      .                   )*)
      .               }
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 1423 ----------------------------------------
-- line 1430 ----------------------------------------
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl Ord for bool {
      .                   #[inline]
      .                   fn cmp(&self, other: &bool) -> Ordering {
      .                       // Casting to i8's and converting the difference to an Ordering generates
      .                       // more optimal assembly.
      .                       // See <https://github.com/rust-lang/rust/issues/66780> for more info.
  1,074 ( 0.00%)              match (*self as i8) - (*other as i8) {
      .                           -1 => Less,
      .                           0 => Equal,
      .                           1 => Greater,
      .                           // SAFETY: bool as i8 returns 0 or 1, so the difference can't be anything else
      .                           _ => unsafe { unreachable_unchecked() },
      .                       }
      .                   }
      .               }
-- line 1446 ----------------------------------------
-- line 1474 ----------------------------------------
      .               // & pointers
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized, B: ?Sized> PartialEq<&B> for &A
      .               where
      .                   A: PartialEq<B>,
      .               {
      .                   #[inline]
    141 ( 0.00%)          fn eq(&self, other: &&B) -> bool {
 45,751 ( 0.02%)              PartialEq::eq(*self, *other)
  4,799 ( 0.00%)          }
      .                   #[inline]
      5 ( 0.00%)          fn ne(&self, other: &&B) -> bool {
     75 ( 0.00%)              PartialEq::ne(*self, *other)
  1,145 ( 0.00%)          }
      .               }
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized, B: ?Sized> PartialOrd<&B> for &A
      .               where
      .                   A: PartialOrd<B>,
      .               {
      .                   #[inline]
      .                   fn partial_cmp(&self, other: &&B) -> Option<Ordering> {
-- line 1496 ----------------------------------------
-- line 1516 ----------------------------------------
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized> Ord for &A
      .               where
      .                   A: Ord,
      .               {
      .                   #[inline]
      .                   fn cmp(&self, other: &Self) -> Ordering {
      .                       Ord::cmp(*self, *other)
    203 ( 0.00%)          }
      .               }
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized> Eq for &A where A: Eq {}
      .           
      .               // &mut pointers
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized, B: ?Sized> PartialEq<&mut B> for &mut A
-- line 1532 ----------------------------------------

157,371 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs
--------------------------------------------------------------------------------
Ir              

-- line 97 ----------------------------------------
     .           
     .               /// If true, the capture is behind a reference.
     .               by_ref: bool,
     .           }
     .           
     .           const DEREF_PROJECTION: &[PlaceElem<'_>; 1] = &[ProjectionElem::Deref];
     .           
     .           pub fn provide(providers: &mut Providers) {
     4 ( 0.00%)      *providers = Providers {
     .                   mir_borrowck: |tcx, did| {
     5 ( 0.00%)              if let Some(def) = ty::WithOptConstParam::try_lookup(did, tcx) {
     .                           tcx.mir_borrowck_const_arg(def)
     .                       } else {
    20 ( 0.00%)                  mir_borrowck(tcx, ty::WithOptConstParam::unknown(did))
     .                       }
     .                   },
     .                   mir_borrowck_const_arg: |tcx, (did, param_did)| {
     .                       mir_borrowck(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })
     .                   },
     .                   ..*providers
     .               };
     1 ( 0.00%)  }
     .           
    50 ( 0.00%)  fn mir_borrowck<'tcx>(
     .               tcx: TyCtxt<'tcx>,
     .               def: ty::WithOptConstParam<LocalDefId>,
     .           ) -> &'tcx BorrowCheckResult<'tcx> {
     .               let (input_body, promoted) = tcx.mir_promoted(def);
     .               debug!("run query mir_borrowck: {}", tcx.def_path_str(def.did.to_def_id()));
     .           
    65 ( 0.00%)      let opt_closure_req = tcx.infer_ctxt().with_opaque_type_inference(def.did).enter(|infcx| {
     .                   let input_body: &Body<'_> = &input_body.borrow();
     .                   let promoted: &IndexVec<_, _> = &promoted.borrow();
    70 ( 0.00%)          do_mir_borrowck(&infcx, input_body, promoted, false).0
    20 ( 0.00%)      });
     .               debug!("mir_borrowck done");
     .           
     5 ( 0.00%)      tcx.arena.alloc(opt_closure_req)
    40 ( 0.00%)  }
     .           
     .           /// Perform the actual borrow checking.
     .           ///
     .           /// If `return_body_with_facts` is true, then return the body with non-erased
     .           /// region ids on which the borrow checking was performed together with Polonius
     .           /// facts.
   110 ( 0.00%)  #[instrument(skip(infcx, input_body, input_promoted), level = "debug")]
     .           fn do_mir_borrowck<'a, 'tcx>(
     .               infcx: &InferCtxt<'a, 'tcx>,
     .               input_body: &Body<'tcx>,
     .               input_promoted: &IndexVec<Promoted, Body<'tcx>>,
     .               return_body_with_facts: bool,
     .           ) -> (BorrowCheckResult<'tcx>, Option<Box<BodyWithBorrowckFacts<'tcx>>>) {
    50 ( 0.00%)      let def = input_body.source.with_opt_param().as_local().unwrap();
     .           
     .               debug!(?def);
     .           
    10 ( 0.00%)      let tcx = infcx.tcx;
     .               let param_env = tcx.param_env(def.did);
     5 ( 0.00%)      let id = tcx.hir().local_def_id_to_hir_id(def.did);
     .           
    10 ( 0.00%)      let mut local_names = IndexVec::from_elem(None, &input_body.local_decls);
     .               for var_debug_info in &input_body.var_debug_info {
   192 ( 0.00%)          if let VarDebugInfoContents::Place(place) = var_debug_info.value {
   122 ( 0.00%)              if let Some(local) = place.as_local() {
   183 ( 0.00%)                  if let Some(prev_name) = local_names[local] {
     .                               if var_debug_info.name != prev_name {
     .                                   span_bug!(
     .                                       var_debug_info.source_info.span,
     .                                       "local {:?} has many names (`{}` vs `{}`)",
     .                                       local,
     .                                       prev_name,
     .                                       var_debug_info.name
     .                                   );
     .                               }
     .                           }
   183 ( 0.00%)                  local_names[local] = Some(var_debug_info.name);
     .                       }
     .                   }
     .               }
     .           
     .               // Gather the upvars of a closure, if any.
    20 ( 0.00%)      let tables = tcx.typeck_opt_const_arg(def);
    10 ( 0.00%)      if let Some(ErrorReported) = tables.tainted_by_errors {
     .                   infcx.set_tainted_by_errors();
     .               }
    20 ( 0.00%)      let upvars: Vec<_> = tables
     .                   .closure_min_captures_flattened(def.did.to_def_id())
     .                   .map(|captured_place| {
     .                       let capture = captured_place.info.capture_kind;
     .                       let by_ref = match capture {
     .                           ty::UpvarCapture::ByValue => false,
     .                           ty::UpvarCapture::ByRef(..) => true,
     .                       };
     .                       Upvar { place: captured_place.clone(), by_ref }
     .                   })
     .                   .collect();
     .           
     .               // Replace all regions with fresh inference variables. This
     .               // requires first making our own copy of the MIR. This copy will
     .               // be modified (in place) to contain non-lexical lifetimes. It
     .               // will have a lifetime tied to the inference context.
    10 ( 0.00%)      let mut body_owned = input_body.clone();
     .               let mut promoted = input_promoted.clone();
     .               let free_regions =
    15 ( 0.00%)          nll::replace_regions_in_mir(infcx, param_env, &mut body_owned, &mut promoted);
     .               let body = &body_owned; // no further changes
     .           
     5 ( 0.00%)      let location_table_owned = LocationTable::new(body);
     .               let location_table = &location_table_owned;
     .           
     .               let mut errors_buffer = Vec::new();
    15 ( 0.00%)      let (move_data, move_errors): (MoveData<'tcx>, Vec<(Place<'tcx>, MoveError<'tcx>)>) =
    35 ( 0.00%)          match MoveData::gather_moves(&body, tcx, param_env) {
    30 ( 0.00%)              Ok(move_data) => (move_data, Vec::new()),
     .                       Err((move_data, move_errors)) => (move_data, move_errors),
     .                   };
     .               let promoted_errors = promoted
     .                   .iter_enumerated()
    30 ( 0.00%)          .map(|(idx, body)| (idx, MoveData::gather_moves(&body, tcx, param_env)));
     .           
    30 ( 0.00%)      let mdpe = MoveDataParamEnv { move_data, param_env };
     .           
    40 ( 0.00%)      let mut flow_inits = MaybeInitializedPlaces::new(tcx, &body, &mdpe)
     5 ( 0.00%)          .into_engine(tcx, &body)
     .                   .pass_name("borrowck")
     .                   .iterate_to_fixpoint()
     .                   .into_results_cursor(&body);
     .           
    60 ( 0.00%)      let locals_are_invalidated_at_exit = tcx.hir().body_owner_kind(id).is_fn_or_closure();
     .               let borrow_set =
    50 ( 0.00%)          Rc::new(BorrowSet::build(tcx, body, locals_are_invalidated_at_exit, &mdpe.move_data));
     .           
    25 ( 0.00%)      let use_polonius = return_body_with_facts || infcx.tcx.sess.opts.debugging_opts.polonius;
     .           
     .               // Compute non-lexical lifetimes.
     .               let nll::NllOutput {
    15 ( 0.00%)          regioncx,
    20 ( 0.00%)          opaque_type_values,
    10 ( 0.00%)          polonius_input,
    15 ( 0.00%)          polonius_output,
    20 ( 0.00%)          opt_closure_req,
    50 ( 0.00%)          nll_errors,
    90 ( 0.00%)      } = nll::compute_regions(
     .                   infcx,
    80 ( 0.00%)          free_regions,
     .                   body,
     .                   &promoted,
     .                   location_table,
     .                   param_env,
     .                   &mut flow_inits,
     .                   &mdpe.move_data,
     .                   &borrow_set,
     .                   &upvars,
     .                   use_polonius,
     .               );
     .           
     .               // Dump MIR results into a file, if that is enabled. This let us
     .               // write unit-tests, as well as helping with debugging.
    15 ( 0.00%)      nll::dump_mir_results(infcx, &body, &regioncx, &opt_closure_req);
     .           
     .               // We also have a `#[rustc_regions]` annotation that causes us to dump
     .               // information.
    10 ( 0.00%)      nll::dump_annotation(
     .                   infcx,
     .                   &body,
     .                   &regioncx,
     .                   &opt_closure_req,
     .                   &opaque_type_values,
     .                   &mut errors_buffer,
     .               );
     .           
     .               // The various `flow_*` structures can be large. We drop `flow_inits` here
     .               // so it doesn't overlap with the others below. This reduces peak memory
     .               // usage significantly on some benchmarks.
    80 ( 0.00%)      drop(flow_inits);
     .           
     5 ( 0.00%)      let regioncx = Rc::new(regioncx);
     .           
    30 ( 0.00%)      let flow_borrows = Borrows::new(tcx, body, &regioncx, &borrow_set)
     5 ( 0.00%)          .into_engine(tcx, body)
     .                   .pass_name("borrowck")
     .                   .iterate_to_fixpoint();
    30 ( 0.00%)      let flow_uninits = MaybeUninitializedPlaces::new(tcx, body, &mdpe)
     5 ( 0.00%)          .into_engine(tcx, body)
     .                   .pass_name("borrowck")
     .                   .iterate_to_fixpoint();
    30 ( 0.00%)      let flow_ever_inits = EverInitializedPlaces::new(tcx, body, &mdpe)
     5 ( 0.00%)          .into_engine(tcx, body)
     .                   .pass_name("borrowck")
     .                   .iterate_to_fixpoint();
     .           
    14 ( 0.00%)      let movable_generator = !matches!(
    34 ( 0.00%)          tcx.hir().get(id),
     .                   Node::Expr(&hir::Expr {
     .                       kind: hir::ExprKind::Closure(.., Some(hir::Movability::Static)),
     .                       ..
     .                   })
     .               );
     .           
    21 ( 0.00%)      for (idx, move_data_results) in promoted_errors {
     .                   let promoted_body = &promoted[idx];
     .           
     6 ( 0.00%)          if let Err((move_data, move_errors)) = move_data_results {
     .                       let mut promoted_mbcx = MirBorrowckCtxt {
     .                           infcx,
     .                           param_env,
     .                           body: promoted_body,
     .                           move_data: &move_data,
     .                           location_table, // no need to create a real one for the promoted, it is not used
     .                           movable_generator,
     .                           fn_self_span_reported: Default::default(),
-- line 307 ----------------------------------------
-- line 325 ----------------------------------------
     .                       };
     .                       promoted_mbcx.report_move_errors(move_errors);
     .                       errors_buffer = promoted_mbcx.errors_buffer;
     .                   };
     .               }
     .           
     .               let dominators = body.dominators();
     .           
   225 ( 0.00%)      let mut mbcx = MirBorrowckCtxt {
     .                   infcx,
     .                   param_env,
     .                   body,
     .                   move_data: &mdpe.move_data,
     .                   location_table,
     .                   movable_generator,
     .                   locals_are_invalidated_at_exit,
     .                   fn_self_span_reported: Default::default(),
     .                   access_place_error_reported: Default::default(),
     .                   reservation_error_reported: Default::default(),
     .                   reservation_warnings: Default::default(),
     .                   move_error_reported: BTreeMap::new(),
     .                   uninitialized_error_reported: Default::default(),
    20 ( 0.00%)          errors_buffer,
     5 ( 0.00%)          regioncx: Rc::clone(&regioncx),
     .                   used_mut: Default::default(),
     .                   used_mut_upvars: SmallVec::new(),
     5 ( 0.00%)          borrow_set: Rc::clone(&borrow_set),
    30 ( 0.00%)          dominators,
    20 ( 0.00%)          upvars,
    20 ( 0.00%)          local_names,
     .                   region_names: RefCell::default(),
     .                   next_region_name: RefCell::new(1),
     .                   polonius_output,
     .               };
     .           
     .               // Compute and report region errors, if any.
    15 ( 0.00%)      mbcx.report_region_errors(nll_errors);
     .           
     .               let results = BorrowckResults {
    30 ( 0.00%)          ever_inits: flow_ever_inits,
    40 ( 0.00%)          uninits: flow_uninits,
    55 ( 0.00%)          borrows: flow_borrows,
     .               };
     .           
    30 ( 0.00%)      mbcx.report_move_errors(move_errors);
     .           
     5 ( 0.00%)      rustc_mir_dataflow::visit_results(
     .                   body,
     5 ( 0.00%)          traversal::reverse_postorder(body).map(|(bb, _)| bb),
     .                   &results,
     .                   &mut mbcx,
     .               );
     .           
     .               // Convert any reservation warnings into lints.
     .               let reservation_warnings = mem::take(&mut mbcx.reservation_warnings);
     .               for (_, (place, span, location, bk, borrow)) in reservation_warnings {
     .                   let mut initial_diag = mbcx.report_conflicting_borrow(location, (place, span), bk, &borrow);
-- line 381 ----------------------------------------
-- line 406 ----------------------------------------
     .               // For each non-user used mutable variable, check if it's been assigned from
     .               // a user-declared local. If so, then put that local into the used_mut set.
     .               // Note that this set is expected to be small - only upvars from closures
     .               // would have a chance of erroneously adding non-user-defined mutable vars
     .               // to the set.
     .               let temporary_used_locals: FxHashSet<Local> = mbcx
     .                   .used_mut
     .                   .iter()
     5 ( 0.00%)          .filter(|&local| !mbcx.body.local_decls[*local].is_user_variable())
     .                   .cloned()
     .                   .collect();
     .               // For the remaining unused locals that are marked as mutable, we avoid linting any that
     .               // were never initialized. These locals may have been removed as unreachable code; or will be
     .               // linted as unused variables.
     .               let unused_mut_locals =
     5 ( 0.00%)          mbcx.body.mut_vars_iter().filter(|local| !mbcx.used_mut.contains(local)).collect();
    20 ( 0.00%)      mbcx.gather_used_muts(temporary_used_locals, unused_mut_locals);
     .           
     .               debug!("mbcx.used_mut: {:?}", mbcx.used_mut);
    20 ( 0.00%)      let used_mut = mbcx.used_mut;
     5 ( 0.00%)      for local in mbcx.body.mut_vars_and_args_iter().filter(|local| !used_mut.contains(local)) {
     1 ( 0.00%)          let local_decl = &mbcx.body.local_decls[local];
     6 ( 0.00%)          let lint_root = match &mbcx.body.source_scopes[local_decl.source_info.scope].local_data {
     .                       ClearCrossCrate::Set(data) => data.lint_root,
     .                       _ => continue,
     .                   };
     .           
     .                   // Skip over locals that begin with an underscore or have no name
     3 ( 0.00%)          match mbcx.local_names[local] {
     .                       Some(name) => {
     .                           if name.as_str().starts_with('_') {
     .                               continue;
     .                           }
     .                       }
     .                       None => continue,
     .                   }
     .           
-- line 442 ----------------------------------------
-- line 455 ----------------------------------------
     .                               String::new(),
     .                               Applicability::MachineApplicable,
     .                           )
     .                           .emit();
     .                   })
     .               }
     .           
     .               // Buffer any move errors that we collected and de-duplicated.
    45 ( 0.00%)      for (_, (_, diag)) in mbcx.move_error_reported {
     .                   diag.buffer(&mut mbcx.errors_buffer);
     .               }
     .           
     5 ( 0.00%)      if !mbcx.errors_buffer.is_empty() {
     .                   mbcx.errors_buffer.sort_by_key(|diag| diag.sort_span);
     .           
     .                   for diag in mbcx.errors_buffer.drain(..) {
     .                       mbcx.infcx.tcx.sess.diagnostic().emit_diagnostic(&diag);
     .                   }
     .               }
     .           
     .               let result = BorrowCheckResult {
    20 ( 0.00%)          concrete_opaque_types: opaque_type_values,
    25 ( 0.00%)          closure_requirements: opt_closure_req,
    30 ( 0.00%)          used_mut_upvars: mbcx.used_mut_upvars,
     .               };
     .           
    10 ( 0.00%)      let body_with_facts = if return_body_with_facts {
     .                   let output_facts = mbcx.polonius_output.expect("Polonius output was not computed");
     .                   Some(Box::new(BodyWithBorrowckFacts {
     .                       body: body_owned,
     .                       input_facts: *polonius_input.expect("Polonius input facts were not generated"),
     .                       output_facts,
     .                       location_table: location_table_owned,
     .                   }))
     .               } else {
     .                   None
     .               };
     .           
     .               debug!("do_mir_borrowck: result = {:#?}", result);
     .           
    70 ( 0.00%)      (result, body_with_facts)
    60 ( 0.00%)  }
     .           
     .           /// A `Body` with information computed by the borrow checker. This struct is
     .           /// intended to be consumed by compiler consumers.
     .           ///
     .           /// We need to include the MIR body here because the region identifiers must
     .           /// match the ones in the Polonius facts.
     .           pub struct BodyWithBorrowckFacts<'tcx> {
     .               /// A mir body that contains region identifiers.
-- line 504 ----------------------------------------
-- line 608 ----------------------------------------
     .           // Check that:
     .           // 1. assignments are always made to mutable locations (FIXME: does that still really go here?)
     .           // 2. loans made in overlapping scopes do not conflict
     .           // 3. assignments do not affect things loaned out as immutable
     .           // 4. moves do not affect things loaned out in any way
     .           impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx> {
     .               type FlowState = Flows<'cx, 'tcx>;
     .           
12,501 ( 0.01%)      fn visit_statement_before_primary_effect(
     .                   &mut self,
     .                   flow_state: &Flows<'cx, 'tcx>,
     .                   stmt: &'cx Statement<'tcx>,
     .                   location: Location,
     .               ) {
     .                   debug!("MirBorrowckCtxt::process_statement({:?}, {:?}): {:?}", location, stmt, flow_state);
     .                   let span = stmt.source_info.span;
     .           
     .                   self.check_activations(location, span, flow_state);
     .           
 6,945 ( 0.00%)          match &stmt.kind {
   760 ( 0.00%)              StatementKind::Assign(box (lhs, ref rhs)) => {
     .                           self.consume_rvalue(location, (rhs, span), flow_state);
     .           
 1,520 ( 0.00%)                  self.mutate_place(location, (*lhs, span), Shallow(None), flow_state);
     .                       }
    49 ( 0.00%)              StatementKind::FakeRead(box (_, ref place)) => {
     .                           // Read for match doesn't access any memory and is used to
     .                           // assert that a place is safe and live. So we don't have to
     .                           // do any checks here.
     .                           //
     .                           // FIXME: Remove check that the place is initialized. This is
     .                           // needed for now because matches don't have never patterns yet.
     .                           // So this is the only place we prevent
     .                           //      let x: !;
     .                           //      match x {};
     .                           // from compiling.
   196 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
     .                               location,
     .                               InitializationRequiringAction::Use,
   441 ( 0.00%)                      (place.as_ref(), span),
     .                               flow_state,
     .                           );
     .                       }
     .                       StatementKind::SetDiscriminant { place, variant_index: _ } => {
     .                           self.mutate_place(location, (**place, span), Shallow(None), flow_state);
     .                       }
     .                       StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {
     .                           ..
-- line 655 ----------------------------------------
-- line 663 ----------------------------------------
     .                       | StatementKind::Coverage(..)
     .                       | StatementKind::AscribeUserType(..)
     .                       | StatementKind::Retag { .. }
     .                       | StatementKind::StorageLive(..) => {
     .                           // `Nop`, `AscribeUserType`, `Retag`, and `StorageLive` are irrelevant
     .                           // to borrow check.
     .                       }
     .                       StatementKind::StorageDead(local) => {
 2,850 ( 0.00%)                  self.access_place(
     .                               location,
 5,225 ( 0.00%)                      (Place::from(*local), span),
     .                               (Shallow(None), Write(WriteKind::StorageDeadOrDrop)),
     .                               LocalMutationIsAllowed::Yes,
     .                               flow_state,
     .                           );
     .                       }
     .                   }
11,112 ( 0.01%)      }
     .           
 2,376 ( 0.00%)      fn visit_terminator_before_primary_effect(
     .                   &mut self,
     .                   flow_state: &Flows<'cx, 'tcx>,
     .                   term: &'cx Terminator<'tcx>,
     .                   loc: Location,
     .               ) {
     .                   debug!("MirBorrowckCtxt::process_terminator({:?}, {:?}): {:?}", loc, term, flow_state);
     .                   let span = term.source_info.span;
     .           
     .                   self.check_activations(loc, span, flow_state);
     .           
 1,485 ( 0.00%)          match term.kind {
    68 ( 0.00%)              TerminatorKind::SwitchInt { ref discr, switch_ty: _, targets: _ } => {
    68 ( 0.00%)                  self.consume_operand(loc, (discr, span), flow_state);
     .                       }
   174 ( 0.00%)              TerminatorKind::Drop { place, target: _, unwind: _ } => {
     .                           debug!(
     .                               "visit_terminator_drop \
     .                                loc: {:?} term: {:?} place: {:?} span: {:?}",
     .                               loc, term, place, span
     .                           );
     .           
   522 ( 0.00%)                  self.access_place(
     .                               loc,
   783 ( 0.00%)                      (place, span),
     .                               (AccessDepth::Drop, Write(WriteKind::StorageDeadOrDrop)),
     .                               LocalMutationIsAllowed::Yes,
     .                               flow_state,
     .                           );
     .                       }
     .                       TerminatorKind::DropAndReplace {
     .                           place: drop_place,
     .                           value: ref new_value,
     .                           target: _,
     .                           unwind: _,
     .                       } => {
     .                           self.mutate_place(loc, (drop_place, span), Deep, flow_state);
     .                           self.consume_operand(loc, (new_value, span), flow_state);
     .                       }
     .                       TerminatorKind::Call {
   393 ( 0.00%)                  ref func,
     .                           ref args,
     .                           ref destination,
     .                           cleanup: _,
     .                           from_hir_call: _,
     .                           fn_span: _,
     .                       } => {
 1,048 ( 0.00%)                  self.consume_operand(loc, (func, span), flow_state);
     .                           for arg in args {
 1,158 ( 0.00%)                      self.consume_operand(loc, (arg, span), flow_state);
     .                           }
   522 ( 0.00%)                  if let Some((dest, _ /*bb*/)) = *destination {
 1,548 ( 0.00%)                      self.mutate_place(loc, (dest, span), Deep, flow_state);
     .                           }
     .                       }
     .                       TerminatorKind::Assert { ref cond, expected: _, ref msg, target: _, cleanup: _ } => {
     .                           self.consume_operand(loc, (cond, span), flow_state);
     .                           use rustc_middle::mir::AssertKind;
     .                           if let AssertKind::BoundsCheck { ref len, ref index } = *msg {
     .                               self.consume_operand(loc, (len, span), flow_state);
     .                               self.consume_operand(loc, (index, span), flow_state);
-- line 742 ----------------------------------------
-- line 790 ----------------------------------------
     .                       | TerminatorKind::Resume
     .                       | TerminatorKind::Return
     .                       | TerminatorKind::GeneratorDrop
     .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
     .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ } => {
     .                           // no data used, thus irrelevant to borrowck
     .                       }
     .                   }
 2,240 ( 0.00%)      }
     .           
 2,079 ( 0.00%)      fn visit_terminator_after_primary_effect(
     .                   &mut self,
     .                   flow_state: &Flows<'cx, 'tcx>,
     .                   term: &'cx Terminator<'tcx>,
     .                   loc: Location,
     .               ) {
   297 ( 0.00%)          let span = term.source_info.span;
     .           
 1,188 ( 0.00%)          match term.kind {
     .                       TerminatorKind::Yield { value: _, resume: _, resume_arg: _, drop: _ } => {
     .                           if self.movable_generator {
     .                               // Look for any active borrows to locals
     .                               let borrow_set = self.borrow_set.clone();
     .                               for i in flow_state.borrows.iter() {
     .                                   let borrow = &borrow_set[i];
     .                                   self.check_for_local_borrow(borrow, span);
     .                               }
-- line 816 ----------------------------------------
-- line 817 ----------------------------------------
     .                           }
     .                       }
     .           
     .                       TerminatorKind::Resume | TerminatorKind::Return | TerminatorKind::GeneratorDrop => {
     .                           // Returning from the function implicitly kills storage for all locals and statics.
     .                           // Often, the storage will already have been killed by an explicit
     .                           // StorageDead, but we don't always emit those (notably on unwind paths),
     .                           // so this "extra check" serves as a kind of backup.
    16 ( 0.00%)                  let borrow_set = self.borrow_set.clone();
     .                           for i in flow_state.borrows.iter() {
     .                               let borrow = &borrow_set[i];
     .                               self.check_for_invalidation_at_exit(loc, borrow, span);
     .                           }
     .                       }
     .           
     .                       TerminatorKind::Abort
     .                       | TerminatorKind::Assert { .. }
-- line 833 ----------------------------------------
-- line 836 ----------------------------------------
     .                       | TerminatorKind::DropAndReplace { .. }
     .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
     .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ }
     .                       | TerminatorKind::Goto { .. }
     .                       | TerminatorKind::SwitchInt { .. }
     .                       | TerminatorKind::Unreachable
     .                       | TerminatorKind::InlineAsm { .. } => {}
     .                   }
 2,376 ( 0.00%)      }
     .           }
     .           
     .           use self::AccessDepth::{Deep, Shallow};
     .           use self::ReadOrWrite::{Activation, Read, Reservation, Write};
     .           
     .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
     .           enum ArtificialField {
     .               ArrayLength,
-- line 852 ----------------------------------------
-- line 913 ----------------------------------------
     .           /// When checking permissions for a place access, this flag is used to indicate that an immutable
     .           /// local place can be mutated.
     .           //
     .           // FIXME: @nikomatsakis suggested that this flag could be removed with the following modifications:
     .           // - Merge `check_access_permissions()` and `check_if_reassignment_to_immutable_state()`.
     .           // - Split `is_mutable()` into `is_assignable()` (can be directly assigned) and
     .           //   `is_declared_mutable()`.
     .           // - Take flow state into consideration in `is_assignable()` for local variables.
   485 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
     .           enum LocalMutationIsAllowed {
     .               Yes,
     .               /// We want use of immutable upvars to cause a "write to immutable upvar"
     .               /// error, not an "reassignment" error.
     .               ExceptUpvars,
     .               No,
     .           }
     .           
-- line 929 ----------------------------------------
-- line 970 ----------------------------------------
     .               }
     .           
     .               /// Checks an access to the given place to see if it is allowed. Examines the set of borrows
     .               /// that are in scope, as well as which paths have been initialized, to ensure that (a) the
     .               /// place is initialized and (b) it is not borrowed in some way that would prevent this
     .               /// access.
     .               ///
     .               /// Returns `true` if an error is reported.
23,936 ( 0.01%)      fn access_place(
     .                   &mut self,
     .                   location: Location,
     .                   place_span: (Place<'tcx>, Span),
     .                   kind: (AccessDepth, ReadOrWrite),
     .                   is_local_mutation_allowed: LocalMutationIsAllowed,
     .                   flow_state: &Flows<'cx, 'tcx>,
     .               ) {
     .                   let (sd, rw) = kind;
     .           
 5,984 ( 0.00%)          if let Activation(_, borrow_index) = rw {
   150 ( 0.00%)              if self.reservation_error_reported.contains(&place_span.0) {
     .                           debug!(
     .                               "skipping access_place for activation of invalid reservation \
     .                                place: {:?} borrow_index: {:?}",
     .                               place_span.0, borrow_index
     .                           );
     .                           return;
     .                       }
     .                   }
     .           
     .                   // Check is_empty() first because it's the common case, and doing that
     .                   // way we avoid the clone() call.
 1,496 ( 0.00%)          if !self.access_place_error_reported.is_empty()
     .                       && self.access_place_error_reported.contains(&(place_span.0, place_span.1))
     .                   {
     .                       debug!(
     .                           "access_place: suppressing error place_span=`{:?}` kind=`{:?}`",
     .                           place_span, kind
     .                       );
     .                       return;
     .                   }
     .           
 8,976 ( 0.00%)          let mutability_error = self.check_access_permissions(
 5,984 ( 0.00%)              place_span,
     .                       rw,
     .                       is_local_mutation_allowed,
     .                       flow_state,
     .                       location,
     .                   );
     .                   let conflict_error =
16,456 ( 0.01%)              self.check_access_for_conflict(location, place_span, sd, rw, flow_state);
     .           
 4,488 ( 0.00%)          if let (Activation(_, borrow_idx), true) = (kind.1, conflict_error) {
     .                       // Suppress this warning when there's an error being emitted for the
     .                       // same borrow: fixing the error is likely to fix the warning.
     .                       self.reservation_warnings.remove(&borrow_idx);
     .                   }
     .           
 4,488 ( 0.00%)          if conflict_error || mutability_error {
     .                       debug!("access_place: logging error place_span=`{:?}` kind=`{:?}`", place_span, kind);
     .           
     .                       self.access_place_error_reported.insert((place_span.0, place_span.1));
     .                   }
11,968 ( 0.01%)      }
     .           
     .               fn check_access_for_conflict(
     .                   &mut self,
     .                   location: Location,
     .                   place_span: (Place<'tcx>, Span),
     .                   sd: AccessDepth,
     .                   rw: ReadOrWrite,
     .                   flow_state: &Flows<'cx, 'tcx>,
     .               ) -> bool {
     .                   debug!(
     .                       "check_access_for_conflict(location={:?}, place_span={:?}, sd={:?}, rw={:?})",
     .                       location, place_span, sd, rw,
     .                   );
     .           
 1,496 ( 0.00%)          let mut error_reported = false;
 4,488 ( 0.00%)          let tcx = self.infcx.tcx;
     .                   let body = self.body;
 2,992 ( 0.00%)          let borrow_set = self.borrow_set.clone();
     .           
     .                   // Use polonius output if it has been enabled.
 2,992 ( 0.00%)          let polonius_output = self.polonius_output.clone();
     .                   let borrows_in_scope = if let Some(polonius) = &polonius_output {
     .                       let location = self.location_table.start_index(location);
     .                       Either::Left(polonius.errors_at(location).iter().copied())
     .                   } else {
     .                       Either::Right(flow_state.borrows.iter())
     .                   };
     .           
19,448 ( 0.01%)          each_borrow_involving_path(
     .                       self,
     .                       tcx,
     .                       body,
     .                       location,
 8,976 ( 0.00%)              (sd, place_span.0),
     .                       &borrow_set,
 8,976 ( 0.00%)              borrows_in_scope,
17,431 ( 0.01%)              |this, borrow_index, borrow| match (rw, borrow.kind) {
     .                           // Obviously an activation is compatible with its own
     .                           // reservation (or even prior activating uses of same
     .                           // borrow); so don't check if they interfere.
     .                           //
     .                           // NOTE: *reservations* do conflict with themselves;
     .                           // thus aren't injecting unsoundenss w/ this check.)
    75 ( 0.00%)                  (Activation(_, activating), _) if activating == borrow_index => {
     .                               debug!(
     .                                   "check_access_for_conflict place_span: {:?} sd: {:?} rw: {:?} \
     .                                    skipping {:?} b/c activation of same borrow_index",
     .                                   place_span,
     .                                   sd,
     .                                   rw,
     .                                   (borrow_index, borrow),
     .                               );
-- line 1084 ----------------------------------------
-- line 1179 ----------------------------------------
     .                                   }
     .                               }
     .                               Control::Break
     .                           }
     .                       },
     .                   );
     .           
     .                   error_reported
 4,488 ( 0.00%)      }
     .           
 5,090 ( 0.00%)      fn mutate_place(
     .                   &mut self,
     .                   location: Location,
     .                   place_span: (Place<'tcx>, Span),
     .                   kind: AccessDepth,
     .                   flow_state: &Flows<'cx, 'tcx>,
     .               ) {
     .                   // Write of P[i] or *P requires P init'd.
 4,581 ( 0.00%)          self.check_if_assigned_path_is_moved(location, place_span, flow_state);
     .           
     .                   // Special case: you can assign an immutable local variable
     .                   // (e.g., `x = ...`) so long as it has never been initialized
     .                   // before (at this point in the flow).
   509 ( 0.00%)          if let Some(local) = place_span.0.as_local() {
 2,036 ( 0.00%)              if let Mutability::Not = self.body.local_decls[local].mutability {
     .                           // check for reassignments to immutable local variables
     .                           self.check_if_reassignment_to_immutable_state(
     .                               location, local, place_span, flow_state,
     .                           );
     .                           return;
     .                       }
     .                   }
     .           
     .                   // Otherwise, use the normal access permission rules.
 4,068 ( 0.00%)          self.access_place(
     .                       location,
 1,356 ( 0.00%)              place_span,
     .                       (kind, Write(WriteKind::Mutate)),
     .                       LocalMutationIsAllowed::No,
     .                       flow_state,
     .                   );
 4,072 ( 0.00%)      }
     .           
     .               fn consume_rvalue(
     .                   &mut self,
     .                   location: Location,
     .                   (rvalue, span): (&'cx Rvalue<'tcx>, Span),
     .                   flow_state: &Flows<'cx, 'tcx>,
     .               ) {
 2,280 ( 0.00%)          match *rvalue {
   702 ( 0.00%)              Rvalue::Ref(_ /*rgn*/, bk, place) => {
 2,516 ( 0.00%)                  let access_kind = match bk {
     .                               BorrowKind::Shallow => {
     .                                   (Shallow(Some(ArtificialField::ShallowBorrow)), Read(ReadKind::Borrow(bk)))
     .                               }
     .                               BorrowKind::Shared => (Deep, Read(ReadKind::Borrow(bk))),
     .                               BorrowKind::Unique | BorrowKind::Mut { .. } => {
     .                                   let wk = WriteKind::MutableBorrow(bk);
   292 ( 0.00%)                          if allow_two_phase_borrow(bk) {
     .                                       (Deep, Reservation(wk))
     .                                   } else {
     .                                       (Deep, Write(wk))
     .                                   }
     .                               }
     .                           };
     .           
 4,914 ( 0.00%)                  self.access_place(
     .                               location,
   936 ( 0.00%)                      (place, span),
     .                               access_kind,
     .                               LocalMutationIsAllowed::No,
     .                               flow_state,
     .                           );
     .           
     .                           let action = if bk == BorrowKind::Shallow {
     .                               InitializationRequiringAction::MatchOn
     .                           } else {
     .                               InitializationRequiringAction::Borrow
     .                           };
     .           
 1,638 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
     .                               location,
     .                               action,
 1,638 ( 0.00%)                      (place.as_ref(), span),
     .                               flow_state,
     .                           );
     .                       }
     .           
     .                       Rvalue::AddressOf(mutability, place) => {
     .                           let access_kind = match mutability {
     .                               Mutability::Mut => (
     .                                   Deep,
-- line 1270 ----------------------------------------
-- line 1302 ----------------------------------------
     .                       }
     .           
     .                       Rvalue::Len(place) | Rvalue::Discriminant(place) => {
     .                           let af = match *rvalue {
     .                               Rvalue::Len(..) => Some(ArtificialField::ArrayLength),
     .                               Rvalue::Discriminant(..) => None,
     .                               _ => unreachable!(),
     .                           };
   160 ( 0.00%)                  self.access_place(
     .                               location,
    40 ( 0.00%)                      (place, span),
     .                               (Shallow(af), Read(ReadKind::Copy)),
     .                               LocalMutationIsAllowed::No,
     .                               flow_state,
     .                           );
    70 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
     .                               location,
     .                               InitializationRequiringAction::Use,
    70 ( 0.00%)                      (place.as_ref(), span),
     .                               flow_state,
     .                           );
     .                       }
     .           
     .                       Rvalue::BinaryOp(_bin_op, box (ref operand1, ref operand2))
     .                       | Rvalue::CheckedBinaryOp(_bin_op, box (ref operand1, ref operand2)) => {
     .                           self.consume_operand(location, (operand1, span), flow_state);
     .                           self.consume_operand(location, (operand2, span), flow_state);
-- line 1328 ----------------------------------------
-- line 1331 ----------------------------------------
     .                       Rvalue::NullaryOp(_op, _ty) => {
     .                           // nullary ops take no dynamic input; no borrowck effect.
     .                       }
     .           
     .                       Rvalue::Aggregate(ref aggregate_kind, ref operands) => {
     .                           // We need to report back the list of mutable upvars that were
     .                           // moved into the closure and subsequently used by the closure,
     .                           // in order to populate our used_mut set.
    87 ( 0.00%)                  match **aggregate_kind {
     .                               AggregateKind::Closure(def_id, _) | AggregateKind::Generator(def_id, _, _) => {
     .                                   let BorrowCheckResult { used_mut_upvars, .. } =
     4 ( 0.00%)                              self.infcx.tcx.mir_borrowck(def_id.expect_local());
     .                                   debug!("{:?} used_mut_upvars={:?}", def_id, used_mut_upvars);
     .                                   for field in used_mut_upvars {
     .                                       self.propagate_closure_used_mut_upvar(&operands[field.index()]);
     .                                   }
     .                               }
     .                               AggregateKind::Adt(..)
     .                               | AggregateKind::Array(..)
     .                               | AggregateKind::Tuple { .. } => (),
-- line 1350 ----------------------------------------
-- line 1448 ----------------------------------------
     .                               }
     .                               _ => propagate_closure_used_mut_place(self, place),
     .                           }
     .                       }
     .                       Operand::Constant(..) => {}
     .                   }
     .               }
     .           
 5,376 ( 0.00%)      fn consume_operand(
     .                   &mut self,
     .                   location: Location,
     .                   (operand, span): (&'cx Operand<'tcx>, Span),
     .                   flow_state: &Flows<'cx, 'tcx>,
     .               ) {
 2,296 ( 0.00%)          match *operand {
    39 ( 0.00%)              Operand::Copy(place) => {
     .                           // copy of place: check if this is "copy of frozen path"
     .                           // (FIXME: see check_loans.rs)
    78 ( 0.00%)                  self.access_place(
     .                               location,
    65 ( 0.00%)                      (place, span),
     .                               (Deep, Read(ReadKind::Copy)),
     .                               LocalMutationIsAllowed::No,
     .                               flow_state,
     .                           );
     .           
     .                           // Finally, check if path was already moved.
     .                           self.check_if_path_or_subpath_is_moved(
     .                               location,
     .                               InitializationRequiringAction::Use,
     .                               (place.as_ref(), span),
     .                               flow_state,
     .                           );
     .                       }
   789 ( 0.00%)              Operand::Move(place) => {
     .                           // move of place: check if this is move of already borrowed path
 1,889 ( 0.00%)                  self.access_place(
     .                               location,
 1,315 ( 0.00%)                      (place, span),
     .                               (Deep, Write(WriteKind::Move)),
     .                               LocalMutationIsAllowed::Yes,
     .                               flow_state,
     .                           );
     .           
     .                           // Finally, check if path was already moved.
    64 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
     .                               location,
     .                               InitializationRequiringAction::Use,
    48 ( 0.00%)                      (place.as_ref(), span),
     .                               flow_state,
     .                           );
     .                       }
     .                       Operand::Constant(_) => {}
     .                   }
 3,584 ( 0.00%)      }
     .           
     .               /// Checks whether a borrow of this place is invalidated when the function
     .               /// exits
     .               fn check_for_invalidation_at_exit(
     .                   &mut self,
     .                   location: Location,
     .                   borrow: &BorrowData<'tcx>,
     .                   span: Span,
-- line 1510 ----------------------------------------
-- line 1573 ----------------------------------------
     .                       err.buffer(&mut self.errors_buffer);
     .                   }
     .               }
     .           
     .               fn check_activations(&mut self, location: Location, span: Span, flow_state: &Flows<'cx, 'tcx>) {
     .                   // Two-phase borrow support: For each activation that is newly
     .                   // generated at this statement, check if it interferes with
     .                   // another borrow.
 3,372 ( 0.00%)          let borrow_set = self.borrow_set.clone();
 6,522 ( 0.00%)          for &borrow_index in borrow_set.activations_at_location(location) {
     .                       let borrow = &borrow_set[borrow_index];
     .           
     .                       // only mutable borrows should be 2-phase
   375 ( 0.00%)              assert!(match borrow.kind {
     .                           BorrowKind::Shared | BorrowKind::Shallow => false,
     .                           BorrowKind::Unique | BorrowKind::Mut { .. } => true,
     .                       });
     .           
   900 ( 0.00%)              self.access_place(
     .                           location,
   450 ( 0.00%)                  (borrow.borrowed_place, span),
   675 ( 0.00%)                  (Deep, Activation(WriteKind::MutableBorrow(borrow.kind), borrow_index)),
     .                           LocalMutationIsAllowed::No,
     .                           flow_state,
     .                       );
     .                       // We do not need to call `check_if_path_or_subpath_is_moved`
     .                       // again, as we already called it when we made the
     .                       // initial reservation.
     .                   }
     .               }
-- line 1602 ----------------------------------------
-- line 1606 ----------------------------------------
     .                   location: Location,
     .                   local: Local,
     .                   place_span: (Place<'tcx>, Span),
     .                   flow_state: &Flows<'cx, 'tcx>,
     .               ) {
     .                   debug!("check_if_reassignment_to_immutable_state({:?})", local);
     .           
     .                   // Check if any of the initializiations of `local` have happened yet:
 1,020 ( 0.00%)          if let Some(init_index) = self.is_local_ever_initialized(local, flow_state) {
     .                       // And, if so, report an error.
     .                       let init = &self.move_data.inits[init_index];
     .                       let span = init.span(&self.body);
     .                       self.report_illegal_reassignment(location, place_span, span, place_span.0);
     .                   }
     .               }
     .           
 7,397 ( 0.00%)      fn check_if_full_path_is_moved(
     .                   &mut self,
     .                   location: Location,
     .                   desired_action: InitializationRequiringAction,
     .                   place_span: (PlaceRef<'tcx>, Span),
     .                   flow_state: &Flows<'cx, 'tcx>,
     .               ) {
     .                   let maybe_uninits = &flow_state.uninits;
     .           
-- line 1630 ----------------------------------------
-- line 1660 ----------------------------------------
     .                   // Therefore, if we seek out the *closest* prefix for which we
     .                   // have a MovePath, that should capture the initialization
     .                   // state for the place scenario.
     .                   //
     .                   // This code covers scenarios 1, 2, and 3.
     .           
     .                   debug!("check_if_full_path_is_moved place: {:?}", place_span.0);
     .                   let (prefix, mpi) = self.move_path_closest_to(place_span.0);
   569 ( 0.00%)          if maybe_uninits.contains(mpi) {
     .                       self.report_use_of_moved_or_uninitialized(
     .                           location,
     .                           desired_action,
     .                           (prefix, place_span.0, place_span.1),
     .                           mpi,
     .                       );
     .                   } // Only query longest prefix with a MovePath, not further
     .                   // ancestors; dataflow recurs on children when parents
     .                   // move (to support partial (re)inits).
     .                   //
     .                   // (I.e., querying parents breaks scenario 7; but may want
     .                   // to do such a query based on partial-init feature-gate.)
 4,552 ( 0.00%)      }
     .           
     .               /// Subslices correspond to multiple move paths, so we iterate through the
     .               /// elements of the base array. For each element we check
     .               ///
     .               /// * Does this element overlap with our slice.
     .               /// * Is any part of it uninitialized.
     .               fn check_if_subslice_element_is_moved(
     .                   &mut self,
-- line 1689 ----------------------------------------
-- line 1719 ----------------------------------------
     .                                       return; // don't bother finding other problems.
     .                                   }
     .                               }
     .                           }
     .                       }
     .                   }
     .               }
     .           
 6,259 ( 0.00%)      fn check_if_path_or_subpath_is_moved(
     .                   &mut self,
     .                   location: Location,
     .                   desired_action: InitializationRequiringAction,
     .                   place_span: (PlaceRef<'tcx>, Span),
     .                   flow_state: &Flows<'cx, 'tcx>,
     .               ) {
 1,138 ( 0.00%)          let maybe_uninits = &flow_state.uninits;
     .           
     .                   // Bad scenarios:
     .                   //
     .                   // 1. Move of `a.b.c`, use of `a` or `a.b`
     .                   //    partial initialization support, one might have `a.x`
     .                   //    initialized but not `a.b`.
     .                   // 2. All bad scenarios from `check_if_full_path_is_moved`
     .                   //
-- line 1742 ----------------------------------------
-- line 1743 ----------------------------------------
     .                   // OK scenarios:
     .                   //
     .                   // 3. Move of `a.b.c`, use of `a.b.d`
     .                   // 4. Uninitialized `a.x`, initialized `a.b`, use of `a.b`
     .                   // 5. Copied `(a.b: &_)`, use of `*(a.b).c`; note that `a.b`
     .                   //    must have been initialized for the use to be sound.
     .                   // 6. Move of `a.b.c` then reinit of `a.b.c.d`, use of `a.b.c.d`
     .           
 3,983 ( 0.00%)          self.check_if_full_path_is_moved(location, desired_action, place_span, flow_state);
     .           
   604 ( 0.00%)          if let Some((place_base, ProjectionElem::Subslice { from, to, from_end: false })) =
   569 ( 0.00%)              place_span.0.last_projection()
     .                   {
     .                       let place_ty = place_base.ty(self.body(), self.infcx.tcx);
     .                       if let ty::Array(..) = place_ty.ty.kind() {
     .                           self.check_if_subslice_element_is_moved(
     .                               location,
     .                               desired_action,
     .                               (place_base, place_span.1),
     .                               maybe_uninits,
-- line 1762 ----------------------------------------
-- line 1772 ----------------------------------------
     .                   //
     .                   // (Distinct from handling of scenarios 1+2+4 above because
     .                   // `place` does not interfere with suffixes of its prefixes,
     .                   // e.g., `a.b.c` does not interfere with `a.b.d`)
     .                   //
     .                   // This code covers scenario 1.
     .           
     .                   debug!("check_if_path_or_subpath_is_moved place: {:?}", place_span.0);
 2,276 ( 0.00%)          if let Some(mpi) = self.move_path_for_place(place_span.0) {
 1,728 ( 0.00%)              let uninit_mpi = self
     .                           .move_data
     .                           .find_in_move_path_or_its_descendants(mpi, |mpi| maybe_uninits.contains(mpi));
     .           
   864 ( 0.00%)              if let Some(uninit_mpi) = uninit_mpi {
     .                           self.report_use_of_moved_or_uninitialized(
     .                               location,
     .                               desired_action,
     .                               (place_span.0, place_span.0, place_span.1),
     .                               uninit_mpi,
     .                           );
     .                           return; // don't bother finding other problems.
     .                       }
     .                   }
 4,552 ( 0.00%)      }
     .           
     .               /// Currently MoveData does not store entries for all places in
     .               /// the input MIR. For example it will currently filter out
     .               /// places that are Copy; thus we do not track places of shared
     .               /// reference type. This routine will walk up a place along its
     .               /// prefixes, searching for a foundational place that *is*
     .               /// tracked in the MoveData.
     .               ///
     .               /// An Err result includes a tag indicated why the search failed.
     .               /// Currently this can only occur if the place is built off of a
     .               /// static variable, as we do not track those in the MoveData.
     .               fn move_path_closest_to(&mut self, place: PlaceRef<'tcx>) -> (PlaceRef<'tcx>, MovePathIndex) {
 7,397 ( 0.00%)          match self.move_data.rev_lookup.find(place) {
     .                       LookupResult::Parent(Some(mpi)) | LookupResult::Exact(mpi) => {
     .                           (self.move_data.move_paths[mpi].place.as_ref(), mpi)
     .                       }
     .                       LookupResult::Parent(None) => panic!("should have move path for every Local"),
     .                   }
     .               }
     .           
     .               fn move_path_for_place(&mut self, place: PlaceRef<'tcx>) -> Option<MovePathIndex> {
     .                   // If returns None, then there is no move path corresponding
     .                   // to a direct owner of `place` (which means there is nothing
     .                   // that borrowck tracks for its analysis).
     .           
 5,121 ( 0.00%)          match self.move_data.rev_lookup.find(place) {
     .                       LookupResult::Parent(_) => None,
     .                       LookupResult::Exact(mpi) => Some(mpi),
     .                   }
     .               }
     .           
     .               fn check_if_assigned_path_is_moved(
     .                   &mut self,
     .                   location: Location,
-- line 1829 ----------------------------------------
-- line 1979 ----------------------------------------
     .                   }
     .               }
     .           
     .               /// Checks the permissions for the given place and read or write kind
     .               ///
     .               /// Returns `true` if an error is reported.
     .               fn check_access_permissions(
     .                   &mut self,
 2,992 ( 0.00%)          (place, span): (Place<'tcx>, Span),
     .                   kind: ReadOrWrite,
     .                   is_local_mutation_allowed: LocalMutationIsAllowed,
     .                   flow_state: &Flows<'cx, 'tcx>,
     .                   location: Location,
     .               ) -> bool {
     .                   debug!(
     .                       "check_access_permissions({:?}, {:?}, is_local_mutation_allowed: {:?})",
     .                       place, kind, is_local_mutation_allowed
     .                   );
     .           
     .                   let error_access;
     .                   let the_place_err;
     .           
24,156 ( 0.01%)          match kind {
     .                       Reservation(WriteKind::MutableBorrow(
     .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
     .                       ))
     .                       | Write(WriteKind::MutableBorrow(
     .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
     .                       )) => {
 1,460 ( 0.00%)                  let is_local_mutation_allowed = match borrow_kind {
     .                               BorrowKind::Unique => LocalMutationIsAllowed::Yes,
     .                               BorrowKind::Mut { .. } => is_local_mutation_allowed,
     .                               BorrowKind::Shared | BorrowKind::Shallow => unreachable!(),
     .                           };
 1,022 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
     .                               Ok(root_place) => {
     .                                   self.add_used_mut(root_place, flow_state);
     .                                   return false;
     .                               }
     .                               Err(place_err) => {
     .                                   error_access = AccessKind::MutableBorrow;
     .                                   the_place_err = place_err;
     .                               }
     .                           }
     .                       }
     .                       Reservation(WriteKind::Mutate) | Write(WriteKind::Mutate) => {
 2,373 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
     .                               Ok(root_place) => {
     .                                   self.add_used_mut(root_place, flow_state);
     .                                   return false;
     .                               }
     .                               Err(place_err) => {
     .                                   error_access = AccessKind::Mutate;
     .                                   the_place_err = place_err;
     .                               }
-- line 2033 ----------------------------------------
-- line 2041 ----------------------------------------
     .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
     .                       )
     .                       | Write(
     .                           WriteKind::Move
     .                           | WriteKind::StorageDeadOrDrop
     .                           | WriteKind::MutableBorrow(BorrowKind::Shared)
     .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
     .                       ) => {
 1,650 ( 0.00%)                  if let (Err(_), true) = (
 5,775 ( 0.00%)                      self.is_mutable(place.as_ref(), is_local_mutation_allowed),
     .                               self.errors_buffer.is_empty(),
     .                           ) {
     .                               // rust-lang/rust#46908: In pure NLL mode this code path should be
     .                               // unreachable, but we use `delay_span_bug` because we can hit this when
     .                               // dereferencing a non-Copy raw pointer *and* have `-Ztreat-err-as-bug`
     .                               // enabled. We don't want to ICE for that case, as other errors will have
     .                               // been emitted (#52262).
     .                               self.infcx.tcx.sess.delay_span_bug(
-- line 2058 ----------------------------------------
-- line 2094 ----------------------------------------
     .                   if previously_initialized {
     .                       self.report_mutability_error(place, span, the_place_err, error_access, location);
     .                       true
     .                   } else {
     .                       false
     .                   }
     .               }
     .           
 2,920 ( 0.00%)      fn is_local_ever_initialized(
     .                   &self,
     .                   local: Local,
     .                   flow_state: &Flows<'cx, 'tcx>,
     .               ) -> Option<InitIndex> {
 1,752 ( 0.00%)          let mpi = self.move_data.rev_lookup.find_local(local);
   584 ( 0.00%)          let ii = &self.move_data.init_path_map[mpi];
 2,374 ( 0.00%)          for &index in ii {
 1,244 ( 0.00%)              if flow_state.ever_inits.contains(index) {
     .                           return Some(index);
     .                       }
     .                   }
     .                   None
 2,336 ( 0.00%)      }
     .           
     .               /// Adds the place into the used mutable variables set
 1,940 ( 0.00%)      fn add_used_mut(&mut self, root_place: RootPlace<'tcx>, flow_state: &Flows<'cx, 'tcx>) {
     .                   match root_place {
 1,455 ( 0.00%)              RootPlace { place_local: local, place_projection: [], is_local_mutation_allowed } => {
     .                           // If the local may have been initialized, and it is now currently being
     .                           // mutated, then it is justified to be annotated with the `mut`
     .                           // keyword, since the mutation may be a possible reassignment.
   899 ( 0.00%)                  if is_local_mutation_allowed != LocalMutationIsAllowed::Yes
 1,242 ( 0.00%)                      && self.is_local_ever_initialized(local, flow_state).is_some()
     .                           {
     .                               self.used_mut.insert(local);
     .                           }
     .                       }
     .                       RootPlace {
     .                           place_local: _,
     .                           place_projection: _,
     .                           is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
-- line 2133 ----------------------------------------
-- line 2140 ----------------------------------------
     .                           if let Some(field) = self.is_upvar_field_projection(PlaceRef {
     .                               local: place_local,
     .                               projection: place_projection,
     .                           }) {
     .                               self.used_mut_upvars.push(field);
     .                           }
     .                       }
     .                   }
 1,608 ( 0.00%)      }
     .           
     .               /// Whether this value can be written or borrowed mutably.
     .               /// Returns the root place if the place passed in is a projection.
15,345 ( 0.01%)      fn is_mutable(
     .                   &self,
     .                   place: PlaceRef<'tcx>,
     .                   is_local_mutation_allowed: LocalMutationIsAllowed,
     .               ) -> Result<RootPlace<'tcx>, PlaceRef<'tcx>> {
     .                   debug!("is_mutable: place={:?}, is_local...={:?}", place, is_local_mutation_allowed);
 4,355 ( 0.00%)          match place.last_projection() {
     .                       None => {
 1,310 ( 0.00%)                  let local = &self.body.local_decls[place.local];
 3,930 ( 0.00%)                  match local.mutability {
   390 ( 0.00%)                      Mutability::Not => match is_local_mutation_allowed {
 1,170 ( 0.00%)                          LocalMutationIsAllowed::Yes => Ok(RootPlace {
     .                                       place_local: place.local,
     .                                       place_projection: place.projection,
     .                                       is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
     .                                   }),
     .                                   LocalMutationIsAllowed::ExceptUpvars => Ok(RootPlace {
     .                                       place_local: place.local,
     .                                       place_projection: place.projection,
     .                                       is_local_mutation_allowed: LocalMutationIsAllowed::ExceptUpvars,
     .                                   }),
     .                                   LocalMutationIsAllowed::No => Err(place),
     .                               },
 2,230 ( 0.00%)                      Mutability::Mut => Ok(RootPlace {
     .                                   place_local: place.local,
     .                                   place_projection: place.projection,
     .                                   is_local_mutation_allowed,
     .                               }),
     .                           }
     .                       }
     .                       Some((place_base, elem)) => {
   255 ( 0.00%)                  match elem {
     .                               ProjectionElem::Deref => {
   142 ( 0.00%)                          let base_ty = place_base.ty(self.body(), self.infcx.tcx).ty;
     .           
     .                                   // Check the kind of deref to decide
   426 ( 0.00%)                          match base_ty.kind() {
     .                                       ty::Ref(_, _, mutbl) => {
   142 ( 0.00%)                                  match mutbl {
     .                                               // Shared borrowed data is never mutable
     .                                               hir::Mutability::Not => Err(place),
     .                                               // Mutably borrowed data is mutable, but only if we have a
     .                                               // unique path to the `&mut`
     .                                               hir::Mutability::Mut => {
   142 ( 0.00%)                                          let mode = match self.is_upvar_field_projection(place) {
     .                                                       Some(field) if self.upvars[field.index()].by_ref => {
     .                                                           is_local_mutation_allowed
     .                                                       }
     .                                                       _ => LocalMutationIsAllowed::Yes,
     .                                                   };
     .           
   426 ( 0.00%)                                          self.is_mutable(place_base, mode)
     .                                               }
     .                                           }
     .                                       }
     .                                       ty::RawPtr(tnm) => {
     .                                           match tnm.mutbl {
     .                                               // `*const` raw pointers are not mutable
     .                                               hir::Mutability::Not => Err(place),
     .                                               // `*mut` raw pointers are always mutable, regardless of
-- line 2211 ----------------------------------------
-- line 2228 ----------------------------------------
     .                               // All other projections are owned by their base path, so mutable if
     .                               // base path is mutable
     .                               ProjectionElem::Field(..)
     .                               | ProjectionElem::Index(..)
     .                               | ProjectionElem::ConstantIndex { .. }
     .                               | ProjectionElem::Subslice { .. }
     .                               | ProjectionElem::Downcast(..) => {
     .                                   let upvar_field_projection = self.is_upvar_field_projection(place);
    28 ( 0.00%)                          if let Some(field) = upvar_field_projection {
     .                                       let upvar = &self.upvars[field.index()];
     .                                       debug!(
     .                                           "is_mutable: upvar.mutability={:?} local_mutation_is_allowed={:?} \
     .                                            place={:?}, place_base={:?}",
     .                                           upvar, is_local_mutation_allowed, place, place_base
     .                                       );
     .                                       match (upvar.place.mutability, is_local_mutation_allowed) {
     .                                           (
-- line 2244 ----------------------------------------
-- line 2285 ----------------------------------------
     .                                       }
     .                                   } else {
     .                                       self.is_mutable(place_base, is_local_mutation_allowed)
     .                                   }
     .                               }
     .                           }
     .                       }
     .                   }
11,160 ( 0.01%)      }
     .           
     .               /// If `place` is a field projection, and the field is being projected from a closure type,
     .               /// then returns the index of the field being projected. Note that this closure will always
     .               /// be `self` in the current MIR, because that is the only time we directly access the fields
     .               /// of a closure type.
     .               fn is_upvar_field_projection(&self, place_ref: PlaceRef<'tcx>) -> Option<Field> {
   765 ( 0.00%)          path_utils::is_upvar_field_projection(self.infcx.tcx, &self.upvars, place_ref, self.body())
     .               }
     .           }
     .           
     .           /// The degree of overlap between 2 places for borrow-checking.
     .           enum Overlap {
     .               /// The places might partially overlap - in this case, we give
     .               /// up and say that they might conflict. This occurs when
     .               /// different fields of a union are borrowed. For example,
-- line 2308 ----------------------------------------

44,243 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/table.rs
--------------------------------------------------------------------------------
Ir              

-- line 38 ----------------------------------------
     .               ($byte_len:expr) => {
     .                   const BYTE_LEN: usize = $byte_len;
     .                   fn maybe_read_from_bytes_at(b: &[u8], i: usize) -> Option<Self> {
     .                       const BYTE_LEN: usize = $byte_len;
     .                       // HACK(eddyb) ideally this would be done with fully safe code,
     .                       // but slicing `[u8]` with `i * N..` is optimized worse, due to the
     .                       // possibility of `i * N` overflowing, than indexing `[[u8; N]]`.
     .                       let b = unsafe {
26,704 ( 0.01%)                  std::slice::from_raw_parts(b.as_ptr() as *const [u8; BYTE_LEN], b.len() / BYTE_LEN)
     .                       };
     .                       b.get(i).map(|b| FixedSizeEncoding::from_bytes(b))
     .                   }
     .                   fn write_to_bytes_at(self, b: &mut [u8], i: usize) {
     .                       const BYTE_LEN: usize = $byte_len;
     .                       // HACK(eddyb) ideally this would be done with fully safe code,
     .                       // see similar comment in `read_from_bytes_at` for why it can't yet.
     .                       let b = unsafe {
     .                           std::slice::from_raw_parts_mut(
     .                               b.as_mut_ptr() as *mut [u8; BYTE_LEN],
    20 ( 0.00%)                      b.len() / BYTE_LEN,
     .                           )
     .                       };
    40 ( 0.00%)              self.write_to_bytes(&mut b[i]);
     .                   }
     .               };
     .           }
     .           
     .           impl FixedSizeEncoding for u32 {
     .               fixed_size_encoding_byte_len_and_defaults!(4);
     .           
     .               fn from_bytes(b: &[u8]) -> Self {
-- line 68 ----------------------------------------
-- line 78 ----------------------------------------
     .           
     .           // NOTE(eddyb) there could be an impl for `usize`, which would enable a more
     .           // generic `Lazy<T>` impl, but in the general case we might not need / want to
     .           // fit every `usize` in `u32`.
     .           impl<T> FixedSizeEncoding for Option<Lazy<T>> {
     .               fixed_size_encoding_byte_len_and_defaults!(u32::BYTE_LEN);
     .           
     .               fn from_bytes(b: &[u8]) -> Self {
 1,673 ( 0.00%)          Some(Lazy::from_position(NonZeroUsize::new(u32::from_bytes(b) as usize)?))
     .               }
     .           
     .               fn write_to_bytes(self, b: &mut [u8]) {
     .                   let position = self.map_or(0, |lazy| lazy.position.get());
     .                   let position: u32 = position.try_into().unwrap();
     .           
     .                   position.write_to_bytes(b)
     .               }
-- line 94 ----------------------------------------
-- line 143 ----------------------------------------
     .               _marker: PhantomData<(fn(&I), T)>,
     .           }
     .           
     .           impl<I: Idx, T> Default for TableBuilder<I, T>
     .           where
     .               Option<T>: FixedSizeEncoding,
     .           {
     .               fn default() -> Self {
     3 ( 0.00%)          TableBuilder { bytes: vec![], _marker: PhantomData }
     .               }
     .           }
     .           
     .           impl<I: Idx, T> TableBuilder<I, T>
     .           where
     .               Option<T>: FixedSizeEncoding,
     .           {
   140 ( 0.00%)      pub(crate) fn set(&mut self, i: I, value: T) {
     .                   // FIXME(eddyb) investigate more compact encodings for sparse tables.
     .                   // On the PR @michaelwoerister mentioned:
     .                   // > Space requirements could perhaps be optimized by using the HAMT `popcnt`
     .                   // > trick (i.e. divide things into buckets of 32 or 64 items and then
     .                   // > store bit-masks of which item in each bucket is actually serialized).
     .                   let i = i.index();
    23 ( 0.00%)          let needed = (i + 1) * <Option<T>>::BYTE_LEN;
    60 ( 0.00%)          if self.bytes.len() < needed {
     .                       self.bytes.resize(needed, 0);
     .                   }
     .           
     .                   Some(value).write_to_bytes_at(&mut self.bytes, i);
   121 ( 0.00%)      }
     .           
     .               pub(crate) fn encode(&self, buf: &mut Encoder) -> Lazy<Table<I, T>> {
     .                   let pos = buf.position();
     .                   buf.emit_raw_bytes(&self.bytes).unwrap();
     .                   Lazy::from_position_and_meta(NonZeroUsize::new(pos as usize).unwrap(), self.bytes.len())
     .               }
     .           }
     .           
-- line 180 ----------------------------------------
-- line 186 ----------------------------------------
     .           }
     .           
     .           impl<I: Idx, T> Lazy<Table<I, T>>
     .           where
     .               Option<T>: FixedSizeEncoding,
     .           {
     .               /// Given the metadata, extract out the value at a particular index (if any).
     .               #[inline(never)]
24,952 ( 0.01%)      pub(super) fn get<'a, 'tcx, M: Metadata<'a, 'tcx>>(&self, metadata: M, i: I) -> Option<T> {
     .                   debug!("Table::lookup: index={:?} len={:?}", i, self.meta);
     .           
49,904 ( 0.02%)          let start = self.position.get();
49,904 ( 0.02%)          let bytes = &metadata.blob()[start..start + self.meta];
     .                   <Option<T>>::maybe_read_from_bytes_at(bytes, i.index())?
49,904 ( 0.02%)      }
     .           
     .               /// Size of the table in entries, including possible gaps.
     .               pub(super) fn size(&self) -> usize {
     .                   self.meta / <Option<T>>::BYTE_LEN
     .               }
     .           }

50,092 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/table.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs
--------------------------------------------------------------------------------
Ir               

-- line 40 ----------------------------------------
      .           
      .           impl<BorrowType: marker::BorrowType, K, V> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {
      .               /// Looks up a given key in a (sub)tree headed by the node, recursively.
      .               /// Returns a `Found` with the handle of the matching KV, if any. Otherwise,
      .               /// returns a `GoDown` with the handle of the leaf edge where the key belongs.
      .               ///
      .               /// The result is meaningful only if the tree is ordered by key, like the tree
      .               /// in a `BTreeMap` is.
 36,537 ( 0.02%)      pub fn search_tree<Q: ?Sized>(
      .                   mut self,
      .                   key: &Q,
      .               ) -> SearchResult<BorrowType, K, V, marker::LeafOrInternal, marker::Leaf>
      .               where
      .                   Q: Ord,
      .                   K: Borrow<Q>,
      .               {
      .                   loop {
      .                       self = match self.search_node(key) {
      .                           Found(handle) => return Found(handle),
  3,426 ( 0.00%)                  GoDown(handle) => match handle.force() {
      .                               Leaf(leaf) => return GoDown(leaf),
      .                               Internal(internal) => internal.descend(),
      .                           },
      .                       }
      .                   }
 19,288 ( 0.01%)      }
      .           
      .               /// Descends to the nearest node where the edge matching the lower bound
      .               /// of the range is different from the edge matching the upper bound, i.e.,
      .               /// the nearest node that has at least one key contained in the range.
      .               ///
      .               /// If found, returns an `Ok` with that node, the strictly ascending pair of
      .               /// edge indices in the node delimiting the range, and the corresponding
      .               /// pair of bounds for continuing the search in the child nodes, in case
-- line 73 ----------------------------------------
-- line 202 ----------------------------------------
      .               unsafe fn find_key_index<Q: ?Sized>(&self, key: &Q, start_index: usize) -> IndexResult
      .               where
      .                   Q: Ord,
      .                   K: Borrow<Q>,
      .               {
      .                   let node = self.reborrow();
      .                   let keys = node.keys();
      .                   debug_assert!(start_index <= keys.len());
 37,135 ( 0.02%)          for (offset, k) in unsafe { keys.get_unchecked(start_index..) }.iter().enumerate() {
133,139 ( 0.06%)              match key.cmp(k.borrow()) {
      .                           Ordering::Greater => {}
      .                           Ordering::Equal => return IndexResult::KV(start_index + offset),
      .                           Ordering::Less => return IndexResult::Edge(start_index + offset),
      .                       }
      .                   }
      .                   IndexResult::Edge(keys.len())
      .               }
      .           
-- line 219 ----------------------------------------

 63,398 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/hygiene.rs
--------------------------------------------------------------------------------
Ir               

-- line 40 ----------------------------------------
      .           use rustc_macros::HashStable_Generic;
      .           use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};
      .           use std::fmt;
      .           use std::hash::Hash;
      .           use tracing::*;
      .           
      .           /// A `SyntaxContext` represents a chain of pairs `(ExpnId, Transparency)` named "marks".
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
 47,671 ( 0.02%)  pub struct SyntaxContext(u32);
      .           
 13,999 ( 0.01%)  #[derive(Debug, Encodable, Decodable, Clone)]
      .           pub struct SyntaxContextData {
      1 ( 0.00%)      outer_expn: ExpnId,
      3 ( 0.00%)      outer_transparency: Transparency,
      .               parent: SyntaxContext,
      .               /// This context, but with all transparent and semi-transparent expansions filtered away.
      .               opaque: SyntaxContext,
      .               /// This context, but with all transparent expansions filtered away.
      .               opaque_and_semitransparent: SyntaxContext,
      .               /// Name of the crate to which `$crate` with this context would resolve.
      .               dollar_crate_name: Symbol,
      .           }
-- line 61 ----------------------------------------
-- line 65 ----------------------------------------
      .               pub struct ExpnIndex {
      .                   ENCODABLE = custom
      .               }
      .           }
      .           
      .           /// A unique ID associated with a macro invocation and expansion.
      .           #[derive(Clone, Copy, PartialEq, Eq, Hash)]
      .           pub struct ExpnId {
  2,676 ( 0.00%)      pub krate: CrateNum,
 21,696 ( 0.01%)      pub local_id: ExpnIndex,
      .           }
      .           
      .           impl fmt::Debug for ExpnId {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   // Generate crate_::{{expn_}}.
      .                   write!(f, "{:?}::{{{{expn{}}}}}", self.krate, self.local_id.private)
      .               }
      .           }
-- line 82 ----------------------------------------
-- line 106 ----------------------------------------
      .                   // or ensure that this method is always invoked with the same
      .                   // `NodeIdHashingMode`
      .                   //
      .                   // Note that we require that `hash_spans` be set according to the global
      .                   // `-Z incremental-ignore-spans` option. Normally, this option is disabled,
      .                   // which will cause us to require that this method always be called with `Span` hashing
      .                   // enabled.
      .                   HashingControls { hash_spans, node_id_hashing_mode: _ }
  7,232 ( 0.00%)              if hash_spans == !ctx.debug_opts_incremental_ignore_spans() => {}
      .                   other => panic!("Attempted hashing of {msg} with non-default HashingControls: {:?}", other),
      .               }
      .           }
      .           
      .           /// A unique hash value associated to an expansion.
      .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, Encodable, Decodable, HashStable_Generic)]
  1,788 ( 0.00%)  pub struct ExpnHash(Fingerprint);
      .           
      .           impl ExpnHash {
      .               /// Returns the [StableCrateId] identifying the crate this [ExpnHash]
      .               /// originates from.
      .               #[inline]
      .               pub fn stable_crate_id(self) -> StableCrateId {
      .                   StableCrateId(self.0.as_value().0)
      .               }
-- line 129 ----------------------------------------
-- line 138 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn is_root(self) -> bool {
      .                   self.0 == Fingerprint::ZERO
      .               }
      .           
      .               /// Builds a new [ExpnHash] with the given [StableCrateId] and
      .               /// `local_hash`, where `local_hash` must be unique within its crate.
    898 ( 0.00%)      fn new(stable_crate_id: StableCrateId, local_hash: u64) -> ExpnHash {
      .                   ExpnHash(Fingerprint::new(stable_crate_id.0, local_hash))
    449 ( 0.00%)      }
      .           }
      .           
      .           /// A property of a macro expansion that determines how identifiers
      .           /// produced by that expansion are resolved.
113,801 ( 0.05%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Hash, Debug, Encodable, Decodable)]
      .           #[derive(HashStable_Generic)]
      .           pub enum Transparency {
      .               /// Identifier produced by a transparent expansion is always resolved at call-site.
      .               /// Call-site spans in procedural macros, hygiene opt-out in `macro` should use this.
      .               Transparent,
      .               /// Identifier produced by a semi-transparent expansion may be resolved
      .               /// either at call-site or at definition-site.
      .               /// If it's a local variable, label or `$crate` then it's resolved at def-site.
-- line 161 ----------------------------------------
-- line 169 ----------------------------------------
      .           }
      .           
      .           impl LocalExpnId {
      .               /// The ID of the theoretical expansion that generates freshly parsed, unexpanded AST.
      .               pub const ROOT: LocalExpnId = LocalExpnId::from_u32(0);
      .           
      .               pub fn from_raw(idx: ExpnIndex) -> LocalExpnId {
      .                   LocalExpnId::from_u32(idx.as_u32())
  6,348 ( 0.00%)      }
      .           
      .               pub fn as_raw(self) -> ExpnIndex {
      .                   ExpnIndex::from_u32(self.as_u32())
 15,206 ( 0.01%)      }
      .           
      .               pub fn fresh_empty() -> LocalExpnId {
      .                   HygieneData::with(|data| {
      .                       let expn_id = data.local_expn_data.push(None);
      .                       let _eid = data.local_expn_hashes.push(ExpnHash(Fingerprint::ZERO));
      .                       debug_assert_eq!(expn_id, _eid);
      .                       expn_id
      .                   })
      .               }
      .           
      .               pub fn fresh(mut expn_data: ExpnData, ctx: impl HashStableContext) -> LocalExpnId {
      .                   debug_assert_eq!(expn_data.parent.krate, LOCAL_CRATE);
     65 ( 0.00%)          let expn_hash = update_disambiguator(&mut expn_data, ctx);
      .                   HygieneData::with(|data| {
     70 ( 0.00%)              let expn_id = data.local_expn_data.push(Some(expn_data));
      .                       let _eid = data.local_expn_hashes.push(expn_hash);
      .                       debug_assert_eq!(expn_id, _eid);
     14 ( 0.00%)              let _old_id = data.expn_hash_to_expn_id.insert(expn_hash, expn_id.to_expn_id());
      .                       debug_assert!(_old_id.is_none());
      .                       expn_id
      .                   })
      .               }
      .           
      .               #[inline]
      .               pub fn expn_hash(self) -> ExpnHash {
      .                   HygieneData::with(|data| data.local_expn_hash(self))
      .               }
      .           
      .               #[inline]
      .               pub fn expn_data(self) -> ExpnData {
     46 ( 0.00%)          HygieneData::with(|data| data.local_expn_data(self).clone())
      .               }
      .           
      .               #[inline]
      .               pub fn to_expn_id(self) -> ExpnId {
 14,764 ( 0.01%)          ExpnId { krate: LOCAL_CRATE, local_id: self.as_raw() }
      .               }
      .           
      .               #[inline]
      .               pub fn set_expn_data(self, mut expn_data: ExpnData, ctx: impl HashStableContext) {
      .                   debug_assert_eq!(expn_data.parent.krate, LOCAL_CRATE);
  7,072 ( 0.00%)          let expn_hash = update_disambiguator(&mut expn_data, ctx);
      .                   HygieneData::with(|data| {
    884 ( 0.00%)              let old_expn_data = &mut data.local_expn_data[self];
    884 ( 0.00%)              assert!(old_expn_data.is_none(), "expansion data is reset for an expansion ID");
  4,420 ( 0.00%)              *old_expn_data = Some(expn_data);
      .                       debug_assert_eq!(data.local_expn_hashes[self].0, Fingerprint::ZERO);
  1,768 ( 0.00%)              data.local_expn_hashes[self] = expn_hash;
  1,326 ( 0.00%)              let _old_id = data.expn_hash_to_expn_id.insert(expn_hash, self.to_expn_id());
      .                       debug_assert!(_old_id.is_none());
      .                   });
      .               }
      .           
      .               #[inline]
      .               pub fn is_descendant_of(self, ancestor: LocalExpnId) -> bool {
      .                   self.to_expn_id().is_descendant_of(ancestor.to_expn_id())
      .               }
-- line 238 ----------------------------------------
-- line 259 ----------------------------------------
      .               }
      .           }
      .           
      .           impl ExpnId {
      .               /// The ID of the theoretical expansion that generates freshly parsed, unexpanded AST.
      .               /// Invariant: we do not create any ExpnId with local_id == 0 and krate != 0.
      .               pub const fn root() -> ExpnId {
      .                   ExpnId { krate: LOCAL_CRATE, local_id: ExpnIndex::from_u32(0) }
 13,590 ( 0.01%)      }
      .           
      .               #[inline]
      .               pub fn expn_hash(self) -> ExpnHash {
      .                   HygieneData::with(|data| data.expn_hash(self))
      .               }
      .           
      .               #[inline]
      .               pub fn from_hash(hash: ExpnHash) -> Option<ExpnId> {
      .                   HygieneData::with(|data| data.expn_hash_to_expn_id.get(&hash).copied())
      .               }
      .           
      .               #[inline]
      .               pub fn as_local(self) -> Option<LocalExpnId> {
  8,128 ( 0.00%)          if self.krate == LOCAL_CRATE { Some(LocalExpnId::from_raw(self.local_id)) } else { None }
      .               }
      .           
      .               #[inline]
      .               #[track_caller]
      .               pub fn expect_local(self) -> LocalExpnId {
      .                   self.as_local().unwrap()
      .               }
      .           
      .               #[inline]
      .               pub fn expn_data(self) -> ExpnData {
  1,304 ( 0.00%)          HygieneData::with(|data| data.expn_data(self).clone())
      .               }
      .           
      .               #[inline]
      .               pub fn is_descendant_of(self, ancestor: ExpnId) -> bool {
      .                   // a few "fast path" cases to avoid locking HygieneData
      .                   if ancestor == ExpnId::root() || ancestor == self {
      .                       return true;
      .                   }
-- line 300 ----------------------------------------
-- line 301 ----------------------------------------
      .                   if ancestor.krate != self.krate {
      .                       return false;
      .                   }
      .                   HygieneData::with(|data| data.is_descendant_of(self, ancestor))
      .               }
      .           
      .               /// `expn_id.outer_expn_is_descendant_of(ctxt)` is equivalent to but faster than
      .               /// `expn_id.is_descendant_of(ctxt.outer_expn())`.
  1,520 ( 0.00%)      pub fn outer_expn_is_descendant_of(self, ctxt: SyntaxContext) -> bool {
      .                   HygieneData::with(|data| data.is_descendant_of(self, data.outer_expn(ctxt)))
    760 ( 0.00%)      }
      .           
      .               /// Returns span for the macro which originally caused this expansion to happen.
      .               ///
      .               /// Stops backtracing at include! boundary.
      .               pub fn expansion_cause(mut self) -> Option<Span> {
      .                   let mut last_macro = None;
      .                   loop {
      .                       let expn_data = self.expn_data();
-- line 319 ----------------------------------------
-- line 348 ----------------------------------------
      .               /// This is used by `update_disambiguator` to keep track of which `ExpnData`s
      .               /// would have collisions without a disambiguator.
      .               /// The keys of this map are always computed with `ExpnData.disambiguator`
      .               /// set to 0.
      .               expn_data_disambiguators: FxHashMap<u64, u32>,
      .           }
      .           
      .           impl HygieneData {
     10 ( 0.00%)      crate fn new(edition: Edition) -> Self {
      .                   let root_data = ExpnData::default(
      .                       ExpnKind::Root,
      .                       DUMMY_SP,
      .                       edition,
      .                       Some(CRATE_DEF_ID.to_def_id()),
      .                       None,
      .                   );
      .           
     50 ( 0.00%)          HygieneData {
      .                       local_expn_data: IndexVec::from_elem_n(Some(root_data), 1),
      .                       local_expn_hashes: IndexVec::from_elem_n(ExpnHash(Fingerprint::ZERO), 1),
      .                       foreign_expn_data: FxHashMap::default(),
      .                       foreign_expn_hashes: FxHashMap::default(),
      .                       expn_hash_to_expn_id: std::iter::once((ExpnHash(Fingerprint::ZERO), ExpnId::root()))
      .                           .collect(),
      8 ( 0.00%)              syntax_context_data: vec![SyntaxContextData {
      .                           outer_expn: ExpnId::root(),
      .                           outer_transparency: Transparency::Opaque,
      .                           parent: SyntaxContext(0),
      .                           opaque: SyntaxContext(0),
      .                           opaque_and_semitransparent: SyntaxContext(0),
      .                           dollar_crate_name: kw::DollarCrate,
      .                       }],
      .                       syntax_context_map: FxHashMap::default(),
      .                       expn_data_disambiguators: FxHashMap::default(),
      .                   }
     10 ( 0.00%)      }
      .           
     34 ( 0.00%)      pub fn with<T, F: FnOnce(&mut HygieneData) -> T>(f: F) -> T {
 42,217 ( 0.02%)          with_session_globals(|session_globals| f(&mut *session_globals.hygiene_data.borrow_mut()))
     36 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn local_expn_hash(&self, expn_id: LocalExpnId) -> ExpnHash {
      .                   self.local_expn_hashes[expn_id]
      .               }
      .           
      .               #[inline]
      .               fn expn_hash(&self, expn_id: ExpnId) -> ExpnHash {
      .                   match expn_id.as_local() {
      .                       Some(expn_id) => self.local_expn_hashes[expn_id],
      .                       None => self.foreign_expn_hashes[&expn_id],
      .                   }
      .               }
      .           
     84 ( 0.00%)      fn local_expn_data(&self, expn_id: LocalExpnId) -> &ExpnData {
      .                   self.local_expn_data[expn_id].as_ref().expect("no expansion data for an expansion ID")
     84 ( 0.00%)      }
      .           
  9,544 ( 0.00%)      fn expn_data(&self, expn_id: ExpnId) -> &ExpnData {
 28,632 ( 0.01%)          if let Some(expn_id) = expn_id.as_local() {
      .                       self.local_expn_data[expn_id].as_ref().expect("no expansion data for an expansion ID")
      .                   } else {
      .                       &self.foreign_expn_data[&expn_id]
      .                   }
 19,088 ( 0.01%)      }
      .           
      .               fn is_descendant_of(&self, mut expn_id: ExpnId, ancestor: ExpnId) -> bool {
      .                   // a couple "fast path" cases to avoid traversing parents in the loop below
  2,068 ( 0.00%)          if ancestor == ExpnId::root() {
      .                       return true;
      .                   }
     22 ( 0.00%)          if expn_id.krate != ancestor.krate {
      .                       return false;
      .                   }
      .                   loop {
     21 ( 0.00%)              if expn_id == ancestor {
      .                           return true;
      .                       }
     21 ( 0.00%)              if expn_id == ExpnId::root() {
      .                           return false;
      .                       }
      .                       expn_id = self.expn_data(expn_id).parent;
      .                   }
      9 ( 0.00%)      }
      .           
  1,050 ( 0.00%)      fn normalize_to_macros_2_0(&self, ctxt: SyntaxContext) -> SyntaxContext {
 53,857 ( 0.02%)          self.syntax_context_data[ctxt.0 as usize].opaque
  1,050 ( 0.00%)      }
      .           
  3,044 ( 0.00%)      fn normalize_to_macro_rules(&self, ctxt: SyntaxContext) -> SyntaxContext {
 32,630 ( 0.02%)          self.syntax_context_data[ctxt.0 as usize].opaque_and_semitransparent
  3,044 ( 0.00%)      }
      .           
  1,666 ( 0.00%)      fn outer_expn(&self, ctxt: SyntaxContext) -> ExpnId {
 20,123 ( 0.01%)          self.syntax_context_data[ctxt.0 as usize].outer_expn
  1,666 ( 0.00%)      }
      .           
  4,986 ( 0.00%)      fn outer_mark(&self, ctxt: SyntaxContext) -> (ExpnId, Transparency) {
  3,773 ( 0.00%)          let data = &self.syntax_context_data[ctxt.0 as usize];
 15,173 ( 0.01%)          (data.outer_expn, data.outer_transparency)
  8,759 ( 0.00%)      }
      .           
      .               fn parent_ctxt(&self, ctxt: SyntaxContext) -> SyntaxContext {
  1,315 ( 0.00%)          self.syntax_context_data[ctxt.0 as usize].parent
      .               }
      .           
      .               fn remove_mark(&self, ctxt: &mut SyntaxContext) -> (ExpnId, Transparency) {
      9 ( 0.00%)          let outer_mark = self.outer_mark(*ctxt);
     48 ( 0.00%)          *ctxt = self.parent_ctxt(*ctxt);
      .                   outer_mark
      .               }
      .           
 10,304 ( 0.00%)      fn marks(&self, mut ctxt: SyntaxContext) -> Vec<(ExpnId, Transparency)> {
      .                   let mut marks = Vec::new();
  2,568 ( 0.00%)          while ctxt != SyntaxContext::root() {
      .                       debug!("marks: getting parent of {:?}", ctxt);
      .                       marks.push(self.outer_mark(ctxt));
      .                       ctxt = self.parent_ctxt(ctxt);
      .                   }
      .                   marks.reverse();
      .                   marks
 11,592 ( 0.01%)      }
      .           
      .               fn walk_chain(&self, mut span: Span, to: SyntaxContext) -> Span {
      .                   debug!("walk_chain({:?}, {:?})", span, to);
      .                   debug!("walk_chain: span ctxt = {:?}", span.ctxt());
      .                   while span.from_expansion() && span.ctxt() != to {
      .                       let outer_expn = self.outer_expn(span.ctxt());
      .                       debug!("walk_chain({:?}): outer_expn={:?}", span, outer_expn);
      .                       let expn_data = self.expn_data(outer_expn);
      .                       debug!("walk_chain({:?}): expn_data={:?}", span, expn_data);
      .                       span = expn_data.call_site;
      .                   }
      .                   span
      .               }
      .           
 16,100 ( 0.01%)      fn adjust(&self, ctxt: &mut SyntaxContext, expn_id: ExpnId) -> Option<ExpnId> {
      .                   let mut scope = None;
  4,830 ( 0.00%)          while !self.is_descendant_of(expn_id, self.outer_expn(*ctxt)) {
      .                       scope = Some(self.remove_mark(ctxt).0);
      .                   }
      .                   scope
 16,100 ( 0.01%)      }
      .           
 59,895 ( 0.03%)      fn apply_mark(
      .                   &mut self,
      .                   ctxt: SyntaxContext,
      .                   expn_id: ExpnId,
      .                   transparency: Transparency,
      .               ) -> SyntaxContext {
 13,310 ( 0.01%)          assert_ne!(expn_id, ExpnId::root());
  6,655 ( 0.00%)          if transparency == Transparency::Opaque {
    312 ( 0.00%)              return self.apply_mark_internal(ctxt, expn_id, transparency);
      .                   }
      .           
 46,221 ( 0.02%)          let call_site_ctxt = self.expn_data(expn_id).call_site.ctxt();
  6,603 ( 0.00%)          let mut call_site_ctxt = if transparency == Transparency::SemiTransparent {
      .                       self.normalize_to_macros_2_0(call_site_ctxt)
      .                   } else {
      .                       self.normalize_to_macro_rules(call_site_ctxt)
      .                   };
      .           
  6,603 ( 0.00%)          if call_site_ctxt == SyntaxContext::root() {
 19,797 ( 0.01%)              return self.apply_mark_internal(ctxt, expn_id, transparency);
      .                   }
      .           
      .                   // Otherwise, `expn_id` is a macros 1.0 definition and the call site is in a
      .                   // macros 2.0 expansion, i.e., a macros 1.0 invocation is in a macros 2.0 definition.
      .                   //
      .                   // In this case, the tokens from the macros 1.0 definition inherit the hygiene
      .                   // at their invocation. That is, we pretend that the macros 1.0 definition
      .                   // was defined at its invocation (i.e., inside the macros 2.0 definition)
      .                   // so that the macros 2.0 definition remains hygienic.
      .                   //
      .                   // See the example at `test/ui/hygiene/legacy_interaction.rs`.
     36 ( 0.00%)          for (expn_id, transparency) in self.marks(ctxt) {
      .                       call_site_ctxt = self.apply_mark_internal(call_site_ctxt, expn_id, transparency);
      .                   }
     16 ( 0.00%)          self.apply_mark_internal(call_site_ctxt, expn_id, transparency)
      .               }
      .           
 53,240 ( 0.02%)      fn apply_mark_internal(
      .                   &mut self,
      .                   ctxt: SyntaxContext,
      .                   expn_id: ExpnId,
      .                   transparency: Transparency,
      .               ) -> SyntaxContext {
      .                   let syntax_context_data = &mut self.syntax_context_data;
 39,930 ( 0.02%)          let mut opaque = syntax_context_data[ctxt.0 as usize].opaque;
      .                   let mut opaque_and_semitransparent =
  6,655 ( 0.00%)              syntax_context_data[ctxt.0 as usize].opaque_and_semitransparent;
      .           
  6,655 ( 0.00%)          if transparency >= Transparency::Opaque {
      .                       let parent = opaque;
    520 ( 0.00%)              opaque = *self
      .                           .syntax_context_map
      .                           .entry((parent, expn_id, transparency))
      .                           .or_insert_with(|| {
     24 ( 0.00%)                      let new_opaque = SyntaxContext(syntax_context_data.len() as u32);
      .                               syntax_context_data.push(SyntaxContextData {
      .                                   outer_expn: expn_id,
      .                                   outer_transparency: transparency,
      .                                   parent,
      .                                   opaque: new_opaque,
      .                                   opaque_and_semitransparent: new_opaque,
      .                                   dollar_crate_name: kw::DollarCrate,
      .                               });
      .                               new_opaque
      .                           });
      .                   }
      .           
  6,611 ( 0.00%)          if transparency >= Transparency::SemiTransparent {
      .                       let parent = opaque_and_semitransparent;
 19,941 ( 0.01%)              opaque_and_semitransparent = *self
      .                           .syntax_context_map
      .                           .entry((parent, expn_id, transparency))
      .                           .or_insert_with(|| {
      .                               let new_opaque_and_semitransparent =
    246 ( 0.00%)                          SyntaxContext(syntax_context_data.len() as u32);
      .                               syntax_context_data.push(SyntaxContextData {
      .                                   outer_expn: expn_id,
      .                                   outer_transparency: transparency,
      .                                   parent,
      .                                   opaque,
      .                                   opaque_and_semitransparent: new_opaque_and_semitransparent,
      .                                   dollar_crate_name: kw::DollarCrate,
      .                               });
      .                               new_opaque_and_semitransparent
      .                           });
      .                   }
      .           
      .                   let parent = ctxt;
 13,310 ( 0.01%)          *self.syntax_context_map.entry((parent, expn_id, transparency)).or_insert_with(|| {
      .                       let new_opaque_and_semitransparent_and_transparent =
     16 ( 0.00%)                  SyntaxContext(syntax_context_data.len() as u32);
      .                       syntax_context_data.push(SyntaxContextData {
      .                           outer_expn: expn_id,
      .                           outer_transparency: transparency,
      .                           parent,
      .                           opaque,
      .                           opaque_and_semitransparent,
      .                           dollar_crate_name: kw::DollarCrate,
      .                       });
      .                       new_opaque_and_semitransparent_and_transparent
      .                   })
 53,240 ( 0.02%)      }
      .           }
      .           
      .           pub fn clear_syntax_context_map() {
      5 ( 0.00%)      HygieneData::with(|data| data.syntax_context_map = FxHashMap::default());
      .           }
      .           
      .           pub fn walk_chain(span: Span, to: SyntaxContext) -> Span {
      .               HygieneData::with(|data| data.walk_chain(span, to))
      .           }
      .           
  2,676 ( 0.00%)  pub fn update_dollar_crate_names(mut get_name: impl FnMut(SyntaxContext) -> Symbol) {
      .               // The new contexts that need updating are at the end of the list and have `$crate` as a name.
      .               let (len, to_update) = HygieneData::with(|data| {
      .                   (
    446 ( 0.00%)              data.syntax_context_data.len(),
      .                       data.syntax_context_data
      .                           .iter()
      .                           .rev()
      .                           .take_while(|scdata| scdata.dollar_crate_name == kw::DollarCrate)
      .                           .count(),
      .                   )
      .               });
      .               // The callback must be called from outside of the `HygieneData` lock,
      .               // since it will try to acquire it too.
  1,338 ( 0.00%)      let range_to_update = len - to_update..len;
      .               let names: Vec<_> =
      .                   range_to_update.clone().map(|idx| get_name(SyntaxContext::from_u32(idx as u32))).collect();
      .               HygieneData::with(|data| {
    892 ( 0.00%)          range_to_update.zip(names).for_each(|(idx, name)| {
    319 ( 0.00%)              data.syntax_context_data[idx].dollar_crate_name = name;
      .                   })
      .               })
  2,676 ( 0.00%)  }
      .           
      .           pub fn debug_hygiene_data(verbose: bool) -> String {
      .               HygieneData::with(|data| {
      .                   if verbose {
      .                       format!("{:#?}", data)
      .                   } else {
      .                       let mut s = String::from("");
      .                       s.push_str("Expansions:");
-- line 634 ----------------------------------------
-- line 674 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               crate fn from_u32(raw: u32) -> SyntaxContext {
      .                   SyntaxContext(raw)
      .               }
      .           
      .               /// Extend a syntax context with a given expansion and transparency.
 39,570 ( 0.02%)      crate fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> SyntaxContext {
 13,300 ( 0.01%)          HygieneData::with(|data| data.apply_mark(self, expn_id, transparency))
 13,190 ( 0.01%)      }
      .           
      .               /// Pulls a single mark off of the syntax context. This effectively moves the
      .               /// context up one macro definition level. That is, if we have a nested macro
      .               /// definition as follows:
      .               ///
      .               /// ```rust
      .               /// macro_rules! f {
      .               ///    macro_rules! g {
-- line 692 ----------------------------------------
-- line 694 ----------------------------------------
      .               ///    }
      .               /// }
      .               /// ```
      .               ///
      .               /// and we have a SyntaxContext that is referring to something declared by an invocation
      .               /// of g (call it g1), calling remove_mark will result in the SyntaxContext for the
      .               /// invocation of f that created g1.
      .               /// Returns the mark that was removed.
      9 ( 0.00%)      pub fn remove_mark(&mut self) -> ExpnId {
      .                   HygieneData::with(|data| data.remove_mark(self).0)
      .               }
      .           
  5,136 ( 0.00%)      pub fn marks(self) -> Vec<(ExpnId, Transparency)> {
  2,568 ( 0.00%)          HygieneData::with(|data| data.marks(self))
  5,136 ( 0.00%)      }
      .           
      .               /// Adjust this context for resolution in a scope created by the given expansion.
      .               /// For example, consider the following three resolutions of `f`:
      .               ///
      .               /// ```rust
      .               /// mod foo { pub fn f() {} } // `f`'s `SyntaxContext` is empty.
      .               /// m!(f);
      .               /// macro m($f:ident) {
-- line 716 ----------------------------------------
-- line 726 ----------------------------------------
      .               ///     //| and it resolves to `::bar::f`.
      .               ///     bar::$f(); // `f`'s `SyntaxContext` is empty.
      .               ///     //^ Since `mod bar` is not outside this expansion, `adjust` does not change `$f`,
      .               ///     //| and it resolves to `::bar::$f`.
      .               /// }
      .               /// ```
      .               /// This returns the expansion whose definition scope we use to privacy check the resolution,
      .               /// or `None` if we privacy check as usual (i.e., not w.r.t. a macro definition scope).
    904 ( 0.00%)      pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
    452 ( 0.00%)          HygieneData::with(|data| data.adjust(self, expn_id))
    452 ( 0.00%)      }
      .           
      .               /// Like `SyntaxContext::adjust`, but also normalizes `self` to macros 2.0.
  4,992 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
      .                   HygieneData::with(|data| {
  2,496 ( 0.00%)              *self = data.normalize_to_macros_2_0(*self);
  3,744 ( 0.00%)              data.adjust(self, expn_id)
      .                   })
  2,496 ( 0.00%)      }
      .           
      .               /// Adjust this context for resolution in a scope created by the given expansion
      .               /// via a glob import with the given `SyntaxContext`.
      .               /// For example:
      .               ///
      .               /// ```rust
      .               /// m!(f);
      .               /// macro m($i:ident) {
-- line 752 ----------------------------------------
-- line 787 ----------------------------------------
      .           
      .               /// Undo `glob_adjust` if possible:
      .               ///
      .               /// ```rust
      .               /// if let Some(privacy_checking_scope) = self.reverse_glob_adjust(expansion, glob_ctxt) {
      .               ///     assert!(self.glob_adjust(expansion, glob_ctxt) == Some(privacy_checking_scope));
      .               /// }
      .               /// ```
    260 ( 0.00%)      pub fn reverse_glob_adjust(
      .                   &mut self,
      .                   expn_id: ExpnId,
      .                   glob_span: Span,
      .               ) -> Option<Option<ExpnId>> {
      .                   HygieneData::with(|data| {
    455 ( 0.00%)              if data.adjust(self, expn_id).is_some() {
      .                           return None;
      .                       }
      .           
    195 ( 0.00%)              let mut glob_ctxt = data.normalize_to_macros_2_0(glob_span.ctxt());
      .                       let mut marks = Vec::new();
      .                       while !data.is_descendant_of(expn_id, data.outer_expn(glob_ctxt)) {
      .                           marks.push(data.remove_mark(&mut glob_ctxt));
      .                       }
      .           
      .                       let scope = marks.last().map(|mark| mark.0);
      .                       while let Some((expn_id, transparency)) = marks.pop() {
      .                           *self = data.apply_mark(*self, expn_id, transparency);
      .                       }
      .                       Some(scope)
      .                   })
    130 ( 0.00%)      }
      .           
    426 ( 0.00%)      pub fn hygienic_eq(self, other: SyntaxContext, expn_id: ExpnId) -> bool {
      .                   HygieneData::with(|data| {
     71 ( 0.00%)              let mut self_normalized = data.normalize_to_macros_2_0(self);
    355 ( 0.00%)              data.adjust(&mut self_normalized, expn_id);
     71 ( 0.00%)              self_normalized == data.normalize_to_macros_2_0(other)
      .                   })
    142 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn normalize_to_macros_2_0(self) -> SyntaxContext {
    525 ( 0.00%)          HygieneData::with(|data| data.normalize_to_macros_2_0(self))
      .               }
      .           
      .               #[inline]
      .               pub fn normalize_to_macro_rules(self) -> SyntaxContext {
  1,522 ( 0.00%)          HygieneData::with(|data| data.normalize_to_macro_rules(self))
      .               }
      .           
      .               #[inline]
      .               pub fn outer_expn(self) -> ExpnId {
      .                   HygieneData::with(|data| data.outer_expn(self))
      .               }
      .           
      .               /// `ctxt.outer_expn_data()` is equivalent to but faster than
      .               /// `ctxt.outer_expn().expn_data()`.
      .               #[inline]
      .               pub fn outer_expn_data(self) -> ExpnData {
  4,679 ( 0.00%)          HygieneData::with(|data| data.expn_data(data.outer_expn(self)).clone())
      .               }
      .           
      .               #[inline]
      .               pub fn outer_mark(self) -> (ExpnId, Transparency) {
  4,249 ( 0.00%)          HygieneData::with(|data| data.outer_mark(self))
      .               }
      .           
      .               pub fn dollar_crate_name(self) -> Symbol {
      .                   HygieneData::with(|data| data.syntax_context_data[self.0 as usize].dollar_crate_name)
      .               }
      .           
    502 ( 0.00%)      pub fn edition(self) -> Edition {
  1,644 ( 0.00%)          HygieneData::with(|data| data.expn_data(data.outer_expn(self)).edition)
    502 ( 0.00%)      }
      .           }
      .           
      .           impl fmt::Debug for SyntaxContext {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   write!(f, "#{}", self.0)
      .               }
      .           }
      .           
-- line 868 ----------------------------------------
-- line 877 ----------------------------------------
      .               }
      .           
      .               pub fn fresh_expansion_with_transparency(
      .                   self,
      .                   expn_data: ExpnData,
      .                   transparency: Transparency,
      .                   ctx: impl HashStableContext,
      .               ) -> Span {
     80 ( 0.00%)          let expn_id = LocalExpnId::fresh(expn_data, ctx).to_expn_id();
      .                   HygieneData::with(|data| {
     30 ( 0.00%)              self.with_ctxt(data.apply_mark(SyntaxContext::root(), expn_id, transparency))
      .                   })
      .               }
      .           
      .               /// Reuses the span but adds information like the kind of the desugaring and features that are
      .               /// allowed inside this span.
     55 ( 0.00%)      pub fn mark_with_reason(
      .                   self,
      .                   allow_internal_unstable: Option<Lrc<[Symbol]>>,
      .                   reason: DesugaringKind,
      .                   edition: Edition,
      .                   ctx: impl HashStableContext,
      .               ) -> Span {
     80 ( 0.00%)          let expn_data = ExpnData {
     10 ( 0.00%)              allow_internal_unstable,
     45 ( 0.00%)              ..ExpnData::default(ExpnKind::Desugaring(reason), self, edition, None, None)
      .                   };
      .                   self.fresh_expansion(expn_data, ctx)
     40 ( 0.00%)      }
      .           }
      .           
      .           /// A subset of properties from both macro definition and macro call available through global data.
      .           /// Avoid using this if you have access to the original definition or call structures.
 71,005 ( 0.03%)  #[derive(Clone, Debug, Encodable, Decodable, HashStable_Generic)]
      .           pub struct ExpnData {
      .               // --- The part unique to each expansion.
      .               /// The kind of this expansion - macro or compiler desugaring.
      .               pub kind: ExpnKind,
      .               /// The expansion that produced this expansion.
  4,870 ( 0.00%)      pub parent: ExpnId,
      .               /// The location of the actual macro invocation or syntax sugar , e.g.
      .               /// `let x = foo!();` or `if let Some(y) = x {}`
      .               ///
      .               /// This may recursively refer to other macro invocations, e.g., if
      .               /// `foo!()` invoked `bar!()` internally, and there was an
      .               /// expression inside `bar!`; the call_site of the expression in
      .               /// the expansion would point to the `bar!` invocation; that
      .               /// call_site span would have its own ExpnData, with the call_site
-- line 924 ----------------------------------------
-- line 929 ----------------------------------------
      .               /// that have identical `ExpnData`s. This violates the contract of `HashStable`
      .               /// - the two `ExpnId`s are not equal, but their `Fingerprint`s are equal
      .               /// (since the numerical `ExpnId` value is not considered by the `HashStable`
      .               /// implementation).
      .               ///
      .               /// The `disambiguator` field is set by `update_disambiguator` when two distinct
      .               /// `ExpnId`s would end up with the same `Fingerprint`. Since `ExpnData` includes
      .               /// a `krate` field, this value only needs to be unique within a single crate.
  2,435 ( 0.00%)      disambiguator: u32,
      .           
      .               // --- The part specific to the macro/desugaring definition.
      .               // --- It may be reasonable to share this part between expansions with the same definition,
      .               // --- but such sharing is known to bring some minor inconveniences without also bringing
      .               // --- noticeable perf improvements (PR #62898).
      .               /// The span of the macro definition (possibly dummy).
      .               /// This span serves only informational purpose and is not used for resolution.
      .               pub def_site: Span,
      .               /// List of `#[unstable]`/feature-gated features that the macro is allowed to use
      .               /// internally without forcing the whole crate to opt-in
      .               /// to them.
  1,150 ( 0.00%)      pub allow_internal_unstable: Option<Lrc<[Symbol]>>,
      .               /// Whether the macro is allowed to use `unsafe` internally
      .               /// even if the user crate has `#![forbid(unsafe_code)]`.
      .               pub allow_internal_unsafe: bool,
      .               /// Enables the macro helper hack (`ident!(...)` -> `$crate::ident!(...)`)
      .               /// for a given macro.
      .               pub local_inner_macros: bool,
      .               /// Edition of the crate in which the macro is defined.
  2,435 ( 0.00%)      pub edition: Edition,
      .               /// The `DefId` of the macro being invoked,
      .               /// if this `ExpnData` corresponds to a macro invocation
  2,435 ( 0.00%)      pub macro_def_id: Option<DefId>,
      .               /// The normal module (`mod`) in which the expanded macro was defined.
      .               pub parent_module: Option<DefId>,
      .           }
      .           
      .           impl !PartialEq for ExpnData {}
      .           impl !Hash for ExpnData {}
      .           
      .           impl ExpnData {
  5,746 ( 0.00%)      pub fn new(
      .                   kind: ExpnKind,
      .                   parent: ExpnId,
      .                   call_site: Span,
      .                   def_site: Span,
      .                   allow_internal_unstable: Option<Lrc<[Symbol]>>,
      .                   allow_internal_unsafe: bool,
      .                   local_inner_macros: bool,
      .                   edition: Edition,
      .                   macro_def_id: Option<DefId>,
      .                   parent_module: Option<DefId>,
      .               ) -> ExpnData {
  6,188 ( 0.00%)          ExpnData {
      .                       kind,
      .                       parent,
      .                       call_site,
      .                       def_site,
      .                       allow_internal_unstable,
      .                       allow_internal_unsafe,
      .                       local_inner_macros,
      .                       edition,
      .                       macro_def_id,
      .                       parent_module,
      .                       disambiguator: 0,
      .                   }
  2,210 ( 0.00%)      }
      .           
      .               /// Constructs expansion data with default properties.
     15 ( 0.00%)      pub fn default(
      .                   kind: ExpnKind,
      .                   call_site: Span,
      .                   edition: Edition,
      .                   macro_def_id: Option<DefId>,
      .                   parent_module: Option<DefId>,
      .               ) -> ExpnData {
     60 ( 0.00%)          ExpnData {
      .                       kind,
      .                       parent: ExpnId::root(),
      .                       call_site,
      .                       def_site: DUMMY_SP,
      .                       allow_internal_unstable: None,
      .                       allow_internal_unsafe: false,
      .                       local_inner_macros: false,
      .                       edition,
      .                       macro_def_id,
      .                       parent_module,
      .                       disambiguator: 0,
      .                   }
      5 ( 0.00%)      }
      .           
     12 ( 0.00%)      pub fn allow_unstable(
      .                   kind: ExpnKind,
      .                   call_site: Span,
      .                   edition: Edition,
      .                   allow_internal_unstable: Lrc<[Symbol]>,
      .                   macro_def_id: Option<DefId>,
      .                   parent_module: Option<DefId>,
      .               ) -> ExpnData {
     26 ( 0.00%)          ExpnData {
      .                       allow_internal_unstable: Some(allow_internal_unstable),
      .                       ..ExpnData::default(kind, call_site, edition, macro_def_id, parent_module)
      .                   }
      4 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn is_root(&self) -> bool {
      6 ( 0.00%)          matches!(self.kind, ExpnKind::Root)
      .               }
      .           
      .               #[inline]
  6,066 ( 0.00%)      fn hash_expn(&self, ctx: &mut impl HashStableContext) -> u64 {
      .                   let mut hasher = StableHasher::new();
      .                   self.hash_stable(ctx, &mut hasher);
      .                   hasher.finish()
  5,392 ( 0.00%)      }
      .           }
      .           
      .           /// Expansion kind.
 40,919 ( 0.02%)  #[derive(Clone, Debug, PartialEq, Encodable, Decodable, HashStable_Generic)]
      .           pub enum ExpnKind {
      .               /// No expansion, aka root expansion. Only `ExpnId::root()` has this kind.
      .               Root,
      .               /// Expansion produced by a macro.
  2,323 ( 0.00%)      Macro(MacroKind, Symbol),
      .               /// Transform done by the compiler on the AST.
    148 ( 0.00%)      AstPass(AstPass),
      .               /// Desugaring done by the compiler during HIR lowering.
     20 ( 0.00%)      Desugaring(DesugaringKind),
      .               /// MIR inlining
      .               Inlined,
      .           }
      .           
      .           impl ExpnKind {
      .               pub fn descr(&self) -> String {
      .                   match *self {
      .                       ExpnKind::Root => kw::PathRoot.to_string(),
-- line 1064 ----------------------------------------
-- line 1070 ----------------------------------------
      .                       ExpnKind::AstPass(kind) => kind.descr().to_string(),
      .                       ExpnKind::Desugaring(kind) => format!("desugaring of {}", kind.descr()),
      .                       ExpnKind::Inlined => "inlined source".to_string(),
      .                   }
      .               }
      .           }
      .           
      .           /// The kind of macro invocation or definition.
  6,495 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Debug)]
      4 ( 0.00%)  #[derive(HashStable_Generic)]
      .           pub enum MacroKind {
      .               /// A bang macro `foo!()`.
      .               Bang,
      .               /// An attribute macro `#[foo]`.
      .               Attr,
      .               /// A derive macro `#[derive(Foo)]`
      .               Derive,
      .           }
-- line 1087 ----------------------------------------
-- line 1161 ----------------------------------------
      .                       DesugaringKind::OpaqueTy => "`impl Trait`",
      .                       DesugaringKind::ForLoop => "`for` loop",
      .                       DesugaringKind::LetElse => "`let...else`",
      .                       DesugaringKind::WhileLoop => "`while` loop",
      .                   }
      .               }
      .           }
      .           
      7 ( 0.00%)  #[derive(Default)]
      .           pub struct HygieneEncodeContext {
      .               /// All `SyntaxContexts` for which we have written `SyntaxContextData` into crate metadata.
      .               /// This is `None` after we finish encoding `SyntaxContexts`, to ensure
      .               /// that we don't accidentally try to encode any more `SyntaxContexts`
      .               serialized_ctxts: Lock<FxHashSet<SyntaxContext>>,
      .               /// The `SyntaxContexts` that we have serialized (e.g. as a result of encoding `Spans`)
      .               /// in the most recent 'round' of serializnig. Serializing `SyntaxContextData`
      .               /// may cause us to serialize more `SyntaxContext`s, so serialize in a loop
-- line 1177 ----------------------------------------
-- line 1180 ----------------------------------------
      .           
      .               serialized_expns: Lock<FxHashSet<ExpnId>>,
      .           
      .               latest_expns: Lock<FxHashSet<ExpnId>>,
      .           }
      .           
      .           impl HygieneEncodeContext {
      .               /// Record the fact that we need to serialize the corresponding `ExpnData`.
     15 ( 0.00%)      pub fn schedule_expn_data_for_encoding(&self, expn: ExpnId) {
      6 ( 0.00%)          if !self.serialized_expns.lock().contains(&expn) {
      4 ( 0.00%)              self.latest_expns.lock().insert(expn);
      .                   }
     12 ( 0.00%)      }
      .           
      8 ( 0.00%)      pub fn encode<T, R>(
      .                   &self,
      .                   encoder: &mut T,
      .                   mut encode_ctxt: impl FnMut(&mut T, u32, &SyntaxContextData) -> Result<(), R>,
      .                   mut encode_expn: impl FnMut(&mut T, ExpnId, &ExpnData, ExpnHash) -> Result<(), R>,
      .               ) -> Result<(), R> {
      .                   // When we serialize a `SyntaxContextData`, we may end up serializing
      .                   // a `SyntaxContext` that we haven't seen before
      3 ( 0.00%)          while !self.latest_ctxts.lock().is_empty() || !self.latest_expns.lock().is_empty() {
      .                       debug!(
      .                           "encode_hygiene: Serializing a round of {:?} SyntaxContextDatas: {:?}",
      .                           self.latest_ctxts.lock().len(),
      .                           self.latest_ctxts
      .                       );
      .           
      .                       // Consume the current round of SyntaxContexts.
      .                       // Drop the lock() temporary early
      .                       let latest_ctxts = { std::mem::take(&mut *self.latest_ctxts.lock()) };
      .           
      .                       // It's fine to iterate over a HashMap, because the serialization
      .                       // of the table that we insert data into doesn't depend on insertion
      .                       // order
      .                       for_all_ctxts_in(latest_ctxts.into_iter(), |index, ctxt, data| {
      2 ( 0.00%)                  if self.serialized_ctxts.lock().insert(ctxt) {
      .                               encode_ctxt(encoder, index, data)?;
      .                           }
      .                           Ok(())
      .                       })?;
      .           
      .                       let latest_expns = { std::mem::take(&mut *self.latest_expns.lock()) };
      .           
      .                       for_all_expns_in(latest_expns.into_iter(), |expn, data, hash| {
      4 ( 0.00%)                  if self.serialized_expns.lock().insert(expn) {
      .                               encode_expn(encoder, expn, data, hash)?;
      .                           }
      .                           Ok(())
      .                       })?;
      .                   }
      .                   debug!("encode_hygiene: Done serializing SyntaxContextData");
      .                   Ok(())
      8 ( 0.00%)      }
      .           }
      .           
      .           #[derive(Default)]
      .           /// Additional information used to assist in decoding hygiene data
      .           pub struct HygieneDecodeContext {
      .               // Maps serialized `SyntaxContext` ids to a `SyntaxContext` in the current
      .               // global `HygieneData`. When we deserialize a `SyntaxContext`, we need to create
      .               // a new id in the global `HygieneData`. This map tracks the ID we end up picking,
-- line 1242 ----------------------------------------
-- line 1257 ----------------------------------------
      .           
      .                   let _old_id = hygiene_data.expn_hash_to_expn_id.insert(hash, expn_id);
      .                   debug_assert!(_old_id.is_none());
      .                   expn_id
      .               })
      .           }
      .           
      .           /// Register an expansion which has been decoded from the metadata of a foreign crate.
  1,725 ( 0.00%)  pub fn register_expn_id(
      .               krate: CrateNum,
      .               local_id: ExpnIndex,
      .               data: ExpnData,
      .               hash: ExpnHash,
      .           ) -> ExpnId {
      .               debug_assert!(data.parent == ExpnId::root() || krate == data.parent.krate);
  1,725 ( 0.00%)      let expn_id = ExpnId { krate, local_id };
      .               HygieneData::with(|hygiene_data| {
  1,725 ( 0.00%)          let _old_data = hygiene_data.foreign_expn_data.insert(expn_id, data);
      .                   debug_assert!(_old_data.is_none());
  2,875 ( 0.00%)          let _old_hash = hygiene_data.foreign_expn_hashes.insert(expn_id, hash);
      .                   debug_assert!(_old_hash.is_none());
  2,300 ( 0.00%)          let _old_id = hygiene_data.expn_hash_to_expn_id.insert(hash, expn_id);
      .                   debug_assert!(_old_id.is_none());
      .               });
      .               expn_id
  2,300 ( 0.00%)  }
      .           
      .           /// Decode an expansion from the metadata of a foreign crate.
      .           pub fn decode_expn_id(
      .               krate: CrateNum,
      .               index: u32,
      .               decode_data: impl FnOnce(ExpnId) -> (ExpnData, ExpnHash),
      .           ) -> ExpnId {
  3,124 ( 0.00%)      if index == 0 {
      .                   debug!("decode_expn_id: deserialized root");
  1,174 ( 0.00%)          return ExpnId::root();
      .               }
      .           
      .               let index = ExpnIndex::from_u32(index);
      .           
      .               // This function is used to decode metadata, so it cannot decode information about LOCAL_CRATE.
      .               debug_assert_ne!(krate, LOCAL_CRATE);
  1,950 ( 0.00%)      let expn_id = ExpnId { krate, local_id: index };
      .           
      .               // Fast path if the expansion has already been decoded.
  1,950 ( 0.00%)      if HygieneData::with(|hygiene_data| hygiene_data.foreign_expn_data.contains_key(&expn_id)) {
  1,200 ( 0.00%)          return expn_id;
      .               }
      .           
      .               // Don't decode the data inside `HygieneData::with`, since we need to recursively decode
      .               // other ExpnIds
  4,025 ( 0.00%)      let (expn_data, hash) = decode_data(expn_id);
      .           
  5,175 ( 0.00%)      register_expn_id(krate, index, expn_data, hash)
      .           }
      .           
      .           // Decodes `SyntaxContext`, using the provided `HygieneDecodeContext`
      .           // to track which `SyntaxContext`s we have already decoded.
      .           // The provided closure will be invoked to deserialize a `SyntaxContextData`
      .           // if we haven't already seen the id of the `SyntaxContext` we are deserializing.
      .           pub fn decode_syntax_context<D: Decoder, F: FnOnce(&mut D, u32) -> SyntaxContextData>(
      .               d: &mut D,
      .               context: &HygieneDecodeContext,
      .               decode_data: F,
      .           ) -> SyntaxContext {
 23,010 ( 0.01%)      let raw_id: u32 = Decodable::decode(d);
 46,020 ( 0.02%)      if raw_id == 0 {
      .                   debug!("decode_syntax_context: deserialized root");
      .                   // The root is special
      .                   return SyntaxContext::root();
      .               }
      .           
      .               let outer_ctxts = &context.remapped_ctxts;
      .           
      .               // Ensure that the lock() temporary is dropped early
      .               {
 10,481 ( 0.00%)          if let Some(ctxt) = outer_ctxts.lock().get(raw_id as usize).copied().flatten() {
      .                       return ctxt;
      .                   }
      .               }
      .           
      .               // Allocate and store SyntaxContext id *before* calling the decoder function,
      .               // as the SyntaxContextData may reference itself.
    518 ( 0.00%)      let new_ctxt = HygieneData::with(|hygiene_data| {
    518 ( 0.00%)          let new_ctxt = SyntaxContext(hygiene_data.syntax_context_data.len() as u32);
      .                   // Push a dummy SyntaxContextData to ensure that nobody else can get the
      .                   // same ID as us. This will be overwritten after call `decode_Data`
      .                   hygiene_data.syntax_context_data.push(SyntaxContextData {
    518 ( 0.00%)              outer_expn: ExpnId::root(),
      .                       outer_transparency: Transparency::Transparent,
      .                       parent: SyntaxContext::root(),
      .                       opaque: SyntaxContext::root(),
      .                       opaque_and_semitransparent: SyntaxContext::root(),
      .                       dollar_crate_name: kw::Empty,
      .                   });
      .                   let mut ctxts = outer_ctxts.lock();
      .                   let new_len = raw_id as usize + 1;
  1,554 ( 0.00%)          if ctxts.len() < new_len {
      .                       ctxts.resize(new_len, None);
      .                   }
  1,036 ( 0.00%)          ctxts[raw_id as usize] = Some(new_ctxt);
      .                   drop(ctxts);
      .                   new_ctxt
      .               });
      .           
      .               // Don't try to decode data while holding the lock, since we need to
      .               // be able to recursively decode a SyntaxContext
  1,036 ( 0.00%)      let mut ctxt_data = decode_data(d, raw_id);
      .               // Reset `dollar_crate_name` so that it will be updated by `update_dollar_crate_names`
      .               // We don't care what the encoding crate set this to - we want to resolve it
      .               // from the perspective of the current compilation session
  1,036 ( 0.00%)      ctxt_data.dollar_crate_name = kw::DollarCrate;
      .           
      .               // Overwrite the dummy data with our decoded SyntaxContextData
      .               HygieneData::with(|hygiene_data| {
      .                   let dummy = std::mem::replace(
    518 ( 0.00%)              &mut hygiene_data.syntax_context_data[new_ctxt.as_u32() as usize],
      .                       ctxt_data,
      .                   );
      .                   // Make sure nothing weird happening while `decode_data` was running
    518 ( 0.00%)          assert_eq!(dummy.dollar_crate_name, kw::Empty);
      .               });
      .           
  1,036 ( 0.00%)      new_ctxt
      .           }
      .           
      .           fn for_all_ctxts_in<E, F: FnMut(u32, SyntaxContext, &SyntaxContextData) -> Result<(), E>>(
      .               ctxts: impl Iterator<Item = SyntaxContext>,
      .               mut f: F,
      .           ) -> Result<(), E> {
      .               let all_data: Vec<_> = HygieneData::with(|data| {
      3 ( 0.00%)          ctxts.map(|ctxt| (ctxt, data.syntax_context_data[ctxt.0 as usize].clone())).collect()
      .               });
      9 ( 0.00%)      for (ctxt, data) in all_data.into_iter() {
      .                   f(ctxt.0, ctxt, &data)?;
      .               }
      .               Ok(())
      .           }
      .           
      .           fn for_all_expns_in<E>(
      .               expns: impl Iterator<Item = ExpnId>,
      .               mut f: impl FnMut(ExpnId, &ExpnData, ExpnHash) -> Result<(), E>,
      .           ) -> Result<(), E> {
      .               let all_data: Vec<_> = HygieneData::with(|data| {
     18 ( 0.00%)          expns.map(|expn| (expn, data.expn_data(expn).clone(), data.expn_hash(expn))).collect()
      .               });
     20 ( 0.00%)      for (expn, data, hash) in all_data.into_iter() {
      .                   f(expn, &data, hash)?;
      .               }
      .               Ok(())
      .           }
      .           
      .           impl<E: Encoder> Encodable<E> for LocalExpnId {
      .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
      .                   self.to_expn_id().encode(e)
-- line 1411 ----------------------------------------
-- line 1430 ----------------------------------------
      .               }
      .           }
      .           
      .           pub fn raw_encode_syntax_context<E: Encoder>(
      .               ctxt: SyntaxContext,
      .               context: &HygieneEncodeContext,
      .               e: &mut E,
      .           ) -> Result<(), E::Error> {
    116 ( 0.00%)      if !context.serialized_ctxts.lock().contains(&ctxt) {
     53 ( 0.00%)          context.latest_ctxts.lock().insert(ctxt);
      .               }
      .               ctxt.0.encode(e)
      .           }
      .           
      .           impl<E: Encoder> Encodable<E> for SyntaxContext {
      .               default fn encode(&self, _: &mut E) -> Result<(), E::Error> {
      .                   panic!("cannot encode `SyntaxContext` with `{}`", std::any::type_name::<E>());
      .               }
-- line 1447 ----------------------------------------
-- line 1457 ----------------------------------------
      .           /// such that the `Fingerprint` of the `ExpnData` does not collide with
      .           /// any other `ExpnIds`.
      .           ///
      .           /// This method is called only when an `ExpnData` is first associated
      .           /// with an `ExpnId` (when the `ExpnId` is initially constructed, or via
      .           /// `set_expn_data`). It is *not* called for foreign `ExpnId`s deserialized
      .           /// from another crate's metadata - since `ExpnHash` includes the stable crate id,
      .           /// collisions are only possible between `ExpnId`s within the same crate.
  3,996 ( 0.00%)  fn update_disambiguator(expn_data: &mut ExpnData, mut ctx: impl HashStableContext) -> ExpnHash {
      .               // This disambiguator should not have been set yet.
    898 ( 0.00%)      assert_eq!(
      .                   expn_data.disambiguator, 0,
      .                   "Already set disambiguator for ExpnData: {:?}",
      .                   expn_data
      .               );
    898 ( 0.00%)      assert_default_hashing_controls(&ctx, "ExpnData (disambiguator)");
  2,240 ( 0.00%)      let mut expn_hash = expn_data.hash_expn(&mut ctx);
      .           
      .               let disambiguator = HygieneData::with(|data| {
      .                   // If this is the first ExpnData with a given hash, then keep our
      .                   // disambiguator at 0 (the default u32 value)
      .                   let disambig = data.expn_data_disambiguators.entry(expn_hash).or_default();
    449 ( 0.00%)          let disambiguator = *disambig;
  1,796 ( 0.00%)          *disambig += 1;
      .                   disambiguator
      .               });
      .           
    898 ( 0.00%)      if disambiguator != 0 {
      .                   debug!("Set disambiguator for expn_data={:?} expn_hash={:?}", expn_data, expn_hash);
      .           
    225 ( 0.00%)          expn_data.disambiguator = disambiguator;
    675 ( 0.00%)          expn_hash = expn_data.hash_expn(&mut ctx);
      .           
      .                   // Verify that the new disambiguator makes the hash unique
      .                   #[cfg(debug_assertions)]
      .                   HygieneData::with(|data| {
      .                       assert_eq!(
      .                           data.expn_data_disambiguators.get(&expn_hash),
      .                           None,
      .                           "Hash collision after disambiguator update!",
      .                       );
      .                   });
      .               }
      .           
    898 ( 0.00%)      ExpnHash::new(ctx.def_path_hash(LOCAL_CRATE.as_def_id()).stable_crate_id(), expn_hash)
  3,996 ( 0.00%)  }
      .           
      .           impl<CTX: HashStableContext> HashStable<CTX> for SyntaxContext {
 25,852 ( 0.01%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
      .                   const TAG_EXPANSION: u8 = 0;
      .                   const TAG_NO_EXPANSION: u8 = 1;
      .           
  7,310 ( 0.00%)          if *self == SyntaxContext::root() {
      .                       TAG_NO_EXPANSION.hash_stable(ctx, hasher);
      .                   } else {
      .                       TAG_EXPANSION.hash_stable(ctx, hasher);
  1,474 ( 0.00%)              let (expn_id, transparency) = self.outer_mark();
  7,934 ( 0.00%)              expn_id.hash_stable(ctx, hasher);
      .                       transparency.hash_stable(ctx, hasher);
      .                   }
 24,060 ( 0.01%)      }
      .           }
      .           
      .           impl<CTX: HashStableContext> HashStable<CTX> for ExpnId {
  9,877 ( 0.00%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
      .                   assert_default_hashing_controls(ctx, "ExpnId");
 12,668 ( 0.01%)          let hash = if *self == ExpnId::root() {
      .                       // Avoid fetching TLS storage for a trivial often-used value.
      .                       Fingerprint::ZERO
      .                   } else {
      .                       self.expn_hash().0
      .                   };
      .           
      .                   hash.hash_stable(ctx, hasher);
  7,055 ( 0.00%)      }
      .           }

236,229 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/hygiene.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 70 ----------------------------------------
        .           
        .                   impl<'a, T> $name<'a, T> {
        .                       // Helper function for creating a slice from the iterator.
        .                       #[inline(always)]
        .                       fn make_slice(&self) -> &'a [T] {
        .                           // SAFETY: the iterator was created from a slice with pointer
        .                           // `self.ptr` and length `len!(self)`. This guarantees that all
        .                           // the prerequisites for `from_raw_parts` are fulfilled.
    2,217 ( 0.00%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
        .                       }
        .           
        .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
        .                       // returning the old start.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
        .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               let old = self.ptr.as_ptr();
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
   31,977 ( 0.01%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
        .                               old
        .                           }
        .                       }
        .           
        .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
        .                       // returning the new end.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
-- line 101 ----------------------------------------
-- line 102 ----------------------------------------
        .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
        .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
       27 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
        .                               self.end
        .                           }
        .                       }
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<T> ExactSizeIterator for $name<'_, T> {
        .                       #[inline(always)]
        .                       fn len(&self) -> usize {
    5,533 ( 0.00%)                  len!(self)
        .                       }
        .           
        .                       #[inline(always)]
        .                       fn is_empty(&self) -> bool {
        .                           is_empty!(self)
        .                       }
        .                   }
        .           
-- line 128 ----------------------------------------
-- line 134 ----------------------------------------
        .                       fn next(&mut self) -> Option<$elem> {
        .                           // could be implemented with slices, but this avoids bounds checks
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer
        .                           // must be non-null, and slices over non-ZSTs must also have a
        .                           // non-null end pointer. The call to `next_unchecked!` is safe
        .                           // since we check if the iterator is empty first.
        .                           unsafe {
   15,831 ( 0.01%)                      assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
    4,019 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
4,259,861 ( 1.96%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
        4 ( 0.00%)                          Some(next_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
        .                       fn size_hint(&self) -> (usize, Option<usize>) {
   97,608 ( 0.04%)                  let exact = len!(self);
        .                           (exact, Some(exact))
        .                       }
        .           
        .                       #[inline]
        .                       fn count(self) -> usize {
        .                           len!(self)
        .                       }
        .           
        .                       #[inline]
        .                       fn nth(&mut self, n: usize) -> Option<$elem> {
    1,098 ( 0.00%)                  if n >= len!(self) {
        .                               // This iterator is now empty.
        .                               if mem::size_of::<T>() == 0 {
        .                                   // We have to do it this way as `ptr` may never be 0, but `end`
        .                                   // could be (due to wrapping).
        .                                   self.end = self.ptr.as_ptr();
        .                               } else {
        .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
        .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
        .                       // faster to compile.
        .                       #[inline]
        .                       fn for_each<F>(mut self, mut f: F)
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item),
        .                       {
        .                           while let Some(x) = self.next() {
      312 ( 0.00%)                      f(x);
        .                           }
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn all<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
      220 ( 0.00%)                  while let Some(x) = self.next() {
    3,621 ( 0.00%)                      if !f(x) {
        .                                   return false;
        .                               }
        .                           }
        .                           true
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn any<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
   51,434 ( 0.02%)                  while let Some(x) = self.next() {
   18,495 ( 0.01%)                      if f(x) {
        .                                   return true;
        .                               }
        .                           }
        .                           false
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
        .                       where
        .                           Self: Sized,
        .                           P: FnMut(&Self::Item) -> bool,
        .                       {
    1,227 ( 0.00%)                  while let Some(x) = self.next() {
    6,627 ( 0.00%)                      if predicate(&x) {
        .                                   return Some(x);
        .                               }
        .                           }
        .                           None
      960 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> Option<B>,
        .                       {
    1,724 ( 0.00%)                  while let Some(x) = self.next() {
    6,178 ( 0.00%)                      if let Some(y) = f(x) {
      621 ( 0.00%)                          return Some(y);
        .                               }
        .                           }
        .                           None
       85 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       #[rustc_inherit_overflow_checks]
        .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           Self: Sized,
        .                           P: FnMut(Self::Item) -> bool,
        .                       {
        .                           let n = len!(self);
        .                           let mut i = 0;
        .                           while let Some(x) = self.next() {
   38,367 ( 0.02%)                      if predicate(x) {
        .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
        .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                               i += 1;
        .                           }
        .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           P: FnMut(Self::Item) -> bool,
        .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
        .                       {
        .                           let n = len!(self);
        .                           let mut i = n;
      466 ( 0.00%)                  while let Some(x) = self.next_back() {
    8,065 ( 0.00%)                      i -= 1;
    7,225 ( 0.00%)                      if predicate(x) {
        .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
        .                                   // and is only decreasing.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                           }
        .                           None
        .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
        .                           // the returned references is guaranteed to refer to an element
        .                           // of the slice and thus guaranteed to be valid.
        .                           //
        .                           // Also note that the caller also guarantees that we're never
        .                           // called with the same index again, and that no other methods
        .                           // that will access this subslice are called, so it is valid
        .                           // for the returned reference to be mutable in the case of
        .                           // `IterMut`
    2,304 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
        .                       }
        .           
        .                       $($extra)*
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
        .                       #[inline]
-- line 348 ----------------------------------------
-- line 349 ----------------------------------------
        .                       fn next_back(&mut self) -> Option<$elem> {
        .                           // could be implemented with slices, but this avoids bounds checks
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
        .                           // and slices over non-ZSTs must also have a non-null end pointer.
        .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
        .                           // empty first.
        .                           unsafe {
        3 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
       28 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
   46,677 ( 0.02%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
        .                                   Some(next_back_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
-- line 369 ----------------------------------------

  381,811 ( 0.18%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs
--------------------------------------------------------------------------------
Ir               

-- line 176 ----------------------------------------
      .               }
      .               fn sess(self) -> Option<&'tcx Session> {
      .                   None
      .               }
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   None
      .               }
      .           
  5,022 ( 0.00%)      fn decoder(self, pos: usize) -> DecodeContext<'a, 'tcx> {
  1,674 ( 0.00%)          let tcx = self.tcx();
252,914 ( 0.12%)          DecodeContext {
 28,389 ( 0.01%)              opaque: opaque::Decoder::new(self.blob(), pos),
  1,674 ( 0.00%)              cdata: self.cdata(),
      .                       blob: self.blob(),
  4,548 ( 0.00%)              sess: self.sess().or(tcx.map(|tcx| tcx.sess)),
      .                       tcx,
      .                       last_source_file_index: 0,
      .                       lazy_state: LazyState::NoNode,
      .                       alloc_decoding_session: self
      .                           .cdata()
 24,182 ( 0.01%)                  .map(|cdata| cdata.cdata.alloc_decoding_state.new_decoding_session()),
      .                   }
  5,022 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Metadata<'a, 'tcx> for &'a MetadataBlob {
      .               #[inline]
      .               fn blob(self) -> &'a MetadataBlob {
      .                   self
      .               }
      .           }
-- line 206 ----------------------------------------
-- line 255 ----------------------------------------
      .               }
      .               #[inline]
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   Some(self.1)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<T> {
 11,916 ( 0.01%)      fn decode<M: Metadata<'a, 'tcx>>(self, metadata: M) -> T {
 13,566 ( 0.01%)          let mut dcx = metadata.decoder(self.position.get());
 74,550 ( 0.03%)          dcx.lazy_state = LazyState::NodeStart(self.position);
 33,533 ( 0.02%)          T::decode(&mut dcx)
 15,524 ( 0.01%)      }
      .           }
      .           
      .           impl<'a: 'x, 'tcx: 'x, 'x, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<[T]> {
      .               fn decode<M: Metadata<'a, 'tcx>>(
      .                   self,
      .                   metadata: M,
      .               ) -> impl ExactSizeIterator<Item = T> + Captures<'a> + Captures<'tcx> + 'x {
     21 ( 0.00%)          let mut dcx = metadata.decoder(self.position.get());
      6 ( 0.00%)          dcx.lazy_state = LazyState::NodeStart(self.position);
 18,370 ( 0.01%)          (0..self.meta).map(move |_| T::decode(&mut dcx))
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> DecodeContext<'a, 'tcx> {
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   debug_assert!(self.tcx.is_some(), "missing TyCtxt in DecodeContext");
      .                   self.tcx.unwrap()
-- line 285 ----------------------------------------
-- line 292 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn cdata(&self) -> CrateMetadataRef<'a> {
      .                   debug_assert!(self.cdata.is_some(), "missing CrateMetadata in DecodeContext");
      .                   self.cdata.unwrap()
      .               }
      .           
      .               fn map_encoded_cnum_to_current(&self, cnum: CrateNum) -> CrateNum {
 49,611 ( 0.02%)          if cnum == LOCAL_CRATE { self.cdata().cnum } else { self.cdata().cnum_map[cnum] }
      .               }
      .           
 29,375 ( 0.01%)      fn read_lazy_with_meta<T: ?Sized + LazyMeta>(&mut self, meta: T::Meta) -> Lazy<T> {
      .                   let distance = self.read_usize();
 27,713 ( 0.01%)          let position = match self.lazy_state {
      .                       LazyState::NoNode => bug!("read_lazy_with_meta: outside of a metadata node"),
  3,171 ( 0.00%)              LazyState::NodeStart(start) => {
      .                           let start = start.get();
  6,342 ( 0.00%)                  assert!(distance <= start);
      .                           start - distance
      .                       }
 10,920 ( 0.01%)              LazyState::Previous(last_pos) => last_pos.get() + distance,
      .                   };
 13,622 ( 0.01%)          self.lazy_state = LazyState::Previous(NonZeroUsize::new(position).unwrap());
      .                   Lazy::from_position_and_meta(NonZeroUsize::new(position).unwrap(), meta)
 29,375 ( 0.01%)      }
      .           
      .               #[inline]
      .               pub fn read_raw_bytes(&mut self, len: usize) -> &'a [u8] {
      .                   self.opaque.read_raw_bytes(len)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> TyDecoder<'tcx> for DecodeContext<'a, 'tcx> {
-- line 324 ----------------------------------------
-- line 326 ----------------------------------------
      .           
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   self.tcx.expect("missing TyCtxt in DecodeContext")
      .               }
      .           
      .               #[inline]
      .               fn peek_byte(&self) -> u8 {
 22,235 ( 0.01%)          self.opaque.data[self.opaque.position()]
      .               }
      .           
      .               #[inline]
      .               fn position(&self) -> usize {
      .                   self.opaque.position()
      .               }
      .           
 20,559 ( 0.01%)      fn cached_ty_for_shorthand<F>(&mut self, shorthand: usize, or_insert_with: F) -> Ty<'tcx>
      .               where
      .                   F: FnOnce(&mut Self) -> Ty<'tcx>,
      .               {
  2,937 ( 0.00%)          let tcx = self.tcx();
      .           
  2,937 ( 0.00%)          let key = ty::CReaderCacheKey { cnum: Some(self.cdata().cnum), pos: shorthand };
      .           
  7,420 ( 0.00%)          if let Some(&ty) = tcx.ty_rcache.borrow().get(&key) {
      .                       return ty;
      .                   }
      .           
  1,082 ( 0.00%)          let ty = or_insert_with(self);
      .                   tcx.ty_rcache.borrow_mut().insert(key, ty);
      .                   ty
 26,433 ( 0.01%)      }
      .           
      .               fn with_position<F, R>(&mut self, pos: usize, f: F) -> R
      .               where
      .                   F: FnOnce(&mut Self) -> R,
      .               {
      .                   let new_opaque = opaque::Decoder::new(self.opaque.data, pos);
      .                   let old_opaque = mem::replace(&mut self.opaque, new_opaque);
      .                   let old_state = mem::replace(&mut self.lazy_state, LazyState::NoNode);
      .                   let r = f(self);
  5,825 ( 0.00%)          self.opaque = old_opaque;
  1,165 ( 0.00%)          self.lazy_state = old_state;
      .                   r
      .               }
      .           
      .               fn decode_alloc_id(&mut self) -> rustc_middle::mir::interpret::AllocId {
      .                   if let Some(alloc_decoding_session) = self.alloc_decoding_session {
      .                       alloc_decoding_session.decode_alloc_id(self)
      .                   } else {
      .                       bug!("Attempting to decode interpret::AllocId without CrateMetadata")
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for CrateNum {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> CrateNum {
 26,261 ( 0.01%)          let cnum = CrateNum::from_u32(d.read_u32());
      .                   d.map_encoded_cnum_to_current(cnum)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for DefIndex {
    829 ( 0.00%)      fn decode(d: &mut DecodeContext<'a, 'tcx>) -> DefIndex {
 65,617 ( 0.03%)          DefIndex::from_u32(d.read_u32())
  1,658 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnIndex {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> ExpnIndex {
      .                   ExpnIndex::from_u32(d.read_u32())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for SyntaxContext {
 92,040 ( 0.04%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> SyntaxContext {
 23,010 ( 0.01%)          let cdata = decoder.cdata();
 23,010 ( 0.01%)          let sess = decoder.sess.unwrap();
 46,020 ( 0.02%)          let cname = cdata.root.name;
      .                   rustc_span::hygiene::decode_syntax_context(decoder, &cdata.hygiene_context, |_, id| {
      .                       debug!("SpecializedDecoder<SyntaxContext>: decoding {}", id);
  2,072 ( 0.00%)              cdata
      .                           .root
      .                           .syntax_contexts
      .                           .get(cdata, id)
      .                           .unwrap_or_else(|| panic!("Missing SyntaxContext {:?} for crate {:?}", id, cname))
      .                           .decode((cdata, sess))
      .                   })
115,050 ( 0.05%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnId {
 10,934 ( 0.01%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> ExpnId {
  1,562 ( 0.00%)          let local_cdata = decoder.cdata();
  1,562 ( 0.00%)          let sess = decoder.sess.unwrap();
      .           
      .                   let cnum = CrateNum::decode(decoder);
      .                   let index = u32::decode(decoder);
      .           
      .                   let expn_id = rustc_span::hygiene::decode_expn_id(cnum, index, |expn_id| {
      .                       let ExpnId { krate: cnum, local_id: index } = expn_id;
      .                       // Lookup local `ExpnData`s in our own crate data. Foreign `ExpnData`s
      .                       // are stored in the owning crate, to avoid duplication.
      .                       debug_assert_ne!(cnum, LOCAL_CRATE);
    575 ( 0.00%)              let crate_data = if cnum == local_cdata.cnum {
      .                           local_cdata
      .                       } else {
      .                           local_cdata.cstore.get_crate_data(cnum)
      .                       };
  2,875 ( 0.00%)              let expn_data = crate_data
      .                           .root
      .                           .expn_data
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
  2,875 ( 0.00%)              let expn_hash = crate_data
      .                           .root
      .                           .expn_hashes
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
  5,750 ( 0.00%)              (expn_data, expn_hash)
      .                   });
      .                   expn_id
 12,496 ( 0.01%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Span {
171,648 ( 0.08%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Span {
 21,456 ( 0.01%)          let ctxt = SyntaxContext::decode(decoder);
      .                   let tag = u8::decode(decoder);
      .           
 42,912 ( 0.02%)          if tag == TAG_PARTIAL_SPAN {
      .                       return DUMMY_SP.with_ctxt(ctxt);
      .                   }
      .           
      .                   debug_assert!(tag == TAG_VALID_SPAN_LOCAL || tag == TAG_VALID_SPAN_FOREIGN);
      .           
      .                   let lo = BytePos::decode(decoder);
      .                   let len = BytePos::decode(decoder);
      .                   let hi = lo + len;
      .           
 64,368 ( 0.03%)          let Some(sess) = decoder.sess else {
      .                       bug!("Cannot decode Span without Session.")
      .                   };
      .           
      .                   // There are two possibilities here:
      .                   // 1. This is a 'local span', which is located inside a `SourceFile`
      .                   // that came from this crate. In this case, we use the source map data
      .                   // encoded in this crate. This branch should be taken nearly all of the time.
      .                   // 2. This is a 'foreign span', which is located inside a `SourceFile`
-- line 476 ----------------------------------------
-- line 492 ----------------------------------------
      .                   // a transitive dependency.
      .                   //
      .                   // When we encode a foreign span, we adjust its 'lo' and 'high' values
      .                   // to be based on the *foreign* crate (e.g. crate C), not the crate
      .                   // we are writing metadata for (e.g. crate B). This allows us to
      .                   // treat the 'local' and 'foreign' cases almost identically during deserialization:
      .                   // we can call `imported_source_files` for the proper crate, and binary search
      .                   // through the returned slice using our span.
 51,281 ( 0.02%)          let imported_source_files = if tag == TAG_VALID_SPAN_LOCAL {
      .                       decoder.cdata().imported_source_files(sess)
      .                   } else {
      .                       // When we encode a proc-macro crate, all `Span`s should be encoded
      .                       // with `TAG_VALID_SPAN_LOCAL`
     32 ( 0.00%)              if decoder.cdata().root.is_proc_macro_crate() {
      .                           // Decode `CrateNum` as u32 - using `CrateNum::decode` will ICE
      .                           // since we don't have `cnum_map` populated.
      .                           let cnum = u32::decode(decoder);
      .                           panic!(
      .                               "Decoding of crate {:?} tried to access proc-macro dep {:?}",
      .                               decoder.cdata().root.name,
      .                               cnum
      .                           );
-- line 513 ----------------------------------------
-- line 518 ----------------------------------------
      .                           "SpecializedDecoder<Span>::specialized_decode: loading source files from cnum {:?}",
      .                           cnum
      .                       );
      .           
      .                       // Decoding 'foreign' spans should be rare enough that it's
      .                       // not worth it to maintain a per-CrateNum cache for `last_source_file_index`.
      .                       // We just set it to 0, to ensure that we don't try to access something out
      .                       // of bounds for our initial 'guess'
     64 ( 0.00%)              decoder.last_source_file_index = 0;
      .           
     32 ( 0.00%)              let foreign_data = decoder.cdata().cstore.get_crate_data(cnum);
      .                       foreign_data.imported_source_files(sess)
      .                   };
      .           
      .                   let source_file = {
      .                       // Optimize for the case that most spans within a translated item
      .                       // originate from the same source_file.
 64,368 ( 0.03%)              let last_source_file = &imported_source_files[decoder.last_source_file_index];
      .           
 84,511 ( 0.04%)              if lo >= last_source_file.original_start_pos && lo <= last_source_file.original_end_pos
      .                       {
      .                           last_source_file
      .                       } else {
      .                           let index = imported_source_files
      .                               .binary_search_by_key(&lo, |source_file| source_file.original_start_pos)
 16,436 ( 0.01%)                      .unwrap_or_else(|index| index - 1);
      .           
      .                           // Don't try to cache the index for foreign spans,
      .                           // as this would require a map from CrateNums to indices
  8,369 ( 0.00%)                  if tag == TAG_VALID_SPAN_LOCAL {
  8,350 ( 0.00%)                      decoder.last_source_file_index = index;
      .                           }
 16,738 ( 0.01%)                  &imported_source_files[index]
      .                       }
      .                   };
      .           
      .                   // Make sure our binary search above is correct.
      .                   debug_assert!(
      .                       lo >= source_file.original_start_pos && lo <= source_file.original_end_pos,
      .                       "Bad binary search: lo={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       lo,
-- line 558 ----------------------------------------
-- line 565 ----------------------------------------
      .                       hi >= source_file.original_start_pos && hi <= source_file.original_end_pos,
      .                       "Bad binary search: hi={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       hi,
      .                       source_file.original_start_pos,
      .                       source_file.original_end_pos
      .                   );
      .           
      .                   let lo =
 85,824 ( 0.04%)              (lo + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .                   let hi =
      .                       (hi + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .           
      .                   // Do not try to decode parent for foreign spans.
      .                   Span::new(lo, hi, ctxt, None)
193,104 ( 0.09%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for &'tcx [thir::abstract_const::Node<'tcx>] {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
-- line 587 ----------------------------------------
-- line 590 ----------------------------------------
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<T>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
  5,358 ( 0.00%)          decoder.read_lazy_with_meta(())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<[T]>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
 14,969 ( 0.01%)          if len == 0 { Lazy::empty() } else { decoder.read_lazy_with_meta(len) }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, I: Idx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<Table<I, T>>
      .           where
      .               Option<T>: FixedSizeEncoding,
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
 12,675 ( 0.01%)          decoder.read_lazy_with_meta(len)
      .               }
      .           }
      .           
      .           implement_ty_decoder!(DecodeContext<'a, 'tcx>);
      .           
      .           impl<'tcx> MetadataBlob {
      .               crate fn new(metadata_ref: MetadataRef) -> MetadataBlob {
      .                   MetadataBlob(Lrc::new(metadata_ref))
-- line 626 ----------------------------------------
-- line 630 ----------------------------------------
      .                   self.blob().starts_with(METADATA_HEADER)
      .               }
      .           
      .               crate fn get_rustc_version(&self) -> String {
      .                   Lazy::<String>::from_position(NonZeroUsize::new(METADATA_HEADER.len() + 4).unwrap())
      .                       .decode(self)
      .               }
      .           
    225 ( 0.00%)      crate fn get_root(&self) -> CrateRoot<'tcx> {
     75 ( 0.00%)          let slice = &self.blob()[..];
      .                   let offset = METADATA_HEADER.len();
    375 ( 0.00%)          let pos = (((slice[offset + 0] as u32) << 24)
    150 ( 0.00%)              | ((slice[offset + 1] as u32) << 16)
    300 ( 0.00%)              | ((slice[offset + 2] as u32) << 8)
    225 ( 0.00%)              | ((slice[offset + 3] as u32) << 0)) as usize;
      .                   Lazy::<CrateRoot<'tcx>>::from_position(NonZeroUsize::new(pos).unwrap()).decode(self)
    375 ( 0.00%)      }
      .           
      .               crate fn list_crate_metadata(&self, out: &mut dyn io::Write) -> io::Result<()> {
      .                   let root = self.get_root();
      .                   writeln!(out, "Crate info:")?;
      .                   writeln!(out, "name {}{}", root.name, root.extra_filename)?;
      .                   writeln!(out, "hash {} stable_crate_id {:?}", root.hash, root.stable_crate_id)?;
      .                   writeln!(out, "proc_macro {:?}", root.proc_macro_data.is_some())?;
      .                   writeln!(out, "=External Dependencies=")?;
-- line 654 ----------------------------------------
-- line 666 ----------------------------------------
      .                   }
      .                   write!(out, "\n")?;
      .                   Ok(())
      .               }
      .           }
      .           
      .           impl CrateRoot<'_> {
      .               crate fn is_proc_macro_crate(&self) -> bool {
     48 ( 0.00%)          self.proc_macro_data.is_some()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
     10 ( 0.00%)          self.name
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
     25 ( 0.00%)          self.hash
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
     48 ( 0.00%)          self.stable_crate_id
      .               }
      .           
      .               crate fn triple(&self) -> &TargetTriple {
      .                   &self.triple
      .               }
      .           
      .               crate fn decode_crate_deps<'a>(
      .                   &self,
      .                   metadata: &'a MetadataBlob,
      .               ) -> impl ExactSizeIterator<Item = CrateDep> + Captures<'a> {
     48 ( 0.00%)          self.crate_deps.decode(metadata)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> CrateMetadataRef<'a> {
      .               fn raw_proc_macro(self, id: DefIndex) -> &'a ProcMacro {
      .                   // DefIndex's in root.proc_macro_data have a one-to-one correspondence
      .                   // with items in 'raw_proc_macros'.
      .                   let pos = self
-- line 705 ----------------------------------------
-- line 709 ----------------------------------------
      .                       .unwrap()
      .                       .macros
      .                       .decode(self)
      .                       .position(|i| i == id)
      .                       .unwrap();
      .                   &self.raw_proc_macros.unwrap()[pos]
      .               }
      .           
 50,215 ( 0.02%)      fn opt_item_ident(self, item_index: DefIndex, sess: &Session) -> Option<Ident> {
 37,150 ( 0.02%)          let name = self.def_key(item_index).disambiguated_data.data.get_opt_name()?;
 25,277 ( 0.01%)          let span = match self.root.tables.ident_span.get(self, item_index) {
      .                       Some(lazy_span) => lazy_span.decode((self, sess)),
      .                       None => {
      .                           // FIXME: this weird case of a name with no span is specific to `extern crate`
      .                           // items, which are supposed to be treated like `use` items and only be encoded
      .                           // to metadata as `Export`s, return `None` because that's what all the callers
      .                           // expect in this case.
    144 ( 0.00%)                  assert_eq!(self.def_kind(item_index), DefKind::ExternCrate);
      .                           return None;
      .                       }
      .                   };
      .                   Some(Ident::new(name, span))
 64,162 ( 0.03%)      }
      .           
    799 ( 0.00%)      fn item_ident(self, item_index: DefIndex, sess: &Session) -> Ident {
  8,808 ( 0.00%)          self.opt_item_ident(item_index, sess).expect("no encoded ident for item")
  1,598 ( 0.00%)      }
      .           
      .               fn maybe_kind(self, item_id: DefIndex) -> Option<EntryKind> {
  5,412 ( 0.00%)          self.root.tables.kind.get(self, item_id).map(|k| k.decode(self))
      .               }
      .           
 21,648 ( 0.01%)      fn kind(self, item_id: DefIndex) -> EntryKind {
      .                   self.maybe_kind(item_id).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
 16,236 ( 0.01%)      }
      .           
 19,754 ( 0.01%)      fn def_kind(self, item_id: DefIndex) -> DefKind {
 12,333 ( 0.01%)          self.root.tables.def_kind.get(self, item_id).map(|k| k.decode(self)).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::def_kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
 11,288 ( 0.01%)      }
      .           
  7,191 ( 0.00%)      fn get_span(self, index: DefIndex, sess: &Session) -> Span {
  8,141 ( 0.00%)          self.root
      .                       .tables
      .                       .span
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing span for {:?}", index))
      .                       .decode((self, sess))
  3,995 ( 0.00%)      }
      .           
      .               fn load_proc_macro(self, id: DefIndex, sess: &Session) -> SyntaxExtension {
      .                   let (name, kind, helper_attrs) = match *self.raw_proc_macro(id) {
      .                       ProcMacro::CustomDerive { trait_name, attributes, client } => {
      .                           let helper_attrs =
      .                               attributes.iter().cloned().map(Symbol::intern).collect::<Vec<_>>();
      .                           (
      .                               trait_name,
-- line 778 ----------------------------------------
-- line 795 ----------------------------------------
      .                       self.get_span(id, sess),
      .                       helper_attrs,
      .                       self.root.edition,
      .                       Symbol::intern(name),
      .                       &attrs,
      .                   )
      .               }
      .           
    299 ( 0.00%)      fn get_trait_def(self, item_id: DefIndex, sess: &Session) -> ty::TraitDef {
     92 ( 0.00%)          match self.kind(item_id) {
     23 ( 0.00%)              EntryKind::Trait(data) => {
    138 ( 0.00%)                  let data = data.decode((self, sess));
    368 ( 0.00%)                  ty::TraitDef::new(
      .                               self.local_def_id(item_id),
     46 ( 0.00%)                      data.unsafety,
     46 ( 0.00%)                      data.paren_sugar,
     46 ( 0.00%)                      data.has_auto_impl,
     46 ( 0.00%)                      data.is_marker,
     23 ( 0.00%)                      data.skip_array_during_method_dispatch,
     23 ( 0.00%)                      data.specialization_kind,
     92 ( 0.00%)                      self.def_path_hash(item_id),
     23 ( 0.00%)                      data.must_implement_one_of,
      .                           )
      .                       }
      .                       EntryKind::TraitAlias => ty::TraitDef::new(
      .                           self.local_def_id(item_id),
      .                           hir::Unsafety::Normal,
      .                           false,
      .                           false,
      .                           false,
      .                           false,
      .                           ty::trait_def::TraitSpecializationKind::None,
      .                           self.def_path_hash(item_id),
      .                           None,
      .                       ),
      .                       _ => bug!("def-index does not refer to trait or trait alias"),
      .                   }
    207 ( 0.00%)      }
      .           
  4,833 ( 0.00%)      fn get_variant(
      .                   self,
      .                   kind: &EntryKind,
      .                   index: DefIndex,
      .                   parent_did: DefId,
      .                   sess: &Session,
      .               ) -> ty::VariantDef {
  2,148 ( 0.00%)          let data = match kind {
      .                       EntryKind::Variant(data) | EntryKind::Struct(data, _) | EntryKind::Union(data, _) => {
  2,685 ( 0.00%)                  data.decode(self)
      .                       }
      .                       _ => bug!(),
      .                   };
      .           
  1,676 ( 0.00%)          let adt_kind = match kind {
      .                       EntryKind::Variant(_) => ty::AdtKind::Enum,
      .                       EntryKind::Struct(..) => ty::AdtKind::Struct,
      .                       EntryKind::Union(..) => ty::AdtKind::Union,
      .                       _ => bug!(),
      .                   };
      .           
      .                   let variant_did =
      .                       if adt_kind == ty::AdtKind::Enum { Some(self.local_def_id(index)) } else { None };
  1,074 ( 0.00%)          let ctor_did = data.ctor.map(|index| self.local_def_id(index));
      .           
 11,814 ( 0.01%)          ty::VariantDef::new(
      .                       self.item_ident(index, sess).name,
      .                       variant_did,
      .                       ctor_did,
  2,148 ( 0.00%)              data.discr,
  3,222 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, index)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
      .                           .map(|index| ty::FieldDef {
  1,007 ( 0.00%)                      did: self.local_def_id(index),
  2,014 ( 0.00%)                      name: self.item_ident(index, sess).name,
  2,014 ( 0.00%)                      vis: self.get_visibility(index),
      .                           })
      .                           .collect(),
      .                       data.ctor_kind,
      .                       adt_kind,
      .                       parent_did,
      .                       false,
    537 ( 0.00%)              data.is_non_exhaustive,
      .                   )
  4,833 ( 0.00%)      }
      .           
  5,145 ( 0.00%)      fn get_adt_def(self, item_id: DefIndex, tcx: TyCtxt<'tcx>) -> &'tcx ty::AdtDef {
  1,372 ( 0.00%)          let kind = self.kind(item_id);
    686 ( 0.00%)          let did = self.local_def_id(item_id);
      .           
  1,631 ( 0.00%)          let (adt_kind, repr) = match kind {
      .                       EntryKind::Enum(repr) => (ty::AdtKind::Enum, repr),
      .                       EntryKind::Struct(_, repr) => (ty::AdtKind::Struct, repr),
      .                       EntryKind::Union(_, repr) => (ty::AdtKind::Union, repr),
      .                       _ => bug!("get_adt_def called on a non-ADT {:?}", did),
      .                   };
      .           
      .                   let variants = if let ty::AdtKind::Enum = adt_kind {
    210 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, item_id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
  4,012 ( 0.00%)                  .map(|index| self.get_variant(&self.kind(index), index, did, tcx.sess))
      .                           .collect()
      .                   } else {
  2,408 ( 0.00%)              std::iter::once(self.get_variant(&kind, item_id, did, tcx.sess)).collect()
      .                   };
      .           
  5,012 ( 0.00%)          tcx.alloc_adt_def(did, adt_kind, variants, repr)
  2,401 ( 0.00%)      }
      .           
      .               fn get_explicit_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
    900 ( 0.00%)          self.root.tables.explicit_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_inferred_outlives(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
    900 ( 0.00%)          self.root
      .                       .tables
      .                       .inferred_outlives
      .                       .get(self, item_id)
     12 ( 0.00%)              .map(|predicates| tcx.arena.alloc_from_iter(predicates.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_super_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
     75 ( 0.00%)          self.root.tables.super_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_explicit_item_bounds(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
      .                   self.root
-- line 945 ----------------------------------------
-- line 946 ----------------------------------------
      .                       .tables
      .                       .explicit_item_bounds
      .                       .get(self, item_id)
      .                       .map(|bounds| tcx.arena.alloc_from_iter(bounds.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_generics(self, item_id: DefIndex, sess: &Session) -> ty::Generics {
  1,078 ( 0.00%)          self.root.tables.generics.get(self, item_id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_type(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
  7,145 ( 0.00%)          self.root
      .                       .tables
      .                       .ty
      .                       .get(self, id)
      .                       .unwrap_or_else(|| panic!("Not a type: {:?}", id))
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_stability(self, id: DefIndex) -> Option<attr::Stability> {
    175 ( 0.00%)          self.root.tables.stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_const_stability(self, id: DefIndex) -> Option<attr::ConstStability> {
      5 ( 0.00%)          self.root.tables.const_stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_deprecation(self, id: DefIndex) -> Option<attr::Deprecation> {
    335 ( 0.00%)          self.root.tables.deprecation.get(self, id).map(|depr| depr.decode(self))
      .               }
      .           
    180 ( 0.00%)      fn get_visibility(self, id: DefIndex) -> ty::Visibility {
  9,646 ( 0.00%)          self.root.tables.visibility.get(self, id).unwrap().decode(self)
    120 ( 0.00%)      }
      .           
      .               fn get_impl_data(self, id: DefIndex) -> ImplData {
  3,582 ( 0.00%)          match self.kind(id) {
  2,985 ( 0.00%)              EntryKind::Impl(data) => data.decode(self),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_parent_impl(self, id: DefIndex) -> Option<DefId> {
  1,569 ( 0.00%)          self.get_impl_data(id).parent_impl
      .               }
      .           
      .               fn get_impl_polarity(self, id: DefIndex) -> ty::ImplPolarity {
     61 ( 0.00%)          self.get_impl_data(id).polarity
      .               }
      .           
      .               fn get_impl_defaultness(self, id: DefIndex) -> hir::Defaultness {
      3 ( 0.00%)          self.get_impl_data(id).defaultness
      .               }
      .           
      .               fn get_impl_constness(self, id: DefIndex) -> hir::Constness {
     10 ( 0.00%)          self.get_impl_data(id).constness
      .               }
      .           
      .               fn get_trait_item_def_id(self, id: DefIndex) -> Option<DefId> {
  2,985 ( 0.00%)          self.root.tables.trait_item_def_id.get(self, id).map(|d| d.decode(self))
      .               }
      .           
      .               fn get_coerce_unsized_info(self, id: DefIndex) -> Option<ty::adjustment::CoerceUnsizedInfo> {
      .                   self.get_impl_data(id).coerce_unsized_info
      .               }
      .           
      .               fn get_impl_trait(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Option<ty::TraitRef<'tcx>> {
  7,225 ( 0.00%)          self.root.tables.impl_trait_ref.get(self, id).map(|tr| tr.decode((self, tcx)))
      .               }
      .           
      .               fn get_expn_that_defined(self, id: DefIndex, sess: &Session) -> ExpnId {
  2,345 ( 0.00%)          self.root.tables.expn_that_defined.get(self, id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_const_param_default(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> rustc_middle::ty::Const<'tcx> {
      .                   self.root.tables.const_defaults.get(self, id).unwrap().decode((self, tcx))
-- line 1026 ----------------------------------------
-- line 1028 ----------------------------------------
      .           
      .               /// Iterates over all the stability attributes in the given crate.
      .               fn get_lib_features(self, tcx: TyCtxt<'tcx>) -> &'tcx [(Symbol, Option<Symbol>)] {
      .                   tcx.arena.alloc_from_iter(self.root.lib_features.decode(self))
      .               }
      .           
      .               /// Iterates over the language items in the given crate.
      .               fn get_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [(DefId, usize)] {
     72 ( 0.00%)          tcx.arena.alloc_from_iter(
     48 ( 0.00%)              self.root
      .                           .lang_items
      .                           .decode(self)
    564 ( 0.00%)                  .map(|(def_index, index)| (self.local_def_id(def_index), index)),
      .                   )
      .               }
      .           
      .               /// Iterates over the diagnostic items in the given crate.
      .               fn get_diagnostic_items(self) -> DiagnosticItems {
      .                   let mut id_to_name = FxHashMap::default();
     12 ( 0.00%)          let name_to_id = self
      .                       .root
      .                       .diagnostic_items
      .                       .decode(self)
      .                       .map(|(name, def_index)| {
    106 ( 0.00%)                  let id = self.local_def_id(def_index);
    106 ( 0.00%)                  id_to_name.insert(id, name);
      .                           (name, id)
      .                       })
      .                       .collect();
     54 ( 0.00%)          DiagnosticItems { id_to_name, name_to_id }
      .               }
      .           
      .               /// Iterates over all named children of the given module,
      .               /// including both proper items and reexports.
      .               /// Module here is understood in name resolution sense - it can be a `mod` item,
      .               /// or a crate root, or an enum, or a trait.
      .               fn for_each_module_child(
      .                   self,
      .                   id: DefIndex,
      .                   mut callback: impl FnMut(ModChild),
      .                   sess: &Session,
      .               ) {
    212 ( 0.00%)          if let Some(data) = &self.root.proc_macro_data {
      .                       // If we are loading as a proc macro, we want to return
      .                       // the view of this crate as a proc macro crate.
      .                       if id == CRATE_DEF_INDEX {
      .                           for def_index in data.macros.decode(self) {
      .                               let raw_macro = self.raw_proc_macro(def_index);
      .                               let res = Res::Def(
      .                                   DefKind::Macro(macro_kind(raw_macro)),
      .                                   self.local_def_id(def_index),
-- line 1078 ----------------------------------------
-- line 1085 ----------------------------------------
      .                                   span: ident.span,
      .                               });
      .                           }
      .                       }
      .                       return;
      .                   }
      .           
      .                   // Iterate over all children.
    424 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
    848 ( 0.00%)              for child_index in children.decode((self, sess)) {
 10,038 ( 0.00%)                  if let Some(ident) = self.opt_item_ident(child_index, sess) {
  1,920 ( 0.00%)                      let kind = self.def_kind(child_index);
  1,280 ( 0.00%)                      if matches!(kind, DefKind::Macro(..)) {
      .                                   // FIXME: Macros are currently encoded twice, once as items and once as
      .                                   // reexports. We ignore the items here and only use the reexports.
      .                                   continue;
      .                               }
      .                               let def_id = self.local_def_id(child_index);
      .                               let res = Res::Def(kind, def_id);
      .                               let vis = self.get_visibility(child_index);
      .                               let span = self.get_span(child_index, sess);
      .           
      .                               callback(ModChild { ident, res, vis, span });
      .           
      .                               // For non-re-export structs and variants add their constructors to children.
      .                               // Re-export lists automatically contain constructors when necessary.
  2,386 ( 0.00%)                      match kind {
      .                                   DefKind::Struct => {
     44 ( 0.00%)                              if let Some((ctor_def_id, ctor_kind)) =
      .                                           self.get_ctor_def_id_and_kind(child_index)
      .                                       {
      .                                           let ctor_res =
      .                                               Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);
      .                                           let vis = self.get_visibility(ctor_def_id.index);
      .                                           callback(ModChild { ident, res: ctor_res, vis, span });
      .                                       }
      .                                   }
      .                                   DefKind::Variant => {
      .                                       // Braced variants, unlike structs, generate unusable names in
      .                                       // value namespace, they are reserved for possible future use.
      .                                       // It's ok to use the variant's id as a ctor id since an
      .                                       // error will be reported on any use of such resolution anyway.
     39 ( 0.00%)                              let (ctor_def_id, ctor_kind) = self
      .                                           .get_ctor_def_id_and_kind(child_index)
      .                                           .unwrap_or((def_id, CtorKind::Fictive));
      .                                       let ctor_res =
      .                                           Res::Def(DefKind::Ctor(CtorOf::Variant, ctor_kind), ctor_def_id);
      .                                       let mut vis = self.get_visibility(ctor_def_id.index);
     31 ( 0.00%)                              if ctor_def_id == def_id && vis.is_public() {
      .                                           // For non-exhaustive variants lower the constructor visibility to
      .                                           // within the crate. We only need this for fictive constructors,
      .                                           // for other constructors correct visibilities
      .                                           // were already encoded in metadata.
     18 ( 0.00%)                                  let mut attrs = self.get_item_attrs(def_id.index, sess);
      .                                           if attrs.any(|item| item.has_name(sym::non_exhaustive)) {
      .                                               let crate_def_id = self.local_def_id(CRATE_DEF_INDEX);
      .                                               vis = ty::Visibility::Restricted(crate_def_id);
      .                                           }
      .                                       }
      .                                       callback(ModChild { ident, res: ctor_res, vis, span });
      .                                   }
      .                                   _ => {}
      .                               }
      .                           }
      .                       }
      .                   }
      .           
    535 ( 0.00%)          match self.kind(id) {
     32 ( 0.00%)              EntryKind::Mod(exports) => {
  1,574 ( 0.00%)                  for exp in exports.decode((self, sess)) {
      .                               callback(exp);
      .                           }
      .                       }
      .                       EntryKind::Enum(..) | EntryKind::Trait(..) => {}
      .                       _ => bug!("`for_each_module_child` is called on a non-module: {:?}", self.def_kind(id)),
      .                   }
      .               }
      .           
      .               fn is_ctfe_mir_available(self, id: DefIndex) -> bool {
      8 ( 0.00%)          self.root.tables.mir_for_ctfe.get(self, id).is_some()
      .               }
      .           
      .               fn is_item_mir_available(self, id: DefIndex) -> bool {
      .                   self.root.tables.mir.get(self, id).is_some()
      .               }
      .           
      .               fn module_expansion(self, id: DefIndex, sess: &Session) -> ExpnId {
  3,122 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::Mod(_) | EntryKind::Enum(_) | EntryKind::Trait(_) => {
      .                           self.get_expn_that_defined(id, sess)
      .                       }
      .                       _ => panic!("Expected module, found {:?}", self.local_def_id(id)),
      .                   }
      .               }
      .           
      .               fn get_optimized_mir(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
-- line 1180 ----------------------------------------
-- line 1184 ----------------------------------------
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_optimized_mir: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_mir_for_ctfe(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
     10 ( 0.00%)          self.root
      .                       .tables
      .                       .mir_for_ctfe
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_mir_for_ctfe: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
-- line 1200 ----------------------------------------
-- line 1242 ----------------------------------------
      .                           qualif,
      .                           _,
      .                       ) => qualif,
      .                       _ => bug!("mir_const_qualif: unexpected kind"),
      .                   }
      .               }
      .           
      .               fn get_fn_has_self_parameter(self, id: DefIndex) -> bool {
    600 ( 0.00%)          match self.kind(id) {
    480 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).has_self,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn get_associated_item_def_ids(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [DefId] {
    553 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
    237 ( 0.00%)              tcx.arena.alloc_from_iter(
     79 ( 0.00%)                  children.decode((self, tcx.sess)).map(|child_index| self.local_def_id(child_index)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
      .               }
      .           
  6,396 ( 0.00%)      fn get_associated_item(self, id: DefIndex, sess: &Session) -> ty::AssocItem {
  3,731 ( 0.00%)          let def_key = self.def_key(id);
      .                   let parent = self.local_def_id(def_key.parent.unwrap());
      .                   let ident = self.item_ident(id, sess);
      .           
  3,777 ( 0.00%)          let (kind, container, has_self) = match self.kind(id) {
      .                       EntryKind::AssocConst(container, _, _) => (ty::AssocKind::Const, container, false),
    510 ( 0.00%)              EntryKind::AssocFn(data) => {
      .                           let data = data.decode(self);
  3,570 ( 0.00%)                  (ty::AssocKind::Fn, data.container, data.has_self)
      .                       }
     46 ( 0.00%)              EntryKind::AssocType(container) => (ty::AssocKind::Type, container, false),
      .                       _ => bug!("cannot get associated-item of `{:?}`", def_key),
      .                   };
      .           
  9,594 ( 0.00%)          ty::AssocItem {
      .                       name: ident.name,
      .                       kind,
      .                       vis: self.get_visibility(id),
      .                       defaultness: container.defaultness(),
      .                       def_id: self.local_def_id(id),
      .                       trait_item_def_id: self.get_trait_item_def_id(id),
      .                       container: container.with_def_id(parent),
      .                       fn_has_self_parameter: has_self,
      .                   }
  4,797 ( 0.00%)      }
      .           
      .               fn get_item_variances(self, id: DefIndex) -> impl Iterator<Item = ty::Variance> + 'a {
    160 ( 0.00%)          self.root.tables.variances.get(self, id).unwrap_or_else(Lazy::empty).decode(self)
      .               }
      .           
      .               fn get_ctor_def_id_and_kind(self, node_id: DefIndex) -> Option<(DefId, CtorKind)> {
  2,332 ( 0.00%)          match self.kind(node_id) {
      .                       EntryKind::Struct(data, _) | EntryKind::Variant(data) => {
  1,002 ( 0.00%)                  let vdata = data.decode(self);
    611 ( 0.00%)                  vdata.ctor.map(|index| (self.local_def_id(index), vdata.ctor_kind))
      .                       }
      .                       _ => None,
      .                   }
  1,368 ( 0.00%)      }
      .           
  1,572 ( 0.00%)      fn get_item_attrs(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = ast::Attribute> + 'a {
  2,703 ( 0.00%)          self.root
      .                       .tables
      .                       .attributes
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           // Structure and variant constructors don't have any attributes encoded for them,
      .                           // but we assume that someone passing a constructor ID actually wants to look at
      .                           // the attributes on the corresponding struct or variant.
      .                           let def_key = self.def_key(id);
-- line 1320 ----------------------------------------
-- line 1322 ----------------------------------------
      .                           let parent_id = def_key.parent.expect("no parent for a constructor");
      .                           self.root
      .                               .tables
      .                               .attributes
      .                               .get(self, parent_id)
      .                               .expect("no encoded attributes for a structure or variant")
      .                       })
      .                       .decode((self, sess))
  1,179 ( 0.00%)      }
      .           
      .               fn get_struct_field_names(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = Spanned<Symbol>> + 'a {
  1,290 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
  7,990 ( 0.00%)              .map(move |index| respan(self.get_span(index, sess), self.item_ident(index, sess).name))
      .               }
      .           
      .               fn get_struct_field_visibilities(self, id: DefIndex) -> impl Iterator<Item = Visibility> + 'a {
    190 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
     60 ( 0.00%)              .map(move |field_index| self.get_visibility(field_index))
      .               }
      .           
      .               fn get_inherent_implementations_for_type(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> &'tcx [DefId] {
     68 ( 0.00%)          tcx.arena.alloc_from_iter(
     85 ( 0.00%)              self.root
      .                           .tables
      .                           .inherent_impls
      .                           .get(self, id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
    566 ( 0.00%)                  .map(|index| self.local_def_id(index)),
      .                   )
      .               }
      .           
      .               fn get_traits(self) -> impl Iterator<Item = DefId> + 'a {
      .                   self.root.traits.decode(self).map(move |index| self.local_def_id(index))
      .               }
      .           
      .               fn get_trait_impls(self) -> impl Iterator<Item = (DefId, DefId, Option<SimplifiedType>)> + 'a {
-- line 1376 ----------------------------------------
-- line 1380 ----------------------------------------
      .                           index: *trait_index,
      .                       };
      .                       impls.decode(self).map(move |(impl_index, simplified_self_ty)| {
      .                           (trait_def_id, self.local_def_id(impl_index), simplified_self_ty)
      .                       })
      .                   })
      .               }
      .           
  6,264 ( 0.00%)      fn get_implementations_of_trait(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_def_id: DefId,
      .               ) -> &'tcx [(DefId, Option<SimplifiedType>)] {
    696 ( 0.00%)          if self.trait_impls.is_empty() {
      .                       return &[];
      .                   }
      .           
      .                   // Do a reverse lookup beforehand to avoid touching the crate_num
      .                   // hash map in the loop below.
  1,008 ( 0.00%)          let key = match self.reverse_translate_def_id(trait_def_id) {
      .                       Some(def_id) => (def_id.krate.as_u32(), def_id.index),
      .                       None => return &[],
      .                   };
      .           
      .                   if let Some(impls) = self.trait_impls.get(&key) {
    712 ( 0.00%)              tcx.arena.alloc_from_iter(
    356 ( 0.00%)                  impls
      .                               .decode(self)
  5,974 ( 0.00%)                      .map(|(idx, simplified_self_ty)| (self.local_def_id(idx), simplified_self_ty)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
  5,568 ( 0.00%)      }
      .           
      .               fn get_trait_of_item(self, id: DefIndex) -> Option<DefId> {
     80 ( 0.00%)          let def_key = self.def_key(id);
    100 ( 0.00%)          match def_key.disambiguated_data.data {
      .                       DefPathData::TypeNs(..) | DefPathData::ValueNs(..) => (),
      .                       // Not an associated item
      .                       _ => return None,
      .                   }
    180 ( 0.00%)          def_key.parent.and_then(|parent_index| match self.kind(parent_index) {
      .                       EntryKind::Trait(_) | EntryKind::TraitAlias => Some(self.local_def_id(parent_index)),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               fn get_native_libraries(self, sess: &'a Session) -> impl Iterator<Item = NativeLib> + 'a {
     48 ( 0.00%)          self.root.native_libraries.decode((self, sess))
      .               }
      .           
      .               fn get_proc_macro_quoted_span(self, index: usize, sess: &Session) -> Span {
      .                   self.root
      .                       .tables
      .                       .proc_macro_quoted_spans
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing proc macro quoted span: {:?}", index))
-- line 1437 ----------------------------------------
-- line 1450 ----------------------------------------
      .                       self.root.dylib_dependency_formats.decode(self).enumerate().flat_map(|(i, link)| {
      .                           let cnum = CrateNum::new(i + 1);
      .                           link.map(|link| (self.cnum_map[cnum], link))
      .                       }),
      .                   )
      .               }
      .           
      .               fn get_missing_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [lang_items::LangItem] {
    120 ( 0.00%)          tcx.arena.alloc_from_iter(self.root.lang_items_missing.decode(self))
      .               }
      .           
      .               fn get_fn_param_names(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [Ident] {
      .                   let param_names = match self.kind(id) {
      .                       EntryKind::Fn(data) | EntryKind::ForeignFn(data) => data.decode(self).param_names,
      .                       EntryKind::AssocFn(data) => data.decode(self).fn_data.param_names,
      .                       _ => Lazy::empty(),
      .                   };
-- line 1466 ----------------------------------------
-- line 1479 ----------------------------------------
      .                       EntryKind::AnonConst(_, data)
      .                       | EntryKind::Const(_, data)
      .                       | EntryKind::AssocConst(_, _, data) => data.decode(self).0,
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_macro(self, id: DefIndex, sess: &Session) -> MacroDef {
     96 ( 0.00%)          match self.kind(id) {
     16 ( 0.00%)              EntryKind::MacroDef(macro_def) => macro_def.decode((self, sess)),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               // This replicates some of the logic of the crate-local `is_const_fn_raw` query, because we
      .               // don't serialize constness for tuple variant and tuple struct constructors.
      .               fn is_const_fn_raw(self, id: DefIndex) -> bool {
     36 ( 0.00%)          let constness = match self.kind(id) {
      8 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).fn_data.constness,
      .                       EntryKind::Fn(data) => data.decode(self).constness,
      .                       EntryKind::ForeignFn(data) => data.decode(self).constness,
      .                       EntryKind::Variant(..) | EntryKind::Struct(..) => hir::Constness::Const,
      .                       _ => hir::Constness::NotConst,
      .                   };
      .                   constness == hir::Constness::Const
      .               }
      .           
-- line 1505 ----------------------------------------
-- line 1532 ----------------------------------------
      .               fn generator_kind(self, id: DefIndex) -> Option<hir::GeneratorKind> {
      .                   match self.kind(id) {
      .                       EntryKind::Generator(data) => Some(data),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               fn fn_sig(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {
    225 ( 0.00%)          self.root.tables.fn_sig.get(self, id).unwrap().decode((self, tcx))
      .               }
      .           
      .               #[inline]
 52,297 ( 0.02%)      fn def_key(self, index: DefIndex) -> DefKey {
 14,942 ( 0.01%)          *self
      .                       .def_key_cache
      .                       .lock()
      .                       .entry(index)
 19,570 ( 0.01%)              .or_insert_with(|| self.root.tables.def_keys.get(self, index).unwrap().decode(self))
 59,768 ( 0.03%)      }
      .           
      .               // Returns the path leading to the thing with this `id`.
      .               fn def_path(self, id: DefIndex) -> DefPath {
      .                   debug!("def_path(cnum={:?}, id={:?})", self.cnum, id);
      .                   DefPath::make(self.cnum, id, |parent| self.def_key(parent))
      .               }
      .           
      .               fn def_path_hash_unlocked(
      .                   self,
      .                   index: DefIndex,
      .                   def_path_hashes: &mut FxHashMap<DefIndex, DefPathHash>,
      .               ) -> DefPathHash {
  3,572 ( 0.00%)          *def_path_hashes.entry(index).or_insert_with(|| {
    480 ( 0.00%)              self.root.tables.def_path_hashes.get(self, index).unwrap().decode(self)
      .                   })
      .               }
      .           
      .               #[inline]
 12,502 ( 0.01%)      fn def_path_hash(self, index: DefIndex) -> DefPathHash {
      .                   let mut def_path_hashes = self.def_path_hash_cache.lock();
      .                   self.def_path_hash_unlocked(index, &mut def_path_hashes)
 14,288 ( 0.01%)      }
      .           
      .               #[inline]
      .               fn def_path_hash_to_def_index(self, hash: DefPathHash) -> DefIndex {
      .                   self.def_path_hash_map.def_path_hash_to_def_index(&hash)
      .               }
      .           
      .               fn expn_hash_to_expn_id(self, sess: &Session, index_guess: u32, hash: ExpnHash) -> ExpnId {
      .                   debug_assert_eq!(ExpnId::from_hash(hash), None);
-- line 1580 ----------------------------------------
-- line 1635 ----------------------------------------
      .               /// Proc macro crates don't currently export spans, so this function does not have
      .               /// to work for them.
      .               fn imported_source_files(self, sess: &Session) -> &'a [ImportedSourceFile] {
      .                   // Translate the virtual `/rustc/$hash` prefix back to a real directory
      .                   // that should hold actual sources, where possible.
      .                   //
      .                   // NOTE: if you update this, you might need to also update bootstrap's code for generating
      .                   // the `rust-src` component in `Src::run` in `src/bootstrap/dist.rs`.
 42,912 ( 0.02%)          let virtual_rust_source_base_dir = option_env!("CFG_VIRTUAL_RUST_SOURCE_BASE_DIR")
      .                       .map(Path::new)
      .                       .filter(|_| {
      .                           // Only spend time on further checks if we have what to translate *to*.
      .                           sess.opts.real_rust_source_base_dir.is_some()
      .                       })
      .                       .filter(|virtual_dir| {
      .                           // Don't translate away `/rustc/$hash` if we're still remapping to it,
      .                           // since that means we're still building `std`/`rustc` that need it,
      .                           // and we don't want the real path to leak into codegen/debuginfo.
      .                           !sess.opts.remap_path_prefix.iter().any(|(_from, to)| to == virtual_dir)
      .                       });
 42,912 ( 0.02%)          let try_to_translate_virtual_to_real = |name: &mut rustc_span::FileName| {
      .                       debug!(
      .                           "try_to_translate_virtual_to_real(name={:?}): \
      .                            virtual_rust_source_base_dir={:?}, real_rust_source_base_dir={:?}",
      .                           name, virtual_rust_source_base_dir, sess.opts.real_rust_source_base_dir,
      .                       );
      .           
  2,980 ( 0.00%)              if let Some(virtual_dir) = virtual_rust_source_base_dir {
      .                           if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                               if let rustc_span::FileName::Real(old_name) = name {
      .                                   if let rustc_span::RealFileName::Remapped { local_path: _, virtual_name } =
      .                                       old_name
      .                                   {
      .                                       if let Ok(rest) = virtual_name.strip_prefix(virtual_dir) {
      .                                           let virtual_name = virtual_name.clone();
      .           
-- line 1670 ----------------------------------------
-- line 1709 ----------------------------------------
      .                                           *old_name = new_name;
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   };
      .           
 42,880 ( 0.02%)          self.cdata.source_map_import_info.get_or_init(|| {
     33 ( 0.00%)              let external_source_map = self.root.source_map.decode(self);
      .           
      .                       external_source_map
      .                           .map(|source_file_to_import| {
      .                               // We can't reuse an existing SourceFile, so allocate a new one
      .                               // containing the information we need.
      .                               let rustc_span::SourceFile {
 12,516 ( 0.01%)                          mut name,
  3,576 ( 0.00%)                          src_hash,
    596 ( 0.00%)                          start_pos,
  1,192 ( 0.00%)                          end_pos,
  2,980 ( 0.00%)                          mut lines,
  2,980 ( 0.00%)                          mut multibyte_chars,
  3,576 ( 0.00%)                          mut non_narrow_chars,
  2,980 ( 0.00%)                          mut normalized_pos,
  3,576 ( 0.00%)                          name_hash,
      .                                   ..
      .                               } = source_file_to_import;
      .           
      .                               // If this file is under $sysroot/lib/rustlib/src/ but has not been remapped
      .                               // during rust bootstrapping by `remap-debuginfo = true`, and the user
      .                               // wish to simulate that behaviour by -Z simulate-remapped-rust-src-base,
      .                               // then we change `name` to a similar state as if the rust was bootstrapped
      .                               // with `remap-debuginfo = true`.
      .                               // This is useful for testing so that tests about the effects of
      .                               // `try_to_translate_virtual_to_real` don't have to worry about how the
      .                               // compiler is bootstrapped.
  1,192 ( 0.00%)                      if let Some(virtual_dir) =
      .                                   &sess.opts.debugging_opts.simulate_remapped_rust_src_base
      .                               {
      .                                   if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                                       if let rustc_span::FileName::Real(ref mut old_name) = name {
      .                                           if let rustc_span::RealFileName::LocalPath(local) = old_name {
      .                                               if let Ok(rest) = local.strip_prefix(real_dir) {
      .                                                   *old_name = rustc_span::RealFileName::Remapped {
      .                                                       local_path: None,
-- line 1753 ----------------------------------------
-- line 1767 ----------------------------------------
      .                               let source_length = (end_pos - start_pos).to_usize();
      .           
      .                               // Translate line-start positions and multibyte character
      .                               // position into frame of reference local to file.
      .                               // `SourceMap::new_imported_source_file()` will then translate those
      .                               // coordinates to their new global frame of reference when the
      .                               // offset of the SourceFile is known.
      .                               for pos in &mut lines {
779,918 ( 0.36%)                          *pos = *pos - start_pos;
      .                               }
      .                               for mbc in &mut multibyte_chars {
  1,688 ( 0.00%)                          mbc.pos = mbc.pos - start_pos;
      .                               }
      .                               for swc in &mut non_narrow_chars {
    924 ( 0.00%)                          *swc = *swc - start_pos;
      .                               }
      .                               for np in &mut normalized_pos {
      .                                   np.pos = np.pos - start_pos;
      .                               }
      .           
 10,728 ( 0.00%)                      let local_version = sess.source_map().new_imported_source_file(
  7,748 ( 0.00%)                          name,
  4,172 ( 0.00%)                          src_hash,
      .                                   name_hash,
      .                                   source_length,
  1,192 ( 0.00%)                          self.cnum,
  2,980 ( 0.00%)                          lines,
  3,576 ( 0.00%)                          multibyte_chars,
  2,980 ( 0.00%)                          non_narrow_chars,
  2,384 ( 0.00%)                          normalized_pos,
      .                                   start_pos,
      .                                   end_pos,
      .                               );
      .                               debug!(
      .                                   "CrateMetaData::imported_source_files alloc \
      .                                    source_file {:?} original (start_pos {:?} end_pos {:?}) \
      .                                    translated (start_pos {:?} end_pos {:?})",
      .                                   local_version.name,
-- line 1804 ----------------------------------------
-- line 1808 ----------------------------------------
      .                                   local_version.end_pos
      .                               );
      .           
      .                               ImportedSourceFile {
      .                                   original_start_pos: start_pos,
      .                                   original_end_pos: end_pos,
      .                                   translated_source_file: local_version,
      .                               }
  1,788 ( 0.00%)                  })
      .                           .collect()
      .                   })
      .               }
      .           }
      .           
      .           impl CrateMetadata {
    288 ( 0.00%)      crate fn new(
      .                   sess: &Session,
      .                   blob: MetadataBlob,
      .                   root: CrateRoot<'static>,
      .                   raw_proc_macros: Option<&'static [ProcMacro]>,
      .                   cnum: CrateNum,
      .                   cnum_map: CrateNumMap,
      .                   dep_kind: CrateDepKind,
      .                   source: CrateSource,
      .                   private_dep: bool,
      .                   host_hash: Option<Svh>,
      .               ) -> CrateMetadata {
     72 ( 0.00%)          let trait_impls = root
      .                       .impls
      .                       .decode((&blob, sess))
      .                       .map(|trait_impls| (trait_impls.trait_id, trait_impls.impls))
      .                       .collect();
      .                   let alloc_decoding_state =
     72 ( 0.00%)              AllocDecodingState::new(root.interpret_alloc_index.decode(&blob).collect());
      .                   let dependencies = Lock::new(cnum_map.iter().cloned().collect());
      .           
      .                   // Pre-decode the DefPathHash->DefIndex table. This is a cheap operation
      .                   // that does not copy any data. It just does some data verification.
     24 ( 0.00%)          let def_path_hash_map = root.def_path_hash_map.decode(&blob);
      .           
    552 ( 0.00%)          CrateMetadata {
     24 ( 0.00%)              blob,
     72 ( 0.00%)              root,
     96 ( 0.00%)              trait_impls,
      .                       raw_proc_macros,
      .                       source_map_import_info: OnceCell::new(),
     96 ( 0.00%)              def_path_hash_map,
      .                       expn_hash_map: Default::default(),
    168 ( 0.00%)              alloc_decoding_state,
      .                       cnum,
     96 ( 0.00%)              cnum_map,
    120 ( 0.00%)              dependencies,
      .                       dep_kind: Lock::new(dep_kind),
    288 ( 0.00%)              source,
      .                       private_dep,
      .                       host_hash,
      .                       extern_crate: Lock::new(None),
      .                       hygiene_context: Default::default(),
      .                       def_key_cache: Default::default(),
      .                       def_path_hash_cache: Default::default(),
      .                   }
    216 ( 0.00%)      }
      .           
      .               crate fn dependencies(&self) -> LockGuard<'_, Vec<CrateNum>> {
      .                   self.dependencies.borrow()
      .               }
      .           
      6 ( 0.00%)      crate fn add_dependency(&self, cnum: CrateNum) {
      .                   self.dependencies.borrow_mut().push(cnum);
      8 ( 0.00%)      }
      .           
      .               crate fn update_extern_crate(&self, new_extern_crate: ExternCrate) -> bool {
      .                   let mut extern_crate = self.extern_crate.borrow_mut();
      .                   let update = Some(new_extern_crate.rank()) > extern_crate.as_ref().map(ExternCrate::rank);
      .                   if update {
    120 ( 0.00%)              *extern_crate = Some(new_extern_crate);
      .                   }
      .                   update
      .               }
      .           
      .               crate fn source(&self) -> &CrateSource {
     68 ( 0.00%)          &self.source
      .               }
      .           
      .               crate fn dep_kind(&self) -> CrateDepKind {
      1 ( 0.00%)          *self.dep_kind.lock()
      .               }
      .           
      .               crate fn update_dep_kind(&self, f: impl FnOnce(CrateDepKind) -> CrateDepKind) {
    172 ( 0.00%)          self.dep_kind.with_lock(|dep_kind| *dep_kind = f(*dep_kind))
      .               }
      .           
      .               crate fn panic_strategy(&self) -> PanicStrategy {
      2 ( 0.00%)          self.root.panic_strategy
      .               }
      .           
      .               crate fn needs_panic_runtime(&self) -> bool {
     66 ( 0.00%)          self.root.needs_panic_runtime
      .               }
      .           
      .               crate fn is_panic_runtime(&self) -> bool {
     25 ( 0.00%)          self.root.panic_runtime
      .               }
      .           
      .               crate fn is_profiler_runtime(&self) -> bool {
      .                   self.root.profiler_runtime
      .               }
      .           
      .               crate fn needs_allocator(&self) -> bool {
      5 ( 0.00%)          self.root.needs_allocator
      .               }
      .           
      .               crate fn has_global_allocator(&self) -> bool {
     24 ( 0.00%)          self.root.has_global_allocator
      .               }
      .           
      .               crate fn has_default_lib_allocator(&self) -> bool {
      3 ( 0.00%)          self.root.has_default_lib_allocator
      .               }
      .           
      .               crate fn is_proc_macro_crate(&self) -> bool {
      .                   self.root.is_proc_macro_crate()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
    374 ( 0.00%)          self.root.name
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
      .                   self.root.stable_crate_id
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
      .                   self.root.hash
      .               }
      .           
      .               fn num_def_ids(&self) -> usize {
      .                   self.root.tables.def_keys.size()
      .               }
      .           
      .               fn local_def_id(&self, index: DefIndex) -> DefId {
 14,311 ( 0.01%)          DefId { krate: self.cnum, index }
      .               }
      .           
      .               // Translate a DefId from the current compilation environment to a DefId
      .               // for an external crate.
      .               fn reverse_translate_def_id(&self, did: DefId) -> Option<DefId> {
      .                   for (local, &global) in self.cnum_map.iter_enumerated() {
  3,234 ( 0.00%)              if global == did.krate {
      .                           return Some(DefId { krate: local, index: did.index });
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .           }
      .           
-- line 1964 ----------------------------------------

412,486 ( 0.19%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/transcribe.rs
--------------------------------------------------------------------------------
Ir               

-- line 16 ----------------------------------------
      .           use std::mem;
      .           
      .           // A Marker adds the given mark to the syntax context.
      .           struct Marker(LocalExpnId, Transparency);
      .           
      .           impl MutVisitor for Marker {
      .               const VISIT_TOKENS: bool = true;
      .           
 59,355 ( 0.03%)      fn visit_span(&mut self, span: &mut Span) {
 39,570 ( 0.02%)          *span = span.apply_mark(self.0.to_expn_id(), self.1)
 52,760 ( 0.02%)      }
      .           }
      .           
      .           /// An iterator over the token trees in a delimited token tree (`{ ... }`) or a sequence (`$(...)`).
      .           enum Frame {
      .               Delimited { forest: Lrc<mbe::Delimited>, idx: usize, span: DelimSpan },
      .               Sequence { forest: Lrc<mbe::SequenceRepetition>, idx: usize, sep: Option<Token> },
      .           }
      .           
      .           impl Frame {
      .               /// Construct a new frame around the delimited set of tokens.
      .               fn new(tts: Vec<mbe::TokenTree>) -> Frame {
      .                   let forest = Lrc::new(mbe::Delimited { delim: token::NoDelim, tts });
  1,968 ( 0.00%)          Frame::Delimited { forest, idx: 0, span: DelimSpan::dummy() }
      .               }
      .           }
      .           
      .           impl Iterator for Frame {
      .               type Item = mbe::TokenTree;
      .           
      .               fn next(&mut self) -> Option<mbe::TokenTree> {
 43,928 ( 0.02%)          match *self {
 14,578 ( 0.01%)              Frame::Delimited { ref forest, ref mut idx, .. } => {
 21,867 ( 0.01%)                  *idx += 1;
      .                           forest.tts.get(*idx - 1).cloned()
      .                       }
 11,079 ( 0.01%)              Frame::Sequence { ref forest, ref mut idx, .. } => {
 11,079 ( 0.01%)                  *idx += 1;
      .                           forest.tts.get(*idx - 1).cloned()
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           /// This can do Macro-By-Example transcription.
      .           /// - `interp` is a map of meta-variables to the tokens (non-terminals) they matched in the
-- line 61 ----------------------------------------
-- line 72 ----------------------------------------
      .           /// foo!(bar);
      .           /// ```
      .           ///
      .           /// `interp` would contain `$id => bar` and `src` would contain `println!("{}", stringify!($id));`.
      .           ///
      .           /// `transcribe` would return a `TokenStream` containing `println!("{}", stringify!(bar));`.
      .           ///
      .           /// Along the way, we do some additional error checking.
  4,160 ( 0.00%)  pub(super) fn transcribe<'a>(
      .               cx: &ExtCtxt<'a>,
      .               interp: &FxHashMap<MacroRulesNormalizedIdent, NamedMatch>,
      .               src: Vec<mbe::TokenTree>,
      .               transparency: Transparency,
      .           ) -> PResult<'a, TokenStream> {
      .               // Nothing for us to transcribe...
    416 ( 0.00%)      if src.is_empty() {
      .                   return Ok(TokenStream::default());
      .               }
      .           
      .               // We descend into the RHS (`src`), expanding things as we go. This stack contains the things
      .               // we have yet to expand/are still expanding. We start the stack off with the whole RHS.
  1,968 ( 0.00%)      let mut stack: SmallVec<[Frame; 1]> = smallvec![Frame::new(src)];
      .           
      .               // As we descend in the RHS, we will need to be able to match nested sequences of matchers.
      .               // `repeats` keeps track of where we are in matching at each level, with the last element being
      .               // the most deeply nested sequence. This is used as a stack.
      .               let mut repeats = Vec::new();
      .           
      .               // `result` contains resulting token stream from the TokenTree we just finished processing. At
      .               // the end, this will contain the full result of transcription, but at arbitrary points during
-- line 101 ----------------------------------------
-- line 105 ----------------------------------------
      .               // `result_stack` and clear `results`. We will then produce the results of transcribing the
      .               // TokenTree into `results`. Then, as we unwind back out of the `TokenTree`, we will pop the
      .               // `result_stack` and append `results` too it to produce the new `results` up to that point.
      .               //
      .               // Thus, if we try to pop the `result_stack` and it is empty, we have reached the top-level
      .               // again, and we are done transcribing.
      .               let mut result: Vec<TreeAndSpacing> = Vec::new();
      .               let mut result_stack = Vec::new();
    984 ( 0.00%)      let mut marker = Marker(cx.current_expansion.id, transparency);
      .           
      .               loop {
      .                   // Look at the last frame on the stack.
      .                   // If it still has a TokenTree we have not looked at yet, use that tree.
 69,948 ( 0.03%)          let Some(tree) = stack.last_mut().unwrap().next() else {
      .                       // This else-case never produces a value for `tree` (it `continue`s or `return`s).
      .           
      .                       // Otherwise, if we have just reached the end of a sequence and we can keep repeating,
      .                       // go back to the beginning of the sequence.
  9,256 ( 0.00%)              if let Frame::Sequence { idx, sep, .. } = stack.last_mut().unwrap() {
      .                           let (repeat_idx, repeat_len) = repeats.last_mut().unwrap();
  4,776 ( 0.00%)                  *repeat_idx += 1;
  1,194 ( 0.00%)                  if repeat_idx < repeat_len {
    956 ( 0.00%)                      *idx = 0;
  1,912 ( 0.00%)                      if let Some(sep) = sep {
      .                                   result.push(TokenTree::Token(sep.clone()).into());
      .                               }
      .                               continue;
      .                           }
      .                       }
      .           
      .                       // We are done with the top of the stack. Pop it. Depending on what it was, we do
      .                       // different things. Note that the outermost item must be the delimited, wrapped RHS
      .                       // that was passed in originally to `transcribe`.
  2,716 ( 0.00%)              match stack.pop().unwrap() {
      .                           // Done with a sequence. Pop from repeats.
      .                           Frame::Sequence { .. } => {
      .                               repeats.pop();
      .                           }
      .           
      .                           // We are done processing a Delimited. If this is the top-level delimited, we are
      .                           // done. Otherwise, we unwind the result_stack to append what we have produced to
      .                           // any previous results.
  4,480 ( 0.00%)                  Frame::Delimited { forest, span, .. } => {
  1,120 ( 0.00%)                      if result_stack.is_empty() {
      .                                   // No results left to compute! We are back at the top-level.
  1,476 ( 0.00%)                          return Ok(TokenStream::new(result));
      .                               }
      .           
      .                               // Step back into the parent Delimited.
 11,362 ( 0.01%)                      let tree = TokenTree::Delimited(span, forest.delim, TokenStream::new(result));
  2,622 ( 0.00%)                      result = result_stack.pop().unwrap();
      .                               result.push(tree.into());
      .                           }
  2,240 ( 0.00%)              }
      .                       continue;
      .                   };
      .           
      .                   // At this point, we know we are in the middle of a TokenTree (the last one on `stack`).
      .                   // `tree` contains the next `TokenTree` to be processed.
 52,008 ( 0.02%)          match tree {
      .                       // We are descending into a sequence. We first make sure that the matchers in the RHS
      .                       // and the matches in `interp` have the same shape. Otherwise, either the caller or the
      .                       // macro writer has made a mistake.
  1,080 ( 0.00%)              seq @ mbe::TokenTree::Sequence(..) => {
  1,890 ( 0.00%)                  match lockstep_iter_size(&seq, interp, &repeats) {
      .                               LockstepIterSize::Unconstrained => {
      .                                   return Err(cx.struct_span_err(
      .                                       seq.span(), /* blame macro writer */
      .                                       "attempted to repeat an expression containing no syntax variables \
      .                                        matched as repeating at this depth",
      .                                   ));
      .                               }
      .           
-- line 177 ----------------------------------------
-- line 181 ----------------------------------------
      .                                   // sequence, but they come from different sequence matchers and repeat
      .                                   // different amounts.
      .                                   return Err(cx.struct_span_err(seq.span(), &msg));
      .                               }
      .           
      .                               LockstepIterSize::Constraint(len, _) => {
      .                                   // We do this to avoid an extra clone above. We know that this is a
      .                                   // sequence already.
  1,890 ( 0.00%)                          let mbe::TokenTree::Sequence(sp, seq) = seq else {
      .                                       unreachable!()
      .                                   };
      .           
      .                                   // Is the repetition empty?
    540 ( 0.00%)                          if len == 0 {
     32 ( 0.00%)                              if seq.kleene.op == mbe::KleeneOp::OneOrMore {
      .                                           // FIXME: this really ought to be caught at macro definition
      .                                           // time... It happens when the Kleene operator in the matcher and
      .                                           // the body for the same meta-variable do not match.
      .                                           return Err(cx.struct_span_err(
      .                                               sp.entire(),
      .                                               "this must repeat at least once",
      .                                           ));
      .                                       }
-- line 203 ----------------------------------------
-- line 204 ----------------------------------------
      .                                   } else {
      .                                       // 0 is the initial counter (we have done 0 repretitions so far). `len`
      .                                       // is the total number of repetitions we should generate.
      .                                       repeats.push((0, len));
      .           
      .                                       // The first time we encounter the sequence we push it to the stack. It
      .                                       // then gets reused (see the beginning of the loop) until we are done
      .                                       // repeating.
  2,142 ( 0.00%)                              stack.push(Frame::Sequence {
      .                                           idx: 0,
      .                                           sep: seq.separator.clone(),
      .                                           forest: seq,
      .                                       });
      .                                   }
      .                               }
      .                           }
      .                       }
      .           
      .                       // Replace the meta-var with the matched token tree from the invocation.
 19,128 ( 0.01%)              mbe::TokenTree::MetaVar(mut sp, mut orignal_ident) => {
      .                           // Find the matched nonterminal from the macro invocation, and use it to replace
      .                           // the meta-var.
 12,752 ( 0.01%)                  let ident = MacroRulesNormalizedIdent::new(orignal_ident);
 19,128 ( 0.01%)                  if let Some(cur_matched) = lookup_cur_matched(ident, interp, &repeats) {
  9,564 ( 0.00%)                      if let MatchedNonterminal(nt) = cur_matched {
  9,564 ( 0.00%)                          let token = if let NtTT(tt) = &**nt {
      .                                       // `tt`s are emitted into the output stream directly as "raw tokens",
      .                                       // without wrapping them into groups.
      .                                       tt.clone()
      .                                   } else {
      .                                       // Other variables are emitted into the output stream as groups with
      .                                       // `Delimiter::None` to maintain parsing priorities.
      .                                       // `Interpolated` is currenty used for such groups in rustc parser.
  1,533 ( 0.00%)                              marker.visit_span(&mut sp);
  3,066 ( 0.00%)                              TokenTree::token(token::Interpolated(nt.clone()), sp)
      .                                   };
      .                                   result.push(token.into());
      .                               } else {
      .                                   // We were unable to descend far enough. This is an error.
      .                                   return Err(cx.struct_span_err(
      .                                       sp, /* blame the macro writer */
      .                                       &format!("variable '{}' is still repeating at this depth", ident),
      .                                   ));
-- line 246 ----------------------------------------
-- line 255 ----------------------------------------
      .                           }
      .                       }
      .           
      .                       // If we are entering a new delimiter, we push its contents to the `stack` to be
      .                       // processed, and we push all of the currently produced results to the `result_stack`.
      .                       // We will produce all of the results of the inside of the `Delimited` and then we will
      .                       // jump back out of the Delimited, pop the result_stack and add the new results back to
      .                       // the previous results (from outside the Delimited).
  5,244 ( 0.00%)              mbe::TokenTree::Delimited(mut span, delimited) => {
      .                           mut_visit::visit_delim_span(&mut span, &mut marker);
  5,244 ( 0.00%)                  stack.push(Frame::Delimited { forest: delimited, idx: 0, span });
      .                           result_stack.push(mem::take(&mut result));
      .                       }
      .           
      .                       // Nothing much to do here. Just push the token to the result, being careful to
      .                       // preserve syntax context.
      .                       mbe::TokenTree::Token(token) => {
 26,016 ( 0.01%)                  let mut tt = TokenTree::Token(token);
 13,008 ( 0.01%)                  mut_visit::visit_tt(&mut tt, &mut marker);
      .                           result.push(tt.into());
      .                       }
      .           
      .                       // There should be no meta-var declarations in the invocation of a macro.
      .                       mbe::TokenTree::MetaVarDecl(..) => panic!("unexpected `TokenTree::MetaVarDecl"),
      .                   }
      .               }
  4,652 ( 0.00%)  }
      .           
      .           /// Lookup the meta-var named `ident` and return the matched token tree from the invocation using
      .           /// the set of matches `interpolations`.
      .           ///
      .           /// See the definition of `repeats` in the `transcribe` function. `repeats` is used to descend
      .           /// into the right place in nested matchers. If we attempt to descend too far, the macro writer has
      .           /// made a mistake, and we return `None`.
 32,814 ( 0.02%)  fn lookup_cur_matched<'a>(
      .               ident: MacroRulesNormalizedIdent,
      .               interpolations: &'a FxHashMap<MacroRulesNormalizedIdent, NamedMatch>,
      .               repeats: &[(usize, usize)],
      .           ) -> Option<&'a NamedMatch> {
      .               interpolations.get(&ident).map(|matched| {
      .                   let mut matched = matched;
      .                   for &(idx, _) in repeats {
 17,166 ( 0.01%)              match matched {
      .                           MatchedNonterminal(_) => break,
  2,560 ( 0.00%)                  MatchedSeq(ref ads) => matched = ads.get(idx).unwrap(),
      .                       }
      .                   }
      .           
      .                   matched
      .               })
 32,814 ( 0.02%)  }
      .           
      .           /// An accumulator over a TokenTree to be used with `fold`. During transcription, we need to make
      .           /// sure that the size of each sequence and all of its nested sequences are the same as the sizes
      .           /// of all the matched (nested) sequences in the macro invocation. If they don't match, somebody
      .           /// has made a mistake (either the macro writer or caller).
      .           #[derive(Clone)]
      .           enum LockstepIterSize {
      .               /// No constraints on length of matcher. This is true for any TokenTree variants except a
-- line 313 ----------------------------------------
-- line 322 ----------------------------------------
      .               Contradiction(String),
      .           }
      .           
      .           impl LockstepIterSize {
      .               /// Find incompatibilities in matcher/invocation sizes.
      .               /// - `Unconstrained` is compatible with everything.
      .               /// - `Contradiction` is incompatible with everything.
      .               /// - `Constraint(len)` is only compatible with other constraints of the same length.
  6,390 ( 0.00%)      fn with(self, other: LockstepIterSize) -> LockstepIterSize {
  2,474 ( 0.00%)          match self {
      .                       LockstepIterSize::Unconstrained => other,
      .                       LockstepIterSize::Contradiction(_) => self,
  1,476 ( 0.00%)              LockstepIterSize::Constraint(l_len, ref l_id) => match other {
      .                           LockstepIterSize::Unconstrained => self,
      .                           LockstepIterSize::Contradiction(_) => other,
    408 ( 0.00%)                  LockstepIterSize::Constraint(r_len, _) if l_len == r_len => self,
      .                           LockstepIterSize::Constraint(r_len, r_id) => {
      .                               let msg = format!(
      .                                   "meta-variable `{}` repeats {} time{}, but `{}` repeats {} time{}",
      .                                   l_id,
      .                                   l_len,
      .                                   pluralize!(l_len),
      .                                   r_id,
      .                                   r_len,
      .                                   pluralize!(r_len),
      .                               );
      .                               LockstepIterSize::Contradiction(msg)
      .                           }
      .                       },
      .                   }
  5,314 ( 0.00%)      }
      .           }
      .           
      .           /// Given a `tree`, make sure that all sequences have the same length as the matches for the
      .           /// appropriate meta-vars in `interpolations`.
      .           ///
      .           /// Note that if `repeats` does not match the exact correct depth of a meta-var,
      .           /// `lookup_cur_matched` will return `None`, which is why this still works even in the presence of
      .           /// multiple nested matcher sequences.
  9,800 ( 0.00%)  fn lockstep_iter_size(
      .               tree: &mbe::TokenTree,
      .               interpolations: &FxHashMap<MacroRulesNormalizedIdent, NamedMatch>,
      .               repeats: &[(usize, usize)],
      .           ) -> LockstepIterSize {
      .               use mbe::TokenTree;
  6,860 ( 0.00%)      match *tree {
      .                   TokenTree::Delimited(_, ref delimed) => {
     56 ( 0.00%)              delimed.tts.iter().fold(LockstepIterSize::Unconstrained, |size, tt| {
  3,660 ( 0.00%)                  size.with(lockstep_iter_size(tt, interpolations, repeats))
      .                       })
      .                   }
      .                   TokenTree::Sequence(_, ref seq) => {
    270 ( 0.00%)              seq.tts.iter().fold(LockstepIterSize::Unconstrained, |size, tt| {
  7,200 ( 0.00%)                  size.with(lockstep_iter_size(tt, interpolations, repeats))
      .                       })
      .                   }
      .                   TokenTree::MetaVar(_, name) | TokenTree::MetaVarDecl(_, name, _) => {
    916 ( 0.00%)              let name = MacroRulesNormalizedIdent::new(name);
  4,122 ( 0.00%)              match lookup_cur_matched(name, interpolations, repeats) {
    916 ( 0.00%)                  Some(matched) => match matched {
      .                               MatchedNonterminal(_) => LockstepIterSize::Unconstrained,
  2,436 ( 0.00%)                      MatchedSeq(ref ads) => LockstepIterSize::Constraint(ads.len(), name),
      .                           },
      .                           _ => LockstepIterSize::Unconstrained,
      .                       }
      .                   }
      .                   TokenTree::Token(..) => LockstepIterSize::Unconstrained,
      .               }
  7,840 ( 0.00%)  }

120,888 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/transcribe.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/rc.rs
--------------------------------------------------------------------------------
Ir               

-- line 357 ----------------------------------------
      .               ///
      .               /// ```
      .               /// use std::rc::Rc;
      .               ///
      .               /// let five = Rc::new(5);
      .               /// ```
      .               #[cfg(not(no_global_oom_handling))]
      .               #[stable(feature = "rust1", since = "1.0.0")]
  1,554 ( 0.00%)      pub fn new(value: T) -> Rc<T> {
      .                   // There is an implicit weak pointer owned by all the strong
      .                   // pointers, which ensures that the weak destructor never frees
      .                   // the allocation while the strong destructor is running, even
      .                   // if the weak pointer is stored inside the strong one.
      .                   unsafe {
      .                       Self::from_inner(
151,791 ( 0.07%)                  Box::leak(box RcBox { strong: Cell::new(1), weak: Cell::new(1), value }).into(),
      .                       )
      .                   }
  1,554 ( 0.00%)      }
      .           
      .               /// Constructs a new `Rc<T>` using a closure `data_fn` that has access to a
      .               /// weak reference to the constructing `Rc<T>`.
      .               ///
      .               /// Generally, a structure circularly referencing itself, either directly or
      .               /// indirectly, should not hold a strong reference to prevent a memory leak.
      .               /// In `data_fn`, initialization of `T` can make use of the weak reference
      .               /// by cloning and storing it inside `T` for use at a later time.
-- line 383 ----------------------------------------
-- line 637 ----------------------------------------
      .               ///
      .               /// let x = Rc::new(4);
      .               /// let _y = Rc::clone(&x);
      .               /// assert_eq!(*Rc::try_unwrap(x).unwrap_err(), 4);
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rc_unique", since = "1.4.0")]
      .               pub fn try_unwrap(this: Self) -> Result<T, Self> {
      2 ( 0.00%)          if Rc::strong_count(&this) == 1 {
      .                       unsafe {
      .                           let val = ptr::read(&*this); // copy the contained object
      .           
      .                           // Indicate to Weaks that they can't be promoted by decrementing
      .                           // the strong count, and then remove the implicit "strong weak"
      .                           // pointer while also handling drop logic by just crafting a
      .                           // fake Weak.
      .                           this.inner().dec_strong();
-- line 653 ----------------------------------------
-- line 931 ----------------------------------------
      .               /// let five = Rc::new(5);
      .               /// let _weak_five = Rc::downgrade(&five);
      .               ///
      .               /// assert_eq!(1, Rc::weak_count(&five));
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rc_counts", since = "1.15.0")]
      .               pub fn weak_count(this: &Self) -> usize {
 16,125 ( 0.01%)          this.inner().weak() - 1
      .               }
      .           
      .               /// Gets the number of strong (`Rc`) pointers to this allocation.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use std::rc::Rc;
-- line 947 ----------------------------------------
-- line 1023 ----------------------------------------
      .               pub unsafe fn decrement_strong_count(ptr: *const T) {
      .                   unsafe { mem::drop(Rc::from_raw(ptr)) };
      .               }
      .           
      .               /// Returns `true` if there are no other `Rc` or [`Weak`] pointers to
      .               /// this allocation.
      .               #[inline]
      .               fn is_unique(this: &Self) -> bool {
     93 ( 0.00%)          Rc::weak_count(this) == 0 && Rc::strong_count(this) == 1
      .               }
      .           
      .               /// Returns a mutable reference into the given `Rc`, if there are
      .               /// no other `Rc` or [`Weak`] pointers to the same allocation.
      .               ///
      .               /// Returns [`None`] otherwise, because it is not safe to
      .               /// mutate a shared value.
      .               ///
-- line 1039 ----------------------------------------
-- line 1053 ----------------------------------------
      .               /// assert_eq!(*x, 4);
      .               ///
      .               /// let _y = Rc::clone(&x);
      .               /// assert!(Rc::get_mut(&mut x).is_none());
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rc_unique", since = "1.4.0")]
      .               pub fn get_mut(this: &mut Self) -> Option<&mut T> {
     31 ( 0.00%)          if Rc::is_unique(this) { unsafe { Some(Rc::get_mut_unchecked(this)) } } else { None }
      .               }
      .           
      .               /// Returns a mutable reference into the given `Rc`,
      .               /// without any check.
      .               ///
      .               /// See also [`get_mut`], which is safe and does appropriate checks.
      .               ///
      .               /// [`get_mut`]: Rc::get_mut
-- line 1069 ----------------------------------------
-- line 1088 ----------------------------------------
      .               /// }
      .               /// assert_eq!(*x, "foo");
      .               /// ```
      .               #[inline]
      .               #[unstable(feature = "get_mut_unchecked", issue = "63292")]
      .               pub unsafe fn get_mut_unchecked(this: &mut Self) -> &mut T {
      .                   // We are careful to *not* create a reference covering the "count" fields, as
      .                   // this would conflict with accesses to the reference counts (e.g. by `Weak`).
 23,150 ( 0.01%)          unsafe { &mut (*this.ptr.as_ptr()).value }
      .               }
      .           
      .               #[inline]
      .               #[stable(feature = "ptr_eq", since = "1.17.0")]
      .               /// Returns `true` if the two `Rc`s point to the same allocation
      .               /// (in a vein similar to [`ptr::eq`]).
      .               ///
      .               /// # Examples
-- line 1104 ----------------------------------------
-- line 1109 ----------------------------------------
      .               /// let five = Rc::new(5);
      .               /// let same_five = Rc::clone(&five);
      .               /// let other_five = Rc::new(5);
      .               ///
      .               /// assert!(Rc::ptr_eq(&five, &same_five));
      .               /// assert!(!Rc::ptr_eq(&five, &other_five));
      .               /// ```
      .               pub fn ptr_eq(this: &Self, other: &Self) -> bool {
    232 ( 0.00%)          this.ptr.as_ptr() == other.ptr.as_ptr()
      .               }
      .           }
      .           
      .           impl<T: Clone> Rc<T> {
      .               /// Makes a mutable reference into the given `Rc`.
      .               ///
      .               /// If there are other `Rc` pointers to the same allocation, then `make_mut` will
      .               /// [`clone`] the inner value to a new allocation to ensure unique ownership.  This is also
-- line 1125 ----------------------------------------
-- line 1167 ----------------------------------------
      .               /// *Rc::make_mut(&mut data) += 1;
      .               ///
      .               /// assert!(76 == *data);
      .               /// assert!(weak.upgrade().is_none());
      .               /// ```
      .               #[cfg(not(no_global_oom_handling))]
      .               #[inline]
      .               #[stable(feature = "rc_unique", since = "1.4.0")]
 64,830 ( 0.03%)      pub fn make_mut(this: &mut Self) -> &mut T {
 38,898 ( 0.02%)          if Rc::strong_count(this) != 1 {
      .                       // Gotta clone the data, there are other Rcs.
      .                       // Pre-allocate memory to allow writing the cloned value directly.
  7,623 ( 0.00%)              let mut rc = Self::new_uninit();
      .                       unsafe {
      .                           let data = Rc::get_mut_unchecked(&mut rc);
      .                           (**this).write_clone_into_raw(data.as_mut_ptr());
 15,246 ( 0.01%)                  *this = rc.assume_init();
      .                       }
 10,688 ( 0.00%)          } else if Rc::weak_count(this) != 0 {
      .                       // Can just steal the data, all that's left is Weaks
      .                       let mut rc = Self::new_uninit();
      .                       unsafe {
      .                           let data = Rc::get_mut_unchecked(&mut rc);
      .                           data.as_mut_ptr().copy_from_nonoverlapping(&**this, 1);
      .           
      .                           this.inner().dec_strong();
      .                           // Remove implicit strong-weak ref (no need to craft a fake
-- line 1193 ----------------------------------------
-- line 1196 ----------------------------------------
      .                           ptr::write(this, rc.assume_init());
      .                       }
      .                   }
      .                   // This unsafety is ok because we're guaranteed that the pointer
      .                   // returned is the *only* pointer that will ever be returned to T. Our
      .                   // reference count is guaranteed to be 1 at this point, and we required
      .                   // the `Rc<T>` itself to be `mut`, so we're returning the only possible
      .                   // reference to the allocation.
 12,966 ( 0.01%)          unsafe { &mut this.ptr.as_mut().value }
 77,796 ( 0.04%)      }
      .           }
      .           
      .           impl Rc<dyn Any> {
      .               #[inline]
      .               #[stable(feature = "rc_downcast", since = "1.29.0")]
      .               /// Attempt to downcast the `Rc<dyn Any>` to a concrete type.
      .               ///
      .               /// # Examples
-- line 1213 ----------------------------------------
-- line 1344 ----------------------------------------
      .                       )
      .                   }
      .               }
      .           
      .               /// Copy elements from slice into newly allocated Rc<\[T\]>
      .               ///
      .               /// Unsafe because the caller must either take ownership or bind `T: Copy`
      .               #[cfg(not(no_global_oom_handling))]
    154 ( 0.00%)      unsafe fn copy_from_slice(v: &[T]) -> Rc<[T]> {
      .                   unsafe {
      .                       let ptr = Self::allocate_for_slice(v.len());
     29 ( 0.00%)              ptr::copy_nonoverlapping(v.as_ptr(), &mut (*ptr).value as *mut [T] as *mut T, v.len());
      .                       Self::from_ptr(ptr)
      .                   }
    202 ( 0.00%)      }
      .           
      .               /// Constructs an `Rc<[T]>` from an iterator known to be of a certain size.
      .               ///
      .               /// Behavior is undefined should the size be wrong.
      .               #[cfg(not(no_global_oom_handling))]
      .               unsafe fn from_iter_exact(iter: impl iter::Iterator<Item = T>, len: usize) -> Rc<[T]> {
      .                   // Panic guard while cloning T elements.
      .                   // In the event of a panic, elements that have been written
-- line 1366 ----------------------------------------
-- line 1419 ----------------------------------------
      .                   unsafe { Self::from_iter_exact(v.iter().cloned(), v.len()) }
      .               }
      .           }
      .           
      .           #[cfg(not(no_global_oom_handling))]
      .           impl<T: Copy> RcFromSlice<T> for Rc<[T]> {
      .               #[inline]
      .               fn from_slice(v: &[T]) -> Self {
     17 ( 0.00%)          unsafe { Rc::copy_from_slice(v) }
      .               }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<T: ?Sized> Deref for Rc<T> {
      .               type Target = T;
      .           
      .               #[inline(always)]
      .               fn deref(&self) -> &T {
 33,811 ( 0.02%)          &self.inner().value
      .               }
      .           }
      .           
      .           #[unstable(feature = "receiver_trait", issue = "none")]
      .           impl<T: ?Sized> Receiver for Rc<T> {}
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           unsafe impl<#[may_dangle] T: ?Sized> Drop for Rc<T> {
-- line 1445 ----------------------------------------
-- line 1463 ----------------------------------------
      .               /// }
      .               ///
      .               /// let foo  = Rc::new(Foo);
      .               /// let foo2 = Rc::clone(&foo);
      .               ///
      .               /// drop(foo);    // Doesn't print anything
      .               /// drop(foo2);   // Prints "dropped!"
      .               /// ```
165,056 ( 0.08%)      fn drop(&mut self) {
      .                   unsafe {
 80,568 ( 0.04%)              self.inner().dec_strong();
191,921 ( 0.09%)              if self.inner().strong() == 0 {
      .                           // destroy the contained object
 11,250 ( 0.01%)                  ptr::drop_in_place(Self::get_mut_unchecked(self));
      .           
      .                           // remove the implicit "strong weak" pointer now that we've
      .                           // destroyed the contents.
      1 ( 0.00%)                  self.inner().dec_weak();
      .           
 52,197 ( 0.02%)                  if self.inner().weak() == 0 {
     29 ( 0.00%)                      Global.deallocate(self.ptr.cast(), Layout::for_value(self.ptr.as_ref()));
      .                           }
      .                       }
      .                   }
173,034 ( 0.08%)      }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<T: ?Sized> Clone for Rc<T> {
      .               /// Makes a clone of the `Rc` pointer.
      .               ///
      .               /// This creates another pointer to the same allocation, increasing the
      .               /// strong reference count.
-- line 1495 ----------------------------------------
-- line 1562 ----------------------------------------
      .           /// cost to pay off more easily. It's also more likely to have two `Rc` clones, that point to
      .           /// the same value, than two `&T`s.
      .           ///
      .           /// We can only do this when `T: Eq` as a `PartialEq` might be deliberately irreflexive.
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<T: ?Sized + MarkerEq> RcEqIdent<T> for Rc<T> {
      .               #[inline]
      .               fn eq(&self, other: &Rc<T>) -> bool {
    259 ( 0.00%)          Rc::ptr_eq(self, other) || **self == **other
      .               }
      .           
      .               #[inline]
      .               fn ne(&self, other: &Rc<T>) -> bool {
      .                   !Rc::ptr_eq(self, other) && **self != **other
      .               }
      .           }
      .           
-- line 1578 ----------------------------------------
-- line 1879 ----------------------------------------
      .               /// # use std::rc::Rc;
      .               /// let original: Box<Vec<i32>> = Box::new(vec![1, 2, 3]);
      .               /// let shared: Rc<Vec<i32>> = Rc::from(original);
      .               /// assert_eq!(vec![1, 2, 3], *shared);
      .               /// ```
      .               #[inline]
      .               fn from(mut v: Vec<T>) -> Rc<[T]> {
      .                   unsafe {
     46 ( 0.00%)              let rc = Rc::copy_from_slice(&v);
      .           
      .                       // Allow the Vec to free its memory, but not destroy its contents
      .                       v.set_len(0);
      .           
      .                       rc
      .                   }
      .               }
      .           }
-- line 1895 ----------------------------------------
-- line 2080 ----------------------------------------
      .               #[must_use]
      .               pub fn new() -> Weak<T> {
      .                   Weak { ptr: NonNull::new(usize::MAX as *mut RcBox<T>).expect("MAX is not 0") }
      .               }
      .           }
      .           
      .           pub(crate) fn is_dangling<T: ?Sized>(ptr: *mut T) -> bool {
      .               let address = ptr as *mut () as usize;
     28 ( 0.00%)      address == usize::MAX
      .           }
      .           
      .           /// Helper type to allow accessing the reference counts without
      .           /// making any assertions about the data field.
      .           struct WeakInner<'a> {
      .               weak: &'a Cell<usize>,
      .               strong: &'a Cell<usize>,
      .           }
-- line 2096 ----------------------------------------
-- line 2299 ----------------------------------------
      .                       })
      .                       .unwrap_or(0)
      .               }
      .           
      .               /// Returns `None` when the pointer is dangling and there is no allocated `RcBox`,
      .               /// (i.e., when this `Weak` was created by `Weak::new`).
      .               #[inline]
      .               fn inner(&self) -> Option<WeakInner<'_>> {
      1 ( 0.00%)          if is_dangling(self.ptr.as_ptr()) {
      .                       None
      .                   } else {
      .                       // We are careful to *not* create a reference covering the "data" field, as
      .                       // the field may be mutated concurrently (for example, if the last `Rc`
      .                       // is dropped, the data field will be dropped in-place).
      .                       Some(unsafe {
      .                           let ptr = self.ptr.as_ptr();
      .                           WeakInner { strong: &(*ptr).strong, weak: &(*ptr).weak }
-- line 2315 ----------------------------------------
-- line 2391 ----------------------------------------
      .               /// assert!(other_weak_foo.upgrade().is_none());
      .               /// ```
      .               fn drop(&mut self) {
      .                   let inner = if let Some(inner) = self.inner() { inner } else { return };
      .           
      .                   inner.dec_weak();
      .                   // the weak count starts at 1, and will only go to zero if all
      .                   // the strong pointers have disappeared.
      2 ( 0.00%)          if inner.weak() == 0 {
      .                       unsafe {
      .                           Global.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()));
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           #[stable(feature = "rc_weak", since = "1.4.0")]
-- line 2407 ----------------------------------------
-- line 2469 ----------------------------------------
      .           
      .               #[inline]
      .               fn strong(&self) -> usize {
      .                   self.strong_ref().get()
      .               }
      .           
      .               #[inline]
      .               fn inc_strong(&self) {
 68,259 ( 0.03%)          let strong = self.strong();
      .           
      .                   // We want to abort on overflow instead of dropping the value.
      .                   // The reference count will never be zero when this is called;
      .                   // nevertheless, we insert an abort here to hint LLVM at
      .                   // an otherwise missed optimization.
211,949 ( 0.10%)          if strong == 0 || strong == usize::MAX {
      .                       abort();
      .                   }
    931 ( 0.00%)          self.strong_ref().set(strong + 1);
      .               }
      .           
      .               #[inline]
      .               fn dec_strong(&self) {
310,573 ( 0.14%)          self.strong_ref().set(self.strong() - 1);
      .               }
      .           
      .               #[inline]
      .               fn weak(&self) -> usize {
      .                   self.weak_ref().get()
      .               }
      .           
      .               #[inline]
-- line 2499 ----------------------------------------
-- line 2507 ----------------------------------------
      .                   if weak == 0 || weak == usize::MAX {
      .                       abort();
      .                   }
      .                   self.weak_ref().set(weak + 1);
      .               }
      .           
      .               #[inline]
      .               fn dec_weak(&self) {
 78,378 ( 0.04%)          self.weak_ref().set(self.weak() - 1);
      .               }
      .           }
      .           
      .           impl<T: ?Sized> RcInnerPtr for RcBox<T> {
      .               #[inline(always)]
      .               fn weak_ref(&self) -> &Cell<usize> {
      .                   &self.weak
      .               }
-- line 2523 ----------------------------------------

 87,578 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/rc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs
--------------------------------------------------------------------------------
Ir               

-- line 198 ----------------------------------------
      .                   }
      .           
      .                   #[inline]
      .                   #[allow(arithmetic_overflow)]
      .                   #[rustc_inherit_overflow_checks]
      .                   fn forward(start: Self, n: usize) -> Self {
      .                       // In debug builds, trigger a panic on overflow.
      .                       // This should optimize completely out in release builds.
  3,643 ( 0.00%)              if Self::forward_checked(start, n).is_none() {
      .                           let _ = Self::MAX + 1;
      .                       }
      .                       // Do wrapping math to allow e.g. `Step::forward(-128i8, 255)`.
      .                       start.wrapping_add(n as Self)
      .                   }
      .           
      .                   #[inline]
      .                   #[allow(arithmetic_overflow)]
-- line 214 ----------------------------------------
-- line 613 ----------------------------------------
      .           
      .                   if taken < n { Err(taken) } else { Ok(()) }
      .               }
      .           }
      .           
      .           impl<T: TrustedStep> RangeIteratorImpl for ops::Range<T> {
      .               #[inline]
      .               fn spec_next(&mut self) -> Option<T> {
740,765 ( 0.34%)          if self.start < self.end {
      .                       // SAFETY: just checked precondition
      .                       let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
      .                       Some(mem::replace(&mut self.start, n))
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
-- line 629 ----------------------------------------
-- line 657 ----------------------------------------
      .                   // Otherwise 0 is returned which always safe to use.
      .                   self.start = unsafe { Step::forward_unchecked(self.start.clone(), taken) };
      .           
      .                   if taken < n { Err(taken) } else { Ok(()) }
      .               }
      .           
      .               #[inline]
      .               fn spec_next_back(&mut self) -> Option<T> {
 10,127 ( 0.00%)          if self.start < self.end {
      .                       // SAFETY: just checked precondition
      .                       self.end = unsafe { Step::backward_unchecked(self.end.clone(), 1) };
      .                       Some(self.end.clone())
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
-- line 673 ----------------------------------------
-- line 708 ----------------------------------------
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A> {
      .                   self.spec_next()
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
 15,631 ( 0.01%)          if self.start < self.end {
      .                       let hint = Step::steps_between(&self.start, &self.end);
      .                       (hint.unwrap_or(usize::MAX), hint)
      .                   } else {
      .                       (0, Some(0))
      .                   }
      .               }
      .           
      .               #[inline]
-- line 724 ----------------------------------------
-- line 857 ----------------------------------------
      .           impl<A: Step> FusedIterator for ops::Range<A> {}
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<A: Step> Iterator for ops::RangeFrom<A> {
      .               type Item = A;
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A> {
    710 ( 0.00%)          let n = Step::forward(self.start.clone(), 1);
      .                   Some(mem::replace(&mut self.start, n))
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   (usize::MAX, None)
      .               }
      .           
-- line 873 ----------------------------------------
-- line 998 ----------------------------------------
      .           
      .                   try { accum }
      .               }
      .           }
      .           
      .           impl<T: TrustedStep> RangeInclusiveIteratorImpl for ops::RangeInclusive<T> {
      .               #[inline]
      .               fn spec_next(&mut self) -> Option<T> {
 10,971 ( 0.01%)          if self.is_empty() {
      .                       return None;
      .                   }
      .                   let is_iterating = self.start < self.end;
  7,214 ( 0.00%)          Some(if is_iterating {
      .                       // SAFETY: just checked precondition
      .                       let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
      .                       mem::replace(&mut self.start, n)
      .                   } else {
      .                       self.exhausted = true;
      .                       self.start.clone()
      .                   })
      .               }
-- line 1018 ----------------------------------------
-- line 1025 ----------------------------------------
      .                   R: Try<Output = B>,
      .               {
      .                   if self.is_empty() {
      .                       return try { init };
      .                   }
      .           
      .                   let mut accum = init;
      .           
  1,905 ( 0.00%)          while self.start < self.end {
      .                       // SAFETY: just checked precondition
      .                       let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
      .                       let n = mem::replace(&mut self.start, n);
      .                       accum = f(accum, n)?;
      .                   }
      .           
      .                   self.exhausted = true;
      .           
     93 ( 0.00%)          if self.start == self.end {
      .                       accum = f(accum, self.start.clone())?;
      .                   }
      .           
      .                   try { accum }
      .               }
      .           
      .               #[inline]
      .               fn spec_next_back(&mut self) -> Option<T> {
-- line 1050 ----------------------------------------
-- line 1098 ----------------------------------------
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A> {
      .                   self.spec_next()
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
  1,204 ( 0.00%)          if self.is_empty() {
      .                       return (0, Some(0));
      .                   }
      .           
      .                   match Step::steps_between(&self.start, &self.end) {
      .                       Some(hint) => (hint.saturating_add(1), hint.checked_add(1)),
      .                       None => (usize::MAX, None),
      .                   }
      .               }
-- line 1114 ----------------------------------------

129,273 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .                   #[inline]
        .                   pub fn $fn_name(
        .                       out: &mut [::std::mem::MaybeUninit<u8>; max_leb128_len!($int_ty)],
        .                       mut value: $int_ty,
        .                   ) -> &[u8] {
        .                       let mut i = 0;
        .           
        .                       loop {
    1,090 ( 0.00%)                  if value < 0x80 {
        .                               unsafe {
      520 ( 0.00%)                          *out.get_unchecked_mut(i).as_mut_ptr() = value as u8;
        .                               }
        .           
      782 ( 0.00%)                      i += 1;
        .                               break;
        .                           } else {
        .                               unsafe {
      384 ( 0.00%)                          *out.get_unchecked_mut(i).as_mut_ptr() = ((value & 0x7f) | 0x80) as u8;
        .                               }
        .           
      242 ( 0.00%)                      value >>= 7;
        .                               i += 1;
        .                           }
        .                       }
        .           
        .                       unsafe { ::std::mem::MaybeUninit::slice_assume_init_ref(&out.get_unchecked(..i)) }
        .                   }
        .               };
        .           }
-- line 45 ----------------------------------------
-- line 53 ----------------------------------------
        .           macro_rules! impl_read_unsigned_leb128 {
        .               ($fn_name:ident, $int_ty:ty) => {
        .                   #[inline]
        .                   pub fn $fn_name(slice: &[u8], position: &mut usize) -> $int_ty {
        .                       // The first iteration of this loop is unpeeled. This is a
        .                       // performance win because this code is hot and integer values less
        .                       // than 128 are very common, typically occurring 50-80% or more of
        .                       // the time, even for u64 and u128.
1,079,136 ( 0.50%)              let byte = slice[*position];
  539,568 ( 0.25%)              *position += 1;
  539,568 ( 0.25%)              if (byte & 0x80) == 0 {
       12 ( 0.00%)                  return byte as $int_ty;
        .                       }
    1,192 ( 0.00%)              let mut result = (byte & 0x7F) as $int_ty;
        .                       let mut shift = 7;
        .                       loop {
  387,900 ( 0.18%)                  let byte = slice[*position];
  251,747 ( 0.12%)                  *position += 1;
  258,600 ( 0.12%)                  if (byte & 0x80) == 0 {
  209,561 ( 0.10%)                      result |= (byte as $int_ty) << shift;
        .                               return result;
        .                           } else {
        .                               result |= ((byte & 0x7F) as $int_ty) << shift;
        .                           }
        .                           shift += 7;
        .                       }
        .                   }
        .               };
-- line 80 ----------------------------------------

  399,376 ( 0.18%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs
--------------------------------------------------------------------------------
Ir               

-- line 32 ----------------------------------------
      .           ///
      .           /// If the syntax extension is an MBE macro, it will attempt to match its
      .           /// LHS token tree against the provided token tree, and if it finds a
      .           /// match, will transcribe the RHS token tree, splicing in any captured
      .           /// `macro_parser::matched_nonterminals` into the `SubstNt`s it finds.
      .           ///
      .           /// The RHS of an MBE macro is the only place `SubstNt`s are substituted.
      .           /// Nothing special happens to misnamed or misplaced `SubstNt`s.
364,885 ( 0.17%)  #[derive(Debug, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
      .           pub enum TokenTree {
      .               /// A single token.
109,576 ( 0.05%)      Token(Token),
      .               /// A delimited sequence of token trees.
 10,850 ( 0.00%)      Delimited(DelimSpan, DelimToken, TokenStream),
      .           }
      .           
      .           #[derive(Copy, Clone)]
      .           pub enum CanSynthesizeMissingTokens {
      .               Yes,
      .               No,
      .           }
      .           
-- line 53 ----------------------------------------
-- line 71 ----------------------------------------
      .                           delim == delim2 && tts.eq_unspanned(&tts2)
      .                       }
      .                       _ => false,
      .                   }
      .               }
      .           
      .               /// Retrieves the `TokenTree`'s span.
      .               pub fn span(&self) -> Span {
  2,546 ( 0.00%)          match self {
  1,068 ( 0.00%)              TokenTree::Token(token) => token.span,
    888 ( 0.00%)              TokenTree::Delimited(sp, ..) => sp.entire(),
      .                   }
  1,051 ( 0.00%)      }
      .           
      .               /// Modify the `TokenTree`'s span in-place.
      .               pub fn set_span(&mut self, span: Span) {
  2,546 ( 0.00%)          match self {
  1,051 ( 0.00%)              TokenTree::Token(token) => token.span = span,
    444 ( 0.00%)              TokenTree::Delimited(dspan, ..) => *dspan = DelimSpan::from_single(span),
      .                   }
  1,273 ( 0.00%)      }
      .           
    511 ( 0.00%)      pub fn token(kind: TokenKind, span: Span) -> TokenTree {
 32,548 ( 0.01%)          TokenTree::Token(Token::new(kind, span))
    511 ( 0.00%)      }
      .           
      .               /// Returns the opening delimiter as a token tree.
  4,063 ( 0.00%)      pub fn open_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
 12,189 ( 0.01%)          TokenTree::token(token::OpenDelim(delim), span.open)
  4,063 ( 0.00%)      }
      .           
      .               /// Returns the closing delimiter as a token tree.
  3,563 ( 0.00%)      pub fn close_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
 10,689 ( 0.00%)          TokenTree::token(token::CloseDelim(delim), span.close)
  3,563 ( 0.00%)      }
      .           
    129 ( 0.00%)      pub fn uninterpolate(self) -> TokenTree {
     86 ( 0.00%)          match self {
    387 ( 0.00%)              TokenTree::Token(token) => TokenTree::Token(token.uninterpolate().into_owned()),
      .                       tt => tt,
      .                   }
    172 ( 0.00%)      }
      .           }
      .           
      .           impl<CTX> HashStable<CTX> for TokenStream
      .           where
      .               CTX: crate::HashStableContext,
      .           {
     81 ( 0.00%)      fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
    198 ( 0.00%)          for sub_tt in self.trees() {
      .                       sub_tt.hash_stable(hcx, hasher);
      .                   }
     72 ( 0.00%)      }
      .           }
      .           
      .           pub trait CreateTokenStream: sync::Send + sync::Sync {
      .               fn create_token_stream(&self) -> AttrAnnotatedTokenStream;
      .           }
      .           
      .           impl CreateTokenStream for AttrAnnotatedTokenStream {
      .               fn create_token_stream(&self) -> AttrAnnotatedTokenStream {
-- line 131 ----------------------------------------
-- line 188 ----------------------------------------
      .               Delimited(DelimSpan, DelimToken, AttrAnnotatedTokenStream),
      .               /// Stores the attributes for an attribute target,
      .               /// along with the tokens for that attribute target.
      .               /// See `AttributesData` for more information
      .               Attributes(AttributesData),
      .           }
      .           
      .           impl AttrAnnotatedTokenStream {
  2,582 ( 0.00%)      pub fn new(tokens: Vec<(AttrAnnotatedTokenTree, Spacing)>) -> AttrAnnotatedTokenStream {
      .                   AttrAnnotatedTokenStream(Lrc::new(tokens))
  2,582 ( 0.00%)      }
      .           
      .               /// Converts this `AttrAnnotatedTokenStream` to a plain `TokenStream
      .               /// During conversion, `AttrAnnotatedTokenTree::Attributes` get 'flattened'
      .               /// back to a `TokenStream` of the form `outer_attr attr_target`.
      .               /// If there are inner attributes, they are inserted into the proper
      .               /// place in the attribute target tokens.
      .               pub fn to_tokenstream(&self) -> TokenStream {
      .                   let trees: Vec<_> = self
-- line 206 ----------------------------------------
-- line 316 ----------------------------------------
      .           pub struct TokenStream(pub(crate) Lrc<Vec<TreeAndSpacing>>);
      .           
      .           pub type TreeAndSpacing = (TokenTree, Spacing);
      .           
      .           // `TokenStream` is used a lot. Make sure it doesn't unintentionally get bigger.
      .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
      .           rustc_data_structures::static_assert_size!(TokenStream, 8);
      .           
 37,177 ( 0.02%)  #[derive(Clone, Copy, Debug, PartialEq, Encodable, Decodable)]
      .           pub enum Spacing {
      .               Alone,
      .               Joint,
      .           }
      .           
      .           impl TokenStream {
      .               /// Given a `TokenStream` with a `Stream` of only two arguments, return a new `TokenStream`
      .               /// separating the two arguments with a comma for diagnostic suggestions.
-- line 332 ----------------------------------------
-- line 371 ----------------------------------------
      .           impl From<(AttrAnnotatedTokenTree, Spacing)> for AttrAnnotatedTokenStream {
      .               fn from((tree, spacing): (AttrAnnotatedTokenTree, Spacing)) -> AttrAnnotatedTokenStream {
      .                   AttrAnnotatedTokenStream::new(vec![(tree, spacing)])
      .               }
      .           }
      .           
      .           impl From<TokenTree> for TokenStream {
      .               fn from(tree: TokenTree) -> TokenStream {
    860 ( 0.00%)          TokenStream::new(vec![(tree, Spacing::Alone)])
      .               }
      .           }
      .           
      .           impl From<TokenTree> for TreeAndSpacing {
      .               fn from(tree: TokenTree) -> TreeAndSpacing {
 16,196 ( 0.01%)          (tree, Spacing::Alone)
      .               }
      .           }
      .           
      .           impl iter::FromIterator<TokenTree> for TokenStream {
      .               fn from_iter<I: IntoIterator<Item = TokenTree>>(iter: I) -> Self {
      .                   TokenStream::new(iter.into_iter().map(Into::into).collect::<Vec<TreeAndSpacing>>())
      .               }
      .           }
-- line 393 ----------------------------------------
-- line 401 ----------------------------------------
      .           }
      .           
      .           impl TokenStream {
      .               pub fn new(streams: Vec<TreeAndSpacing>) -> TokenStream {
      .                   TokenStream(Lrc::new(streams))
      .               }
      .           
      .               pub fn is_empty(&self) -> bool {
    170 ( 0.00%)          self.0.is_empty()
    170 ( 0.00%)      }
      .           
      .               pub fn len(&self) -> usize {
 38,813 ( 0.02%)          self.0.len()
    416 ( 0.00%)      }
      .           
      .               pub fn from_streams(mut streams: SmallVec<[TokenStream; 2]>) -> TokenStream {
      .                   match streams.len() {
      .                       0 => TokenStream::default(),
      .                       1 => streams.pop().unwrap(),
      .                       _ => {
      .                           // We are going to extend the first stream in `streams` with
      .                           // the elements from the subsequent streams. This requires
-- line 422 ----------------------------------------
-- line 448 ----------------------------------------
      .           
      .                           // Create the final `TokenStream`.
      .                           TokenStream(first_stream_lrc)
      .                       }
      .                   }
      .               }
      .           
      .               pub fn trees(&self) -> Cursor {
    594 ( 0.00%)          self.clone().into_trees()
  1,188 ( 0.00%)      }
      .           
  5,013 ( 0.00%)      pub fn into_trees(self) -> Cursor {
      .                   Cursor::new(self)
 10,026 ( 0.00%)      }
      .           
      .               /// Compares two `TokenStream`s, checking equality without regarding span information.
      .               pub fn eq_unspanned(&self, other: &TokenStream) -> bool {
      .                   let mut t1 = self.trees();
      .                   let mut t2 = other.trees();
      .                   for (t1, t2) in iter::zip(&mut t1, &mut t2) {
      .                       if !t1.eq_unspanned(&t2) {
      .                           return false;
      .                       }
      .                   }
      .                   t1.next().is_none() && t2.next().is_none()
      .               }
      .           
      .               pub fn map_enumerated<F: FnMut(usize, &TokenTree) -> TokenTree>(self, mut f: F) -> TokenStream {
    380 ( 0.00%)          TokenStream(Lrc::new(
      .                       self.0
      .                           .iter()
      .                           .enumerate()
  7,638 ( 0.00%)                  .map(|(i, (tree, is_joint))| (f(i, tree), *is_joint))
      .                           .collect(),
      .                   ))
      .               }
      .           }
      .           
      .           // 99.5%+ of the time we have 1 or 2 elements in this vector.
      .           #[derive(Clone)]
      .           pub struct TokenStreamBuilder(SmallVec<[TokenStream; 2]>);
-- line 488 ----------------------------------------
-- line 572 ----------------------------------------
      .           pub struct Cursor {
      .               pub stream: TokenStream,
      .               index: usize,
      .           }
      .           
      .           impl Iterator for Cursor {
      .               type Item = TokenTree;
      .           
 10,404 ( 0.00%)      fn next(&mut self) -> Option<TokenTree> {
 17,370 ( 0.01%)          self.next_with_spacing().map(|(tree, _)| tree)
 13,872 ( 0.01%)      }
      .           }
      .           
      .           impl Cursor {
      .               fn new(stream: TokenStream) -> Self {
      .                   Cursor { stream, index: 0 }
      .               }
      .           
172,565 ( 0.08%)      pub fn next_with_spacing(&mut self) -> Option<TreeAndSpacing> {
113,943 ( 0.05%)          if self.index < self.stream.len() {
 58,482 ( 0.03%)              self.index += 1;
185,234 ( 0.09%)              Some(self.stream.0[self.index - 1].clone())
      .                   } else {
 16,102 ( 0.01%)              None
      .                   }
207,078 ( 0.10%)      }
      .           
      .               pub fn index(&self) -> usize {
      .                   self.index
      .               }
      .           
      .               pub fn append(&mut self, new_stream: TokenStream) {
      .                   if new_stream.is_empty() {
      .                       return;
      .                   }
      .                   let index = self.index;
      .                   let stream = mem::take(&mut self.stream);
      .                   *self = TokenStream::from_streams(smallvec![stream, new_stream]).into_trees();
      .                   self.index = index;
      .               }
      .           
  2,550 ( 0.00%)      pub fn look_ahead(&self, n: usize) -> Option<&TokenTree> {
  5,100 ( 0.00%)          self.stream.0[self.index..].get(n).map(|(tree, _)| tree)
  5,100 ( 0.00%)      }
      .           }
      .           
 20,004 ( 0.01%)  #[derive(Debug, Copy, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
      .           pub struct DelimSpan {
      .               pub open: Span,
      .               pub close: Span,
      .           }
      .           
      .           impl DelimSpan {
      2 ( 0.00%)      pub fn from_single(sp: Span) -> Self {
      .                   DelimSpan { open: sp, close: sp }
      4 ( 0.00%)      }
      .           
    340 ( 0.00%)      pub fn from_pair(open: Span, close: Span) -> Self {
      .                   DelimSpan { open, close }
    170 ( 0.00%)      }
      .           
      .               pub fn dummy() -> Self {
      .                   Self::from_single(DUMMY_SP)
  3,399 ( 0.00%)      }
      .           
 11,440 ( 0.01%)      pub fn entire(self) -> Span {
      .                   self.open.with_hi(self.close.hi())
  8,580 ( 0.00%)      }
      .           }

  8,547 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir               

-- line 91 ----------------------------------------
      .           // maximum of number bytes needed to fill an 8-byte-sized element on which
      .           // SipHash operates. Note that for variable-sized copies which are known to be
      .           // less than 8 bytes, this function will perform more work than necessary unless
      .           // the compiler is able to optimize the extra work away.
      .           #[inline]
      .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
      .               debug_assert!(count <= 8);
      .           
  7,802 ( 0.00%)      if count == 8 {
      .                   ptr::copy_nonoverlapping(src, dst, 8);
      .                   return;
      .               }
      .           
      .               let mut i = 0;
 13,640 ( 0.01%)      if i + 3 < count {
      .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
      .                   i += 4;
      .               }
      .           
 29,219 ( 0.01%)      if i + 1 < count {
      .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
  4,331 ( 0.00%)          i += 2
      .               }
      .           
 13,640 ( 0.01%)      if i < count {
  6,716 ( 0.00%)          *dst.add(i) = *src.add(i);
      .                   i += 1;
      .               }
      .           
      .               debug_assert_eq!(i, count);
      .           }
      .           
      .           // # Implementation
      .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
      .           
      .                   hasher
      .               }
      .           
      .               // A specialized write function for values with size <= 8.
      .               #[inline]
      .               fn short_write<T>(&mut self, x: T) {
      .                   let size = mem::size_of::<T>();
 36,134 ( 0.02%)          let nbuf = self.nbuf;
      .                   debug_assert!(size <= 8);
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
      .           
251,435 ( 0.12%)          if nbuf + size < BUFFER_SIZE {
      .                       unsafe {
      .                           // The memcpy call is optimized away because the size is known.
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
      .                       }
      .           
 82,640 ( 0.04%)              self.nbuf = nbuf + size;
      .           
      .                       return;
      .                   }
      .           
 12,052 ( 0.01%)          unsafe { self.short_write_process_buffer(x) }
      .               }
      .           
      .               // A specialized write function for values with size <= 8 that should only
      .               // be called when the write would cause the buffer to fill.
      .               //
      .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
      .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
      .               // overflow) if it wasn't already.
      .               #[inline(never)]
  3,702 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
      .                   let size = mem::size_of::<T>();
  3,702 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(size <= 8);
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
      .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
      .           
      .                   // Copy first part of input into end of buffer, possibly into spill
      .                   // element. The memcpy call is optimized away because the size is known.
      .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
      .           
      .                   // Process buffer.
      .                   for i in 0..BUFFER_CAPACITY {
 37,020 ( 0.02%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
 29,616 ( 0.01%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
 33,318 ( 0.02%)              self.state.v0 ^= elem;
      .                   }
      .           
      .                   // Copy remaining input into start of buffer by copying size - 1
      .                   // elements from spill (at most size - 1 bytes could have overflowed
      .                   // into the spill). The memcpy call is optimized away because the size
      .                   // is known. And the whole copy is optimized away for size == 1.
      .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
      .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
      .           
      .                   // This function should only be called when the write fills the buffer.
      .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
      .                   // is statically known, so the branch is optimized away.
 17,814 ( 0.01%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
 14,808 ( 0.01%)          self.processed += BUFFER_SIZE;
  7,404 ( 0.00%)      }
      .           
      .               // A write function for byte slices.
      .               #[inline]
      .               fn slice_write(&mut self, msg: &[u8]) {
      .                   let length = msg.len();
  6,777 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .           
 41,244 ( 0.02%)          if nbuf + length < BUFFER_SIZE {
      .                       unsafe {
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .           
 15,096 ( 0.01%)                  if length <= 8 {
      .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
      .                           } else {
      .                               // This memcpy is *not* optimized away.
      .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
      .                           }
      .                       }
      .           
  7,559 ( 0.00%)              self.nbuf = nbuf + length;
      .           
      .                       return;
      .                   }
      .           
  3,991 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
      .               }
      .           
      .               // A write function for byte slices that should only be called when the
      .               // write would cause the buffer to fill.
      .               //
      .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
      .               // and `msg` must contain enough bytes to initialize the rest of the element
      .               // containing the byte offset `self.nbuf`.
      .               #[inline(never)]
  3,460 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
      .                   let length = msg.len();
    692 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
      .           
      .                   // Always copy first part of input into current element of buffer.
      .                   // This function should only be called when the write fills the buffer,
      .                   // so we know that there is enough input to fill the current element.
  2,076 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
    692 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
      .           
      .                   let src = msg.as_ptr();
      .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
      .           
      .                   // Process buffer.
      .           
      .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
      .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
      .                   // We know that is true, because last step ensured we have a full
      .                   // element in the buffer.
  1,384 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
      .           
      .                   for i in 0..last {
  5,298 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
  5,990 ( 0.00%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
 10,596 ( 0.00%)              self.state.v0 ^= elem;
      .                   }
      .           
      .                   // Process the remaining element-sized chunks of input.
      .                   let mut processed = needed_in_elem;
  1,384 ( 0.00%)          let input_left = length - processed;
    528 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
      .                   let extra_bytes_left = input_left % ELEM_SIZE;
      .           
      .                   for _ in 0..elems_left {
    338 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
    338 ( 0.00%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
    338 ( 0.00%)              self.state.v0 ^= elem;
    676 ( 0.00%)              processed += ELEM_SIZE;
      .                   }
      .           
      .                   // Copy remaining input into start of buffer.
      .                   let src = msg.as_ptr().add(processed);
      .                   let dst = self.buf.as_mut_ptr() as *mut u8;
      .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
      .           
    692 ( 0.00%)          self.nbuf = extra_bytes_left;
  3,460 ( 0.00%)          self.processed += nbuf + processed;
  4,152 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn finish128(mut self) -> (u64, u64) {
      .                   debug_assert!(self.nbuf < BUFFER_SIZE);
      .           
      .                   // Process full elements in buffer.
  4,311 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
      .           
      .                   // Since we're consuming self, avoid updating members for a potential
      .                   // performance gain.
  5,748 ( 0.00%)          let mut state = self.state;
      .           
      .                   for i in 0..last {
  6,249 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
  6,249 ( 0.00%)              state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut state);
  6,249 ( 0.00%)              state.v0 ^= elem;
      .                   }
      .           
      .                   // Get remaining partial element.
  2,874 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
      .                       unsafe {
      .                           // Ensure element is initialized by writing zero bytes. At most
      .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
      .                           // to write this many because we have the spill and we maintain
      .                           // `self.nbuf` such that this write will start before the spill.
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
      .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
  1,284 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
      .                       }
      .                   } else {
      .                       0
      .                   };
      .           
      .                   // Finalize the hash.
  4,158 ( 0.00%)          let length = self.processed + self.nbuf;
  2,872 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
      .           
  1,436 ( 0.00%)          state.v3 ^= b;
      .                   Sip24Rounds::c_rounds(&mut state);
  1,436 ( 0.00%)          state.v0 ^= b;
      .           
  1,436 ( 0.00%)          state.v2 ^= 0xee;
      .                   Sip24Rounds::d_rounds(&mut state);
  3,146 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
      .           
    272 ( 0.00%)          state.v1 ^= 0xdd;
      .                   Sip24Rounds::d_rounds(&mut state);
    272 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
      .           
      .                   (_0, _1)
      .               }
      .           }
      .           
      .           impl Hasher for SipHasher128 {
      .               #[inline]
      .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
      .           }
      .           
      .           #[derive(Debug, Clone, Default)]
      .           struct Sip24Rounds;
      .           
      .           impl Sip24Rounds {
      .               #[inline]
      .               fn c_rounds(state: &mut State) {
177,526 ( 0.08%)          compress!(state);
198,748 ( 0.09%)          compress!(state);
      .               }
      .           
      .               #[inline]
      .               fn d_rounds(state: &mut State) {
  6,288 ( 0.00%)          compress!(state);
  6,288 ( 0.00%)          compress!(state);
  6,288 ( 0.00%)          compress!(state);
  4,853 ( 0.00%)          compress!(state);
      .               }
      .           }

 27,561 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs
--------------------------------------------------------------------------------
Ir              

-- line 121 ----------------------------------------
     .           #[derive(Debug)]
     .           pub enum ProcessResult<O, E> {
     .               Unchanged,
     .               Changed(Vec<O>),
     .               Error(E),
     .           }
     .           
     .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
 1,420 ( 0.00%)  struct ObligationTreeId(usize);
     .           
     .           type ObligationTreeIdGenerator =
     .               std::iter::Map<std::ops::RangeFrom<usize>, fn(usize) -> ObligationTreeId>;
     .           
     .           pub struct ObligationForest<O: ForestObligation> {
     .               /// The list of obligations. In between calls to `process_obligations`,
     .               /// this list only contains nodes in the `Pending` or `Waiting` state.
     .               ///
-- line 137 ----------------------------------------
-- line 181 ----------------------------------------
     .               has_parent: bool,
     .           
     .               /// Identifier of the obligation tree to which this node belongs.
     .               obligation_tree_id: ObligationTreeId,
     .           }
     .           
     .           impl<O> Node<O> {
     .               fn new(parent: Option<usize>, obligation: O, obligation_tree_id: ObligationTreeId) -> Node<O> {
16,624 ( 0.01%)          Node {
     .                       obligation,
     .                       state: Cell::new(NodeState::Pending),
 2,026 ( 0.00%)              dependents: if let Some(parent_index) = parent { vec![parent_index] } else { vec![] },
     .                       has_parent: parent.is_some(),
     .                       obligation_tree_id,
     .                   }
     .               }
     .           }
     .           
     .           /// The state of one node in some tree within the forest. This represents the
     .           /// current state of processing for the obligation (of type `O`) associated
-- line 200 ----------------------------------------
-- line 223 ----------------------------------------
     .           ///  |     compress()
     .           ///  v
     .           /// (Removed)
     .           /// ```
     .           /// The `Error` state can be introduced in several places, via `error_at()`.
     .           ///
     .           /// Outside of `ObligationForest` methods, nodes should be either `Pending` or
     .           /// `Waiting`.
40,337 ( 0.02%)  #[derive(Debug, Copy, Clone, PartialEq, Eq)]
     .           enum NodeState {
     .               /// This obligation has not yet been selected successfully. Cannot have
     .               /// subobligations.
     .               Pending,
     .           
     .               /// This obligation was selected successfully, but may or may not have
     .               /// subobligations.
     .               Success,
-- line 239 ----------------------------------------
-- line 279 ----------------------------------------
     .               pub stalled: bool,
     .           }
     .           
     .           impl<O, E> OutcomeTrait for Outcome<O, E> {
     .               type Error = Error<O, E>;
     .               type Obligation = O;
     .           
     .               fn new() -> Self {
 2,308 ( 0.00%)          Self { stalled: true, errors: vec![] }
     .               }
     .           
     .               fn mark_not_stalled(&mut self) {
 1,039 ( 0.00%)          self.stalled = false;
     .               }
     .           
     .               fn is_stalled(&self) -> bool {
   641 ( 0.00%)          self.stalled
     .               }
     .           
     .               fn record_completed(&mut self, _outcome: &Self::Obligation) {
     .                   // do nothing
     .               }
     .           
     .               fn record_error(&mut self, error: Self::Error) {
    48 ( 0.00%)          self.errors.push(error)
     .               }
     .           }
     .           
     .           #[derive(Debug, PartialEq, Eq)]
     .           pub struct Error<O, E> {
     .               pub error: E,
     .               pub backtrace: Vec<O>,
     .           }
     .           
     .           impl<O: ForestObligation> ObligationForest<O> {
   333 ( 0.00%)      pub fn new() -> ObligationForest<O> {
 3,996 ( 0.00%)          ObligationForest {
     .                       nodes: vec![],
     .                       done_cache: Default::default(),
     .                       active_cache: Default::default(),
     .                       reused_node_vec: vec![],
     .                       obligation_tree_id_generator: (0..).map(ObligationTreeId),
     .                       error_cache: Default::default(),
     .                   }
   333 ( 0.00%)      }
     .           
     .               /// Returns the total number of nodes in the forest that have not
     .               /// yet been fully resolved.
     .               pub fn len(&self) -> usize {
     .                   self.nodes.len()
     .               }
     .           
     .               /// Registers an obligation.
     .               pub fn register_obligation(&mut self, obligation: O) {
     .                   // Ignore errors here - there is no guarantee of success.
13,728 ( 0.01%)          let _ = self.register_obligation_at(obligation, None);
     .               }
     .           
     .               // Returns Err(()) if we already know this obligation failed.
17,512 ( 0.01%)      fn register_obligation_at(&mut self, obligation: O, parent: Option<usize>) -> Result<(), ()> {
 3,184 ( 0.00%)          let cache_key = obligation.as_cache_key();
 3,184 ( 0.00%)          if self.done_cache.contains(&cache_key) {
     .                       debug!("register_obligation_at: ignoring already done obligation: {:?}", obligation);
     .                       return Ok(());
     .                   }
     .           
 6,942 ( 0.00%)          match self.active_cache.entry(cache_key) {
     .                       Entry::Occupied(o) => {
   236 ( 0.00%)                  let node = &mut self.nodes[*o.get()];
   236 ( 0.00%)                  if let Some(parent_index) = parent {
     .                               // If the node is already in `active_cache`, it has already
     .                               // had its chance to be marked with a parent. So if it's
     .                               // not already present, just dump `parent` into the
     .                               // dependents as a non-parent.
   234 ( 0.00%)                      if !node.dependents.contains(&parent_index) {
     .                                   node.dependents.push(parent_index);
     .                               }
     .                           }
   354 ( 0.00%)                  if let NodeState::Error = node.state.get() { Err(()) } else { Ok(()) }
     .                       }
 3,117 ( 0.00%)              Entry::Vacant(v) => {
 6,234 ( 0.00%)                  let obligation_tree_id = match parent {
   658 ( 0.00%)                      Some(parent_index) => self.nodes[parent_index].obligation_tree_id,
     .                               None => self.obligation_tree_id_generator.next().unwrap(),
     .                           };
     .           
     .                           let already_failed = parent.is_some()
     .                               && self
     .                                   .error_cache
     .                                   .get(&obligation_tree_id)
     .                                   .map_or(false, |errors| errors.contains(v.key()));
     .           
     .                           if already_failed {
     .                               Err(())
     .                           } else {
 1,039 ( 0.00%)                      let new_index = self.nodes.len();
     .                               v.insert(new_index);
     .                               self.nodes.push(Node::new(parent, obligation, obligation_tree_id));
     .                               Ok(())
     .                           }
     .                       }
     .                   }
14,328 ( 0.01%)      }
     .           
     .               /// Converts all remaining obligations to the given error.
 2,170 ( 0.00%)      pub fn to_errors<E: Clone>(&mut self, error: E) -> Vec<Error<O, E>> {
     .                   let errors = self
     .                       .nodes
     .                       .iter()
     .                       .enumerate()
     .                       .filter(|(_index, node)| node.state.get() == NodeState::Pending)
     .                       .map(|(index, _node)| Error { error: error.clone(), backtrace: self.error_at(index) })
     .                       .collect();
     .           
   620 ( 0.00%)          self.compress(|_| assert!(false));
     .                   errors
 1,860 ( 0.00%)      }
     .           
     .               /// Returns the set of obligations that are in a pending state.
     .               pub fn map_pending_obligations<P, F>(&self, f: F) -> Vec<P>
     .               where
     .                   F: Fn(&O) -> P,
     .               {
     2 ( 0.00%)          self.nodes
     .                       .iter()
     .                       .filter(|node| node.state.get() == NodeState::Pending)
     .                       .map(|node| f(&node.obligation))
     .                       .collect()
     .               }
     .           
    21 ( 0.00%)      fn insert_into_error_cache(&mut self, index: usize) {
     .                   let node = &self.nodes[index];
     3 ( 0.00%)          self.error_cache
     9 ( 0.00%)              .entry(node.obligation_tree_id)
     .                       .or_default()
     .                       .insert(node.obligation.as_cache_key());
    24 ( 0.00%)      }
     .           
     .               /// Performs a pass through the obligation list. This must
     .               /// be called in a loop until `outcome.stalled` is false.
     .               ///
     .               /// This _cannot_ be unrolled (presently, at least).
     .               #[inline(never)]
10,386 ( 0.00%)      pub fn process_obligations<P, OUT>(&mut self, processor: &mut P) -> OUT
     .               where
     .                   P: ObligationProcessor<Obligation = O>,
     .                   OUT: OutcomeTrait<Obligation = O, Error = Error<O, P::Error>>,
     .               {
     .                   let mut outcome = OUT::new();
     .           
     .                   // Note that the loop body can append new nodes, and those new nodes
     .                   // will then be processed by subsequent iterations of the loop.
     .                   //
     .                   // We can't use an iterator for the loop because `self.nodes` is
     .                   // appended to and the borrow checker would complain. We also can't use
     .                   // `for index in 0..self.nodes.len() { ... }` because the range would
     .                   // be computed with the initial length, and we would miss the appended
     .                   // nodes. Therefore we use a `while` loop.
     .                   let mut index = 0;
18,332 ( 0.01%)          while let Some(node) = self.nodes.get_mut(index) {
     .                       // `processor.process_obligation` can modify the predicate within
     .                       // `node.obligation`, and that predicate is the key used for
     .                       // `self.active_cache`. This means that `self.active_cache` can get
     .                       // out of sync with `nodes`. It's not very common, but it does
     .                       // happen, and code in `compress` has to allow for it.
34,356 ( 0.02%)              if node.state.get() != NodeState::Pending {
 1,750 ( 0.00%)                  index += 1;
     .                           continue;
     .                       }
     .           
 5,729 ( 0.00%)              match processor.process_obligation(&mut node.obligation) {
     .                           ProcessResult::Unchanged => {
     .                               // No change in state.
     .                           }
 4,144 ( 0.00%)                  ProcessResult::Changed(children) => {
     .                               // We are not (yet) stalled.
     .                               outcome.mark_not_stalled();
     .                               node.state.set(NodeState::Success);
     .           
 5,216 ( 0.00%)                      for child in children {
 9,112 ( 0.00%)                          let st = self.register_obligation_at(child, Some(index));
 1,072 ( 0.00%)                          if let Err(()) = st {
     .                                       // Error already reported - propagate it
     .                                       // to our node.
     .                                       self.error_at(index);
     .                                   }
     .                               }
     .                           }
     .                           ProcessResult::Error(err) => {
     .                               outcome.mark_not_stalled();
    99 ( 0.00%)                      outcome.record_error(Error { error: err, backtrace: self.error_at(index) });
     .                           }
     .                       }
30,856 ( 0.01%)              index += 1;
     .                   }
     .           
     .                   // There's no need to perform marking, cycle processing and compression when nothing
     .                   // changed.
   641 ( 0.00%)          if !outcome.is_stalled() {
     .                       self.mark_successes();
     .                       self.process_cycles(processor);
   618 ( 0.00%)              self.compress(|obl| outcome.record_completed(obl));
     .                   }
     .           
     .                   outcome
10,386 ( 0.00%)      }
     .           
     .               /// Returns a vector of obligations for `p` and all of its
     .               /// ancestors, putting them into the error state in the process.
    21 ( 0.00%)      fn error_at(&self, mut index: usize) -> Vec<O> {
     .                   let mut error_stack: Vec<usize> = vec![];
     .                   let mut trace = vec![];
     .           
     .                   loop {
     .                       let node = &self.nodes[index];
     3 ( 0.00%)              node.state.set(NodeState::Error);
     .                       trace.push(node.obligation.clone());
     6 ( 0.00%)              if node.has_parent {
     .                           // The first dependent is the parent, which is treated
     .                           // specially.
     .                           error_stack.extend(node.dependents.iter().skip(1));
     .                           index = node.dependents[0];
     .                       } else {
     .                           // No parent; treat all dependents non-specially.
     .                           error_stack.extend(node.dependents.iter());
     .                           break;
-- line 504 ----------------------------------------
-- line 509 ----------------------------------------
     .                       let node = &self.nodes[index];
     .                       if node.state.get() != NodeState::Error {
     .                           node.state.set(NodeState::Error);
     .                           error_stack.extend(node.dependents.iter());
     .                       }
     .                   }
     .           
     .                   trace
    24 ( 0.00%)      }
     .           
     .               /// Mark all `Waiting` nodes as `Success`, except those that depend on a
     .               /// pending node.
     .               fn mark_successes(&self) {
     .                   // Convert all `Waiting` nodes to `Success`.
     .                   for node in &self.nodes {
10,909 ( 0.01%)              if node.state.get() == NodeState::Waiting {
     .                           node.state.set(NodeState::Success);
     .                       }
     .                   }
     .           
     .                   // Convert `Success` nodes that depend on a pending node back to
     .                   // `Waiting`.
     .                   for node in &self.nodes {
 7,008 ( 0.00%)              if node.state.get() == NodeState::Pending {
     .                           // This call site is hot.
     .                           self.inlined_mark_dependents_as_waiting(node);
     .                       }
     .                   }
     .               }
     .           
     .               // This always-inlined function is for the hot call site.
     .               #[inline(always)]
     .               fn inlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
   649 ( 0.00%)          for &index in node.dependents.iter() {
     .                       let node = &self.nodes[index];
   649 ( 0.00%)              let state = node.state.get();
   649 ( 0.00%)              if state == NodeState::Success {
     .                           // This call site is cold.
 1,881 ( 0.00%)                  self.uninlined_mark_dependents_as_waiting(node);
     .                       } else {
     .                           debug_assert!(state == NodeState::Waiting || state == NodeState::Error)
     .                       }
     .                   }
     .               }
     .           
     .               // This never-inlined function is for the cold call site.
     .               #[inline(never)]
 4,389 ( 0.00%)      fn uninlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
     .                   // Mark node Waiting in the cold uninlined code instead of the hot inlined
     .                   node.state.set(NodeState::Waiting);
     .                   self.inlined_mark_dependents_as_waiting(node)
 5,016 ( 0.00%)      }
     .           
     .               /// Report cycles between all `Success` nodes, and convert all `Success`
     .               /// nodes to `Done`. This must be called after `mark_successes`.
     .               fn process_cycles<P>(&mut self, processor: &mut P)
     .               where
     .                   P: ObligationProcessor<Obligation = O>,
     .               {
   309 ( 0.00%)          let mut stack = std::mem::take(&mut self.reused_node_vec);
     .                   for (index, node) in self.nodes.iter().enumerate() {
     .                       // For some benchmarks this state test is extremely hot. It's a win
     .                       // to handle the no-op cases immediately to avoid the cost of the
     .                       // function call.
 7,008 ( 0.00%)              if node.state.get() == NodeState::Success {
 4,960 ( 0.00%)                  self.find_cycles_from_node(&mut stack, processor, index);
     .                       }
     .                   }
     .           
     .                   debug_assert!(stack.is_empty());
 2,472 ( 0.00%)          self.reused_node_vec = stack;
     .               }
     .           
12,465 ( 0.01%)      fn find_cycles_from_node<P>(&self, stack: &mut Vec<usize>, processor: &mut P, index: usize)
     .               where
     .                   P: ObligationProcessor<Obligation = O>,
     .               {
     .                   let node = &self.nodes[index];
 2,770 ( 0.00%)          if node.state.get() == NodeState::Success {
    88 ( 0.00%)              match stack.iter().rposition(|&n| n == index) {
     .                           None => {
     .                               stack.push(index);
   393 ( 0.00%)                      for &dep_index in node.dependents.iter() {
 1,572 ( 0.00%)                          self.find_cycles_from_node(stack, processor, dep_index);
     .                               }
     .                               stack.pop();
     .                               node.state.set(NodeState::Done);
     .                           }
     .                           Some(rpos) => {
     .                               // Cycle detected.
     .                               processor.process_backedge(
     .                                   stack[rpos..].iter().map(|&i| &self.nodes[i].obligation),
     .                                   PhantomData,
     .                               );
     .                           }
     .                       }
     .                   }
11,080 ( 0.01%)      }
     .           
     .               /// Compresses the vector, removing all popped nodes. This adjusts the
     .               /// indices and hence invalidates any outstanding indices. `process_cycles`
     .               /// must be run beforehand to remove any cycles on `Success` nodes.
     .               #[inline(never)]
 4,642 ( 0.00%)      fn compress(&mut self, mut outcome_cb: impl FnMut(&O)) {
   619 ( 0.00%)          let orig_nodes_len = self.nodes.len();
     .                   let mut node_rewrites: Vec<_> = std::mem::take(&mut self.reused_node_vec);
     .                   debug_assert!(node_rewrites.is_empty());
     .                   node_rewrites.extend(0..orig_nodes_len);
     .                   let mut dead_nodes = 0;
     .           
     .                   // Move removable nodes to the end, preserving the order of the
     .                   // remaining nodes.
     .                   //
     .                   // LOOP INVARIANT:
     .                   //     self.nodes[0..index - dead_nodes] are the first remaining nodes
     .                   //     self.nodes[index - dead_nodes..index] are all dead
     .                   //     self.nodes[index..] are unchanged
     .                   for index in 0..orig_nodes_len {
     .                       let node = &self.nodes[index];
36,276 ( 0.02%)              match node.state.get() {
     .                           NodeState::Pending | NodeState::Waiting => {
11,938 ( 0.01%)                      if dead_nodes > 0 {
 4,767 ( 0.00%)                          self.nodes.swap(index, index - dead_nodes);
 7,945 ( 0.00%)                          node_rewrites[index] -= dead_nodes;
     .                               }
     .                           }
     .                           NodeState::Done => {
     .                               // This lookup can fail because the contents of
     .                               // `self.active_cache` are not guaranteed to match those of
     .                               // `self.nodes`. See the comment in `process_obligation`
     .                               // for more details.
 3,946 ( 0.00%)                      if let Some((predicate, _)) =
 3,108 ( 0.00%)                          self.active_cache.remove_entry(&node.obligation.as_cache_key())
     .                               {
     .                                   self.done_cache.insert(predicate);
     .                               } else {
     .                                   self.done_cache.insert(node.obligation.as_cache_key().clone());
     .                               }
     .                               // Extract the success stories.
     .                               outcome_cb(&node.obligation);
 2,072 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
 2,072 ( 0.00%)                      dead_nodes += 1;
     .                           }
     .                           NodeState::Error => {
     .                               // We *intentionally* remove the node from the cache at this point. Otherwise
     .                               // tests must come up with a different type on every type error they
     .                               // check against.
     9 ( 0.00%)                      self.active_cache.remove(&node.obligation.as_cache_key());
     6 ( 0.00%)                      self.insert_into_error_cache(index);
     6 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
     6 ( 0.00%)                      dead_nodes += 1;
     .                           }
     .                           NodeState::Success => unreachable!(),
     .                       }
     .                   }
     .           
     .                   if dead_nodes > 0 {
     .                       // Remove the dead nodes and rewrite indices.
   608 ( 0.00%)              self.nodes.truncate(orig_nodes_len - dead_nodes);
   304 ( 0.00%)              self.apply_rewrites(&node_rewrites);
     .                   }
     .           
     .                   node_rewrites.truncate(0);
 2,476 ( 0.00%)          self.reused_node_vec = node_rewrites;
 4,952 ( 0.00%)      }
     .           
     .               #[inline(never)]
 2,736 ( 0.00%)      fn apply_rewrites(&mut self, node_rewrites: &[usize]) {
     .                   let orig_nodes_len = node_rewrites.len();
     .           
     .                   for node in &mut self.nodes {
     .                       let mut i = 0;
 6,453 ( 0.00%)              while let Some(dependent) = node.dependents.get_mut(i) {
 2,488 ( 0.00%)                  let new_index = node_rewrites[*dependent];
 1,244 ( 0.00%)                  if new_index >= orig_nodes_len {
     .                               node.dependents.swap_remove(i);
     .                               if i == 0 && node.has_parent {
     .                                   // We just removed the parent.
     .                                   node.has_parent = false;
     .                               }
     .                           } else {
   622 ( 0.00%)                      *dependent = new_index;
 1,244 ( 0.00%)                      i += 1;
     .                           }
     .                       }
     .                   }
     .           
     .                   // This updating of `self.active_cache` is necessary because the
     .                   // removal of nodes within `compress` can fail. See above.
     .                   self.active_cache.retain(|_predicate, index| {
24,116 ( 0.01%)              let new_index = node_rewrites[*index];
12,058 ( 0.01%)              if new_index >= orig_nodes_len {
     .                           false
     .                       } else {
 5,831 ( 0.00%)                  *index = new_index;
     .                           true
     .                       }
     .                   });
 2,432 ( 0.00%)      }
     .           }

54,632 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir              

-- line 108 ----------------------------------------
     .                   suppress_errors: bool,
     .               },
     .           }
     .           
     .           impl RegionckMode {
     .               /// Indicates that the MIR borrowck will repeat these region
     .               /// checks, so we should ignore errors if NLL is (unconditionally)
     .               /// enabled.
     4 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
     .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
     .                   // this always `true` and then proceed to eliminate the dead code.
     4 ( 0.00%)          match tcx.borrowck_mode() {
     .                       // If we're on Migrate mode, report AST region errors
     .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
     .           
     .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
     .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
     .                   }
     8 ( 0.00%)      }
     .           }
     .           
     .           /// This type contains all the things within `InferCtxt` that sit within a
     .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
     .           /// operations are hot enough that we want only one call to `borrow_mut` per
     .           /// call to `start_snapshot` and `rollback_to`.
     .           pub struct InferCtxtInner<'tcx> {
     .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
     .               /// type instantiations (`ty::Infer`) to the actual opaque
     .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
     .               /// opaque type inference variables to their corresponding
     .               /// opaque type.
     .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
     .           }
     .           
     .           impl<'tcx> InferCtxtInner<'tcx> {
 2,775 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
18,870 ( 0.01%)          InferCtxtInner {
     .                       projection_cache: Default::default(),
     .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
     .                       undo_log: InferCtxtUndoLogs::default(),
     .                       const_unification_storage: ut::UnificationTableStorage::new(),
     .                       int_unification_storage: ut::UnificationTableStorage::new(),
     .                       float_unification_storage: ut::UnificationTableStorage::new(),
 1,665 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
     .                       region_obligations: vec![],
     .                       opaque_types: Default::default(),
     .                       opaque_types_vars: Default::default(),
     .                   }
 3,330 ( 0.00%)      }
     .           
     .               #[inline]
     .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
     .                   &self.region_obligations
     .               }
     .           
     .               #[inline]
     .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
   120 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
     .               }
     .           
     .               #[inline]
     .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
27,845 ( 0.01%)          self.type_variable_storage.with_log(&mut self.undo_log)
     .               }
     .           
     .               #[inline]
     .               fn int_unification_table(
     .                   &mut self,
     .               ) -> ut::UnificationTable<
     .                   ut::InPlace<
     .                       ty::IntVid,
     .                       &mut ut::UnificationStorage<ty::IntVid>,
     .                       &mut InferCtxtUndoLogs<'tcx>,
     .                   >,
     .               > {
    63 ( 0.00%)          self.int_unification_storage.with_log(&mut self.undo_log)
     .               }
     .           
     .               #[inline]
     .               fn float_unification_table(
     .                   &mut self,
     .               ) -> ut::UnificationTable<
     .                   ut::InPlace<
     .                       ty::FloatVid,
-- line 258 ----------------------------------------
-- line 268 ----------------------------------------
     .                   &mut self,
     .               ) -> ut::UnificationTable<
     .                   ut::InPlace<
     .                       ty::ConstVid<'tcx>,
     .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
     .                       &mut InferCtxtUndoLogs<'tcx>,
     .                   >,
     .               > {
    47 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
     .               }
     .           
     .               #[inline]
     .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
 3,692 ( 0.00%)          self.region_constraint_storage
     .                       .as_mut()
     .                       .expect("region constraints already solved")
 4,288 ( 0.00%)              .with_log(&mut self.undo_log)
     .               }
     .           }
     .           
     .           pub struct InferCtxt<'a, 'tcx> {
     .               pub tcx: TyCtxt<'tcx>,
     .           
     .               /// The `DefId` of the item in whose context we are performing inference or typeck.
     .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
     .               /// item we are type-checking, and just consider those names as
     .               /// part of the root universe. So this would only get incremented
     .               /// when we enter into a higher-ranked (`for<..>`) type or trait
     .               /// bound.
     .               universe: Cell<ty::UniverseIndex>,
     .           }
     .           
     .           /// See the `error_reporting` module for more details.
 5,768 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
     .           pub enum ValuePairs<'tcx> {
     .               Types(ExpectedFound<Ty<'tcx>>),
     .               Regions(ExpectedFound<ty::Region<'tcx>>),
     .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
     .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
     .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
     .           }
     .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
     .           pub struct TypeTrace<'tcx> {
     .               cause: ObligationCause<'tcx>,
     .               values: ValuePairs<'tcx>,
     .           }
     .           
     .           /// The origin of a `r1 <= r2` constraint.
     .           ///
     .           /// See `error_reporting` module for more details
 6,116 ( 0.00%)  #[derive(Clone, Debug)]
     .           pub enum SubregionOrigin<'tcx> {
     .               /// Arose from a subtyping relation
   386 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
     .           
     .               /// When casting `&'a T` to an `&'b Trait` object,
     .               /// relating `'a` to `'b`
     .               RelateObjectBound(Span),
     .           
     .               /// Some type parameter was instantiated with the given type,
     .               /// and that type must outlive some region.
    14 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
     .           
     .               /// The given region parameter was instantiated with a region
     .               /// that must outlive some other region.
     .               RelateRegionParamBound(Span),
     .           
     .               /// Creating a pointer `b` to contents of another reference
     .               Reborrow(Span),
     .           
     .               /// Creating a pointer `b` to contents of an upvar
     .               ReborrowUpvar(Span, ty::UpvarId),
     .           
     .               /// Data with type `Ty<'tcx>` was borrowed
    24 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
     .           
     .               /// (&'a &'b T) where a >= b
    14 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
     .           
     .               /// Comparing the signature and requirements of an impl method against
     .               /// the containing trait.
     .               CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
     .           
     .               /// Comparing the signature and requirements of an impl associated type
     .               /// against the containing trait
     .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
-- line 426 ----------------------------------------
-- line 554 ----------------------------------------
     .               defining_use_anchor: Option<LocalDefId>,
     .           }
     .           
     .           pub trait TyCtxtInferExt<'tcx> {
     .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
     .           }
     .           
     .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
   555 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
 1,665 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
   555 ( 0.00%)      }
     .           }
     .           
     .           impl<'tcx> InferCtxtBuilder<'tcx> {
     .               /// Used only by `rustc_typeck` during body type-checking/inference,
     .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
     .               /// Will also change the scope for opaque type defining use checks to the given owner.
    72 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
    88 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
    40 ( 0.00%)          self.with_opaque_type_inference(table_owner)
    56 ( 0.00%)      }
     .           
     .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
     .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
     .               ///
     .               /// It is only meant to be called in two places, for typeck
     .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
     .               /// in mir borrowck.
    10 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
     5 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
    26 ( 0.00%)          self
    15 ( 0.00%)      }
     .           
     .               /// Given a canonical value `C` as a starting point, create an
     .               /// inference context that contains each of the bound values
     .               /// within instantiated as a fresh variable. The `f` closure is
     .               /// invoked with the new infcx, along with the instantiated value
     .               /// `V` and a substitution `S`. This substitution `S` maps from
     .               /// the bound values in `C` to their instantiated values in `V`
     .               /// (in other words, `S(C) = V`).
 1,995 ( 0.00%)      pub fn enter_with_canonical<T, R>(
     .                   &mut self,
     .                   span: Span,
     .                   canonical: &Canonical<'tcx, T>,
     .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
     .               ) -> R
     .               where
     .                   T: TypeFoldable<'tcx>,
     .               {
     .                   self.enter(|infcx| {
 2,186 ( 0.00%)              let (value, subst) =
    95 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
 3,371 ( 0.00%)              f(infcx, value, subst)
     .                   })
 2,156 ( 0.00%)      }
     .           
 1,835 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
 1,565 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
     .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
22,530 ( 0.01%)          f(InferCtxt {
     .                       tcx,
     .                       defining_use_anchor,
     .                       in_progress_typeck_results,
   555 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
     .                       lexical_region_resolutions: RefCell::new(None),
     .                       selection_cache: Default::default(),
     .                       evaluation_cache: Default::default(),
     .                       reported_trait_errors: Default::default(),
     .                       reported_closure_mismatch: Default::default(),
     .                       tainted_by_errors_flag: Cell::new(false),
   555 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
     .                       in_snapshot: Cell::new(false),
     .                       skip_leak_check: Cell::new(false),
     .                       universe: Cell::new(ty::UniverseIndex::ROOT),
     .                   })
 1,982 ( 0.00%)      }
     .           }
     .           
     .           impl<'tcx, T> InferOk<'tcx, T> {
     .               pub fn unit(self) -> InferOk<'tcx, ()> {
     .                   InferOk { value: (), obligations: self.obligations }
     .               }
     .           
     .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
     .               pub fn into_value_registering_obligations(
     .                   self,
     .                   infcx: &InferCtxt<'_, 'tcx>,
     .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
     .               ) -> T {
    23 ( 0.00%)          let InferOk { value, obligations } = self;
    92 ( 0.00%)          for obligation in obligations {
     .                       fulfill_cx.register_predicate_obligation(infcx, obligation);
     .                   }
     .                   value
     .               }
     .           }
     .           
     .           impl<'tcx> InferOk<'tcx, ()> {
   295 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
 1,180 ( 0.00%)          self.obligations
   295 ( 0.00%)      }
     .           }
     .           
     .           #[must_use = "once you start a snapshot, you should always consume it"]
     .           pub struct CombinedSnapshot<'a, 'tcx> {
     .               undo_snapshot: Snapshot<'tcx>,
     .               region_constraints_snapshot: RegionSnapshot,
     .               universe: ty::UniverseIndex,
     .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
     .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
     .                   debug!("canonical consts: {:?}", &canonical.value);
     .           
     .                   self.tcx.try_unify_abstract_consts(canonical.value)
     .               }
     .           
     .               pub fn is_in_snapshot(&self) -> bool {
     .                   self.in_snapshot.get()
 1,056 ( 0.00%)      }
     .           
 7,608 ( 0.00%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
 8,559 ( 0.00%)          t.fold_with(&mut self.freshener())
 8,559 ( 0.00%)      }
     .           
     .               /// Returns the origin of the type variable identified by `vid`, or `None`
     .               /// if this is not a type variable.
     .               ///
     .               /// No attempt is made to resolve `ty`.
    12 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
    24 ( 0.00%)          match *ty.kind() {
     6 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
    24 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
     .                       }
     .                       _ => None,
     .                   }
    24 ( 0.00%)      }
     .           
   951 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
     .                   freshen::TypeFreshener::new(self, false)
   951 ( 0.00%)      }
     .           
     .               /// Like `freshener`, but does not replace `'static` regions.
 2,951 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
     .                   freshen::TypeFreshener::new(self, true)
 2,951 ( 0.00%)      }
     .           
    20 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
    10 ( 0.00%)          let mut inner = self.inner.borrow_mut();
    10 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
     .                       .type_variables()
     .                       .unsolved_variables()
     .                       .into_iter()
    10 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
     .                       .collect();
     .                   vars.extend(
     .                       (0..inner.int_unification_table().len())
     .                           .map(|i| ty::IntVid { index: i as u32 })
    12 ( 0.00%)                  .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
     .                           .map(|v| self.tcx.mk_int_var(v)),
     .                   );
     .                   vars.extend(
     .                       (0..inner.float_unification_table().len())
     .                           .map(|i| ty::FloatVid { index: i as u32 })
     .                           .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
     .                           .map(|v| self.tcx.mk_float_var(v)),
     .                   );
     .                   vars
    35 ( 0.00%)      }
     .           
 1,485 ( 0.00%)      fn combine_fields(
     .                   &'a self,
     .                   trace: TypeTrace<'tcx>,
     .                   param_env: ty::ParamEnv<'tcx>,
     .               ) -> CombineFields<'a, 'tcx> {
 5,948 ( 0.00%)          CombineFields {
     .                       infcx: self,
14,870 ( 0.01%)              trace,
     .                       cause: None,
     .                       param_env,
     .                       obligations: PredicateObligations::new(),
     .                   }
 1,485 ( 0.00%)      }
     .           
     .               /// Clear the "currently in a snapshot" flag, invoke the closure,
     .               /// then restore the flag to its original value. This flag is a
     .               /// debugging measure designed to detect cases where we start a
     .               /// snapshot, create type variables, and register obligations
     .               /// which may involve those type variables in the fulfillment cx,
     .               /// potentially leaving "dangling type variables" behind.
     .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 755 ----------------------------------------
     .               /// better than grovelling through megabytes of `RUSTC_LOG` output.
     .               ///
     .               /// HOWEVER, in some cases the flag is unhelpful. In particular, we
     .               /// sometimes create a "mini-fulfilment-cx" in which we enroll
     .               /// obligations. As long as this fulfillment cx is fully drained
     .               /// before we return, this is not a problem, as there won't be any
     .               /// escaping obligations in the main cx. In those cases, you can
     .               /// use this function.
    16 ( 0.00%)      pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
     .               where
     .                   F: FnOnce(&Self) -> R,
     .               {
     .                   let flag = self.in_snapshot.replace(false);
   288 ( 0.00%)          let result = func(self);
     .                   self.in_snapshot.set(flag);
     .                   result
    18 ( 0.00%)      }
     .           
 8,270 ( 0.00%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
     .                   debug!("start_snapshot()");
     .           
     .                   let in_snapshot = self.in_snapshot.replace(true);
     .           
     .                   let mut inner = self.inner.borrow_mut();
     .           
24,810 ( 0.01%)          CombinedSnapshot {
     .                       undo_snapshot: inner.undo_log.start_snapshot(),
     .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
     .                       universe: self.universe(),
     .                       was_in_snapshot: in_snapshot,
     .                       // Borrow typeck results "in progress" (i.e., during typeck)
     .                       // to ban writes from within a snapshot to them.
 4,135 ( 0.00%)              _in_progress_typeck_results: self
     .                           .in_progress_typeck_results
     .                           .map(|typeck_results| typeck_results.borrow()),
     .                   }
16,540 ( 0.01%)      }
     .           
13,365 ( 0.01%)      #[instrument(skip(self, snapshot), level = "debug")]
     .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
     .                   let CombinedSnapshot {
 1,215 ( 0.00%)              undo_snapshot,
 1,215 ( 0.00%)              region_constraints_snapshot,
 1,215 ( 0.00%)              universe,
 1,215 ( 0.00%)              was_in_snapshot,
 2,430 ( 0.00%)              _in_progress_typeck_results,
     .                   } = snapshot;
     .           
     .                   self.in_snapshot.set(was_in_snapshot);
     .                   self.universe.set(universe);
     .           
     .                   let mut inner = self.inner.borrow_mut();
 1,215 ( 0.00%)          inner.rollback_to(undo_snapshot);
     .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
     .               }
     .           
43,800 ( 0.02%)      #[instrument(skip(self, snapshot), level = "debug")]
     .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
     .                   let CombinedSnapshot {
 2,920 ( 0.00%)              undo_snapshot,
     .                       region_constraints_snapshot: _,
     .                       universe: _,
 2,920 ( 0.00%)              was_in_snapshot,
 5,840 ( 0.00%)              _in_progress_typeck_results,
     .                   } = snapshot;
     .           
     .                   self.in_snapshot.set(was_in_snapshot);
     .           
     .                   self.inner.borrow_mut().commit(undo_snapshot);
     .               }
     .           
     .               /// Executes `f` and commit the bindings.
 3,136 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
 3,872 ( 0.00%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
     .               where
     .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
     .               {
   352 ( 0.00%)          let snapshot = self.start_snapshot();
 1,262 ( 0.00%)          let r = f(&snapshot);
 2,464 ( 0.00%)          self.commit_from(snapshot);
 2,034 ( 0.00%)          r
     .               }
     .           
     .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
15,957 ( 0.01%)      #[instrument(skip(self, f), level = "debug")]
19,720 ( 0.01%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
     .               where
     .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
     .               {
 3,214 ( 0.00%)          let snapshot = self.start_snapshot();
 9,126 ( 0.00%)          let r = f(&snapshot);
     .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
 3,659 ( 0.00%)          match r {
     .                       Ok(_) => {
18,161 ( 0.01%)                  self.commit_from(snapshot);
     .                       }
     .                       Err(_) => {
 3,201 ( 0.00%)                  self.rollback_to("commit_if_ok -- error", snapshot);
     .                       }
     .                   }
18,958 ( 0.01%)          r
     .               }
     .           
     .               /// Execute `f` then unroll any bindings it creates.
 6,845 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
 7,891 ( 0.00%)      pub fn probe<R, F>(&self, f: F) -> R
     .               where
     .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
     .               {
 1,705 ( 0.00%)          let snapshot = self.start_snapshot();
 2,689 ( 0.00%)          let r = f(&snapshot);
 8,055 ( 0.00%)          self.rollback_to("probe", snapshot);
 1,067 ( 0.00%)          r
     .               }
     .           
     .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
     .               #[instrument(skip(self, f), level = "debug")]
     .               pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
     .               where
     .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
     .               {
-- line 875 ----------------------------------------
-- line 884 ----------------------------------------
     .                   r
     .               }
     .           
     .               /// Scan the constraints produced since `snapshot` began and returns:
     .               ///
     .               /// - `None` -- if none of them involve "region outlives" constraints
     .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
     .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
   668 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
     .                   &self,
     .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
     .               ) -> Option<bool> {
 1,336 ( 0.00%)          self.inner
     .                       .borrow_mut()
     .                       .unwrap_region_constraints()
     .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
 1,002 ( 0.00%)      }
     .           
     .               pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
     .                   self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
     .               }
     .           
    24 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
     .               where
     .                   T: at::ToTrace<'tcx>,
     .               {
     .                   let origin = &ObligationCause::dummy();
     .                   self.probe(|_| {
     .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
     .                           // Ignore obligations, since we are unrolling
     .                           // everything anyway.
     .                       })
     .                   })
    18 ( 0.00%)      }
     .           
     .               pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
     .               where
     .                   T: at::ToTrace<'tcx>,
     .               {
     .                   let origin = &ObligationCause::dummy();
     .                   self.probe(|_| {
     .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
     .                           // Ignore obligations, since we are unrolling
     .                           // everything anyway.
     .                       })
     .                   })
     .               }
     .           
 1,880 ( 0.00%)      #[instrument(skip(self), level = "debug")]
     .               pub fn sub_regions(
     .                   &self,
     .                   origin: SubregionOrigin<'tcx>,
     .                   a: ty::Region<'tcx>,
     .                   b: ty::Region<'tcx>,
     .               ) {
 1,692 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
     .               }
     .           
     .               /// Require that the region `r` be equal to one of the regions in
     .               /// the set `regions`.
     .               #[instrument(skip(self), level = "debug")]
     .               pub fn member_constraint(
     .                   &self,
     .                   opaque_type_def_id: DefId,
-- line 947 ----------------------------------------
-- line 983 ----------------------------------------
     .                   let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
     .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
     .                       a: p.a,
     .                       b: p.b,
     .                   });
     .                   self.subtype_predicate(cause, param_env, subtype_predicate)
     .               }
     .           
    60 ( 0.00%)      pub fn subtype_predicate(
     .                   &self,
     .                   cause: &ObligationCause<'tcx>,
     .                   param_env: ty::ParamEnv<'tcx>,
     .                   predicate: ty::PolySubtypePredicate<'tcx>,
     .               ) -> Option<InferResult<'tcx, ()>> {
     .                   // Check for two unresolved inference variables, in which case we can
     .                   // make no progress. This is partly a micro-optimization, but it's
     .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
     .                   // earlier that they are sub-unified).
     .                   //
     .                   // Note that we can just skip the binders here because
     .                   // type variables can't (at present, at
     .                   // least) capture any of the things bound by this binder.
     .                   //
     .                   // Note that this sub here is not just for diagnostics - it has semantic
     .                   // effects as well.
     5 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
     5 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
    32 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
     6 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
     .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
     6 ( 0.00%)                  return None;
     .                       }
     .                       _ => {}
     .                   }
     .           
     .                   Some(self.commit_if_ok(|_snapshot| {
     2 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
     .                           self.replace_bound_vars_with_placeholders(predicate);
     .           
     4 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
     .           
     .                       Ok(ok.unit())
     .                   }))
    45 ( 0.00%)      }
     .           
   312 ( 0.00%)      pub fn region_outlives_predicate(
     .                   &self,
     .                   cause: &traits::ObligationCause<'tcx>,
     .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
     .               ) -> UnitResult<'tcx> {
     .                   self.commit_if_ok(|_snapshot| {
     .                       let ty::OutlivesPredicate(r_a, r_b) =
     .                           self.replace_bound_vars_with_placeholders(predicate);
     .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
     .                           RelateRegionParamBound(cause.span)
     .                       });
   260 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
     .                       Ok(())
     .                   })
   208 ( 0.00%)      }
     .           
     .               /// Number of type variables created so far.
     1 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
     .                   self.inner.borrow_mut().type_variables().num_vars()
     2 ( 0.00%)      }
     .           
   812 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
 4,060 ( 0.00%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
 1,218 ( 0.00%)      }
     .           
   796 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
 2,834 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
 1,194 ( 0.00%)      }
     .           
    42 ( 0.00%)      pub fn next_ty_var_in_universe(
     .                   &self,
     .                   origin: TypeVariableOrigin,
     .                   universe: ty::UniverseIndex,
     .               ) -> Ty<'tcx> {
   231 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
    21 ( 0.00%)          self.tcx.mk_ty_var(vid)
    63 ( 0.00%)      }
     .           
     .               pub fn next_const_var(
     .                   &self,
     .                   ty: Ty<'tcx>,
     .                   origin: ConstVariableOrigin,
     .               ) -> &'tcx ty::Const<'tcx> {
     .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
     .               }
-- line 1074 ----------------------------------------
-- line 1090 ----------------------------------------
     .               pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {
     .                   self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
     .                       origin,
     .                       val: ConstVariableValue::Unknown { universe: self.universe() },
     .                   })
     .               }
     .           
     .               fn next_int_var_id(&self) -> IntVid {
    15 ( 0.00%)          self.inner.borrow_mut().int_unification_table().new_key(None)
     .               }
     .           
     9 ( 0.00%)      pub fn next_int_var(&self) -> Ty<'tcx> {
     .                   self.tcx.mk_int_var(self.next_int_var_id())
    12 ( 0.00%)      }
     .           
     .               fn next_float_var_id(&self) -> FloatVid {
     .                   self.inner.borrow_mut().float_unification_table().new_key(None)
     .               }
     .           
     .               pub fn next_float_var(&self) -> Ty<'tcx> {
     .                   self.tcx.mk_float_var(self.next_float_var_id())
     .               }
     .           
     .               /// Creates a fresh region variable with the next available index.
     .               /// The variable will be created in the maximum universe created
     .               /// thus far, allowing it to name any region created thus far.
   644 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
10,128 ( 0.00%)          self.next_region_var_in_universe(origin, self.universe())
 1,288 ( 0.00%)      }
     .           
     .               /// Creates a fresh region variable with the next available index
     .               /// in the given universe; typically, you can use
     .               /// `next_region_var` and just use the maximal universe.
 3,848 ( 0.00%)      pub fn next_region_var_in_universe(
     .                   &self,
     .                   origin: RegionVariableOrigin,
     .                   universe: ty::UniverseIndex,
     .               ) -> ty::Region<'tcx> {
     .                   let region_var =
25,012 ( 0.01%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
 9,620 ( 0.00%)          self.tcx.mk_region(ty::ReVar(region_var))
 5,772 ( 0.00%)      }
     .           
     .               /// Return the universe that the region `r` was created in.  For
     .               /// most regions (e.g., `'static`, named regions from the user,
     .               /// etc) this is the root universe U0. For inference variables or
     .               /// placeholders, however, it will return the universe which which
     .               /// they are associated.
   164 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
     .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
   246 ( 0.00%)      }
     .           
     .               /// Number of region variables created so far.
    42 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
     .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
    63 ( 0.00%)      }
     .           
     .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
   682 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
     .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
 1,364 ( 0.00%)      }
     .           
     .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
     7 ( 0.00%)      pub fn next_nll_region_var_in_universe(
     .                   &self,
     .                   origin: NllRegionVariableOrigin,
     .                   universe: ty::UniverseIndex,
     .               ) -> ty::Region<'tcx> {
    49 ( 0.00%)          self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
    14 ( 0.00%)      }
     .           
 7,152 ( 0.00%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
 3,938 ( 0.00%)          match param.kind {
     .                       GenericParamDefKind::Lifetime => {
     .                           // Create a region inference variable for the given
     .                           // region parameter definition.
   266 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
     .                       }
     .                       GenericParamDefKind::Type { .. } => {
     .                           // Create a type inference variable for the given
     .                           // type parameter definition. The substitutions are
     .                           // for actual parameters that may be referred to by
     .                           // the default of this type parameter, if it exists.
     .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
     .                           // used in a path such as `Foo::<T, U>::new()` will
     .                           // use an inference variable for `C` with `[T, U]`
     .                           // as the substitutions for the default, `(T, U)`.
 2,512 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
     .                               self.universe(),
 3,140 ( 0.00%)                      TypeVariableOrigin {
     .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
   628 ( 0.00%)                              param.name,
   628 ( 0.00%)                              Some(param.def_id),
     .                                   ),
     .                                   span,
     .                               },
     .                           );
     .           
   628 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
     .                       }
     .                       GenericParamDefKind::Const { .. } => {
     .                           let origin = ConstVariableOrigin {
     .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
     .                                   param.name,
     .                                   param.def_id,
     .                               ),
     .                               span,
-- line 1196 ----------------------------------------
-- line 1202 ----------------------------------------
     .                               });
     .                           self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
     .                       }
     .                   }
     .               }
     .           
     .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
     .               /// type/region parameter to a fresh inference variable.
 1,311 ( 0.00%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
 6,802 ( 0.00%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
   874 ( 0.00%)      }
     .           
     .               /// Returns `true` if errors have been reported since this infcx was
     .               /// created. This is sometimes used as a heuristic to skip
     .               /// reporting errors that often occur as a result of earlier
     .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
     .               /// inference variables, regionck errors).
    20 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
     .                   debug!(
     .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
     .                        tainted_by_errors_flag={})",
     .                       self.tcx.sess.err_count(),
     .                       self.err_count_on_creation,
     .                       self.tainted_by_errors_flag.get()
     .                   );
     .           
   838 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
     .                       return true; // errors reported since this infcx was made
     .                   }
     .                   self.tainted_by_errors_flag.get()
    30 ( 0.00%)      }
     .           
     .               /// Set the "tainted by errors" flag to true. We call this when we
     .               /// observe an error from a prior pass.
     .               pub fn set_tainted_by_errors(&self) {
     .                   debug!("set_tainted_by_errors()");
     .                   self.tainted_by_errors_flag.set(true)
     .               }
     .           
     .               /// Process the region constraints and return any any errors that
     .               /// result. After this, no more unification operations should be
     .               /// done -- or the compiler will panic -- but it is legal to use
     .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
   896 ( 0.00%)      pub fn resolve_regions(
     .                   &self,
     .                   region_context: DefId,
     .                   outlives_env: &OutlivesEnvironment<'tcx>,
     .                   mode: RegionckMode,
     .               ) -> Vec<RegionResolutionError<'tcx>> {
 2,432 ( 0.00%)          let (var_infos, data) = {
     .                       let mut inner = self.inner.borrow_mut();
     .                       let inner = &mut *inner;
   128 ( 0.00%)              assert!(
   384 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
     .                           "region_obligations not empty: {:#?}",
     .                           inner.region_obligations
     .                       );
     .                       inner
     .                           .region_constraint_storage
     .                           .take()
     .                           .expect("regions already resolved")
     .                           .with_log(&mut inner.undo_log)
     .                           .into_infos_and_data()
   128 ( 0.00%)          };
     .           
     .                   let region_rels =
   128 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
     .           
 1,152 ( 0.00%)          let (lexical_region_resolutions, errors) =
 3,072 ( 0.00%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
     .           
   512 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
   128 ( 0.00%)          assert!(old_value.is_none());
     .           
     .                   errors
 1,152 ( 0.00%)      }
     .           
     .               /// Process the region constraints and report any errors that
     .               /// result. After this, no more unification operations should be
     .               /// done -- or the compiler will panic -- but it is legal to use
     .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
 1,280 ( 0.00%)      pub fn resolve_regions_and_report_errors(
     .                   &self,
     .                   region_context: DefId,
     .                   outlives_env: &OutlivesEnvironment<'tcx>,
     .                   mode: RegionckMode,
     .               ) {
   256 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
     .           
   384 ( 0.00%)          if !self.is_tainted_by_errors() {
     .                       // As a heuristic, just skip reporting region errors
     .                       // altogether if other errors have been reported while
     .                       // this infcx was in use.  This is totally hokey but
     .                       // otherwise we have a hard time separating legit region
     .                       // errors from silly ones.
   256 ( 0.00%)              self.report_region_errors(&errors);
     .                   }
   640 ( 0.00%)      }
     .           
     .               /// Obtains (and clears) the current set of region
     .               /// constraints. The inference context is still usable: further
     .               /// unifications will simply add new constraints.
     .               ///
     .               /// This method is not meant to be used with normal lexical region
     .               /// resolution. Rather, it is used in the NLL mode as a kind of
     .               /// interim hack: basically we run normal type-check and generate
-- line 1307 ----------------------------------------
-- line 1319 ----------------------------------------
     .               }
     .           
     .               /// Gives temporary access to the region constraint data.
     .               pub fn with_region_constraints<R>(
     .                   &self,
     .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
     .               ) -> R {
     .                   let mut inner = self.inner.borrow_mut();
   576 ( 0.00%)          op(inner.unwrap_region_constraints().data())
     .               }
     .           
     .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
     .                   let mut inner = self.inner.borrow_mut();
     .                   let inner = &mut *inner;
     .                   inner
     .                       .region_constraint_storage
     .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
     .                       .var_origin(vid)
     .               }
     .           
     .               /// Takes ownership of the list of variable regions. This implies
     .               /// that all the region constraints have already been taken, and
     .               /// hence that `resolve_regions_and_report_errors` can never be
     .               /// called. This is used only during NLL processing to "hand off" ownership
     .               /// of the set of region variables into the NLL region context.
    25 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
     .                   let mut inner = self.inner.borrow_mut();
    95 ( 0.00%)          let (var_infos, data) = inner
     .                       .region_constraint_storage
     .                       .take()
     .                       .expect("regions already resolved")
     .                       .with_log(&mut inner.undo_log)
     5 ( 0.00%)              .into_infos_and_data();
     5 ( 0.00%)          assert!(data.is_empty());
     .                   var_infos
    40 ( 0.00%)      }
     .           
     .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
     .                   self.resolve_vars_if_possible(t).to_string()
     .               }
     .           
     .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
     .               /// universe index of `TyVar(vid)`.
   250 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
     .                   use self::type_variable::TypeVariableValue;
     .           
   750 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
     .                       TypeVariableValue::Known { value } => Ok(value),
     .                       TypeVariableValue::Unknown { universe } => Err(universe),
     .                   }
   875 ( 0.00%)      }
     .           
     .               /// Resolve any type variables found in `value` -- but only one
     .               /// level.  So, if the variable `?X` is bound to some type
     .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
     .               /// itself be bound to a type).
     .               ///
     .               /// Useful when you only need to inspect the outermost level of
     .               /// the type and don't care about nested types (or perhaps you
     .               /// will be resolving them as well, e.g. in a loop).
     .               pub fn shallow_resolve<T>(&self, value: T) -> T
     .               where
     .                   T: TypeFoldable<'tcx>,
     .               {
 8,241 ( 0.00%)          value.fold_with(&mut ShallowResolver { infcx: self })
     .               }
     .           
   490 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
     .                   self.inner.borrow_mut().type_variables().root_var(var)
   735 ( 0.00%)      }
     .           
     .               /// Where possible, replaces type/const variables in
     .               /// `value` with their final value. Note that region variables
     .               /// are unaffected. If a type/const variable has not been unified, it
     .               /// is left as is. This is an idempotent operation that does
     .               /// not affect inference state in any way and so you can do it
     .               /// at will.
    16 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
     .               where
     .                   T: TypeFoldable<'tcx>,
     .               {
 7,512 ( 0.00%)          if !value.needs_infer() {
 6,388 ( 0.00%)              return value; // Avoid duplicated subst-folding.
     .                   }
 7,522 ( 0.00%)          let mut r = resolve::OpportunisticVarResolver::new(self);
 8,337 ( 0.00%)          value.fold_with(&mut r)
    20 ( 0.00%)      }
     .           
     .               /// Returns the first unresolved variable contained in `T`. In the
     .               /// process of visiting `T`, this will resolve (where possible)
     .               /// type variables in `T`, but it never constructs the final,
     .               /// resolved type, so it's more efficient than
     .               /// `resolve_vars_if_possible()`.
     .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
     .               where
-- line 1415 ----------------------------------------
-- line 1490 ----------------------------------------
     .                   expected: &'tcx ty::Const<'tcx>,
     .                   actual: &'tcx ty::Const<'tcx>,
     .                   err: TypeError<'tcx>,
     .               ) -> DiagnosticBuilder<'tcx> {
     .                   let trace = TypeTrace::consts(cause, true, expected, actual);
     .                   self.report_and_explain_type_error(trace, &err)
     .               }
     .           
   999 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
     .                   &self,
     .                   span: Span,
     .                   lbrct: LateBoundRegionConversionTime,
     .                   value: ty::Binder<'tcx, T>,
     .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
     .               where
     .                   T: TypeFoldable<'tcx>,
     .               {
     .                   let fld_r =
 6,856 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
     .                   let fld_t = |_| {
     .                       self.next_ty_var(TypeVariableOrigin {
     .                           kind: TypeVariableOriginKind::MiscVariable,
     .                           span,
     .                       })
     .                   };
     .                   let fld_c = |_, ty| {
     .                       self.next_const_var(
     .                           ty,
     .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
     .                       )
     .                   };
 5,428 ( 0.00%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
   666 ( 0.00%)      }
     .           
     .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
     .               pub fn verify_generic_bound(
     .                   &self,
     .                   origin: SubregionOrigin<'tcx>,
     .                   kind: GenericKind<'tcx>,
     .                   a: ty::Region<'tcx>,
     .                   bound: VerifyBound<'tcx>,
-- line 1530 ----------------------------------------
-- line 1535 ----------------------------------------
     .                       .borrow_mut()
     .                       .unwrap_region_constraints()
     .                       .verify_generic_bound(origin, kind, a, bound);
     .               }
     .           
     .               /// Obtains the latest type of the given closure; this may be a
     .               /// closure in the current function, in which case its
     .               /// `ClosureKind` may not yet be known.
    36 ( 0.00%)      pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
    72 ( 0.00%)          let closure_kind_ty = closure_substs.as_closure().kind_ty();
     .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
    54 ( 0.00%)          closure_kind_ty.to_opt_closure_kind()
     .               }
     .           
     .               /// Clears the selection, evaluation, and projection caches. This is useful when
     .               /// repeatedly attempting to select an `Obligation` while changing only
     .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
     .               pub fn clear_caches(&self) {
     .                   self.selection_cache.clear();
     .                   self.evaluation_cache.clear();
     .                   self.inner.borrow_mut().projection_cache().clear();
     .               }
     .           
     .               pub fn universe(&self) -> ty::UniverseIndex {
13,822 ( 0.01%)          self.universe.get()
 5,065 ( 0.00%)      }
     .           
     .               /// Creates and return a fresh universe that extends all previous
     .               /// universes. Updates `self.universe` to that new universe.
    44 ( 0.00%)      pub fn create_next_universe(&self) -> ty::UniverseIndex {
    56 ( 0.00%)          let u = self.universe.get().next_universe();
     .                   self.universe.set(u);
     .                   u
    44 ( 0.00%)      }
     .           
     .               /// Resolves and evaluates a constant.
     .               ///
     .               /// The constant can be located on a trait like `<A as B>::C`, in which case the given
     .               /// substitutions and environment are used to resolve the constant. Alternatively if the
     .               /// constant has generic parameters in scope the substitutions are used to evaluate the value of
     .               /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count
     .               /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still
-- line 1576 ----------------------------------------
-- line 1606 ----------------------------------------
     .                   // variables, thus we don't need to substitute back the original values.
     .                   self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
     .               }
     .           
     .               /// If `typ` is a type variable of some kind, resolve it one level
     .               /// (but do not resolve types found in the result). If `typ` is
     .               /// not a type variable, just return it unmodified.
     .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
74,312 ( 0.03%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
36,829 ( 0.02%)          match *typ.kind() {
     .                       ty::Infer(ty::TyVar(v)) => {
     .                           // Not entirely obvious: if `typ` is a type variable,
     .                           // it can be resolved to an int/float variable, which
     .                           // can then be recursively resolved, hence the
     .                           // recursion. Note though that we prevent type
     .                           // variables from unifying to other type variables
     .                           // directly (though they may be embedded
     .                           // structurally), and we prevent cycles in any case,
     .                           // so this recursion should always be of very limited
     .                           // depth.
     .                           //
     .                           // Note: if these two lines are combined into one we get
     .                           // dynamic borrow errors on `self.inner`.
17,628 ( 0.01%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
     .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
     .                       }
     .           
   100 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self
     .                           .inner
     .                           .borrow_mut()
     .                           .int_unification_table()
     .                           .probe_value(v)
    42 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
     .                           .unwrap_or(typ),
     .           
     .                       ty::Infer(ty::FloatVar(v)) => self
     .                           .inner
     .                           .borrow_mut()
     .                           .float_unification_table()
     .                           .probe_value(v)
     .                           .map(|v| v.to_type(self.tcx))
     .                           .unwrap_or(typ),
     .           
     .                       _ => typ,
     .                   }
83,601 ( 0.04%)      }
     .           
     .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
     .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
     .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
     .               ///
     .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
     .               /// inlined, despite being large, because it has only two call sites that
     .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
     .               #[inline(always)]
     .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
     .                   match infer_var {
     .                       TyOrConstInferVar::Ty(v) => {
     .                           use self::type_variable::TypeVariableValue;
     .           
     .                           // If `inlined_probe` returns a `Known` value, it never equals
     .                           // `ty::Infer(ty::TyVar(v))`.
72,198 ( 0.03%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
     .                               TypeVariableValue::Unknown { .. } => false,
     .                               TypeVariableValue::Known { .. } => true,
     .                           }
     .                       }
     .           
     .                       TyOrConstInferVar::TyInt(v) => {
     .                           // If `inlined_probe_value` returns a value it's always a
     .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
-- line 1678 ----------------------------------------
-- line 1716 ----------------------------------------
     .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
     .               Const(ConstVid<'tcx>),
     .           }
     .           
     .           impl<'tcx> TyOrConstInferVar<'tcx> {
     .               /// Tries to extract an inference variable from a type or a constant, returns `None`
     .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
     .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
   176 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
     .                   match arg.unpack() {
     .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
     .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
     .                       GenericArgKind::Lifetime(_) => None,
     .                   }
   176 ( 0.00%)      }
     .           
     .               /// Tries to extract an inference variable from a type, returns `None`
     .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
     4 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
 1,620 ( 0.00%)          match *ty.kind() {
   360 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
     .                       ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
     .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
     .                       _ => None,
     .                   }
     4 ( 0.00%)      }
     .           
     .               /// Tries to extract an inference variable from a constant, returns `None`
     .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
     .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
     .                   match ct.val {
     .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
     .                       _ => None,
     .                   }
-- line 1749 ----------------------------------------
-- line 1755 ----------------------------------------
     .           }
     .           
     .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
     .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
     .                   self.infcx.tcx
     .               }
     .           
     .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
14,425 ( 0.01%)          self.infcx.shallow_resolve_ty(ty)
     .               }
     .           
    72 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
    36 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
     .                       self.infcx
     .                           .inner
     .                           .borrow_mut()
     .                           .const_unification_table()
     .                           .probe_value(*vid)
     .                           .val
     .                           .known()
     .                           .unwrap_or(ct)
     .                   } else {
     .                       ct
     .                   }
    90 ( 0.00%)      }
     .           }
     .           
     .           impl<'tcx> TypeTrace<'tcx> {
     .               pub fn span(&self) -> Span {
     2 ( 0.00%)          self.cause.span
     .               }
     .           
     .               pub fn types(
     .                   cause: &ObligationCause<'tcx>,
     .                   a_is_expected: bool,
     .                   a: Ty<'tcx>,
     .                   b: Ty<'tcx>,
     .               ) -> TypeTrace<'tcx> {
-- line 1792 ----------------------------------------
-- line 1800 ----------------------------------------
     .                   b: &'tcx ty::Const<'tcx>,
     .               ) -> TypeTrace<'tcx> {
     .                   TypeTrace { cause: cause.clone(), values: Consts(ExpectedFound::new(a_is_expected, a, b)) }
     .               }
     .           }
     .           
     .           impl<'tcx> SubregionOrigin<'tcx> {
     .               pub fn span(&self) -> Span {
     5 ( 0.00%)          match *self {
     1 ( 0.00%)              Subtype(ref a) => a.span(),
     .                       RelateObjectBound(a) => a,
     .                       RelateParamBound(a, ..) => a,
     .                       RelateRegionParamBound(a) => a,
     .                       Reborrow(a) => a,
     .                       ReborrowUpvar(a, _) => a,
     .                       DataBorrowed(_, a) => a,
     .                       ReferenceOutlivesReferent(_, a) => a,
     .                       CompareImplMethodObligation { span, .. } => span,
-- line 1817 ----------------------------------------
-- line 1818 ----------------------------------------
     .                       CompareImplTypeObligation { span, .. } => span,
     .                   }
     .               }
     .           
     .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
     .               where
     .                   F: FnOnce() -> Self,
     .               {
   838 ( 0.00%)          match *cause.code() {
   179 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
   895 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
     .                       }
     .           
     .                       traits::ObligationCauseCode::CompareImplMethodObligation {
     .                           impl_item_def_id,
     .                           trait_item_def_id,
     .                       } => SubregionOrigin::CompareImplMethodObligation {
     .                           span: cause.span,
     .                           impl_item_def_id,
-- line 1836 ----------------------------------------

91,181 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/span_encoding.rs
--------------------------------------------------------------------------------
Ir               

-- line 55 ----------------------------------------
      .           ///   `ctxt` values depend partly on the crate size and partly on the form of
      .           ///   the code. No crates in `rustc-perf` need more than 15 bits for `ctxt`,
      .           ///   but larger crates might need more than 16 bits.
      .           ///
      .           /// In order to reliably use parented spans in incremental compilation,
      .           /// the dependency to the parent definition's span. This is performed
      .           /// using the callback `SPAN_TRACK` to access the query engine.
      .           ///
 82,477 ( 0.04%)  #[derive(Clone, Copy, Eq, PartialEq, Hash)]
      .           // FIXME(@lcnr): Enable this attribute once the bootstrap
      .           // compiler knows of `rustc_pass_by_value`.
      .           //
      .           // Right now, this lint would only trigger when compiling the
      .           // stage 2 compiler, which is fairly annoying as there are
      .           // a lot of places using `&Span` right now. After the next bootstrap bump,
      .           // the lint will already trigger when using stage 1, which is a lot less annoying.
      .           //
      .           // #[cfg_attr(not(bootstrap), rustc_pass_by_value)]
      .           pub struct Span {
    682 ( 0.00%)      base_or_index: u32,
    268 ( 0.00%)      len_or_tag: u16,
    617 ( 0.00%)      ctxt_or_zero: u16,
      .           }
      .           
      .           const LEN_TAG: u16 = 0b1000_0000_0000_0000;
      .           const MAX_LEN: u32 = 0b0111_1111_1111_1111;
      .           const MAX_CTXT: u32 = 0b1111_1111_1111_1111;
      .           
      .           /// Dummy span, both position and length are zero, syntax context is zero as well.
      .           pub const DUMMY_SP: Span = Span { base_or_index: 0, len_or_tag: 0, ctxt_or_zero: 0 };
-- line 84 ----------------------------------------
-- line 86 ----------------------------------------
      .           impl Span {
      .               #[inline]
      .               pub fn new(
      .                   mut lo: BytePos,
      .                   mut hi: BytePos,
      .                   ctxt: SyntaxContext,
      .                   parent: Option<LocalDefId>,
      .               ) -> Self {
 51,188 ( 0.02%)          if lo > hi {
      .                       std::mem::swap(&mut lo, &mut hi);
      .                   }
      .           
102,376 ( 0.05%)          let (base, len, ctxt2) = (lo.0, hi.0 - lo.0, ctxt.as_u32());
      .           
439,176 ( 0.20%)          if len <= MAX_LEN && ctxt2 <= MAX_CTXT && parent.is_none() {
      .                       // Inline format.
      .                       Span { base_or_index: base, len_or_tag: len as u16, ctxt_or_zero: ctxt2 as u16 }
      .                   } else {
      .                       // Interned format.
      .                       let index =
    130 ( 0.00%)                  with_span_interner(|interner| interner.intern(&SpanData { lo, hi, ctxt, parent }));
      .                       Span { base_or_index: index, len_or_tag: LEN_TAG, ctxt_or_zero: 0 }
      .                   }
162,893 ( 0.08%)      }
      .           
      .               #[inline]
      .               pub fn data(self) -> SpanData {
      .                   let data = self.data_untracked();
      .                   if let Some(parent) = data.parent {
      .                       (*SPAN_TRACK)(parent);
      .                   }
      .                   data
      .               }
      .           
      .               /// Internal function to translate between an encoded span and the expanded representation.
      .               /// This function must not be used outside the incremental engine.
      .               #[inline]
      .               pub fn data_untracked(self) -> SpanData {
379,293 ( 0.17%)          if self.len_or_tag != LEN_TAG {
      .                       // Inline format.
      .                       debug_assert!(self.len_or_tag as u32 <= MAX_LEN);
      .                       SpanData {
      .                           lo: BytePos(self.base_or_index),
353,565 ( 0.16%)                  hi: BytePos(self.base_or_index + self.len_or_tag as u32),
      .                           ctxt: SyntaxContext::from_u32(self.ctxt_or_zero as u32),
      .                           parent: None,
      .                       }
      .                   } else {
      .                       // Interned format.
      .                       debug_assert!(self.ctxt_or_zero == 0);
      .                       let index = self.base_or_index;
      .                       with_span_interner(|interner| interner.spans[index as usize])
      .                   }
 30,727 ( 0.01%)      }
      .           }
      .           
      4 ( 0.00%)  #[derive(Default)]
      .           pub struct SpanInterner {
      .               spans: FxIndexSet<SpanData>,
      .           }
      .           
      .           impl SpanInterner {
     39 ( 0.00%)      fn intern(&mut self, span_data: &SpanData) -> u32 {
     52 ( 0.00%)          let (index, _) = self.spans.insert_full(*span_data);
      .                   index as u32
     52 ( 0.00%)      }
      .           }
      .           
      .           // If an interner exists, return it. Otherwise, prepare a fresh one.
      .           #[inline]
      .           fn with_span_interner<T, F: FnOnce(&mut SpanInterner) -> T>(f: F) -> T {
      .               crate::with_session_globals(|session_globals| f(&mut *session_globals.span_interner.lock()))
      .           }

322,544 ( 0.15%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/span_encoding.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir               

-- line 5 ----------------------------------------
      .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
      .           unsafe impl GlobalAlloc for System {
      .               #[inline]
      .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
      .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
      .                   // So only rely on MIN_ALIGN if size >= align.
      .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
      .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
365,180 ( 0.17%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
273,885 ( 0.13%)              libc::malloc(layout.size()) as *mut u8
      .                   } else {
      .                       #[cfg(target_os = "macos")]
      .                       {
      .                           if layout.align() > (1 << 31) {
      .                               return ptr::null_mut();
      .                           }
      .                       }
      .                       aligned_malloc(&layout)
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
      .                   // See the comment above in `alloc` for why this check looks the way it does.
  1,360 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
  2,040 ( 0.00%)              libc::calloc(layout.size(), 1) as *mut u8
      .                   } else {
      .                       let ptr = self.alloc(layout);
      .                       if !ptr.is_null() {
      .                           ptr::write_bytes(ptr, 0, layout.size());
      .                       }
      .                       ptr
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
 91,623 ( 0.04%)          libc::free(ptr as *mut libc::c_void)
      .               }
      .           
      .               #[inline]
      .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
 19,788 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
 39,576 ( 0.02%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
      .                   } else {
      .                       realloc_fallback(self, ptr, layout, new_size)
      .                   }
      .               }
      .           }
      .           
      .           cfg_if::cfg_if! {
      .               if #[cfg(any(
-- line 56 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 17 ----------------------------------------
      .           use rustc_span::hygiene::MacroKind;
      .           use rustc_span::source_map::Spanned;
      .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
      .           use rustc_span::Span;
      .           use rustc_target::spec::abi::Abi;
      .           use std::collections::VecDeque;
      .           
      .           fn fn_decl<'hir>(node: Node<'hir>) -> Option<&'hir FnDecl<'hir>> {
     40 ( 0.00%)      match node {
      .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
      .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
      .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(&sig.decl),
      .                   Node::Expr(Expr { kind: ExprKind::Closure(_, fn_decl, ..), .. })
      .                   | Node::ForeignItem(ForeignItem { kind: ForeignItemKind::Fn(fn_decl, ..), .. }) => {
      .                       Some(fn_decl)
      .                   }
      .                   _ => None,
      .               }
      .           }
      .           
      .           pub fn fn_sig<'hir>(node: Node<'hir>) -> Option<&'hir FnSig<'hir>> {
     16 ( 0.00%)      match &node {
      .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
      .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
      .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(sig),
      .                   _ => None,
      .               }
      .           }
      .           
      .           pub fn associated_body<'hir>(node: Node<'hir>) -> Option<BodyId> {
    791 ( 0.00%)      match node {
      .                   Node::Item(Item {
      .                       kind: ItemKind::Const(_, body) | ItemKind::Static(.., body) | ItemKind::Fn(.., body),
      .                       ..
      .                   })
      .                   | Node::TraitItem(TraitItem {
      .                       kind:
      .                           TraitItemKind::Const(_, Some(body)) | TraitItemKind::Fn(_, TraitFn::Provided(body)),
      .                       ..
      .                   })
      .                   | Node::ImplItem(ImplItem {
      .                       kind: ImplItemKind::Const(_, body) | ImplItemKind::Fn(_, body),
      .                       ..
      .                   })
    130 ( 0.00%)          | Node::Expr(Expr { kind: ExprKind::Closure(.., body, _, _), .. }) => Some(*body),
      .           
      .                   Node::AnonConst(constant) => Some(constant.body),
      .           
      .                   _ => None,
      .               }
      .           }
      .           
      .           fn is_body_owner<'hir>(node: Node<'hir>, hir_id: HirId) -> bool {
-- line 69 ----------------------------------------
-- line 115 ----------------------------------------
      .           pub struct ParentOwnerIterator<'hir> {
      .               current_id: HirId,
      .               map: Map<'hir>,
      .           }
      .           
      .           impl<'hir> Iterator for ParentOwnerIterator<'hir> {
      .               type Item = (LocalDefId, OwnerNode<'hir>);
      .           
    162 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
     54 ( 0.00%)          if self.current_id.local_id.index() != 0 {
     11 ( 0.00%)              self.current_id.local_id = ItemLocalId::new(0);
     44 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
      .                           return Some((self.current_id.owner, node.node));
      .                       }
      .                   }
      7 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
      6 ( 0.00%)              return None;
      .                   }
      .                   loop {
      .                       // There are nodes that do not have entries, so we need to skip them.
      .                       let parent_id = self.map.def_key(self.current_id.owner).parent;
      .           
      .                       let parent_id = parent_id.map_or(CRATE_HIR_ID.owner, |local_def_index| {
      .                           let def_id = LocalDefId { local_def_index };
      .                           self.map.local_def_id_to_hir_id(def_id).owner
      .                       });
      8 ( 0.00%)              self.current_id = HirId::make_owner(parent_id);
      .           
      .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
      8 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
      .                           return Some((self.current_id.owner, node.node));
      .                       }
      .                   }
    144 ( 0.00%)      }
      .           }
      .           
      .           impl<'hir> Map<'hir> {
    161 ( 0.00%)      pub fn krate(&self) -> &'hir Crate<'hir> {
     23 ( 0.00%)          self.tcx.hir_crate(())
    184 ( 0.00%)      }
      .           
      7 ( 0.00%)      pub fn root_module(&self) -> &'hir Mod<'hir> {
      1 ( 0.00%)          match self.tcx.hir_owner(CRATE_DEF_ID).map(|o| o.node) {
      .                       Some(OwnerNode::Crate(item)) => item,
      .                       _ => bug!(),
      .                   }
      8 ( 0.00%)      }
      .           
      .               pub fn items(&self) -> impl Iterator<Item = &'hir Item<'hir>> + 'hir {
      .                   let krate = self.krate();
      .                   krate.owners.iter().filter_map(|owner| match owner.as_ref()?.node() {
      .                       OwnerNode::Item(item) => Some(item),
      .                       _ => None,
      .                   })
      .               }
      .           
      1 ( 0.00%)      pub fn def_key(&self, def_id: LocalDefId) -> DefKey {
      .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
      1 ( 0.00%)          self.tcx.untracked_resolutions.definitions.def_key(def_id)
      2 ( 0.00%)      }
      .           
      .               pub fn def_path_from_hir_id(&self, id: HirId) -> Option<DefPath> {
      .                   self.opt_local_def_id(id).map(|def_id| self.def_path(def_id))
      .               }
      .           
      .               pub fn def_path(&self, def_id: LocalDefId) -> DefPath {
      .                   // Accessing the DefPath is ok, since it is part of DefPathHash.
      .                   self.tcx.untracked_resolutions.definitions.def_path(def_id)
-- line 182 ----------------------------------------
-- line 184 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn def_path_hash(self, def_id: LocalDefId) -> DefPathHash {
      .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
      .                   self.tcx.untracked_resolutions.definitions.def_path_hash(def_id)
      .               }
      .           
      .               #[inline]
    552 ( 0.00%)      pub fn local_def_id(&self, hir_id: HirId) -> LocalDefId {
    234 ( 0.00%)          self.opt_local_def_id(hir_id).unwrap_or_else(|| {
      .                       bug!(
      .                           "local_def_id: no entry for `{:?}`, which has a map of `{:?}`",
      .                           hir_id,
      .                           self.find(hir_id)
      .                       )
      .                   })
    414 ( 0.00%)      }
      .           
      .               #[inline]
    624 ( 0.00%)      pub fn opt_local_def_id(&self, hir_id: HirId) -> Option<LocalDefId> {
    128 ( 0.00%)          if hir_id.local_id == ItemLocalId::new(0) {
      .                       Some(hir_id.owner)
      .                   } else {
     50 ( 0.00%)              self.tcx
      .                           .hir_owner_nodes(hir_id.owner)?
      .                           .local_id_to_def_id
      .                           .get(&hir_id.local_id)
      .                           .copied()
      .                   }
    702 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn local_def_id_to_hir_id(&self, def_id: LocalDefId) -> HirId {
      .                   // FIXME(#85914) is this access safe for incr. comp.?
     47 ( 0.00%)          self.tcx.untracked_resolutions.definitions.local_def_id_to_hir_id(def_id)
      .               }
      .           
      .               pub fn iter_local_def_id(&self) -> impl Iterator<Item = LocalDefId> + '_ {
      .                   // Create a dependency to the crate to be sure we reexcute this when the amount of
      .                   // definitions change.
      .                   self.tcx.ensure().hir_crate(());
      .                   self.tcx.untracked_resolutions.definitions.iter_local_def_id()
      .               }
      .           
    133 ( 0.00%)      pub fn opt_def_kind(&self, local_def_id: LocalDefId) -> Option<DefKind> {
      .                   let hir_id = self.local_def_id_to_hir_id(local_def_id);
    247 ( 0.00%)          let def_kind = match self.find(hir_id)? {
     68 ( 0.00%)              Node::Item(item) => match item.kind {
      .                           ItemKind::Static(..) => DefKind::Static,
      .                           ItemKind::Const(..) => DefKind::Const,
      .                           ItemKind::Fn(..) => DefKind::Fn,
      .                           ItemKind::Macro(..) => DefKind::Macro(MacroKind::Bang),
      .                           ItemKind::Mod(..) => DefKind::Mod,
      .                           ItemKind::OpaqueTy(..) => DefKind::OpaqueTy,
      .                           ItemKind::TyAlias(..) => DefKind::TyAlias,
      .                           ItemKind::Enum(..) => DefKind::Enum,
-- line 239 ----------------------------------------
-- line 279 ----------------------------------------
      .                               Some(Node::Expr(&Expr {
      .                                   kind: ExprKind::ConstBlock(ref anon_const), ..
      .                               })) if anon_const.hir_id == hir_id => true,
      .                               _ => false,
      .                           };
      .                           if inline { DefKind::InlineConst } else { DefKind::AnonConst }
      .                       }
      .                       Node::Field(_) => DefKind::Field,
      5 ( 0.00%)              Node::Expr(expr) => match expr.kind {
      .                           ExprKind::Closure(.., None) => DefKind::Closure,
      .                           ExprKind::Closure(.., Some(_)) => DefKind::Generator,
      .                           _ => bug!("def_kind: unsupported node: {}", self.node_to_string(hir_id)),
      .                       },
      .                       Node::GenericParam(param) => match param.kind {
      .                           GenericParamKind::Lifetime { .. } => DefKind::LifetimeParam,
      .                           GenericParamKind::Type { .. } => DefKind::TyParam,
      .                           GenericParamKind::Const { .. } => DefKind::ConstParam,
-- line 295 ----------------------------------------
-- line 304 ----------------------------------------
      .                       | Node::Binding(_)
      .                       | Node::Local(_)
      .                       | Node::Param(_)
      .                       | Node::Arm(_)
      .                       | Node::Lifetime(_)
      .                       | Node::Visibility(_)
      .                       | Node::Block(_) => return None,
      .                   };
     76 ( 0.00%)          Some(def_kind)
    190 ( 0.00%)      }
      .           
      .               pub fn def_kind(&self, local_def_id: LocalDefId) -> DefKind {
      .                   self.opt_def_kind(local_def_id)
      .                       .unwrap_or_else(|| bug!("def_kind: unsupported node: {:?}", local_def_id))
      .               }
      .           
 94,944 ( 0.04%)      pub fn find_parent_node(&self, id: HirId) -> Option<HirId> {
 11,868 ( 0.01%)          if id.local_id == ItemLocalId::from_u32(0) {
      .                       Some(self.tcx.hir_owner_parent(id.owner))
      .                   } else {
 23,654 ( 0.01%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
 11,827 ( 0.01%)              let node = owner.nodes[id.local_id].as_ref()?;
 35,481 ( 0.02%)              let hir_id = HirId { owner: id.owner, local_id: node.parent };
      .                       Some(hir_id)
      .                   }
 94,944 ( 0.04%)      }
      .           
     87 ( 0.00%)      pub fn get_parent_node(&self, hir_id: HirId) -> HirId {
 69,404 ( 0.03%)          self.find_parent_node(hir_id).unwrap()
    174 ( 0.00%)      }
      .           
      .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
 10,480 ( 0.00%)      pub fn find(&self, id: HirId) -> Option<Node<'hir>> {
  1,310 ( 0.00%)          if id.local_id == ItemLocalId::from_u32(0) {
      .                       let owner = self.tcx.hir_owner(id.owner)?;
    379 ( 0.00%)              Some(owner.node.into())
      .                   } else {
  1,862 ( 0.00%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
    931 ( 0.00%)              let node = owner.nodes[id.local_id].as_ref()?;
  2,793 ( 0.00%)              Some(node.node)
      .                   }
 10,480 ( 0.00%)      }
      .           
      .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
      .               #[inline]
      .               pub fn find_by_def_id(&self, id: LocalDefId) -> Option<Node<'hir>> {
     61 ( 0.00%)          self.find(self.local_def_id_to_hir_id(id))
      .               }
      .           
      .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
    753 ( 0.00%)      pub fn get(&self, id: HirId) -> Node<'hir> {
    650 ( 0.00%)          self.find(id).unwrap_or_else(|| bug!("couldn't find hir id {} in the HIR map", id))
    502 ( 0.00%)      }
      .           
      .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
      .               #[inline]
      .               pub fn get_by_def_id(&self, id: LocalDefId) -> Node<'hir> {
      .                   self.find_by_def_id(id).unwrap_or_else(|| bug!("couldn't find {:?} in the HIR map", id))
      .               }
      .           
      6 ( 0.00%)      pub fn get_if_local(&self, id: DefId) -> Option<Node<'hir>> {
      3 ( 0.00%)          id.as_local().and_then(|id| self.find(self.local_def_id_to_hir_id(id)))
      6 ( 0.00%)      }
      .           
      .               pub fn get_generics(&self, id: LocalDefId) -> Option<&'hir Generics<'hir>> {
      .                   let node = self.tcx.hir_owner(id)?;
      .                   match node.node {
      .                       OwnerNode::ImplItem(impl_item) => Some(&impl_item.generics),
      .                       OwnerNode::TraitItem(trait_item) => Some(&trait_item.generics),
      .                       OwnerNode::Item(Item {
      .                           kind:
-- line 374 ----------------------------------------
-- line 381 ----------------------------------------
      .                               | ItemKind::TraitAlias(generics, _)
      .                               | ItemKind::Impl(Impl { generics, .. }),
      .                           ..
      .                       }) => Some(generics),
      .                       _ => None,
      .                   }
      .               }
      .           
  2,856 ( 0.00%)      pub fn item(&self, id: ItemId) -> &'hir Item<'hir> {
    816 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_item()
  3,264 ( 0.00%)      }
      .           
      .               pub fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
      .                   self.tcx.hir_owner(id.def_id).unwrap().node.expect_trait_item()
      .               }
      .           
      .               pub fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
      .                   self.tcx.hir_owner(id.def_id).unwrap().node.expect_impl_item()
      .               }
      .           
      .               pub fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
      .                   self.tcx.hir_owner(id.def_id).unwrap().node.expect_foreign_item()
      .               }
      .           
    980 ( 0.00%)      pub fn body(&self, id: BodyId) -> &'hir Body<'hir> {
    280 ( 0.00%)          self.tcx.hir_owner_nodes(id.hir_id.owner).unwrap().bodies[&id.hir_id.local_id]
  1,120 ( 0.00%)      }
      .           
     24 ( 0.00%)      pub fn fn_decl_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnDecl<'hir>> {
     24 ( 0.00%)          if let Some(node) = self.find(hir_id) {
      .                       fn_decl(node)
      .                   } else {
      .                       bug!("no node for hir_id `{}`", hir_id)
      .                   }
     16 ( 0.00%)      }
      .           
      6 ( 0.00%)      pub fn fn_sig_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnSig<'hir>> {
      6 ( 0.00%)          if let Some(node) = self.find(hir_id) {
      .                       fn_sig(node)
      .                   } else {
      .                       bug!("no node for hir_id `{}`", hir_id)
      .                   }
      6 ( 0.00%)      }
      .           
      .               pub fn enclosing_body_owner(&self, hir_id: HirId) -> HirId {
      .                   for (parent, _) in self.parent_iter(hir_id) {
      .                       if let Some(body) = self.maybe_body_owned_by(parent) {
      .                           return self.body_owner(body);
      .                       }
      .                   }
      .           
      .                   bug!("no `enclosing_body_owner` for hir_id `{}`", hir_id);
      .               }
      .           
      .               /// Returns the `HirId` that corresponds to the definition of
      .               /// which this is the body of, i.e., a `fn`, `const` or `static`
      .               /// item (possibly associated), a closure, or a `hir::AnonConst`.
    776 ( 0.00%)      pub fn body_owner(&self, BodyId { hir_id }: BodyId) -> HirId {
      .                   let parent = self.get_parent_node(hir_id);
    582 ( 0.00%)          assert!(self.find(parent).map_or(false, |n| is_body_owner(n, hir_id)));
      .                   parent
    776 ( 0.00%)      }
      .           
    250 ( 0.00%)      pub fn body_owner_def_id(&self, id: BodyId) -> LocalDefId {
    390 ( 0.00%)          self.local_def_id(self.body_owner(id))
    250 ( 0.00%)      }
      .           
      .               /// Given a `HirId`, returns the `BodyId` associated with it,
      .               /// if the node is a body owner, otherwise returns `None`.
     36 ( 0.00%)      pub fn maybe_body_owned_by(&self, hir_id: HirId) -> Option<BodyId> {
    118 ( 0.00%)          self.find(hir_id).map(associated_body).flatten()
    108 ( 0.00%)      }
      .           
      .               /// Given a body owner's id, returns the `BodyId` associated with it.
     90 ( 0.00%)      pub fn body_owned_by(&self, id: HirId) -> BodyId {
      .                   self.maybe_body_owned_by(id).unwrap_or_else(|| {
      .                       span_bug!(
      .                           self.span(id),
      .                           "body_owned_by: {} has no associated body",
      .                           self.node_to_string(id)
      .                       );
      .                   })
     70 ( 0.00%)      }
      .           
      .               pub fn body_param_names(&self, id: BodyId) -> impl Iterator<Item = Ident> + 'hir {
      .                   self.body(id).params.iter().map(|arg| match arg.pat.kind {
      .                       PatKind::Binding(_, _, ident, _) => ident,
      .                       _ => Ident::empty(),
      .                   })
      .               }
      .           
      .               /// Returns the `BodyOwnerKind` of this `LocalDefId`.
      .               ///
      .               /// Panics if `LocalDefId` does not have an associated body.
    159 ( 0.00%)      pub fn body_owner_kind(&self, id: HirId) -> BodyOwnerKind {
    413 ( 0.00%)          match self.get(id) {
      .                       Node::Item(&Item { kind: ItemKind::Const(..), .. })
      .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Const(..), .. })
      .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Const(..), .. })
      .                       | Node::AnonConst(_) => BodyOwnerKind::Const,
      .                       Node::Ctor(..)
      .                       | Node::Item(&Item { kind: ItemKind::Fn(..), .. })
      .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Fn(..), .. })
      .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Fn(..), .. }) => BodyOwnerKind::Fn,
     12 ( 0.00%)              Node::Item(&Item { kind: ItemKind::Static(_, m, _), .. }) => BodyOwnerKind::Static(m),
      .                       Node::Expr(&Expr { kind: ExprKind::Closure(..), .. }) => BodyOwnerKind::Closure,
      .                       node => bug!("{:#?} is not a body node", node),
      .                   }
    159 ( 0.00%)      }
      .           
      .               /// Returns the `ConstContext` of the body associated with this `LocalDefId`.
      .               ///
      .               /// Panics if `LocalDefId` does not have an associated body.
      .               ///
      .               /// This should only be used for determining the context of a body, a return
      .               /// value of `Some` does not always suggest that the owner of the body is `const`,
      .               /// just that it has to be checked as if it were.
    192 ( 0.00%)      pub fn body_const_context(&self, did: LocalDefId) -> Option<ConstContext> {
      .                   let hir_id = self.local_def_id_to_hir_id(did);
    288 ( 0.00%)          let ccx = match self.body_owner_kind(hir_id) {
      .                       BodyOwnerKind::Const => ConstContext::Const,
     18 ( 0.00%)              BodyOwnerKind::Static(mt) => ConstContext::Static(mt),
      .           
      8 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_constructor(did.to_def_id()) => return None,
      8 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_const_fn_raw(did.to_def_id()) => ConstContext::ConstFn,
      .                       BodyOwnerKind::Fn
     16 ( 0.00%)                  if self.tcx.has_attr(did.to_def_id(), sym::default_method_body_is_const) =>
      .                       {
      .                           ConstContext::ConstFn
      .                       }
      .                       BodyOwnerKind::Fn | BodyOwnerKind::Closure => return None,
      .                   };
      .           
      .                   Some(ccx)
    216 ( 0.00%)      }
      .           
      .               /// Returns an iterator of the `DefId`s for all body-owners in this
      .               /// crate. If you would prefer to iterate over the bodies
      .               /// themselves, you can do `self.hir().krate().body_ids.iter()`.
     21 ( 0.00%)      pub fn body_owners(self) -> impl Iterator<Item = LocalDefId> + 'hir {
      3 ( 0.00%)          self.krate()
      .                       .owners
      .                       .iter_enumerated()
      .                       .flat_map(move |(owner, owner_info)| {
     87 ( 0.00%)                  let bodies = &owner_info.as_ref()?.nodes.bodies;
      .                           Some(bodies.iter().map(move |&(local_id, _)| {
      1 ( 0.00%)                      let hir_id = HirId { owner, local_id };
      .                               let body_id = BodyId { hir_id };
     47 ( 0.00%)                      self.body_owner_def_id(body_id)
      .                           }))
      .                       })
      .                       .flatten()
     15 ( 0.00%)      }
      .           
     10 ( 0.00%)      pub fn par_body_owners<F: Fn(LocalDefId) + Sync + Send>(self, f: F) {
      .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
      .                   #[cfg(parallel_compiler)]
      .                   use rustc_rayon::iter::IndexedParallelIterator;
      .           
      3 ( 0.00%)          par_iter(&self.krate().owners.raw).enumerate().for_each(|(owner, owner_info)| {
      .                       let owner = LocalDefId::new(owner);
    174 ( 0.00%)              if let Some(owner_info) = owner_info {
      .                           par_iter(owner_info.nodes.bodies.range(..)).for_each(|(local_id, _)| {
      .                               let hir_id = HirId { owner, local_id: *local_id };
      .                               let body_id = BodyId { hir_id };
     45 ( 0.00%)                      f(self.body_owner_def_id(body_id))
      .                           })
      .                       }
      .                   });
      8 ( 0.00%)      }
      .           
      .               pub fn ty_param_owner(&self, id: HirId) -> LocalDefId {
      .                   match self.get(id) {
      .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
      .                           id.expect_owner()
      .                       }
      .                       Node::GenericParam(_) => self.get_parent_item(id),
      .                       _ => bug!("ty_param_owner: {} not a type parameter", self.node_to_string(id)),
-- line 558 ----------------------------------------
-- line 564 ----------------------------------------
      .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
      .                           kw::SelfUpper
      .                       }
      .                       Node::GenericParam(param) => param.name.ident().name,
      .                       _ => bug!("ty_param_name: {} not a type parameter", self.node_to_string(id)),
      .                   }
      .               }
      .           
    279 ( 0.00%)      pub fn trait_impls(&self, trait_did: DefId) -> &'hir [LocalDefId] {
     31 ( 0.00%)          self.tcx.all_local_trait_impls(()).get(&trait_did).map_or(&[], |xs| &xs[..])
    279 ( 0.00%)      }
      .           
      .               /// Gets the attributes on the crate. This is preferable to
      .               /// invoking `krate.attrs` because it registers a tighter
      .               /// dep-graph access.
      .               pub fn krate_attrs(&self) -> &'hir [ast::Attribute] {
     20 ( 0.00%)          self.attrs(CRATE_HIR_ID)
      .               }
      .           
     70 ( 0.00%)      pub fn get_module(&self, module: LocalDefId) -> (&'hir Mod<'hir>, Span, HirId) {
      .                   let hir_id = HirId::make_owner(module);
     50 ( 0.00%)          match self.tcx.hir_owner(module).map(|o| o.node) {
      .                       Some(OwnerNode::Item(&Item { span, kind: ItemKind::Mod(ref m), .. })) => {
      .                           (m, span, hir_id)
      .                       }
     30 ( 0.00%)              Some(OwnerNode::Crate(item)) => (item, item.inner, hir_id),
      .                       node => panic!("not a module: {:?}", node),
      .                   }
     90 ( 0.00%)      }
      .           
      .               /// Walks the contents of a crate. See also `Crate::visit_all_items`.
     11 ( 0.00%)      pub fn walk_toplevel_module(self, visitor: &mut impl Visitor<'hir>) {
     25 ( 0.00%)          let (top_mod, span, hir_id) = self.get_module(CRATE_DEF_ID);
      .                   visitor.visit_mod(top_mod, span, hir_id);
      8 ( 0.00%)      }
      .           
      .               /// Walks the attributes in a crate.
     20 ( 0.00%)      pub fn walk_attributes(self, visitor: &mut impl Visitor<'hir>) {
      2 ( 0.00%)          let krate = self.krate();
      .                   for (owner, info) in krate.owners.iter_enumerated() {
    116 ( 0.00%)              if let Some(info) = info {
      .                           for (local_id, attrs) in info.attrs.map.iter() {
      .                               let id = HirId { owner, local_id: *local_id };
      .                               for a in *attrs {
    300 ( 0.00%)                          visitor.visit_attribute(id, a)
      .                               }
      .                           }
      .                       }
      .                   }
     16 ( 0.00%)      }
      .           
      .               /// Visits all items in the crate in some deterministic (but
      .               /// unspecified) order. If you just need to process every item,
      .               /// but don't care about nesting, this method is the best choice.
      .               ///
      .               /// If you do care about nesting -- usually because your algorithm
      .               /// follows lexical scoping rules -- then you want a different
      .               /// approach. You should override `visit_nested_item` in your
      .               /// visitor and then call `intravisit::walk_crate` instead.
     88 ( 0.00%)      pub fn visit_all_item_likes<V>(&self, visitor: &mut V)
      .               where
      .                   V: itemlikevisit::ItemLikeVisitor<'hir>,
      .               {
     13 ( 0.00%)          let krate = self.krate();
     46 ( 0.00%)          for owner in krate.owners.iter().filter_map(Option::as_ref) {
    378 ( 0.00%)              match owner.node() {
    391 ( 0.00%)                  OwnerNode::Item(item) => visitor.visit_item(item),
      .                           OwnerNode::ForeignItem(item) => visitor.visit_foreign_item(item),
      .                           OwnerNode::ImplItem(item) => visitor.visit_impl_item(item),
      .                           OwnerNode::TraitItem(item) => visitor.visit_trait_item(item),
      .                           OwnerNode::Crate(_) => {}
      .                       }
      .                   }
     88 ( 0.00%)      }
      .           
      .               /// A parallel version of `visit_all_item_likes`.
      .               pub fn par_visit_all_item_likes<V>(&self, visitor: &V)
      .               where
      .                   V: itemlikevisit::ParItemLikeVisitor<'hir> + Sync + Send,
      .               {
      1 ( 0.00%)          let krate = self.krate();
      2 ( 0.00%)          par_for_each_in(&krate.owners.raw, |owner| match owner.as_ref().map(OwnerInfo::node) {
     17 ( 0.00%)              Some(OwnerNode::Item(item)) => visitor.visit_item(item),
      .                       Some(OwnerNode::ForeignItem(item)) => visitor.visit_foreign_item(item),
      .                       Some(OwnerNode::ImplItem(item)) => visitor.visit_impl_item(item),
      .                       Some(OwnerNode::TraitItem(item)) => visitor.visit_trait_item(item),
      .                       Some(OwnerNode::Crate(_)) | None => {}
      .                   })
      .               }
      .           
     86 ( 0.00%)      pub fn visit_item_likes_in_module<V>(&self, module: LocalDefId, visitor: &mut V)
      .               where
      .                   V: ItemLikeVisitor<'hir>,
      .               {
     11 ( 0.00%)          let module = self.tcx.hir_module_items(module);
      .           
     12 ( 0.00%)          for id in module.items.iter() {
    765 ( 0.00%)              visitor.visit_item(self.item(*id));
      .                   }
      .           
     12 ( 0.00%)          for id in module.trait_items.iter() {
      .                       visitor.visit_trait_item(self.trait_item(*id));
      .                   }
      .           
     12 ( 0.00%)          for id in module.impl_items.iter() {
      .                       visitor.visit_impl_item(self.impl_item(*id));
      .                   }
      .           
     12 ( 0.00%)          for id in module.foreign_items.iter() {
      .                       visitor.visit_foreign_item(self.foreign_item(*id));
      .                   }
     88 ( 0.00%)      }
      .           
     46 ( 0.00%)      pub fn for_each_module(&self, f: impl Fn(LocalDefId)) {
      .                   let mut queue = VecDeque::new();
      .                   queue.push_back(CRATE_DEF_ID);
      .           
      8 ( 0.00%)          while let Some(id) = queue.pop_front() {
      .                       f(id);
      3 ( 0.00%)              let items = self.tcx.hir_module_items(id);
     32 ( 0.00%)              queue.extend(items.submodules.iter().copied())
      .                   }
     40 ( 0.00%)      }
      .           
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId)) {
      4 ( 0.00%)          self.for_each_module(f)
      .               }
      .           
      .               #[cfg(parallel_compiler)]
      .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId) + Sync) {
      .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
      .                   par_iter_submodules(self.tcx, CRATE_DEF_ID, &f);
      .           
      .                   fn par_iter_submodules<F>(tcx: TyCtxt<'_>, module: LocalDefId, f: &F)
-- line 699 ----------------------------------------
-- line 711 ----------------------------------------
      .               pub fn parent_iter(self, current_id: HirId) -> ParentHirIterator<'hir> {
      .                   ParentHirIterator { current_id, map: self }
      .               }
      .           
      .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
      .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
      .               pub fn parent_owner_iter(self, current_id: HirId) -> ParentOwnerIterator<'hir> {
      .                   ParentOwnerIterator { current_id, map: self }
     45 ( 0.00%)      }
      .           
      .               /// Checks if the node is left-hand side of an assignment.
      .               pub fn is_lhs(&self, id: HirId) -> bool {
      .                   match self.find(self.get_parent_node(id)) {
      .                       Some(Node::Expr(expr)) => match expr.kind {
      .                           ExprKind::Assign(lhs, _rhs, _span) => lhs.hir_id == id,
      .                           _ => false,
      .                       },
-- line 727 ----------------------------------------
-- line 792 ----------------------------------------
      .                   }
      .                   None
      .               }
      .           
      .               /// Retrieves the `HirId` for `id`'s parent item, or `id` itself if no
      .               /// parent item is in this map. The "parent item" is the closest parent node
      .               /// in the HIR which is recorded by the map and is an item, either an item
      .               /// in a module, trait, or impl.
     11 ( 0.00%)      pub fn get_parent_item(&self, hir_id: HirId) -> LocalDefId {
     99 ( 0.00%)          if let Some((def_id, _node)) = self.parent_owner_iter(hir_id).next() {
      .                       def_id
      .                   } else {
      .                       CRATE_DEF_ID
      .                   }
     22 ( 0.00%)      }
      .           
      .               /// Returns the `HirId` of `id`'s nearest module parent, or `id` itself if no
      .               /// module parent is in this map.
      .               pub(super) fn get_module_parent_node(&self, hir_id: HirId) -> LocalDefId {
     48 ( 0.00%)          for (def_id, node) in self.parent_owner_iter(hir_id) {
     10 ( 0.00%)              if let OwnerNode::Item(&Item { kind: ItemKind::Mod(_), .. }) = node {
      .                           return def_id;
      .                       }
      .                   }
      .                   CRATE_DEF_ID
      .               }
      .           
      .               /// When on an if expression, a match arm tail expression or a match arm, give back
      .               /// the enclosing `if` or `match` expression.
-- line 820 ----------------------------------------
-- line 885 ----------------------------------------
      .                       }
      .                   }
      .                   bug!(
      .                       "expected foreign mod or inlined parent, found {}",
      .                       self.node_to_string(HirId::make_owner(parent))
      .                   )
      .               }
      .           
    168 ( 0.00%)      pub fn expect_item(&self, id: LocalDefId) -> &'hir Item<'hir> {
     72 ( 0.00%)          match self.tcx.hir_owner(id) {
      .                       Some(Owner { node: OwnerNode::Item(item), .. }) => item,
      .                       _ => bug!("expected item, found {}", self.node_to_string(HirId::make_owner(id))),
      .                   }
    192 ( 0.00%)      }
      .           
      .               pub fn expect_impl_item(&self, id: LocalDefId) -> &'hir ImplItem<'hir> {
      .                   match self.tcx.hir_owner(id) {
      .                       Some(Owner { node: OwnerNode::ImplItem(item), .. }) => item,
      .                       _ => bug!("expected impl item, found {}", self.node_to_string(HirId::make_owner(id))),
      .                   }
      .               }
      .           
-- line 906 ----------------------------------------
-- line 929 ----------------------------------------
      .           
      .               pub fn expect_expr(&self, id: HirId) -> &'hir Expr<'hir> {
      .                   match self.find(id) {
      .                       Some(Node::Expr(expr)) => expr,
      .                       _ => bug!("expected expr, found {}", self.node_to_string(id)),
      .                   }
      .               }
      .           
      9 ( 0.00%)      pub fn opt_name(&self, id: HirId) -> Option<Symbol> {
      3 ( 0.00%)          Some(match self.get(id) {
      2 ( 0.00%)              Node::Item(i) => i.ident.name,
      .                       Node::ForeignItem(fi) => fi.ident.name,
      .                       Node::ImplItem(ii) => ii.ident.name,
      .                       Node::TraitItem(ti) => ti.ident.name,
      .                       Node::Variant(v) => v.ident.name,
      .                       Node::Field(f) => f.ident.name,
      .                       Node::Lifetime(lt) => lt.name.ident().name,
      .                       Node::GenericParam(param) => param.name.ident().name,
      .                       Node::Binding(&Pat { kind: PatKind::Binding(_, _, l, _), .. }) => l.name,
      .                       Node::Ctor(..) => self.name(HirId::make_owner(self.get_parent_item(id))),
      .                       _ => return None,
      .                   })
      5 ( 0.00%)      }
      .           
      8 ( 0.00%)      pub fn name(&self, id: HirId) -> Symbol {
      3 ( 0.00%)          match self.opt_name(id) {
      .                       Some(name) => name,
      .                       None => bug!("no name for {}", self.node_to_string(id)),
      .                   }
      6 ( 0.00%)      }
      .           
      .               /// Given a node ID, gets a list of attributes associated with the AST
      .               /// corresponding to the node-ID.
103,054 ( 0.05%)      pub fn attrs(&self, id: HirId) -> &'hir [ast::Attribute] {
 14,722 ( 0.01%)          self.tcx.hir_attrs(id.owner).get(id.local_id)
117,776 ( 0.05%)      }
      .           
      .               /// Gets the span of the definition of the specified HIR node.
      .               /// This is used by `tcx.get_span`
    126 ( 0.00%)      pub fn span(&self, hir_id: HirId) -> Span {
  2,390 ( 0.00%)          self.opt_span(hir_id)
      .                       .unwrap_or_else(|| bug!("hir::map::Map::span: id not in map: {:?}", hir_id))
    126 ( 0.00%)      }
      .           
  4,536 ( 0.00%)      pub fn opt_span(&self, hir_id: HirId) -> Option<Span> {
  4,536 ( 0.00%)          let span = match self.find(hir_id)? {
      .                       Node::Param(param) => param.span,
     60 ( 0.00%)              Node::Item(item) => match &item.kind {
      .                           ItemKind::Fn(sig, _, _) => sig.span,
     42 ( 0.00%)                  _ => item.span,
      .                       },
      .                       Node::ForeignItem(foreign_item) => foreign_item.span,
      .                       Node::TraitItem(trait_item) => match &trait_item.kind {
      .                           TraitItemKind::Fn(sig, _) => sig.span,
      .                           _ => trait_item.span,
      .                       },
      .                       Node::ImplItem(impl_item) => match &impl_item.kind {
      .                           ImplItemKind::Fn(sig, _) => sig.span,
-- line 986 ----------------------------------------
-- line 1007 ----------------------------------------
      .                       Node::GenericParam(param) => param.span,
      .                       Node::Visibility(&Spanned {
      .                           node: VisibilityKind::Restricted { ref path, .. },
      .                           ..
      .                       }) => path.span,
      .                       Node::Infer(i) => i.span,
      .                       Node::Visibility(v) => bug!("unexpected Visibility {:?}", v),
      .                       Node::Local(local) => local.span,
      4 ( 0.00%)              Node::Crate(item) => item.inner,
      .                   };
      .                   Some(span)
  6,480 ( 0.00%)      }
      .           
      .               /// Like `hir.span()`, but includes the body of function items
      .               /// (instead of just the function header)
      .               pub fn span_with_body(&self, hir_id: HirId) -> Span {
      .                   match self.find(hir_id) {
      .                       Some(Node::TraitItem(item)) => item.span,
      .                       Some(Node::ImplItem(impl_item)) => impl_item.span,
      .                       Some(Node::Item(item)) => item.span,
      .                       Some(_) => self.span(hir_id),
      .                       _ => bug!("hir::map::Map::span_with_body: id not in map: {:?}", hir_id),
      .                   }
      .               }
      .           
      .               pub fn span_if_local(&self, id: DefId) -> Option<Span> {
     38 ( 0.00%)          id.as_local().and_then(|id| self.opt_span(self.local_def_id_to_hir_id(id)))
      .               }
      .           
      .               pub fn res_span(&self, res: Res) -> Option<Span> {
      .                   match res {
      .                       Res::Err => None,
      .                       Res::Local(id) => Some(self.span(id)),
      .                       res => self.span_if_local(res.opt_def_id()?),
      .                   }
-- line 1041 ----------------------------------------
-- line 1062 ----------------------------------------
      .           }
      .           
      .           impl<'hir> intravisit::Map<'hir> for Map<'hir> {
      .               fn find(&self, hir_id: HirId) -> Option<Node<'hir>> {
      .                   self.find(hir_id)
      .               }
      .           
      .               fn body(&self, id: BodyId) -> &'hir Body<'hir> {
     81 ( 0.00%)          self.body(id)
      .               }
      .           
      .               fn item(&self, id: ItemId) -> &'hir Item<'hir> {
    190 ( 0.00%)          self.item(id)
      .               }
      .           
      .               fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
      .                   self.trait_item(id)
      .               }
      .           
      .               fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
      .                   self.impl_item(id)
      .               }
      .           
      .               fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
      .                   self.foreign_item(id)
      .               }
      .           }
      .           
      7 ( 0.00%)  pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {
      .               debug_assert_eq!(crate_num, LOCAL_CRATE);
      .               let krate = tcx.hir_crate(());
      3 ( 0.00%)      let hir_body_hash = krate.hir_hash;
      .           
      .               let upstream_crates = upstream_crates(tcx);
      .           
      .               // We hash the final, remapped names of all local source files so we
      .               // don't have to include the path prefix remapping commandline args.
      .               // If we included the full mapping in the SVH, we could only have
      .               // reproducible builds by compiling from the same directory. So we just
      .               // hash the result of the mapping instead of the mapping itself.
      2 ( 0.00%)      let mut source_file_names: Vec<_> = tcx
      .                   .sess
      .                   .source_map()
      .                   .files()
      .                   .iter()
      .                   .filter(|source_file| source_file.cnum == LOCAL_CRATE)
      2 ( 0.00%)          .map(|source_file| source_file.name_hash)
      .                   .collect();
      .           
      .               source_file_names.sort_unstable();
      .           
      .               let mut hcx = tcx.create_stable_hashing_context();
      .               let mut stable_hasher = StableHasher::new();
      .               hir_body_hash.hash_stable(&mut hcx, &mut stable_hasher);
      .               upstream_crates.hash_stable(&mut hcx, &mut stable_hasher);
      .               source_file_names.hash_stable(&mut hcx, &mut stable_hasher);
      3 ( 0.00%)      if tcx.sess.opts.debugging_opts.incremental_relative_spans {
      .                   let definitions = &tcx.untracked_resolutions.definitions;
      .                   let mut owner_spans: Vec<_> = krate
      .                       .owners
      .                       .iter_enumerated()
      .                       .filter_map(|(def_id, info)| {
      .                           let _ = info.as_ref()?;
      .                           let def_path_hash = definitions.def_path_hash(def_id);
      .                           let span = definitions.def_span(def_id);
      .                           debug_assert_eq!(span.parent(), None);
      .                           Some((def_path_hash, span))
      .                       })
      .                       .collect();
      .                   owner_spans.sort_unstable_by_key(|bn| bn.0);
      .                   owner_spans.hash_stable(&mut hcx, &mut stable_hasher);
      .               }
      3 ( 0.00%)      tcx.sess.opts.dep_tracking_hash(true).hash_stable(&mut hcx, &mut stable_hasher);
      2 ( 0.00%)      tcx.sess.local_stable_crate_id().hash_stable(&mut hcx, &mut stable_hasher);
      .           
      .               let crate_hash: Fingerprint = stable_hasher.finish();
      1 ( 0.00%)      Svh::new(crate_hash.to_smaller_hash())
      9 ( 0.00%)  }
      .           
      .           fn upstream_crates(tcx: TyCtxt<'_>) -> Vec<(StableCrateId, Svh)> {
      .               let mut upstream_crates: Vec<_> = tcx
      .                   .crates(())
      .                   .iter()
      .                   .map(|&cnum| {
    120 ( 0.00%)              let stable_crate_id = tcx.resolutions(()).cstore.stable_crate_id(cnum);
     24 ( 0.00%)              let hash = tcx.crate_hash(cnum);
      .                       (stable_crate_id, hash)
      .                   })
      .                   .collect();
      .               upstream_crates.sort_unstable_by_key(|&(stable_crate_id, _)| stable_crate_id);
      .               upstream_crates
      .           }
      .           
      .           fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {
-- line 1155 ----------------------------------------
-- line 1238 ----------------------------------------
      .                   Some(Node::Lifetime(_)) => node_str("lifetime"),
      .                   Some(Node::GenericParam(ref param)) => format!("generic_param {:?}{}", param, id_str),
      .                   Some(Node::Visibility(ref vis)) => format!("visibility {:?}{}", vis, id_str),
      .                   Some(Node::Crate(..)) => String::from("root_crate"),
      .                   None => format!("unknown node{}", id_str),
      .               }
      .           }
      .           
      9 ( 0.00%)  pub(super) fn hir_module_items(tcx: TyCtxt<'_>, module_id: LocalDefId) -> ModuleItems {
      6 ( 0.00%)      let mut collector = ModuleCollector {
      .                   tcx,
      .                   submodules: Vec::default(),
      .                   items: Vec::default(),
      .                   trait_items: Vec::default(),
      .                   impl_items: Vec::default(),
      .                   foreign_items: Vec::default(),
      .               };
      .           
      5 ( 0.00%)      let (hir_mod, span, hir_id) = tcx.hir().get_module(module_id);
      .               collector.visit_mod(hir_mod, span, hir_id);
      .           
     16 ( 0.00%)      let ModuleCollector { submodules, items, trait_items, impl_items, foreign_items, .. } =
      .                   collector;
     11 ( 0.00%)      return ModuleItems {
      4 ( 0.00%)          submodules: submodules.into_boxed_slice(),
      4 ( 0.00%)          items: items.into_boxed_slice(),
      4 ( 0.00%)          trait_items: trait_items.into_boxed_slice(),
      4 ( 0.00%)          impl_items: impl_items.into_boxed_slice(),
      4 ( 0.00%)          foreign_items: foreign_items.into_boxed_slice(),
      .               };
      .           
      .               struct ModuleCollector<'tcx> {
      .                   tcx: TyCtxt<'tcx>,
      .                   submodules: Vec<LocalDefId>,
      .                   items: Vec<ItemId>,
      .                   trait_items: Vec<TraitItemId>,
      .                   impl_items: Vec<ImplItemId>,
      .                   foreign_items: Vec<ForeignItemId>,
      .               }
      .           
      .               impl<'hir> Visitor<'hir> for ModuleCollector<'hir> {
      .                   type NestedFilter = nested_filter::All;
      .           
      .                   fn nested_visit_map(&mut self) -> Self::Map {
     21 ( 0.00%)              self.tcx.hir()
      .                   }
      .           
     85 ( 0.00%)          fn visit_item(&mut self, item: &'hir Item<'hir>) {
     51 ( 0.00%)              self.items.push(item.item_id());
     34 ( 0.00%)              if let ItemKind::Mod(..) = item.kind {
      .                           // If this declares another module, do not recurse inside it.
      .                           self.submodules.push(item.def_id);
      .                       } else {
    102 ( 0.00%)                  intravisit::walk_item(self, item)
      .                       }
      .                   }
      .           
      .                   fn visit_trait_item(&mut self, item: &'hir TraitItem<'hir>) {
      .                       self.trait_items.push(item.trait_item_id());
      .                       intravisit::walk_trait_item(self, item)
      .                   }
      .           
-- line 1299 ----------------------------------------
-- line 1302 ----------------------------------------
      .                       intravisit::walk_impl_item(self, item)
      .                   }
      .           
      .                   fn visit_foreign_item(&mut self, item: &'hir ForeignItem<'hir>) {
      .                       self.foreign_items.push(item.foreign_item_id());
      .                       intravisit::walk_foreign_item(self, item)
      .                   }
      .               }
      8 ( 0.00%)  }

 29,033 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/dl-lookup.c
  ./elf/do-rel.h
  ./malloc/malloc.c
  ./stdlib/cxa_finalize.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/strcmp.S

--------------------------------------------------------------------------------
Ir                  
--------------------------------------------------------------------------------
93,583,693 (43.10%)  events annotated

