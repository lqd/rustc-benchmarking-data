--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name failure src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg feature="backtrace" --cfg feature="default" --cfg feature="derive" --cfg feature="failure_derive" --cfg feature="std" -C metadata=ffbbed4375dab47f -C extra-filename=-ffbbed4375dab47f --out-dir /usr/home/liquid/tmp/.tmps7B3U1/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmps7B3U1/target/debug/deps --extern backtrace=/usr/home/liquid/tmp/.tmps7B3U1/target/debug/deps/libbacktrace-2bcf849598db44c4.rmeta --extern failure_derive=/usr/home/liquid/tmp/.tmps7B3U1/target/debug/deps/libfailure_derive-f072839410d1946d.so -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-failure-0.1.8-Check-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
394,787,916 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   file:function
--------------------------------------------------------------------------------
17,576,870 ( 4.45%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
12,794,174 ( 3.24%)  ./malloc/malloc.c:_int_free
12,346,640 ( 3.13%)  ./malloc/malloc.c:_int_malloc
11,820,923 ( 2.99%)  ./elf/dl-lookup.c:do_lookup_x
 7,926,600 ( 2.01%)  ./malloc/malloc.c:malloc
 5,440,248 ( 1.38%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
 4,877,832 ( 1.24%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
 3,683,689 ( 0.93%)  ./malloc/malloc.c:free
 2,821,497 ( 0.71%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,503,420 ( 0.63%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,360,964 ( 0.60%)  ./elf/do-rel.h:_dl_relocate_object
 2,353,285 ( 0.60%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,208,741 ( 0.56%)  ./malloc/malloc.c:malloc_consolidate
 2,016,296 ( 0.51%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 1,854,289 ( 0.47%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
 1,545,045 ( 0.39%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>)>>::remove_entry::<hashbrown::map::equivalent_key<rustc_span::def_id::DefId, rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>>::{closure#0}>
 1,362,217 ( 0.35%)  ???:SetImpliedBits(llvm::FeatureBitset&, llvm::FeatureBitset const&, llvm::ArrayRef<llvm::SubtargetFeatureKV>)
 1,358,241 ( 0.34%)  ./malloc/malloc.c:unlink_chunk.constprop.0
 1,309,068 ( 0.33%)  ./malloc/malloc.c:realloc
 1,306,297 ( 0.33%)  ./elf/dl-lookup.c:check_match
 1,305,227 ( 0.33%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 1,188,224 ( 0.30%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
 1,083,860 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
 1,079,781 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
 1,076,737 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
 1,076,460 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
 1,036,737 ( 0.26%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs:<&str as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   976,132 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   937,689 ( 0.24%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   935,052 ( 0.24%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
   926,148 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
   917,309 ( 0.23%)  ./malloc/malloc.c:_int_realloc
   875,556 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
   873,847 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
   830,786 ( 0.21%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
   817,965 ( 0.21%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs:<hashbrown::map::HashMap<rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
   800,392 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   789,069 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   784,662 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
   784,477 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
   761,820 ( 0.19%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTableInner<alloc::alloc::Global>>::prepare_insert_slot
   734,230 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
   727,118 ( 0.18%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core.rs:<indexmap::map::core::Entry<rustc_middle::ty::fast_reject::SimplifiedTypeGen<rustc_span::def_id::DefId>, alloc::vec::Vec<rustc_span::def_id::DefId>>>::or_default
   721,258 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   718,641 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   695,292 ( 0.18%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
   685,125 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs:<rustc_parse::lexer::StringReader>::next_token
   666,902 ( 0.17%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
   666,192 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
   656,658 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::TokenCursor>::next
   643,594 ( 0.16%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
   630,943 ( 0.16%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs:<indexmap::map::core::Entry<rustc_middle::ty::fast_reject::SimplifiedTypeGen<rustc_span::def_id::DefId>, alloc::vec::Vec<rustc_span::def_id::DefId>>>::or_default
   624,389 ( 0.16%)  ./string/../sysdeps/x86_64/strcmp.S:strcmp
   621,781 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump
   609,868 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/tuple.rs:core::slice::sort::recurse::<rustc_span::def_id::DefId, <[rustc_span::def_id::DefId]>::sort_unstable_by_key<(i64, usize), rustc_trait_selection::traits::specialize::specialization_graph_provider::{closure#0}>::{closure#0}>
   609,276 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs:<rustc_span::symbol::Symbol>::intern
   604,406 ( 0.15%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs:stacker::remaining_stack
   572,353 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<rustc_span::symbol::Symbol>::intern
   563,412 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
   556,484 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::cmp::PartialEq>::eq
   534,476 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs:<rustc_lexer::cursor::Cursor>::advance_token
   524,439 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/sort.rs:core::slice::sort::recurse::<rustc_span::def_id::DefId, <[rustc_span::def_id::DefId]>::sort_unstable_by_key<(i64, usize), rustc_trait_selection::traits::specialize::specialization_graph_provider::{closure#0}>::{closure#0}>
   511,309 ( 0.13%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
   510,084 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_query_system/src/query/plumbing.rs:rustc_query_system::query::plumbing::try_execute_query::<rustc_query_impl::plumbing::QueryCtxt, rustc_query_system::query::caches::DefaultCache<rustc_span::def_id::DefId, core::option::Option<rustc_middle::ty::sty::TraitRef>>>
   505,727 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
   492,642 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs:<rustc_parse::lexer::tokentrees::TokenTreesReader>::parse_token_tree
   490,507 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::check
   485,094 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::HashMap<rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
   481,032 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_query_system/src/query/plumbing.rs:rustc_query_system::query::plumbing::try_execute_query::<rustc_query_impl::plumbing::QueryCtxt, rustc_query_system::query::caches::DefaultCache<rustc_span::def_id::DefId, core::option::Option<rustc_span::def_id::DefId>>>
   480,039 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs:<hashbrown::raw::inner::RawTable<usize>>::reserve_rehash::<indexmap::map::core::get_hash<rustc_middle::ty::fast_reject::SimplifiedTypeGen<rustc_span::def_id::DefId>, alloc::vec::Vec<rustc_span::def_id::DefId>>::{closure#0}>
   474,017 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   471,584 ( 0.12%)  ./malloc/malloc.c:calloc
   470,055 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   467,655 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   465,596 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::def_id::DefId, rustc_span::def_id::DefId)>>::insert::<hashbrown::map::make_hasher<rustc_span::def_id::DefId, rustc_span::def_id::DefId, rustc_span::def_id::DefId, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   460,884 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs:<rustc_ast::tokenstream::Cursor>::next_with_spacing
   460,043 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::PredicateKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   459,321 ( 0.12%)  ???:llvm::StringMapImpl::LookupBucketFor(llvm::StringRef)
   458,148 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u64
   454,343 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_query_system/src/query/plumbing.rs:rustc_query_system::query::plumbing::get_query::<rustc_query_impl::queries::impl_trait_ref, rustc_query_impl::plumbing::QueryCtxt>
   452,917 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
   437,935 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_predicate
   435,728 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   433,476 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::def_id::DefId, (core::option::Option<rustc_middle::ty::sty::TraitRef>, rustc_query_system::dep_graph::graph::DepNodeIndex))>>::insert::<hashbrown::map::make_hasher<rustc_span::def_id::DefId, rustc_span::def_id::DefId, (core::option::Option<rustc_middle::ty::sty::TraitRef>, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   432,828 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::def_id::DefId, (core::option::Option<rustc_span::def_id::DefId>, rustc_query_system::dep_graph::graph::DepNodeIndex))>>::insert::<hashbrown::map::make_hasher<rustc_span::def_id::DefId, rustc_span::def_id::DefId, (core::option::Option<rustc_span::def_id::DefId>, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   430,857 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode::{closure#0}> as rustc_middle::ty::context::InternAs<[rustc_middle::ty::subst::GenericArg], &rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::intern_with::<<rustc_middle::ty::context::TyCtxt>::mk_substs<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode::{closure#0}>>::{closure#0}>
   428,888 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::sty::RegionKind>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::RegionKind, rustc_middle::ty::context::Interned<rustc_middle::ty::sty::RegionKind>>::{closure#0}>
   421,731 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
   420,509 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::def_id::DefId, (core::option::Option<rustc_span::def_id::DefId>, rustc_query_system::dep_graph::graph::DepNodeIndex))>>::reserve_rehash::<hashbrown::map::make_hasher<rustc_span::def_id::DefId, rustc_span::def_id::DefId, (core::option::Option<rustc_span::def_id::DefId>, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   417,953 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, ())>>::insert_entry::<hashbrown::map::make_hasher<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   417,767 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(&str, rustc_span::symbol::Symbol)>>::insert::<hashbrown::map::make_hasher<&str, &str, rustc_span::symbol::Symbol, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   410,675 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::Token>::is_keyword
   409,868 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<rustc_middle::ty::subst::SubstFolder as rustc_middle::ty::fold::TypeFolder>::fold_ty
   409,401 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (core::option::Option<rustc_middle::hir::Owner>, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
   407,591 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
   406,255 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, ())>>::reserve_rehash::<hashbrown::map::make_hasher<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs
--------------------------------------------------------------------------------
Ir              

-- line 121 ----------------------------------------
     .           #[derive(Debug)]
     .           pub enum ProcessResult<O, E> {
     .               Unchanged,
     .               Changed(Vec<O>),
     .               Error(E),
     .           }
     .           
     .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
 5,732 ( 0.00%)  struct ObligationTreeId(usize);
     .           
     .           type ObligationTreeIdGenerator =
     .               std::iter::Map<std::ops::RangeFrom<usize>, fn(usize) -> ObligationTreeId>;
     .           
     .           pub struct ObligationForest<O: ForestObligation> {
     .               /// The list of obligations. In between calls to `process_obligations`,
     .               /// this list only contains nodes in the `Pending` or `Waiting` state.
     .               ///
-- line 137 ----------------------------------------
-- line 181 ----------------------------------------
     .               has_parent: bool,
     .           
     .               /// Identifier of the obligation tree to which this node belongs.
     .               obligation_tree_id: ObligationTreeId,
     .           }
     .           
     .           impl<O> Node<O> {
     .               fn new(parent: Option<usize>, obligation: O, obligation_tree_id: ObligationTreeId) -> Node<O> {
69,536 ( 0.02%)          Node {
     .                       obligation,
     .                       state: Cell::new(NodeState::Pending),
 8,786 ( 0.00%)              dependents: if let Some(parent_index) = parent { vec![parent_index] } else { vec![] },
     .                       has_parent: parent.is_some(),
     .                       obligation_tree_id,
     .                   }
     .               }
     .           }
     .           
     .           /// The state of one node in some tree within the forest. This represents the
     .           /// current state of processing for the obligation (of type `O`) associated
-- line 200 ----------------------------------------
-- line 223 ----------------------------------------
     .           ///  |     compress()
     .           ///  v
     .           /// (Removed)
     .           /// ```
     .           /// The `Error` state can be introduced in several places, via `error_at()`.
     .           ///
     .           /// Outside of `ObligationForest` methods, nodes should be either `Pending` or
     .           /// `Waiting`.
29,461 ( 0.01%)  #[derive(Debug, Copy, Clone, PartialEq, Eq)]
     .           enum NodeState {
     .               /// This obligation has not yet been selected successfully. Cannot have
     .               /// subobligations.
     .               Pending,
     .           
     .               /// This obligation was selected successfully, but may or may not have
     .               /// subobligations.
     .               Success,
-- line 239 ----------------------------------------
-- line 279 ----------------------------------------
     .               pub stalled: bool,
     .           }
     .           
     .           impl<O, E> OutcomeTrait for Outcome<O, E> {
     .               type Error = Error<O, E>;
     .               type Obligation = O;
     .           
     .               fn new() -> Self {
13,206 ( 0.00%)          Self { stalled: true, errors: vec![] }
     .               }
     .           
     .               fn mark_not_stalled(&mut self) {
 4,336 ( 0.00%)          self.stalled = false;
     .               }
     .           
     .               fn is_stalled(&self) -> bool {
 1,521 ( 0.00%)          self.stalled
     .               }
     .           
     .               fn record_completed(&mut self, _outcome: &Self::Obligation) {
     .                   // do nothing
     .               }
     .           
     .               fn record_error(&mut self, error: Self::Error) {
    32 ( 0.00%)          self.errors.push(error)
     .               }
     .           }
     .           
     .           #[derive(Debug, PartialEq, Eq)]
     .           pub struct Error<O, E> {
     .               pub error: E,
     .               pub backtrace: Vec<O>,
     .           }
     .           
     .           impl<O: ForestObligation> ObligationForest<O> {
 2,226 ( 0.00%)      pub fn new() -> ObligationForest<O> {
26,712 ( 0.01%)          ObligationForest {
     .                       nodes: vec![],
     .                       done_cache: Default::default(),
     .                       active_cache: Default::default(),
     .                       reused_node_vec: vec![],
     .                       obligation_tree_id_generator: (0..).map(ObligationTreeId),
     .                       error_cache: Default::default(),
     .                   }
 2,226 ( 0.00%)      }
     .           
     .               /// Returns the total number of nodes in the forest that have not
     .               /// yet been fully resolved.
     .               pub fn len(&self) -> usize {
     .                   self.nodes.len()
     .               }
     .           
     .               /// Registers an obligation.
     .               pub fn register_obligation(&mut self, obligation: O) {
     .                   // Ignore errors here - there is no guarantee of success.
44,408 ( 0.01%)          let _ = self.register_obligation_at(obligation, None);
     .               }
     .           
     .               // Returns Err(()) if we already know this obligation failed.
63,470 ( 0.02%)      fn register_obligation_at(&mut self, obligation: O, parent: Option<usize>) -> Result<(), ()> {
11,540 ( 0.00%)          let cache_key = obligation.as_cache_key();
11,540 ( 0.00%)          if self.done_cache.contains(&cache_key) {
     .                       debug!("register_obligation_at: ignoring already done obligation: {:?}", obligation);
     .                       return Ok(());
     .                   }
     .           
32,580 ( 0.01%)          match self.active_cache.entry(cache_key) {
     .                       Entry::Occupied(o) => {
 2,168 ( 0.00%)                  let node = &mut self.nodes[*o.get()];
 2,168 ( 0.00%)                  if let Some(parent_index) = parent {
     .                               // If the node is already in `active_cache`, it has already
     .                               // had its chance to be marked with a parent. So if it's
     .                               // not already present, just dump `parent` into the
     .                               // dependents as a non-parent.
 2,040 ( 0.00%)                      if !node.dependents.contains(&parent_index) {
     .                                   node.dependents.push(parent_index);
     .                               }
     .                           }
 3,252 ( 0.00%)                  if let NodeState::Error = node.state.get() { Err(()) } else { Ok(()) }
     .                       }
13,038 ( 0.00%)              Entry::Vacant(v) => {
26,076 ( 0.01%)                  let obligation_tree_id = match parent {
 2,960 ( 0.00%)                      Some(parent_index) => self.nodes[parent_index].obligation_tree_id,
     .                               None => self.obligation_tree_id_generator.next().unwrap(),
     .                           };
     .           
     .                           let already_failed = parent.is_some()
     .                               && self
     .                                   .error_cache
     .                                   .get(&obligation_tree_id)
     .                                   .map_or(false, |errors| errors.contains(v.key()));
     .           
     .                           if already_failed {
     .                               Err(())
     .                           } else {
 4,346 ( 0.00%)                      let new_index = self.nodes.len();
     .                               v.insert(new_index);
     .                               self.nodes.push(Node::new(parent, obligation, obligation_tree_id));
     .                               Ok(())
     .                           }
     .                       }
     .                   }
51,930 ( 0.01%)      }
     .           
     .               /// Converts all remaining obligations to the given error.
26,488 ( 0.01%)      pub fn to_errors<E: Clone>(&mut self, error: E) -> Vec<Error<O, E>> {
     .                   let errors = self
     .                       .nodes
     .                       .iter()
     .                       .enumerate()
     .                       .filter(|(_index, node)| node.state.get() == NodeState::Pending)
     .                       .map(|(index, _node)| Error { error: error.clone(), backtrace: self.error_at(index) })
     .                       .collect();
     .           
 7,568 ( 0.00%)          self.compress(|_| assert!(false));
     .                   errors
22,704 ( 0.01%)      }
     .           
     .               /// Returns the set of obligations that are in a pending state.
     .               pub fn map_pending_obligations<P, F>(&self, f: F) -> Vec<P>
     .               where
     .                   F: Fn(&O) -> P,
     .               {
     1 ( 0.00%)          self.nodes
     .                       .iter()
     .                       .filter(|node| node.state.get() == NodeState::Pending)
     .                       .map(|node| f(&node.obligation))
     .                       .collect()
     .               }
     .           
    14 ( 0.00%)      fn insert_into_error_cache(&mut self, index: usize) {
     .                   let node = &self.nodes[index];
     2 ( 0.00%)          self.error_cache
     6 ( 0.00%)              .entry(node.obligation_tree_id)
     .                       .or_default()
     .                       .insert(node.obligation.as_cache_key());
    16 ( 0.00%)      }
     .           
     .               /// Performs a pass through the obligation list. This must
     .               /// be called in a loop until `outcome.stalled` is false.
     .               ///
     .               /// This _cannot_ be unrolled (presently, at least).
     .               #[inline(never)]
59,427 ( 0.02%)      pub fn process_obligations<P, OUT>(&mut self, processor: &mut P) -> OUT
     .               where
     .                   P: ObligationProcessor<Obligation = O>,
     .                   OUT: OutcomeTrait<Obligation = O, Error = Error<O, P::Error>>,
     .               {
     .                   let mut outcome = OUT::new();
     .           
     .                   // Note that the loop body can append new nodes, and those new nodes
     .                   // will then be processed by subsequent iterations of the loop.
     .                   //
     .                   // We can't use an iterator for the loop because `self.nodes` is
     .                   // appended to and the borrow checker would complain. We also can't use
     .                   // `for index in 0..self.nodes.len() { ... }` because the range would
     .                   // be computed with the initial length, and we would miss the appended
     .                   // nodes. Therefore we use a `while` loop.
     .                   let mut index = 0;
13,699 ( 0.00%)          while let Some(node) = self.nodes.get_mut(index) {
     .                       // `processor.process_obligation` can modify the predicate within
     .                       // `node.obligation`, and that predicate is the key used for
     .                       // `self.active_cache`. This means that `self.active_cache` can get
     .                       // out of sync with `nodes`. It's not very common, but it does
     .                       // happen, and code in `compress` has to allow for it.
14,192 ( 0.00%)              if node.state.get() != NodeState::Pending {
   483 ( 0.00%)                  index += 1;
     .                           continue;
     .                       }
     .           
22,784 ( 0.01%)              match processor.process_obligation(&mut node.obligation) {
     .                           ProcessResult::Unchanged => {
     .                               // No change in state.
     .                           }
17,336 ( 0.00%)                  ProcessResult::Changed(children) => {
     .                               // We are not (yet) stalled.
     .                               outcome.mark_not_stalled();
     .                               node.state.set(NodeState::Success);
     .           
22,044 ( 0.01%)                      for child in children {
40,018 ( 0.01%)                          let st = self.register_obligation_at(child, Some(index));
 4,708 ( 0.00%)                          if let Err(()) = st {
     .                                       // Error already reported - propagate it
     .                                       // to our node.
     .                                       self.error_at(index);
     .                                   }
     .                               }
     .                           }
     .                           ProcessResult::Error(err) => {
     .                               outcome.mark_not_stalled();
    66 ( 0.00%)                      outcome.record_error(Error { error: err, backtrace: self.error_at(index) });
     .                           }
     .                       }
13,226 ( 0.00%)              index += 1;
     .                   }
     .           
     .                   // There's no need to perform marking, cycle processing and compression when nothing
     .                   // changed.
 1,521 ( 0.00%)          if !outcome.is_stalled() {
     .                       self.mark_successes();
     .                       self.process_cycles(processor);
 2,166 ( 0.00%)              self.compress(|obl| outcome.record_completed(obl));
     .                   }
     .           
     .                   outcome
59,427 ( 0.02%)      }
     .           
     .               /// Returns a vector of obligations for `p` and all of its
     .               /// ancestors, putting them into the error state in the process.
    14 ( 0.00%)      fn error_at(&self, mut index: usize) -> Vec<O> {
     .                   let mut error_stack: Vec<usize> = vec![];
     .                   let mut trace = vec![];
     .           
     .                   loop {
     .                       let node = &self.nodes[index];
     2 ( 0.00%)              node.state.set(NodeState::Error);
     .                       trace.push(node.obligation.clone());
     4 ( 0.00%)              if node.has_parent {
     .                           // The first dependent is the parent, which is treated
     .                           // specially.
     .                           error_stack.extend(node.dependents.iter().skip(1));
     .                           index = node.dependents[0];
     .                       } else {
     .                           // No parent; treat all dependents non-specially.
     .                           error_stack.extend(node.dependents.iter());
     .                           break;
-- line 504 ----------------------------------------
-- line 509 ----------------------------------------
     .                       let node = &self.nodes[index];
     .                       if node.state.get() != NodeState::Error {
     .                           node.state.set(NodeState::Error);
     .                           error_stack.extend(node.dependents.iter());
     .                       }
     .                   }
     .           
     .                   trace
    16 ( 0.00%)      }
     .           
     .               /// Mark all `Waiting` nodes as `Success`, except those that depend on a
     .               /// pending node.
     .               fn mark_successes(&self) {
     .                   // Convert all `Waiting` nodes to `Success`.
     .                   for node in &self.nodes {
18,722 ( 0.00%)              if node.state.get() == NodeState::Waiting {
     .                           node.state.set(NodeState::Success);
     .                       }
     .                   }
     .           
     .                   // Convert `Success` nodes that depend on a pending node back to
     .                   // `Waiting`.
     .                   for node in &self.nodes {
 5,202 ( 0.00%)              if node.state.get() == NodeState::Pending {
     .                           // This call site is hot.
     .                           self.inlined_mark_dependents_as_waiting(node);
     .                       }
     .                   }
     .               }
     .           
     .               // This always-inlined function is for the hot call site.
     .               #[inline(always)]
     .               fn inlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
   257 ( 0.00%)          for &index in node.dependents.iter() {
     .                       let node = &self.nodes[index];
   257 ( 0.00%)              let state = node.state.get();
   257 ( 0.00%)              if state == NodeState::Success {
     .                           // This call site is cold.
   438 ( 0.00%)                  self.uninlined_mark_dependents_as_waiting(node);
     .                       } else {
     .                           debug_assert!(state == NodeState::Waiting || state == NodeState::Error)
     .                       }
     .                   }
     .               }
     .           
     .               // This never-inlined function is for the cold call site.
     .               #[inline(never)]
 1,022 ( 0.00%)      fn uninlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
     .                   // Mark node Waiting in the cold uninlined code instead of the hot inlined
     .                   node.state.set(NodeState::Waiting);
     .                   self.inlined_mark_dependents_as_waiting(node)
 1,168 ( 0.00%)      }
     .           
     .               /// Report cycles between all `Success` nodes, and convert all `Success`
     .               /// nodes to `Done`. This must be called after `mark_successes`.
     .               fn process_cycles<P>(&mut self, processor: &mut P)
     .               where
     .                   P: ObligationProcessor<Obligation = O>,
     .               {
 1,083 ( 0.00%)          let mut stack = std::mem::take(&mut self.reused_node_vec);
     .                   for (index, node) in self.nodes.iter().enumerate() {
     .                       // For some benchmarks this state test is extremely hot. It's a win
     .                       // to handle the no-op cases immediately to avoid the cost of the
     .                       // function call.
 5,202 ( 0.00%)              if node.state.get() == NodeState::Success {
21,150 ( 0.01%)                  self.find_cycles_from_node(&mut stack, processor, index);
     .                       }
     .                   }
     .           
     .                   debug_assert!(stack.is_empty());
 8,664 ( 0.00%)          self.reused_node_vec = stack;
     .               }
     .           
56,871 ( 0.01%)      fn find_cycles_from_node<P>(&self, stack: &mut Vec<usize>, processor: &mut P, index: usize)
     .               where
     .                   P: ObligationProcessor<Obligation = O>,
     .               {
     .                   let node = &self.nodes[index];
12,638 ( 0.00%)          if node.state.get() == NodeState::Success {
   220 ( 0.00%)              match stack.iter().rposition(|&n| n == index) {
     .                           None => {
     .                               stack.push(index);
 2,089 ( 0.00%)                      for &dep_index in node.dependents.iter() {
 8,356 ( 0.00%)                          self.find_cycles_from_node(stack, processor, dep_index);
     .                               }
     .                               stack.pop();
     .                               node.state.set(NodeState::Done);
     .                           }
     .                           Some(rpos) => {
     .                               // Cycle detected.
    18 ( 0.00%)                      processor.process_backedge(
     .                                   stack[rpos..].iter().map(|&i| &self.nodes[i].obligation),
     .                                   PhantomData,
     .                               );
     .                           }
     .                       }
     .                   }
50,552 ( 0.01%)      }
     .           
     .               /// Compresses the vector, removing all popped nodes. This adjusts the
     .               /// indices and hence invalidates any outstanding indices. `process_cycles`
     .               /// must be run beforehand to remove any cycles on `Success` nodes.
     .               #[inline(never)]
35,152 ( 0.01%)      fn compress(&mut self, mut outcome_cb: impl FnMut(&O)) {
 4,867 ( 0.00%)          let orig_nodes_len = self.nodes.len();
     .                   let mut node_rewrites: Vec<_> = std::mem::take(&mut self.reused_node_vec);
     .                   debug_assert!(node_rewrites.is_empty());
     .                   node_rewrites.extend(0..orig_nodes_len);
     .                   let mut dead_nodes = 0;
     .           
     .                   // Move removable nodes to the end, preserving the order of the
     .                   // remaining nodes.
     .                   //
     .                   // LOOP INVARIANT:
     .                   //     self.nodes[0..index - dead_nodes] are the first remaining nodes
     .                   //     self.nodes[index - dead_nodes..index] are all dead
     .                   //     self.nodes[index..] are unchanged
     .                   for index in 0..orig_nodes_len {
     .                       let node = &self.nodes[index];
30,342 ( 0.01%)              match node.state.get() {
     .                           NodeState::Pending | NodeState::Waiting => {
 1,732 ( 0.00%)                      if dead_nodes > 0 {
 1,350 ( 0.00%)                          self.nodes.swap(index, index - dead_nodes);
 2,250 ( 0.00%)                          node_rewrites[index] -= dead_nodes;
     .                               }
     .                           }
     .                           NodeState::Done => {
     .                               // This lookup can fail because the contents of
     .                               // `self.active_cache` are not guaranteed to match those of
     .                               // `self.nodes`. See the comment in `process_obligation`
     .                               // for more details.
16,789 ( 0.00%)                      if let Some((predicate, _)) =
13,002 ( 0.00%)                          self.active_cache.remove_entry(&node.obligation.as_cache_key())
     .                               {
     .                                   self.done_cache.insert(predicate);
     .                               } else {
     .                                   self.done_cache.insert(node.obligation.as_cache_key().clone());
     .                               }
     .                               // Extract the success stories.
     .                               outcome_cb(&node.obligation);
 8,668 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
 8,668 ( 0.00%)                      dead_nodes += 1;
     .                           }
     .                           NodeState::Error => {
     .                               // We *intentionally* remove the node from the cache at this point. Otherwise
     .                               // tests must come up with a different type on every type error they
     .                               // check against.
     6 ( 0.00%)                      self.active_cache.remove(&node.obligation.as_cache_key());
     4 ( 0.00%)                      self.insert_into_error_cache(index);
     4 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
     4 ( 0.00%)                      dead_nodes += 1;
     .                           }
     .                           NodeState::Success => unreachable!(),
     .                       }
     .                   }
     .           
     .                   if dead_nodes > 0 {
     .                       // Remove the dead nodes and rewrite indices.
 2,148 ( 0.00%)              self.nodes.truncate(orig_nodes_len - dead_nodes);
 1,074 ( 0.00%)              self.apply_rewrites(&node_rewrites);
     .                   }
     .           
     .                   node_rewrites.truncate(0);
19,468 ( 0.00%)          self.reused_node_vec = node_rewrites;
38,936 ( 0.01%)      }
     .           
     .               #[inline(never)]
 9,666 ( 0.00%)      fn apply_rewrites(&mut self, node_rewrites: &[usize]) {
     .                   let orig_nodes_len = node_rewrites.len();
     .           
     .                   for node in &mut self.nodes {
     .                       let mut i = 0;
 1,044 ( 0.00%)              while let Some(dependent) = node.dependents.get_mut(i) {
   920 ( 0.00%)                  let new_index = node_rewrites[*dependent];
   460 ( 0.00%)                  if new_index >= orig_nodes_len {
     .                               node.dependents.swap_remove(i);
     .                               if i == 0 && node.has_parent {
     .                                   // We just removed the parent.
     .                                   node.has_parent = false;
     .                               }
     .                           } else {
   230 ( 0.00%)                      *dependent = new_index;
   460 ( 0.00%)                      i += 1;
     .                           }
     .                       }
     .                   }
     .           
     .                   // This updating of `self.active_cache` is necessary because the
     .                   // removal of nodes within `compress` can fail. See above.
     .                   self.active_cache.retain(|_predicate, index| {
 5,444 ( 0.00%)              let new_index = node_rewrites[*index];
 2,722 ( 0.00%)              if new_index >= orig_nodes_len {
     .                           false
     .                       } else {
   814 ( 0.00%)                  *index = new_index;
     .                           true
     .                       }
     .                   });
 8,592 ( 0.00%)      }
     .           }

92,319 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 108 ----------------------------------------
      .                   suppress_errors: bool,
      .               },
      .           }
      .           
      .           impl RegionckMode {
      .               /// Indicates that the MIR borrowck will repeat these region
      .               /// checks, so we should ignore errors if NLL is (unconditionally)
      .               /// enabled.
    103 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
      .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
      .                   // this always `true` and then proceed to eliminate the dead code.
    103 ( 0.00%)          match tcx.borrowck_mode() {
      .                       // If we're on Migrate mode, report AST region errors
      .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
      .           
      .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
      .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
      .                   }
    206 ( 0.00%)      }
      .           }
      .           
      .           /// This type contains all the things within `InferCtxt` that sit within a
      .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
      .           /// operations are hot enough that we want only one call to `borrow_mut` per
      .           /// call to `start_snapshot` and `rollback_to`.
      .           pub struct InferCtxtInner<'tcx> {
      .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
      .               /// type instantiations (`ty::Infer`) to the actual opaque
      .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
      .               /// opaque type inference variables to their corresponding
      .               /// opaque type.
      .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
      .           }
      .           
      .           impl<'tcx> InferCtxtInner<'tcx> {
 15,630 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
106,284 ( 0.03%)          InferCtxtInner {
      .                       projection_cache: Default::default(),
      .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
      .                       undo_log: InferCtxtUndoLogs::default(),
      .                       const_unification_storage: ut::UnificationTableStorage::new(),
      .                       int_unification_storage: ut::UnificationTableStorage::new(),
      .                       float_unification_storage: ut::UnificationTableStorage::new(),
  9,378 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
      .                       region_obligations: vec![],
      .                       opaque_types: Default::default(),
      .                       opaque_types_vars: Default::default(),
      .                   }
 18,756 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
      .                   &self.region_obligations
      .               }
      .           
      .               #[inline]
      .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
    113 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
 33,312 ( 0.01%)          self.type_variable_storage.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn int_unification_table(
      .                   &mut self,
      .               ) -> ut::UnificationTable<
      .                   ut::InPlace<
      .                       ty::IntVid,
      .                       &mut ut::UnificationStorage<ty::IntVid>,
      .                       &mut InferCtxtUndoLogs<'tcx>,
      .                   >,
      .               > {
     55 ( 0.00%)          self.int_unification_storage.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn float_unification_table(
      .                   &mut self,
      .               ) -> ut::UnificationTable<
      .                   ut::InPlace<
      .                       ty::FloatVid,
-- line 258 ----------------------------------------
-- line 268 ----------------------------------------
      .                   &mut self,
      .               ) -> ut::UnificationTable<
      .                   ut::InPlace<
      .                       ty::ConstVid<'tcx>,
      .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
      .                       &mut InferCtxtUndoLogs<'tcx>,
      .                   >,
      .               > {
    164 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
 13,990 ( 0.00%)          self.region_constraint_storage
      .                       .as_mut()
      .                       .expect("region constraints already solved")
 17,113 ( 0.00%)              .with_log(&mut self.undo_log)
      .               }
      .           }
      .           
      .           pub struct InferCtxt<'a, 'tcx> {
      .               pub tcx: TyCtxt<'tcx>,
      .           
      .               /// The `DefId` of the item in whose context we are performing inference or typeck.
      .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
      .               /// item we are type-checking, and just consider those names as
      .               /// part of the root universe. So this would only get incremented
      .               /// when we enter into a higher-ranked (`for<..>`) type or trait
      .               /// bound.
      .               universe: Cell<ty::UniverseIndex>,
      .           }
      .           
      .           /// See the `error_reporting` module for more details.
 24,464 ( 0.01%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
      .           pub enum ValuePairs<'tcx> {
      .               Types(ExpectedFound<Ty<'tcx>>),
      .               Regions(ExpectedFound<ty::Region<'tcx>>),
      .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
      .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
      .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
      .           }
      .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
      .           pub struct TypeTrace<'tcx> {
      .               cause: ObligationCause<'tcx>,
      .               values: ValuePairs<'tcx>,
      .           }
      .           
      .           /// The origin of a `r1 <= r2` constraint.
      .           ///
      .           /// See `error_reporting` module for more details
 17,792 ( 0.00%)  #[derive(Clone, Debug)]
      .           pub enum SubregionOrigin<'tcx> {
      .               /// Arose from a subtyping relation
    849 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
      .           
      .               /// When casting `&'a T` to an `&'b Trait` object,
      .               /// relating `'a` to `'b`
      .               RelateObjectBound(Span),
      .           
      .               /// Some type parameter was instantiated with the given type,
      .               /// and that type must outlive some region.
    348 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
      .           
      .               /// The given region parameter was instantiated with a region
      .               /// that must outlive some other region.
      .               RelateRegionParamBound(Span),
      .           
      .               /// Creating a pointer `b` to contents of another reference
      .               Reborrow(Span),
      .           
      .               /// Creating a pointer `b` to contents of an upvar
      .               ReborrowUpvar(Span, ty::UpvarId),
      .           
      .               /// Data with type `Ty<'tcx>` was borrowed
    204 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
      .           
      .               /// (&'a &'b T) where a >= b
    239 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
      .           
      .               /// Comparing the signature and requirements of an impl method against
      .               /// the containing trait.
      4 ( 0.00%)      CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
      .           
      .               /// Comparing the signature and requirements of an impl associated type
      .               /// against the containing trait
      .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
      .           }
      .           
      .           // `SubregionOrigin` is used a lot. Make sure it doesn't unintentionally get bigger.
      .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
-- line 430 ----------------------------------------
-- line 554 ----------------------------------------
      .               defining_use_anchor: Option<LocalDefId>,
      .           }
      .           
      .           pub trait TyCtxtInferExt<'tcx> {
      .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
      .           }
      .           
      .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
  3,126 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
  9,378 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
  3,126 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> InferCtxtBuilder<'tcx> {
      .               /// Used only by `rustc_typeck` during body type-checking/inference,
      .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
      .               /// Will also change the scope for opaque type defining use checks to the given owner.
  2,538 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
  3,102 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
  1,410 ( 0.00%)          self.with_opaque_type_inference(table_owner)
  1,974 ( 0.00%)      }
      .           
      .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
      .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
      .               ///
      .               /// It is only meant to be called in two places, for typeck
      .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
      .               /// in mir borrowck.
    226 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
    113 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
    790 ( 0.00%)          self
    339 ( 0.00%)      }
      .           
      .               /// Given a canonical value `C` as a starting point, create an
      .               /// inference context that contains each of the bound values
      .               /// within instantiated as a fresh variable. The `f` closure is
      .               /// invoked with the new infcx, along with the instantiated value
      .               /// `V` and a substitution `S`. This substitution `S` maps from
      .               /// the bound values in `C` to their instantiated values in `V`
      .               /// (in other words, `S(C) = V`).
  6,338 ( 0.00%)      pub fn enter_with_canonical<T, R>(
      .                   &mut self,
      .                   span: Span,
      .                   canonical: &Canonical<'tcx, T>,
      .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
      .               ) -> R
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
      .                   self.enter(|infcx| {
  9,662 ( 0.00%)              let (value, subst) =
  1,053 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
 14,076 ( 0.00%)              f(infcx, value, subst)
      .                   })
  6,832 ( 0.00%)      }
      .           
 14,199 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
  8,693 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
      .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
132,329 ( 0.03%)          f(InferCtxt {
      .                       tcx,
      .                       defining_use_anchor,
      .                       in_progress_typeck_results,
  3,126 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
      .                       lexical_region_resolutions: RefCell::new(None),
      .                       selection_cache: Default::default(),
      .                       evaluation_cache: Default::default(),
      .                       reported_trait_errors: Default::default(),
      .                       reported_closure_mismatch: Default::default(),
      .                       tainted_by_errors_flag: Cell::new(false),
  3,126 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
      .                       in_snapshot: Cell::new(false),
      .                       skip_leak_check: Cell::new(false),
      .                       universe: Cell::new(ty::UniverseIndex::ROOT),
      .                   })
 15,105 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx, T> InferOk<'tcx, T> {
      .               pub fn unit(self) -> InferOk<'tcx, ()> {
      .                   InferOk { value: (), obligations: self.obligations }
      .               }
      .           
      .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
      .               pub fn into_value_registering_obligations(
      .                   self,
      .                   infcx: &InferCtxt<'_, 'tcx>,
      .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
      .               ) -> T {
    169 ( 0.00%)          let InferOk { value, obligations } = self;
    680 ( 0.00%)          for obligation in obligations {
      .                       fulfill_cx.register_predicate_obligation(infcx, obligation);
      .                   }
      .                   value
      .               }
      .           }
      .           
      .           impl<'tcx> InferOk<'tcx, ()> {
  2,807 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
 11,228 ( 0.00%)          self.obligations
  2,807 ( 0.00%)      }
      .           }
      .           
      .           #[must_use = "once you start a snapshot, you should always consume it"]
      .           pub struct CombinedSnapshot<'a, 'tcx> {
      .               undo_snapshot: Snapshot<'tcx>,
      .               region_constraints_snapshot: RegionSnapshot,
      .               universe: ty::UniverseIndex,
      .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
      .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
      .                   debug!("canonical consts: {:?}", &canonical.value);
      .           
      .                   self.tcx.try_unify_abstract_consts(canonical.value)
      .               }
      .           
      .               pub fn is_in_snapshot(&self) -> bool {
      .                   self.in_snapshot.get()
  3,416 ( 0.00%)      }
      .           
 25,224 ( 0.01%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
 28,377 ( 0.01%)          t.fold_with(&mut self.freshener())
 28,377 ( 0.01%)      }
      .           
      .               /// Returns the origin of the type variable identified by `vid`, or `None`
      .               /// if this is not a type variable.
      .               ///
      .               /// No attempt is made to resolve `ty`.
     40 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
     80 ( 0.00%)          match *ty.kind() {
     20 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
     80 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
      .                       }
      .                       _ => None,
      .                   }
     80 ( 0.00%)      }
      .           
  3,153 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
      .                   freshen::TypeFreshener::new(self, false)
  3,153 ( 0.00%)      }
      .           
      .               /// Like `freshener`, but does not replace `'static` regions.
 13,826 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
      .                   freshen::TypeFreshener::new(self, true)
 13,826 ( 0.00%)      }
      .           
    464 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
    232 ( 0.00%)          let mut inner = self.inner.borrow_mut();
    232 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
      .                       .type_variables()
      .                       .unsolved_variables()
      .                       .into_iter()
     40 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
      .                       .collect();
      .                   vars.extend(
      .                       (0..inner.int_unification_table().len())
      .                           .map(|i| ty::IntVid { index: i as u32 })
     12 ( 0.00%)                  .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
      .                           .map(|v| self.tcx.mk_int_var(v)),
      .                   );
      .                   vars.extend(
      .                       (0..inner.float_unification_table().len())
      .                           .map(|i| ty::FloatVid { index: i as u32 })
      .                           .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
      .                           .map(|v| self.tcx.mk_float_var(v)),
      .                   );
      .                   vars
    812 ( 0.00%)      }
      .           
  6,468 ( 0.00%)      fn combine_fields(
      .                   &'a self,
      .                   trace: TypeTrace<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .               ) -> CombineFields<'a, 'tcx> {
 25,988 ( 0.01%)          CombineFields {
      .                       infcx: self,
 64,970 ( 0.02%)              trace,
      .                       cause: None,
      .                       param_env,
      .                       obligations: PredicateObligations::new(),
      .                   }
  6,468 ( 0.00%)      }
      .           
      .               /// Clear the "currently in a snapshot" flag, invoke the closure,
      .               /// then restore the flag to its original value. This flag is a
      .               /// debugging measure designed to detect cases where we start a
      .               /// snapshot, create type variables, and register obligations
      .               /// which may involve those type variables in the fulfillment cx,
      .               /// potentially leaving "dangling type variables" behind.
      .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 760 ----------------------------------------
      .               /// before we return, this is not a problem, as there won't be any
      .               /// escaping obligations in the main cx. In those cases, you can
      .               /// use this function.
      .               pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
      .               where
      .                   F: FnOnce(&Self) -> R,
      .               {
      .                   let flag = self.in_snapshot.replace(false);
    960 ( 0.00%)          let result = func(self);
      .                   self.in_snapshot.set(flag);
      .                   result
      .               }
      .           
 33,940 ( 0.01%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
      .                   debug!("start_snapshot()");
      .           
      .                   let in_snapshot = self.in_snapshot.replace(true);
      .           
      .                   let mut inner = self.inner.borrow_mut();
      .           
101,820 ( 0.03%)          CombinedSnapshot {
      .                       undo_snapshot: inner.undo_log.start_snapshot(),
      .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
      .                       universe: self.universe(),
      .                       was_in_snapshot: in_snapshot,
      .                       // Borrow typeck results "in progress" (i.e., during typeck)
      .                       // to ban writes from within a snapshot to them.
 16,970 ( 0.00%)              _in_progress_typeck_results: self
      .                           .in_progress_typeck_results
      .                           .map(|typeck_results| typeck_results.borrow()),
      .                   }
 67,880 ( 0.02%)      }
      .           
 63,316 ( 0.02%)      #[instrument(skip(self, snapshot), level = "debug")]
      .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
      .                   let CombinedSnapshot {
  5,756 ( 0.00%)              undo_snapshot,
  5,756 ( 0.00%)              region_constraints_snapshot,
  5,756 ( 0.00%)              universe,
  5,756 ( 0.00%)              was_in_snapshot,
 11,512 ( 0.00%)              _in_progress_typeck_results,
      .                   } = snapshot;
      .           
      .                   self.in_snapshot.set(was_in_snapshot);
      .                   self.universe.set(universe);
      .           
      .                   let mut inner = self.inner.borrow_mut();
  5,756 ( 0.00%)          inner.rollback_to(undo_snapshot);
      .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
      .               }
      .           
168,210 ( 0.04%)      #[instrument(skip(self, snapshot), level = "debug")]
      .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
      .                   let CombinedSnapshot {
 11,214 ( 0.00%)              undo_snapshot,
      .                       region_constraints_snapshot: _,
      .                       universe: _,
 11,214 ( 0.00%)              was_in_snapshot,
 22,428 ( 0.01%)              _in_progress_typeck_results,
      .                   } = snapshot;
      .           
      .                   self.in_snapshot.set(was_in_snapshot);
      .           
      .                   self.inner.borrow_mut().commit(undo_snapshot);
      .               }
      .           
      .               /// Executes `f` and commit the bindings.
  6,140 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
  7,612 ( 0.00%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
      .               {
    692 ( 0.00%)          let snapshot = self.start_snapshot();
  2,668 ( 0.00%)          let r = f(&snapshot);
  4,844 ( 0.00%)          self.commit_from(snapshot);
  3,912 ( 0.00%)          r
      .               }
      .           
      .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
 80,481 ( 0.02%)      #[instrument(skip(self, f), level = "debug")]
 98,816 ( 0.03%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
      .               {
 12,700 ( 0.00%)          let snapshot = self.start_snapshot();
 45,455 ( 0.01%)          let r = f(&snapshot);
      .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
 10,193 ( 0.00%)          match r {
      .                       Ok(_) => {
 78,345 ( 0.02%)                  self.commit_from(snapshot);
      .                       }
      .                       Err(_) => {
 16,821 ( 0.00%)                  self.rollback_to("commit_if_ok -- error", snapshot);
      .                       }
      .                   }
 70,450 ( 0.02%)          r
      .               }
      .           
      .               /// Execute `f` then unroll any bindings it creates.
 28,737 ( 0.01%)      #[instrument(skip(self, f), level = "debug")]
 32,604 ( 0.01%)      pub fn probe<R, F>(&self, f: F) -> R
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
      .               {
  7,862 ( 0.00%)          let snapshot = self.start_snapshot();
 11,353 ( 0.00%)          let r = f(&snapshot);
 36,846 ( 0.01%)          self.rollback_to("probe", snapshot);
  4,019 ( 0.00%)          r
      .               }
      .           
      .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
    234 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
    312 ( 0.00%)      pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
      .               {
     52 ( 0.00%)          let snapshot = self.start_snapshot();
     26 ( 0.00%)          let was_skip_leak_check = self.skip_leak_check.get();
     52 ( 0.00%)          if should_skip {
      .                       self.skip_leak_check.set(true);
      .                   }
    104 ( 0.00%)          let r = f(&snapshot);
    234 ( 0.00%)          self.rollback_to("probe", snapshot);
      .                   self.skip_leak_check.set(was_skip_leak_check);
    312 ( 0.00%)          r
      .               }
      .           
      .               /// Scan the constraints produced since `snapshot` began and returns:
      .               ///
      .               /// - `None` -- if none of them involve "region outlives" constraints
      .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
      .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
  3,732 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
      .                   &self,
      .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
      .               ) -> Option<bool> {
  7,464 ( 0.00%)          self.inner
      .                       .borrow_mut()
      .                       .unwrap_region_constraints()
      .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
  5,598 ( 0.00%)      }
      .           
      .               pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
      .                   self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
      .               }
      .           
     12 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
      .               where
      .                   T: at::ToTrace<'tcx>,
      .               {
      .                   let origin = &ObligationCause::dummy();
      .                   self.probe(|_| {
      .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
      .                           // Ignore obligations, since we are unrolling
      .                           // everything anyway.
      .                       })
      .                   })
      9 ( 0.00%)      }
      .           
  1,860 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
      .               where
      .                   T: at::ToTrace<'tcx>,
      .               {
      .                   let origin = &ObligationCause::dummy();
      .                   self.probe(|_| {
      .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
      .                           // Ignore obligations, since we are unrolling
      .                           // everything anyway.
      .                       })
      .                   })
  1,395 ( 0.00%)      }
      .           
  8,700 ( 0.00%)      #[instrument(skip(self), level = "debug")]
      .               pub fn sub_regions(
      .                   &self,
      .                   origin: SubregionOrigin<'tcx>,
      .                   a: ty::Region<'tcx>,
      .                   b: ty::Region<'tcx>,
      .               ) {
  7,830 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
      .               }
      .           
      .               /// Require that the region `r` be equal to one of the regions in
      .               /// the set `regions`.
      .               #[instrument(skip(self), level = "debug")]
      .               pub fn member_constraint(
      .                   &self,
      .                   opaque_type_def_id: DefId,
-- line 947 ----------------------------------------
-- line 983 ----------------------------------------
      .                   let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
      .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
      .                       a: p.a,
      .                       b: p.b,
      .                   });
      .                   self.subtype_predicate(cause, param_env, subtype_predicate)
      .               }
      .           
    252 ( 0.00%)      pub fn subtype_predicate(
      .                   &self,
      .                   cause: &ObligationCause<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   predicate: ty::PolySubtypePredicate<'tcx>,
      .               ) -> Option<InferResult<'tcx, ()>> {
      .                   // Check for two unresolved inference variables, in which case we can
      .                   // make no progress. This is partly a micro-optimization, but it's
      .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
      .                   // earlier that they are sub-unified).
      .                   //
      .                   // Note that we can just skip the binders here because
      .                   // type variables can't (at present, at
      .                   // least) capture any of the things bound by this binder.
      .                   //
      .                   // Note that this sub here is not just for diagnostics - it has semantic
      .                   // effects as well.
     21 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
     21 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
    156 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
     36 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
      .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
     36 ( 0.00%)                  return None;
      .                       }
      .                       _ => {}
      .                   }
      .           
      .                   Some(self.commit_if_ok(|_snapshot| {
      3 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
      .                           self.replace_bound_vars_with_placeholders(predicate);
      .           
      6 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
      .           
      .                       Ok(ok.unit())
      .                   }))
    189 ( 0.00%)      }
      .           
  3,912 ( 0.00%)      pub fn region_outlives_predicate(
      .                   &self,
      .                   cause: &traits::ObligationCause<'tcx>,
      .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
      .               ) -> UnitResult<'tcx> {
      .                   self.commit_if_ok(|_snapshot| {
      .                       let ty::OutlivesPredicate(r_a, r_b) =
      .                           self.replace_bound_vars_with_placeholders(predicate);
      .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
      .                           RelateRegionParamBound(cause.span)
      .                       });
  3,260 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
      .                       Ok(())
      .                   })
  2,608 ( 0.00%)      }
      .           
      .               /// Number of type variables created so far.
     13 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
      .                   self.inner.borrow_mut().type_variables().num_vars()
     26 ( 0.00%)      }
      .           
  1,548 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
  7,740 ( 0.00%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
  2,322 ( 0.00%)      }
      .           
  1,538 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
  5,413 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
  2,307 ( 0.00%)      }
      .           
    310 ( 0.00%)      pub fn next_ty_var_in_universe(
      .                   &self,
      .                   origin: TypeVariableOrigin,
      .                   universe: ty::UniverseIndex,
      .               ) -> Ty<'tcx> {
  1,705 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
    155 ( 0.00%)          self.tcx.mk_ty_var(vid)
    465 ( 0.00%)      }
      .           
      .               pub fn next_const_var(
      .                   &self,
      .                   ty: Ty<'tcx>,
      .                   origin: ConstVariableOrigin,
      .               ) -> &'tcx ty::Const<'tcx> {
      .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
      .               }
-- line 1074 ----------------------------------------
-- line 1090 ----------------------------------------
      .               pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {
      .                   self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
      .                       origin,
      .                       val: ConstVariableValue::Unknown { universe: self.universe() },
      .                   })
      .               }
      .           
      .               fn next_int_var_id(&self) -> IntVid {
     15 ( 0.00%)          self.inner.borrow_mut().int_unification_table().new_key(None)
      .               }
      .           
      9 ( 0.00%)      pub fn next_int_var(&self) -> Ty<'tcx> {
      .                   self.tcx.mk_int_var(self.next_int_var_id())
     12 ( 0.00%)      }
      .           
      .               fn next_float_var_id(&self) -> FloatVid {
      .                   self.inner.borrow_mut().float_unification_table().new_key(None)
      .               }
      .           
      .               pub fn next_float_var(&self) -> Ty<'tcx> {
      .                   self.tcx.mk_float_var(self.next_float_var_id())
      .               }
      .           
      .               /// Creates a fresh region variable with the next available index.
      .               /// The variable will be created in the maximum universe created
      .               /// thus far, allowing it to name any region created thus far.
    840 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
 22,737 ( 0.01%)          self.next_region_var_in_universe(origin, self.universe())
  1,680 ( 0.00%)      }
      .           
      .               /// Creates a fresh region variable with the next available index
      .               /// in the given universe; typically, you can use
      .               /// `next_region_var` and just use the maximal universe.
 10,448 ( 0.00%)      pub fn next_region_var_in_universe(
      .                   &self,
      .                   origin: RegionVariableOrigin,
      .                   universe: ty::UniverseIndex,
      .               ) -> ty::Region<'tcx> {
      .                   let region_var =
 67,912 ( 0.02%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
 26,120 ( 0.01%)          self.tcx.mk_region(ty::ReVar(region_var))
 15,672 ( 0.00%)      }
      .           
      .               /// Return the universe that the region `r` was created in.  For
      .               /// most regions (e.g., `'static`, named regions from the user,
      .               /// etc) this is the root universe U0. For inference variables or
      .               /// placeholders, however, it will return the universe which which
      .               /// they are associated.
  1,306 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
      .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
  1,959 ( 0.00%)      }
      .           
      .               /// Number of region variables created so far.
    924 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
      .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
  1,386 ( 0.00%)      }
      .           
      .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
  2,141 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
      .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
  4,282 ( 0.00%)      }
      .           
      .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
     62 ( 0.00%)      pub fn next_nll_region_var_in_universe(
      .                   &self,
      .                   origin: NllRegionVariableOrigin,
      .                   universe: ty::UniverseIndex,
      .               ) -> ty::Region<'tcx> {
    466 ( 0.00%)          self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
    124 ( 0.00%)      }
      .           
 16,176 ( 0.00%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
  8,808 ( 0.00%)          match param.kind {
      .                       GenericParamDefKind::Lifetime => {
      .                           // Create a region inference variable for the given
      .                           // region parameter definition.
    651 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
      .                       }
      .                       GenericParamDefKind::Type { .. } => {
      .                           // Create a type inference variable for the given
      .                           // type parameter definition. The substitutions are
      .                           // for actual parameters that may be referred to by
      .                           // the default of this type parameter, if it exists.
      .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
      .                           // used in a path such as `Foo::<T, U>::new()` will
      .                           // use an inference variable for `C` with `[T, U]`
      .                           // as the substitutions for the default, `(T, U)`.
  5,480 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
      .                               self.universe(),
  6,850 ( 0.00%)                      TypeVariableOrigin {
      .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
  1,370 ( 0.00%)                              param.name,
  1,370 ( 0.00%)                              Some(param.def_id),
      .                                   ),
      .                                   span,
      .                               },
      .                           );
      .           
  1,370 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
      .                       }
      .                       GenericParamDefKind::Const { .. } => {
      .                           let origin = ConstVariableOrigin {
      .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
      .                                   param.name,
      .                                   param.def_id,
      .                               ),
      .                               span,
      .                           };
      .                           let const_var_id =
     11 ( 0.00%)                      self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
      .                                   origin,
      .                                   val: ConstVariableValue::Unknown { universe: self.universe() },
      .                               });
      1 ( 0.00%)                  self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
      .                       }
      .                   }
      8 ( 0.00%)      }
      .           
      .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
      .               /// type/region parameter to a fresh inference variable.
  3,198 ( 0.00%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
 15,441 ( 0.00%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
  2,132 ( 0.00%)      }
      .           
      .               /// Returns `true` if errors have been reported since this infcx was
      .               /// created. This is sometimes used as a heuristic to skip
      .               /// reporting errors that often occur as a result of earlier
      .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
      .               /// inference variables, regionck errors).
    246 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
      .                   debug!(
      .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
      .                        tainted_by_errors_flag={})",
      .                       self.tcx.sess.err_count(),
      .                       self.err_count_on_creation,
      .                       self.tainted_by_errors_flag.get()
      .                   );
      .           
  7,959 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
      .                       return true; // errors reported since this infcx was made
      .                   }
      .                   self.tainted_by_errors_flag.get()
    369 ( 0.00%)      }
      .           
      .               /// Set the "tainted by errors" flag to true. We call this when we
      .               /// observe an error from a prior pass.
      .               pub fn set_tainted_by_errors(&self) {
      .                   debug!("set_tainted_by_errors()");
      .                   self.tainted_by_errors_flag.set(true)
      .               }
      .           
      .               /// Process the region constraints and return any any errors that
      .               /// result. After this, no more unification operations should be
      .               /// done -- or the compiler will panic -- but it is legal to use
      .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
  8,281 ( 0.00%)      pub fn resolve_regions(
      .                   &self,
      .                   region_context: DefId,
      .                   outlives_env: &OutlivesEnvironment<'tcx>,
      .                   mode: RegionckMode,
      .               ) -> Vec<RegionResolutionError<'tcx>> {
 22,477 ( 0.01%)          let (var_infos, data) = {
      .                       let mut inner = self.inner.borrow_mut();
      .                       let inner = &mut *inner;
  1,183 ( 0.00%)              assert!(
  3,549 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
      .                           "region_obligations not empty: {:#?}",
      .                           inner.region_obligations
      .                       );
      .                       inner
      .                           .region_constraint_storage
      .                           .take()
      .                           .expect("regions already resolved")
      .                           .with_log(&mut inner.undo_log)
      .                           .into_infos_and_data()
  1,183 ( 0.00%)          };
      .           
      .                   let region_rels =
  1,183 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
      .           
 10,647 ( 0.00%)          let (lexical_region_resolutions, errors) =
 28,392 ( 0.01%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
      .           
  4,732 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
  1,183 ( 0.00%)          assert!(old_value.is_none());
      .           
      .                   errors
 10,647 ( 0.00%)      }
      .           
      .               /// Process the region constraints and report any errors that
      .               /// result. After this, no more unification operations should be
      .               /// done -- or the compiler will panic -- but it is legal to use
      .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
 11,830 ( 0.00%)      pub fn resolve_regions_and_report_errors(
      .                   &self,
      .                   region_context: DefId,
      .                   outlives_env: &OutlivesEnvironment<'tcx>,
      .                   mode: RegionckMode,
      .               ) {
  2,366 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
      .           
  3,549 ( 0.00%)          if !self.is_tainted_by_errors() {
      .                       // As a heuristic, just skip reporting region errors
      .                       // altogether if other errors have been reported while
      .                       // this infcx was in use.  This is totally hokey but
      .                       // otherwise we have a hard time separating legit region
      .                       // errors from silly ones.
  2,366 ( 0.00%)              self.report_region_errors(&errors);
      .                   }
  5,915 ( 0.00%)      }
      .           
      .               /// Obtains (and clears) the current set of region
      .               /// constraints. The inference context is still usable: further
      .               /// unifications will simply add new constraints.
      .               ///
      .               /// This method is not meant to be used with normal lexical region
      .               /// resolution. Rather, it is used in the NLL mode as a kind of
      .               /// interim hack: basically we run normal type-check and generate
-- line 1307 ----------------------------------------
-- line 1319 ----------------------------------------
      .               }
      .           
      .               /// Gives temporary access to the region constraint data.
      .               pub fn with_region_constraints<R>(
      .                   &self,
      .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
      .               ) -> R {
      .                   let mut inner = self.inner.borrow_mut();
  3,340 ( 0.00%)          op(inner.unwrap_region_constraints().data())
      .               }
      .           
      .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
      .                   let mut inner = self.inner.borrow_mut();
      .                   let inner = &mut *inner;
      .                   inner
      .                       .region_constraint_storage
      .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
      .                       .var_origin(vid)
      .               }
      .           
      .               /// Takes ownership of the list of variable regions. This implies
      .               /// that all the region constraints have already been taken, and
      .               /// hence that `resolve_regions_and_report_errors` can never be
      .               /// called. This is used only during NLL processing to "hand off" ownership
      .               /// of the set of region variables into the NLL region context.
    565 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
      .                   let mut inner = self.inner.borrow_mut();
  2,147 ( 0.00%)          let (var_infos, data) = inner
      .                       .region_constraint_storage
      .                       .take()
      .                       .expect("regions already resolved")
      .                       .with_log(&mut inner.undo_log)
    113 ( 0.00%)              .into_infos_and_data();
    113 ( 0.00%)          assert!(data.is_empty());
      .                   var_infos
    904 ( 0.00%)      }
      .           
      .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
      .                   self.resolve_vars_if_possible(t).to_string()
      .               }
      .           
      .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
      .               /// universe index of `TyVar(vid)`.
    916 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
      .                   use self::type_variable::TypeVariableValue;
      .           
  2,748 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
      .                       TypeVariableValue::Known { value } => Ok(value),
      .                       TypeVariableValue::Unknown { universe } => Err(universe),
      .                   }
  3,206 ( 0.00%)      }
      .           
      .               /// Resolve any type variables found in `value` -- but only one
      .               /// level.  So, if the variable `?X` is bound to some type
      .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
      .               /// itself be bound to a type).
      .               ///
      .               /// Useful when you only need to inspect the outermost level of
      .               /// the type and don't care about nested types (or perhaps you
      .               /// will be resolving them as well, e.g. in a loop).
      .               pub fn shallow_resolve<T>(&self, value: T) -> T
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
 17,347 ( 0.00%)          value.fold_with(&mut ShallowResolver { infcx: self })
      .               }
      .           
  1,052 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
      .                   self.inner.borrow_mut().type_variables().root_var(var)
  1,578 ( 0.00%)      }
      .           
      .               /// Where possible, replaces type/const variables in
      .               /// `value` with their final value. Note that region variables
      .               /// are unaffected. If a type/const variable has not been unified, it
      .               /// is left as is. This is an idempotent operation that does
      .               /// not affect inference state in any way and so you can do it
      .               /// at will.
    660 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
 19,934 ( 0.01%)          if !value.needs_infer() {
 28,632 ( 0.01%)              return value; // Avoid duplicated subst-folding.
      .                   }
 15,305 ( 0.00%)          let mut r = resolve::OpportunisticVarResolver::new(self);
 20,590 ( 0.01%)          value.fold_with(&mut r)
    622 ( 0.00%)      }
      .           
      .               /// Returns the first unresolved variable contained in `T`. In the
      .               /// process of visiting `T`, this will resolve (where possible)
      .               /// type variables in `T`, but it never constructs the final,
      .               /// resolved type, so it's more efficient than
      .               /// `resolve_vars_if_possible()`.
      .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
      .               where
-- line 1415 ----------------------------------------
-- line 1490 ----------------------------------------
      .                   expected: &'tcx ty::Const<'tcx>,
      .                   actual: &'tcx ty::Const<'tcx>,
      .                   err: TypeError<'tcx>,
      .               ) -> DiagnosticBuilder<'tcx> {
      .                   let trace = TypeTrace::consts(cause, true, expected, actual);
      .                   self.report_and_explain_type_error(trace, &err)
      .               }
      .           
    882 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
      .                   &self,
      .                   span: Span,
      .                   lbrct: LateBoundRegionConversionTime,
      .                   value: ty::Binder<'tcx, T>,
      .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
      .                   let fld_r =
  9,416 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
      .                   let fld_t = |_| {
      .                       self.next_ty_var(TypeVariableOrigin {
      .                           kind: TypeVariableOriginKind::MiscVariable,
      .                           span,
      .                       })
      .                   };
      .                   let fld_c = |_, ty| {
      .                       self.next_const_var(
      .                           ty,
      .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
      .                       )
      .                   };
 41,323 ( 0.01%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
    588 ( 0.00%)      }
      .           
      .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
  1,800 ( 0.00%)      pub fn verify_generic_bound(
      .                   &self,
      .                   origin: SubregionOrigin<'tcx>,
      .                   kind: GenericKind<'tcx>,
      .                   a: ty::Region<'tcx>,
      .                   bound: VerifyBound<'tcx>,
      .               ) {
      .                   debug!("verify_generic_bound({:?}, {:?} <: {:?})", kind, a, bound);
      .           
    675 ( 0.00%)          self.inner
      .                       .borrow_mut()
      .                       .unwrap_region_constraints()
  3,825 ( 0.00%)              .verify_generic_bound(origin, kind, a, bound);
  1,575 ( 0.00%)      }
      .           
      .               /// Obtains the latest type of the given closure; this may be a
      .               /// closure in the current function, in which case its
      .               /// `ClosureKind` may not yet be known.
    140 ( 0.00%)      pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
    280 ( 0.00%)          let closure_kind_ty = closure_substs.as_closure().kind_ty();
      .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
    210 ( 0.00%)          closure_kind_ty.to_opt_closure_kind()
      .               }
      .           
      .               /// Clears the selection, evaluation, and projection caches. This is useful when
      .               /// repeatedly attempting to select an `Obligation` while changing only
      .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
      .               pub fn clear_caches(&self) {
      .                   self.selection_cache.clear();
      .                   self.evaluation_cache.clear();
      .                   self.inner.borrow_mut().projection_cache().clear();
      .               }
      .           
      .               pub fn universe(&self) -> ty::UniverseIndex {
 39,544 ( 0.01%)          self.universe.get()
 10,771 ( 0.00%)      }
      .           
      .               /// Creates and return a fresh universe that extends all previous
      .               /// universes. Updates `self.universe` to that new universe.
     78 ( 0.00%)      pub fn create_next_universe(&self) -> ty::UniverseIndex {
    114 ( 0.00%)          let u = self.universe.get().next_universe();
      .                   self.universe.set(u);
      .                   u
     78 ( 0.00%)      }
      .           
      .               /// Resolves and evaluates a constant.
      .               ///
      .               /// The constant can be located on a trait like `<A as B>::C`, in which case the given
      .               /// substitutions and environment are used to resolve the constant. Alternatively if the
      .               /// constant has generic parameters in scope the substitutions are used to evaluate the value of
      .               /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count
      .               /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still
-- line 1576 ----------------------------------------
-- line 1606 ----------------------------------------
      .                   // variables, thus we don't need to substitute back the original values.
      .                   self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
      .               }
      .           
      .               /// If `typ` is a type variable of some kind, resolve it one level
      .               /// (but do not resolve types found in the result). If `typ` is
      .               /// not a type variable, just return it unmodified.
      .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
165,912 ( 0.04%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
 82,702 ( 0.02%)          match *typ.kind() {
      .                       ty::Infer(ty::TyVar(v)) => {
      .                           // Not entirely obvious: if `typ` is a type variable,
      .                           // it can be resolved to an int/float variable, which
      .                           // can then be recursively resolved, hence the
      .                           // recursion. Note though that we prevent type
      .                           // variables from unifying to other type variables
      .                           // directly (though they may be embedded
      .                           // structurally), and we prevent cycles in any case,
      .                           // so this recursion should always be of very limited
      .                           // depth.
      .                           //
      .                           // Note: if these two lines are combined into one we get
      .                           // dynamic borrow errors on `self.inner`.
 40,124 ( 0.01%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
      .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
      .                       }
      .           
     92 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self
      .                           .inner
      .                           .borrow_mut()
      .                           .int_unification_table()
      .                           .probe_value(v)
     39 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
      .                           .unwrap_or(typ),
      .           
      .                       ty::Infer(ty::FloatVar(v)) => self
      .                           .inner
      .                           .borrow_mut()
      .                           .float_unification_table()
      .                           .probe_value(v)
      .                           .map(|v| v.to_type(self.tcx))
      .                           .unwrap_or(typ),
      .           
      .                       _ => typ,
      .                   }
186,651 ( 0.05%)      }
      .           
      .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
      .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
      .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
      .               ///
      .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
      .               /// inlined, despite being large, because it has only two call sites that
      .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
      .               #[inline(always)]
      .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
      .                   match infer_var {
      .                       TyOrConstInferVar::Ty(v) => {
      .                           use self::type_variable::TypeVariableValue;
      .           
      .                           // If `inlined_probe` returns a `Known` value, it never equals
      .                           // `ty::Infer(ty::TyVar(v))`.
 11,778 ( 0.00%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
      .                               TypeVariableValue::Unknown { .. } => false,
      .                               TypeVariableValue::Known { .. } => true,
      .                           }
      .                       }
      .           
      .                       TyOrConstInferVar::TyInt(v) => {
      .                           // If `inlined_probe_value` returns a value it's always a
      .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
-- line 1678 ----------------------------------------
-- line 1716 ----------------------------------------
      .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
      .               Const(ConstVid<'tcx>),
      .           }
      .           
      .           impl<'tcx> TyOrConstInferVar<'tcx> {
      .               /// Tries to extract an inference variable from a type or a constant, returns `None`
      .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
      .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
    355 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
      .                   match arg.unpack() {
      .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
      .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
      .                       GenericArgKind::Lifetime(_) => None,
      .                   }
    355 ( 0.00%)      }
      .           
      .               /// Tries to extract an inference variable from a type, returns `None`
      .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
     26 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
  3,429 ( 0.00%)          match *ty.kind() {
    762 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
      .                       ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
      .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
      .                       _ => None,
      .                   }
     26 ( 0.00%)      }
      .           
      .               /// Tries to extract an inference variable from a constant, returns `None`
      .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
      .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
      .                   match ct.val {
      .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
      .                       _ => None,
      .                   }
-- line 1749 ----------------------------------------
-- line 1755 ----------------------------------------
      .           }
      .           
      .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
      .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
      .                   self.infcx.tcx
      .               }
      .           
      .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
 32,261 ( 0.01%)          self.infcx.shallow_resolve_ty(ty)
      .               }
      .           
    184 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
     94 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
      5 ( 0.00%)              self.infcx
      .                           .inner
      .                           .borrow_mut()
      .                           .const_unification_table()
      3 ( 0.00%)                  .probe_value(*vid)
      .                           .val
      .                           .known()
      .                           .unwrap_or(ct)
      .                   } else {
      .                       ct
      .                   }
    230 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> TypeTrace<'tcx> {
      .               pub fn span(&self) -> Span {
      8 ( 0.00%)          self.cause.span
      .               }
      .           
      .               pub fn types(
      .                   cause: &ObligationCause<'tcx>,
      .                   a_is_expected: bool,
      .                   a: Ty<'tcx>,
      .                   b: Ty<'tcx>,
      .               ) -> TypeTrace<'tcx> {
-- line 1792 ----------------------------------------
-- line 1800 ----------------------------------------
      .                   b: &'tcx ty::Const<'tcx>,
      .               ) -> TypeTrace<'tcx> {
      .                   TypeTrace { cause: cause.clone(), values: Consts(ExpectedFound::new(a_is_expected, a, b)) }
      .               }
      .           }
      .           
      .           impl<'tcx> SubregionOrigin<'tcx> {
      .               pub fn span(&self) -> Span {
     20 ( 0.00%)          match *self {
      4 ( 0.00%)              Subtype(ref a) => a.span(),
      .                       RelateObjectBound(a) => a,
      .                       RelateParamBound(a, ..) => a,
      .                       RelateRegionParamBound(a) => a,
      .                       Reborrow(a) => a,
      .                       ReborrowUpvar(a, _) => a,
      .                       DataBorrowed(_, a) => a,
      .                       ReferenceOutlivesReferent(_, a) => a,
      .                       CompareImplMethodObligation { span, .. } => span,
-- line 1817 ----------------------------------------
-- line 1818 ----------------------------------------
      .                       CompareImplTypeObligation { span, .. } => span,
      .                   }
      .               }
      .           
      .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
      .               where
      .                   F: FnOnce() -> Self,
      .               {
  4,983 ( 0.00%)          match *cause.code() {
    469 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
  2,345 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
      .                       }
      .           
      .                       traits::ObligationCauseCode::CompareImplMethodObligation {
      8 ( 0.00%)                  impl_item_def_id,
      8 ( 0.00%)                  trait_item_def_id,
      .                       } => SubregionOrigin::CompareImplMethodObligation {
     12 ( 0.00%)                  span: cause.span,
      .                           impl_item_def_id,
      .                           trait_item_def_id,
      .                       },
      .           
      .                       traits::ObligationCauseCode::CompareImplTypeObligation {
      .                           impl_item_def_id,
      .                           trait_item_def_id,
      .                       } => SubregionOrigin::CompareImplTypeObligation {
-- line 1843 ----------------------------------------

130,529 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir                 

-- line 21 ----------------------------------------
        .           use rustc_target::spec::abi;
        .           use std::borrow::Cow;
        .           use std::cmp::Ordering;
        .           use std::marker::PhantomData;
        .           use std::ops::Range;
        .           use ty::util::IntTypeExt;
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
       29 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct TypeAndMut<'tcx> {
      277 ( 0.00%)      pub ty: Ty<'tcx>,
    1,385 ( 0.00%)      pub mutbl: hir::Mutability,
        .           }
        .           
        .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
        .           #[derive(HashStable)]
        .           /// A "free" region `fr` can be interpreted as "some region
        .           /// at least as big as the scope `fr.scope`".
        .           pub struct FreeRegion {
    5,953 ( 0.00%)      pub scope: DefId,
   11,450 ( 0.00%)      pub bound_region: BoundRegionKind,
        .           }
        .           
   57,705 ( 0.01%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
        .           #[derive(HashStable)]
        .           pub enum BoundRegionKind {
        .               /// An anonymous region parameter for a given fn (&T)
    2,942 ( 0.00%)      BrAnon(u32),
        .           
        .               /// Named region parameters for functions (a in &'a T)
        .               ///
        .               /// The `DefId` is needed to distinguish free regions in
        .               /// the event of shadowing.
       42 ( 0.00%)      BrNamed(DefId, Symbol),
        .           
        .               /// Anonymous region for the implicit env pointer parameter
        .               /// to a closure
        .               BrEnv,
        .           }
        .           
      180 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
        .           #[derive(HashStable)]
        .           pub struct BoundRegion {
   10,965 ( 0.00%)      pub var: BoundVar,
    8,945 ( 0.00%)      pub kind: BoundRegionKind,
        .           }
        .           
        .           impl BoundRegionKind {
        .               pub fn is_named(&self) -> bool {
        .                   match *self {
        .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
        .                       _ => false,
        .                   }
        .               }
        .           }
        .           
        .           /// Defines the kinds of types.
        .           ///
        .           /// N.B., if you change this, you'll probably want to change the corresponding
        .           /// AST structure in `rustc_ast/src/ast.rs` as well.
1,274,122 ( 0.32%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
        .           #[derive(HashStable)]
        .           #[rustc_diagnostic_item = "TyKind"]
        .           pub enum TyKind<'tcx> {
        .               /// The primitive boolean type. Written as `bool`.
        .               Bool,
        .           
        .               /// The primitive character type; holds a Unicode scalar value
        .               /// (a non-surrogate code point). Written as `char`.
-- line 89 ----------------------------------------
-- line 99 ----------------------------------------
        .               Float(ty::FloatTy),
        .           
        .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
        .               ///
        .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
        .               /// That is, even after substitution it is possible that there are type
        .               /// variables. This happens when the `Adt` corresponds to an ADT
        .               /// definition and not a concrete use of it.
  122,350 ( 0.03%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
        .           
        .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
        .               Foreign(DefId),
        .           
        .               /// The pointee of a string slice. Written as `str`.
        .               Str,
        .           
        .               /// An array with the given length. Written as `[T; n]`.
    1,663 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
        .           
        .               /// The pointee of an array slice. Written as `[T]`.
        .               Slice(Ty<'tcx>),
        .           
        .               /// A raw pointer. Written as `*mut T` or `*const T`
        .               RawPtr(TypeAndMut<'tcx>),
        .           
        .               /// A reference; a pointer with an associated lifetime. Written as
        .               /// `&'a mut T` or `&'a T`.
  116,236 ( 0.03%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
        .           
        .               /// The anonymous type of a function declaration/definition. Each
        .               /// function has a unique type, which is output (for a function
        .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
        .               ///
        .               /// For example the type of `bar` here:
        .               ///
        .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
        .               ///
        .               /// ```rust
        .               /// fn foo() -> i32 { 1 }
        .               /// let bar: fn() -> i32 = foo;
        .               /// ```
        .               FnPtr(PolyFnSig<'tcx>),
        .           
        .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
   38,784 ( 0.01%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
        .           
        .               /// The anonymous type of a closure. Used to represent the type of
        .               /// `|a| a`.
        .               Closure(DefId, SubstsRef<'tcx>),
        .           
        .               /// The anonymous type of a generator. Used to represent the type of
        .               /// `|a| yield a`.
        .               Generator(DefId, SubstsRef<'tcx>, hir::Movability),
-- line 159 ----------------------------------------
-- line 180 ----------------------------------------
        .               /// The substitutions are for the generics of the function in question.
        .               /// After typeck, the concrete type can be found in the `types` map.
        .               Opaque(DefId, SubstsRef<'tcx>),
        .           
        .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
        .               Param(ParamTy),
        .           
        .               /// Bound type variable, used only when preparing a trait query.
      349 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
        .           
        .               /// A placeholder type - universally quantified higher-ranked type.
        .               Placeholder(ty::PlaceholderType),
        .           
        .               /// A type variable used during type checking.
        .               Infer(InferTy),
        .           
        .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 330 ----------------------------------------
        .               pub closure_kind_ty: T,
        .               pub closure_sig_as_fn_ptr_ty: T,
        .               pub tupled_upvars_ty: T,
        .           }
        .           
        .           impl<'tcx> ClosureSubsts<'tcx> {
        .               /// Construct `ClosureSubsts` from `ClosureSubstsParts`, containing `Substs`
        .               /// for the closure parent, alongside additional closure-specific components.
       10 ( 0.00%)      pub fn new(
        .                   tcx: TyCtxt<'tcx>,
        .                   parts: ClosureSubstsParts<'tcx, Ty<'tcx>>,
        .               ) -> ClosureSubsts<'tcx> {
        .                   ClosureSubsts {
        .                       substs: tcx.mk_substs(
       20 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
       40 ( 0.00%)                      [parts.closure_kind_ty, parts.closure_sig_as_fn_ptr_ty, parts.tupled_upvars_ty]
        .                                   .iter()
        .                                   .map(|&ty| ty.into()),
        .                           ),
        .                       ),
        .                   }
       20 ( 0.00%)      }
        .           
        .               /// Divides the closure substs into their respective components.
        .               /// The ordering assumed here must match that used by `ClosureSubsts::new` above.
      168 ( 0.00%)      fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {
        .                   match self.substs[..] {
    1,046 ( 0.00%)              [
      286 ( 0.00%)                  ref parent_substs @ ..,
      322 ( 0.00%)                  closure_kind_ty,
      142 ( 0.00%)                  closure_sig_as_fn_ptr_ty,
      231 ( 0.00%)                  tupled_upvars_ty,
      672 ( 0.00%)              ] => ClosureSubstsParts {
        .                           parent_substs,
        .                           closure_kind_ty,
        .                           closure_sig_as_fn_ptr_ty,
        .                           tupled_upvars_ty,
        .                       },
        .                       _ => bug!("closure substs missing synthetics"),
        .                   }
      504 ( 0.00%)      }
        .           
        .               /// Returns `true` only if enough of the synthetic types are known to
        .               /// allow using all of the methods on `ClosureSubsts` without panicking.
        .               ///
        .               /// Used primarily by `ty::print::pretty` to be able to handle closure
        .               /// types that haven't had their synthetic types substituted in.
        4 ( 0.00%)      pub fn is_valid(self) -> bool {
        8 ( 0.00%)          self.substs.len() >= 3
        8 ( 0.00%)              && matches!(self.split().tupled_upvars_ty.expect_ty().kind(), Tuple(_))
        8 ( 0.00%)      }
        .           
        .               /// Returns the substitutions of the closure's parent.
        .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
        .                   self.split().parent_substs
        .               }
        .           
        .               /// Returns an iterator over the list of types of captured paths by the closure.
        .               /// In case there was a type error in figuring out the types of the captured path, an
        .               /// empty iterator is returned.
        .               #[inline]
       30 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       72 ( 0.00%)          match self.tupled_upvars_ty().kind() {
        .                       TyKind::Error(_) => None,
       52 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
        .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
        .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
        .                   }
        .                   .into_iter()
        .                   .flatten()
       20 ( 0.00%)      }
        .           
        .               /// Returns the tuple type representing the upvars for this closure.
        .               #[inline]
        .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
      743 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
        .               }
        .           
        .               /// Returns the closure kind for this closure; may return a type
        .               /// variable during inference. To get the closure kind during
        .               /// inference, use `infcx.closure_kind(substs)`.
       70 ( 0.00%)      pub fn kind_ty(self) -> Ty<'tcx> {
        .                   self.split().closure_kind_ty.expect_ty()
      140 ( 0.00%)      }
        .           
        .               /// Returns the `fn` pointer type representing the closure signature for this
        .               /// closure.
        .               // FIXME(eddyb) this should be unnecessary, as the shallowly resolved
        .               // type is known at the time of the creation of `ClosureSubsts`,
        .               // see `rustc_typeck::check::closure`.
        .               pub fn sig_as_fn_ptr_ty(self) -> Ty<'tcx> {
        .                   self.split().closure_sig_as_fn_ptr_ty.expect_ty()
        .               }
        .           
        .               /// Returns the closure kind for this closure; only usable outside
        .               /// of an inference context, because in that context we know that
        .               /// there are no type variables.
        .               ///
        .               /// If you have an inference context, use `infcx.closure_kind()`.
        5 ( 0.00%)      pub fn kind(self) -> ty::ClosureKind {
        5 ( 0.00%)          self.kind_ty().to_opt_closure_kind().unwrap()
       10 ( 0.00%)      }
        .           
        .               /// Extracts the signature from the closure.
       83 ( 0.00%)      pub fn sig(self) -> ty::PolyFnSig<'tcx> {
        .                   let ty = self.sig_as_fn_ptr_ty();
      166 ( 0.00%)          match ty.kind() {
      332 ( 0.00%)              ty::FnPtr(sig) => *sig,
        .                       _ => bug!("closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}", ty.kind()),
        .                   }
      249 ( 0.00%)      }
        .           }
        .           
        .           /// Similar to `ClosureSubsts`; see the above documentation for more.
        .           #[derive(Copy, Clone, Debug, TypeFoldable)]
        .           pub struct GeneratorSubsts<'tcx> {
        .               pub substs: SubstsRef<'tcx>,
        .           }
        .           
-- line 448 ----------------------------------------
-- line 676 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> UpvarSubsts<'tcx> {
        .               /// Returns an iterator over the list of types of captured paths by the closure/generator.
        .               /// In case there was a type error in figuring out the types of the captured path, an
        .               /// empty iterator is returned.
        .               #[inline]
        .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       30 ( 0.00%)          let tupled_tys = match self {
       40 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
        .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
        .                   };
        .           
       65 ( 0.00%)          match tupled_tys.kind() {
        .                       TyKind::Error(_) => None,
       55 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
        .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
        .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
        .                   }
        .                   .into_iter()
        .                   .flatten()
        .               }
        .           
        .               #[inline]
        .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
       50 ( 0.00%)          match self {
       55 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
        .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
        .                   }
        .               }
        .           }
        .           
        .           /// An inline const is modeled like
        .           ///
        .           ///     const InlineConst<'l0...'li, T0...Tj, R>: R;
-- line 710 ----------------------------------------
-- line 760 ----------------------------------------
        .               }
        .           
        .               /// Returns the type of this inline const.
        .               pub fn ty(self) -> Ty<'tcx> {
        .                   self.split().ty.expect_ty()
        .               }
        .           }
        .           
   36,050 ( 0.01%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
   32,085 ( 0.01%)  #[derive(HashStable, TypeFoldable)]
        .           pub enum ExistentialPredicate<'tcx> {
        .               /// E.g., `Iterator`.
        .               Trait(ExistentialTraitRef<'tcx>),
        .               /// E.g., `Iterator::Item = T`.
        .               Projection(ExistentialProjection<'tcx>),
        .               /// E.g., `Send`.
      455 ( 0.00%)      AutoTrait(DefId),
        .           }
        .           
        .           impl<'tcx> ExistentialPredicate<'tcx> {
        .               /// Compares via an ordering that will not change if modules are reordered or other changes are
        .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
    2,250 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
        .                   use self::ExistentialPredicate::*;
    3,260 ( 0.00%)          match (*self, *other) {
        .                       (Trait(_), Trait(_)) => Ordering::Equal,
        .                       (Projection(ref a), Projection(ref b)) => {
        .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
        .                       }
        .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
        .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
        .                       }
        .                       (Trait(_), _) => Ordering::Less,
        .                       (Projection(_), Trait(_)) => Ordering::Greater,
        .                       (Projection(_), _) => Ordering::Less,
        .                       (AutoTrait(_), _) => Ordering::Greater,
        .                   }
    2,700 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
    2,934 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
        .                   use crate::ty::ToPredicate;
    1,766 ( 0.00%)          match self.skip_binder() {
        .                       ExistentialPredicate::Trait(tr) => {
        .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
        .                       }
        .                       ExistentialPredicate::Projection(p) => {
        .                           self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)
        .                       }
        .                       ExistentialPredicate::AutoTrait(did) => {
      102 ( 0.00%)                  let trait_ref = self.rebind(ty::TraitRef {
        .                               def_id: did,
        .                               substs: tcx.mk_substs_trait(self_ty, &[]),
        .                           });
        .                           trait_ref.without_const().to_predicate(tcx)
        .                       }
        .                   }
    2,608 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
        .               /// Returns the "principal `DefId`" of this set of existential predicates.
        .               ///
        .               /// A Rust trait object type consists (in addition to a lifetime bound)
        .               /// of a set of trait bounds, which are separated into any number
        .               /// of auto-trait bounds, and at most one non-auto-trait bound. The
-- line 826 ----------------------------------------
-- line 839 ----------------------------------------
        .               /// are the set `{Sync}`.
        .               ///
        .               /// It is also possible to have a "trivial" trait object that
        .               /// consists only of auto traits, with no principal - for example,
        .               /// `dyn Send + Sync`. In that case, the set of auto-trait bounds
        .               /// is `{Send, Sync}`, while there is no principal. These trait objects
        .               /// have a "trivial" vtable consisting of just the size, alignment,
        .               /// and destructor.
      260 ( 0.00%)      pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {
    2,010 ( 0.00%)          self[0]
    1,230 ( 0.00%)              .map_bound(|this| match this {
        .                           ExistentialPredicate::Trait(tr) => Some(tr),
        .                           _ => None,
    1,040 ( 0.00%)              })
        .                       .transpose()
      780 ( 0.00%)      }
        .           
      286 ( 0.00%)      pub fn principal_def_id(&self) -> Option<DefId> {
        .                   self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)
      572 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn projection_bounds<'a>(
        .                   &'a self,
        .               ) -> impl Iterator<Item = ty::Binder<'tcx, ExistentialProjection<'tcx>>> + 'a {
        .                   self.iter().filter_map(|predicate| {
        .                       predicate
      262 ( 0.00%)                  .map_bound(|pred| match pred {
        .                               ExistentialPredicate::Projection(projection) => Some(projection),
        .                               _ => None,
        .                           })
        .                           .transpose()
        .                   })
        .               }
        .           
        .               #[inline]
        .               pub fn auto_traits<'a>(&'a self) -> impl Iterator<Item = DefId> + 'a {
       11 ( 0.00%)          self.iter().filter_map(|predicate| match predicate.skip_binder() {
        .                       ExistentialPredicate::AutoTrait(did) => Some(did),
        .                       _ => None,
        .                   })
        .               }
        .           }
        .           
        .           /// A complete reference to a trait. These take numerous guises in syntax,
        .           /// but perhaps the most recognizable form is in a where-clause:
-- line 884 ----------------------------------------
-- line 886 ----------------------------------------
        .           ///     T: Foo<U>
        .           ///
        .           /// This would be represented by a trait-reference where the `DefId` is the
        .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
        .           /// and `U` as parameter 1.
        .           ///
        .           /// Trait references also appear in object types like `Foo<U>`, but in
        .           /// that case the `Self` parameter is absent from the substitutions.
   28,500 ( 0.01%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
  247,682 ( 0.06%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct TraitRef<'tcx> {
      116 ( 0.00%)      pub def_id: DefId,
  146,396 ( 0.04%)      pub substs: SubstsRef<'tcx>,
        .           }
        .           
        .           impl<'tcx> TraitRef<'tcx> {
      579 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
        .                   TraitRef { def_id, substs }
    2,316 ( 0.00%)      }
        .           
        .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
        .               /// are the parameters defined on trait.
    5,148 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
    2,288 ( 0.00%)          ty::Binder::dummy(TraitRef {
        .                       def_id,
    3,432 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
        .                   })
    4,576 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn self_ty(&self) -> Ty<'tcx> {
        .                   self.substs.type_at(0)
        .               }
        .           
      208 ( 0.00%)      pub fn from_method(
        .                   tcx: TyCtxt<'tcx>,
        .                   trait_id: DefId,
        .                   substs: SubstsRef<'tcx>,
        .               ) -> ty::TraitRef<'tcx> {
        .                   let defs = tcx.generics_of(trait_id);
        .           
       26 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
      286 ( 0.00%)      }
        .           }
        .           
        .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
        .           
        .           impl<'tcx> PolyTraitRef<'tcx> {
        .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
        .                   self.map_bound_ref(|tr| tr.self_ty())
        .               }
        .           
        .               pub fn def_id(&self) -> DefId {
    4,152 ( 0.00%)          self.skip_binder().def_id
    1,384 ( 0.00%)      }
        .           
       80 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
      160 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
        .                       trait_ref,
        .                       constness: ty::BoundConstness::NotConst,
        .                       polarity: ty::ImplPolarity::Positive,
        .                   })
       80 ( 0.00%)      }
        .           }
        .           
        .           /// An existential reference to a trait, where `Self` is erased.
        .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
        .           ///
        .           ///     exists T. T: Trait<'a, 'b, X, Y>
        .           ///
        .           /// The substitutions don't include the erased `Self`, only trait
        .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
       96 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
   14,337 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct ExistentialTraitRef<'tcx> {
    1,998 ( 0.00%)      pub def_id: DefId,
   18,274 ( 0.00%)      pub substs: SubstsRef<'tcx>,
        .           }
        .           
        .           impl<'tcx> ExistentialTraitRef<'tcx> {
    1,316 ( 0.00%)      pub fn erase_self_ty(
        .                   tcx: TyCtxt<'tcx>,
        .                   trait_ref: ty::TraitRef<'tcx>,
        .               ) -> ty::ExistentialTraitRef<'tcx> {
        .                   // Assert there is a Self.
        .                   trait_ref.substs.type_at(0);
        .           
        .                   ty::ExistentialTraitRef {
        .                       def_id: trait_ref.def_id,
        .                       substs: tcx.intern_substs(&trait_ref.substs[1..]),
        .                   }
    1,316 ( 0.00%)      }
        .           
        .               /// Object types don't have a self type specified. Therefore, when
        .               /// we convert the principal trait-ref into a normal trait-ref,
        .               /// you must give *some* self type. A common choice is `mk_err()`
        .               /// or some placeholder type.
      222 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::TraitRef<'tcx> {
        .                   // otherwise the escaping vars would be captured by the binder
        .                   // debug_assert!(!self_ty.has_escaping_bound_vars());
        .           
      111 ( 0.00%)          ty::TraitRef { def_id: self.def_id, substs: tcx.mk_substs_trait(self_ty, self.substs) }
      555 ( 0.00%)      }
        .           }
        .           
        .           pub type PolyExistentialTraitRef<'tcx> = Binder<'tcx, ExistentialTraitRef<'tcx>>;
        .           
        .           impl<'tcx> PolyExistentialTraitRef<'tcx> {
        .               pub fn def_id(&self) -> DefId {
        .                   self.skip_binder().def_id
        .               }
        .           
        .               /// Object types don't have a self type specified. Therefore, when
        .               /// we convert the principal trait-ref into a normal trait-ref,
        .               /// you must give *some* self type. A common choice is `mk_err()`
        .               /// or some placeholder type.
      168 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
      168 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
      224 ( 0.00%)      }
        .           }
        .           
    6,734 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub enum BoundVariableKind {
        .               Ty(BoundTyKind),
        .               Region(BoundRegionKind),
        .               Const,
        .           }
        .           
        .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
-- line 1015 ----------------------------------------
-- line 1016 ----------------------------------------
        .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
        .           /// (which would be represented by the type `PolyTraitRef ==
        .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
        .           /// erase, or otherwise "discharge" these bound vars, we change the
        .           /// type from `Binder<'tcx, T>` to just `T` (see
        .           /// e.g., `liberate_late_bound_regions`).
        .           ///
        .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
   42,663 ( 0.01%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
   82,251 ( 0.02%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
        .           
        .           impl<'tcx, T> Binder<'tcx, T>
        .           where
        .               T: TypeFoldable<'tcx>,
        .           {
        .               /// Wraps `value` in a binder, asserting that `value` does not
        .               /// contain any bound vars that would be bound by the
        .               /// binder. This is commonly used to 'inject' a value T into a
        .               /// different binding level.
    3,720 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
   13,458 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
   33,687 ( 0.01%)          Binder(value, ty::List::empty())
    3,703 ( 0.00%)      }
        .           
        .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(vars);
        .                       value.visit_with(&mut validator);
        .                   }
   17,318 ( 0.00%)          Binder(value, vars)
        .               }
        .           }
        .           
        .           impl<'tcx, T> Binder<'tcx, T> {
        .               /// Skips the binder and returns the "bound" value. This is a
        .               /// risky thing to do because it's easy to get confused about
        .               /// De Bruijn indices and the like. It is usually better to
        .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
        .               /// accounting.
        .               ///
        .               /// Some examples where `skip_binder` is reasonable:
        .               ///
        .               /// - extracting the `DefId` from a PolyTraitRef;
        .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
        .               ///   a type parameter `X`, since the type `X` does not reference any regions
        .               pub fn skip_binder(self) -> T {
  214,019 ( 0.05%)          self.0
        .               }
        .           
        .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
    3,953 ( 0.00%)          self.1
        .               }
        .           
        .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
    1,890 ( 0.00%)          Binder(&self.0, self.1)
        .               }
        .           
        .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(&T) -> U,
        .               {
        .                   let value = f(&self.0);
        .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
        .           
        .               pub fn map_bound_ref<F, U: TypeFoldable<'tcx>>(&self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(&T) -> U,
        .               {
        .                   self.as_ref().map_bound(f)
        .               }
        .           
    1,061 ( 0.00%)      pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(T) -> U,
        .               {
    7,788 ( 0.00%)          let value = f(self.0);
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.1);
        .                       value.visit_with(&mut validator);
        .                   }
   40,508 ( 0.01%)          Binder(value, self.1)
    1,061 ( 0.00%)      }
        .           
        .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
        .               where
        .                   F: FnOnce(T) -> Result<U, E>,
        .               {
        .                   let value = f(self.0)?;
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.1);
        .                       value.visit_with(&mut validator);
        .                   }
    3,953 ( 0.00%)          Ok(Binder(value, self.1))
        .               }
        .           
        .               /// Wraps a `value` in a binder, using the same bound variables as the
        .               /// current `Binder`. This should not be used if the new value *changes*
        .               /// the bound variables. Note: the (old or new) value itself does not
        .               /// necessarily need to *name* all the bound variables.
        .               ///
        .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
        .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
        .               where
        .                   U: TypeFoldable<'tcx>,
        .               {
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
        .                       value.visit_with(&mut validator);
        .                   }
   10,759 ( 0.00%)          Binder(value, self.1)
        .               }
        .           
        .               /// Unwraps and returns the value within, but only if it contains
        .               /// no bound vars at all. (In other words, if this binder --
        .               /// and indeed any enclosing binder -- doesn't bind anything at
        .               /// all.) Otherwise, returns `None`.
        .               ///
        .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
        .               /// binder, but permits late-bound vars bound by enclosing
        .               /// binders, but that would require adjusting the debruijn
        .               /// indices, and given the shallow binding structure we often use,
        .               /// would not be that useful.)
        .               pub fn no_bound_vars(self) -> Option<T>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
   33,059 ( 0.01%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
       90 ( 0.00%)      }
        .           
        .               /// Splits the contents into two things that share the same binder
        .               /// level as the original, returning two distinct binders.
        .               ///
        .               /// `f` should consider bound regions at depth 1 to be free, and
        .               /// anything it produces with bound regions at depth 1 will be
        .               /// bound in the resulting return values.
        .               pub fn split<U, V, F>(self, f: F) -> (Binder<'tcx, U>, Binder<'tcx, V>)
-- line 1160 ----------------------------------------
-- line 1170 ----------------------------------------
        .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
        .                   let bound_vars = self.1;
        .                   self.0.map(|v| Binder(v, bound_vars))
        .               }
        .           }
        .           
        .           /// Represents the projection of an associated type. In explicit UFCS
        .           /// form this would be written `<T as Trait<..>>::N`.
       58 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
    3,679 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct ProjectionTy<'tcx> {
        .               /// The parameters of the associated item.
      299 ( 0.00%)      pub substs: SubstsRef<'tcx>,
        .           
        .               /// The `DefId` of the `TraitItem` for the associated type `N`.
        .               ///
        .               /// Note that this is not the `DefId` of the `TraitRef` containing this
        .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
      830 ( 0.00%)      pub item_def_id: DefId,
        .           }
        .           
        .           impl<'tcx> ProjectionTy<'tcx> {
      595 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
      170 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
      680 ( 0.00%)      }
        .           
        .               /// Extracts the underlying trait reference and own substs from this projection.
        .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
        .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
      126 ( 0.00%)      pub fn trait_ref_and_own_substs(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
       54 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
        .                   let trait_generics = tcx.generics_of(def_id);
       90 ( 0.00%)          (
        .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
        .                       &self.substs[trait_generics.count()..],
        .                   )
      162 ( 0.00%)      }
        .           
        .               /// Extracts the underlying trait reference from this projection.
        .               /// For example, if this is a projection of `<T as Iterator>::Item`,
        .               /// then this function would return a `T: Iterator` trait reference.
        .               ///
        .               /// WARNING: This will drop the substs for generic associated types
        .               /// consider calling [Self::trait_ref_and_own_substs] to get those
        .               /// as well.
      675 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
       75 ( 0.00%)          let def_id = self.trait_def_id(tcx);
       75 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
      825 ( 0.00%)      }
        .           
      131 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
      393 ( 0.00%)          self.substs.type_at(0)
      262 ( 0.00%)      }
        .           }
        .           
        .           #[derive(Copy, Clone, Debug, TypeFoldable)]
        .           pub struct GenSig<'tcx> {
        .               pub resume_ty: Ty<'tcx>,
        .               pub yield_ty: Ty<'tcx>,
        .               pub return_ty: Ty<'tcx>,
        .           }
-- line 1233 ----------------------------------------
-- line 1235 ----------------------------------------
        .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
        .           
        .           /// Signature of a function type, which we have arbitrarily
        .           /// decided to use to refer to the input/output types.
        .           ///
        .           /// - `inputs`: is the list of arguments and their modes.
        .           /// - `output`: is the return type.
        .           /// - `c_variadic`: indicates whether this is a C-variadic function.
    5,842 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    2,316 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct FnSig<'tcx> {
      334 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
    3,025 ( 0.00%)      pub c_variadic: bool,
      524 ( 0.00%)      pub unsafety: hir::Unsafety,
    3,539 ( 0.00%)      pub abi: abi::Abi,
        .           }
        .           
        .           impl<'tcx> FnSig<'tcx> {
    2,983 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
   13,897 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
    5,966 ( 0.00%)      }
        .           
    2,015 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
   15,164 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
    4,030 ( 0.00%)      }
        .           
        .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
        .               // method.
        .               fn fake() -> FnSig<'tcx> {
        .                   FnSig {
        .                       inputs_and_output: List::empty(),
        .                       c_variadic: false,
        .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
        .               }
        .           }
        .           
        .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
        .           
        .           impl<'tcx> PolyFnSig<'tcx> {
        .               #[inline]
        .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
      488 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
        .               }
        .               #[inline]
        .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
      983 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
        .               }
        .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
        .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
      110 ( 0.00%)      }
        .               #[inline]
        .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
      702 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
        .               }
        .               pub fn c_variadic(&self) -> bool {
      220 ( 0.00%)          self.skip_binder().c_variadic
      110 ( 0.00%)      }
        .               pub fn unsafety(&self) -> hir::Unsafety {
      370 ( 0.00%)          self.skip_binder().unsafety
      185 ( 0.00%)      }
        .               pub fn abi(&self) -> abi::Abi {
    1,052 ( 0.00%)          self.skip_binder().abi
      263 ( 0.00%)      }
        .           }
        .           
        .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
        .           
       76 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub struct ParamTy {
       94 ( 0.00%)      pub index: u32,
        .               pub name: Symbol,
        .           }
        .           
        .           impl<'tcx> ParamTy {
      128 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
        .                   ParamTy { index, name }
       64 ( 0.00%)      }
        .           
        .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
       62 ( 0.00%)          ParamTy::new(def.index, def.name)
       31 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
        .                   tcx.mk_ty_param(self.index, self.name)
        .               }
        .           }
        .           
        .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
        .           #[derive(HashStable)]
        .           pub struct ParamConst {
       78 ( 0.00%)      pub index: u32,
       78 ( 0.00%)      pub name: Symbol,
        .           }
        .           
        .           impl ParamConst {
        .               pub fn new(index: u32, name: Symbol) -> ParamConst {
        .                   ParamConst { index, name }
        .               }
        .           
        .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
        .           /// the inference variable is supposed to satisfy the relation
        .           /// *for every value of the placeholder region*. To ensure that doesn't
        .           /// happen, you can use `leak_check`. This is more clearly explained
        .           /// by the [rustc dev guide].
        .           ///
        .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
        .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
        .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
  579,000 ( 0.15%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
       24 ( 0.00%)  pub enum RegionKind {
        .               /// Region bound in a type or fn declaration which will be
        .               /// substituted 'early' -- that is, at the same time when type
        .               /// parameters are substituted.
        .               ReEarlyBound(EarlyBoundRegion),
        .           
        .               /// Region bound in a function scope, which will be substituted when the
        .               /// function is called.
   17,732 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
        .           
        .               /// When checking a function body, the types of all arguments and so forth
        .               /// that refer to bound region parameters are modified to refer to free
        .               /// region parameters.
        .               ReFree(FreeRegion),
        .           
        .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
        .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
        .               /// regions visible from `U`, but not less than regions not visible
        .               /// from `U`.
        .               ReEmpty(ty::UniverseIndex),
        .           
        .               /// Erased region, used by trait selection, in MIR and during codegen.
        .               ReErased,
        .           }
        .           
   15,022 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
        .           pub struct EarlyBoundRegion {
      224 ( 0.00%)      pub def_id: DefId,
    6,616 ( 0.00%)      pub index: u32,
    4,334 ( 0.00%)      pub name: Symbol,
        .           }
        .           
        .           /// A **`const`** **v**ariable **ID**.
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
        .           pub struct ConstVid<'tcx> {
      128 ( 0.00%)      pub index: u32,
        1 ( 0.00%)      pub phantom: PhantomData<&'tcx ()>,
        .           }
        .           
        .           rustc_index::newtype_index! {
        .               /// A **region** (lifetime) **v**ariable **ID**.
        .               pub struct RegionVid {
        .                   DEBUG_FORMAT = custom,
        .               }
        .           }
-- line 1505 ----------------------------------------
-- line 1513 ----------------------------------------
        .           rustc_index::newtype_index! {
        .               pub struct BoundVar { .. }
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub struct BoundTy {
        .               pub var: BoundVar,
      349 ( 0.00%)      pub kind: BoundTyKind,
        .           }
        .           
    5,975 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub enum BoundTyKind {
        .               Anon,
        .               Param(Symbol),
        .           }
        .           
        .           impl From<BoundVar> for BoundTy {
        .               fn from(var: BoundVar) -> Self {
-- line 1532 ----------------------------------------
-- line 1616 ----------------------------------------
        .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
        .                       RegionKind::ReEmpty(_) => false,
        .                       RegionKind::ReErased => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_late_bound(&self) -> bool {
    1,188 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_placeholder(&self) -> bool {
        .                   matches!(*self, ty::RePlaceholder(..))
        .               }
        .           
        .               #[inline]
        .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
   13,965 ( 0.00%)          match *self {
        .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
        .                       _ => false,
        .                   }
        .               }
        .           
        .               pub fn type_flags(&self) -> TypeFlags {
        .                   let mut flags = TypeFlags::empty();
        .           
   23,544 ( 0.01%)          match *self {
        .                       ty::ReVar(..) => {
        .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
        .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
        .                           flags = flags | TypeFlags::HAS_RE_INFER;
        .                       }
        .                       ty::RePlaceholder(..) => {
        .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
        .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
        .                       ty::ReErased => {
        .                           flags = flags | TypeFlags::HAS_RE_ERASED;
        .                       }
        .                   }
        .           
        .                   debug!("type_flags({:?}) = {:?}", self, flags);
        .           
        .                   flags
      909 ( 0.00%)      }
        .           
        .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
        .               /// For example, consider the regions in this snippet of code:
        .               ///
        .               /// ```
        .               /// impl<'a> Foo {
        .               ///      ^^ -- early bound, declared on an impl
        .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
        .           
        .               #[inline(always)]
        .               pub fn flags(&self) -> TypeFlags {
        .                   self.flags
        .               }
        .           
        .               #[inline]
        .               pub fn is_unit(&self) -> bool {
      288 ( 0.00%)          match self.kind() {
       21 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_never(&self) -> bool {
    3,008 ( 0.00%)          matches!(self.kind(), Never)
        .               }
        .           
        .               #[inline]
        .               pub fn is_primitive(&self) -> bool {
        .                   self.kind().is_primitive()
        .               }
        .           
        .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_ref(&self) -> bool {
        .                   matches!(self.kind(), Ref(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_ty_var(&self) -> bool {
    5,309 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
    4,316 ( 0.00%)          match self.kind() {
      436 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_ty_infer(&self) -> bool {
       30 ( 0.00%)          matches!(self.kind(), Infer(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_phantom_data(&self) -> bool {
        .                   if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
        .               }
        .           
        .               #[inline]
-- line 1770 ----------------------------------------
-- line 1775 ----------------------------------------
        .               /// Returns `true` if this type is a `str`.
        .               #[inline]
        .               pub fn is_str(&self) -> bool {
        .                   *self.kind() == Str
        .               }
        .           
        .               #[inline]
        .               pub fn is_param(&self, index: u32) -> bool {
       48 ( 0.00%)          match self.kind() {
        .                       ty::Param(ref data) => data.index == index,
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_slice(&self) -> bool {
        .                   match self.kind() {
        .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_array(&self) -> bool {
        6 ( 0.00%)          matches!(self.kind(), Array(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_simd(&self) -> bool {
        .                   match self.kind() {
        .                       Adt(def, _) => def.repr.simd(),
        .                       _ => false,
        .                   }
        .               }
        .           
       20 ( 0.00%)      pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
       40 ( 0.00%)          match self.kind() {
        .                       Array(ty, _) | Slice(ty) => ty,
        .                       Str => tcx.mk_mach_uint(ty::UintTy::U8),
        .                       _ => bug!("`sequence_element_type` called on non-sequence value: {}", self),
        .                   }
       20 ( 0.00%)      }
        .           
        .               pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {
        .                   match self.kind() {
        .                       Adt(def, substs) => {
        .                           assert!(def.repr.simd(), "`simd_size_and_type` called on non-SIMD type");
        .                           let variant = def.non_enum_variant();
        .                           let f0_ty = variant.fields[0].ty(tcx, substs);
        .           
-- line 1824 ----------------------------------------
-- line 1838 ----------------------------------------
        .                           }
        .                       }
        .                       _ => bug!("`simd_size_and_type` called on invalid type"),
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_region_ptr(&self) -> bool {
        4 ( 0.00%)          matches!(self.kind(), Ref(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_mutable_ptr(&self) -> bool {
        .                   matches!(
        .                       self.kind(),
        .                       RawPtr(TypeAndMut { mutbl: hir::Mutability::Mut, .. })
        .                           | Ref(_, _, hir::Mutability::Mut)
-- line 1854 ----------------------------------------
-- line 1861 ----------------------------------------
        .                   match self.kind() {
        .                       Ref(_, _, mutability) => Some(*mutability),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_unsafe_ptr(&self) -> bool {
      275 ( 0.00%)          matches!(self.kind(), RawPtr(_))
        .               }
        .           
        .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
        .               #[inline]
        .               pub fn is_any_ptr(&self) -> bool {
        .                   self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
        .               }
        .           
        .               #[inline]
        .               pub fn is_box(&self) -> bool {
    3,816 ( 0.00%)          match self.kind() {
      767 ( 0.00%)              Adt(def, _) => def.is_box(),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               /// Panics if called on any type other than `Box<T>`.
      164 ( 0.00%)      pub fn boxed_ty(&self) -> Ty<'tcx> {
      164 ( 0.00%)          match self.kind() {
      410 ( 0.00%)              Adt(def, substs) if def.is_box() => substs.type_at(0),
        .                       _ => bug!("`boxed_ty` is called on non-box type {:?}", self),
        .                   }
      164 ( 0.00%)      }
        .           
        .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
        .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
        .               /// contents are abstract to rustc.)
        .               #[inline]
        .               pub fn is_scalar(&self) -> bool {
       20 ( 0.00%)          matches!(
       48 ( 0.00%)              self.kind(),
        .                       Bool | Char
        .                           | Int(_)
        .                           | Float(_)
        .                           | Uint(_)
        .                           | FnDef(..)
        .                           | FnPtr(_)
        .                           | RawPtr(_)
        .                           | Infer(IntVar(_) | FloatVar(_))
        .                   )
        .               }
        .           
        .               /// Returns `true` if this type is a floating point type.
        .               #[inline]
        .               pub fn is_floating_point(&self) -> bool {
        2 ( 0.00%)          matches!(self.kind(), Float(_) | Infer(FloatVar(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn is_trait(&self) -> bool {
        .                   matches!(self.kind(), Dynamic(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_enum(&self) -> bool {
        .                   matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
        .               }
        .           
        .               #[inline]
        .               pub fn is_union(&self) -> bool {
      417 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
        .               }
        .           
        .               #[inline]
        .               pub fn is_closure(&self) -> bool {
      138 ( 0.00%)          matches!(self.kind(), Closure(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_generator(&self) -> bool {
      189 ( 0.00%)          matches!(self.kind(), Generator(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_integral(&self) -> bool {
      179 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fresh_ty(&self) -> bool {
        .                   matches!(self.kind(), Infer(FreshTy(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fresh(&self) -> bool {
      806 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn is_char(&self) -> bool {
        .                   matches!(self.kind(), Char)
        .               }
        .           
        .               #[inline]
-- line 1963 ----------------------------------------
-- line 1967 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_signed(&self) -> bool {
        .                   matches!(self.kind(), Int(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_ptr_sized_integral(&self) -> bool {
        6 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
        .               }
        .           
        .               #[inline]
        .               pub fn has_concrete_skeleton(&self) -> bool {
        .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
        .               }
        .           
        .               /// Returns the type and mutability of `*ty`.
        .               ///
        .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
        .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
      903 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
    5,624 ( 0.00%)          match self.kind() {
      250 ( 0.00%)              Adt(def, _) if def.is_box() => {
      221 ( 0.00%)                  Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
        .                       }
    3,024 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
       76 ( 0.00%)              RawPtr(mt) if explicit => Some(*mt),
        .                       _ => None,
        .                   }
    1,806 ( 0.00%)      }
        .           
        .               /// Returns the type of `ty[i]`.
        .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
        .                   match self.kind() {
        .                       Array(ty, _) | Slice(ty) => Some(ty),
        .                       _ => None,
        .                   }
        .               }
        .           
    4,080 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
    2,040 ( 0.00%)          match self.kind() {
    1,530 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
        .                       FnPtr(f) => *f,
        .                       Error(_) => {
        .                           // ignore errors (#54954)
        .                           ty::Binder::dummy(FnSig::fake())
        .                       }
        .                       Closure(..) => bug!(
        .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
        .                       ),
        .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
        .                   }
    4,590 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn is_fn(&self) -> bool {
       39 ( 0.00%)          matches!(self.kind(), FnDef(..) | FnPtr(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fn_ptr(&self) -> bool {
        .                   matches!(self.kind(), FnPtr(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_impl_trait(&self) -> bool {
        .                   matches!(self.kind(), Opaque(..))
        .               }
        .           
        .               #[inline]
        .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
    2,014 ( 0.00%)          match self.kind() {
        .                       Adt(adt, _) => Some(adt),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               /// Iterates over tuple fields.
        .               /// Panics when called on anything but a tuple.
       39 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
      120 ( 0.00%)          match self.kind() {
       89 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
        .                       _ => bug!("tuple_fields called on non-tuple"),
        .                   }
       78 ( 0.00%)      }
        .           
        .               /// Get the `i`-th element of a tuple.
        .               /// Panics when called on anything but a tuple.
       15 ( 0.00%)      pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
       30 ( 0.00%)          match self.kind() {
       30 ( 0.00%)              Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
        .                       _ => bug!("tuple_fields called on non-tuple"),
        .                   }
       30 ( 0.00%)      }
        .           
        .               /// If the type contains variants, returns the valid range of variant indices.
        .               //
        .               // FIXME: This requires the optimized MIR in the case of generators.
        .               #[inline]
        .               pub fn variant_range(&self, tcx: TyCtxt<'tcx>) -> Option<Range<VariantIdx>> {
        .                   match self.kind() {
        .                       TyKind::Adt(adt, _) => Some(adt.variant_range()),
-- line 2068 ----------------------------------------
-- line 2095 ----------------------------------------
        .                       TyKind::Generator(def_id, substs, _) => {
        .                           Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
        .                       }
        .                       _ => None,
        .                   }
        .               }
        .           
        .               /// Returns the type of the discriminant of this type.
      180 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
       90 ( 0.00%)          match self.kind() {
      144 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
        .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
        .           
        .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
        .                           let assoc_items = tcx.associated_item_def_ids(
        .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
        .                           );
        .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
        .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
        .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
        .           
        .                       ty::Bound(..)
        .                       | ty::Placeholder(_)
        .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
        .                       }
        .                   }
      144 ( 0.00%)      }
        .           
        .               /// Returns the type of metadata for (potentially fat) pointers to this type.
        .               pub fn ptr_metadata_ty(
        .                   &'tcx self,
        .                   tcx: TyCtxt<'tcx>,
        .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
        .               ) -> Ty<'tcx> {
        .                   let tail = tcx.struct_tail_with_normalize(self, normalize);
-- line 2151 ----------------------------------------
-- line 2200 ----------------------------------------
        .               /// function converts such a special type into the closure
        .               /// kind. To go the other way, use
        .               /// `tcx.closure_kind_ty(closure_kind)`.
        .               ///
        .               /// Note that during type checking, we use an inference variable
        .               /// to represent the closure kind, because it has not yet been
        .               /// inferred. Once upvar inference (in `rustc_typeck/src/check/upvar.rs`)
        .               /// is complete, that type variable will be unified.
      190 ( 0.00%)      pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {
      380 ( 0.00%)          match self.kind() {
      380 ( 0.00%)              Int(int_ty) => match int_ty {
        .                           ty::IntTy::I8 => Some(ty::ClosureKind::Fn),
        .                           ty::IntTy::I16 => Some(ty::ClosureKind::FnMut),
        .                           ty::IntTy::I32 => Some(ty::ClosureKind::FnOnce),
        .                           _ => bug!("cannot convert type `{:?}` to a closure kind", self),
        .                       },
        .           
        .                       // "Bound" types appear in canonical queries when the
        .                       // closure type is not yet known
        .                       Bound(..) | Infer(_) => None,
        .           
        .                       Error(_) => Some(ty::ClosureKind::Fn),
        .           
        .                       _ => bug!("cannot convert type `{:?}` to a closure kind", self),
        .                   }
      190 ( 0.00%)      }
        .           
        .               /// Fast path helper for testing if a type is `Sized`.
        .               ///
        .               /// Returning true means the type is known to be sized. Returning
        .               /// `false` means nothing -- could be sized, might not be.
        .               ///
        .               /// Note that we could never rely on the fact that a type such as `[_]` is
        .               /// trivially `!Sized` because we could be in a type environment with a
        .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
        .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
        .               /// this method doesn't return `Option<bool>`.
   11,502 ( 0.00%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
    7,668 ( 0.00%)          match self.kind() {
        .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
        .                       | ty::Uint(_)
        .                       | ty::Int(_)
        .                       | ty::Bool
        .                       | ty::Float(_)
        .                       | ty::FnDef(..)
        .                       | ty::FnPtr(_)
        .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
        .                       | ty::GeneratorWitness(..)
        .                       | ty::Array(..)
        .                       | ty::Closure(..)
        .                       | ty::Never
        .                       | ty::Error(_) => true,
        .           
        .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
        .           
       76 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
        .           
      678 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
        .           
        .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
        .           
        .                       ty::Infer(ty::TyVar(_)) => false,
        .           
        .                       ty::Bound(..)
        .                       | ty::Placeholder(..)
        .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
        .                       }
        .                   }
   11,502 ( 0.00%)      }
        .           }
        .           
        .           /// Extra information about why we ended up with a particular variance.
        .           /// This is only used to add more information to error messages, and
        .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
        .           /// may lead to confusing notes in error messages, it will never cause
        .           /// a miscompilation or unsoundness.
        .           ///
        .           /// When in doubt, use `VarianceDiagInfo::default()`
       66 ( 0.00%)  #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]
        .           pub enum VarianceDiagInfo<'tcx> {
        .               /// No additional information - this is the default.
        .               /// We will not add any additional information to error messages.
        .               #[default]
        .               None,
        .               /// We switched our variance because a generic argument occurs inside
        .               /// the invariant generic argument of another type.
        .               Invariant {
-- line 2290 ----------------------------------------
-- line 2295 ----------------------------------------
        .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
        .                   param_index: u32,
        .               },
        .           }
        .           
        .           impl<'tcx> VarianceDiagInfo<'tcx> {
        .               /// Mirrors `Variance::xform` - used to 'combine' the existing
        .               /// and new `VarianceDiagInfo`s when our variance changes.
    5,300 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
        .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
    7,950 ( 0.00%)          match self {
        .                       VarianceDiagInfo::None => other,
        .                       VarianceDiagInfo::Invariant { .. } => self,
        .                   }
    2,650 ( 0.00%)      }
        .           }

1,867,519 ( 0.47%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .                   #[inline]
        .                   pub fn $fn_name(
        .                       out: &mut [::std::mem::MaybeUninit<u8>; max_leb128_len!($int_ty)],
        .                       mut value: $int_ty,
        .                   ) -> &[u8] {
        .                       let mut i = 0;
        .           
        .                       loop {
   78,456 ( 0.02%)                  if value < 0x80 {
        .                               unsafe {
   33,916 ( 0.01%)                          *out.get_unchecked_mut(i).as_mut_ptr() = value as u8;
        .                               }
        .           
   46,114 ( 0.01%)                      i += 1;
        .                               break;
        .                           } else {
        .                               unsafe {
   42,784 ( 0.01%)                          *out.get_unchecked_mut(i).as_mut_ptr() = ((value & 0x7f) | 0x80) as u8;
        .                               }
        .           
   17,161 ( 0.00%)                      value >>= 7;
        .                               i += 1;
        .                           }
        .                       }
        .           
        .                       unsafe { ::std::mem::MaybeUninit::slice_assume_init_ref(&out.get_unchecked(..i)) }
        .                   }
        .               };
        .           }
-- line 45 ----------------------------------------
-- line 53 ----------------------------------------
        .           macro_rules! impl_read_unsigned_leb128 {
        .               ($fn_name:ident, $int_ty:ty) => {
        .                   #[inline]
        .                   pub fn $fn_name(slice: &[u8], position: &mut usize) -> $int_ty {
        .                       // The first iteration of this loop is unpeeled. This is a
        .                       // performance win because this code is hot and integer values less
        .                       // than 128 are very common, typically occurring 50-80% or more of
        .                       // the time, even for u64 and u128.
1,777,248 ( 0.45%)              let byte = slice[*position];
  888,624 ( 0.23%)              *position += 1;
  888,624 ( 0.23%)              if (byte & 0x80) == 0 {
       86 ( 0.00%)                  return byte as $int_ty;
        .                       }
    1,086 ( 0.00%)              let mut result = (byte & 0x7F) as $int_ty;
        .                       let mut shift = 7;
        .                       loop {
  576,555 ( 0.15%)                  let byte = slice[*position];
  376,857 ( 0.10%)                  *position += 1;
  384,370 ( 0.10%)                  if (byte & 0x80) == 0 {
  316,830 ( 0.08%)                      result |= (byte as $int_ty) << shift;
        .                               return result;
        .                           } else {
        .                               result |= ((byte & 0x7F) as $int_ty) << shift;
        .                           }
        .                           shift += 7;
        .                       }
        .                   }
        .               };
-- line 80 ----------------------------------------

  615,132 ( 0.16%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs
--------------------------------------------------------------------------------
Ir               

-- line 15 ----------------------------------------
      .           use std::str;
      .           
      .           use crate::{with_session_globals, Edition, Span, DUMMY_SP};
      .           
      .           #[cfg(test)]
      .           mod tests;
      .           
      .           // The proc macro code for this is in `compiler/rustc_macros/src/symbols.rs`.
      8 ( 0.00%)  symbols! {
      .               // After modifying this list adjust `is_special`, `is_used_keyword`/`is_unused_keyword`,
      .               // this should be rarely necessary though if the keywords are kept in alphabetic order.
      .               Keywords {
      .                   // Special reserved identifiers used internally for elided lifetimes,
      .                   // unnamed method parameters, crate root module, error recovery etc.
      .                   Empty:              "",
      .                   PathRoot:           "{{root}}",
      .                   DollarCrate:        "$crate",
-- line 31 ----------------------------------------
-- line 1498 ----------------------------------------
      .                   write_str,
      .                   writeln_macro,
      .                   x87_reg,
      .                   xer,
      .                   xmm_reg,
      .                   ymm_reg,
      .                   zmm_reg,
      .               }
     10 ( 0.00%)  }
      .           
 22,552 ( 0.01%)  #[derive(Copy, Clone, Eq, HashStable_Generic, Encodable, Decodable)]
      .           pub struct Ident {
      .               pub name: Symbol,
      .               pub span: Span,
      .           }
      .           
      .           impl Ident {
      .               #[inline]
      .               /// Constructs a new identifier from a symbol and a span.
      .               pub const fn new(name: Symbol, span: Span) -> Ident {
      .                   Ident { name, span }
 66,781 ( 0.02%)      }
      .           
      .               /// Constructs a new identifier with a dummy span.
      .               #[inline]
      .               pub const fn with_dummy_span(name: Symbol) -> Ident {
      .                   Ident::new(name, DUMMY_SP)
      .               }
      .           
      .               #[inline]
      .               pub fn empty() -> Ident {
      .                   Ident::with_dummy_span(kw::Empty)
      .               }
      .           
      .               /// Maps a string to an identifier with a dummy span.
      4 ( 0.00%)      pub fn from_str(string: &str) -> Ident {
      4 ( 0.00%)          Ident::with_dummy_span(Symbol::intern(string))
     16 ( 0.00%)      }
      .           
      .               /// Maps a string and a span to an identifier.
     16 ( 0.00%)      pub fn from_str_and_span(string: &str, span: Span) -> Ident {
      8 ( 0.00%)          Ident::new(Symbol::intern(string), span)
     16 ( 0.00%)      }
      .           
      .               /// Replaces `lo` and `hi` with those from `span`, but keep hygiene context.
  4,144 ( 0.00%)      pub fn with_span_pos(self, span: Span) -> Ident {
      .                   Ident::new(self.name, span.with_ctxt(self.span.ctxt()))
  2,590 ( 0.00%)      }
      .           
     48 ( 0.00%)      pub fn without_first_quote(self) -> Ident {
     48 ( 0.00%)          Ident::new(Symbol::intern(self.as_str().trim_start_matches('\'')), self.span)
     30 ( 0.00%)      }
      .           
      .               /// "Normalize" ident for use in comparisons using "item hygiene".
      .               /// Identifiers with same string value become same if they came from the same macro 2.0 macro
      .               /// (e.g., `macro` item, but not `macro_rules` item) and stay different if they came from
      .               /// different macro 2.0 macros.
      .               /// Technically, this operation strips all non-opaque marks from ident's syntactic context.
 39,348 ( 0.01%)      pub fn normalize_to_macros_2_0(self) -> Ident {
      .                   Ident::new(self.name, self.span.normalize_to_macros_2_0())
 30,604 ( 0.01%)      }
      .           
      .               /// "Normalize" ident for use in comparisons using "local variable hygiene".
      .               /// Identifiers with same string value become same if they came from the same non-transparent
      .               /// macro (e.g., `macro` or `macro_rules!` items) and stay different if they came from different
      .               /// non-transparent macros.
      .               /// Technically, this operation strips all transparent marks from ident's syntactic context.
  3,690 ( 0.00%)      pub fn normalize_to_macro_rules(self) -> Ident {
      .                   Ident::new(self.name, self.span.normalize_to_macro_rules())
  2,870 ( 0.00%)      }
      .           
      .               /// Access the underlying string. This is a slowish operation because it
      .               /// requires locking the symbol interner.
      .               ///
      .               /// Note that the lifetime of the return value is a lie. See
      .               /// `Symbol::as_str()` for details.
      .               pub fn as_str(&self) -> &str {
     63 ( 0.00%)          self.name.as_str()
      .               }
      .           }
      .           
      .           impl PartialEq for Ident {
 11,310 ( 0.00%)      fn eq(&self, rhs: &Self) -> bool {
 26,206 ( 0.01%)          self.name == rhs.name && self.span.ctxt() == rhs.span.ctxt()
 15,080 ( 0.00%)      }
      .           }
      .           
      .           impl Hash for Ident {
      .               fn hash<H: Hasher>(&self, state: &mut H) {
      3 ( 0.00%)          self.name.hash(state);
  3,933 ( 0.00%)          self.span.ctxt().hash(state);
      .               }
      .           }
      .           
      .           impl fmt::Debug for Ident {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Display::fmt(self, f)?;
      .                   fmt::Debug::fmt(&self.span.ctxt(), f)
      .               }
      .           }
      .           
      .           /// This implementation is supposed to be used in error messages, so it's expected to be identical
      .           /// to printing the original identifier token written in source code (`token_to_string`),
      .           /// except that AST identifiers don't keep the rawness flag, so we have to guess it.
      .           impl fmt::Display for Ident {
    264 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    342 ( 0.00%)          fmt::Display::fmt(&IdentPrinter::new(self.name, self.is_raw_guess(), None), f)
    264 ( 0.00%)      }
      .           }
      .           
      .           /// This is the most general way to print identifiers.
      .           /// AST pretty-printer is used as a fallback for turning AST structures into token streams for
      .           /// proc macros. Additionally, proc macros may stringify their input and expect it survive the
      .           /// stringification (especially true for proc macro derives written between Rust 1.15 and 1.30).
      .           /// So we need to somehow pretty-print `$crate` in a way preserving at least some of its
      .           /// hygiene data, most importantly name of the crate it refers to.
-- line 1613 ----------------------------------------
-- line 1622 ----------------------------------------
      .               is_raw: bool,
      .               /// Span used for retrieving the crate name to which `$crate` refers to,
      .               /// if this field is `None` then the `$crate` conversion doesn't happen.
      .               convert_dollar_crate: Option<Span>,
      .           }
      .           
      .           impl IdentPrinter {
      .               /// The most general `IdentPrinter` constructor. Do not use this.
    176 ( 0.00%)      pub fn new(symbol: Symbol, is_raw: bool, convert_dollar_crate: Option<Span>) -> IdentPrinter {
  1,250 ( 0.00%)          IdentPrinter { symbol, is_raw, convert_dollar_crate }
    176 ( 0.00%)      }
      .           
      .               /// This implementation is supposed to be used when printing identifiers
      .               /// as a part of pretty-printing for larger AST pieces.
      .               /// Do not use this either.
     72 ( 0.00%)      pub fn for_ast_ident(ident: Ident, is_raw: bool) -> IdentPrinter {
     72 ( 0.00%)          IdentPrinter::new(ident.name, is_raw, Some(ident.span))
     36 ( 0.00%)      }
      .           }
      .           
      .           impl fmt::Display for IdentPrinter {
  1,450 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    580 ( 0.00%)          if self.is_raw {
      .                       f.write_str("r#")?;
    290 ( 0.00%)          } else if self.symbol == kw::DollarCrate {
      .                       if let Some(span) = self.convert_dollar_crate {
      .                           let converted = span.ctxt().dollar_crate_name();
      .                           if !converted.is_path_segment_keyword() {
      .                               f.write_str("::")?;
      .                           }
      .                           return fmt::Display::fmt(&converted, f);
      .                       }
      .                   }
-- line 1654 ----------------------------------------
-- line 1656 ----------------------------------------
      .               }
      .           }
      .           
      .           /// An newtype around `Ident` that calls [Ident::normalize_to_macro_rules] on
      .           /// construction.
      .           // FIXME(matthewj, petrochenkov) Use this more often, add a similar
      .           // `ModernIdent` struct and use that as well.
      .           #[derive(Copy, Clone, Eq, PartialEq, Hash)]
    816 ( 0.00%)  pub struct MacroRulesNormalizedIdent(Ident);
      .           
      .           impl MacroRulesNormalizedIdent {
      .               pub fn new(ident: Ident) -> Self {
    244 ( 0.00%)          Self(ident.normalize_to_macro_rules())
      .               }
      .           }
      .           
      .           impl fmt::Debug for MacroRulesNormalizedIdent {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Debug::fmt(&self.0, f)
      .               }
      .           }
-- line 1676 ----------------------------------------
-- line 1686 ----------------------------------------
      .           /// Internally, a `Symbol` is implemented as an index, and all operations
      .           /// (including hashing, equality, and ordering) operate on that index. The use
      .           /// of `rustc_index::newtype_index!` means that `Option<Symbol>` only takes up 4 bytes,
      .           /// because `rustc_index::newtype_index!` reserves the last 256 values for tagging purposes.
      .           ///
      .           /// Note that `Symbol` cannot directly be a `rustc_index::newtype_index!` because it
      .           /// implements `fmt::Debug`, `Encodable`, and `Decodable` in special ways.
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
 13,975 ( 0.00%)  pub struct Symbol(SymbolIndex);
      .           
      .           rustc_index::newtype_index! {
      .               struct SymbolIndex { .. }
      .           }
      .           
      .           impl Symbol {
      .               const fn new(n: u32) -> Self {
      .                   Symbol(SymbolIndex::from_u32(n))
     40 ( 0.00%)      }
      .           
      .               /// Maps a string to its interned representation.
271,386 ( 0.07%)      pub fn intern(string: &str) -> Self {
      .                   with_session_globals(|session_globals| session_globals.symbol_interner.intern(string))
271,386 ( 0.07%)      }
      .           
      .               /// Access the underlying string. This is a slowish operation because it
      .               /// requires locking the symbol interner.
      .               ///
      .               /// Note that the lifetime of the return value is a lie. It's not the same
      .               /// as `&self`, but actually tied to the lifetime of the underlying
      .               /// interner. Interners are long-lived, and there are very few of them, and
      .               /// this function is typically used for short-lived things, so in practice
      .               /// it works out ok.
 27,165 ( 0.01%)      pub fn as_str(&self) -> &str {
  9,055 ( 0.00%)          with_session_globals(|session_globals| unsafe {
      .                       std::mem::transmute::<&str, &str>(session_globals.symbol_interner.get(*self))
      .                   })
 36,220 ( 0.01%)      }
      .           
      .               pub fn as_u32(self) -> u32 {
      .                   self.0.as_u32()
      .               }
      .           
      .               pub fn is_empty(self) -> bool {
      .                   self == kw::Empty
      .               }
      .           
      .               /// This method is supposed to be used in error messages, so it's expected to be
      .               /// identical to printing the original identifier token written in source code
      .               /// (`token_to_string`, `Ident::to_string`), except that symbols don't keep the rawness flag
      .               /// or edition, so we have to guess the rawness using the global edition.
     72 ( 0.00%)      pub fn to_ident_string(self) -> String {
      .                   Ident::with_dummy_span(self).to_string()
     72 ( 0.00%)      }
      .           }
      .           
      .           impl fmt::Debug for Symbol {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Debug::fmt(self.as_str(), f)
      .               }
      .           }
      .           
      .           impl fmt::Display for Symbol {
    280 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  3,450 ( 0.00%)          fmt::Display::fmt(self.as_str(), f)
      .               }
      .           }
      .           
      .           impl<S: Encoder> Encodable<S> for Symbol {
      .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
 12,090 ( 0.00%)          s.emit_str(self.as_str())
      .               }
      .           }
      .           
      .           impl<D: Decoder> Decodable<D> for Symbol {
      .               #[inline]
  9,134 ( 0.00%)      fn decode(d: &mut D) -> Symbol {
 77,237 ( 0.02%)          Symbol::intern(&d.read_str())
      .               }
      .           }
      .           
      .           impl<CTX> HashStable<CTX> for Symbol {
      .               #[inline]
    306 ( 0.00%)      fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
  6,792 ( 0.00%)          self.as_str().hash_stable(hcx, hasher);
    282 ( 0.00%)      }
      .           }
      .           
      .           impl<CTX> ToStableHashKey<CTX> for Symbol {
      .               type KeyType = String;
      .               #[inline]
      .               fn to_stable_hash_key(&self, _: &CTX) -> String {
      .                   self.as_str().to_string()
      .               }
-- line 1778 ----------------------------------------
-- line 1785 ----------------------------------------
      .           //
      .           // The `FxHashMap`+`Vec` pair could be replaced by `FxIndexSet`, but #75278
      .           // found that to regress performance up to 2% in some cases. This might be
      .           // revisited after further improvements to `indexmap`.
      .           //
      .           // This type is private to prevent accidentally constructing more than one
      .           // `Interner` on the same thread, which makes it easy to mixup `Symbol`s
      .           // between `Interner`s.
      2 ( 0.00%)  #[derive(Default)]
      .           struct InternerInner {
      .               arena: DroplessArena,
      .               names: FxHashMap<&'static str, Symbol>,
      .               strings: Vec<&'static str>,
      .           }
      .           
      .           impl Interner {
      .               fn prefill(init: &[&'static str]) -> Self {
     30 ( 0.00%)          Interner(Lock::new(InternerInner {
      .                       strings: init.into(),
      .                       names: init.iter().copied().zip((0..).map(Symbol::new)).collect(),
      .                       ..Default::default()
      .                   }))
      .               }
      .           
      .               #[inline]
      .               fn intern(&self, string: &str) -> Symbol {
      .                   let mut inner = self.0.lock();
 47,924 ( 0.01%)          if let Some(&name) = inner.names.get(string) {
      .                       return name;
      .                   }
      .           
  6,192 ( 0.00%)          let name = Symbol::new(inner.strings.len() as u32);
      .           
      .                   // SAFETY: we convert from `&str` to `&[u8]`, clone it into the arena,
      .                   // and immediately convert the clone back to `&[u8], all because there
      .                   // is no `inner.arena.alloc_str()` method. This is clearly safe.
      .                   let string: &str =
      .                       unsafe { str::from_utf8_unchecked(inner.arena.alloc_slice(string.as_bytes())) };
      .           
      .                   // SAFETY: we can extend the arena allocation to `'static` because we
-- line 1824 ----------------------------------------
-- line 1831 ----------------------------------------
      .                   // #91445 for details.
      .                   inner.names.insert(string, name);
      .                   name
      .               }
      .           
      .               // Get the symbol as a string. `Symbol::as_str()` should be used in
      .               // preference to this function.
      .               fn get(&self, symbol: Symbol) -> &str {
 27,165 ( 0.01%)          self.0.lock().strings[symbol.0.as_usize()]
      .               }
      .           }
      .           
      .           // This module has a very short name because it's used a lot.
      .           /// This module contains all the defined keyword `Symbol`s.
      .           ///
      .           /// Given that `kw` is imported, use them like `kw::keyword_name`.
      .           /// For example `kw::Loop` or `kw::Break`.
-- line 1847 ----------------------------------------
-- line 1863 ----------------------------------------
      .           
      .               // Used from a macro in `librustc_feature/accepted.rs`
      .               pub use super::kw::MacroRules as macro_rules;
      .           
      .               /// Get the symbol for an integer.
      .               ///
      .               /// The first few non-negative integers each have a static symbol and therefore
      .               /// are fast.
     74 ( 0.00%)      pub fn integer<N: TryInto<usize> + Copy + ToString>(n: N) -> Symbol {
     56 ( 0.00%)          if let Result::Ok(idx) = n.try_into() {
     12 ( 0.00%)              if idx < 10 {
     80 ( 0.00%)                  return Symbol::new(super::SYMBOL_DIGITS_BASE + idx as u32);
      .                       }
      .                   }
      .                   Symbol::intern(&n.to_string())
      .               }
      .           }
      .           
      .           impl Symbol {
      .               fn is_special(self) -> bool {
      .                   self <= kw::Underscore
      .               }
      .           
      .               fn is_used_keyword_always(self) -> bool {
    528 ( 0.00%)          self >= kw::As && self <= kw::While
      .               }
      .           
      .               fn is_used_keyword_conditional(self, edition: impl FnOnce() -> Edition) -> bool {
  9,849 ( 0.00%)          (self >= kw::Async && self <= kw::Dyn) && edition() >= Edition::Edition2018
      .               }
      .           
      .               fn is_unused_keyword_always(self) -> bool {
    528 ( 0.00%)          self >= kw::Abstract && self <= kw::Yield
      .               }
      .           
      .               fn is_unused_keyword_conditional(self, edition: impl FnOnce() -> Edition) -> bool {
    176 ( 0.00%)          self == kw::Try && edition() >= Edition::Edition2018
      .               }
      .           
      .               pub fn is_reserved(self, edition: impl Copy + FnOnce() -> Edition) -> bool {
 15,845 ( 0.00%)          self.is_special()
      .                       || self.is_used_keyword_always()
      .                       || self.is_unused_keyword_always()
      .                       || self.is_used_keyword_conditional(edition)
      .                       || self.is_unused_keyword_conditional(edition)
      .               }
      .           
      .               /// A keyword or reserved identifier that can be used as a path segment.
      .               pub fn is_path_segment_keyword(self) -> bool {
 38,703 ( 0.01%)          self == kw::Super
      .                       || self == kw::SelfLower
      .                       || self == kw::SelfUpper
      .                       || self == kw::Crate
      .                       || self == kw::PathRoot
      .                       || self == kw::DollarCrate
      .               }
      .           
      .               /// Returns `true` if the symbol is `true` or `false`.
      .               pub fn is_bool_lit(self) -> bool {
    550 ( 0.00%)          self == kw::True || self == kw::False
    550 ( 0.00%)      }
      .           
      .               /// Returns `true` if this symbol can be a raw identifier.
      .               pub fn can_be_raw(self) -> bool {
    274 ( 0.00%)          self != kw::Empty && self != kw::Underscore && !self.is_path_segment_keyword()
      2 ( 0.00%)      }
      .           }
      .           
      .           impl Ident {
      .               // Returns `true` for reserved identifiers used internally for elided lifetimes,
      .               // unnamed method parameters, crate root module, error recovery etc.
      .               pub fn is_special(self) -> bool {
      .                   self.name.is_special()
    176 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is a keyword used in the language.
    176 ( 0.00%)      pub fn is_used_keyword(self) -> bool {
      .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
    176 ( 0.00%)          self.name.is_used_keyword_always()
      .                       || self.name.is_used_keyword_conditional(|| self.span.edition())
    352 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is a keyword reserved for possible future use.
    176 ( 0.00%)      pub fn is_unused_keyword(self) -> bool {
      .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
    176 ( 0.00%)          self.name.is_unused_keyword_always()
      .                       || self.name.is_unused_keyword_conditional(|| self.span.edition())
    352 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is either a special identifier or a keyword.
  3,038 ( 0.00%)      pub fn is_reserved(self) -> bool {
      .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
      .                   self.name.is_reserved(|| self.span.edition())
  6,076 ( 0.00%)      }
      .           
      .               /// A keyword or reserved identifier that can be used as a path segment.
      .               pub fn is_path_segment_keyword(self) -> bool {
      .                   self.name.is_path_segment_keyword()
  5,529 ( 0.00%)      }
      .           
      .               /// We see this identifier in a normal identifier position, like variable name or a type.
      .               /// How was it written originally? Did it use the raw form? Let's try to guess.
     53 ( 0.00%)      pub fn is_raw_guess(self) -> bool {
      .                   self.name.can_be_raw() && self.is_reserved()
    106 ( 0.00%)      }
      .           }

 43,659 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs
--------------------------------------------------------------------------------
Ir               

-- line 22 ----------------------------------------
      .           
      .           /// An entity in the Rust type system, which can be one of
      .           /// several kinds (types, lifetimes, and consts).
      .           /// To reduce memory usage, a `GenericArg` is an interned pointer,
      .           /// with the lowest 2 bits being reserved for a tag to
      .           /// indicate the type (`Ty`, `Region`, or `Const`) it points to.
      .           #[derive(Copy, Clone, PartialEq, Eq, Hash)]
      .           pub struct GenericArg<'tcx> {
 42,073 ( 0.01%)      ptr: NonZeroUsize,
125,454 ( 0.03%)      marker: PhantomData<(Ty<'tcx>, ty::Region<'tcx>, &'tcx ty::Const<'tcx>)>,
      .           }
      .           
      .           const TAG_MASK: usize = 0b11;
      .           const TYPE_TAG: usize = 0b00;
      .           const REGION_TAG: usize = 0b01;
      .           const CONST_TAG: usize = 0b10;
      .           
 60,732 ( 0.02%)  #[derive(Debug, TyEncodable, TyDecodable, PartialEq, Eq, PartialOrd, Ord, HashStable)]
      .           pub enum GenericArgKind<'tcx> {
      .               Lifetime(ty::Region<'tcx>),
      .               Type(Ty<'tcx>),
      .               Const(&'tcx ty::Const<'tcx>),
      .           }
      .           
      .           impl<'tcx> GenericArgKind<'tcx> {
 16,309 ( 0.00%)      fn pack(self) -> GenericArg<'tcx> {
 16,309 ( 0.00%)          let (tag, ptr) = match self {
      .                       GenericArgKind::Lifetime(lt) => {
      .                           // Ensure we can use the tag bits.
      .                           assert_eq!(mem::align_of_val(lt) & TAG_MASK, 0);
      .                           (REGION_TAG, lt as *const _ as usize)
      .                       }
      .                       GenericArgKind::Type(ty) => {
      .                           // Ensure we can use the tag bits.
      .                           assert_eq!(mem::align_of_val(ty) & TAG_MASK, 0);
-- line 56 ----------------------------------------
-- line 58 ----------------------------------------
      .                       }
      .                       GenericArgKind::Const(ct) => {
      .                           // Ensure we can use the tag bits.
      .                           assert_eq!(mem::align_of_val(ct) & TAG_MASK, 0);
      .                           (CONST_TAG, ct as *const _ as usize)
      .                       }
      .                   };
      .           
 35,936 ( 0.01%)          GenericArg { ptr: unsafe { NonZeroUsize::new_unchecked(ptr | tag) }, marker: PhantomData }
 16,309 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> fmt::Debug for GenericArg<'tcx> {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   match self.unpack() {
      .                       GenericArgKind::Lifetime(lt) => lt.fmt(f),
      .                       GenericArgKind::Type(ty) => ty.fmt(f),
      .                       GenericArgKind::Const(ct) => ct.fmt(f),
-- line 75 ----------------------------------------
-- line 85 ----------------------------------------
      .           
      .           impl<'tcx> PartialOrd for GenericArg<'tcx> {
      .               fn partial_cmp(&self, other: &GenericArg<'_>) -> Option<Ordering> {
      .                   Some(self.cmp(&other))
      .               }
      .           }
      .           
      .           impl<'tcx> From<ty::Region<'tcx>> for GenericArg<'tcx> {
 15,216 ( 0.00%)      fn from(r: ty::Region<'tcx>) -> GenericArg<'tcx> {
      .                   GenericArgKind::Lifetime(r).pack()
 15,216 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> From<Ty<'tcx>> for GenericArg<'tcx> {
 61,076 ( 0.02%)      fn from(ty: Ty<'tcx>) -> GenericArg<'tcx> {
      .                   GenericArgKind::Type(ty).pack()
 61,076 ( 0.02%)      }
      .           }
      .           
      .           impl<'tcx> From<&'tcx ty::Const<'tcx>> for GenericArg<'tcx> {
      1 ( 0.00%)      fn from(c: &'tcx ty::Const<'tcx>) -> GenericArg<'tcx> {
      .                   GenericArgKind::Const(c).pack()
      1 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> GenericArg<'tcx> {
      .               #[inline]
      .               pub fn unpack(self) -> GenericArgKind<'tcx> {
      .                   let ptr = self.ptr.get();
      .                   unsafe {
955,295 ( 0.24%)              match ptr & TAG_MASK {
 12,850 ( 0.00%)                  REGION_TAG => GenericArgKind::Lifetime(&*((ptr & !TAG_MASK) as *const _)),
209,595 ( 0.05%)                  TYPE_TAG => GenericArgKind::Type(&*((ptr & !TAG_MASK) as *const _)),
     21 ( 0.00%)                  CONST_TAG => GenericArgKind::Const(&*((ptr & !TAG_MASK) as *const _)),
      .                           _ => intrinsics::unreachable(),
      .                       }
      .                   }
      .               }
      .           
      .               /// Unpack the `GenericArg` as a type when it is known certainly to be a type.
      .               /// This is true in cases where `Substs` is used in places where the kinds are known
      .               /// to be limited (e.g. in tuples, where the only parameters are type parameters).
      .               pub fn expect_ty(self) -> Ty<'tcx> {
      .                   match self.unpack() {
      .                       GenericArgKind::Type(ty) => ty,
      .                       _ => bug!("expected a type, but found another kind"),
      .                   }
  1,282 ( 0.00%)      }
      .           
      .               /// Unpack the `GenericArg` as a const when it is known certainly to be a const.
      .               pub fn expect_const(self) -> &'tcx ty::Const<'tcx> {
      .                   match self.unpack() {
      .                       GenericArgKind::Const(c) => c,
      .                       _ => bug!("expected a const, but found another kind"),
      .                   }
      .               }
-- line 140 ----------------------------------------
-- line 170 ----------------------------------------
      .                       GenericArgKind::Type(ty) => ty.visit_with(visitor),
      .                       GenericArgKind::Const(ct) => ct.visit_with(visitor),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for GenericArg<'tcx> {
      .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
  1,089 ( 0.00%)          self.unpack().encode(e)
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for GenericArg<'tcx> {
 81,545 ( 0.02%)      fn decode(d: &mut D) -> GenericArg<'tcx> {
 81,545 ( 0.02%)          GenericArgKind::decode(d).pack()
      .               }
      .           }
      .           
      .           /// A substitution mapping generic parameters to new values.
      .           pub type InternalSubsts<'tcx> = List<GenericArg<'tcx>>;
      .           
      .           pub type SubstsRef<'tcx> = &'tcx InternalSubsts<'tcx>;
      .           
      .           impl<'a, 'tcx> InternalSubsts<'tcx> {
      .               /// Interpret these substitutions as the substitutions of a closure type.
      .               /// Closure substitutions have a particular structure controlled by the
      .               /// compiler that encodes information like the signature and closure kind;
      .               /// see `ty::ClosureSubsts` struct for more comments.
    306 ( 0.00%)      pub fn as_closure(&'a self) -> ClosureSubsts<'a> {
      .                   ClosureSubsts { substs: self }
    306 ( 0.00%)      }
      .           
      .               /// Interpret these substitutions as the substitutions of a generator type.
      .               /// Generator substitutions have a particular structure controlled by the
      .               /// compiler that encodes information like the signature and generator kind;
      .               /// see `ty::GeneratorSubsts` struct for more comments.
      .               pub fn as_generator(&'tcx self) -> GeneratorSubsts<'tcx> {
      .                   GeneratorSubsts { substs: self }
      .               }
-- line 208 ----------------------------------------
-- line 211 ----------------------------------------
      .               /// Inline const substitutions have a particular structure controlled by the
      .               /// compiler that encodes information like the inferred type;
      .               /// see `ty::InlineConstSubsts` struct for more comments.
      .               pub fn as_inline_const(&'tcx self) -> InlineConstSubsts<'tcx> {
      .                   InlineConstSubsts { substs: self }
      .               }
      .           
      .               /// Creates an `InternalSubsts` that maps each generic parameter to itself.
  8,820 ( 0.00%)      pub fn identity_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {
  3,364 ( 0.00%)          Self::for_item(tcx, def_id, |param, _| tcx.mk_param_from_def(param))
  7,938 ( 0.00%)      }
      .           
      .               /// Creates an `InternalSubsts` for generic parameter definitions,
      .               /// by calling closures to obtain each kind.
      .               /// The closures get to observe the `InternalSubsts` as they're
      .               /// being built, which can be used to correctly
      .               /// substitute defaults of generic parameters.
 13,885 ( 0.00%)      pub fn for_item<F>(tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
      .               where
      .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
      .               {
      .                   let defs = tcx.generics_of(def_id);
      .                   let count = defs.count();
      .                   let mut substs = SmallVec::with_capacity(count);
  7,347 ( 0.00%)          Self::fill_item(&mut substs, tcx, defs, &mut mk_kind);
  3,104 ( 0.00%)          tcx.intern_substs(&substs)
 13,977 ( 0.00%)      }
      .           
      .               pub fn extend_to<F>(&self, tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
      .               where
      .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
      .               {
      .                   Self::for_item(tcx, def_id, |param, substs| {
      .                       self.get(param.index as usize).cloned().unwrap_or_else(|| mk_kind(param, substs))
      .                   })
      .               }
      .           
 29,497 ( 0.01%)      pub fn fill_item<F>(
      .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
      .                   tcx: TyCtxt<'tcx>,
      .                   defs: &ty::Generics,
      .                   mk_kind: &mut F,
      .               ) where
      .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
      .               {
 12,328 ( 0.00%)          if let Some(def_id) = defs.parent {
      .                       let parent_defs = tcx.generics_of(def_id);
  2,490 ( 0.00%)              Self::fill_item(substs, tcx, parent_defs, mk_kind);
      .                   }
      .                   Self::fill_single(substs, defs, mk_kind)
 23,376 ( 0.01%)      }
      .           
      8 ( 0.00%)      pub fn fill_single<F>(
      .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
      .                   defs: &ty::Generics,
      .                   mk_kind: &mut F,
      .               ) where
      .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
      .               {
      .                   substs.reserve(defs.params.len());
      .                   for param in &defs.params {
      .                       let kind = mk_kind(param, substs);
 15,886 ( 0.00%)              assert_eq!(param.index as usize, substs.len());
      .                       substs.push(kind);
      .                   }
      8 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn types(&'a self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> + 'a {
      .                   self.iter()
      .                       .filter_map(|k| if let GenericArgKind::Type(ty) = k.unpack() { Some(ty) } else { None })
      .               }
      .           
      .               #[inline]
-- line 284 ----------------------------------------
-- line 302 ----------------------------------------
      .                   self.iter().filter_map(|k| match k.unpack() {
      .                       GenericArgKind::Lifetime(_) => None,
      .                       generic => Some(generic),
      .                   })
      .               }
      .           
      .               #[inline]
      .               pub fn type_at(&self, i: usize) -> Ty<'tcx> {
 61,920 ( 0.02%)          if let GenericArgKind::Type(ty) = self[i].unpack() {
      .                       ty
      .                   } else {
      .                       bug!("expected type for param #{} in {:?}", i, self);
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn region_at(&self, i: usize) -> ty::Region<'tcx> {
-- line 318 ----------------------------------------
-- line 350 ----------------------------------------
      .               /// impl<U> X<U> for U { fn f<V>() {} }
      .               /// ```
      .               ///
      .               /// * If `self` is `[Self, S, T]`: the identity substs of `f` in the trait.
      .               /// * If `source_ancestor` is the def_id of the trait.
      .               /// * If `target_substs` is `[U]`, the substs for the impl.
      .               /// * Then we will return `[U, T]`, the subst for `f` in the impl that
      .               ///   are needed for it to match the trait.
    476 ( 0.00%)      pub fn rebase_onto(
      .                   &self,
      .                   tcx: TyCtxt<'tcx>,
      .                   source_ancestor: DefId,
      .                   target_substs: SubstsRef<'tcx>,
      .               ) -> SubstsRef<'tcx> {
      .                   let defs = tcx.generics_of(source_ancestor);
    136 ( 0.00%)          tcx.mk_substs(target_substs.iter().chain(self.iter().skip(defs.params.len())))
    544 ( 0.00%)      }
      .           
      .               pub fn truncate_to(&self, tcx: TyCtxt<'tcx>, generics: &ty::Generics) -> SubstsRef<'tcx> {
      .                   tcx.mk_substs(self.iter().take(generics.count()))
      .               }
      .           }
      .           
      .           impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {
    161 ( 0.00%)      fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
      .                   self,
      .                   folder: &mut F,
      .               ) -> Result<Self, F::Error> {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // The match arms are in order of frequency. The 1, 2, and 0 cases are
      .                   // typically hit in 90--99.99% of cases. When folding doesn't change
      .                   // the substs, it's faster to reuse the existing substs rather than
      .                   // calling `intern_substs`.
225,182 ( 0.06%)          match self.len() {
      .                       1 => {
 49,004 ( 0.01%)                  let param0 = self[0].try_fold_with(folder)?;
136,393 ( 0.03%)                  if param0 == self[0] { Ok(self) } else { Ok(folder.tcx().intern_substs(&[param0])) }
      .                       }
      .                       2 => {
 11,187 ( 0.00%)                  let param0 = self[0].try_fold_with(folder)?;
 27,376 ( 0.01%)                  let param1 = self[1].try_fold_with(folder)?;
 27,717 ( 0.01%)                  if param0 == self[0] && param1 == self[1] {
      .                               Ok(self)
      .                           } else {
 24,399 ( 0.01%)                      Ok(folder.tcx().intern_substs(&[param0, param1]))
      .                           }
      .                       }
      .                       0 => Ok(self),
      .                       _ => {
      .                           let params: SmallVec<[_; 8]> =
  2,314 ( 0.00%)                      self.iter().map(|k| k.try_fold_with(folder)).collect::<Result<_, _>>()?;
    128 ( 0.00%)                  if params[..] == self[..] {
      .                               Ok(self)
      .                           } else {
    330 ( 0.00%)                      Ok(folder.tcx().intern_substs(&params))
      .                           }
      .                       }
      .                   }
  4,372 ( 0.00%)      }
      .           
      .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
 37,586 ( 0.01%)          self.iter().try_for_each(|t| t.visit_with(visitor))
      .               }
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           // Public trait `Subst`
      .           //
      .           // Just call `foo.subst(tcx, substs)` to perform a substitution across
      .           // `foo`. Or use `foo.subst_spanned(tcx, substs, Some(span))` when
-- line 420 ----------------------------------------
-- line 435 ----------------------------------------
      .           
      .           impl<'tcx, T: TypeFoldable<'tcx>> Subst<'tcx> for T {
      .               fn subst_spanned(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   substs: &[GenericArg<'tcx>],
      .                   span: Option<Span>,
      .               ) -> T {
 85,540 ( 0.02%)          let mut folder = SubstFolder { tcx, substs, span, binders_passed: 0 };
      .                   self.fold_with(&mut folder)
      .               }
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           // The actual substitution engine itself is a type folder.
      .           
      .           struct SubstFolder<'a, 'tcx> {
-- line 451 ----------------------------------------
-- line 456 ----------------------------------------
      .               span: Option<Span>,
      .           
      .               /// Number of region binders we have passed through while doing the substitution
      .               binders_passed: u32,
      .           }
      .           
      .           impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {
      .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
 12,803 ( 0.00%)          self.tcx
      .               }
      .           
      .               fn fold_binder<T: TypeFoldable<'tcx>>(
      .                   &mut self,
      .                   t: ty::Binder<'tcx, T>,
      .               ) -> ty::Binder<'tcx, T> {
 18,660 ( 0.00%)          self.binders_passed += 1;
  4,648 ( 0.00%)          let t = t.super_fold_with(self);
 18,660 ( 0.00%)          self.binders_passed -= 1;
      .                   t
      .               }
      .           
 22,242 ( 0.01%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
      .                   // Note: This routine only handles regions that are bound on
      .                   // type declarations and other outer declarations, not those
      .                   // bound in *fn types*. Region substitution of the bound
      .                   // regions that appear in a function signature is done using
      .                   // the specialized routine `ty::replace_late_regions()`.
  7,414 ( 0.00%)          match *r {
  4,126 ( 0.00%)              ty::ReEarlyBound(data) => {
  4,126 ( 0.00%)                  let rk = self.substs.get(data.index as usize).map(|k| k.unpack());
      .                           match rk {
  2,063 ( 0.00%)                      Some(GenericArgKind::Lifetime(lt)) => self.shift_region_through_binders(lt),
      .                               _ => {
      .                                   let span = self.span.unwrap_or(DUMMY_SP);
      .                                   let msg = format!(
      .                                       "Region parameter out of range \
      .                                        when substituting in region {} (index={})",
      .                                       data.name, data.index
      .                                   );
      .                                   span_bug!(span, "{}", msg);
      .                               }
      .                           }
      .                       }
      .                       _ => r,
      .                   }
 25,949 ( 0.01%)      }
      .           
 58,254 ( 0.01%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
 19,418 ( 0.00%)          if !t.needs_subst() {
      .                       return t;
      .                   }
      .           
 32,280 ( 0.01%)          match *t.kind() {
 63,620 ( 0.02%)              ty::Param(p) => self.ty_for_param(p, t),
 20,496 ( 0.01%)              _ => t.super_fold_with(self),
      .                   }
 80,010 ( 0.02%)      }
      .           
     56 ( 0.00%)      fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
     21 ( 0.00%)          if let ty::ConstKind::Param(p) = c.val {
      .                       self.const_for_param(p, c)
      .                   } else {
     63 ( 0.00%)              c.super_fold_with(self)
      .                   }
      8 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {
      .                   c.super_fold_with(self)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> SubstFolder<'a, 'tcx> {
      .               fn ty_for_param(&self, p: ty::ParamTy, source_ty: Ty<'tcx>) -> Ty<'tcx> {
      .                   // Look up the type in the substitutions. It really should be in there.
 25,448 ( 0.01%)          let opt_ty = self.substs.get(p.index as usize).map(|k| k.unpack());
      .                   let ty = match opt_ty {
      .                       Some(GenericArgKind::Type(ty)) => ty,
      .                       Some(kind) => {
      .                           let span = self.span.unwrap_or(DUMMY_SP);
      .                           span_bug!(
      .                               span,
      .                               "expected type for `{:?}` ({:?}/{}) but found {:?} \
      .                                when substituting, substs={:?}",
-- line 539 ----------------------------------------
-- line 562 ----------------------------------------
      .               }
      .           
      .               fn const_for_param(
      .                   &self,
      .                   p: ParamConst,
      .                   source_ct: &'tcx ty::Const<'tcx>,
      .               ) -> &'tcx ty::Const<'tcx> {
      .                   // Look up the const in the substitutions. It really should be in there.
      2 ( 0.00%)          let opt_ct = self.substs.get(p.index as usize).map(|k| k.unpack());
      .                   let ct = match opt_ct {
      .                       Some(GenericArgKind::Const(ct)) => ct,
      .                       Some(kind) => {
      .                           let span = self.span.unwrap_or(DUMMY_SP);
      .                           span_bug!(
      .                               span,
      .                               "expected const for `{:?}` ({:?}/{}) but found {:?} \
      .                                when substituting substs={:?}",
-- line 578 ----------------------------------------
-- line 645 ----------------------------------------
      .               fn shift_vars_through_binders<T: TypeFoldable<'tcx>>(&self, val: T) -> T {
      .                   debug!(
      .                       "shift_vars(val={:?}, binders_passed={:?}, has_escaping_bound_vars={:?})",
      .                       val,
      .                       self.binders_passed,
      .                       val.has_escaping_bound_vars()
      .                   );
      .           
 43,275 ( 0.01%)          if self.binders_passed == 0 || !val.has_escaping_bound_vars() {
      .                       return val;
      .                   }
      .           
      .                   let result = ty::fold::shift_vars(self.tcx(), val, self.binders_passed);
      .                   debug!("shift_vars: shifted result = {:?}", result);
      .           
      .                   result
      .               }
      .           
      .               fn shift_region_through_binders(&self, region: ty::Region<'tcx>) -> ty::Region<'tcx> {
  5,015 ( 0.00%)          if self.binders_passed == 0 || !region.has_escaping_bound_vars() {
      .                       return region;
      .                   }
      .                   ty::fold::shift_region(self.tcx, region, self.binders_passed)
      .               }
      .           }
      .           
      .           /// Stores the user-given substs to reach some fully qualified path
      .           /// (e.g., `<T>::Item` or `<T as Trait>::Item`).
      .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
    689 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
      .           pub struct UserSubsts<'tcx> {
      .               /// The substitutions for the item as given by the user.
      .               pub substs: SubstsRef<'tcx>,
      .           
      .               /// The self type, in the case of a `<T>::Item` path (when applied
      .               /// to an inherent impl). See `UserSelfTy` below.
    391 ( 0.00%)      pub user_self_ty: Option<UserSelfTy<'tcx>>,
      .           }
      .           
      .           /// Specifies the user-given self type. In the case of a path that
      .           /// refers to a member in an inherent impl, this self type is
      .           /// sometimes needed to constrain the type parameters on the impl. For
      .           /// example, in this code:
      .           ///
      .           /// ```
-- line 689 ----------------------------------------
-- line 696 ----------------------------------------
      .           /// self type `Foo<u32>`. Then we can instantiate the parameters of
      .           /// the impl (with the substs from `UserSubsts`) and apply those to
      .           /// the self type, giving `Foo<?A>`. Finally, we unify that with
      .           /// the self type here, which contains `?A` to be `&'static u32`
      .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
      .           #[derive(HashStable, TypeFoldable, Lift)]
      .           pub struct UserSelfTy<'tcx> {
      .               pub impl_def_id: DefId,
     87 ( 0.00%)      pub self_ty: Ty<'tcx>,
      .           }

318,007 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 36 ----------------------------------------
      .           use rustc_session::parse::ParseSess;
      .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
      .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
      .           use tracing::debug;
      .           
      .           use std::ops::Range;
      .           use std::{cmp, mem, slice};
      .           
  1,427 ( 0.00%)  bitflags::bitflags! {
      .               struct Restrictions: u8 {
      .                   const STMT_EXPR         = 1 << 0;
      .                   const NO_STRUCT_LITERAL = 1 << 1;
      .                   const CONST_EXPR        = 1 << 2;
      .               }
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
      .                               $self.bump();
      .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
      .                           }
      .                       }
      .                   }
      .               };
      .           }
      .           
  3,976 ( 0.00%)  #[derive(Clone)]
      .           pub struct Parser<'a> {
    124 ( 0.00%)      pub sess: &'a ParseSess,
      .               /// The current token.
     92 ( 0.00%)      pub token: Token,
      .               /// The spacing for the current token
     65 ( 0.00%)      pub token_spacing: Spacing,
      .               /// The previous token.
    138 ( 0.00%)      pub prev_token: Token,
     84 ( 0.00%)      pub capture_cfg: bool,
    187 ( 0.00%)      restrictions: Restrictions,
    130 ( 0.00%)      expected_tokens: Vec<TokenType>,
      .               // Important: This must only be advanced from `next_tok`
      .               // to ensure that `token_cursor.num_next_calls` is updated properly
      .               token_cursor: TokenCursor,
    130 ( 0.00%)      desugar_doc_comments: bool,
      .               /// This field is used to keep track of how many left angle brackets we have seen. This is
      .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
      .               /// appropriately.
      .               ///
      .               /// See the comments in the `parse_path_segment` function for more details.
    130 ( 0.00%)      unmatched_angle_bracket_count: u32,
    195 ( 0.00%)      max_angle_bracket_count: u32,
      .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
      .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
      .               /// error.
     65 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
      .               last_unexpected_token_span: Option<Span>,
      .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
      .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
      .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
      .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
      .               subparser_name: Option<&'static str>,
      .               capture_state: CaptureState,
      .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
      .           /// the first macro inner attribute to invoke a proc-macro).
      .           /// When create a `TokenStream`, the inner attributes get inserted
      .           /// into the proper place in the token stream.
      .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
      .           
      .           /// Controls how we capture tokens. Capturing can be expensive,
      .           /// so we try to avoid performing capturing in cases where
      .           /// we will never need an `AttrAnnotatedTokenStream`
     65 ( 0.00%)  #[derive(Copy, Clone)]
      .           pub enum Capturing {
      .               /// We aren't performing any capturing - this is the default mode.
      .               No,
      .               /// We are capturing tokens
      .               Yes,
      .           }
      .           
    273 ( 0.00%)  #[derive(Clone)]
      .           struct CaptureState {
    260 ( 0.00%)      capturing: Capturing,
     65 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
      .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
      .           }
      .           
      .           impl<'a> Drop for Parser<'a> {
      .               fn drop(&mut self) {
  1,022 ( 0.00%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
      .               }
      .           }
      .           
 19,549 ( 0.00%)  #[derive(Clone)]
      .           struct TokenCursor {
      .               frame: TokenCursorFrame,
  4,444 ( 0.00%)      stack: Vec<TokenCursorFrame>,
      .               desugar_doc_comments: bool,
      .               // Counts the number of calls to `next` or `next_desugared`,
      .               // depending on whether `desugar_doc_comments` is set.
  1,424 ( 0.00%)      num_next_calls: usize,
      .               // During parsing, we may sometimes need to 'unglue' a
      .               // glued token into two component tokens
      .               // (e.g. '>>' into '>' and '>), so that the parser
      .               // can consume them one at a time. This process
      .               // bypasses the normal capturing mechanism
      .               // (e.g. `num_next_calls` will not be incremented),
      .               // since the 'unglued' tokens due not exist in
      .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
      .               // in `Option<Vec<u8>>` requires us to unglue
      .               // the trailing `>>` token. The `break_last_token`
      .               // field is used to track this token - it gets
      .               // appended to the captured stream when
      .               // we evaluate a `LazyTokenStream`
      .               break_last_token: bool,
      .           }
      .           
  8,898 ( 0.00%)  #[derive(Clone)]
      .           struct TokenCursorFrame {
  2,449 ( 0.00%)      delim: token::DelimToken,
      .               span: DelimSpan,
      .               open_delim: bool,
  4,898 ( 0.00%)      tree_cursor: tokenstream::Cursor,
      .               close_delim: bool,
      .           }
      .           
      .           impl TokenCursorFrame {
      .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
  1,095 ( 0.00%)          TokenCursorFrame {
      .                       delim,
      .                       span,
      .                       open_delim: false,
  2,038 ( 0.00%)              tree_cursor: tts.into_trees(),
      .                       close_delim: false,
      .                   }
      .               }
      .           }
      .           
      .           impl TokenCursor {
145,440 ( 0.04%)      fn next(&mut self) -> (Token, Spacing) {
      .                   loop {
 70,730 ( 0.02%)              let (tree, spacing) = if !self.frame.open_delim {
  1,518 ( 0.00%)                  self.frame.open_delim = true;
  7,590 ( 0.00%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
139,686 ( 0.04%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
      .                           tree
  6,420 ( 0.00%)              } else if !self.frame.close_delim {
  1,475 ( 0.00%)                  self.frame.close_delim = true;
  7,375 ( 0.00%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
  2,950 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
 19,175 ( 0.00%)                  self.frame = frame;
      .                           continue;
      .                       } else {
  4,680 ( 0.00%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
      .                       };
      .           
 27,112 ( 0.01%)              match tree {
      .                           TokenTree::Token(token) => {
 96,960 ( 0.02%)                      return (token, spacing);
      .                           }
      .                           TokenTree::Delimited(sp, delim, tts) => {
      .                               let frame = TokenCursorFrame::new(sp, delim, tts);
      .                               self.stack.push(mem::replace(&mut self.frame, frame));
      .                           }
      .                       }
      .                   }
 96,960 ( 0.02%)      }
      .           
 30,320 ( 0.01%)      fn next_desugared(&mut self) -> (Token, Spacing) {
  9,260 ( 0.00%)          let (data, attr_style, sp) = match self.next() {
    246 ( 0.00%)              (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
      .                           (data, attr_style, span)
      .                       }
 14,750 ( 0.00%)              tok => return tok,
      .                   };
      .           
      .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
      .                   // required to wrap the text.
      .                   let mut num_of_hashes = 0;
      .                   let mut count = 0;
 23,980 ( 0.01%)          for ch in data.as_str().chars() {
      .                       count = match ch {
      .                           '"' => 1,
      .                           '#' if count > 0 => count + 1,
      .                           _ => 0,
      .                       };
      .                       num_of_hashes = cmp::max(num_of_hashes, count);
      .                   }
      .           
    328 ( 0.00%)          let delim_span = DelimSpan::from_single(sp);
    410 ( 0.00%)          let body = TokenTree::Delimited(
      .                       delim_span,
      .                       token::Bracket,
    984 ( 0.00%)              [
    574 ( 0.00%)                  TokenTree::token(token::Ident(sym::doc, false), sp),
    328 ( 0.00%)                  TokenTree::token(token::Eq, sp),
    656 ( 0.00%)                  TokenTree::token(TokenKind::lit(token::StrRaw(num_of_hashes), data, None), sp),
      .                       ]
      .                       .iter()
      .                       .cloned()
      .                       .collect::<TokenStream>(),
     82 ( 0.00%)          );
      .           
      .                   self.stack.push(mem::replace(
      .                       &mut self.frame,
      .                       TokenCursorFrame::new(
      .                           delim_span,
      .                           token::NoDelim,
     82 ( 0.00%)                  if attr_style == AttrStyle::Inner {
      .                               [TokenTree::token(token::Pound, sp), TokenTree::token(token::Not, sp), body]
      .                                   .iter()
      .                                   .cloned()
      .                                   .collect::<TokenStream>()
      .                           } else {
    984 ( 0.00%)                      [TokenTree::token(token::Pound, sp), body]
      .                                   .iter()
      .                                   .cloned()
      .                                   .collect::<TokenStream>()
      .                           },
      .                       ),
      .                   ));
      .           
    246 ( 0.00%)          self.next()
 27,288 ( 0.01%)      }
      .           }
      .           
  6,200 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
      .           enum TokenType {
  4,960 ( 0.00%)      Token(TokenKind),
      .               Keyword(Symbol),
      .               Operator,
      .               Lifetime,
      .               Ident,
      .               Path,
      .               Type,
      .               Const,
      .           }
-- line 353 ----------------------------------------
-- line 378 ----------------------------------------
      .               /// The separator token.
      .               sep: Option<TokenKind>,
      .               /// `true` if a trailing separator is allowed.
      .               trailing_sep_allowed: bool,
      .           }
      .           
      .           impl SeqSep {
      .               fn trailing_allowed(t: TokenKind) -> SeqSep {
     36 ( 0.00%)          SeqSep { sep: Some(t), trailing_sep_allowed: true }
      .               }
      .           
      .               fn none() -> SeqSep {
      .                   SeqSep { sep: None, trailing_sep_allowed: false }
      .               }
      .           }
      .           
      .           pub enum FollowedByType {
      .               Yes,
      .               No,
      .           }
      .           
      .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
    352 ( 0.00%)      Some(match token.kind {
    704 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
    704 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
    704 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
      .                   token::DocComment(..) => "doc comment",
      .                   _ => return None,
      .               })
      .           }
      .           
  1,232 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
    352 ( 0.00%)      let token_str = pprust::token_to_string(token);
      .               match token_descr_opt(token) {
      .                   Some(prefix) => format!("{} `{}`", prefix, token_str),
  1,232 ( 0.00%)          _ => format!("`{}`", token_str),
      .               }
    880 ( 0.00%)  }
      .           
      .           impl<'a> Parser<'a> {
  3,066 ( 0.00%)      pub fn new(
      .                   sess: &'a ParseSess,
      .                   tokens: TokenStream,
      .                   desugar_doc_comments: bool,
      .                   subparser_name: Option<&'static str>,
      .               ) -> Self {
    219 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
    438 ( 0.00%)          start_frame.open_delim = true;
      .                   start_frame.close_delim = true;
      .           
  6,789 ( 0.00%)          let mut parser = Parser {
      .                       sess,
    219 ( 0.00%)              token: Token::dummy(),
      .                       token_spacing: Spacing::Alone,
    219 ( 0.00%)              prev_token: Token::dummy(),
      .                       capture_cfg: false,
      .                       restrictions: Restrictions::empty(),
      .                       expected_tokens: Vec::new(),
      .                       token_cursor: TokenCursor {
  1,314 ( 0.00%)                  frame: start_frame,
      .                           stack: Vec::new(),
      .                           num_next_calls: 0,
      .                           desugar_doc_comments,
      .                           break_last_token: false,
      .                       },
      .                       desugar_doc_comments,
      .                       unmatched_angle_bracket_count: 0,
      .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
      .                           capturing: Capturing::No,
      .                           replace_ranges: Vec::new(),
      .                           inner_attr_ranges: Default::default(),
      .                       },
      .                       current_closure: None,
      .                   };
      .           
      .                   // Make parser point to the first token.
    438 ( 0.00%)          parser.bump();
      .           
      .                   parser
  1,971 ( 0.00%)      }
      .           
      .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
      .                   loop {
 68,676 ( 0.02%)              let (mut next, spacing) = if self.desugar_doc_comments {
 12,128 ( 0.00%)                  self.token_cursor.next_desugared()
      .                       } else {
 25,242 ( 0.01%)                  self.token_cursor.next()
      .                       };
 45,784 ( 0.01%)              self.token_cursor.num_next_calls += 1;
      .                       // We've retrieved an token from the underlying
      .                       // cursor, so we no longer need to worry about
      .                       // an unglued token. See `break_and_eat` for more details
 11,446 ( 0.00%)              self.token_cursor.break_last_token = false;
 45,784 ( 0.01%)              if next.span.is_dummy() {
      .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
    928 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
      .                       }
 38,763 ( 0.01%)              if matches!(
 22,892 ( 0.01%)                  next.kind,
      .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
      .                       ) {
      .                           continue;
      .                       }
 45,128 ( 0.01%)              return (next, spacing);
      .                   }
      .               }
      .           
      .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
      .                   match self.expect_one_of(&[], &[]) {
      .                       Err(e) => Err(e),
      .                       // We can get `Ok(true)` from `recover_closing_delimiter`
      .                       // which is called in `expected_one_of_not_found`.
      .                       Ok(_) => FatalError.raise(),
      .                   }
      .               }
      .           
      .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
  9,000 ( 0.00%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
  1,000 ( 0.00%)          if self.expected_tokens.is_empty() {
  1,026 ( 0.00%)              if self.token == *t {
    855 ( 0.00%)                  self.bump();
      .                           Ok(false)
      .                       } else {
      .                           self.unexpected_try_recover(t)
      .                       }
      .                   } else {
  9,948 ( 0.00%)              self.expect_one_of(slice::from_ref(t), &[])
      .                   }
 15,000 ( 0.00%)      }
      .           
      .               /// Expect next token to be edible or inedible token.  If edible,
      .               /// then consume it; if inedible, then return without consuming
      .               /// anything.  Signal a fatal error if next token is unexpected.
 11,976 ( 0.00%)      pub fn expect_one_of(
      .                   &mut self,
      .                   edible: &[TokenKind],
      .                   inedible: &[TokenKind],
      .               ) -> PResult<'a, bool /* recovered */> {
  1,996 ( 0.00%)          if edible.contains(&self.token.kind) {
  2,553 ( 0.00%)              self.bump();
      .                       Ok(false)
      .                   } else if inedible.contains(&self.token.kind) {
      .                       // leave it in the input
      .                       Ok(false)
      .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
      .                       FatalError.raise();
      .                   } else {
      .                       self.expected_one_of_not_found(edible, inedible)
      .                   }
 14,970 ( 0.00%)      }
      .           
      .               // Public for rustfmt usage.
      .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
  7,499 ( 0.00%)          self.parse_ident_common(true)
      .               }
      .           
      .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
  5,853 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
      .                       TokenKind::DocComment(..) => {
      .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
      .                       }
      .                       _ => self.expected_ident_found(),
      .                   })
      .               }
      .           
 13,531 ( 0.00%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
  1,933 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
 11,598 ( 0.00%)          if !is_raw && ident.is_reserved() {
      .                       let mut err = self.expected_ident_found();
      .                       if recover {
      .                           err.emit();
      .                       } else {
      .                           return Err(err);
      .                       }
      .                   }
  7,732 ( 0.00%)          self.bump();
      .                   Ok(ident)
 19,330 ( 0.00%)      }
      .           
      .               /// Checks if the next token is `tok`, and returns `true` if so.
      .               ///
      .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
      .               /// encountered.
147,602 ( 0.04%)      fn check(&mut self, tok: &TokenKind) -> bool {
 64,670 ( 0.02%)          let is_present = self.token == *tok;
 43,570 ( 0.01%)          if !is_present {
 91,711 ( 0.02%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
      .                   }
      .                   is_present
147,602 ( 0.04%)      }
      .           
      .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
     28 ( 0.00%)      pub fn eat(&mut self, tok: &TokenKind) -> bool {
 32,945 ( 0.01%)          let is_present = self.check(tok);
 22,027 ( 0.01%)          if is_present {
  4,494 ( 0.00%)              self.bump()
      .                   }
      .                   is_present
     35 ( 0.00%)      }
      .           
      .               /// If the next token is the given keyword, returns `true` without eating it.
      .               /// An expectation is also added for diagnostics purposes.
  5,830 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
  1,725 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
 44,313 ( 0.01%)          self.token.is_keyword(kw)
      .               }
      .           
      .               /// If the next token is the given keyword, eats it and returns `true`.
      .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
      .               // Public for rustfmt usage.
  9,305 ( 0.00%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
  8,852 ( 0.00%)          if self.check_keyword(kw) {
  1,194 ( 0.00%)              self.bump();
      .                       true
      .                   } else {
      .                       false
      .                   }
  9,305 ( 0.00%)      }
      .           
      .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
  2,176 ( 0.00%)          if self.token.is_keyword(kw) {
    448 ( 0.00%)              self.bump();
      .                       true
      .                   } else {
      .                       false
      .                   }
      .               }
      .           
      .               /// If the given word is not a keyword, signals an error.
      .               /// If the next token is not the given word, signals an error.
      .               /// Otherwise, eats it.
    395 ( 0.00%)      fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
      .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
    316 ( 0.00%)      }
      .           
      .               /// Is the given keyword `kw` followed by a non-reserved identifier?
  5,432 ( 0.00%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
  2,716 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
  6,111 ( 0.00%)      }
      .           
 10,080 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
  3,680 ( 0.00%)          if ok {
      .                       true
      .                   } else {
  2,360 ( 0.00%)              self.expected_tokens.push(typ);
      .                       false
      .                   }
 10,080 ( 0.00%)      }
      .           
      .               fn check_ident(&mut self) -> bool {
  1,271 ( 0.00%)          self.check_or_expected(self.token.is_ident(), TokenType::Ident)
      .               }
      .           
  2,660 ( 0.00%)      fn check_path(&mut self) -> bool {
  7,423 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
  3,325 ( 0.00%)      }
      .           
      .               fn check_type(&mut self) -> bool {
  1,228 ( 0.00%)          self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
      .               }
      .           
      .               fn check_const_arg(&mut self) -> bool {
  1,024 ( 0.00%)          self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
      .               }
      .           
    963 ( 0.00%)      fn check_inline_const(&self, dist: usize) -> bool {
    535 ( 0.00%)          self.is_keyword_ahead(dist, &[kw::Const])
      .                       && self.look_ahead(dist + 1, |t| match t.kind {
      .                           token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),
      .                           token::OpenDelim(DelimToken::Brace) => true,
      .                           _ => false,
      .                       })
    963 ( 0.00%)      }
      .           
      .               /// Checks to see if the next token is either `+` or `+=`.
      .               /// Otherwise returns `false`.
      .               fn check_plus(&mut self) -> bool {
  1,424 ( 0.00%)          self.check_or_expected(
    712 ( 0.00%)              self.token.is_like_plus(),
    712 ( 0.00%)              TokenType::Token(token::BinOp(token::Plus)),
      .                   )
      .               }
      .           
      .               /// Eats the expected token if it's present possibly breaking
      .               /// compound tokens like multi-character operators in process.
      .               /// Returns `true` if the token was eaten.
 16,284 ( 0.00%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
  9,499 ( 0.00%)          if self.token.kind == expected {
  1,050 ( 0.00%)              self.bump();
      .                       return true;
      .                   }
  4,160 ( 0.00%)          match self.token.kind.break_two_token_op() {
     90 ( 0.00%)              Some((first, second)) if first == expected => {
     48 ( 0.00%)                  let first_span = self.sess.source_map().start_point(self.token.span);
     60 ( 0.00%)                  let second_span = self.token.span.with_lo(first_span.hi());
    108 ( 0.00%)                  self.token = Token::new(first, first_span);
      .                           // Keep track of this token - if we end token capturing now,
      .                           // we'll want to append this token to the captured stream.
      .                           //
      .                           // If we consume any additional tokens, then this token
      .                           // is not needed (we'll capture the entire 'glued' token),
      .                           // and `next_tok` will set this field to `None`
     12 ( 0.00%)                  self.token_cursor.break_last_token = true;
      .                           // Use the spacing of the glued token as the spacing
      .                           // of the unglued second token.
    168 ( 0.00%)                  self.bump_with((Token::new(second, second_span), self.token_spacing));
      .                           true
      .                       }
      .                       _ => {
  2,460 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
      .                           false
      .                       }
      .                   }
 15,495 ( 0.00%)      }
      .           
      .               /// Eats `+` possibly breaking tokens like `+=` in process.
      .               fn eat_plus(&mut self) -> bool {
    788 ( 0.00%)          self.break_and_eat(token::BinOp(token::Plus))
      .               }
      .           
      .               /// Eats `&` possibly breaking tokens like `&&` in process.
      .               /// Signals an error if `&` is not eaten.
      .               fn expect_and(&mut self) -> PResult<'a, ()> {
    534 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `|` possibly breaking tokens like `||` in process.
      .               /// Signals an error if `|` was not eaten.
      .               fn expect_or(&mut self) -> PResult<'a, ()> {
     72 ( 0.00%)          if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `<` possibly breaking tokens like `<<` in process.
    854 ( 0.00%)      fn eat_lt(&mut self) -> bool {
  2,958 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
  1,902 ( 0.00%)          if ate {
      .                       // See doc comment for `unmatched_angle_bracket_count`.
    664 ( 0.00%)              self.unmatched_angle_bracket_count += 1;
    720 ( 0.00%)              self.max_angle_bracket_count += 1;
      .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
      .                   }
      .                   ate
    854 ( 0.00%)      }
      .           
      .               /// Eats `<` possibly breaking tokens like `<<` in process.
      .               /// Signals an error if `<` was not eaten.
      .               fn expect_lt(&mut self) -> PResult<'a, ()> {
      .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `>` possibly breaking tokens like `>>` in process.
      .               /// Signals an error if `>` was not eaten.
      .               fn expect_gt(&mut self) -> PResult<'a, ()> {
    996 ( 0.00%)          if self.break_and_eat(token::Gt) {
      .                       // See doc comment for `unmatched_angle_bracket_count`.
    498 ( 0.00%)              if self.unmatched_angle_bracket_count > 0 {
    332 ( 0.00%)                  self.unmatched_angle_bracket_count -= 1;
      .                           debug!("expect_gt: (decrement) count={:?}", self.unmatched_angle_bracket_count);
      .                       }
      .                       Ok(())
      .                   } else {
      .                       self.unexpected()
      .                   }
      .               }
      .           
      .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
      .                   kets.iter().any(|k| match expect {
  2,337 ( 0.00%)              TokenExpectType::Expect => self.check(k),
    180 ( 0.00%)              TokenExpectType::NoExpect => self.token == **k,
      .                   })
      .               }
      .           
      .               fn parse_seq_to_before_tokens<T>(
      .                   &mut self,
      .                   kets: &[&TokenKind],
      .                   sep: SeqSep,
      .                   expect: TokenExpectType,
-- line 759 ----------------------------------------
-- line 761 ----------------------------------------
      .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
      .                   let mut first = true;
      .                   let mut recovered = false;
      .                   let mut trailing = false;
      .                   let mut v = vec![];
      .                   let unclosed_delims = !self.unclosed_delims.is_empty();
      .           
      .                   while !self.expect_any_with_type(kets, expect) {
  1,922 ( 0.00%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
      .                           break;
      .                       }
  1,469 ( 0.00%)              if let Some(ref t) = sep.sep {
  2,037 ( 0.00%)                  if first {
      .                               first = false;
      .                           } else {
    581 ( 0.00%)                      match self.expect(t) {
      .                                   Ok(false) => {
      .                                       self.current_closure.take();
      .                                   }
      .                                   Ok(true) => {
      .                                       self.current_closure.take();
      .                                       recovered = true;
      .                                       break;
      .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
      .                                               e.cancel();
      .                                               break;
      .                                           }
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
    712 ( 0.00%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
      .                           trailing = true;
      .                           break;
      .                       }
      .           
    666 ( 0.00%)              let t = f(self)?;
  1,058 ( 0.00%)              v.push(t);
      .                   }
      .           
  1,528 ( 0.00%)          Ok((v, trailing, recovered))
      .               }
      .           
      .               fn recover_missing_braces_around_closure_body(
      .                   &mut self,
      .                   closure_spans: ClosureSpans,
      .                   mut expect_err: DiagnosticBuilder<'_>,
      .               ) -> PResult<'a, ()> {
      .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
      .               fn parse_seq_to_before_end<T>(
      .                   &mut self,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
  1,756 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
      .               }
      .           
      .               /// Parses a sequence, including the closing delimiter. The function
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
  1,740 ( 0.00%)      fn parse_seq_to_end<T>(
      .                   &mut self,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
    928 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
    552 ( 0.00%)          if !recovered {
      .                       self.eat(ket);
      .                   }
  2,305 ( 0.00%)          Ok((val, trailing))
  1,392 ( 0.00%)      }
      .           
      .               /// Parses a sequence, including the closing delimiter. The function
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
      .               fn parse_unspanned_seq<T>(
      .                   &mut self,
      .                   bra: &TokenKind,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
    772 ( 0.00%)          self.expect(bra)?;
  1,392 ( 0.00%)          self.parse_seq_to_end(ket, sep, f)
      .               }
      .           
      .               fn parse_delim_comma_seq<T>(
      .                   &mut self,
      .                   delim: DelimToken,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
      .                   self.parse_unspanned_seq(
    358 ( 0.00%)              &token::OpenDelim(delim),
    543 ( 0.00%)              &token::CloseDelim(delim),
      .                       SeqSep::trailing_allowed(token::Comma),
      .                       f,
      .                   )
      .               }
      .           
      .               fn parse_paren_comma_seq<T>(
      .                   &mut self,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
      .                   self.parse_delim_comma_seq(token::Paren, f)
      .               }
      .           
      .               /// Advance the parser by one token using provided token as the next one.
146,822 ( 0.04%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
      .                   // Bumping after EOF is a bad sign, usually an infinite loop.
 67,764 ( 0.02%)          if self.prev_token.kind == TokenKind::Eof {
      .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
      .                       self.span_bug(self.token.span, msg);
      .                   }
      .           
      .                   // Update the current and previous tokens.
 45,176 ( 0.01%)          self.prev_token = mem::replace(&mut self.token, next_token);
 11,294 ( 0.00%)          self.token_spacing = next_spacing;
      .           
      .                   // Diagnostics.
 11,294 ( 0.00%)          self.expected_tokens.clear();
      .               }
      .           
      .               /// Advance the parser by one token.
 90,256 ( 0.02%)      pub fn bump(&mut self) {
 45,128 ( 0.01%)          let next_token = self.next_tok(self.token.span);
 67,692 ( 0.02%)          self.bump_with(next_token);
 90,256 ( 0.02%)      }
      .           
      .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
      .               /// When `dist == 0` then the current token is looked at.
     48 ( 0.00%)      pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
    754 ( 0.00%)          if dist == 0 {
    239 ( 0.00%)              return looker(&self.token);
      .                   }
      .           
  2,387 ( 0.00%)          let frame = &self.token_cursor.frame;
  2,618 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
      .                       let all_normal = (0..dist).all(|i| {
  6,479 ( 0.00%)                  let token = frame.tree_cursor.look_ahead(i);
  8,346 ( 0.00%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
      .                       });
      .                       if all_normal {
 10,633 ( 0.00%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
  3,456 ( 0.00%)                      Some(tree) => match tree {
  1,578 ( 0.00%)                          TokenTree::Token(token) => looker(token),
      .                                   TokenTree::Delimited(dspan, delim, _) => {
  1,199 ( 0.00%)                              looker(&Token::new(token::OpenDelim(*delim), dspan.open))
      .                                   }
      .                               },
  2,476 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
      .                           };
      .                       }
      .                   }
      .           
      .                   let mut cursor = self.token_cursor.clone();
      .                   let mut i = 0;
    583 ( 0.00%)          let mut token = Token::dummy();
  1,100 ( 0.00%)          while i < dist {
  4,640 ( 0.00%)              token = cursor.next().0;
  1,982 ( 0.00%)              if matches!(
  1,184 ( 0.00%)                  token.kind,
      .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
      .                       ) {
      .                           continue;
      .                       }
    560 ( 0.00%)              i += 1;
      .                   }
      3 ( 0.00%)          return looker(&token);
     54 ( 0.00%)      }
      .           
      .               /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.
  2,637 ( 0.00%)      fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {
    728 ( 0.00%)          self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))
  2,637 ( 0.00%)      }
      .           
      .               /// Parses asyncness: `async` or nothing.
      .               fn parse_asyncness(&mut self) -> Async {
      .                   if self.eat_keyword(kw::Async) {
      .                       let span = self.prev_token.uninterpolated_span();
      .                       Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }
      .                   } else {
      .                       Async::No
      .                   }
      .               }
      .           
      .               /// Parses unsafety: `unsafe` or nothing.
    376 ( 0.00%)      fn parse_unsafety(&mut self) -> Unsafe {
      .                   if self.eat_keyword(kw::Unsafe) {
     10 ( 0.00%)              Unsafe::Yes(self.prev_token.uninterpolated_span())
      .                   } else {
      .                       Unsafe::No
      .                   }
  1,504 ( 0.00%)      }
      .           
      .               /// Parses constness: `const` or nothing.
  2,696 ( 0.00%)      fn parse_constness(&mut self) -> Const {
      .                   // Avoid const blocks to be parsed as const items
    855 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
      .                       && self.eat_keyword(kw::Const)
      .                   {
     25 ( 0.00%)              Const::Yes(self.prev_token.uninterpolated_span())
      .                   } else {
      .                       Const::No
      .                   }
  4,718 ( 0.00%)      }
      .           
      .               /// Parses inline const expressions.
      .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
      .                   if pat {
      .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
      .                   } else {
      .                       self.sess.gated_spans.gate(sym::inline_const, span);
      .                   }
-- line 1104 ----------------------------------------
-- line 1108 ----------------------------------------
      .                       id: DUMMY_NODE_ID,
      .                       value: self.mk_expr(blk.span, ExprKind::Block(blk, None), AttrVec::new()),
      .                   };
      .                   let blk_span = anon_const.value.span;
      .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
      .               }
      .           
      .               /// Parses mutability (`mut` or nothing).
     36 ( 0.00%)      fn parse_mutability(&mut self) -> Mutability {
      .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
    233 ( 0.00%)      }
      .           
      .               /// Possibly parses mutability (`const` or `mut`).
     30 ( 0.00%)      fn parse_const_or_mut(&mut self) -> Option<Mutability> {
      .                   if self.eat_keyword(kw::Mut) {
      .                       Some(Mutability::Mut)
      .                   } else if self.eat_keyword(kw::Const) {
      .                       Some(Mutability::Not)
      .                   } else {
      .                       None
      .                   }
     30 ( 0.00%)      }
      .           
      .               fn parse_field_name(&mut self) -> PResult<'a, Ident> {
     52 ( 0.00%)          if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) = self.token.kind
      .                   {
      .                       self.expect_no_suffix(self.token.span, "a tuple index", suffix);
      .                       self.bump();
      .                       Ok(Ident::new(symbol, self.prev_token.span))
      .                   } else {
     78 ( 0.00%)              self.parse_ident_common(true)
      .                   }
      .               }
      .           
      .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
    124 ( 0.00%)          self.parse_mac_args_common(true).map(P)
      .               }
      .           
      .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
    552 ( 0.00%)          self.parse_mac_args_common(false)
      .               }
      .           
  2,097 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
  1,864 ( 0.00%)          Ok(
  1,621 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
    342 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Bracket))
    342 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Brace))
      .                       {
    544 ( 0.00%)                  match self.parse_token_tree() {
    680 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
      .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
      .                               {
    272 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
      .                               }
      .                               _ => unreachable!(),
      .                           }
    194 ( 0.00%)              } else if !delimited_only {
      .                           if self.eat(&token::Eq) {
     83 ( 0.00%)                      let eq_span = self.prev_token.span;
      .           
      .                               // Collect tokens because they are used during lowering to HIR.
     83 ( 0.00%)                      let expr = self.parse_expr_force_collect()?;
     83 ( 0.00%)                      let span = expr.span;
      .           
    415 ( 0.00%)                      let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));
    747 ( 0.00%)                      MacArgs::Eq(eq_span, Token::new(token_kind, span))
      .                           } else {
      .                               MacArgs::Empty
      .                           }
      .                       } else {
      .                           return self.unexpected();
      .                       },
      .                   )
  1,631 ( 0.00%)      }
      .           
      .               fn parse_or_use_outer_attributes(
      .                   &mut self,
      .                   already_parsed_attrs: Option<AttrWrapper>,
      .               ) -> PResult<'a, AttrWrapper> {
  1,293 ( 0.00%)          if let Some(attrs) = already_parsed_attrs {
      .                       Ok(attrs)
      .                   } else {
    726 ( 0.00%)              self.parse_outer_attributes()
      .                   }
      .               }
      .           
      .               /// Parses a single token tree from the input.
  1,720 ( 0.00%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
    765 ( 0.00%)          match self.token.kind {
      .                       token::OpenDelim(..) => {
      .                           let depth = self.token_cursor.stack.len();
      .           
      .                           // We keep advancing the token cursor until we hit
      .                           // the matching `CloseDelim` token.
  9,944 ( 0.00%)                  while !(depth == self.token_cursor.stack.len()
      .                               && matches!(self.token.kind, token::CloseDelim(_)))
      .                           {
      .                               // Advance one token at a time, so `TokenCursor::next()`
      .                               // can capture these tokens if necessary.
  7,082 ( 0.00%)                      self.bump();
      .                           }
      .                           // We are still inside the frame corresponding
      .                           // to the delimited stream we captured, so grab
      .                           // the tokens from this frame.
      .                           let frame = &self.token_cursor.frame;
    370 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
    370 ( 0.00%)                  let span = frame.span;
    185 ( 0.00%)                  let delim = frame.delim;
      .                           // Consume close delimiter
    370 ( 0.00%)                  self.bump();
    925 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
      .                       }
      .                       token::CloseDelim(_) | token::Eof => unreachable!(),
      .                       _ => {
     60 ( 0.00%)                  self.bump();
    150 ( 0.00%)                  TokenTree::Token(self.prev_token.clone())
      .                       }
      .                   }
  1,505 ( 0.00%)      }
      .           
      .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
      .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
      .                   let mut tts = Vec::new();
      .                   while self.token != token::Eof {
      .                       tts.push(self.parse_token_tree());
      .                   }
      .                   Ok(tts)
-- line 1234 ----------------------------------------
-- line 1244 ----------------------------------------
      .                   }
      .                   TokenStream::new(result)
      .               }
      .           
      .               /// Evaluates the closure with restrictions in place.
      .               ///
      .               /// Afters the closure is evaluated, restrictions are reset.
      .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
    553 ( 0.00%)          let old = self.restrictions;
    714 ( 0.00%)          self.restrictions = res;
      .                   let res = f(self);
    670 ( 0.00%)          self.restrictions = old;
      .                   res
      .               }
      .           
  3,936 ( 0.00%)      fn is_crate_vis(&self) -> bool {
  2,460 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
  4,428 ( 0.00%)      }
      .           
      .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
      .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
      .               /// If the following element can't be a tuple (i.e., it's a function definition), then
      .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
      .               /// so emit a proper diagnostic.
      .               // Public for rustfmt usage.
  3,670 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
    734 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
      .           
    367 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
  1,468 ( 0.00%)          if self.is_crate_vis() {
      .                       self.bump(); // `crate`
      .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
      .                       return Ok(Visibility {
      .                           span: self.prev_token.span,
      .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
      .                           tokens: None,
      .                       });
      .                   }
      .           
      .                   if !self.eat_keyword(kw::Pub) {
      .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
      .                       // keyword to grab a span from for inherited visibility; an empty span at the
      .                       // beginning of the current token would seem to be the "Schelling span".
    288 ( 0.00%)              return Ok(Visibility {
    864 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
      .                           kind: VisibilityKind::Inherited,
      .                           tokens: None,
      .                       });
      .                   }
     79 ( 0.00%)          let lo = self.prev_token.span;
      .           
    395 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
      .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
      .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
      .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
      .                       // by the following tokens.
    152 ( 0.00%)              if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
      .                       // account for `pub(crate::foo)`
      .                       {
      .                           // Parse `pub(crate)`.
     39 ( 0.00%)                  self.bump(); // `(`
     26 ( 0.00%)                  self.bump(); // `crate`
     39 ( 0.00%)                  self.expect(&token::CloseDelim(token::Paren))?; // `)`
     13 ( 0.00%)                  let vis = VisibilityKind::Crate(CrateSugar::PubCrate);
      .                           return Ok(Visibility {
     39 ( 0.00%)                      span: lo.to(self.prev_token.span),
      .                               kind: vis,
      .                               tokens: None,
      .                           });
     35 ( 0.00%)              } else if self.is_keyword_ahead(1, &[kw::In]) {
      .                           // Parse `pub(in path)`.
      .                           self.bump(); // `(`
      .                           self.bump(); // `in`
      .                           let path = self.parse_path(PathStyle::Mod)?; // `path`
      .                           self.expect(&token::CloseDelim(token::Paren))?; // `)`
      .                           let vis = VisibilityKind::Restricted { path: P(path), id: ast::DUMMY_NODE_ID };
      .                           return Ok(Visibility {
      .                               span: lo.to(self.prev_token.span),
      .                               kind: vis,
      .                               tokens: None,
      .                           });
     20 ( 0.00%)              } else if self.look_ahead(2, |t| t == &token::CloseDelim(token::Paren))
     25 ( 0.00%)                  && self.is_keyword_ahead(1, &[kw::Super, kw::SelfLower])
      .                       {
      .                           // Parse `pub(self)` or `pub(super)`.
     15 ( 0.00%)                  self.bump(); // `(`
      5 ( 0.00%)                  let path = self.parse_path(PathStyle::Mod)?; // `super`/`self`
     15 ( 0.00%)                  self.expect(&token::CloseDelim(token::Paren))?; // `)`
     55 ( 0.00%)                  let vis = VisibilityKind::Restricted { path: P(path), id: ast::DUMMY_NODE_ID };
      .                           return Ok(Visibility {
     20 ( 0.00%)                      span: lo.to(self.prev_token.span),
      .                               kind: vis,
      .                               tokens: None,
      .                           });
      .                       } else if let FollowedByType::No = fbt {
      .                           // Provide this diagnostic if a type cannot follow;
      .                           // in particular, if this is not a tuple struct.
      .                           self.recover_incorrect_vis_restriction()?;
      .                           // Emit diagnostic, but continue with public visibility.
      .                       }
      .                   }
      .           
    183 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
  3,303 ( 0.00%)      }
      .           
      .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
      .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
      .                   self.bump(); // `(`
      .                   let path = self.parse_path(PathStyle::Mod)?;
      .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
      .           
      .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1370 ----------------------------------------
      .                       )
      .                       .emit();
      .           
      .                   Ok(())
      .               }
      .           
      .               /// Parses `extern string_literal?`.
      .               fn parse_extern(&mut self) -> Extern {
    118 ( 0.00%)          if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }
      .               }
      .           
      .               /// Parses a string literal as an ABI spec.
      .               fn parse_abi(&mut self) -> Option<StrLit> {
      .                   match self.parse_str_lit() {
      .                       Ok(str_lit) => Some(str_lit),
      .                       Err(Some(lit)) => match lit.kind {
      .                           ast::LitKind::Err(_) => None,
-- line 1386 ----------------------------------------
-- line 1395 ----------------------------------------
      .                                   .emit();
      .                               None
      .                           }
      .                       },
      .                       Err(None) => None,
      .                   }
      .               }
      .           
    880 ( 0.00%)      pub fn collect_tokens_no_attrs<R: AstLike>(
      .                   &mut self,
      .                   f: impl FnOnce(&mut Self) -> PResult<'a, R>,
      .               ) -> PResult<'a, R> {
      .                   // The only reason to call `collect_tokens_no_attrs` is if you want tokens, so use
      .                   // `ForceCollect::Yes`
      .                   self.collect_tokens_trailing_token(
      .                       AttrWrapper::empty(),
      .                       ForceCollect::Yes,
     88 ( 0.00%)              |this, _attrs| Ok((f(this)?, TrailingToken::None)),
      .                   )
    880 ( 0.00%)      }
      .           
      .               /// `::{` or `::*`
 12,976 ( 0.00%)      fn is_import_coupler(&mut self) -> bool {
  6,488 ( 0.00%)          self.check(&token::ModSep)
      .                       && self.look_ahead(1, |t| {
  2,280 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
      .                       })
 13,617 ( 0.00%)      }
      .           
      .               pub fn clear_expected_tokens(&mut self) {
      .                   self.expected_tokens.clear();
      .               }
      .           }
      .           
      .           crate fn make_unclosed_delims_error(
      .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
      .                   err.span_label(sp, "closing delimiter possibly meant for this");
      .               }
      .               if let Some(sp) = unmatched.unclosed_span {
      .                   err.span_label(sp, "unclosed delimiter");
      .               }
      .               Some(err)
      .           }
      .           
  2,272 ( 0.00%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
  1,136 ( 0.00%)      *sess.reached_eof.borrow_mut() |=
      .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
  1,136 ( 0.00%)      for unmatched in unclosed_delims.drain(..) {
      .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
      .                       e.emit();
      .                   }
      .               }
  2,272 ( 0.00%)  }
      .           
      .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
      .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
      .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
      .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
      .           /// `AttrAnnotatedTokenTree::Delimited` tokens
      .           #[derive(Debug, Clone)]
      .           pub enum FlatToken {
-- line 1474 ----------------------------------------

 73,649 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 157 ----------------------------------------
      .               pub fn opt_fn_def_id(self) -> Option<DefId> {
      .                   if let Res::Def(DefKind::Fn, def_id) = self.res { Some(def_id) } else { None }
      .               }
      .           }
      .           
      .           /// The "header" of an impl is everything outside the body: a Self type, a trait
      .           /// ref (in the case of a trait impl), and a set of predicates (from the
      .           /// bounds / where-clauses).
    734 ( 0.00%)  #[derive(Clone, Debug, TypeFoldable)]
      .           pub struct ImplHeader<'tcx> {
      .               pub impl_def_id: DefId,
      .               pub self_ty: Ty<'tcx>,
      .               pub trait_ref: Option<TraitRef<'tcx>>,
      .               pub predicates: Vec<Predicate<'tcx>>,
      .           }
      .           
      .           #[derive(
      .               Copy,
      .               Clone,
 14,500 ( 0.00%)      PartialEq,
      .               Eq,
      .               Hash,
      .               TyEncodable,
 19,112 ( 0.00%)      TyDecodable,
      .               HashStable,
      .               Debug,
      .               TypeFoldable
      .           )]
      .           pub enum ImplPolarity {
      .               /// `impl Trait for Type`
      .               Positive,
      .               /// `impl !Trait for Type`
-- line 188 ----------------------------------------
-- line 210 ----------------------------------------
      .                   match self {
      .                       Self::Positive => f.write_str("positive"),
      .                       Self::Negative => f.write_str("negative"),
      .                       Self::Reservation => f.write_str("reservation"),
      .                   }
      .               }
      .           }
      .           
164,619 ( 0.04%)  #[derive(Clone, Debug, PartialEq, Eq, Copy, Hash, TyEncodable, TyDecodable, HashStable)]
      .           pub enum Visibility {
      .               /// Visible everywhere (including in other crates).
      .               Public,
      .               /// Visible only in the given crate-local module.
      .               Restricted(DefId),
      .               /// Not visible anywhere in the local crate. This is the visibility of private external items.
      .               Invisible,
      .           }
      .           
 33,200 ( 0.01%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable, TyEncodable, TyDecodable)]
      .           pub enum BoundConstness {
      .               /// `T: Trait`
      .               NotConst,
      .               /// `T: ~const Trait`
      .               ///
      .               /// Requires resolving to const only when we are in a const context.
      .               ConstIfConst,
      .           }
      .           
      .           impl BoundConstness {
      .               /// Reduce `self` and `constness` to two possible combined states instead of four.
  2,674 ( 0.00%)      pub fn and(&mut self, constness: hir::Constness) -> hir::Constness {
  4,011 ( 0.00%)          match (constness, self) {
      .                       (hir::Constness::Const, BoundConstness::ConstIfConst) => hir::Constness::Const,
      .                       (_, this) => {
  6,788 ( 0.00%)                  *this = BoundConstness::NotConst;
      .                           hir::Constness::NotConst
      .                       }
      .                   }
  1,337 ( 0.00%)      }
      .           }
      .           
      .           impl fmt::Display for BoundConstness {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   match self {
      .                       Self::NotConst => f.write_str("normal"),
      .                       Self::ConstIfConst => f.write_str("`~const`"),
      .                   }
-- line 256 ----------------------------------------
-- line 279 ----------------------------------------
      .           pub trait DefIdTree: Copy {
      .               fn parent(self, id: DefId) -> Option<DefId>;
      .           
      .               fn is_descendant_of(self, mut descendant: DefId, ancestor: DefId) -> bool {
      .                   if descendant.krate != ancestor.krate {
      .                       return false;
      .                   }
      .           
  2,597 ( 0.00%)          while descendant != ancestor {
  3,355 ( 0.00%)              match self.parent(descendant) {
      .                           Some(parent) => descendant = parent,
      .                           None => return false,
      .                       }
      .                   }
      .                   true
      .               }
      .           }
      .           
      .           impl<'tcx> DefIdTree for TyCtxt<'tcx> {
  1,678 ( 0.00%)      fn parent(self, id: DefId) -> Option<DefId> {
      .                   self.def_key(id).parent.map(|index| DefId { index, ..id })
  2,517 ( 0.00%)      }
      .           }
      .           
      .           impl Visibility {
     92 ( 0.00%)      pub fn from_hir(visibility: &hir::Visibility<'_>, id: hir::HirId, tcx: TyCtxt<'_>) -> Self {
    276 ( 0.00%)          match visibility.node {
      .                       hir::VisibilityKind::Public => Visibility::Public,
      .                       hir::VisibilityKind::Crate(_) => Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)),
      .                       hir::VisibilityKind::Restricted { ref path, .. } => match path.res {
      .                           // If there is no resolution, `resolve` will have already reported an error, so
      .                           // assume that the visibility is public to avoid reporting more privacy errors.
      .                           Res::Err => Visibility::Public,
      .                           def => Visibility::Restricted(def.def_id()),
      .                       },
      .                       hir::VisibilityKind::Inherited => {
    184 ( 0.00%)                  Visibility::Restricted(tcx.parent_module(id).to_def_id())
      .                       }
      .                   }
     92 ( 0.00%)      }
      .           
      .               /// Returns `true` if an item with this visibility is accessible from the given block.
 11,673 ( 0.00%)      pub fn is_accessible_from<T: DefIdTree>(self, module: DefId, tree: T) -> bool {
 33,508 ( 0.01%)          let restriction = match self {
      .                       // Public items are visible everywhere.
      .                       Visibility::Public => return true,
      .                       // Private items from other crates are visible nowhere.
      .                       Visibility::Invisible => return false,
      .                       // Restricted items are visible in an arbitrary local module.
    984 ( 0.00%)              Visibility::Restricted(other) if other.krate != module.krate => return false,
      .                       Visibility::Restricted(module) => module,
      .                   };
      .           
      .                   tree.is_descendant_of(module, restriction)
 11,673 ( 0.00%)      }
      .           
      .               /// Returns `true` if this visibility is at least as accessible as the given visibility
  2,115 ( 0.00%)      pub fn is_at_least<T: DefIdTree>(self, vis: Visibility, tree: T) -> bool {
  5,500 ( 0.00%)          let vis_restriction = match vis {
      .                       Visibility::Public => return self == Visibility::Public,
      .                       Visibility::Invisible => return true,
      .                       Visibility::Restricted(module) => module,
      .                   };
      .           
      .                   self.is_accessible_from(vis_restriction, tree)
  2,115 ( 0.00%)      }
      .           
      .               // Returns `true` if this item is visible anywhere in the local crate.
      .               pub fn is_visible_locally(self) -> bool {
      .                   match self {
      .                       Visibility::Public => true,
      .                       Visibility::Restricted(def_id) => def_id.is_local(),
      .                       Visibility::Invisible => false,
      .                   }
      .               }
      .           
      .               pub fn is_public(self) -> bool {
  1,196 ( 0.00%)          matches!(self, Visibility::Public)
    598 ( 0.00%)      }
      .           }
      .           
      .           /// The crate variances map is computed during typeck and contains the
      .           /// variance of every item in the local crate. You should not use it
      .           /// directly, because to do so will make your pass dependent on the
      .           /// HIR of every item in the local crate. Instead, use
      .           /// `tcx.variances_of()` to get the variance for a *particular*
      .           /// item.
-- line 365 ----------------------------------------
-- line 509 ----------------------------------------
      .           #[derive(Clone, Copy, Lift)]
      .           pub struct Predicate<'tcx> {
      .               inner: &'tcx PredicateInner<'tcx>,
      .           }
      .           
      .           impl<'tcx> PartialEq for Predicate<'tcx> {
      .               fn eq(&self, other: &Self) -> bool {
      .                   // `self.kind` is always interned.
 37,391 ( 0.01%)          ptr::eq(self.inner, other.inner)
 29,028 ( 0.01%)      }
      .           }
      .           
      .           impl Hash for Predicate<'_> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   (self.inner as *const PredicateInner<'_>).hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Predicate<'tcx> {}
      .           
      .           impl<'tcx> Predicate<'tcx> {
      .               /// Gets the inner `Binder<'tcx, PredicateKind<'tcx>>`.
      .               #[inline]
      .               pub fn kind(self) -> Binder<'tcx, PredicateKind<'tcx>> {
207,986 ( 0.05%)          self.inner.kind
      .               }
      .           
      .               /// Flips the polarity of a Predicate.
      .               ///
      .               /// Given `T: Trait` predicate it returns `T: !Trait` and given `T: !Trait` returns `T: Trait`.
      .               pub fn flip_polarity(&self, tcx: TyCtxt<'tcx>) -> Option<Predicate<'tcx>> {
      .                   let kind = self
      .                       .inner
-- line 541 ----------------------------------------
-- line 567 ----------------------------------------
      .                       flags: _,
      .                       outer_exclusive_binder: _,
      .                   } = self.inner;
      .           
      .                   kind.hash_stable(hcx, hasher);
      .               }
      .           }
      .           
711,327 ( 0.18%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
760,256 ( 0.19%)  #[derive(HashStable, TypeFoldable)]
      .           pub enum PredicateKind<'tcx> {
      .               /// Corresponds to `where Foo: Bar<A, B, C>`. `Foo` here would be
      .               /// the `Self` type of the trait reference and `A`, `B`, and `C`
      .               /// would be the type parameters.
      .               Trait(TraitPredicate<'tcx>),
      .           
      .               /// `where 'a: 'b`
      .               RegionOutlives(RegionOutlivesPredicate<'tcx>),
-- line 584 ----------------------------------------
-- line 594 ----------------------------------------
      .               WellFormed(GenericArg<'tcx>),
      .           
      .               /// Trait must be object-safe.
      .               ObjectSafe(DefId),
      .           
      .               /// No direct syntax. May be thought of as `where T: FnFoo<...>`
      .               /// for some substitutions `...` and `T` being a closure type.
      .               /// Satisfied (or refuted) once we know the closure's kind.
    157 ( 0.00%)      ClosureKind(DefId, SubstsRef<'tcx>, ClosureKind),
      .           
      .               /// `T1 <: T2`
      .               ///
      .               /// This obligation is created most often when we have two
      .               /// unresolved type variables and hence don't have enough
      .               /// information to process the subtyping obligation yet.
     99 ( 0.00%)      Subtype(SubtypePredicate<'tcx>),
      .           
      .               /// `T1` coerced to `T2`
      .               ///
      .               /// Like a subtyping obligation, this is created most often
      .               /// when we have two unresolved type variables and hence
      .               /// don't have enough information to process the coercion
      .               /// obligation yet. At the moment, we actually process coercions
      .               /// very much like subtyping and don't handle the full coercion
-- line 617 ----------------------------------------
-- line 645 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> Predicate<'tcx> {
      .               /// Performs a substitution suitable for going from a
      .               /// poly-trait-ref to supertraits that must hold if that
      .               /// poly-trait-ref holds. This is slightly different from a normal
      .               /// substitution in terms of what happens with bound regions. See
      .               /// lengthy comment below for details.
 35,577 ( 0.01%)      pub fn subst_supertrait(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_ref: &ty::PolyTraitRef<'tcx>,
      .               ) -> Predicate<'tcx> {
      .                   // The interaction between HRTB and supertraits is not entirely
      .                   // obvious. Let me walk you (and myself) through an example.
      .                   //
      .                   // Let's start with an easy case. Consider two traits:
-- line 661 ----------------------------------------
-- line 731 ----------------------------------------
      .                   //    ['x, 'b]
      .                   let bound_pred = self.kind();
      .                   let pred_bound_vars = bound_pred.bound_vars();
      .                   let trait_bound_vars = trait_ref.bound_vars();
      .                   // 1) Self: Bar1<'a, '^0.0> -> Self: Bar1<'a, '^0.1>
      .                   let shifted_pred =
      .                       tcx.shift_bound_var_indices(trait_bound_vars.len(), bound_pred.skip_binder());
      .                   // 2) Self: Bar1<'a, '^0.1> -> T: Bar1<'^0.0, '^0.1>
  3,953 ( 0.00%)          let new = shifted_pred.subst(tcx, trait_ref.skip_binder().substs);
      .                   // 3) ['x] + ['b] -> ['x, 'b]
      .                   let bound_vars =
      .                       tcx.mk_bound_variable_kinds(trait_bound_vars.iter().chain(pred_bound_vars));
 35,577 ( 0.01%)          tcx.reuse_or_mk_predicate(self, ty::Binder::bind_with_vars(new, bound_vars))
 27,671 ( 0.01%)      }
      .           }
      .           
  4,907 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
 60,342 ( 0.02%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct TraitPredicate<'tcx> {
      .               pub trait_ref: TraitRef<'tcx>,
      .           
 87,534 ( 0.02%)      pub constness: BoundConstness,
      .           
100,375 ( 0.03%)      pub polarity: ImplPolarity,
      .           }
      .           
      .           pub type PolyTraitPredicate<'tcx> = ty::Binder<'tcx, TraitPredicate<'tcx>>;
      .           
      .           impl<'tcx> TraitPredicate<'tcx> {
 43,824 ( 0.01%)      pub fn remap_constness(&mut self, tcx: TyCtxt<'tcx>, param_env: &mut ParamEnv<'tcx>) {
 38,398 ( 0.01%)          if unlikely!(Some(self.trait_ref.def_id) == tcx.lang_items().drop_trait()) {
      .                       // remap without changing constness of this predicate.
      .                       // this is because `T: ~const Drop` has a different meaning to `T: Drop`
     52 ( 0.00%)              param_env.remap_constness_with(self.constness)
      .                   } else {
  5,452 ( 0.00%)              *param_env = param_env.with_constness(self.constness.and(param_env.constness()))
      .                   }
 32,868 ( 0.01%)      }
      .           
      .               /// Remap the constness of this predicate before emitting it for diagnostics.
      .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
      .                   // this is different to `remap_constness` that callees want to print this predicate
      .                   // in case of selection errors. `T: ~const Drop` bounds cannot end up here when the
      .                   // param_env is not const because we it is always satisfied in non-const contexts.
      .                   if let hir::Constness::NotConst = param_env.constness() {
      .                       self.constness = ty::BoundConstness::NotConst;
      .                   }
      .               }
      .           
      .               pub fn def_id(self) -> DefId {
 13,964 ( 0.00%)          self.trait_ref.def_id
  6,982 ( 0.00%)      }
      .           
  7,678 ( 0.00%)      pub fn self_ty(self) -> Ty<'tcx> {
 23,034 ( 0.01%)          self.trait_ref.self_ty()
 15,356 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> PolyTraitPredicate<'tcx> {
      .               pub fn def_id(self) -> DefId {
      .                   // Ok to skip binder since trait `DefId` does not care about regions.
      .                   self.skip_binder().def_id()
 17,789 ( 0.00%)      }
      .           
     76 ( 0.00%)      pub fn self_ty(self) -> ty::Binder<'tcx, Ty<'tcx>> {
    304 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.self_ty())
    152 ( 0.00%)      }
      .           
      .               /// Remap the constness of this predicate before emitting it for diagnostics.
      .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
      .                   *self = self.map_bound(|mut p| {
      .                       p.remap_constness_diag(param_env);
      .                       p
      .                   });
      .               }
      .           }
      .           
     72 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
  9,166 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
 20,830 ( 0.01%)  pub struct OutlivesPredicate<A, B>(pub A, pub B); // `A: B`
      .           pub type RegionOutlivesPredicate<'tcx> = OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>;
      .           pub type TypeOutlivesPredicate<'tcx> = OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>;
      .           pub type PolyRegionOutlivesPredicate<'tcx> = ty::Binder<'tcx, RegionOutlivesPredicate<'tcx>>;
      .           pub type PolyTypeOutlivesPredicate<'tcx> = ty::Binder<'tcx, TypeOutlivesPredicate<'tcx>>;
      .           
      .           /// Encodes that `a` must be a subtype of `b`. The `a_is_expected` flag indicates
      .           /// whether the `a` type is the type that we should label as "expected" when
      .           /// presenting user diagnostics.
      .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
    181 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct SubtypePredicate<'tcx> {
    360 ( 0.00%)      pub a_is_expected: bool,
      .               pub a: Ty<'tcx>,
      .               pub b: Ty<'tcx>,
      .           }
      .           pub type PolySubtypePredicate<'tcx> = ty::Binder<'tcx, SubtypePredicate<'tcx>>;
      .           
      .           /// Encodes that we have to coerce *from* the `a` type to the `b` type.
      .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
      .           #[derive(HashStable, TypeFoldable)]
      .           pub struct CoercePredicate<'tcx> {
      .               pub a: Ty<'tcx>,
      .               pub b: Ty<'tcx>,
      .           }
      .           pub type PolyCoercePredicate<'tcx> = ty::Binder<'tcx, CoercePredicate<'tcx>>;
      .           
  2,384 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, TyEncodable, TyDecodable)]
  1,596 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub enum Term<'tcx> {
      .               Ty(Ty<'tcx>),
      .               Const(&'tcx Const<'tcx>),
      .           }
      .           
      .           impl<'tcx> From<Ty<'tcx>> for Term<'tcx> {
      .               fn from(ty: Ty<'tcx>) -> Self {
      .                   Term::Ty(ty)
     99 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> From<&'tcx Const<'tcx>> for Term<'tcx> {
      .               fn from(c: &'tcx Const<'tcx>) -> Self {
      .                   Term::Const(c)
      .               }
      .           }
      .           
      .           impl<'tcx> Term<'tcx> {
      .               pub fn ty(&self) -> Option<Ty<'tcx>> {
    192 ( 0.00%)          if let Term::Ty(ty) = self { Some(ty) } else { None }
     96 ( 0.00%)      }
      .           }
      .           
      .           /// This kind of predicate has no *direct* correspondent in the
      .           /// syntax, but it roughly corresponds to the syntactic forms:
      .           ///
      .           /// 1. `T: TraitRef<..., Item = Type>`
      .           /// 2. `<T as TraitRef<...>>::Item == Type` (NYI)
      .           ///
      .           /// In particular, form #1 is "desugared" to the combination of a
      .           /// normal trait predicate (`T: TraitRef<...>`) and one of these
      .           /// predicates. Form #2 is a broader form in that it also permits
      .           /// equality between arbitrary types. Processing an instance of
      .           /// Form #2 eventually yields one of these `ProjectionPredicate`
      .           /// instances to normalize the LHS.
     35 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
    151 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct ProjectionPredicate<'tcx> {
      .               pub projection_ty: ProjectionTy<'tcx>,
  1,630 ( 0.00%)      pub term: Term<'tcx>,
      .           }
      .           
      .           pub type PolyProjectionPredicate<'tcx> = Binder<'tcx, ProjectionPredicate<'tcx>>;
      .           
      .           impl<'tcx> PolyProjectionPredicate<'tcx> {
      .               /// Returns the `DefId` of the trait of the associated item being projected.
      .               #[inline]
      .               pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
     40 ( 0.00%)          self.skip_binder().projection_ty.trait_def_id(tcx)
      .               }
      .           
      .               /// Get the [PolyTraitRef] required for this projection to be well formed.
      .               /// Note that for generic associated types the predicates of the associated
      .               /// type also need to be checked.
      .               #[inline]
      .               pub fn required_poly_trait_ref(&self, tcx: TyCtxt<'tcx>) -> PolyTraitRef<'tcx> {
      .                   // Note: unlike with `TraitRef::to_poly_trait_ref()`,
      .                   // `self.0.trait_ref` is permitted to have escaping regions.
      .                   // This is because here `self` has a `Binder` and so does our
      .                   // return value, so we are preserving the number of binding
      .                   // levels.
     20 ( 0.00%)          self.map_bound(|predicate| predicate.projection_ty.trait_ref(tcx))
      .               }
      .           
      .               pub fn term(&self) -> Binder<'tcx, Term<'tcx>> {
      .                   self.map_bound(|predicate| predicate.term)
      .               }
      .           
      .               /// The `DefId` of the `TraitItem` for the associated type.
      .               ///
      .               /// Note that this is not the `DefId` of the `TraitRef` containing this
      .               /// associated type, which is in `tcx.associated_item(projection_def_id()).container`.
      .               pub fn projection_def_id(&self) -> DefId {
      .                   // Ok to skip binder since trait `DefId` does not care about regions.
     40 ( 0.00%)          self.skip_binder().projection_ty.item_def_id
     20 ( 0.00%)      }
      .           }
      .           
      .           pub trait ToPolyTraitRef<'tcx> {
      .               fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx>;
      .           }
      .           
      .           impl<'tcx> ToPolyTraitRef<'tcx> for PolyTraitPredicate<'tcx> {
  1,780 ( 0.00%)      fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx> {
  1,780 ( 0.00%)          self.map_bound_ref(|trait_pred| trait_pred.trait_ref)
  1,780 ( 0.00%)      }
      .           }
      .           
      .           pub trait ToPredicate<'tcx> {
      .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx>;
      .           }
      .           
      .           impl<'tcx> ToPredicate<'tcx> for Binder<'tcx, PredicateKind<'tcx>> {
      .               #[inline(always)]
      .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
      .                   tcx.mk_predicate(self)
      .               }
      .           }
      .           
      .           impl<'tcx> ToPredicate<'tcx> for PolyTraitPredicate<'tcx> {
  2,595 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
 12,975 ( 0.00%)          self.map_bound(PredicateKind::Trait).to_predicate(tcx)
  5,190 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> ToPredicate<'tcx> for PolyRegionOutlivesPredicate<'tcx> {
    202 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
    404 ( 0.00%)          self.map_bound(PredicateKind::RegionOutlives).to_predicate(tcx)
    404 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> ToPredicate<'tcx> for PolyTypeOutlivesPredicate<'tcx> {
     41 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
     82 ( 0.00%)          self.map_bound(PredicateKind::TypeOutlives).to_predicate(tcx)
     82 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {
      7 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
     35 ( 0.00%)          self.map_bound(PredicateKind::Projection).to_predicate(tcx)
     14 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> Predicate<'tcx> {
 15,956 ( 0.00%)      pub fn to_opt_poly_trait_pred(self) -> Option<PolyTraitPredicate<'tcx>> {
      .                   let predicate = self.kind();
 47,868 ( 0.01%)          match predicate.skip_binder() {
 33,425 ( 0.01%)              PredicateKind::Trait(t) => Some(predicate.rebind(t)),
      .                       PredicateKind::Projection(..)
      .                       | PredicateKind::Subtype(..)
      .                       | PredicateKind::Coerce(..)
      .                       | PredicateKind::RegionOutlives(..)
      .                       | PredicateKind::WellFormed(..)
      .                       | PredicateKind::ObjectSafe(..)
      .                       | PredicateKind::ClosureKind(..)
      .                       | PredicateKind::TypeOutlives(..)
      .                       | PredicateKind::ConstEvaluatable(..)
      .                       | PredicateKind::ConstEquate(..)
  1,293 ( 0.00%)              | PredicateKind::TypeWellFormedFromEnv(..) => None,
      .                   }
 15,956 ( 0.00%)      }
      .           
  1,805 ( 0.00%)      pub fn to_opt_type_outlives(self) -> Option<PolyTypeOutlivesPredicate<'tcx>> {
      .                   let predicate = self.kind();
  3,610 ( 0.00%)          match predicate.skip_binder() {
    726 ( 0.00%)              PredicateKind::TypeOutlives(data) => Some(predicate.rebind(data)),
      .                       PredicateKind::Trait(..)
      .                       | PredicateKind::Projection(..)
      .                       | PredicateKind::Subtype(..)
      .                       | PredicateKind::Coerce(..)
      .                       | PredicateKind::RegionOutlives(..)
      .                       | PredicateKind::WellFormed(..)
      .                       | PredicateKind::ObjectSafe(..)
      .                       | PredicateKind::ClosureKind(..)
      .                       | PredicateKind::ConstEvaluatable(..)
      .                       | PredicateKind::ConstEquate(..)
  1,563 ( 0.00%)              | PredicateKind::TypeWellFormedFromEnv(..) => None,
      .                   }
  1,805 ( 0.00%)      }
      .           }
      .           
      .           /// Represents the bounds declared on a particular set of type
      .           /// parameters. Should eventually be generalized into a flag list of
      .           /// where-clauses. You can obtain an `InstantiatedPredicates` list from a
      .           /// `GenericPredicates` by using the `instantiate` method. Note that this method
      .           /// reflects an important semantic invariant of `InstantiatedPredicates`: while
      .           /// the `GenericPredicates` are expressed in terms of the bound type
-- line 1005 ----------------------------------------
-- line 1011 ----------------------------------------
      .           /// Example:
      .           ///
      .           ///     struct Foo<T, U: Bar<T>> { ... }
      .           ///
      .           /// Here, the `GenericPredicates` for `Foo` would contain a list of bounds like
      .           /// `[[], [U:Bar<T>]]`. Now if there were some particular reference
      .           /// like `Foo<isize,usize>`, then the `InstantiatedPredicates` would be `[[],
      .           /// [usize:Bar<isize>]]`.
  5,849 ( 0.00%)  #[derive(Clone, Debug, TypeFoldable)]
      .           pub struct InstantiatedPredicates<'tcx> {
      .               pub predicates: Vec<Predicate<'tcx>>,
      .               pub spans: Vec<Span>,
      .           }
      .           
      .           impl<'tcx> InstantiatedPredicates<'tcx> {
     17 ( 0.00%)      pub fn empty() -> InstantiatedPredicates<'tcx> {
  6,188 ( 0.00%)          InstantiatedPredicates { predicates: vec![], spans: vec![] }
     17 ( 0.00%)      }
      .           
      .               pub fn is_empty(&self) -> bool {
      .                   self.predicates.is_empty()
      1 ( 0.00%)      }
      .           }
      .           
      .           #[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable, TyEncodable, TyDecodable, TypeFoldable)]
      .           pub struct OpaqueTypeKey<'tcx> {
      .               pub def_id: DefId,
      .               pub substs: SubstsRef<'tcx>,
      .           }
      .           
-- line 1040 ----------------------------------------
-- line 1091 ----------------------------------------
      .               /// ```
      .               /// for<'a> fn(&'a u32)
      .               /// ```
      .               ///
      .               /// Once we "enter" into this `for<'a>` quantifier, we are in a
      .               /// new universe that extends `U` -- in this new universe, we can
      .               /// name the region `'a`, but that region was not nameable from
      .               /// `U` because it was not in scope there.
  3,585 ( 0.00%)      pub fn next_universe(self) -> UniverseIndex {
      .                   UniverseIndex::from_u32(self.private.checked_add(1).unwrap())
 10,755 ( 0.00%)      }
      .           
      .               /// Returns `true` if `self` can name a name from `other` -- in other words,
      .               /// if the set of names in `self` is a superset of those in
      .               /// `other` (`self >= other`).
      .               pub fn can_name(self, other: UniverseIndex) -> bool {
  5,718 ( 0.00%)          self.private >= other.private
  2,859 ( 0.00%)      }
      .           
      .               /// Returns `true` if `self` cannot name some names from `other` -- in other
      .               /// words, if the set of names in `self` is a strict subset of
      .               /// those in `other` (`self < other`).
      .               pub fn cannot_name(self, other: UniverseIndex) -> bool {
     58 ( 0.00%)          self.private < other.private
     29 ( 0.00%)      }
      .           }
      .           
      .           /// The "placeholder index" fully defines a placeholder region, type, or const. Placeholders are
      .           /// identified by both a universe, as well as a name residing within that universe. Distinct bound
      .           /// regions/types/consts within the same universe simply have an unknown relationship to one
      .           /// another.
      .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, PartialOrd, Ord)]
      .           pub struct Placeholder<T> {
    626 ( 0.00%)      pub universe: UniverseIndex,
    447 ( 0.00%)      pub name: T,
      .           }
      .           
      .           impl<'a, T> HashStable<StableHashingContext<'a>> for Placeholder<T>
      .           where
      .               T: HashStable<StableHashingContext<'a>>,
      .           {
      .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
      .                   self.universe.hash_stable(hcx, hasher);
-- line 1133 ----------------------------------------
-- line 1194 ----------------------------------------
      .           /// aren't allowed to call that query: it is equal to `type_of(const_param)` which is
      .           /// trivial to compute.
      .           ///
      .           /// If we now want to use that constant in a place which potentionally needs its type
      .           /// we also pass the type of its `const_param`. This is the point of `WithOptConstParam`,
      .           /// except that instead of a `Ty` we bundle the `DefId` of the const parameter.
      .           /// Meaning that we need to use `type_of(const_param_did)` if `const_param_did` is `Some`
      .           /// to get the type of `did`.
    684 ( 0.00%)  #[derive(Copy, Clone, Debug, TypeFoldable, Lift, TyEncodable, TyDecodable)]
      .           #[derive(PartialEq, Eq, PartialOrd, Ord)]
      .           #[derive(Hash, HashStable)]
      .           pub struct WithOptConstParam<T> {
  1,195 ( 0.00%)      pub did: T,
      .               /// The `DefId` of the corresponding generic parameter in case `did` is
      .               /// a const argument.
      .               ///
      .               /// Note that even if `did` is a const argument, this may still be `None`.
      .               /// All queries taking `WithOptConstParam` start by calling `tcx.opt_const_param_of(def.did)`
      .               /// to potentially update `param_did` in the case it is `None`.
    764 ( 0.00%)      pub const_param_did: Option<DefId>,
      .           }
      .           
      .           impl<T> WithOptConstParam<T> {
      .               /// Creates a new `WithOptConstParam` setting `const_param_did` to `None`.
      .               #[inline(always)]
      .               pub fn unknown(did: T) -> WithOptConstParam<T> {
      .                   WithOptConstParam { did, const_param_did: None }
  1,870 ( 0.00%)      }
      .           }
      .           
      .           impl WithOptConstParam<LocalDefId> {
      .               /// Returns `Some((did, param_did))` if `def_id` is a const argument,
      .               /// `None` otherwise.
      .               #[inline(always)]
      .               pub fn try_lookup(did: LocalDefId, tcx: TyCtxt<'_>) -> Option<(LocalDefId, DefId)> {
      .                   tcx.opt_const_param_of(did).map(|param_did| (did, param_did))
      .               }
      .           
      .               /// In case `self` is unknown but `self.did` is a const argument, this returns
      .               /// a `WithOptConstParam` with the correct `const_param_did`.
      .               #[inline(always)]
      .               pub fn try_upgrade(self, tcx: TyCtxt<'_>) -> Option<WithOptConstParam<LocalDefId>> {
    342 ( 0.00%)          if self.const_param_did.is_none() {
    568 ( 0.00%)              if let const_param_did @ Some(_) = tcx.opt_const_param_of(self.did) {
      .                           return Some(WithOptConstParam { did: self.did, const_param_did });
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .           
      .               pub fn to_global(self) -> WithOptConstParam<DefId> {
      .                   WithOptConstParam { did: self.did.to_def_id(), const_param_did: self.const_param_did }
      .               }
      .           
     12 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
      9 ( 0.00%)          if let Some(did) = self.const_param_did { did } else { self.did.to_def_id() }
      3 ( 0.00%)      }
      .           }
      .           
      .           impl WithOptConstParam<DefId> {
    236 ( 0.00%)      pub fn as_local(self) -> Option<WithOptConstParam<LocalDefId>> {
      .                   self.did
      .                       .as_local()
      .                       .map(|did| WithOptConstParam { did, const_param_did: self.const_param_did })
    236 ( 0.00%)      }
      .           
      .               pub fn as_const_arg(self) -> Option<(LocalDefId, DefId)> {
    280 ( 0.00%)          if let Some(param_did) = self.const_param_did {
    128 ( 0.00%)              if let Some(did) = self.did.as_local() {
      .                           return Some((did, param_did));
      .                       }
      .                   }
      .           
      .                   None
     72 ( 0.00%)      }
      .           
      .               pub fn is_local(self) -> bool {
      .                   self.did.is_local()
      .               }
      .           
     72 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
      .                   self.const_param_did.unwrap_or(self.did)
     72 ( 0.00%)      }
      .           }
      .           
      .           /// When type checking, we use the `ParamEnv` to track
      .           /// details about the set of where-clauses that are in scope at this
      .           /// particular point.
      .           #[derive(Copy, Clone, Hash, PartialEq, Eq)]
      .           pub struct ParamEnv<'tcx> {
      .               /// This packs both caller bounds and the reveal enum into one pointer.
-- line 1285 ----------------------------------------
-- line 1302 ----------------------------------------
      .               reveal: traits::Reveal,
      .               constness: hir::Constness,
      .           }
      .           
      .           unsafe impl rustc_data_structures::tagged_ptr::Tag for ParamTag {
      .               const BITS: usize = 2;
      .               #[inline]
      .               fn into_usize(self) -> usize {
  5,736 ( 0.00%)          match self {
      .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst } => 0,
      .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst } => 1,
      .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const } => 2,
      .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::Const } => 3,
      .                   }
      .               }
      .               #[inline]
      .               unsafe fn from_usize(ptr: usize) -> Self {
 83,451 ( 0.02%)          match ptr {
      .                       0 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst },
      .                       1 => Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst },
      .                       2 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const },
      .                       3 => Self { reveal: traits::Reveal::All, constness: hir::Constness::Const },
      .                       _ => std::hint::unreachable_unchecked(),
      .                   }
      .               }
      .           }
-- line 1327 ----------------------------------------
-- line 1405 ----------------------------------------
      .               pub fn new(
      .                   caller_bounds: &'tcx List<Predicate<'tcx>>,
      .                   reveal: Reveal,
      .                   constness: hir::Constness,
      .               ) -> Self {
      .                   ty::ParamEnv { packed: CopyTaggedPtr::new(caller_bounds, ParamTag { reveal, constness }) }
      .               }
      .           
      4 ( 0.00%)      pub fn with_user_facing(mut self) -> Self {
      .                   self.packed.set_tag(ParamTag { reveal: Reveal::UserFacing, ..self.packed.tag() });
      .                   self
      4 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn with_constness(mut self, constness: hir::Constness) -> Self {
      .                   self.packed.set_tag(ParamTag { constness, ..self.packed.tag() });
      .                   self
      .               }
      .           
      .               #[inline]
-- line 1424 ----------------------------------------
-- line 1430 ----------------------------------------
      .               #[inline]
      .               pub fn without_const(mut self) -> Self {
      .                   self.packed.set_tag(ParamTag { constness: hir::Constness::NotConst, ..self.packed.tag() });
      .                   self
      .               }
      .           
      .               #[inline]
      .               pub fn remap_constness_with(&mut self, mut constness: ty::BoundConstness) {
  1,378 ( 0.00%)          *self = self.with_constness(constness.and(self.constness()))
      .               }
      .           
      .               /// Returns a new parameter environment with the same clauses, but
      .               /// which "reveals" the true results of projections in all cases
      .               /// (even for associated types that are specializable). This is
      .               /// the desired behavior during codegen and certain other special
      .               /// contexts; normally though we want to use `Reveal::UserFacing`,
      .               /// which is the default.
      .               /// All opaque types in the caller_bounds of the `ParamEnv`
      .               /// will be normalized to their underlying types.
      .               /// See PR #65989 and issue #65918 for more details
    472 ( 0.00%)      pub fn with_reveal_all_normalized(self, tcx: TyCtxt<'tcx>) -> Self {
      .                   if self.packed.tag().reveal == traits::Reveal::All {
      .                       return self;
      .                   }
      .           
      .                   ParamEnv::new(
      .                       tcx.normalize_opaque_types(self.caller_bounds()),
      .                       Reveal::All,
      .                       self.constness(),
      .                   )
    531 ( 0.00%)      }
      .           
      .               /// Returns this same environment but with no caller bounds.
      .               #[inline]
      .               pub fn without_caller_bounds(self) -> Self {
      .                   Self::new(List::empty(), self.reveal(), self.constness())
      .               }
      .           
      .               /// Creates a suitable environment in which to perform trait
-- line 1468 ----------------------------------------
-- line 1472 ----------------------------------------
      .               /// pair it with the empty environment. This improves caching and is generally
      .               /// invisible.
      .               ///
      .               /// N.B., we preserve the environment when type-checking because it
      .               /// is possible for the user to have wacky where-clauses like
      .               /// `where Box<u32>: Copy`, which are clearly never
      .               /// satisfiable. We generally want to behave as if they were true,
      .               /// although the surrounding function is never reachable.
 13,538 ( 0.00%)      pub fn and<T: TypeFoldable<'tcx>>(self, value: T) -> ParamEnvAnd<'tcx, T> {
      .                   match self.reveal() {
      .                       Reveal::UserFacing => ParamEnvAnd { param_env: self, value },
      .           
      .                       Reveal::All => {
     72 ( 0.00%)                  if value.is_global() {
      .                               ParamEnvAnd { param_env: self.without_caller_bounds(), value }
      .                           } else {
      .                               ParamEnvAnd { param_env: self, value }
      .                           }
      .                       }
      .                   }
 13,275 ( 0.00%)      }
      .           }
      .           
      .           // FIXME(ecstaticmorse): Audit all occurrences of `without_const().to_predicate(tcx)` to ensure that
      .           // the constness of trait bounds is being propagated correctly.
      .           impl<'tcx> PolyTraitRef<'tcx> {
      .               #[inline]
      .               pub fn with_constness(self, constness: BoundConstness) -> PolyTraitPredicate<'tcx> {
  1,458 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
      .                       trait_ref,
      .                       constness,
      .                       polarity: ty::ImplPolarity::Positive,
      .                   })
      .               }
      .               #[inline]
      .               pub fn without_const(self) -> PolyTraitPredicate<'tcx> {
      .                   self.with_constness(BoundConstness::NotConst)
      .               }
      .           }
      .           
    390 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TypeFoldable)]
      .           pub struct ParamEnvAnd<'tcx, T> {
  3,867 ( 0.00%)      pub param_env: ParamEnv<'tcx>,
 43,063 ( 0.01%)      pub value: T,
      .           }
      .           
      .           impl<'tcx, T> ParamEnvAnd<'tcx, T> {
      .               pub fn into_parts(self) -> (ParamEnv<'tcx>, T) {
      .                   (self.param_env, self.value)
      .               }
      .           
      .               #[inline]
      .               pub fn without_const(mut self) -> Self {
      .                   self.param_env = self.param_env.without_const();
    420 ( 0.00%)          self
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T> HashStable<StableHashingContext<'a>> for ParamEnvAnd<'tcx, T>
      .           where
      .               T: HashStable<StableHashingContext<'a>>,
      .           {
      .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
-- line 1534 ----------------------------------------
-- line 1542 ----------------------------------------
      .           #[derive(Copy, Clone, Debug, HashStable)]
      .           pub struct Destructor {
      .               /// The `DefId` of the destructor method
      .               pub did: DefId,
      .               /// The constness of the destructor method
      .               pub constness: hir::Constness,
      .           }
      .           
    455 ( 0.00%)  bitflags! {
    819 ( 0.00%)      #[derive(HashStable, TyEncodable, TyDecodable)]
      .               pub struct VariantFlags: u32 {
      .                   const NO_VARIANT_FLAGS        = 0;
      .                   /// Indicates whether the field list of this variant is `#[non_exhaustive]`.
      .                   const IS_FIELD_LIST_NON_EXHAUSTIVE = 1 << 0;
      .                   /// Indicates whether this variant was obtained as part of recovering from
      .                   /// a syntactic error. May be incomplete or bogus.
      .                   const IS_RECOVERED = 1 << 1;
      .               }
      .           }
      .           
      .           /// Definition of a variant -- a struct's fields or an enum variant.
198,665 ( 0.05%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
      .           pub struct VariantDef {
      .               /// `DefId` that identifies the variant itself.
      .               /// If this variant belongs to a struct or union, then this is a copy of its `DefId`.
      .               pub def_id: DefId,
      .               /// `DefId` that identifies the variant's constructor.
      .               /// If this variant is a struct variant, then this is `None`.
      .               pub ctor_def_id: Option<DefId>,
      .               /// Variant or struct name.
-- line 1571 ----------------------------------------
-- line 1592 ----------------------------------------
      .               /// `parent_did` is the `DefId` of the `AdtDef` representing the enum or struct that
      .               /// owns this variant. It is used for checking if a struct has `#[non_exhaustive]` w/out having
      .               /// to go through the redirect of checking the ctor's attributes - but compiling a small crate
      .               /// requires loading the `AdtDef`s for all the structs in the universe (e.g., coherence for any
      .               /// built-in trait), and we do not want to load attributes twice.
      .               ///
      .               /// If someone speeds up attribute loading to not be a performance concern, they can
      .               /// remove this hack and use the constructor `DefId` everywhere.
    448 ( 0.00%)      pub fn new(
      .                   name: Symbol,
      .                   variant_did: Option<DefId>,
      .                   ctor_def_id: Option<DefId>,
      .                   discr: VariantDiscr,
      .                   fields: Vec<FieldDef>,
      .                   ctor_kind: CtorKind,
      .                   adt_kind: AdtKind,
      .                   parent_did: DefId,
-- line 1608 ----------------------------------------
-- line 1611 ----------------------------------------
      .               ) -> Self {
      .                   debug!(
      .                       "VariantDef::new(name = {:?}, variant_did = {:?}, ctor_def_id = {:?}, discr = {:?},
      .                        fields = {:?}, ctor_kind = {:?}, adt_kind = {:?}, parent_did = {:?})",
      .                       name, variant_did, ctor_def_id, discr, fields, ctor_kind, adt_kind, parent_did,
      .                   );
      .           
      .                   let mut flags = VariantFlags::NO_VARIANT_FLAGS;
     56 ( 0.00%)          if is_field_list_non_exhaustive {
      .                       flags |= VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE;
      .                   }
      .           
    168 ( 0.00%)          if recovered {
      .                       flags |= VariantFlags::IS_RECOVERED;
      .                   }
      .           
    504 ( 0.00%)          VariantDef {
      .                       def_id: variant_did.unwrap_or(parent_did),
      .                       ctor_def_id,
      .                       name,
      .                       discr,
    224 ( 0.00%)              fields,
      .                       ctor_kind,
      .                       flags,
      .                   }
    224 ( 0.00%)      }
      .           
      .               /// Is this field list non-exhaustive?
      .               #[inline]
      .               pub fn is_field_list_non_exhaustive(&self) -> bool {
      .                   self.flags.intersects(VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE)
      .               }
      .           
      .               /// Was this variant obtained as part of recovering from a syntactic error?
      .               #[inline]
      .               pub fn is_recovered(&self) -> bool {
      .                   self.flags.intersects(VariantFlags::IS_RECOVERED)
      .               }
      .           
      .               /// Computes the `Ident` of this variant by looking up the `Span`
    168 ( 0.00%)      pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
     96 ( 0.00%)          Ident::new(self.name, tcx.def_ident_span(self.def_id).unwrap())
    216 ( 0.00%)      }
      .           }
      .           
103,019 ( 0.03%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]
      .           pub enum VariantDiscr {
      .               /// Explicit value for this variant, i.e., `X = 123`.
      .               /// The `DefId` corresponds to the embedded constant.
      .               Explicit(DefId),
      .           
      .               /// The previous variant's discriminant plus one.
      .               /// For efficiency reasons, the distance from the
      .               /// last `Explicit` discriminant is being stored,
      .               /// or `0` for the first variant, if it has none.
      .               Relative(u32),
      .           }
      .           
286,302 ( 0.07%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
      .           pub struct FieldDef {
      .               pub did: DefId,
      .               pub name: Symbol,
      .               pub vis: Visibility,
      .           }
      .           
     61 ( 0.00%)  bitflags! {
      .               #[derive(TyEncodable, TyDecodable, Default, HashStable)]
      .               pub struct ReprFlags: u8 {
      .                   const IS_C               = 1 << 0;
      .                   const IS_SIMD            = 1 << 1;
      .                   const IS_TRANSPARENT     = 1 << 2;
      .                   // Internal only for now. If true, don't reorder fields.
      .                   const IS_LINEAR          = 1 << 3;
      .                   // If true, don't expose any niche to type's context.
-- line 1684 ----------------------------------------
-- line 1689 ----------------------------------------
      .                   // Any of these flags being set prevent field reordering optimisation.
      .                   const IS_UNOPTIMISABLE   = ReprFlags::IS_C.bits
      .                                            | ReprFlags::IS_SIMD.bits
      .                                            | ReprFlags::IS_LINEAR.bits;
      .               }
      .           }
      .           
      .           /// Represents the repr options provided by the user,
138,752 ( 0.04%)  #[derive(Copy, Clone, Debug, Eq, PartialEq, TyEncodable, TyDecodable, Default, HashStable)]
      .           pub struct ReprOptions {
      .               pub int: Option<attr::IntType>,
      .               pub align: Option<Align>,
      .               pub pack: Option<Align>,
      .               pub flags: ReprFlags,
      .               /// The seed to be used for randomizing a type's layout
      .               ///
      .               /// Note: This could technically be a `[u8; 16]` (a `u128`) which would
-- line 1705 ----------------------------------------
-- line 1706 ----------------------------------------
      .               /// be the "most accurate" hash as it'd encompass the item and crate
      .               /// hash without loss, but it does pay the price of being larger.
      .               /// Everything's a tradeoff, a `u64` seed should be sufficient for our
      .               /// purposes (primarily `-Z randomize-layout`)
      .               pub field_shuffle_seed: u64,
      .           }
      .           
      .           impl ReprOptions {
    169 ( 0.00%)      pub fn new(tcx: TyCtxt<'_>, did: DefId) -> ReprOptions {
      .                   let mut flags = ReprFlags::empty();
      .                   let mut size = None;
      .                   let mut max_align: Option<Align> = None;
      .                   let mut min_pack: Option<Align> = None;
      .           
      .                   // Generate a deterministically-derived seed from the item's path hash
      .                   // to allow for cross-crate compilation to actually work
      .                   let mut field_shuffle_seed = tcx.def_path_hash(did).0.to_smaller_hash();
      .           
      .                   // If the user defined a custom seed for layout randomization, xor the item's
      .                   // path hash with the user defined seed, this will allowing determinism while
      .                   // still allowing users to further randomize layout generation for e.g. fuzzing
     39 ( 0.00%)          if let Some(user_seed) = tcx.sess.opts.debugging_opts.layout_seed {
      .                       field_shuffle_seed ^= user_seed;
      .                   }
      .           
     52 ( 0.00%)          for attr in tcx.get_attrs(did).iter() {
    285 ( 0.00%)              for r in attr::find_repr_attrs(&tcx.sess, attr) {
      .                           flags.insert(match r {
      .                               attr::ReprC => ReprFlags::IS_C,
      .                               attr::ReprPacked(pack) => {
      .                                   let pack = Align::from_bytes(pack as u64).unwrap();
      .                                   min_pack = Some(if let Some(min_pack) = min_pack {
      .                                       min_pack.min(pack)
      .                                   } else {
      .                                       pack
-- line 1740 ----------------------------------------
-- line 1753 ----------------------------------------
      .                                   ReprFlags::empty()
      .                               }
      .                           });
      .                       }
      .                   }
      .           
      .                   // If `-Z randomize-layout` was enabled for the type definition then we can
      .                   // consider performing layout randomization
    104 ( 0.00%)          if tcx.sess.opts.debugging_opts.randomize_layout {
      .                       flags.insert(ReprFlags::RANDOMIZE_LAYOUT);
      .                   }
      .           
      .                   // This is here instead of layout because the choice must make it into metadata.
     78 ( 0.00%)          if !tcx.consider_optimizing(|| format!("Reorder fields of {:?}", tcx.def_path_str(did))) {
      .                       flags.insert(ReprFlags::IS_LINEAR);
      .                   }
      .           
     26 ( 0.00%)          Self { int: size, align: max_align, pack: min_pack, flags, field_shuffle_seed }
    364 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn simd(&self) -> bool {
      .                   self.flags.contains(ReprFlags::IS_SIMD)
      .               }
      .           
      .               #[inline]
      .               pub fn c(&self) -> bool {
-- line 1779 ----------------------------------------
-- line 1798 ----------------------------------------
      .               #[inline]
      .               pub fn hide_niche(&self) -> bool {
      .                   self.flags.contains(ReprFlags::HIDE_NICHE)
      .               }
      .           
      .               /// Returns the discriminant type, given these `repr` options.
      .               /// This must only be called on enums!
      .               pub fn discr_type(&self) -> attr::IntType {
     49 ( 0.00%)          self.int.unwrap_or(attr::SignedInt(ast::IntTy::Isize))
     31 ( 0.00%)      }
      .           
      .               /// Returns `true` if this `#[repr()]` should inhabit "smart enum
      .               /// layout" optimizations, such as representing `Foo<&T>` as a
      .               /// single pointer.
      .               pub fn inhibit_enum_layout_opt(&self) -> bool {
      .                   self.c() || self.int.is_some()
      .               }
      .           
      .               /// Returns `true` if this `#[repr()]` should inhibit struct field reordering
      .               /// optimizations, such as with `repr(C)`, `repr(packed(1))`, or `repr(<int>)`.
      .               pub fn inhibit_struct_field_reordering_opt(&self) -> bool {
     10 ( 0.00%)          if let Some(pack) = self.pack {
      .                       if pack.bytes() == 1 {
      .                           return true;
      .                       }
      .                   }
      .           
     24 ( 0.00%)          self.flags.intersects(ReprFlags::IS_UNOPTIMISABLE) || self.int.is_some()
      .               }
      .           
      .               /// Returns `true` if this type is valid for reordering and `-Z randomize-layout`
      .               /// was enabled for its declaration crate
      .               pub fn can_randomize_type_layout(&self) -> bool {
      4 ( 0.00%)          !self.inhibit_struct_field_reordering_opt()
      .                       && self.flags.contains(ReprFlags::RANDOMIZE_LAYOUT)
      .               }
      .           
      .               /// Returns `true` if this `#[repr()]` should inhibit union ABI optimisations.
      .               pub fn inhibit_union_abi_opt(&self) -> bool {
      .                   self.c()
      .               }
      .           }
      .           
      .           impl<'tcx> FieldDef {
      .               /// Returns the type of this field. The resulting type is not normalized. The `subst` is
      .               /// typically obtained via the second field of [`TyKind::Adt`].
  8,344 ( 0.00%)      pub fn ty(&self, tcx: TyCtxt<'tcx>, subst: SubstsRef<'tcx>) -> Ty<'tcx> {
  2,384 ( 0.00%)          tcx.type_of(self.did).subst(tcx, subst)
  9,536 ( 0.00%)      }
      .           
      .               /// Computes the `Ident` of this variant by looking up the `Span`
    910 ( 0.00%)      pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
    520 ( 0.00%)          Ident::new(self.name, tcx.def_ident_span(self.did).unwrap())
  1,170 ( 0.00%)      }
      .           }
      .           
      .           pub type Attributes<'tcx> = &'tcx [ast::Attribute];
      .           
      .           #[derive(Debug, PartialEq, Eq)]
      .           pub enum ImplOverlapKind {
      .               /// These impls are always allowed to overlap.
      .               Permitted {
-- line 1859 ----------------------------------------
-- line 1891 ----------------------------------------
      .               /// marker traits.
      .               /// 4. Neither of the impls can have any where-clauses.
      .               ///
      .               /// Once `traitobject` 0.1.0 is no longer an active concern, this hack can be removed.
      .               Issue33140,
      .           }
      .           
      .           impl<'tcx> TyCtxt<'tcx> {
  5,256 ( 0.00%)      pub fn typeck_body(self, body: hir::BodyId) -> &'tcx TypeckResults<'tcx> {
  1,314 ( 0.00%)          self.typeck(self.hir().body_owner_def_id(body))
  5,256 ( 0.00%)      }
      .           
      .               pub fn provided_trait_methods(self, id: DefId) -> impl 'tcx + Iterator<Item = &'tcx AssocItem> {
      .                   self.associated_items(id)
      .                       .in_definition_order()
      .                       .filter(|item| item.kind == AssocKind::Fn && item.defaultness.has_value())
      .               }
      .           
      .               fn item_name_from_hir(self, def_id: DefId) -> Option<Ident> {
      .                   self.hir().get_if_local(def_id).and_then(|node| node.ident())
      .               }
      .           
     90 ( 0.00%)      fn item_name_from_def_id(self, def_id: DefId) -> Option<Symbol> {
     10 ( 0.00%)          if def_id.index == CRATE_DEF_INDEX {
      .                       Some(self.crate_name(def_id.krate))
      .                   } else {
     30 ( 0.00%)              let def_key = self.def_key(def_id);
     46 ( 0.00%)              match def_key.disambiguated_data.data {
      .                           // The name of a constructor is that of its parent.
     20 ( 0.00%)                  rustc_hir::definitions::DefPathData::Ctor => self.item_name_from_def_id(DefId {
      .                               krate: def_id.krate,
      .                               index: def_key.parent.unwrap(),
      .                           }),
     12 ( 0.00%)                  _ => def_key.disambiguated_data.data.get_opt_name(),
      .                       }
      .                   }
     80 ( 0.00%)      }
      .           
      .               /// Look up the name of an item across crates. This does not look at HIR.
      .               ///
      .               /// When possible, this function should be used for cross-crate lookups over
      .               /// [`opt_item_name`] to avoid invalidating the incremental cache. If you
      .               /// need to handle items without a name, or HIR items that will not be
      .               /// serialized cross-crate, or if you need the span of the item, use
      .               /// [`opt_item_name`] instead.
      .               ///
      .               /// [`opt_item_name`]: Self::opt_item_name
     42 ( 0.00%)      pub fn item_name(self, id: DefId) -> Symbol {
      .                   // Look at cross-crate items first to avoid invalidating the incremental cache
      .                   // unless we have to.
      6 ( 0.00%)          self.item_name_from_def_id(id).unwrap_or_else(|| {
      .                       bug!("item_name: no name for {:?}", self.def_path(id));
      .                   })
     30 ( 0.00%)      }
      .           
      .               /// Look up the name and span of an item or [`Node`].
      .               ///
      .               /// See [`item_name`][Self::item_name] for more information.
      .               pub fn opt_item_name(self, def_id: DefId) -> Option<Ident> {
      .                   // Look at the HIR first so the span will be correct if this is a local item.
      .                   self.item_name_from_hir(def_id)
      .                       .or_else(|| self.item_name_from_def_id(def_id).map(Ident::with_dummy_span))
      .               }
      .           
 43,590 ( 0.01%)      pub fn opt_associated_item(self, def_id: DefId) -> Option<&'tcx AssocItem> {
 17,436 ( 0.00%)          if let DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy = self.def_kind(def_id) {
      .                       Some(self.associated_item(def_id))
      .                   } else {
      .                       None
      .                   }
 39,231 ( 0.01%)      }
      .           
    192 ( 0.00%)      pub fn field_index(self, hir_id: hir::HirId, typeck_results: &TypeckResults<'_>) -> usize {
      .                   typeck_results.field_indices().get(hir_id).cloned().expect("no index for a field")
    384 ( 0.00%)      }
      .           
      .               pub fn find_field_index(self, ident: Ident, variant: &VariantDef) -> Option<usize> {
      .                   variant
      .                       .fields
      .                       .iter()
      .                       .position(|field| self.hygienic_eq(ident, field.ident(self), variant.def_id))
      .               }
      .           
      .               /// Returns `true` if the impls are the same polarity and the trait either
      .               /// has no items or is annotated `#[marker]` and prevents item overrides.
    260 ( 0.00%)      pub fn impls_are_allowed_to_overlap(
      .                   self,
      .                   def_id1: DefId,
      .                   def_id2: DefId,
      .               ) -> Option<ImplOverlapKind> {
      .                   // If either trait impl references an error, they're allowed to overlap,
      .                   // as one of them essentially doesn't exist.
      .                   if self.impl_trait_ref(def_id1).map_or(false, |tr| tr.references_error())
     52 ( 0.00%)              || self.impl_trait_ref(def_id2).map_or(false, |tr| tr.references_error())
      .                   {
      .                       return Some(ImplOverlapKind::Permitted { marker: false });
      .                   }
      .           
    257 ( 0.00%)          match (self.impl_polarity(def_id1), self.impl_polarity(def_id2)) {
      .                       (ImplPolarity::Reservation, _) | (_, ImplPolarity::Reservation) => {
      .                           // `#[rustc_reservation_impl]` impls don't overlap with anything
      .                           debug!(
      .                               "impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (reservations)",
      .                               def_id1, def_id2
      .                           );
      .                           return Some(ImplOverlapKind::Permitted { marker: false });
      .                       }
-- line 1997 ----------------------------------------
-- line 2004 ----------------------------------------
      .                           );
      .                           return None;
      .                       }
      .                       (ImplPolarity::Positive, ImplPolarity::Positive)
      .                       | (ImplPolarity::Negative, ImplPolarity::Negative) => {}
      .                   };
      .           
      .                   let is_marker_overlap = {
    230 ( 0.00%)              let is_marker_impl = |def_id: DefId| -> bool {
     69 ( 0.00%)                  let trait_ref = self.impl_trait_ref(def_id);
     69 ( 0.00%)                  trait_ref.map_or(false, |tr| self.trait_def(tr.def_id).is_marker)
    184 ( 0.00%)              };
     92 ( 0.00%)              is_marker_impl(def_id1) && is_marker_impl(def_id2)
      .                   };
      .           
      .                   if is_marker_overlap {
      .                       debug!(
      .                           "impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (marker overlap)",
      .                           def_id1, def_id2
      .                       );
      .                       Some(ImplOverlapKind::Permitted { marker: true })
      .                   } else {
     92 ( 0.00%)              if let Some(self_ty1) = self.issue33140_self_ty(def_id1) {
      .                           if let Some(self_ty2) = self.issue33140_self_ty(def_id2) {
      .                               if self_ty1 == self_ty2 {
      .                                   debug!(
      .                                       "impls_are_allowed_to_overlap({:?}, {:?}) - issue #33140 HACK",
      .                                       def_id1, def_id2
      .                                   );
      .                                   return Some(ImplOverlapKind::Issue33140);
      .                               } else {
-- line 2034 ----------------------------------------
-- line 2038 ----------------------------------------
      .                                   );
      .                               }
      .                           }
      .                       }
      .           
      .                       debug!("impls_are_allowed_to_overlap({:?}, {:?}) = None", def_id1, def_id2);
      .                       None
      .                   }
    208 ( 0.00%)      }
      .           
      .               /// Returns `ty::VariantDef` if `res` refers to a struct,
      .               /// or variant or their constructors, panics otherwise.
     91 ( 0.00%)      pub fn expect_variant_res(self, res: Res) -> &'tcx VariantDef {
    156 ( 0.00%)          match res {
      .                       Res::Def(DefKind::Variant, did) => {
      .                           let enum_did = self.parent(did).unwrap();
      .                           self.adt_def(enum_did).variant_with_id(did)
      .                       }
      .                       Res::Def(DefKind::Struct | DefKind::Union, did) => self.adt_def(did).non_enum_variant(),
      .                       Res::Def(DefKind::Ctor(CtorOf::Variant, ..), variant_ctor_did) => {
      .                           let variant_did = self.parent(variant_ctor_did).unwrap();
      .                           let enum_did = self.parent(variant_did).unwrap();
-- line 2059 ----------------------------------------
-- line 2060 ----------------------------------------
      .                           self.adt_def(enum_did).variant_with_ctor_id(variant_ctor_did)
      .                       }
      .                       Res::Def(DefKind::Ctor(CtorOf::Struct, ..), ctor_did) => {
      .                           let struct_did = self.parent(ctor_did).expect("struct ctor has no parent");
      .                           self.adt_def(struct_did).non_enum_variant()
      .                       }
      .                       _ => bug!("expect_variant_res used with unexpected res {:?}", res),
      .                   }
    104 ( 0.00%)      }
      .           
      .               /// Returns the possibly-auto-generated MIR of a `(DefId, Subst)` pair.
      .               pub fn instance_mir(self, instance: ty::InstanceDef<'tcx>) -> &'tcx Body<'tcx> {
      .                   match instance {
      .                       ty::InstanceDef::Item(def) => match self.def_kind(def.did) {
      .                           DefKind::Const
      .                           | DefKind::Static
      .                           | DefKind::AssocConst
-- line 2076 ----------------------------------------
-- line 2091 ----------------------------------------
      .                       | ty::InstanceDef::Virtual(..)
      .                       | ty::InstanceDef::ClosureOnceShim { .. }
      .                       | ty::InstanceDef::DropGlue(..)
      .                       | ty::InstanceDef::CloneShim(..) => self.mir_shims(instance),
      .                   }
      .               }
      .           
      .               /// Gets the attributes of a definition.
 34,050 ( 0.01%)      pub fn get_attrs(self, did: DefId) -> Attributes<'tcx> {
 10,215 ( 0.00%)          if let Some(did) = did.as_local() {
  9,399 ( 0.00%)              self.hir().attrs(self.hir().local_def_id_to_hir_id(did))
      .                   } else {
      .                       self.item_attrs(did)
      .                   }
 27,240 ( 0.01%)      }
      .           
      .               /// Determines whether an item is annotated with an attribute.
  4,012 ( 0.00%)      pub fn has_attr(self, did: DefId, attr: Symbol) -> bool {
 12,681 ( 0.00%)          self.sess.contains_name(&self.get_attrs(did), attr)
      .               }
      .           
      .               /// Determines whether an item is annotated with `doc(hidden)`.
    273 ( 0.00%)      pub fn is_doc_hidden(self, did: DefId) -> bool {
     39 ( 0.00%)          self.get_attrs(did)
      .                       .iter()
    556 ( 0.00%)              .filter_map(|attr| if attr.has_name(sym::doc) { attr.meta_item_list() } else { None })
      .                       .any(|items| items.iter().any(|item| item.has_name(sym::hidden)))
    312 ( 0.00%)      }
      .           
      .               /// Returns `true` if this is an `auto trait`.
  6,461 ( 0.00%)      pub fn trait_is_auto(self, trait_def_id: DefId) -> bool {
    923 ( 0.00%)          self.trait_def(trait_def_id).has_auto_impl
  7,384 ( 0.00%)      }
      .           
      .               /// Returns layout of a generator. Layout might be unavailable if the
      .               /// generator is tainted by errors.
      .               pub fn generator_layout(self, def_id: DefId) -> Option<&'tcx GeneratorLayout<'tcx>> {
      .                   self.optimized_mir(def_id).generator_layout()
      .               }
      .           
      .               /// Given the `DefId` of an impl, returns the `DefId` of the trait it implements.
      .               /// If it implements no trait, returns `None`.
    203 ( 0.00%)      pub fn trait_id_of_impl(self, def_id: DefId) -> Option<DefId> {
      .                   self.impl_trait_ref(def_id).map(|tr| tr.def_id)
    261 ( 0.00%)      }
      .           
      .               /// If the given defid describes a method belonging to an impl, returns the
      .               /// `DefId` of the impl that the method belongs to; otherwise, returns `None`.
     92 ( 0.00%)      pub fn impl_of_method(self, def_id: DefId) -> Option<DefId> {
    368 ( 0.00%)          self.opt_associated_item(def_id).and_then(|trait_item| match trait_item.container {
      .                       TraitContainer(_) => None,
      .                       ImplContainer(def_id) => Some(def_id),
      .                   })
    184 ( 0.00%)      }
      .           
      .               /// Looks up the span of `impl_did` if the impl is local; otherwise returns `Err`
      .               /// with the name of the crate containing the impl.
      .               pub fn span_of_impl(self, impl_did: DefId) -> Result<Span, Symbol> {
      .                   if let Some(impl_did) = impl_did.as_local() {
      .                       Ok(self.def_span(impl_did))
      .                   } else {
      .                       Err(self.crate_name(impl_did.krate))
      .                   }
      .               }
      .           
      .               /// Hygienically compares a use-site name (`use_name`) for a field or an associated item with
      .               /// its supposed definition name (`def_name`). The method also needs `DefId` of the supposed
      .               /// definition's parent/scope to perform comparison.
  1,632 ( 0.00%)      pub fn hygienic_eq(self, use_name: Ident, def_name: Ident, def_parent_def_id: DefId) -> bool {
      .                   // We could use `Ident::eq` here, but we deliberately don't. The name
      .                   // comparison fails frequently, and we want to avoid the expensive
      .                   // `normalize_to_macros_2_0()` calls required for the span comparison whenever possible.
    204 ( 0.00%)          use_name.name == def_name.name
    612 ( 0.00%)              && use_name
      .                           .span
      .                           .ctxt()
      .                           .hygienic_eq(def_name.span.ctxt(), self.expn_that_defined(def_parent_def_id))
  1,632 ( 0.00%)      }
      .           
    387 ( 0.00%)      pub fn adjust_ident(self, mut ident: Ident, scope: DefId) -> Ident {
     86 ( 0.00%)          ident.span.normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope));
     86 ( 0.00%)          ident
    344 ( 0.00%)      }
      .           
  2,466 ( 0.00%)      pub fn adjust_ident_and_get_scope(
      .                   self,
      .                   mut ident: Ident,
      .                   scope: DefId,
      .                   block: hir::HirId,
      .               ) -> (Ident, DefId) {
    274 ( 0.00%)          let scope = ident
      .                       .span
      .                       .normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope))
      .                       .and_then(|actual_expansion| actual_expansion.expn_data().parent_module)
  1,096 ( 0.00%)              .unwrap_or_else(|| self.parent_module(block).to_def_id());
  1,644 ( 0.00%)          (ident, scope)
  2,466 ( 0.00%)      }
      .           
    980 ( 0.00%)      pub fn is_object_safe(self, key: DefId) -> bool {
      .                   self.object_safety_violations(key).is_empty()
  1,120 ( 0.00%)      }
      .           }
      .           
      .           /// Yields the parent function's `LocalDefId` if `def_id` is an `impl Trait` definition.
  1,143 ( 0.00%)  pub fn is_impl_trait_defn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<LocalDefId> {
  1,143 ( 0.00%)      let def_id = def_id.as_local()?;
  1,276 ( 0.00%)      if let Node::Item(item) = tcx.hir().get_by_def_id(def_id) {
    408 ( 0.00%)          if let hir::ItemKind::OpaqueTy(ref opaque_ty) = item.kind {
      .                       return match opaque_ty.origin {
      .                           hir::OpaqueTyOrigin::FnReturn(parent) | hir::OpaqueTyOrigin::AsyncFn(parent) => {
      .                               Some(parent)
      .                           }
      .                           hir::OpaqueTyOrigin::TyAlias => None,
      .                       };
      .                   }
      .               }
      .               None
  1,524 ( 0.00%)  }
      .           
      .           pub fn int_ty(ity: ast::IntTy) -> IntTy {
      .               match ity {
      .                   ast::IntTy::Isize => IntTy::Isize,
      .                   ast::IntTy::I8 => IntTy::I8,
      .                   ast::IntTy::I16 => IntTy::I16,
      .                   ast::IntTy::I32 => IntTy::I32,
      .                   ast::IntTy::I64 => IntTy::I64,
-- line 2216 ----------------------------------------
-- line 2231 ----------------------------------------
      .           
      .           pub fn float_ty(fty: ast::FloatTy) -> FloatTy {
      .               match fty {
      .                   ast::FloatTy::F32 => FloatTy::F32,
      .                   ast::FloatTy::F64 => FloatTy::F64,
      .               }
      .           }
      .           
      1 ( 0.00%)  pub fn ast_int_ty(ity: IntTy) -> ast::IntTy {
      .               match ity {
      .                   IntTy::Isize => ast::IntTy::Isize,
      .                   IntTy::I8 => ast::IntTy::I8,
      .                   IntTy::I16 => ast::IntTy::I16,
      .                   IntTy::I32 => ast::IntTy::I32,
      .                   IntTy::I64 => ast::IntTy::I64,
      .                   IntTy::I128 => ast::IntTy::I128,
      .               }
      1 ( 0.00%)  }
      .           
      .           pub fn ast_uint_ty(uty: UintTy) -> ast::UintTy {
      .               match uty {
      .                   UintTy::Usize => ast::UintTy::Usize,
      .                   UintTy::U8 => ast::UintTy::U8,
      .                   UintTy::U16 => ast::UintTy::U16,
      .                   UintTy::U32 => ast::UintTy::U32,
      .                   UintTy::U64 => ast::UintTy::U64,
-- line 2256 ----------------------------------------
-- line 2262 ----------------------------------------
      .               closure::provide(providers);
      .               context::provide(providers);
      .               erase_regions::provide(providers);
      .               layout::provide(providers);
      .               util::provide(providers);
      .               print::provide(providers);
      .               super::util::bug::provide(providers);
      .               super::middle::provide(providers);
      8 ( 0.00%)      *providers = ty::query::Providers {
      .                   trait_impls_of: trait_def::trait_impls_of_provider,
      .                   type_uninhabited_from: inhabitedness::type_uninhabited_from,
      .                   const_param_default: consts::const_param_default,
      .                   vtable_allocation: vtable::vtable_allocation_provider,
      .                   ..*providers
      .               };
      1 ( 0.00%)  }
      .           
      .           /// A map for the local crate mapping each type to a vector of its
      .           /// inherent impls. This is not meant to be used outside of coherence;
      .           /// rather, you should request the vector for a specific type via
      .           /// `tcx.inherent_impls(def_id)` so as to minimize your dependencies
      .           /// (constructing this map requires touching the entire crate).
      .           #[derive(Clone, Debug, Default, HashStable)]
      .           pub struct CrateInherentImpls {
-- line 2285 ----------------------------------------
-- line 2288 ----------------------------------------
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, HashStable)]
      .           pub struct SymbolName<'tcx> {
      .               /// `&str` gives a consistent ordering, which ensures reproducible builds.
      .               pub name: &'tcx str,
      .           }
      .           
      .           impl<'tcx> SymbolName<'tcx> {
      6 ( 0.00%)      pub fn new(tcx: TyCtxt<'tcx>, name: &str) -> SymbolName<'tcx> {
      .                   SymbolName {
      .                       name: unsafe { str::from_utf8_unchecked(tcx.arena.alloc_slice(name.as_bytes())) },
      .                   }
      8 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> fmt::Display for SymbolName<'tcx> {
      .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Display::fmt(&self.name, fmt)
      .               }
      .           }
      .           
-- line 2308 ----------------------------------------

742,501 ( 0.19%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 71 ----------------------------------------
      .               fn default() -> FxHasher {
      .                   FxHasher { hash: 0 }
      .               }
      .           }
      .           
      .           impl FxHasher {
      .               #[inline]
      .               fn add_to_hash(&mut self, i: usize) {
299,414 ( 0.08%)          self.hash = self.hash.rotate_left(5).bitxor(i).wrapping_mul(K);
      .               }
      .           }
      .           
      .           impl Hasher for FxHasher {
      .               #[inline]
  1,422 ( 0.00%)      fn write(&mut self, mut bytes: &[u8]) {
      .                   #[cfg(target_pointer_width = "32")]
      .                   let read_usize = |bytes: &[u8]| u32::from_ne_bytes(bytes[..4].try_into().unwrap());
      .                   #[cfg(target_pointer_width = "64")]
      .                   let read_usize = |bytes: &[u8]| u64::from_ne_bytes(bytes[..8].try_into().unwrap());
      .           
 55,409 ( 0.01%)          let mut hash = FxHasher { hash: self.hash };
      .                   assert!(size_of::<usize>() <= 8);
623,295 ( 0.16%)          while bytes.len() >= size_of::<usize>() {
      .                       hash.add_to_hash(read_usize(bytes) as usize);
      .                       bytes = &bytes[size_of::<usize>()..];
      .                   }
109,562 ( 0.03%)          if (size_of::<usize>() > 4) && (bytes.len() >= 4) {
      .                       hash.add_to_hash(u32::from_ne_bytes(bytes[..4].try_into().unwrap()) as usize);
      .                       bytes = &bytes[4..];
      .                   }
109,562 ( 0.03%)          if (size_of::<usize>() > 2) && bytes.len() >= 2 {
      .                       hash.add_to_hash(u16::from_ne_bytes(bytes[..2].try_into().unwrap()) as usize);
      .                       bytes = &bytes[2..];
      .                   }
122,234 ( 0.03%)          if (size_of::<usize>() > 1) && bytes.len() >= 1 {
 28,355 ( 0.01%)              hash.add_to_hash(bytes[0] as usize);
      .                   }
  2,287 ( 0.00%)          self.hash = hash.hash;
  1,422 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn write_u8(&mut self, i: u8) {
     31 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u16(&mut self, i: u16) {
    723 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u32(&mut self, i: u32) {
342,308 ( 0.09%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[cfg(target_pointer_width = "32")]
      .               #[inline]
      .               fn write_u64(&mut self, i: u64) {
      .                   self.add_to_hash(i as usize);
      .                   self.add_to_hash((i >> 32) as usize);
      .               }
-- line 131 ----------------------------------------

      1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs
--------------------------------------------------------------------------------
Ir              

-- line 26 ----------------------------------------
     .           pub struct UnmatchedBrace {
     .               pub expected_delim: token::DelimToken,
     .               pub found_delim: Option<token::DelimToken>,
     .               pub found_span: Span,
     .               pub unclosed_span: Option<Span>,
     .               pub candidate_span: Option<Span>,
     .           }
     .           
   252 ( 0.00%)  crate fn parse_token_trees<'a>(
     .               sess: &'a ParseSess,
     .               src: &'a str,
     .               start_pos: BytePos,
     .               override_span: Option<Span>,
     .           ) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
     .               StringReader { sess, start_pos, pos: start_pos, end_src_index: src.len(), src, override_span }
     .                   .into_token_trees()
   162 ( 0.00%)  }
     .           
     .           struct StringReader<'a> {
     .               sess: &'a ParseSess,
     .               /// Initial position, read-only.
     .               start_pos: BytePos,
     .               /// The absolute offset within the source_map of the current character.
     .               pos: BytePos,
     .               /// Stop reading src at this index.
-- line 50 ----------------------------------------
-- line 51 ----------------------------------------
     .               end_src_index: usize,
     .               /// Source text to tokenize.
     .               src: &'a str,
     .               override_span: Option<Span>,
     .           }
     .           
     .           impl<'a> StringReader<'a> {
     .               fn mk_sp(&self, lo: BytePos, hi: BytePos) -> Span {
 9,969 ( 0.00%)          self.override_span.unwrap_or_else(|| Span::with_root_ctxt(lo, hi))
     .               }
     .           
     .               /// Returns the next token, and info about preceding whitespace, if any.
51,030 ( 0.01%)      fn next_token(&mut self) -> (Spacing, Token) {
     .                   let mut spacing = Spacing::Joint;
     .           
     .                   // Skip `#!` at the start of the file
14,580 ( 0.00%)          let start_src_index = self.src_index(self.pos);
21,870 ( 0.01%)          let text: &str = &self.src[start_src_index..self.end_src_index];
     .                   let is_beginning_of_file = self.pos == self.start_pos;
 7,290 ( 0.00%)          if is_beginning_of_file {
    72 ( 0.00%)              if let Some(shebang_len) = rustc_lexer::strip_shebang(text) {
     .                           self.pos = self.pos + BytePos::from_usize(shebang_len);
     .                           spacing = Spacing::Alone;
     .                       }
     .                   }
     .           
     .                   // Skip trivial (whitespace & comments) tokens
     .                   loop {
14,038 ( 0.00%)              let start_src_index = self.src_index(self.pos);
31,992 ( 0.01%)              let text: &str = &self.src[start_src_index..self.end_src_index];
     .           
10,664 ( 0.00%)              if text.is_empty() {
     .                           let span = self.mk_sp(self.pos, self.pos);
    90 ( 0.00%)                  return (spacing, Token::new(token::Eof, span));
     .                       }
     .           
31,938 ( 0.01%)              let token = rustc_lexer::first_token(text);
     .           
21,292 ( 0.01%)              let start = self.pos;
10,646 ( 0.00%)              self.pos = self.pos + BytePos::from_usize(token.len);
     .           
     .                       debug!("next_token: {:?}({:?})", token.kind, self.str_from(start));
     .           
87,268 ( 0.02%)              match self.cook_lexer_token(token.kind, start) {
58,176 ( 0.01%)                  Some(kind) => {
     .                               let span = self.mk_sp(start, self.pos);
43,632 ( 0.01%)                      return (spacing, Token::new(kind, span));
     .                           }
     .                           None => spacing = Spacing::Alone,
     .                       }
     .                   }
65,610 ( 0.02%)      }
     .           
     .               /// Report a fatal lexical error with a given span.
     .               fn fatal_span(&self, sp: Span, m: &str) -> FatalError {
     .                   self.sess.span_diagnostic.span_fatal(sp, m)
     .               }
     .           
     .               /// Report a lexical error with a given span.
     .               fn err_span(&self, sp: Span, m: &str) {
-- line 110 ----------------------------------------
-- line 130 ----------------------------------------
     .               ) -> DiagnosticBuilder<'a> {
     .                   self.sess
     .                       .span_diagnostic
     .                       .struct_span_fatal(self.mk_sp(from_pos, to_pos), &format!("{}: {}", m, escaped_char(c)))
     .               }
     .           
     .               /// Detect usages of Unicode codepoints changing the direction of the text on screen and loudly
     .               /// complain about it.
    28 ( 0.00%)      fn lint_unicode_text_flow(&self, start: BytePos) {
     .                   // Opening delimiter of the length 2 is not included into the comment text.
     .                   let content_start = start + BytePos(2);
     .                   let content = self.str_from(content_start);
     .                   if contains_text_flow_control_chars(content) {
     .                       let span = self.mk_sp(start, self.pos);
     .                       self.sess.buffer_lint_with_diagnostic(
     .                           &TEXT_DIRECTION_CODEPOINT_IN_COMMENT,
     .                           span,
     .                           ast::CRATE_NODE_ID,
     .                           "unicode codepoint changing visible direction of text present in comment",
     .                           BuiltinLintDiagnostics::UnicodeTextFlow(span, content.to_string()),
     .                       );
     .                   }
    32 ( 0.00%)      }
     .           
     .               /// Turns simple `rustc_lexer::TokenKind` enum into a rich
     .               /// `rustc_ast::TokenKind`. This turns strings into interned
     .               /// symbols and runs additional validation.
     .               fn cook_lexer_token(&self, token: rustc_lexer::TokenKind, start: BytePos) -> Option<TokenKind> {
53,230 ( 0.01%)          Some(match token {
   529 ( 0.00%)              rustc_lexer::TokenKind::LineComment { doc_style } => {
     .                           // Skip non-doc comments
 2,633 ( 0.00%)                  let doc_style = if let Some(doc_style) = doc_style {
     .                               doc_style
     .                           } else {
     .                               self.lint_unicode_text_flow(start);
     .                               return None;
     .                           };
     .           
     .                           // Opening delimiter of the length 3 is not included into the symbol.
     .                           let content_start = start + BytePos(3);
     .                           let content = self.str_from(content_start);
 2,625 ( 0.00%)                  self.cook_doc_comment(content_start, content, CommentKind::Line, doc_style)
     .                       }
     .                       rustc_lexer::TokenKind::BlockComment { doc_style, terminated } => {
     .                           if !terminated {
     .                               let msg = match doc_style {
     .                                   Some(_) => "unterminated block doc-comment",
     .                                   None => "unterminated block comment",
     .                               };
     .                               let last_bpos = self.pos;
-- line 179 ----------------------------------------
-- line 198 ----------------------------------------
     .                           let content_end = self.pos - BytePos(if terminated { 2 } else { 0 });
     .                           let content = self.str_from_to(content_start, content_end);
     .                           self.cook_doc_comment(content_start, content, CommentKind::Block, doc_style)
     .                       }
     .                       rustc_lexer::TokenKind::Whitespace => return None,
     .                       rustc_lexer::TokenKind::Ident
     .                       | rustc_lexer::TokenKind::RawIdent
     .                       | rustc_lexer::TokenKind::UnknownPrefix => {
10,644 ( 0.00%)                  let is_raw_ident = token == rustc_lexer::TokenKind::RawIdent;
13,305 ( 0.00%)                  let is_unknown_prefix = token == rustc_lexer::TokenKind::UnknownPrefix;
     .                           let mut ident_start = start;
 5,322 ( 0.00%)                  if is_raw_ident {
     .                               ident_start = ident_start + BytePos(2);
     .                           }
 7,983 ( 0.00%)                  if is_unknown_prefix {
     .                               self.report_unknown_prefix(start);
     .                           }
13,305 ( 0.00%)                  let sym = nfc_normalize(self.str_from(ident_start));
     .                           let span = self.mk_sp(start, self.pos);
10,644 ( 0.00%)                  self.sess.symbol_gallery.insert(sym, span);
 5,322 ( 0.00%)                  if is_raw_ident {
     .                               if !sym.can_be_raw() {
     .                                   self.err_span(span, &format!("`{}` cannot be a raw identifier", sym));
     .                               }
     .                               self.sess.raw_identifier_spans.borrow_mut().push(span);
     .                           }
18,627 ( 0.00%)                  token::Ident(sym, is_raw_ident)
     .                       }
     .                       rustc_lexer::TokenKind::InvalidIdent
     .                           // Do not recover an identifier with emoji if the codepoint is a confusable
     .                           // with a recoverable substitution token, like `➖`.
     .                           if UNICODE_ARRAY
     .                               .iter()
     .                               .find(|&&(c, _, _)| {
     .                                   let sym = self.str_from(start);
-- line 232 ----------------------------------------
-- line 234 ----------------------------------------
     .                               })
     .                               .is_none() =>
     .                       {
     .                           let sym = nfc_normalize(self.str_from(start));
     .                           let span = self.mk_sp(start, self.pos);
     .                           self.sess.bad_unicode_identifiers.borrow_mut().entry(sym).or_default().push(span);
     .                           token::Ident(sym, false)
     .                       }
 1,264 ( 0.00%)              rustc_lexer::TokenKind::Literal { kind, suffix_start } => {
     .                           let suffix_start = start + BytePos(suffix_start as u32);
     .                           let (kind, symbol) = self.cook_lexer_literal(start, suffix_start, kind);
   237 ( 0.00%)                  let suffix = if suffix_start < self.pos {
     .                               let string = self.str_from(suffix_start);
     .                               if string == "_" {
     .                                   self.sess
     .                                       .span_diagnostic
     .                                       .struct_span_warn(
     .                                           self.mk_sp(suffix_start, self.pos),
     .                                           "underscore literal suffix is not allowed",
     .                                       )
-- line 253 ----------------------------------------
-- line 264 ----------------------------------------
     .                                       .emit();
     .                                   None
     .                               } else {
     .                                   Some(Symbol::intern(string))
     .                               }
     .                           } else {
     .                               None
     .                           };
   632 ( 0.00%)                  token::Literal(token::Lit { kind, symbol, suffix })
     .                       }
    78 ( 0.00%)              rustc_lexer::TokenKind::Lifetime { starts_with_number } => {
     .                           // Include the leading `'` in the real identifier, for macro
     .                           // expansion purposes. See #12512 for the gory details of why
     .                           // this is necessary.
     .                           let lifetime_name = self.str_from(start);
    39 ( 0.00%)                  if starts_with_number {
     .                               self.err_span_(start, self.pos, "lifetimes cannot start with a number");
     .                           }
   117 ( 0.00%)                  let ident = Symbol::intern(lifetime_name);
   156 ( 0.00%)                  token::Lifetime(ident)
     .                       }
     .                       rustc_lexer::TokenKind::Semi => token::Semi,
     .                       rustc_lexer::TokenKind::Comma => token::Comma,
     .                       rustc_lexer::TokenKind::Dot => token::Dot,
     .                       rustc_lexer::TokenKind::OpenParen => token::OpenDelim(token::Paren),
     .                       rustc_lexer::TokenKind::CloseParen => token::CloseDelim(token::Paren),
     .                       rustc_lexer::TokenKind::OpenBrace => token::OpenDelim(token::Brace),
     .                       rustc_lexer::TokenKind::CloseBrace => token::CloseDelim(token::Brace),
-- line 291 ----------------------------------------
-- line 324 ----------------------------------------
     .                               err.help("source files must contain UTF-8 encoded text, unexpected null bytes might occur when a different encoding is used");
     .                           }
     .                           err.emit();
     .                           token?
     .                       }
     .                   })
     .               }
     .           
 6,300 ( 0.00%)      fn cook_doc_comment(
     .                   &self,
     .                   content_start: BytePos,
     .                   content: &str,
     .                   comment_kind: CommentKind,
     .                   doc_style: DocStyle,
     .               ) -> TokenKind {
   525 ( 0.00%)          if content.contains('\r') {
     .                       for (idx, _) in content.char_indices().filter(|&(_, c)| c == '\r') {
     .                           self.err_span_(
     .                               content_start + BytePos(idx as u32),
     .                               content_start + BytePos(idx as u32 + 1),
     .                               match comment_kind {
     .                                   CommentKind::Line => "bare CR not allowed in doc-comment",
     .                                   CommentKind::Block => "bare CR not allowed in block doc-comment",
     .                               },
-- line 347 ----------------------------------------
-- line 349 ----------------------------------------
     .                       }
     .                   }
     .           
     .                   let attr_style = match doc_style {
     .                       DocStyle::Outer => AttrStyle::Outer,
     .                       DocStyle::Inner => AttrStyle::Inner,
     .                   };
     .           
 1,575 ( 0.00%)          token::DocComment(comment_kind, attr_style, Symbol::intern(content))
 7,875 ( 0.00%)      }
     .           
     .               fn cook_lexer_literal(
     .                   &self,
     .                   start: BytePos,
     .                   suffix_start: BytePos,
     .                   kind: rustc_lexer::LiteralKind,
     .               ) -> (token::LitKind, Symbol) {
     .                   // prefix means `"` or `br"` or `r###"`, ...
-- line 366 ----------------------------------------
-- line 380 ----------------------------------------
     .                               self.sess.span_diagnostic.span_fatal_with_code(
     .                                   self.mk_sp(start + BytePos(1), suffix_start),
     .                                   "unterminated byte constant",
     .                                   error_code!(E0763),
     .                               )
     .                           }
     .                           (token::Byte, Mode::Byte, 2, 1) // b' '
     .                       }
    74 ( 0.00%)              rustc_lexer::LiteralKind::Str { terminated } => {
    74 ( 0.00%)                  if !terminated {
     .                               self.sess.span_diagnostic.span_fatal_with_code(
     .                                   self.mk_sp(start, suffix_start),
     .                                   "unterminated double quote string",
     .                                   error_code!(E0765),
     .                               )
     .                           }
     .                           (token::Str, Mode::Str, 1, 1) // " "
     .                       }
-- line 397 ----------------------------------------
-- line 410 ----------------------------------------
     .                           let n = u32::from(n_hashes);
     .                           (token::StrRaw(n_hashes), Mode::RawStr, 2 + n, 1 + n) // r##" "##
     .                       }
     .                       rustc_lexer::LiteralKind::RawByteStr { n_hashes, err } => {
     .                           self.report_raw_str_error(start, err);
     .                           let n = u32::from(n_hashes);
     .                           (token::ByteStrRaw(n_hashes), Mode::RawByteStr, 3 + n, 1 + n) // br##" "##
     .                       }
    10 ( 0.00%)              rustc_lexer::LiteralKind::Int { base, empty_int } => {
     5 ( 0.00%)                  return if empty_int {
     .                               self.sess
     .                                   .span_diagnostic
     .                                   .struct_span_err_with_code(
     .                                       self.mk_sp(start, suffix_start),
     .                                       "no valid digits found for number",
     .                                       error_code!(E0768),
     .                                   )
     .                                   .emit();
     .                               (token::Integer, sym::integer(0))
     .                           } else {
     .                               self.validate_int_literal(base, start, suffix_start);
    15 ( 0.00%)                      (token::Integer, self.symbol_from_to(start, suffix_start))
     .                           };
     .                       }
     .                       rustc_lexer::LiteralKind::Float { base, empty_exponent } => {
     .                           if empty_exponent {
     .                               self.err_span_(start, self.pos, "expected at least one digit in exponent");
     .                           }
     .           
     .                           match base {
-- line 439 ----------------------------------------
-- line 452 ----------------------------------------
     .                           }
     .           
     .                           let id = self.symbol_from_to(start, suffix_start);
     .                           return (token::Float, id);
     .                       }
     .                   };
     .                   let content_start = start + BytePos(prefix_len);
     .                   let content_end = suffix_start - BytePos(postfix_len);
   222 ( 0.00%)          let id = self.symbol_from_to(content_start, content_end);
     .                   self.validate_literal_escape(mode, content_start, content_end, prefix_len, postfix_len);
     .                   (lit_kind, id)
     .               }
     .           
     .               #[inline]
     .               fn src_index(&self, pos: BytePos) -> usize {
     .                   (pos - self.start_pos).to_usize()
     .               }
     .           
     .               /// Slice of the source text from `start` up to but excluding `self.pos`,
     .               /// meaning the slice does not include the character `self.ch`.
     .               fn str_from(&self, start: BytePos) -> &str {
20,001 ( 0.01%)          self.str_from_to(start, self.pos)
     .               }
     .           
     .               /// As symbol_from, with an explicit endpoint.
     .               fn symbol_from_to(&self, start: BytePos, end: BytePos) -> Symbol {
     .                   debug!("taking an ident from {:?} to {:?}", start, end);
   923 ( 0.00%)          Symbol::intern(self.str_from_to(start, end))
     .               }
     .           
     .               /// Slice of the source text spanning from `start` up to but excluding `end`.
 3,382 ( 0.00%)      fn str_from_to(&self, start: BytePos, end: BytePos) -> &str {
     .                   &self.src[self.src_index(start)..self.src_index(end)]
13,528 ( 0.00%)      }
     .           
     .               fn report_raw_str_error(&self, start: BytePos, opt_err: Option<RawStrError>) {
     .                   match opt_err {
     .                       Some(RawStrError::InvalidStarter { bad_char }) => {
     .                           self.report_non_started_raw_string(start, bad_char)
     .                       }
     .                       Some(RawStrError::NoTerminator { expected, found, possible_terminator_offset }) => self
     .                           .report_unterminated_raw_string(start, expected, possible_terminator_offset, found),
-- line 493 ----------------------------------------
-- line 609 ----------------------------------------
     .               fn validate_literal_escape(
     .                   &self,
     .                   mode: Mode,
     .                   content_start: BytePos,
     .                   content_end: BytePos,
     .                   prefix_len: u32,
     .                   postfix_len: u32,
     .               ) {
   444 ( 0.00%)          let lit_content = self.str_from_to(content_start, content_end);
 8,172 ( 0.00%)          unescape::unescape_literal(lit_content, mode, &mut |range, result| {
     .                       // Here we only check for errors. The actual unescaping is done later.
 1,636 ( 0.00%)              if let Err(err) = result {
     .                           let span_with_quotes = self
     .                               .mk_sp(content_start - BytePos(prefix_len), content_end + BytePos(postfix_len));
     .                           let (start, end) = (range.start as u32, range.end as u32);
     .                           let lo = content_start + BytePos(start);
     .                           let hi = lo + BytePos(end - start);
     .                           let span = self.mk_sp(lo, hi);
     .                           emit_unescape_error(
     .                               &self.sess.span_diagnostic,
-- line 628 ----------------------------------------
-- line 629 ----------------------------------------
     .                               lit_content,
     .                               span_with_quotes,
     .                               span,
     .                               mode,
     .                               range,
     .                               err,
     .                           );
     .                       }
 7,362 ( 0.00%)          });
     .               }
     .           
     .               fn validate_int_literal(&self, base: Base, content_start: BytePos, content_end: BytePos) {
    20 ( 0.00%)          let base = match base {
     .                       Base::Binary => 2,
     .                       Base::Octal => 8,
     .                       _ => return,
     .                   };
     .                   let s = self.str_from_to(content_start + BytePos(2), content_end);
     .                   for (idx, c) in s.char_indices() {
     .                       let idx = idx as u32;
     .                       if c != '_' && c.to_digit(base).is_none() {
-- line 649 ----------------------------------------
-- line 650 ----------------------------------------
     .                           let lo = content_start + BytePos(2 + idx);
     .                           let hi = content_start + BytePos(2 + idx + c.len_utf8() as u32);
     .                           self.err_span_(lo, hi, &format!("invalid digit for a base {} literal", base));
     .                       }
     .                   }
     .               }
     .           }
     .           
23,949 ( 0.01%)  pub fn nfc_normalize(string: &str) -> Symbol {
     .               use unicode_normalization::{is_nfc_quick, IsNormalized, UnicodeNormalization};
 5,322 ( 0.00%)      match is_nfc_quick(string.chars()) {
26,610 ( 0.01%)          IsNormalized::Yes => Symbol::intern(string),
     .                   _ => {
     .                       let normalized_str: String = string.chars().nfc().collect();
     .                       Symbol::intern(&normalized_str)
     .                   }
     .               }
     .           }

35,958 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 111 ----------------------------------------
        .           const EMPTY: u8 = 0b1111_1111;
        .           
        .           /// Control byte value for a deleted bucket.
        .           const DELETED: u8 = 0b1000_0000;
        .           
        .           /// Checks whether a control byte represents a full bucket (top bit is clear).
        .           #[inline]
        .           fn is_full(ctrl: u8) -> bool {
  584,018 ( 0.15%)      ctrl & 0x80 == 0
        .           }
        .           
        .           /// Checks whether a control byte represents a special value (top bit is set).
        .           #[inline]
        .           fn is_special(ctrl: u8) -> bool {
        .               ctrl & 0x80 != 0
        .           }
        .           
        .           /// Checks whether a special control value is EMPTY (just check 1 bit).
        .           #[inline]
        .           fn special_is_empty(ctrl: u8) -> bool {
        .               debug_assert!(is_special(ctrl));
   47,171 ( 0.01%)      ctrl & 0x01 != 0
        .           }
        .           
        .           /// Primary hash function, used to select the initial bucket to probe from.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h1(hash: u64) -> usize {
        .               // On 32-bit platforms we simply ignore the higher hash bits.
        .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
        .           /// Secondary hash function, saved in the low 7 bits of the control byte.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h2(hash: u64) -> u8 {
        .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
        .               // value, some hash functions (such as FxHash) produce a usize result
        .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
        .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
5,950,872 ( 1.51%)      let top7 = hash >> (hash_len * 8 - 7);
        .               (top7 & 0x7f) as u8 // truncation
        .           }
        .           
        .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
        .           /// table size is a power of two) to visit every group of elements exactly once.
        .           ///
        .           /// A triangular probe has us jump by 1 more group every time. So first we
        .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
        .               #[inline]
        .               fn move_next(&mut self, bucket_mask: usize) {
        .                   // We should have found an empty bucket by now and ended the probe.
        .                   debug_assert!(
        .                       self.stride <= bucket_mask,
        .                       "Went past end of probe sequence"
        .                   );
        .           
   64,136 ( 0.02%)          self.stride += Group::WIDTH;
   64,136 ( 0.02%)          self.pos += self.stride;
   51,902 ( 0.01%)          self.pos &= bucket_mask;
        .               }
        .           }
        .           
        .           /// Returns the number of buckets needed to hold the given number of items,
        .           /// taking the maximum load factor into account.
        .           ///
        .           /// Returns `None` if an overflow occurs.
        .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
        .           #[cfg_attr(target_os = "emscripten", inline(never))]
        .           #[cfg_attr(not(target_os = "emscripten"), inline)]
        .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
        .               debug_assert_ne!(cap, 0);
        .           
        .               // For small tables we require at least 1 empty bucket so that lookups are
        .               // guaranteed to terminate if an element doesn't exist in the table.
   34,284 ( 0.01%)      if cap < 8 {
        .                   // We don't bother with a table size of 2 buckets since that can only
        .                   // hold a single element. Instead we skip directly to a 4 bucket table
        .                   // which can hold 3 elements.
   73,345 ( 0.02%)          return Some(if cap < 4 { 4 } else { 8 });
        .               }
        .           
        .               // Otherwise require 1/8 buckets to be empty (87.5% load)
        .               //
        .               // Be careful when modifying this, calculate_layout relies on the
        .               // overflow check here.
   14,838 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
        .           
        .               // Any overflows will have been caught by the checked_mul. Also, any
        .               // rounding errors from the division above will be cleaned up by
        .               // next_power_of_two (which can't overflow because of the previous division).
        .               Some(adjusted_cap.next_power_of_two())
        .           }
        .           
        .           /// Returns the maximum effective capacity for the given bucket mask, taking
        .           /// the maximum load factor into account.
        .           #[inline]
        .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
   88,133 ( 0.02%)      if bucket_mask < 8 {
        .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
        .                   // Keep in mind that the bucket mask is one less than the bucket count.
        .                   bucket_mask
        .               } else {
        .                   // For larger tables we reserve 12.5% of the slots as empty.
   16,902 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
        .               }
        .           }
        .           
        .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
        .           /// while keeping the rest of `calculate_layout_for` independent of `T`
        .           #[derive(Copy, Clone)]
        .           struct TableLayout {
        .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
        .           
        .               #[inline]
        .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   let TableLayout { size, ctrl_align } = self;
        .                   // Manual layout calculation since Layout methods are not yet stable.
        .                   let ctrl_offset =
   69,208 ( 0.02%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
   93,313 ( 0.02%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
        .           
        .                   Some((
        .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
        .                       ctrl_offset,
        .                   ))
        .               }
        .           }
        .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
        .                   }
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub unsafe fn drop(&self) {
        .                   self.as_ptr().drop_in_place();
        .               }
        .               #[inline]
        .               pub unsafe fn read(&self) -> T {
      174 ( 0.00%)          self.as_ptr().read()
        .               }
        .               #[inline]
        .               pub unsafe fn write(&self, val: T) {
        .                   self.as_ptr().write(val);
        .               }
        .               #[inline]
        .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
        .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
        .               /// Creates a new empty hash table without allocating any memory, using the
        .               /// given allocator.
        .               ///
        .               /// In effect this returns a table with exactly 1 bucket. However we can
        .               /// leave the data pointer dangling since that bucket is never written to
        .               /// due to our load factor forcing us to always have at least 1 free bucket.
        .               #[inline]
        .               pub fn new_in(alloc: A) -> Self {
      195 ( 0.00%)          Self {
        .                       table: RawTableInner::new_in(alloc),
        .                       marker: PhantomData,
        .                   }
        .               }
        .           
        .               /// Allocates a new hash table with the given number of buckets.
        .               ///
        .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
        .               unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   Ok(Self {
       65 ( 0.00%)              table: RawTableInner::new_uninitialized(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           buckets,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
        .               /// Attempts to allocate a new hash table with at least enough capacity
        .               /// for inserting the given number of elements without reallocating.
        .               fn fallible_with_capacity(
        .                   alloc: A,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   Ok(Self {
    2,205 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           capacity,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
        .                   debug_assert_ne!(self.table.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               /// Erases an element from the table without dropping it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    4,336 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    4,336 ( 0.00%)          let index = self.bucket_index(item);
        .                   self.table.erase(index);
    8,672 ( 0.00%)      }
        .           
        .               /// Erases an element from the table, dropping it in place.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
        .                   // Erase the element from the table first since drop might panic.
    1,094 ( 0.00%)          self.erase_no_drop(&item);
        .                   item.drop();
        .               }
        .           
        .               /// Finds and erases an element from the table, dropping it in place.
        .               /// Returns true if an element was found.
        .               #[cfg(feature = "raw")]
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// Removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    7,578 ( 0.00%)          self.erase_no_drop(&item);
       27 ( 0.00%)          item.read()
        .               }
        .           
        .               /// Finds and removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
  186,384 ( 0.05%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
      204 ( 0.00%)          match self.find(hash, eq) {
    1,040 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
   21,808 ( 0.01%)              None => None,
        .                   }
  277,229 ( 0.07%)      }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear_no_drop(&mut self) {
        .                   self.table.clear_no_drop();
        .               }
        .           
        .               /// Removes all elements from the table without freeing the backing memory.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear(&mut self) {
        .                   // Ensure that the table is reset even if one of the drops panic
        .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
        .                   unsafe {
        1 ( 0.00%)              self_.drop_elements();
        .                   }
        .               }
        .           
        7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
    3,240 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
        .                       for item in self.iter() {
        .                           item.drop();
        .                       }
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
        .                   // Calculate the minimal number of elements that we need to reserve
        .                   // space for.
        .                   let min_size = usize::max(self.table.items, min_size);
        .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Ensures that at least `additional` items can be inserted into the table
        .               /// without reallocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
  112,484 ( 0.03%)          if additional > self.table.growth_left {
        .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
   56,692 ( 0.01%)              if self
        .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
        .                           .is_err()
        .                       {
        .                           unsafe { hint::unreachable_unchecked() }
        .                       }
        .                   }
        .               }
        .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
        .                   } else {
        .                       Ok(())
        .                   }
        .               }
        .           
        .               /// Out-of-line slow path for `reserve` and `try_reserve`.
        .               #[cold]
        .               #[inline(never)]
  137,624 ( 0.03%)      fn reserve_rehash(
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
        .               ) -> Result<(), TryReserveError> {
        .                   unsafe {
        .                       self.table.reserve_rehash_inner(
        .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
        .                           TableLayout::new::<T>(),
        .                           if mem::needs_drop::<T>() {
        .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
        .                           } else {
        .                               None
        .                           },
        .                       )
        .                   }
   91,552 ( 0.02%)      }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
        .               /// current table into it.
        .               fn resize(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
        .                       )
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns its raw bucket.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
  846,396 ( 0.21%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
        .                   unsafe {
        .                       let mut index = self.table.find_insert_slot(hash);
        .           
        .                       // We can avoid growing the table once we have reached our load
        .                       // factor if we are replacing a tombstone. This works since the
        .                       // number of EMPTY slots does not change in this case.
    1,528 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
  525,512 ( 0.13%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
        .                           self.reserve(1, hasher);
        .                           index = self.table.find_insert_slot(hash);
        .                       }
        .           
        .                       self.table.record_item_insert_at(index, old_ctrl, hash);
        .           
        .                       let bucket = self.bucket(index);
        2 ( 0.00%)              bucket.write(value);
        .                       bucket
        .                   }
  623,368 ( 0.16%)      }
        .           
        .               /// Attempts to insert a new element without growing the table and return its raw bucket.
        .               ///
        .               /// Returns an `Err` containing the given element if inserting it would require growing the
        .               /// table.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns a mutable reference to it.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
  200,232 ( 0.05%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
      134 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
  150,174 ( 0.04%)      }
        .           
        .               /// Inserts a new element into the table, without growing the table.
        .               ///
        .               /// There must be enough space in the table to insert the new element.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
      350 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
  138,005 ( 0.03%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
    1,068 ( 0.00%)          let bucket = self.table.bucket(index);
        .           
        .                   // If we are replacing a DELETED entry then we don't need to update
        .                   // the load counter.
  284,463 ( 0.07%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
        .           
        .                   bucket.write(value);
  228,201 ( 0.06%)          self.table.items += 1;
        .                   bucket
      583 ( 0.00%)      }
        .           
        .               /// Temporary removes a bucket, applying the given function to the removed
        .               /// element and optionally put back the returned value in the same bucket.
        .               ///
        .               /// Returns `true` if the bucket still contains an element
        .               ///
        .               /// This does not check if the given bucket is actually occupied.
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// Searches for an element in the table.
        .               #[inline]
    1,504 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
      598 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    5,273 ( 0.00%)              eq(self.bucket(index).as_ref())
       63 ( 0.00%)          });
        .           
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match result {
       16 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
        .                       None => None,
        .                   }
    1,504 ( 0.00%)      }
        .           
        .               /// Gets a reference to an element in the table.
        .               #[inline]
        .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
    2,424 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Gets a mutable reference to an element in the table.
        .               #[inline]
        .               pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
    1,372 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Attempts to get mutable references to `N` entries in the table at once.
        .               ///
        .               /// Returns an array of length `N` with the results of each query.
-- line 855 ----------------------------------------
-- line 920 ----------------------------------------
        .               #[inline]
        .               pub fn len(&self) -> usize {
        .                   self.table.items
        .               }
        .           
        .               /// Returns `true` if the table contains no elements.
        .               #[inline]
        .               pub fn is_empty(&self) -> bool {
  149,878 ( 0.04%)          self.len() == 0
        .               }
        .           
        .               /// Returns the number of buckets in the table.
        .               #[inline]
        .               pub fn buckets(&self) -> usize {
        .                   self.table.bucket_mask + 1
        .               }
        .           
-- line 936 ----------------------------------------
-- line 938 ----------------------------------------
        .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
        .               /// Because we cannot make the `next` method unsafe on the `RawIter`
        .               /// struct, we have to make the `iter` method unsafe.
        .               #[inline]
        .               pub unsafe fn iter(&self) -> RawIter<T> {
        .                   let data = Bucket::from_base_index(self.data_end(), 0);
        .                   RawIter {
        .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
   20,093 ( 0.01%)              items: self.table.items,
        .                   }
        .               }
        .           
        .               /// Returns an iterator over occupied buckets that could match a given hash.
        .               ///
        .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
        .               /// return items that have a hash value different than the one provided. You
        .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
        .               /// Iteration starts at the provided iterator's current location.
        .               ///
        .               /// It is up to the caller to ensure that the iterator is valid for this
        .               /// `RawTable` and covers all items that remain in the table.
        .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
        .                   debug_assert_eq!(iter.len(), self.len());
        .           
        .                   let alloc = self.table.alloc.clone();
    2,300 ( 0.00%)          let allocation = self.into_allocation();
    1,725 ( 0.00%)          RawIntoIter {
    2,875 ( 0.00%)              iter,
        .                       allocation,
        .                       marker: PhantomData,
        .                       alloc,
        .                   }
        .               }
        .           
        .               /// Converts the table into a raw allocation. The contents of the table
        .               /// should be dropped using a `RawIter` before freeing the allocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
    1,011 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
        .                       None
        .                   } else {
        .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
        .                           Some(lco) => lco,
        .                           None => unsafe { hint::unreachable_unchecked() },
        .                       };
        .                       Some((
      222 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
        .                           layout,
        .                       ))
        .                   };
        .                   mem::forget(self);
        .                   alloc
        .               }
        .           }
        .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<A> RawTableInner<A> {
        .               #[inline]
        .               const fn new_in(alloc: A) -> Self {
  153,521 ( 0.04%)          Self {
        .                       // Be careful to cast the entire slice to a raw pointer.
        .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
        .                       bucket_mask: 0,
        .                       items: 0,
        .                       growth_left: 0,
        .                       alloc,
        .                   }
        .               }
        .           }
        .           
        .           impl<A: Allocator + Clone> RawTableInner<A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
  122,661 ( 0.03%)      unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
        .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
        .                   // such allocations will never succeed anyways.
        .                   //
        .                   // This mirrors what Vec does in the standard library.
        .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
        .                       return Err(fallibility.capacity_overflow());
        .                   }
        .           
   27,888 ( 0.01%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
        .                       Ok(block) => block.cast(),
        .                       Err(_) => return Err(fallibility.alloc_err(layout)),
        .                   };
        .           
        .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
   69,048 ( 0.02%)          Ok(Self {
        .                       ctrl,
   28,663 ( 0.01%)              bucket_mask: buckets - 1,
        .                       items: 0,
        .                       growth_left: bucket_mask_to_capacity(buckets - 1),
        .                       alloc,
        .                   })
   89,446 ( 0.02%)      }
        .           
        .               #[inline]
    6,907 ( 0.00%)      fn fallible_with_capacity(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
    1,804 ( 0.00%)          if capacity == 0 {
      927 ( 0.00%)              Ok(Self::new_in(alloc))
        .                   } else {
        .                       unsafe {
        .                           let buckets =
        .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
        .           
   55,663 ( 0.01%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
        .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
        .           
    4,177 ( 0.00%)                  Ok(result)
        .                       }
        .                   }
    6,907 ( 0.00%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element and sets the hash for that slot.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
   46,910 ( 0.01%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
        .                   let index = self.find_insert_slot(hash);
   46,910 ( 0.01%)          let old_ctrl = *self.ctrl(index);
        .                   self.set_ctrl_h2(index, hash);
        .                   (index, old_ctrl)
   93,820 ( 0.02%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
        .               fn find_insert_slot(&self, hash: u64) -> usize {
        .                   let mut probe_seq = self.probe_seq(hash);
        .                   loop {
        .                       unsafe {
        .                           let group = Group::load(self.ctrl(probe_seq.pos));
  379,186 ( 0.10%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
1,105,254 ( 0.28%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
        .           
        .                               // In tables smaller than the group width, trailing control
        .                               // bytes outside the range of the table are filled with
        .                               // EMPTY entries. These will unfortunately trigger a
        .                               // match, but once masked may point to a full bucket that
        .                               // is already occupied. We detect this situation here and
        .                               // perform a second scan starting at the beginning of the
        .                               // table. This second scan is guaranteed to find an empty
        .                               // slot (due to the load factor) before hitting the trailing
        .                               // control bytes (containing EMPTY).
  499,709 ( 0.13%)                      if unlikely(is_full(*self.ctrl(result))) {
        .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
        .                                   debug_assert_ne!(probe_seq.pos, 0);
        .                                   return Group::load_aligned(self.ctrl(0))
        .                                       .match_empty_or_deleted()
        .                                       .lowest_set_bit_nonzero();
        .                               }
        .           
        .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
        .           
        .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
        .               /// code generated, but it is eliminated by LLVM optimizations.
        .               #[inline]
        .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
        .                   let h2_hash = h2(hash);
        .                   let mut probe_seq = self.probe_seq(hash);
        .           
   15,520 ( 0.00%)          loop {
        .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
        .           
  734,928 ( 0.19%)              for bit in group.match_byte(h2_hash) {
1,230,820 ( 0.31%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
        .           
  873,908 ( 0.22%)                  if likely(eq(index)) {
        .                               return Some(index);
        .                           }
        .                       }
        .           
  294,626 ( 0.07%)              if likely(group.match_empty().any_bit_set()) {
        .                           return None;
        .                       }
        .           
        .                       probe_seq.move_next(self.bucket_mask);
        .                   }
        .               }
        .           
        .               #[allow(clippy::mut_mut)]
-- line 1198 ----------------------------------------
-- line 1225 ----------------------------------------
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               #[inline]
        .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
        .                   debug_assert_ne!(self.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   let base: *mut u8 = self.data_end().as_ptr();
1,417,824 ( 0.36%)          base.sub((index + 1) * size_of)
        .               }
        .           
        .               #[inline]
        .               unsafe fn data_end<T>(&self) -> NonNull<T> {
        .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
        .               }
        .           
        .               /// Returns an iterator-like object for a probe sequence on the table.
        .               ///
        .               /// This iterator never terminates, but is guaranteed to visit each bucket
        .               /// group exactly once. The loop using `probe_seq` must terminate upon
        .               /// reaching a group containing an empty bucket.
        .               #[inline]
        .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
        .                   ProbeSeq {
4,941,987 ( 1.25%)              pos: h1(hash) & self.bucket_mask,
        .                       stride: 0,
        .                   }
        .               }
        .           
        .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
        .               /// in the table, otherwise returns error
        .               #[cfg(feature = "raw")]
        .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
        .                   } else {
        .                       self.record_item_insert_at(index, old_ctrl, hash);
        .                       Ok(index)
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
  656,775 ( 0.17%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
        .                   self.set_ctrl_h2(index, hash);
  525,420 ( 0.13%)          self.items += 1;
        .               }
        .           
        .               #[inline]
        .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
        .                   let probe_seq_pos = self.probe_seq(hash).pos;
        .                   let probe_index =
        .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
        .                   probe_index(i) == probe_index(new_i)
-- line 1281 ----------------------------------------
-- line 1312 ----------------------------------------
        .                   // replicate the buckets at the end of the trailing group. For example
        .                   // with 2 buckets and a group size of 4, the control bytes will look
        .                   // like this:
        .                   //
        .                   //     Real    |             Replicated
        .                   // ---------------------------------------------
        .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
        .                   // ---------------------------------------------
1,067,262 ( 0.27%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
        .           
  355,754 ( 0.09%)          *self.ctrl(index) = ctrl;
  355,812 ( 0.09%)          *self.ctrl(index2) = ctrl;
        .               }
        .           
        .               /// Returns a pointer to a control byte.
        .               #[inline]
        .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
        .                   debug_assert!(index < self.num_ctrl_bytes());
        .                   self.ctrl.as_ptr().add(index)
        .               }
        .           
        .               #[inline]
        .               fn buckets(&self) -> usize {
   69,919 ( 0.02%)          self.bucket_mask + 1
        .               }
        .           
        .               #[inline]
        .               fn num_ctrl_bytes(&self) -> usize {
   64,249 ( 0.02%)          self.bucket_mask + 1 + Group::WIDTH
        .               }
        .           
        .               #[inline]
        .               fn is_empty_singleton(&self) -> bool {
  290,624 ( 0.07%)          self.bucket_mask == 0
        .               }
        .           
        .               #[allow(clippy::mut_mut)]
        .               #[inline]
        .               unsafe fn prepare_resize(
        .                   &self,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
        .                   debug_assert!(self.items <= capacity);
        .           
        .                   // Allocate and initialize the new table.
      975 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
        .                       self.alloc.clone(),
        .                       table_layout,
        .                       capacity,
        .                       fallibility,
        .                   )?;
   35,612 ( 0.01%)          new_table.growth_left -= self.items;
        .                   new_table.items = self.items;
        .           
        .                   // The hash function may panic, in which case we simply free the new
        .                   // table without dropping any elements that may have been copied into
        .                   // it.
        .                   //
        .                   // This guard is also used to free the old table on success, see
        .                   // the comment at the bottom of this function.
        .                   Ok(guard(new_table, move |self_| {
   16,770 ( 0.00%)              if !self_.is_empty_singleton() {
        .                           self_.free_buckets(table_layout);
        .                       }
        .                   }))
        .               }
        .           
        .               /// Reserves or rehashes to make room for `additional` more elements.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .                   drop: Option<fn(*mut u8)>,
        .               ) -> Result<(), TryReserveError> {
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
   33,544 ( 0.01%)          let new_items = match self.items.checked_add(additional) {
        .                       Some(new_items) => new_items,
        .                       None => return Err(fallibility.capacity_overflow()),
        .                   };
   33,540 ( 0.01%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
   69,692 ( 0.02%)          if new_items <= full_capacity / 2 {
        .                       // Rehash in-place without re-allocating if we have plenty of spare
        .                       // capacity that is locked up due to DELETED entries.
        .                       self.rehash_in_place(hasher, layout.size, drop);
        .                       Ok(())
        .                   } else {
        .                       // Otherwise, conservatively resize to at least the next size up
        .                       // to avoid churning deletes into frequent rehashes.
        .                       self.resize_inner(
   16,770 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
        .                           hasher,
        .                           fallibility,
        .                           layout,
        .                       )
        .                   }
        .               }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
        .               #[inline(always)]
        .               unsafe fn resize_inner(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .               ) -> Result<(), TryReserveError> {
    2,417 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
        .           
        .                   // Copy all elements to the new table.
        .                   for i in 0..self.buckets() {
  215,664 ( 0.05%)              if !is_full(*self.ctrl(i)) {
        .                           continue;
        .                       }
        .           
        .                       // This may panic.
        .                       let hash = hasher(self, i);
        .           
        .                       // We can use a simpler version of insert() here since:
        .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
        .                   }
        .           
        .                   // We successfully copied all elements without panicking. Now replace
        .                   // self with the new table. The old table will have its memory freed but
        .                   // the items will not be dropped (since they have been moved into the
        .                   // new table).
        .                   mem::swap(self, &mut new_table);
        .           
   16,770 ( 0.00%)          Ok(())
        .               }
        .           
        .               /// Rehashes the contents of the table in place (i.e. without changing the
        .               /// allocation).
        .               ///
        .               /// If `hasher` panics then some the table's contents may be lost.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1554 ----------------------------------------
        .               #[inline]
        .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
        .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
        .                       Some(lco) => lco,
        .                       None => hint::unreachable_unchecked(),
        .                   };
        .                   self.alloc.deallocate(
   10,681 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
        .                       layout,
        .                   );
        .               }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[inline]
        .               fn clear_no_drop(&mut self) {
    1,391 ( 0.00%)          if !self.is_empty_singleton() {
        .                       unsafe {
        .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
        .                       }
        .                   }
    1,827 ( 0.00%)          self.items = 0;
    1,391 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
        .               }
        .           
        .               #[inline]
        .               unsafe fn erase(&mut self, index: usize) {
        .                   debug_assert!(is_full(*self.ctrl(index)));
   43,582 ( 0.01%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
        .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
        .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
        .           
        .                   // If we are inside a continuous block of Group::WIDTH full or deleted
        .                   // cells then a probe window may have seen a full block when trying to
        .                   // insert. We therefore need to keep that block non-empty so that
        .                   // lookups will continue searching to the next probe window.
        .                   //
        .                   // Note that in this context `leading_zeros` refers to the bytes at the
        .                   // end of a group, while `trailing_zeros` refers to the bytes at the
        .                   // beginning of a group.
  174,328 ( 0.04%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
        .                       DELETED
        .                   } else {
  217,735 ( 0.06%)              self.growth_left += 1;
        .                       EMPTY
        .                   };
        .                   self.set_ctrl(index, ctrl);
  174,328 ( 0.04%)          self.items -= 1;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
      536 ( 0.00%)      fn clone(&self) -> Self {
       80 ( 0.00%)          if self.table.is_empty_singleton() {
        .                       Self::new_in(self.table.alloc.clone())
        .                   } else {
        .                       unsafe {
        .                           let mut new_table = ManuallyDrop::new(
        .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
        .                               match Self::new_uninitialized(
        .                                   self.table.alloc.clone(),
        .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
        .                               // We need to free the memory allocated for the new table.
        .                               new_table.free_buckets();
        .                           });
        .           
        .                           // Return the newly created table.
        .                           ManuallyDrop::into_inner(new_table)
        .                       }
        .                   }
      603 ( 0.00%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   if source.table.is_empty_singleton() {
        .                       *self = Self::new_in(self.table.alloc.clone());
        .                   } else {
        .                       unsafe {
        .                           // First, drop all our elements without clearing the control bytes.
        .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
        .                       .table
        .                       .ctrl(0)
        .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
        .                   source
        .                       .data_start()
        .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
        .           
        .                   self.table.items = source.table.items;
       26 ( 0.00%)          self.table.growth_left = source.table.growth_left;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
        .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
        .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
        .               fn default() -> Self {
        .                   Self::new_in(Default::default())
        .               }
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
  156,211 ( 0.04%)      fn drop(&mut self) {
  123,783 ( 0.03%)          if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
        .                           self.free_buckets();
        .                       }
        .                   }
  167,602 ( 0.04%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
        .               type Item = T;
        .               type IntoIter = RawIntoIter<T, A>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
    2,300 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
        .                   unsafe {
        .                       let iter = self.iter();
        .                       self.into_iter_from(iter)
        .                   }
    2,875 ( 0.00%)      }
        .           }
        .           
        .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
        .           /// not track an item count.
        .           pub(crate) struct RawIterRange<T> {
        .               // Mask of full buckets in the current group. Bits are cleared from this
        .               // mask as each element is processed.
        .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
        .           
        .           impl<T> Iterator for RawIterRange<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<Bucket<T>> {
        .                   unsafe {
        .                       loop {
   43,015 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    5,455 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    8,689 ( 0.00%)                      return Some(self.data.next_n(index));
        .                           }
        .           
   38,075 ( 0.01%)                  if self.next_ctrl >= self.end {
        .                               return None;
        .                           }
        .           
        .                           // We might read past self.end up to the next group boundary,
        .                           // but this is fine because it only occurs on tables smaller
        .                           // than the group size where the trailing control bytes are all
        .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
        .                           // to the group size (since tables are power-of-two sized).
    1,179 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
      488 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
    2,736 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
        .                       }
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   // We don't have an item count, so just guess based on the range size.
        .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
        .                           }
        .                       } else {
        .                           // We must have already iterated past the removed item.
        .                       }
        .                   }
        .               }
        .           
        .               unsafe fn drop_elements(&mut self) {
      614 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
        .                       for item in self {
        .                           item.drop();
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Iterator for RawIter<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
    6,589 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
   15,396 ( 0.00%)          if let Some(b) = self.iter.next() {
   48,016 ( 0.01%)              self.items -= 1;
        .                       Some(b)
        .                   } else {
        .                       // We don't check against items == 0 here to allow the
        .                       // compiler to optimize away the item count entirely if the
        .                       // iterator length is never queried.
        .                       debug_assert_eq!(self.items, 0);
        .                       None
        .                   }
   13,178 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   (self.items, Some(self.items))
        .               }
        .           }
        .           
        .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
    1,262 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
        .           
        .                       // Free the table
    4,756 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
        .                           self.alloc.deallocate(ptr, layout);
        .                       }
        .                   }
      278 ( 0.00%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
      118 ( 0.00%)      fn next(&mut self) -> Option<T> {
       48 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
      236 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        3 ( 0.00%)          self.iter.size_hint()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
        .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
        .           
        .           /// Iterator which consumes elements without freeing the table storage.
        .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
        .           where
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
      112 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements. Note that this may panic.
        .                       self.iter.drop_elements();
        .           
        .                       // Reset the contents of the table now that all elements have been
        .                       // dropped.
        .                       self.table.clear_no_drop();
        .           
        .                       // Move the now empty table back to its original location.
       14 ( 0.00%)              self.orig_table
        .                           .as_ptr()
        .                           .copy_from_nonoverlapping(&*self.table, 1);
        .                   }
      112 ( 0.00%)      }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<T> {
        .                   unsafe {
-- line 2289 ----------------------------------------

2,816,808 ( 0.71%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs
--------------------------------------------------------------------------------
Ir              

-- line 8 ----------------------------------------
     .           };
     .           use rustc_ast_pretty::pprust::token_to_string;
     .           use rustc_data_structures::fx::FxHashMap;
     .           use rustc_errors::PResult;
     .           use rustc_span::Span;
     .           
     .           impl<'a> StringReader<'a> {
     .               pub(super) fn into_token_trees(self) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
   342 ( 0.00%)          let mut tt_reader = TokenTreesReader {
     .                       string_reader: self,
    18 ( 0.00%)              token: Token::dummy(),
     .                       open_braces: Vec::new(),
     .                       unmatched_braces: Vec::new(),
     .                       matching_delim_spans: Vec::new(),
     .                       last_unclosed_found_span: None,
     .                       last_delim_empty_block_spans: FxHashMap::default(),
     .                       matching_block_spans: Vec::new(),
     .                   };
    18 ( 0.00%)          let res = tt_reader.parse_all_token_trees();
   108 ( 0.00%)          (res, tt_reader.unmatched_braces)
     .               }
     .           }
     .           
     .           struct TokenTreesReader<'a> {
     .               string_reader: StringReader<'a>,
     .               token: Token,
     .               /// Stack of open delimiters and their spans. Used for error message.
     .               open_braces: Vec<(token::DelimToken, Span)>,
-- line 35 ----------------------------------------
-- line 43 ----------------------------------------
     .               last_delim_empty_block_spans: FxHashMap<token::DelimToken, Span>,
     .               /// Collect the spans of braces (Open, Close). Used only
     .               /// for detecting if blocks are empty and only braces.
     .               matching_block_spans: Vec<(Span, Span)>,
     .           }
     .           
     .           impl<'a> TokenTreesReader<'a> {
     .               // Parse a stream of tokens into a list of `TokenTree`s, up to an `Eof`.
   144 ( 0.00%)      fn parse_all_token_trees(&mut self) -> PResult<'a, TokenStream> {
     .                   let mut buf = TokenStreamBuilder::default();
     .           
     .                   self.bump();
 2,180 ( 0.00%)          while self.token != token::Eof {
 8,576 ( 0.00%)              buf.push(self.parse_token_tree()?);
     .                   }
     .           
     .                   Ok(buf.into_token_stream())
   162 ( 0.00%)      }
     .           
     .               // Parse a stream of tokens into a list of `TokenTree`s, up to a `CloseDelim`.
     .               fn parse_token_trees_until_close_delim(&mut self) -> TokenStream {
     .                   let mut buf = TokenStreamBuilder::default();
     .                   loop {
12,400 ( 0.00%)              if let token::CloseDelim(..) = self.token.kind {
     .                           return buf.into_token_stream();
     .                       }
     .           
26,885 ( 0.01%)              match self.parse_token_tree() {
48,393 ( 0.01%)                  Ok(tree) => buf.push(tree),
     .                           Err(mut e) => {
     .                               e.emit();
     .                               return buf.into_token_stream();
     .                           }
     .                       }
     .                   }
     .               }
     .           
58,041 ( 0.01%)      fn parse_token_tree(&mut self) -> PResult<'a, TreeAndSpacing> {
12,898 ( 0.00%)          let sm = self.string_reader.sess.source_map();
     .           
54,749 ( 0.01%)          match self.token.kind {
     .                       token::Eof => {
     .                           let msg = "this file contains an unclosed delimiter";
     .                           let mut err =
     .                               self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, msg);
     .                           for &(_, sp) in &self.open_braces {
     .                               err.span_label(sp, "unclosed delimiter");
     .                               self.unmatched_braces.push(UnmatchedBrace {
     .                                   expected_delim: token::DelimToken::Brace,
-- line 91 ----------------------------------------
-- line 113 ----------------------------------------
     .                                   err.span_label(
     .                                       *close_sp,
     .                                       "...as it matches this but it has different indentation",
     .                                   );
     .                               }
     .                           }
     .                           Err(err)
     .                       }
   823 ( 0.00%)              token::OpenDelim(delim) => {
     .                           // The span for beginning of the delimited section
   823 ( 0.00%)                  let pre_span = self.token.span;
     .           
     .                           // Parse the open delimiter.
 5,761 ( 0.00%)                  self.open_braces.push((delim, self.token.span));
     .                           self.bump();
     .           
     .                           // Parse the token trees within the delimiters.
     .                           // We stop at any delimiter so we can try to recover if the user
     .                           // uses an incorrect delimiter.
   823 ( 0.00%)                  let tts = self.parse_token_trees_until_close_delim();
     .           
     .                           // Expand to cover the entire delimited token tree
 4,115 ( 0.00%)                  let delim_span = DelimSpan::from_pair(pre_span, self.token.span);
     .           
 1,646 ( 0.00%)                  match self.token.kind {
     .                               // Correct delimiter.
 1,646 ( 0.00%)                      token::CloseDelim(d) if d == delim => {
     .                                   let (open_brace, open_brace_span) = self.open_braces.pop().unwrap();
 1,646 ( 0.00%)                          let close_brace_span = self.token.span;
     .           
 2,469 ( 0.00%)                          if tts.is_empty() {
   369 ( 0.00%)                              let empty_block_span = open_brace_span.to(close_brace_span);
   492 ( 0.00%)                              if !sm.is_multiline(empty_block_span) {
     .                                           // Only track if the block is in the form of `{}`, otherwise it is
     .                                           // likely that it was written on purpose.
     .                                           self.last_delim_empty_block_spans.insert(delim, empty_block_span);
     .                                       }
     .                                   }
     .           
     .                                   //only add braces
 3,292 ( 0.00%)                          if let (DelimToken::Brace, DelimToken::Brace) = (open_brace, delim) {
     .                                       self.matching_block_spans.push((open_brace_span, close_brace_span));
     .                                   }
     .           
   823 ( 0.00%)                          if self.open_braces.is_empty() {
     .                                       // Clear up these spans to avoid suggesting them as we've found
     .                                       // properly matched delimiters so far for an entire block.
     .                                       self.matching_delim_spans.clear();
     .                                   } else {
     .                                       self.matching_delim_spans.push((
     .                                           open_brace,
     .                                           open_brace_span,
     .                                           close_brace_span,
-- line 165 ----------------------------------------
-- line 218 ----------------------------------------
     .                               token::Eof => {
     .                                   // Silently recover, the EOF token will be seen again
     .                                   // and an error emitted then. Thus we don't pop from
     .                                   // self.open_braces here.
     .                               }
     .                               _ => {}
     .                           }
     .           
 5,761 ( 0.00%)                  Ok(TokenTree::Delimited(delim_span, delim, tts).into())
     .                       }
     .                       token::CloseDelim(delim) => {
     .                           // An unexpected closing delimiter (i.e., there is no
     .                           // matching opening delimiter).
     .                           let token_str = token_to_string(&self.token);
     .                           let msg = format!("unexpected closing delimiter: `{}`", token_str);
     .                           let mut err =
     .                               self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, &msg);
-- line 234 ----------------------------------------
-- line 253 ----------------------------------------
     .                                   err.span_label(parent.1, "...matches this closing brace");
     .                               }
     .                           }
     .           
     .                           err.span_label(self.token.span, "unexpected closing delimiter");
     .                           Err(err)
     .                       }
     .                       _ => {
28,130 ( 0.01%)                  let tt = TokenTree::Token(self.token.take());
     .                           let mut spacing = self.bump();
11,252 ( 0.00%)                  if !self.token.is_op() {
     .                               spacing = Alone;
     .                           }
33,756 ( 0.01%)                  Ok((tt, spacing))
     .                       }
     .                   }
51,592 ( 0.01%)      }
     .           
     .               fn bump(&mut self) -> Spacing {
61,441 ( 0.02%)          let (spacing, token) = self.string_reader.next_token();
32,407 ( 0.01%)          self.token = token;
     .                   spacing
     .               }
     .           }
     .           
   823 ( 0.00%)  #[derive(Default)]
     .           struct TokenStreamBuilder {
     .               buf: Vec<TreeAndSpacing>,
     .           }
     .           
     .           impl TokenStreamBuilder {
83,837 ( 0.02%)      fn push(&mut self, (tree, joint): TreeAndSpacing) {
40,312 ( 0.01%)          if let Some((TokenTree::Token(prev_token), Joint)) = self.buf.last() {
 3,128 ( 0.00%)              if let TokenTree::Token(token) = &tree {
 6,160 ( 0.00%)                  if let Some(glued) = prev_token.glue(token) {
     .                               self.buf.pop();
 4,404 ( 0.00%)                      self.buf.push((TokenTree::Token(glued), joint));
     .                               return;
     .                           }
     .                       }
     .                   }
30,410 ( 0.01%)          self.buf.push((tree, joint))
51,592 ( 0.01%)      }
     .           
     .               fn into_token_stream(self) -> TokenStream {
 8,392 ( 0.00%)          TokenStream::new(self.buf)
     .               }
     .           }

21,444 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs
--------------------------------------------------------------------------------
Ir               

-- line 32 ----------------------------------------
      .           ///
      .           /// If the syntax extension is an MBE macro, it will attempt to match its
      .           /// LHS token tree against the provided token tree, and if it finds a
      .           /// match, will transcribe the RHS token tree, splicing in any captured
      .           /// `macro_parser::matched_nonterminals` into the `SubstNt`s it finds.
      .           ///
      .           /// The RHS of an MBE macro is the only place `SubstNt`s are substituted.
      .           /// Nothing special happens to misnamed or misplaced `SubstNt`s.
165,167 ( 0.04%)  #[derive(Debug, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
      .           pub enum TokenTree {
      .               /// A single token.
 49,398 ( 0.01%)      Token(Token),
      .               /// A delimited sequence of token trees.
  4,454 ( 0.00%)      Delimited(DelimSpan, DelimToken, TokenStream),
      .           }
      .           
      .           #[derive(Copy, Clone)]
      .           pub enum CanSynthesizeMissingTokens {
      .               Yes,
      .               No,
      .           }
      .           
-- line 53 ----------------------------------------
-- line 71 ----------------------------------------
      .                           delim == delim2 && tts.eq_unspanned(&tts2)
      .                       }
      .                       _ => false,
      .                   }
      .               }
      .           
      .               /// Retrieves the `TokenTree`'s span.
      .               pub fn span(&self) -> Span {
     40 ( 0.00%)          match self {
     67 ( 0.00%)              TokenTree::Token(token) => token.span,
     24 ( 0.00%)              TokenTree::Delimited(sp, ..) => sp.entire(),
      .                   }
     15 ( 0.00%)      }
      .           
      .               /// Modify the `TokenTree`'s span in-place.
      .               pub fn set_span(&mut self, span: Span) {
     40 ( 0.00%)          match self {
     15 ( 0.00%)              TokenTree::Token(token) => token.span = span,
     10 ( 0.00%)              TokenTree::Delimited(dspan, ..) => *dspan = DelimSpan::from_single(span),
      .                   }
     20 ( 0.00%)      }
      .           
    382 ( 0.00%)      pub fn token(kind: TokenKind, span: Span) -> TokenTree {
 13,500 ( 0.00%)          TokenTree::Token(Token::new(kind, span))
    382 ( 0.00%)      }
      .           
      .               /// Returns the opening delimiter as a token tree.
  1,518 ( 0.00%)      pub fn open_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
  4,554 ( 0.00%)          TokenTree::token(token::OpenDelim(delim), span.open)
  1,518 ( 0.00%)      }
      .           
      .               /// Returns the closing delimiter as a token tree.
  1,475 ( 0.00%)      pub fn close_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
  4,425 ( 0.00%)          TokenTree::token(token::CloseDelim(delim), span.close)
  1,475 ( 0.00%)      }
      .           
    468 ( 0.00%)      pub fn uninterpolate(self) -> TokenTree {
    312 ( 0.00%)          match self {
  1,404 ( 0.00%)              TokenTree::Token(token) => TokenTree::Token(token.uninterpolate().into_owned()),
      .                       tt => tt,
      .                   }
    624 ( 0.00%)      }
      .           }
      .           
      .           impl<CTX> HashStable<CTX> for TokenStream
      .           where
      .               CTX: crate::HashStableContext,
      .           {
  1,647 ( 0.00%)      fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
  8,238 ( 0.00%)          for sub_tt in self.trees() {
      .                       sub_tt.hash_stable(hcx, hasher);
      .                   }
  1,464 ( 0.00%)      }
      .           }
      .           
      .           pub trait CreateTokenStream: sync::Send + sync::Sync {
      .               fn create_token_stream(&self) -> AttrAnnotatedTokenStream;
      .           }
      .           
      .           impl CreateTokenStream for AttrAnnotatedTokenStream {
      .               fn create_token_stream(&self) -> AttrAnnotatedTokenStream {
-- line 131 ----------------------------------------
-- line 140 ----------------------------------------
      .           pub struct LazyTokenStream(Lrc<Box<dyn CreateTokenStream>>);
      .           
      .           impl LazyTokenStream {
      .               pub fn new(inner: impl CreateTokenStream + 'static) -> LazyTokenStream {
      .                   LazyTokenStream(Lrc::new(Box::new(inner)))
      .               }
      .           
      .               pub fn create_token_stream(&self) -> AttrAnnotatedTokenStream {
    140 ( 0.00%)          self.0.create_token_stream()
      .               }
      .           }
      .           
      .           impl fmt::Debug for LazyTokenStream {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   write!(f, "LazyTokenStream({:?})", self.create_token_stream())
      .               }
      .           }
-- line 156 ----------------------------------------
-- line 188 ----------------------------------------
      .               Delimited(DelimSpan, DelimToken, AttrAnnotatedTokenStream),
      .               /// Stores the attributes for an attribute target,
      .               /// along with the tokens for that attribute target.
      .               /// See `AttributesData` for more information
      .               Attributes(AttributesData),
      .           }
      .           
      .           impl AttrAnnotatedTokenStream {
  2,370 ( 0.00%)      pub fn new(tokens: Vec<(AttrAnnotatedTokenTree, Spacing)>) -> AttrAnnotatedTokenStream {
      .                   AttrAnnotatedTokenStream(Lrc::new(tokens))
  2,370 ( 0.00%)      }
      .           
      .               /// Converts this `AttrAnnotatedTokenStream` to a plain `TokenStream
      .               /// During conversion, `AttrAnnotatedTokenTree::Attributes` get 'flattened'
      .               /// back to a `TokenStream` of the form `outer_attr attr_target`.
      .               /// If there are inner attributes, they are inserted into the proper
      .               /// place in the attribute target tokens.
     35 ( 0.00%)      pub fn to_tokenstream(&self) -> TokenStream {
     35 ( 0.00%)          let trees: Vec<_> = self
      .                       .0
      .                       .iter()
    105 ( 0.00%)              .flat_map(|tree| match &tree.0 {
     70 ( 0.00%)                  AttrAnnotatedTokenTree::Token(inner) => {
    175 ( 0.00%)                      smallvec![(TokenTree::Token(inner.clone()), tree.1)].into_iter()
      .                           }
      .                           AttrAnnotatedTokenTree::Delimited(span, delim, stream) => smallvec![(
      .                               TokenTree::Delimited(*span, *delim, stream.to_tokenstream()),
      .                               tree.1,
      .                           )]
      .                           .into_iter(),
      .                           AttrAnnotatedTokenTree::Attributes(data) => {
      .                               let mut outer_attrs = Vec::new();
-- line 219 ----------------------------------------
-- line 279 ----------------------------------------
      .                                   flat.extend(attr.tokens().to_tokenstream().0.clone().iter().cloned());
      .                               }
      .                               flat.extend(target_tokens);
      .                               flat.into_iter()
      .                           }
      .                       })
      .                       .collect();
      .                   TokenStream::new(trees)
     70 ( 0.00%)      }
      .           }
      .           
      .           /// Stores the tokens for an attribute target, along
      .           /// with its attributes.
      .           ///
      .           /// This is constructed during parsing when we need to capture
      .           /// tokens.
      .           ///
-- line 295 ----------------------------------------
-- line 316 ----------------------------------------
      .           pub struct TokenStream(pub(crate) Lrc<Vec<TreeAndSpacing>>);
      .           
      .           pub type TreeAndSpacing = (TokenTree, Spacing);
      .           
      .           // `TokenStream` is used a lot. Make sure it doesn't unintentionally get bigger.
      .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
      .           rustc_data_structures::static_assert_size!(TokenStream, 8);
      .           
 14,184 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Encodable, Decodable)]
      .           pub enum Spacing {
      .               Alone,
      .               Joint,
      .           }
      .           
      .           impl TokenStream {
      .               /// Given a `TokenStream` with a `Stream` of only two arguments, return a new `TokenStream`
      .               /// separating the two arguments with a comma for diagnostic suggestions.
-- line 332 ----------------------------------------
-- line 371 ----------------------------------------
      .           impl From<(AttrAnnotatedTokenTree, Spacing)> for AttrAnnotatedTokenStream {
      .               fn from((tree, spacing): (AttrAnnotatedTokenTree, Spacing)) -> AttrAnnotatedTokenStream {
      .                   AttrAnnotatedTokenStream::new(vec![(tree, spacing)])
      .               }
      .           }
      .           
      .           impl From<TokenTree> for TokenStream {
      .               fn from(tree: TokenTree) -> TokenStream {
    590 ( 0.00%)          TokenStream::new(vec![(tree, Spacing::Alone)])
      .               }
      .           }
      .           
      .           impl From<TokenTree> for TreeAndSpacing {
      .               fn from(tree: TokenTree) -> TreeAndSpacing {
  4,834 ( 0.00%)          (tree, Spacing::Alone)
      .               }
      .           }
      .           
      .           impl iter::FromIterator<TokenTree> for TokenStream {
      .               fn from_iter<I: IntoIterator<Item = TokenTree>>(iter: I) -> Self {
    164 ( 0.00%)          TokenStream::new(iter.into_iter().map(Into::into).collect::<Vec<TreeAndSpacing>>())
      .               }
      .           }
      .           
      .           impl Eq for TokenStream {}
      .           
      .           impl PartialEq<TokenStream> for TokenStream {
      .               fn eq(&self, other: &TokenStream) -> bool {
      .                   self.trees().eq(other.trees())
-- line 399 ----------------------------------------
-- line 401 ----------------------------------------
      .           }
      .           
      .           impl TokenStream {
      .               pub fn new(streams: Vec<TreeAndSpacing>) -> TokenStream {
      .                   TokenStream(Lrc::new(streams))
      .               }
      .           
      .               pub fn is_empty(&self) -> bool {
    828 ( 0.00%)          self.0.is_empty()
    828 ( 0.00%)      }
      .           
      .               pub fn len(&self) -> usize {
 18,889 ( 0.00%)          self.0.len()
     83 ( 0.00%)      }
      .           
      .               pub fn from_streams(mut streams: SmallVec<[TokenStream; 2]>) -> TokenStream {
      .                   match streams.len() {
      .                       0 => TokenStream::default(),
      .                       1 => streams.pop().unwrap(),
      .                       _ => {
      .                           // We are going to extend the first stream in `streams` with
      .                           // the elements from the subsequent streams. This requires
-- line 422 ----------------------------------------
-- line 448 ----------------------------------------
      .           
      .                           // Create the final `TokenStream`.
      .                           TokenStream(first_stream_lrc)
      .                       }
      .                   }
      .               }
      .           
      .               pub fn trees(&self) -> Cursor {
    525 ( 0.00%)          self.clone().into_trees()
  1,050 ( 0.00%)      }
      .           
  2,146 ( 0.00%)      pub fn into_trees(self) -> Cursor {
      .                   Cursor::new(self)
  4,292 ( 0.00%)      }
      .           
      .               /// Compares two `TokenStream`s, checking equality without regarding span information.
      .               pub fn eq_unspanned(&self, other: &TokenStream) -> bool {
      .                   let mut t1 = self.trees();
      .                   let mut t2 = other.trees();
      .                   for (t1, t2) in iter::zip(&mut t1, &mut t2) {
      .                       if !t1.eq_unspanned(&t2) {
      .                           return false;
      .                       }
      .                   }
      .                   t1.next().is_none() && t2.next().is_none()
      .               }
      .           
      .               pub fn map_enumerated<F: FnMut(usize, &TokenTree) -> TokenTree>(self, mut f: F) -> TokenStream {
      5 ( 0.00%)          TokenStream(Lrc::new(
      .                       self.0
      .                           .iter()
      .                           .enumerate()
    120 ( 0.00%)                  .map(|(i, (tree, is_joint))| (f(i, tree), *is_joint))
      .                           .collect(),
      .                   ))
      .               }
      .           }
      .           
      .           // 99.5%+ of the time we have 1 or 2 elements in this vector.
      .           #[derive(Clone)]
      .           pub struct TokenStreamBuilder(SmallVec<[TokenStream; 2]>);
-- line 488 ----------------------------------------
-- line 572 ----------------------------------------
      .           pub struct Cursor {
      .               pub stream: TokenStream,
      .               index: usize,
      .           }
      .           
      .           impl Iterator for Cursor {
      .               type Item = TokenTree;
      .           
 14,094 ( 0.00%)      fn next(&mut self) -> Option<TokenTree> {
 25,410 ( 0.01%)          self.next_with_spacing().map(|(tree, _)| tree)
 18,792 ( 0.00%)      }
      .           }
      .           
      .           impl Cursor {
      .               fn new(stream: TokenStream) -> Self {
      .                   Cursor { stream, index: 0 }
      .               }
      .           
 70,125 ( 0.02%)      pub fn next_with_spacing(&mut self) -> Option<TreeAndSpacing> {
 56,169 ( 0.01%)          if self.index < self.stream.len() {
 28,806 ( 0.01%)              self.index += 1;
 73,983 ( 0.02%)              Some(self.stream.0[self.index - 1].clone())
      .                   } else {
  6,912 ( 0.00%)              None
      .                   }
 84,150 ( 0.02%)      }
      .           
      .               pub fn index(&self) -> usize {
      .                   self.index
      .               }
      .           
      .               pub fn append(&mut self, new_stream: TokenStream) {
      .                   if new_stream.is_empty() {
      .                       return;
      .                   }
      .                   let index = self.index;
      .                   let stream = mem::take(&mut self.stream);
      .                   *self = TokenStream::from_streams(smallvec![stream, new_stream]).into_trees();
      .                   self.index = index;
      .               }
      .           
  4,274 ( 0.00%)      pub fn look_ahead(&self, n: usize) -> Option<&TokenTree> {
  8,548 ( 0.00%)          self.stream.0[self.index..].get(n).map(|(tree, _)| tree)
  8,548 ( 0.00%)      }
      .           }
      .           
  9,719 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
      .           pub struct DelimSpan {
      .               pub open: Span,
      .               pub close: Span,
      .           }
      .           
      .           impl DelimSpan {
    117 ( 0.00%)      pub fn from_single(sp: Span) -> Self {
      .                   DelimSpan { open: sp, close: sp }
    234 ( 0.00%)      }
      .           
  1,646 ( 0.00%)      pub fn from_pair(open: Span, close: Span) -> Self {
      .                   DelimSpan { open, close }
    823 ( 0.00%)      }
      .           
      .               pub fn dummy() -> Self {
      .                   Self::from_single(DUMMY_SP)
    816 ( 0.00%)      }
      .           
    648 ( 0.00%)      pub fn entire(self) -> Span {
      .                   self.open.with_hi(self.close.hi())
    486 ( 0.00%)      }
      .           }

  6,495 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_query_system/src/query/plumbing.rs
--------------------------------------------------------------------------------
Ir               

-- line 43 ----------------------------------------
      .               pub(super) key_hash: u64,
      .               shard: usize,
      .           }
      .           
      .           // We compute the key's hash once and then use it for both the
      .           // shard lookup and the hashmap lookup. This relies on the fact
      .           // that both of them use `FxHasher`.
      .           fn hash_for_shard<K: Hash>(key: &K) -> u64 {
    103 ( 0.00%)      let mut hasher = FxHasher::default();
     24 ( 0.00%)      key.hash(&mut hasher);
      2 ( 0.00%)      hasher.finish()
      .           }
      .           
      .           impl<C: QueryCache> QueryCacheStore<C> {
    137 ( 0.00%)      pub(super) fn get_lookup<'tcx>(
      .                   &'tcx self,
      .                   key: &C::Key,
      .               ) -> (QueryLookup, LockGuard<'tcx, C::Sharded>) {
      .                   let key_hash = hash_for_shard(key);
      .                   let shard = get_shard_index_by_hash(key_hash);
      .                   let lock = self.shards.get_shard_by_index(shard).lock();
    516 ( 0.00%)          (QueryLookup { key_hash, shard }, lock)
    387 ( 0.00%)      }
      .           
      .               pub fn iter_results(&self, f: &mut dyn FnMut(&C::Key, &C::Value, DepNodeIndex)) {
      .                   self.cache.iter(&self.shards, f)
      .               }
      .           }
      .           
      .           struct QueryStateShard<D, K> {
      .               active: FxHashMap<K, QueryResult<D>>,
-- line 73 ----------------------------------------
-- line 190 ----------------------------------------
      .               ) -> TryGetJob<'b, CTX::DepKind, K>
      .               where
      .                   CTX: QueryContext,
      .               {
      .                   let shard = lookup.shard;
      .                   let mut state_lock = state.shards.get_shard_by_index(shard).lock();
      .                   let lock = &mut *state_lock;
      .           
 82,343 ( 0.02%)          match lock.active.entry(key) {
      .                       Entry::Vacant(entry) => {
      .                           // Generate an id unique within this shard.
 38,091 ( 0.01%)                  let id = lock.jobs.checked_add(1).unwrap();
 38,091 ( 0.01%)                  lock.jobs = id;
      .                           let id = QueryShardJobId(NonZeroU32::new(id).unwrap());
      .           
      .                           let job = tcx.current_query_job();
      .                           let job = QueryJob::new(id, span, job);
      .           
      .                           let key = entry.key().clone();
      .                           entry.insert(QueryResult::Started(job));
      .           
      .                           let global_id = QueryJobId::new(id, shard, dep_kind);
      .                           let owner = JobOwner { state, id: global_id, key };
    451 ( 0.00%)                  return TryGetJob::NotYetStarted(owner);
      .                       }
      .                       Entry::Occupied(mut entry) => {
      .                           match entry.get_mut() {
      .                               #[cfg(not(parallel_compiler))]
      .                               QueryResult::Started(job) => {
      .                                   let id = QueryJobId::new(job.id, shard, dep_kind);
      .           
      .                                   drop(state_lock);
-- line 221 ----------------------------------------
-- line 262 ----------------------------------------
      .                   cache: &QueryCacheStore<C>,
      .                   result: C::Value,
      .                   dep_node_index: DepNodeIndex,
      .               ) -> C::Stored
      .               where
      .                   C: QueryCache<Key = K>,
      .               {
      .                   // We can move out of `self` here because we `mem::forget` it below
 41,088 ( 0.01%)          let key = unsafe { ptr::read(&self.key) };
      .                   let state = self.state;
      .           
      .                   // Forget ourself so our destructor won't poison the query
      .                   mem::forget(self);
      .           
  2,675 ( 0.00%)          let (job, result) = {
      .                       let key_hash = hash_for_shard(&key);
      .                       let shard = get_shard_index_by_hash(key_hash);
      .                       let job = {
      .                           let mut lock = state.shards.get_shard_by_index(shard).lock();
      9 ( 0.00%)                  match lock.active.remove(&key).unwrap() {
      .                               QueryResult::Started(job) => job,
      .                               QueryResult::Poisoned => panic!(),
      .                           }
      .                       };
      .                       let result = {
      .                           let mut lock = cache.shards.get_shard_by_index(shard).lock();
 73,604 ( 0.02%)                  cache.cache.complete(&mut lock, key, result, dep_node_index)
      .                       };
  1,646 ( 0.00%)              (job, result)
      .                   };
      .           
      .                   job.signal_complete();
      .                   result
      .               }
      .           }
      .           
      .           impl<'tcx, D, K> Drop for JobOwner<'tcx, D, K>
-- line 298 ----------------------------------------
-- line 347 ----------------------------------------
      .               Cycle(CycleError),
      .           }
      .           
      .           /// Checks if the query is already computed and in the cache.
      .           /// It returns the shard index and a lock guard to the shard,
      .           /// which will be used if the query is not in the cache and we need
      .           /// to compute it.
      .           #[inline]
166,618 ( 0.04%)  pub fn try_get_cached<'a, CTX, C, R, OnHit>(
      .               tcx: CTX,
      .               cache: &'a QueryCacheStore<C>,
      .               key: &C::Key,
      .               // `on_hit` can be called while holding a lock to the query cache
      .               on_hit: OnHit,
      .           ) -> Result<R, QueryLookup>
      .           where
      .               C: QueryCache,
      .               CTX: DepContext,
      .               OnHit: FnOnce(&C::Stored) -> R,
      .           {
      .               cache.cache.lookup(cache, &key, |value, index| {
162,402 ( 0.04%)          if unlikely!(tcx.profiler().enabled()) {
      .                       tcx.profiler().query_cache_hit(index.into());
      .                   }
      .                   tcx.dep_graph().read_index(index);
 74,621 ( 0.02%)          on_hit(value)
      .               })
189,360 ( 0.05%)  }
      .           
335,216 ( 0.08%)  fn try_execute_query<CTX, C>(
      .               tcx: CTX,
      .               state: &QueryState<CTX::DepKind, C::Key>,
      .               cache: &QueryCacheStore<C>,
      .               span: Span,
      .               key: C::Key,
      .               lookup: QueryLookup,
      .               dep_node: Option<DepNode<CTX::DepKind>>,
      .               query: &QueryVtable<CTX, C::Key, C::Value>,
-- line 384 ----------------------------------------
-- line 391 ----------------------------------------
      .               match JobOwner::<'_, CTX::DepKind, C::Key>::try_start(
      .                   &tcx,
      .                   state,
      .                   span,
      .                   key.clone(),
      .                   lookup,
      .                   query.dep_kind,
      .               ) {
159,851 ( 0.04%)          TryGetJob::NotYetStarted(job) => {
432,303 ( 0.11%)              let (result, dep_node_index) = execute_job(tcx, key, dep_node, query, job.id);
 38,692 ( 0.01%)              let result = job.complete(cache, result, dep_node_index);
 52,410 ( 0.01%)              (result, Some(dep_node_index))
      .                   }
      .                   TryGetJob::Cycle(error) => {
      .                       let result = mk_cycle(tcx, error, query.handle_cycle_error, &cache.cache);
      .                       (result, None)
      .                   }
      .                   #[cfg(parallel_compiler)]
      .                   TryGetJob::JobCompleted(query_blocked_prof_timer) => {
      .                       let (v, index) = cache
-- line 410 ----------------------------------------
-- line 415 ----------------------------------------
      .                       if unlikely!(tcx.dep_context().profiler().enabled()) {
      .                           tcx.dep_context().profiler().query_cache_hit(index.into());
      .                       }
      .                       query_blocked_prof_timer.finish_with_query_invocation_id(index.into());
      .           
      .                       (v, Some(index))
      .                   }
      .               }
350,690 ( 0.09%)  }
      .           
      .           fn execute_job<CTX, K, V>(
      .               tcx: CTX,
      .               key: K,
      .               mut dep_node_opt: Option<DepNode<CTX::DepKind>>,
      .               query: &QueryVtable<CTX, K, V>,
      .               job_id: QueryJobId<CTX::DepKind>,
      .           ) -> (V, DepNodeIndex)
-- line 431 ----------------------------------------
-- line 432 ----------------------------------------
      .           where
      .               K: Clone + DepNodeParams<CTX::DepContext>,
      .               V: Debug,
      .               CTX: QueryContext,
      .           {
      .               let dep_graph = tcx.dep_context().dep_graph();
      .           
      .               // Fast path for when incr. comp. is off.
 38,091 ( 0.01%)      if !dep_graph.is_fully_enabled() {
      .                   let prof_timer = tcx.dep_context().profiler().query_provider();
 49,945 ( 0.01%)          let result = tcx.start_query(job_id, None, || query.compute(*tcx.dep_context(), key));
      .                   let dep_node_index = dep_graph.next_virtual_depnode_index();
      .                   prof_timer.finish_with_query_invocation_id(dep_node_index.into());
 41,270 ( 0.01%)          return (result, dep_node_index);
      .               }
      .           
      .               if !query.anon && !query.eval_always {
      .                   // `to_dep_node` is expensive for some `DepKind`s.
      .                   let dep_node =
      .                       dep_node_opt.get_or_insert_with(|| query.to_dep_node(*tcx.dep_context(), &key));
      .           
      .                   // The diagnostics for this query will be promoted to the current session during
-- line 453 ----------------------------------------
-- line 691 ----------------------------------------
      .           /// Executing `query::ensure(D)` is considered a read of the dep-node `D`.
      .           /// Returns true if the query should still run.
      .           ///
      .           /// This function is particularly useful when executing passes for their
      .           /// side-effects -- e.g., in order to report errors for erroneous programs.
      .           ///
      .           /// Note: The optimization is only available during incr. comp.
      .           #[inline(never)]
 15,304 ( 0.00%)  fn ensure_must_run<CTX, K, V>(
      .               tcx: CTX,
      .               key: &K,
      .               query: &QueryVtable<CTX, K, V>,
      .           ) -> (bool, Option<DepNode<CTX::DepKind>>)
      .           where
      .               K: crate::dep_graph::DepNodeParams<CTX::DepContext>,
      .               CTX: QueryContext,
      .           {
  3,826 ( 0.00%)      if query.eval_always {
      4 ( 0.00%)          return (true, None);
      .               }
      .           
      .               // Ensuring an anonymous query makes no sense
  3,822 ( 0.00%)      assert!(!query.anon);
      .           
      .               let dep_node = query.to_dep_node(*tcx.dep_context(), key);
      .           
      .               let dep_graph = tcx.dep_context().dep_graph();
 10,555 ( 0.00%)      match dep_graph.try_mark_green(tcx, &dep_node) {
      .                   None => {
      .                       // A None return from `try_mark_green` means that this is either
      .                       // a new dep node or that the dep node has already been marked red.
      .                       // Either way, we can't call `dep_graph.read()` as we don't have the
      .                       // DepNodeIndex. We must invoke the query itself. The performance cost
      .                       // this introduces should be negligible as we'll immediately hit the
      .                       // in-memory cache, or another query down the line will.
 11,466 ( 0.00%)              (true, Some(dep_node))
      .                   }
      .                   Some((_, dep_node_index)) => {
      .                       dep_graph.read_index(dep_node_index);
      .                       tcx.dep_context().profiler().query_cache_hit(dep_node_index.into());
      .                       (false, None)
      .                   }
      .               }
 15,304 ( 0.00%)  }
      .           
      .           pub enum QueryMode {
      .               Get,
      .               Ensure,
      .           }
      .           
392,879 ( 0.10%)  pub fn get_query<Q, CTX>(
      .               tcx: CTX,
      .               span: Span,
      .               key: Q::Key,
      .               lookup: QueryLookup,
      .               mode: QueryMode,
      .           ) -> Option<Q::Stored>
      .           where
      .               Q: QueryDescription<CTX>,
      .               Q::Key: DepNodeParams<CTX::DepContext>,
      .               CTX: QueryContext,
      .           {
      .               let query = Q::make_vtable(tcx, &key);
 77,291 ( 0.02%)      let dep_node = if let QueryMode::Ensure = mode {
 17,789 ( 0.00%)          let (must_run, dep_node) = ensure_must_run(tcx, &key, &query);
  1,913 ( 0.00%)          if !must_run {
      .                       return None;
      .                   }
  3,930 ( 0.00%)          dep_node
      .               } else {
      .                   None
      .               };
      .           
      .               debug!("ty::query::get_query<{}>(key={:?}, span={:?})", Q::NAME, key, span);
519,702 ( 0.13%)      let (result, dep_node_index) = try_execute_query(
      .                   tcx,
      .                   Q::query_state(tcx),
      .                   Q::query_cache(tcx),
      .                   span,
  3,785 ( 0.00%)          key,
      .                   lookup,
145,923 ( 0.04%)          dep_node,
      .                   &query,
      .               );
 76,182 ( 0.02%)      if let Some(dep_node_index) = dep_node_index {
      .                   tcx.dep_context().dep_graph().read_index(dep_node_index)
      .               }
 19,489 ( 0.00%)      Some(result)
365,873 ( 0.09%)  }
      .           
      .           pub fn force_query<Q, CTX>(tcx: CTX, key: Q::Key, dep_node: DepNode<CTX::DepKind>)
      .           where
      .               Q: QueryDescription<CTX>,
      .               Q::Key: DepNodeParams<CTX::DepContext>,
      .               CTX: QueryContext,
      .           {
      .               // We may be concurrently trying both execute and force a query.
-- line 787 ----------------------------------------

338,173 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_query_system/src/query/plumbing.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 42 ----------------------------------------
      .           /// `stack_size` bytes.
      .           ///
      .           /// The closure `f` is guaranteed to run on a stack with at least `red_zone` bytes, and it will be
      .           /// run on the current stack if there's space available.
      .           #[inline(always)]
      .           pub fn maybe_grow<R, F: FnOnce() -> R>(red_zone: usize, stack_size: usize, callback: F) -> R {
      .               // if we can't guess the remaining stack (unsupported on some platforms) we immediately grow
      .               // the stack and then cache the new stack size (which we do know now because we allocated it.
126,683 ( 0.03%)      let enough_space = match remaining_stack() {
      .                   Some(remaining) => remaining >= red_zone,
      .                   None => false,
      .               };
164,838 ( 0.04%)      if enough_space {
  7,853 ( 0.00%)          callback()
      .               } else {
      .                   grow(stack_size, callback)
      .               }
      .           }
      .           
      .           /// Always creates a new stack for the passed closure to run on.
      .           /// The closure will still be on the same thread as the caller of `grow`.
      .           /// This will allocate a new stack with at least `stack_size` bytes.
-- line 63 ----------------------------------------
-- line 82 ----------------------------------------
      .               _grow(stack_size, dyn_callback);
      .               ret.unwrap()
      .           }
      .           
      .           /// Queries the amount of remaining stack as interpreted by this library.
      .           ///
      .           /// This function will return the amount of stack space left which will be used
      .           /// to determine whether a stack switch should be made or not.
109,892 ( 0.03%)  pub fn remaining_stack() -> Option<usize> {
      .               let current_ptr = current_stack_ptr();
109,892 ( 0.03%)      get_stack_limit().map(|limit| current_ptr - limit)
219,784 ( 0.06%)  }
      .           
      .           psm_stack_information! (
      .               yes {
      .                   fn current_stack_ptr() -> usize {
109,892 ( 0.03%)              psm::stack_pointer() as usize
      .                   }
      .               }
      .               no {
      .                   #[inline(always)]
      .                   fn current_stack_ptr() -> usize {
      .                       unsafe {
      .                           let mut x = std::mem::MaybeUninit::<u8>::uninit();
      .                           // Unlikely to be ever exercised. As a fallback we execute a volatile read to a
-- line 106 ----------------------------------------
-- line 111 ----------------------------------------
      .                           x.as_ptr() as usize
      .                       }
      .                   }
      .               }
      .           );
      .           
      .           thread_local! {
      .               static STACK_LIMIT: Cell<Option<usize>> = Cell::new(unsafe {
      1 ( 0.00%)          guess_os_stack_limit()
      .               })
      .           }
      .           
      .           #[inline(always)]
      .           fn get_stack_limit() -> Option<usize> {
      .               STACK_LIMIT.with(|s| s.get())
      .           }
      .           
-- line 127 ----------------------------------------
-- line 403 ----------------------------------------
      .                       VirtualQuery(
      .                           psm::stack_pointer() as *const _,
      .                           mi.as_mut_ptr(),
      .                           std::mem::size_of::<QueryT>() as SIZE_T,
      .                       );
      .                       Some(mi.assume_init().AllocationBase as usize + get_thread_stack_guarantee() + 0x1000)
      .                   }
      .               } else if #[cfg(any(target_os = "linux", target_os="solaris", target_os = "netbsd"))] {
      2 ( 0.00%)          unsafe fn guess_os_stack_limit() -> Option<usize> {
      .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
      7 ( 0.00%)              assert_eq!(libc::pthread_getattr_np(libc::pthread_self(),
      .                                                           attr.as_mut_ptr()), 0);
      1 ( 0.00%)              let mut stackaddr = std::ptr::null_mut();
      4 ( 0.00%)              let mut stacksize = 0;
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_getstack(
      .                           attr.as_ptr(), &mut stackaddr, &mut stacksize
      .                       ), 0);
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_destroy(attr.as_mut_ptr()), 0);
      1 ( 0.00%)              Some(stackaddr as usize)
      3 ( 0.00%)          }
      .               } else if #[cfg(any(target_os = "freebsd", target_os = "dragonfly"))] {
      .                   unsafe fn guess_os_stack_limit() -> Option<usize> {
      .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
      .                       assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
      .                       assert_eq!(libc::pthread_attr_get_np(libc::pthread_self(), attr.as_mut_ptr()), 0);
      .                       let mut stackaddr = std::ptr::null_mut();
      .                       let mut stacksize = 0;
      .                       assert_eq!(libc::pthread_attr_getstack(
-- line 431 ----------------------------------------

 63,691 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 417 ----------------------------------------
        .               /// # #![allow(unused_mut)]
        .               /// let mut vec: Vec<i32> = Vec::new();
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        .               pub const fn new() -> Self {
  576,699 ( 0.15%)          Vec { buf: RawVec::NEW, len: 0 }
       28 ( 0.00%)      }
        .           
        .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
        .               ///
        .               /// The vector will be able to hold exactly `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the vector will not allocate.
        .               ///
        .               /// It is important to note that although the returned vector has the
        .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 601 ----------------------------------------
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
  205,561 ( 0.05%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
        .               }
        .           
        .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
-- line 617 ----------------------------------------
-- line 677 ----------------------------------------
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
   12,415 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
        .               }
        .           
        .               /// Decomposes a `Vec<T>` into its raw components.
        .               ///
        .               /// Returns the raw pointer to the underlying data, the length of
        .               /// the vector (in elements), and the allocated capacity of the
        .               /// data (in elements). These are the same arguments in the same
        .               /// order as the arguments to [`from_raw_parts`].
-- line 693 ----------------------------------------
-- line 778 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let vec: Vec<i32> = Vec::with_capacity(10);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn capacity(&self) -> usize {
   53,655 ( 0.01%)          self.buf.capacity()
        .               }
        .           
        .               /// Reserves capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 794 ----------------------------------------
-- line 801 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve(&mut self, additional: usize) {
   42,614 ( 0.01%)          self.buf.reserve(self.len, additional);
        .               }
        .           
        .               /// Reserves the minimum capacity for exactly `additional` more elements to
        .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
        .               /// capacity will be greater than or equal to `self.len() + additional`.
        .               /// Does nothing if the capacity is already sufficient.
        .               ///
        .               /// Note that the allocator may give the collection more space than it
-- line 817 ----------------------------------------
-- line 829 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve_exact(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve_exact(&mut self, additional: usize) {
    3,250 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
        .               }
        .           
        .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `try_reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 845 ----------------------------------------
-- line 930 ----------------------------------------
        .               /// assert!(vec.capacity() >= 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn shrink_to_fit(&mut self) {
        .                   // The capacity is never less than the length, and there's nothing to do when
        .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
        .                   // by only calling it with a greater capacity.
    3,688 ( 0.00%)          if self.capacity() > self.len {
    1,106 ( 0.00%)              self.buf.shrink_to_fit(self.len);
        .                   }
        .               }
        .           
        .               /// Shrinks the capacity of the vector with a lower bound.
        .               ///
        .               /// The capacity will remain at least as large as both the length
        .               /// and the supplied value.
        .               ///
-- line 947 ----------------------------------------
-- line 990 ----------------------------------------
        .               /// let slice = vec.into_boxed_slice();
        .               /// assert_eq!(slice.into_vec().capacity(), 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn into_boxed_slice(mut self) -> Box<[T], A> {
        .                   unsafe {
        .                       self.shrink_to_fit();
    1,117 ( 0.00%)              let me = ManuallyDrop::new(self);
        .                       let buf = ptr::read(&me.buf);
        .                       let len = me.len();
        .                       buf.into_box(len).assume_init()
        .                   }
        .               }
        .           
        .               /// Shortens the vector, keeping the first `len` elements and dropping
        .               /// the rest.
-- line 1006 ----------------------------------------
-- line 1040 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.truncate(0);
        .               /// assert_eq!(vec, []);
        .               /// ```
        .               ///
        .               /// [`clear`]: Vec::clear
        .               /// [`drain`]: Vec::drain
        .               #[stable(feature = "rust1", since = "1.0.0")]
   57,827 ( 0.01%)      pub fn truncate(&mut self, len: usize) {
        .                   // This is safe because:
        .                   //
        .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
        .                   //   case avoids creating an invalid slice, and
        .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
        .                   //   such that no value will be dropped twice in case `drop_in_place`
        .                   //   were to panic once (if it panics twice, the program aborts).
        .                   unsafe {
        .                       // Note: It's intentional that this is `>` and not `>=`.
        .                       //       Changing it to `>=` has negative performance
        .                       //       implications in some cases. See #78884 for more.
   43,377 ( 0.01%)              if len > self.len {
        .                           return;
        .                       }
        .                       let remaining_len = self.len - len;
        .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
   32,544 ( 0.01%)              self.len = len;
    1,074 ( 0.00%)              ptr::drop_in_place(s);
        .                   }
   69,392 ( 0.02%)      }
        .           
        .               /// Extracts a slice containing the entire vector.
        .               ///
        .               /// Equivalent to `&s[..]`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1076 ----------------------------------------
-- line 1126 ----------------------------------------
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_ptr(&self) -> *const T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref`, which creates an intermediate reference.
  503,236 ( 0.13%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns an unsafe mutable pointer to the vector's buffer.
        .               ///
-- line 1142 ----------------------------------------
-- line 1162 ----------------------------------------
        .               /// }
        .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
        .               /// ```
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_mut_ptr(&mut self) -> *mut T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref_mut`, which creates an intermediate reference.
  781,951 ( 0.20%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
-- line 1178 ----------------------------------------
-- line 1259 ----------------------------------------
        .               ///
        .               /// Normally, here, one would use [`clear`] instead to correctly drop
        .               /// the contents and thus not leak memory.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   debug_assert!(new_len <= self.capacity());
        .           
  107,189 ( 0.03%)          self.len = new_len;
    1,238 ( 0.00%)      }
        .           
        .               /// Removes an element from the vector and returns it.
        .               ///
        .               /// The removed element is replaced by the last element of the vector.
        .               ///
        .               /// This does not preserve ordering, but is *O*(1).
        .               /// If you need to preserve the element order, use [`remove`] instead.
        .               ///
-- line 1276 ----------------------------------------
-- line 1329 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.insert(1, 4);
        .               /// assert_eq!(vec, [1, 4, 2, 3]);
        .               /// vec.insert(4, 5);
        .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    1,085 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
        .                   }
        .           
      170 ( 0.00%)          let len = self.len();
      388 ( 0.00%)          if index > len {
        .                       assert_failed(index, len);
        .                   }
        .           
        .                   // space for the new element
      672 ( 0.00%)          if len == self.buf.capacity() {
        .                       self.reserve(1);
        .                   }
        .           
        .                   unsafe {
        .                       // infallible
        .                       // The spot to put the new value
        .                       {
        .                           let p = self.as_mut_ptr().add(index);
        .                           // Shift everything over to make space. (Duplicating the
        .                           // `index`th element into two consecutive places.)
      963 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
        .                           // Write it in, overwriting the first copy of the `index`th
        .                           // element.
        .                           ptr::write(p, element);
        .                       }
      672 ( 0.00%)              self.set_len(len + 1);
        .                   }
      930 ( 0.00%)      }
        .           
        .               /// Removes and returns the element at position `index` within the vector,
        .               /// shifting all elements after it to the left.
        .               ///
        .               /// Note: Because this shifts over the remaining elements, it has a
        .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
        .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
        .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1395 ----------------------------------------
        .               pub fn remove(&mut self, index: usize) -> T {
        .                   #[cold]
        .                   #[inline(never)]
        .                   #[track_caller]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("removal index (is {}) should be < len (is {})", index, len);
        .                   }
        .           
      104 ( 0.00%)          let len = self.len();
      353 ( 0.00%)          if index >= len {
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // infallible
        .                       let ret;
        .                       {
        .                           // the place we are taking from.
        .                           let ptr = self.as_mut_ptr().add(index);
        .                           // copy it out, unsafely having a copy of the value on
        .                           // the stack and in the vector at the same time.
    1,008 ( 0.00%)                  ret = ptr::read(ptr);
        .           
        .                           // Shift everything down to fill in that spot.
      238 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
        .                       }
      104 ( 0.00%)              self.set_len(len - 1);
        .                       ret
        .                   }
        .               }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
-- line 1428 ----------------------------------------
-- line 1442 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3, 4, 5];
        .               /// let keep = [false, true, true, false, true];
        .               /// let mut iter = keep.iter();
        .               /// vec.retain(|_| *iter.next().unwrap());
        .               /// assert_eq!(vec, [2, 3, 5]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
   32,058 ( 0.01%)      pub fn retain<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&T) -> bool,
        .               {
    2,181 ( 0.00%)          self.retain_mut(|elem| f(elem));
   31,392 ( 0.01%)      }
        .           
        .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
        .               /// });
        .               /// assert_eq!(vec, [2, 3, 4]);
        .               /// ```
        .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
        .               pub fn retain_mut<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
    4,389 ( 0.00%)          let original_len = self.len();
        .                   // Avoid double drop if the drop guard is not executed,
        .                   // since we may make some holes during the process.
        .                   unsafe { self.set_len(0) };
        .           
        .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
        .                   //      |<-              processed len   ->| ^- next to check
        .                   //                  |<-  deleted cnt     ->|
        .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
        .                       v: &'a mut Vec<T, A>,
        .                       processed_len: usize,
        .                       deleted_cnt: usize,
        .                       original_len: usize,
        .                   }
        .           
        .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
        .                       fn drop(&mut self) {
    3,450 ( 0.00%)                  if self.deleted_cnt > 0 {
        .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
        .                               unsafe {
        .                                   ptr::copy(
        .                                       self.v.as_ptr().add(self.processed_len),
    2,251 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
        .                                       self.original_len - self.processed_len,
        .                                   );
        .                               }
        .                           }
        .                           // SAFETY: After filling holes, all items are in contiguous memory.
        .                           unsafe {
        2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
        .                           }
        .                       }
        .                   }
        .           
        .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
        .           
        .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
        .                       original_len: usize,
        .                       f: &mut F,
        .                       g: &mut BackshiftOnDrop<'_, T, A>,
        .                   ) where
        .                       F: FnMut(&mut T) -> bool,
        .                   {
   47,940 ( 0.01%)              while g.processed_len != original_len {
        .                           // SAFETY: Unchecked element must be valid.
        .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
   13,380 ( 0.00%)                  if !f(cur) {
        .                               // Advance early to avoid double drop if `drop_in_place` panicked.
      220 ( 0.00%)                      g.processed_len += 1;
       72 ( 0.00%)                      g.deleted_cnt += 1;
        .                               // SAFETY: We never touch this element again after dropped.
       35 ( 0.00%)                      unsafe { ptr::drop_in_place(cur) };
        .                               // We already advanced the counter.
        .                               if DELETED {
        .                                   continue;
        .                               } else {
        .                                   break;
        .                               }
        .                           }
        .                           if DELETED {
        .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
        .                               // We use copy for move, and never touch this element again.
        .                               unsafe {
      483 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
        .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
        .                               }
        .                           }
      322 ( 0.00%)                  g.processed_len += 1;
        .                       }
        .                   }
        .           
        .                   // Stage 1: Nothing was deleted.
        .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
        .           
        .                   // Stage 2: Some elements were deleted.
        .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
        .               ///
        .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
        .               ///
        .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
        .               /// ```
        .               #[stable(feature = "dedup_by", since = "1.16.0")]
   11,361 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
        .               where
        .                   F: FnMut(&mut T, &mut T) -> bool,
        .               {
    1,623 ( 0.00%)          let len = self.len();
    3,906 ( 0.00%)          if len <= 1 {
        .                       return;
        .                   }
        .           
        .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
        .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
        .                       /* Offset of the element we want to check if it is duplicate */
        .                       read: usize,
        .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
        .                   let ptr = gap.vec.as_mut_ptr();
        .           
        .                   /* Drop items while going through Vec, it should be more efficient than
        .                    * doing slice partition_dedup + truncate */
        .           
        .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
        .                    * are always in-bounds and read_ptr never aliases prev_ptr */
        .                   unsafe {
    1,071 ( 0.00%)              while gap.read < len {
        .                           let read_ptr = ptr.add(gap.read);
        .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
        .           
      164 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
        .                               // Increase `gap.read` now since the drop may panic.
        .                               gap.read += 1;
        .                               /* We have found duplicate, drop it in-place */
        .                               ptr::drop_in_place(read_ptr);
        .                           } else {
        .                               let write_ptr = ptr.add(gap.write);
        .           
        .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
        .                                * have to use `copy` or conditional `copy_nonoverlapping`.
        .                                * Looks like the first option is faster. */
        .                               ptr::copy(read_ptr, write_ptr, 1);
        .           
        .                               /* We have filled that place, so go further */
      830 ( 0.00%)                      gap.write += 1;
        .                               gap.read += 1;
        .                           }
        .                       }
        .           
        .                       /* Technically we could let `gap` clean up with its Drop, but
        .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
        .                        * the codegen, so we just do it manually */
        .                       gap.vec.set_len(gap.write);
        .                       mem::forget(gap);
        .                   }
   12,984 ( 0.00%)      }
        .           
        .               /// Appends an element to the back of a collection.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
        .               ///
        .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2];
        .               /// vec.push(3);
        .               /// assert_eq!(vec, [1, 2, 3]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      140 ( 0.00%)      pub fn push(&mut self, value: T) {
        .                   // This will panic or abort if we would allocate > isize::MAX bytes
        .                   // or if the length increment would overflow for zero-sized types.
1,716,652 ( 0.43%)          if self.len == self.buf.capacity() {
  115,634 ( 0.03%)              self.buf.reserve_for_push(self.len);
        .                   }
        .                   unsafe {
   49,502 ( 0.01%)              let end = self.as_mut_ptr().add(self.len);
        .                       ptr::write(end, value);
1,958,591 ( 0.50%)              self.len += 1;
        .                   }
      112 ( 0.00%)      }
        .           
        .               /// Removes the last element from a vector and returns it, or [`None`] if it
        .               /// is empty.
        .               ///
        .               /// If you'd like to pop the first element, consider using
        .               /// [`VecDeque::pop_front`] instead.
        .               ///
        .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3];
        .               /// assert_eq!(vec.pop(), Some(3));
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop(&mut self) -> Option<T> {
  156,205 ( 0.04%)          if self.len == 0 {
       14 ( 0.00%)              None
        .                   } else {
        .                       unsafe {
  117,277 ( 0.03%)                  self.len -= 1;
   17,477 ( 0.00%)                  Some(ptr::read(self.as_ptr().add(self.len())))
        .                       }
        .                   }
        .               }
        .           
        .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
        .               ///
        .               /// # Panics
        .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
        .               /// let mut vec2 = vec![4, 5, 6];
        .               /// vec.append(&mut vec2);
        .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
        .               /// assert_eq!(vec2, []);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "append", since = "1.4.0")]
      385 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
        .                   unsafe {
        .                       self.append_elements(other.as_slice() as _);
        .                       other.set_len(0);
        .                   }
      330 ( 0.00%)      }
        .           
        .               /// Appends elements to `Self` from other buffer.
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               unsafe fn append_elements(&mut self, other: *const [T]) {
        .                   let count = unsafe { (*other).len() };
        .                   self.reserve(count);
    4,309 ( 0.00%)          let len = self.len();
        .                   unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
   51,319 ( 0.01%)          self.len += count;
        .               }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// When the iterator **is** dropped, all elements in the range are removed
        .               /// from the vector, even if the iterator was not fully consumed. If the
        .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
-- line 1807 ----------------------------------------
-- line 1834 ----------------------------------------
        .                   // When the Drain is first created, it shortens the length of
        .                   // the source vector to make sure no uninitialized or moved-from elements
        .                   // are accessible at all if the Drain's destructor never gets to run.
        .                   //
        .                   // Drain will ptr::read out the values to remove.
        .                   // When finished, remaining tail of the vec is copied back to cover
        .                   // the hole, and the vector length is restored to the new length.
        .                   //
    4,222 ( 0.00%)          let len = self.len();
        .                   let Range { start, end } = slice::range(range, ..len);
        .           
        .                   unsafe {
        .                       // set self.vec length's to start, to be safe in case Drain is leaked
        .                       self.set_len(start);
        .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
        .                       // whole Drain iterator (like &mut T).
       26 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
      287 ( 0.00%)              Drain {
        .                           tail_start: end,
       26 ( 0.00%)                  tail_len: len - end,
        .                           iter: range_slice.iter(),
        .                           vec: NonNull::from(self),
        .                       }
        .                   }
        .               }
        .           
        .               /// Clears the vector, removing all values.
        .               ///
-- line 1861 ----------------------------------------
-- line 1869 ----------------------------------------
        .               ///
        .               /// v.clear();
        .               ///
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn clear(&mut self) {
  102,368 ( 0.03%)          self.truncate(0)
        .               }
        .           
        .               /// Returns the number of elements in the vector, also referred to
        .               /// as its 'length'.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1885 ----------------------------------------
-- line 1900 ----------------------------------------
        .               /// let mut v = Vec::new();
        .               /// assert!(v.is_empty());
        .               ///
        .               /// v.push(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn is_empty(&self) -> bool {
   67,239 ( 0.02%)          self.len() == 0
        .               }
        .           
        .               /// Splits the collection into two at the given index.
        .               ///
        .               /// Returns a newly allocated vector containing the elements in the range
        .               /// `[at, len)`. After the call, the original vector will be left containing
        .               /// the elements `[0, at)` with its previous capacity unchanged.
        .               ///
-- line 1916 ----------------------------------------
-- line 1935 ----------------------------------------
        .                   A: Clone,
        .               {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(at: usize, len: usize) -> ! {
        .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
        .                   }
        .           
      532 ( 0.00%)          if at > self.len() {
        .                       assert_failed(at, self.len());
        .                   }
        .           
      422 ( 0.00%)          if at == 0 {
        .                       // the new vector can take over the original buffer and avoid the copy
        .                       return mem::replace(
        .                           self,
        .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
        .                       );
        .                   }
        .           
        .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
        .               ///
        .               /// let mut vec = vec![];
        .               /// let mut p = 1;
        .               /// vec.resize_with(4, || { p *= 2; p });
        .               /// assert_eq!(vec, [2, 4, 8, 16]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
    5,485 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
        .               where
        .                   F: FnMut() -> T,
        .               {
      733 ( 0.00%)          let len = self.len();
    1,466 ( 0.00%)          if new_len > len {
    5,783 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
    4,752 ( 0.00%)      }
        .           
        .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
        .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
        .               /// `'a`. If the type has only static references, or none at all, then this
        .               /// may be chosen to be `'static`.
        .               ///
        .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
        .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2070 ----------------------------------------
        .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
        .               #[inline]
        .               pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
        .                   // Note:
        .                   // This method is not implemented in terms of `split_at_spare_mut`,
        .                   // to prevent invalidation of pointers to the buffer.
        .                   unsafe {
        .                       slice::from_raw_parts_mut(
        4 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
       80 ( 0.00%)                  self.buf.capacity() - self.len,
        .                       )
        .                   }
        .               }
        .           
        .               /// Returns vector content as a slice of `T`, along with the remaining spare
        .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
        .               ///
        .               /// The returned spare capacity slice can be used to fill the vector with data
-- line 2087 ----------------------------------------
-- line 2189 ----------------------------------------
        .               /// assert_eq!(vec, ["hello", "world", "world"]);
        .               ///
        .               /// let mut vec = vec![1, 2, 3, 4];
        .               /// vec.resize(2, 0);
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize", since = "1.5.0")]
       30 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
        3 ( 0.00%)          let len = self.len();
        .           
        9 ( 0.00%)          if new_len > len {
    1,524 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Clones and appends all elements in a slice to the `Vec`.
        .               ///
        .               /// Iterates over the slice `other`, clones each element, and then appends
        .               /// it to this `Vec`. The `other` slice is traversed in-order.
        .               ///
        .               /// Note that this function is same as [`extend`] except that it is
        .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2291 ----------------------------------------
        .               fn last(mut self) -> T {
        .                   (self.0)()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               #[cfg(not(no_global_oom_handling))]
        .               /// Extend the vector by `n` values, using the given generator.
   22,724 ( 0.01%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
        .                   self.reserve(n);
        .           
        .                   unsafe {
    1,661 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
        .                       // Use SetLenOnDrop to work around bug where compiler
        .                       // might not realize the store through `ptr` through self.set_len()
        .                       // don't alias.
        .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
        .           
        .                       // Write all elements except the last one
        .                       for _ in 1..n {
        .                           ptr::write(ptr, value.next());
        .                           ptr = ptr.offset(1);
        .                           // Increment the length in every step in case next() panics
        .                           local_len.increment_len(1);
        .                       }
        .           
   49,171 ( 0.01%)              if n > 0 {
        .                           // We can write the last element directly without cloning needlessly
        .                           ptr::write(ptr, value.last());
        .                           local_len.increment_len(1);
        .                       }
        .           
        .                       // len set by scope guard
        .                   }
   17,921 ( 0.00%)      }
        .           }
        .           
        .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
        .               /// Removes consecutive repeated elements in the vector according to the
        .               /// [`PartialEq`] trait implementation.
        .               ///
        .               /// If the vector is sorted, this removes all duplicates.
        .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
        .               ///
        .               /// vec.dedup();
        .               ///
        .               /// assert_eq!(vec, [1, 2, 3, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn dedup(&mut self) {
    1,624 ( 0.00%)          self.dedup_by(|a, b| a == b)
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Internal methods and functions
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
    7,031 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
   37,008 ( 0.01%)      <T as SpecFromElem>::from_elem(elem, n, Global)
    8,667 ( 0.00%)  }
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[unstable(feature = "allocator_api", issue = "32838")]
        .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
        .               <T as SpecFromElem>::from_elem(elem, n, alloc)
        .           }
        .           
-- line 2367 ----------------------------------------
-- line 2424 ----------------------------------------
        .           // Common trait implementations for Vec
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
        .               type Target = [T];
        .           
        .               fn deref(&self) -> &[T] {
  739,366 ( 0.19%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
       36 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
        .               fn deref_mut(&mut self) -> &mut [T] {
  147,068 ( 0.04%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           trait SpecCloneFrom {
        .               fn clone_from(this: &mut Self, other: &Self);
        .           }
        .           
-- line 2447 ----------------------------------------
-- line 2468 ----------------------------------------
        .                   this.extend_from_slice(other);
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
        .               #[cfg(not(test))]
   41,284 ( 0.01%)      fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
        2 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
   52,207 ( 0.01%)      }
        .           
        .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
        .               // required for this method definition, is not available. Instead use the
        .               // `slice::to_vec`  function which is only available with cfg(test)
        .               // NB see the slice::hack module in slice.rs for more information
        .               #[cfg(test)]
        .               fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
        .               type Output = I::Output;
        .           
        .               #[inline]
        .               fn index(&self, index: I) -> &Self::Output {
   21,144 ( 0.01%)          Index::index(&**self, index)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_on_unimplemented(
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {
        .               #[inline]
        .               fn index_mut(&mut self, index: I) -> &mut Self::Output {
        4 ( 0.00%)          IndexMut::index_mut(&mut **self, index)
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> FromIterator<T> for Vec<T> {
        .               #[inline]
        .               fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
  306,834 ( 0.08%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
        .               type Item = T;
        .               type IntoIter = IntoIter<T, A>;
        .           
-- line 2555 ----------------------------------------
-- line 2564 ----------------------------------------
        .               /// for s in v.into_iter() {
        .               ///     // s has type String, not &String
        .               ///     println!("{}", s);
        .               /// }
        .               /// ```
        .               #[inline]
        .               fn into_iter(self) -> IntoIter<T, A> {
        .                   unsafe {
  113,246 ( 0.03%)              let mut me = ManuallyDrop::new(self);
        .                       let alloc = ptr::read(me.allocator());
        .                       let begin = me.as_mut_ptr();
        .                       let end = if mem::size_of::<T>() == 0 {
        .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
        .                       } else {
        .                           begin.add(me.len()) as *const T
        .                       };
        .                       let cap = me.buf.capacity();
   36,184 ( 0.01%)              IntoIter {
        .                           buf: NonNull::new_unchecked(begin),
        .                           phantom: PhantomData,
        .                           cap,
        .                           alloc,
        .                           ptr: begin,
        .                           end,
        .                       }
        .                   }
-- line 2589 ----------------------------------------
-- line 2591 ----------------------------------------
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a Vec<T, A> {
        .               type Item = &'a T;
        .               type IntoIter = slice::Iter<'a, T>;
        .           
        .               fn into_iter(self) -> slice::Iter<'a, T> {
       39 ( 0.00%)          self.iter()
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
        .               type Item = &'a mut T;
        .               type IntoIter = slice::IterMut<'a, T>;
        .           
        .               fn into_iter(self) -> slice::IterMut<'a, T> {
    1,086 ( 0.00%)          self.iter_mut()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
        .               #[inline]
       88 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
  196,771 ( 0.05%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
       88 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, item: T) {
      532 ( 0.00%)          self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
        .                   self.reserve(additional);
        .               }
        .           }
        .           
-- line 2631 ----------------------------------------
-- line 2636 ----------------------------------------
        .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
        .                   // This is the case for a general iterator.
        .                   //
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iterator {
        .                   //          self.push(item);
        .                   //      }
   58,030 ( 0.01%)          while let Some(element) = iterator.next() {
    5,019 ( 0.00%)              let len = self.len();
   63,099 ( 0.02%)              if len == self.capacity() {
      529 ( 0.00%)                  let (lower, _) = iterator.size_hint();
        .                           self.reserve(lower.saturating_add(1));
        .                       }
        .                       unsafe {
        .                           ptr::write(self.as_mut_ptr().add(len), element);
        .                           // Since next() executes user code which can panic we have to bump the length
        .                           // after each step.
        .                           // NB can't overflow since we would have had to alloc the address space
   55,505 ( 0.01%)                  self.set_len(len + 1);
        .                       }
        .                   }
      295 ( 0.00%)      }
        .           
        .               /// Creates a splicing iterator that replaces the specified range in the vector
        .               /// with the given `replace_with` iterator and yields the removed items.
        .               /// `replace_with` does not need to be the same length as `range`.
        .               ///
        .               /// `range` is removed even if the iterator is not consumed until the end.
        .               ///
        .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2693 ----------------------------------------
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "vec_splice", since = "1.21.0")]
        .               pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter, A>
        .               where
        .                   R: RangeBounds<usize>,
        .                   I: IntoIterator<Item = T>,
        .               {
       11 ( 0.00%)          Splice { drain: self.drain(range), replace_with: replace_with.into_iter() }
        .               }
        .           
        .               /// Creates an iterator which uses a closure to determine if an element should be removed.
        .               ///
        .               /// If the closure returns true, then the element is removed and yielded.
        .               /// If the closure returns false, the element will remain in the vector and will not be yielded
        .               /// by the iterator.
        .               ///
-- line 2709 ----------------------------------------
-- line 2745 ----------------------------------------
        .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
        .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
        .               /// ```
        .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
        .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
      471 ( 0.00%)          let old_len = self.len();
        .           
        .                   // Guard against us getting leaked (leak amplification)
        .                   unsafe {
        .                       self.set_len(0);
        .                   }
        .           
      352 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
        .               }
        .           }
        .           
        .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
        .           ///
        .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
        .           /// append the entire slice at once.
        .           ///
-- line 2768 ----------------------------------------
-- line 2803 ----------------------------------------
        .               #[inline]
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   Ord::cmp(&**self, &**other)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
  142,040 ( 0.04%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // use drop for [T]
        .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
        .                       // could avoid questions of validity in certain cases
   64,740 ( 0.02%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
        .                   }
        .                   // RawVec handles deallocation
  166,908 ( 0.04%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
        .           impl<T> const Default for Vec<T> {
        .               /// Creates an empty `Vec<T>`.
        .               fn default() -> Vec<T> {
        .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
        .               /// newly-allocated buffer with exactly the right capacity.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
        .               /// ```
        .               fn from(v: Vec<T, A>) -> Self {
        4 ( 0.00%)          v.into_boxed_slice()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl From<&str> for Vec<u8> {
        .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
        .               ///
-- line 2992 ----------------------------------------

  291,749 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs
--------------------------------------------------------------------------------
Ir                 

-- line 14 ----------------------------------------
        .           
        .           pub type EncodeResult = Result<(), !>;
        .           
        .           pub struct Encoder {
        .               pub data: Vec<u8>,
        .           }
        .           
        .           impl Encoder {
        1 ( 0.00%)      pub fn new(data: Vec<u8>) -> Encoder {
        4 ( 0.00%)          Encoder { data }
        1 ( 0.00%)      }
        .           
        1 ( 0.00%)      pub fn into_inner(self) -> Vec<u8> {
        4 ( 0.00%)          self.data
        1 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn position(&self) -> usize {
    5,898 ( 0.00%)          self.data.len()
        .               }
        .           }
        .           
        .           macro_rules! write_leb128 {
        .               ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{
        .                   const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);
        .                   let old_len = $enc.data.len();
        .           
-- line 40 ----------------------------------------
-- line 67 ----------------------------------------
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> EncodeResult {
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn emit_usize(&mut self, v: usize) -> EncodeResult {
  112,012 ( 0.03%)          write_leb128!(self, v, usize, write_usize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u128(&mut self, v: u128) -> EncodeResult {
       91 ( 0.00%)          write_leb128!(self, v, u128, write_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u64(&mut self, v: u64) -> EncodeResult {
      812 ( 0.00%)          write_leb128!(self, v, u64, write_u64_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u32(&mut self, v: u32) -> EncodeResult {
  100,713 ( 0.03%)          write_leb128!(self, v, u32, write_u32_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u16(&mut self, v: u16) -> EncodeResult {
        .                   self.data.extend_from_slice(&v.to_le_bytes());
        .                   Ok(())
        .               }
        .           
-- line 98 ----------------------------------------
-- line 131 ----------------------------------------
        .               #[inline]
        .               fn emit_i8(&mut self, v: i8) -> EncodeResult {
        .                   let as_u8: u8 = unsafe { std::mem::transmute(v) };
        .                   self.emit_u8(as_u8)
        .               }
        .           
        .               #[inline]
        .               fn emit_bool(&mut self, v: bool) -> EncodeResult {
    1,108 ( 0.00%)          self.emit_u8(if v { 1 } else { 0 })
        .               }
        .           
        .               #[inline]
        .               fn emit_f64(&mut self, v: f64) -> EncodeResult {
        .                   let as_u64: u64 = v.to_bits();
        .                   self.emit_u64(as_u64)
        .               }
        .           
-- line 147 ----------------------------------------
-- line 549 ----------------------------------------
        .               #[inline]
        .               pub fn advance(&mut self, bytes: usize) {
        .                   self.position += bytes;
        .               }
        .           
        .               #[inline]
        .               pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {
        .                   let start = self.position;
       30 ( 0.00%)          self.position += bytes;
       30 ( 0.00%)          &self.data[start..self.position]
        .               }
        .           }
        .           
        .           macro_rules! read_leb128 {
        .               ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};
        .           }
        .           
        .           impl<'a> serialize::Decoder for Decoder<'a> {
        .               #[inline]
        .               fn read_unit(&mut self) -> () {
        .                   ()
        .               }
        .           
        .               #[inline]
        .               fn read_u128(&mut self) -> u128 {
      586 ( 0.00%)          read_leb128!(self, read_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_u64(&mut self) -> u64 {
    4,387 ( 0.00%)          read_leb128!(self, read_u64_leb128)
        .               }
        .           
        .               #[inline]
   31,483 ( 0.01%)      fn read_u32(&mut self) -> u32 {
  172,999 ( 0.04%)          read_leb128!(self, read_u32_leb128)
   62,966 ( 0.02%)      }
        .           
        .               #[inline]
        .               fn read_u16(&mut self) -> u16 {
  561,386 ( 0.14%)          let bytes = [self.data[self.position], self.data[self.position + 1]];
   80,198 ( 0.02%)          let value = u16::from_le_bytes(bytes);
  160,396 ( 0.04%)          self.position += 2;
        .                   value
        .               }
        .           
        .               #[inline]
        .               fn read_u8(&mut self) -> u8 {
1,825,245 ( 0.46%)          let value = self.data[self.position];
  346,729 ( 0.09%)          self.position += 1;
        .                   value
        .               }
        .           
        .               #[inline]
  266,336 ( 0.07%)      fn read_usize(&mut self) -> usize {
  266,340 ( 0.07%)          read_leb128!(self, read_usize_leb128)
  532,672 ( 0.13%)      }
        .           
        .               #[inline]
        .               fn read_i128(&mut self) -> i128 {
        .                   read_leb128!(self, read_i128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_i64(&mut self) -> i64 {
-- line 613 ----------------------------------------
-- line 637 ----------------------------------------
        .               #[inline]
        .               fn read_isize(&mut self) -> isize {
        .                   read_leb128!(self, read_isize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_bool(&mut self) -> bool {
        .                   let value = self.read_u8();
    7,738 ( 0.00%)          value != 0
        .               }
        .           
        .               #[inline]
        .               fn read_f64(&mut self) -> f64 {
        .                   let bits = self.read_u64();
        .                   f64::from_bits(bits)
        .               }
        .           
-- line 653 ----------------------------------------
-- line 660 ----------------------------------------
        .               #[inline]
        .               fn read_char(&mut self) -> char {
        .                   let bits = self.read_u32();
        .                   std::char::from_u32(bits).unwrap()
        .               }
        .           
        .               #[inline]
        .               fn read_str(&mut self) -> Cow<'_, str> {
   46,352 ( 0.01%)          let len = self.read_usize();
  220,548 ( 0.06%)          let sentinel = self.data[self.position + len];
   55,140 ( 0.01%)          assert!(sentinel == STR_SENTINEL);
        .                   let s = unsafe {
        .                       std::str::from_utf8_unchecked(&self.data[self.position..self.position + len])
        .                   };
  137,850 ( 0.03%)          self.position += len + 1;
   56,352 ( 0.01%)          Cow::Borrowed(s)
        .               }
        .           
        .               #[inline]
        .               fn read_raw_bytes_into(&mut self, s: &mut [u8]) {
      104 ( 0.00%)          let start = self.position;
      635 ( 0.00%)          self.position += s.len();
      104 ( 0.00%)          s.copy_from_slice(&self.data[start..self.position]);
        .               }
        .           }
        .           
        .           // Specializations for contiguous byte sequences follow. The default implementations for slices
        .           // encode and decode each element individually. This isn't necessary for `u8` slices when using
        .           // opaque encoders and decoders, because each `u8` is unchanged by encoding and decoding.
        .           // Therefore, we can use more efficient implementations that process the entire sequence at once.
        .           
-- line 690 ----------------------------------------

  584,052 ( 0.15%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs
--------------------------------------------------------------------------------
Ir               

-- line 26 ----------------------------------------
      .               /// }
      .               ///
      .               /// assert_eq!(letters[&'s'], 2);
      .               /// assert_eq!(letters[&'t'], 3);
      .               /// assert_eq!(letters[&'u'], 1);
      .               /// assert_eq!(letters.get(&'y'), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
664,338 ( 0.17%)      pub fn rustc_entry(&mut self, key: K) -> RustcEntry<'_, K, V, A> {
      .                   let hash = make_insert_hash(&self.hash_builder, &key);
    276 ( 0.00%)          if let Some(elem) = self.table.find(hash, |q| q.0.eq(&key)) {
 58,898 ( 0.01%)              RustcEntry::Occupied(RustcOccupiedEntry {
 12,294 ( 0.00%)                  key: Some(key),
      .                           elem,
      .                           table: &mut self.table,
      .                       })
      .                   } else {
      .                       // Ideally we would put this in VacantEntry::insert, but Entry is not
      .                       // generic over the BuildHasher and adding a generic parameter would be
      .                       // a breaking change.
      .                       self.reserve(1);
      .           
190,458 ( 0.05%)              RustcEntry::Vacant(RustcVacantEntry {
      .                           hash,
 25,081 ( 0.01%)                  key,
      .                           table: &mut self.table,
      .                       })
      .                   }
535,449 ( 0.14%)      }
      .           }
      .           
      .           /// A view into a single entry in a map, which may either be vacant or occupied.
      .           ///
      .           /// This `enum` is constructed from the [`entry`] method on [`HashMap`].
      .           ///
      .           /// [`HashMap`]: struct.HashMap.html
      .           /// [`entry`]: struct.HashMap.html#method.rustc_entry
-- line 62 ----------------------------------------
-- line 405 ----------------------------------------
      .               /// if let RustcEntry::Occupied(o) = map.rustc_entry("poneyland") {
      .               ///     *o.into_mut() += 10;
      .               /// }
      .               ///
      .               /// assert_eq!(map["poneyland"], 22);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn into_mut(self) -> &'a mut V {
  2,336 ( 0.00%)          unsafe { &mut self.elem.as_mut().1 }
      .               }
      .           
      .               /// Sets the value of the entry, and returns the entry's old value.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 421 ----------------------------------------
-- line 568 ----------------------------------------
      .               /// let mut map: HashMap<&str, u32> = HashMap::new();
      .               ///
      .               /// if let RustcEntry::Vacant(o) = map.rustc_entry("poneyland") {
      .               ///     o.insert(37);
      .               /// }
      .               /// assert_eq!(map["poneyland"], 37);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
  2,899 ( 0.00%)      pub fn insert(self, value: V) -> &'a mut V {
      .                   unsafe {
 13,205 ( 0.00%)              let bucket = self.table.insert_no_grow(self.hash, (self.key, value));
  1,563 ( 0.00%)              &mut bucket.as_mut().1
      .                   }
  3,907 ( 0.00%)      }
      .           
      .               /// Sets the value of the entry with the RustcVacantEntry's key,
      .               /// and returns a RustcOccupiedEntry.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 589 ----------------------------------------

140,743 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 57 ----------------------------------------
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        6 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
        3 ( 0.00%)              from_str_radix(src, radix)
        9 ( 0.00%)          }
        .           
        .                   /// Returns the number of ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[doc(alias = "popcount")]
        .                   #[doc(alias = "popcnt")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn count_ones(self) -> u32 {
   21,990 ( 0.01%)              intrinsics::ctpop(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of zeros in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
        .                   /// assert_eq!(n.leading_zeros(), 2);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn leading_zeros(self) -> u32 {
  175,321 ( 0.04%)              intrinsics::ctlz(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of trailing zeros in the binary representation
        .                   /// of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
        .                   /// assert_eq!(n.trailing_zeros(), 3);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn trailing_zeros(self) -> u32 {
  140,231 ( 0.04%)              intrinsics::cttz(self) as u32
        .                   }
        .           
        .                   /// Returns the number of leading ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn rotate_left(self, n: u32) -> Self {
2,085,245 ( 0.53%)              intrinsics::rotate_left(self, n as $SelfT)
        .                   }
        .           
        .                   /// Shifts the bits to the right by a specified amount, `n`,
        .                   /// wrapping the truncated bits to the beginning of the resulting
        .                   /// integer.
        .                   ///
        .                   /// Please note this isn't the same operation as the `>>` shifting operator!
        .                   ///
-- line 220 ----------------------------------------
-- line 456 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_add`.
  315,920 ( 0.08%)              unsafe { intrinsics::unchecked_add(self, rhs) }
        .                   }
        .           
        .                   /// Checked addition with a signed integer. Computes `self + rhs`,
        .                   /// returning `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_sub`.
   11,452 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
        .                   }
        .           
        .                   /// Checked integer multiplication. Computes `self * rhs`, returning
        .                   /// `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 1035 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_add(self, rhs: Self) -> Self {
   27,809 ( 0.01%)              intrinsics::saturating_add(self, rhs)
        .                   }
        .           
        .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
      452 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
        .                   }
        .           
        .                   /// Saturating integer multiplication. Computes `self * rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
1,021,934 ( 0.26%)              intrinsics::wrapping_add(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) addition with a signed integer. Computes
        .                   /// `self + rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
  530,773 ( 0.13%)              intrinsics::wrapping_sub(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) multiplication. Computes `self *
        .                   /// rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
        .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
1,572,947 ( 0.40%)              intrinsics::wrapping_mul(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) division. Computes `self / rhs`.
        .                   /// Wrapped division on unsigned types is just normal division.
        .                   /// There's no way wrapping could ever happen.
        .                   /// This function exists, so that all operations
        .                   /// are accounted for in the wrapping operations.
        .                   ///
-- line 1256 ----------------------------------------
-- line 1397 ----------------------------------------
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_shl(self, rhs: u32) -> Self {
        .                       // SAFETY: the masking by the bitsize of the type ensures that we do not shift
        .                       // out of bounds
        .                       unsafe {
        4 ( 0.00%)                  intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)
        .                       }
        .                   }
        .           
        .                   /// Panic-free bitwise shift-right; yields `self >> mask(rhs)`,
        .                   /// where `mask` removes any high-order bits of `rhs` that
        .                   /// would cause the shift to exceed the bitwidth of the type.
        .                   ///
        .                   /// Note that this is *not* the same as a rotate-right; the
-- line 1413 ----------------------------------------
-- line 1492 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
  213,264 ( 0.05%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates `self + rhs + carry` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
        .                   /// additional bit of overflow. This allows for chaining together multiple additions
        .                   /// to create "big integers" which represent larger values.
-- line 1508 ----------------------------------------
-- line 1588 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
   55,643 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
        .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
        .                   /// to create "big integers" which represent larger values.
-- line 1604 ----------------------------------------
-- line 1674 ----------------------------------------
        .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                     without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
  358,116 ( 0.09%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates the divisor when `self` is divided by `rhs`.
        .                   ///
        .                   /// Returns a tuple of the divisor along with a boolean indicating
        .                   /// whether an arithmetic overflow would occur. Note that for unsigned
        .                   /// integers overflow never occurs, so the second value is always
-- line 1690 ----------------------------------------
-- line 2132 ----------------------------------------
        .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
        .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
        .                   /// ```
        .                   #[must_use]
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
        .                   #[inline(always)]
        .                   pub const fn is_power_of_two(self) -> bool {
      222 ( 0.00%)              self.count_ones() == 1
        .                   }
        .           
        .                   // Returns one less than next power of two.
        .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
        .                   //
        .                   // 8u8.one_less_than_next_power_of_two() == 7
        .                   // 6u8.one_less_than_next_power_of_two() == 7
        .                   //
        .                   // This method cannot overflow, as in the `next_power_of_two`
        .                   // overflow cases it instead ends up returning the maximum value
        .                   // of the type, and can return 0 for 0.
        .                   #[inline]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   const fn one_less_than_next_power_of_two(self) -> Self {
      796 ( 0.00%)              if self <= 1 { return 0; }
        .           
    3,907 ( 0.00%)              let p = self - 1;
        .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
        .                       // That means the shift is always in-bounds, and some processors
        .                       // (such as intel pre-haswell) have more efficient ctlz
        .                       // intrinsics when the argument is non-zero.
   11,634 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
    3,890 ( 0.00%)              <$SelfT>::MAX >> z
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `self`.
        .                   ///
        .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
        .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
        .                   /// release mode (the only situation in which method can return 0).
        .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
        .                   #[rustc_inherit_overflow_checks]
        .                   pub const fn next_power_of_two(self) -> Self {
    6,966 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `n`. If
        .                   /// the next power of two is greater than the type's maximum value,
        .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 2195 ----------------------------------------

   24,718 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir               

-- line 118 ----------------------------------------
      .               stability: InternedSet<'tcx, attr::Stability>,
      .           
      .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
      .               const_stability: InternedSet<'tcx, attr::ConstStability>,
      .           }
      .           
      .           impl<'tcx> CtxtInterners<'tcx> {
      .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
     17 ( 0.00%)          CtxtInterners {
      .                       arena,
      .                       type_: Default::default(),
      .                       type_list: Default::default(),
      .                       substs: Default::default(),
      .                       region: Default::default(),
      .                       poly_existential_predicates: Default::default(),
      .                       canonical_var_infos: Default::default(),
      .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
      .                       stability: Default::default(),
      .                       const_stability: Default::default(),
      .                   }
      .               }
      .           
      .               /// Interns a type.
      .               #[allow(rustc::usage_of_ty_tykind)]
      .               #[inline(never)]
315,832 ( 0.08%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
      .                   self.type_
197,395 ( 0.05%)              .intern(kind, |kind| {
 16,460 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
      .           
      .                           let ty_struct = TyS {
 32,920 ( 0.01%)                      kind,
      .                               flags: flags.flags,
      .                               outer_exclusive_binder: flags.outer_exclusive_binder,
      .                           };
      .           
      .                           Interned(self.arena.alloc(ty_struct))
      .                       })
      .                       .0
355,311 ( 0.09%)      }
      .           
      .               #[inline(never)]
137,128 ( 0.03%)      fn intern_predicate(
      .                   &self,
      .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
      .               ) -> &'tcx PredicateInner<'tcx> {
      .                   self.predicate
119,987 ( 0.03%)              .intern(kind, |kind| {
 22,758 ( 0.01%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
      .           
      .                           let predicate_struct = PredicateInner {
      .                               kind,
      .                               flags: flags.flags,
      .                               outer_exclusive_binder: flags.outer_exclusive_binder,
      .                           };
      .           
      .                           Interned(self.arena.alloc(predicate_struct))
      .                       })
      .                       .0
154,269 ( 0.04%)      }
      .           }
      .           
      .           pub struct CommonTypes<'tcx> {
      .               pub unit: Ty<'tcx>,
      .               pub bool: Ty<'tcx>,
      .               pub char: Ty<'tcx>,
      .               pub isize: Ty<'tcx>,
      .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
      .           /// safely used as a key in the maps of a TypeckResults. For that to be
      .           /// the case, the HirId must have the same `owner` as all the other IDs in
      .           /// this table (signified by `hir_owner`). Otherwise the HirId
      .           /// would be in a different frame of reference and using its `local_id`
      .           /// would result in lookup errors, or worse, in silently wrong data being
      .           /// stored/returned.
      .           #[inline]
      .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
 24,356 ( 0.01%)      if hir_id.owner != hir_owner {
      .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
      .               }
      .           }
      .           
      .           #[cold]
      .           #[inline(never)]
      .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
      .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
      .           }
      .           
      .           impl<'a, V> LocalTableInContext<'a, V> {
      .               pub fn contains_key(&self, id: hir::HirId) -> bool {
      .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.data.contains_key(&id.local_id)
      .               }
      .           
 18,081 ( 0.00%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
  3,695 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
  3,695 ( 0.00%)          self.data.get(&id.local_id)
 14,496 ( 0.00%)      }
      .           
      .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
      .                   self.data.iter()
      .               }
      .           }
      .           
      .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
      .               type Output = V;
      .           
    660 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
      .                   self.get(key).expect("LocalTableInContext: key not found")
    440 ( 0.00%)      }
      .           }
      .           
      .           pub struct LocalTableInContextMut<'a, V> {
      .               hir_owner: LocalDefId,
      .               data: &'a mut ItemLocalMap<V>,
      .           }
      .           
      .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
      .               pub treat_byte_string_as_slice: ItemLocalSet,
      .           
      .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
      .               /// on closure size.
      .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
      .           }
      .           
      .           impl<'tcx> TypeckResults<'tcx> {
  2,310 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
 27,335 ( 0.01%)          TypeckResults {
      .                       hir_owner,
      .                       type_dependent_defs: Default::default(),
      .                       field_indices: Default::default(),
      .                       user_provided_types: Default::default(),
      .                       user_provided_sigs: Default::default(),
      .                       node_types: Default::default(),
      .                       node_substs: Default::default(),
      .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
      .                       tainted_by_errors: None,
      .                       concrete_opaque_types: Default::default(),
      .                       closure_min_captures: Default::default(),
      .                       closure_fake_reads: Default::default(),
      .                       generator_interior_types: ty::Binder::dummy(Default::default()),
      .                       treat_byte_string_as_slice: Default::default(),
      .                       closure_size_eval: Default::default(),
      .                   }
  2,310 ( 0.00%)      }
      .           
      .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
  3,492 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
  2,328 ( 0.00%)          match *qpath {
  5,988 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
      .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
      .                           .type_dependent_def(id)
    996 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
      .                   }
  5,820 ( 0.00%)      }
      .           
     43 ( 0.00%)      pub fn type_dependent_defs(
      .                   &self,
      .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
    223 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
     43 ( 0.00%)      }
      .           
    407 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
    841 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
    814 ( 0.00%)      }
      .           
  1,072 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
      .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
  1,072 ( 0.00%)      }
      .           
  1,615 ( 0.00%)      pub fn type_dependent_defs_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
  1,615 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
  1,615 ( 0.00%)      }
      .           
      .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
    344 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
     76 ( 0.00%)      }
      .           
      .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
    522 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
    261 ( 0.00%)      }
      .           
      .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
    780 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    390 ( 0.00%)      }
      .           
      .               pub fn user_provided_types_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
    144 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
     72 ( 0.00%)      }
      .           
      .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
  3,432 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
  1,716 ( 0.00%)      }
      .           
      .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
  5,996 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
  2,998 ( 0.00%)      }
      .           
 23,832 ( 0.01%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
  3,972 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
      .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
      .                   })
 19,860 ( 0.01%)      }
      .           
  5,167 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
  5,167 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_types.get(&id.local_id).cloned()
 10,334 ( 0.00%)      }
      .           
      .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
    670 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
    335 ( 0.00%)      }
      .           
  1,760 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
  1,760 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
  3,520 ( 0.00%)      }
      .           
  1,314 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
  1,314 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_substs.get(&id.local_id).cloned()
  2,628 ( 0.00%)      }
      .           
      .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
      .               // doesn't provide type parameter substitutions.
      .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
    668 ( 0.00%)          self.node_type(pat.hir_id)
      .               }
      .           
      .               // Returns the type of an expression as a monotype.
      .               //
      .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
      .               // some cases, we insert `Adjustment` annotations such as auto-deref or
      .               // auto-ref.  The type returned by this function does not consider such
      .               // adjustments.  See `expr_ty_adjusted()` instead.
      .               //
      .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
      .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
      .               // instead of "fn(ty) -> T with T = isize".
      .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
  4,580 ( 0.00%)          self.node_type(expr.hir_id)
      .               }
      .           
      .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
  4,456 ( 0.00%)          self.node_type_opt(expr.hir_id)
      .               }
      .           
      .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
  2,180 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
  1,090 ( 0.00%)      }
      .           
      .               pub fn adjustments_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
  3,820 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
  1,910 ( 0.00%)      }
      .           
  2,011 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
  4,022 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
      .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
  4,022 ( 0.00%)      }
      .           
      .               /// Returns the type of `expr`, considering any `Adjustment`
      .               /// entry recorded for that expression.
    325 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
     65 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
    180 ( 0.00%)      }
      .           
     15 ( 0.00%)      pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
      3 ( 0.00%)          self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
     12 ( 0.00%)      }
      .           
    180 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
      .                   // Only paths and method calls/overloaded operators have
      .                   // entries in type_dependent_defs, ignore the former here.
    360 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
      .                       return false;
      .                   }
      .           
    440 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
    360 ( 0.00%)      }
      .           
  1,521 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
      .                   self.pat_binding_modes().get(id).copied().or_else(|| {
      .                       s.delay_span_bug(sp, "missing binding mode");
      .                       None
      .                   })
  2,028 ( 0.00%)      }
      .           
      .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
  1,241 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
    367 ( 0.00%)      }
      .           
      .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
    664 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
    332 ( 0.00%)      }
      .           
      .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
  1,272 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
    636 ( 0.00%)      }
      .           
      .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
    400 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
    200 ( 0.00%)      }
      .           
      .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
      .               /// by the closure.
    652 ( 0.00%)      pub fn closure_min_captures_flattened(
      .                   &self,
      .                   closure_def_id: DefId,
      .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
      .                   self.closure_min_captures
      .                       .get(&closure_def_id)
      .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
      .                       .into_iter()
      .                       .flatten()
    815 ( 0.00%)      }
      .           
      .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
    206 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
    103 ( 0.00%)      }
      .           
      .               pub fn closure_kind_origins_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
      .               }
      .           
      .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
    646 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
    323 ( 0.00%)      }
      .           
      .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
    440 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
    220 ( 0.00%)      }
      .           
      .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
    206 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
    103 ( 0.00%)      }
      .           
      .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
      .               }
      .           
     18 ( 0.00%)      pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
      6 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
      .                   self.coercion_casts.contains(&hir_id.local_id)
     12 ( 0.00%)      }
      .           
      .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
      .                   self.coercion_casts.insert(id);
      .               }
      .           
      .               pub fn coercion_casts(&self) -> &ItemLocalSet {
    103 ( 0.00%)          &self.coercion_casts
    103 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
      .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
      .                   let ty::TypeckResults {
      .                       hir_owner,
      .                       ref type_dependent_defs,
      .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
      .                   const START_INDEX = 0,
      .               }
      .           }
      .           
      .           /// Mapping of type annotation indices to canonical user type annotations.
      .           pub type CanonicalUserTypeAnnotations<'tcx> =
      .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
      .           
     24 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
      .           pub struct CanonicalUserTypeAnnotation<'tcx> {
      .               pub user_ty: CanonicalUserType<'tcx>,
      .               pub span: Span,
     38 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
      .           }
      .           
      .           /// Canonicalized user type annotation.
      .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
      .           
      .           impl<'tcx> CanonicalUserType<'tcx> {
      .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
      .               /// i.e., each thing is mapped to a canonical variable with the same index.
    135 ( 0.00%)      pub fn is_identity(&self) -> bool {
    270 ( 0.00%)          match self.value {
      .                       UserType::Ty(_) => false,
      .                       UserType::TypeOf(_, user_substs) => {
    135 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
      .                               return false;
      .                           }
      .           
      .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
      .                               match kind.unpack() {
    282 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
      .                                       ty::Bound(debruijn, b) => {
      .                                           // We only allow a `ty::INNERMOST` index in substitutions.
    138 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
      .                                           cvar == b.var
      .                                       }
      .                                       _ => false,
      .                                   },
      .           
     10 ( 0.00%)                          GenericArgKind::Lifetime(r) => match r {
      .                                       ty::ReLateBound(debruijn, br) => {
      .                                           // We only allow a `ty::INNERMOST` index in substitutions.
      .                                           assert_eq!(*debruijn, ty::INNERMOST);
      .                                           cvar == br.var
      .                                       }
      .                                       _ => false,
      .                                   },
      .           
-- line 867 ----------------------------------------
-- line 872 ----------------------------------------
      .                                           cvar == b
      .                                       }
      .                                       _ => false,
      .                                   },
      .                               }
      .                           })
      .                       }
      .                   }
    270 ( 0.00%)      }
      .           }
      .           
      .           /// A user-given type annotation attached to a constant. These arise
      .           /// from constants that are named via paths, like `Foo::<A>::new` and
      .           /// so forth.
    228 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
  1,583 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
      .           pub enum UserType<'tcx> {
      .               Ty(Ty<'tcx>),
      .           
      .               /// The canonical type is the result of `type_of(def_id)` with the
      .               /// given substitutions applied.
      .               TypeOf(DefId, UserSubsts<'tcx>),
      .           }
      .           
      .           impl<'tcx> CommonTypes<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
    111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
      .           
      .                   CommonTypes {
      .                       unit: mk(Tuple(List::empty())),
      .                       bool: mk(Bool),
      .                       char: mk(Char),
      .                       never: mk(Never),
      .                       isize: mk(Int(ty::IntTy::Isize)),
      .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
      .           
      .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> CommonLifetimes<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
     67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
      .           
      .                   CommonLifetimes {
      5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
      5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
      5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> CommonConsts<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
      6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
      .           
      .                   CommonConsts {
      .                       unit: mk_const(ty::Const {
      .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
      .                           ty: types.unit,
      .                       }),
      .                   }
      .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
      .           
      .               /// Stores memory for globals (statics/consts).
      .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
      .           
      .               output_filenames: Arc<OutputFilenames>,
      .           }
      .           
      .           impl<'tcx> TyCtxt<'tcx> {
  4,580 ( 0.00%)      pub fn typeck_opt_const_arg(
      .                   self,
      .                   def: ty::WithOptConstParam<LocalDefId>,
      .               ) -> &'tcx TypeckResults<'tcx> {
  1,832 ( 0.00%)          if let Some(param_did) = def.const_param_did {
      .                       self.typeck_const_arg((def.did, param_did))
      .                   } else {
      .                       self.typeck(def.did)
      .                   }
  3,664 ( 0.00%)      }
      .           
    339 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
    113 ( 0.00%)          self.arena.alloc(Steal::new(thir))
    452 ( 0.00%)      }
      .           
  1,710 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
    342 ( 0.00%)          self.arena.alloc(Steal::new(mir))
  2,394 ( 0.00%)      }
      .           
    452 ( 0.00%)      pub fn alloc_steal_promoted(
      .                   self,
      .                   promoted: IndexVec<Promoted, Body<'tcx>>,
      .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
    113 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
    565 ( 0.00%)      }
      .           
    423 ( 0.00%)      pub fn alloc_adt_def(
      .                   self,
      .                   did: DefId,
      .                   kind: AdtKind,
      .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
      .                   repr: ReprOptions,
      .               ) -> &'tcx ty::AdtDef {
    752 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
    188 ( 0.00%)      }
      .           
      .               /// Allocates a read-only byte or string literal for `mir::interpret`.
      .               pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
      .                   // Create an allocation that just contains these bytes.
      .                   let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
      .                   let alloc = self.intern_const_alloc(alloc);
      .                   self.create_memory_alloc(alloc)
      .               }
      .           
      .               /// Returns a range of the start/end indices specified with the
      .               /// `rustc_layout_scalar_valid_range` attribute.
      .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
    912 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
    456 ( 0.00%)          let attrs = self.get_attrs(def_id);
  1,938 ( 0.00%)          let get = |name| {
    456 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
      .                           Some(attr) => attr,
      .                           None => return Bound::Unbounded,
      .                       };
      .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
      .                       if let Some(
      .                           &[
      .                               ast::NestedMetaItem::Literal(ast::Lit {
      .                                   kind: ast::LitKind::Int(a, _), ..
-- line 1111 ----------------------------------------
-- line 1114 ----------------------------------------
      .                       ) = attr.meta_item_list().as_deref()
      .                       {
      .                           Bound::Included(a)
      .                       } else {
      .                           self.sess
      .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
      .                           Bound::Unbounded
      .                       }
  2,280 ( 0.00%)          };
    684 ( 0.00%)          (
    684 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
    342 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
      .                   )
    912 ( 0.00%)      }
      .           
      .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
      .                   value.lift_to_tcx(self)
      .               }
      .           
      .               /// Creates a type context and call the closure with a `TyCtxt` reference
      .               /// to the context. The closure enforces that the type context and any interned
      .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
      .               /// reference to the context, to allow formatting values that need it.
     23 ( 0.00%)      pub fn create_global_ctxt(
      .                   s: &'tcx Session,
      .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
      .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
      .                   resolutions: ty::ResolverOutputs,
      .                   krate: &'tcx hir::Crate<'tcx>,
      .                   dep_graph: DepGraph,
      .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
      .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
      .                   query_kinds: &'tcx [DepKindStruct],
      .                   crate_name: &str,
      .                   output_filenames: OutputFilenames,
      .               ) -> GlobalCtxt<'tcx> {
      1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
      .                       s.fatal(&err);
      .                   });
      .                   let interners = CtxtInterners::new(arena);
      .                   let common_types = CommonTypes::new(&interners);
      .                   let common_lifetimes = CommonLifetimes::new(&interners);
      .                   let common_consts = CommonConsts::new(&interners, &common_types);
      .           
    127 ( 0.00%)          GlobalCtxt {
      .                       sess: s,
      6 ( 0.00%)              lint_store,
      .                       arena,
      2 ( 0.00%)              interners,
      5 ( 0.00%)              dep_graph,
      4 ( 0.00%)              untracked_resolutions: resolutions,
      2 ( 0.00%)              prof: s.prof.clone(),
      .                       types: common_types,
      .                       lifetimes: common_lifetimes,
      .                       consts: common_consts,
      .                       untracked_crate: krate,
      .                       on_disk_cache,
      .                       queries,
      .                       query_caches: query::QueryCaches::default(),
      .                       query_kinds,
      .                       ty_rcache: Default::default(),
      .                       pred_rcache: Default::default(),
      .                       selection_cache: Default::default(),
      .                       evaluation_cache: Default::default(),
      1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
      .                       data_layout,
      .                       alloc_map: Lock::new(interpret::AllocMap::new()),
      .                       output_filenames: Arc::new(output_filenames),
      .                   }
      9 ( 0.00%)      }
      .           
      .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
      .                   &self.query_kinds[k as usize]
      .               }
      .           
      .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
      .               #[track_caller]
      .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
      .                   ty: Ty<'tcx>,
      .                   span: S,
      .                   msg: &str,
      .               ) -> &'tcx Const<'tcx> {
      .                   self.sess.delay_span_bug(span, msg);
      .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
      .               }
      .           
     91 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
     13 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
    104 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
    104 ( 0.00%)      }
      .           
      .               /// Obtain all lang items of this crate and all dependencies (recursively)
119,098 ( 0.03%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
      .                   self.get_lang_items(())
153,126 ( 0.04%)      }
      .           
      .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
      .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
     56 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
      .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
     64 ( 0.00%)      }
      .           
      .               /// Obtain the diagnostic item's name
  1,764 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
      .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
  2,016 ( 0.00%)      }
      .           
      .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
  3,549 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
      .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
  4,056 ( 0.00%)      }
      .           
  2,023 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
      .                   self.stability_index(())
  2,601 ( 0.00%)      }
      .           
 47,313 ( 0.01%)      pub fn features(self) -> &'tcx rustc_feature::Features {
      .                   self.features_query(())
 54,072 ( 0.01%)      }
      .           
      .               pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
      .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
  3,432 ( 0.00%)          if let Some(id) = id.as_local() {
      .                       self.untracked_resolutions.definitions.def_key(id)
      .                   } else {
    567 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
      .                   }
      .               }
      .           
      .               /// Converts a `DefId` into its fully expanded `DefPath` (every
      .               /// `DefId` is really just an interned `DefPath`).
      .               ///
      .               /// Note that if `id` is not local to this crate, the result will
      .               ///  be a non-local `DefPath`.
-- line 1272 ----------------------------------------
-- line 1277 ----------------------------------------
      .                   } else {
      .                       self.untracked_resolutions.cstore.def_path(id)
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
      .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
  1,034 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
      .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
      .                   } else {
    200 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
      .                   if crate_num == LOCAL_CRATE {
      .                       self.sess.local_stable_crate_id()
      .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
      .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
      .                       self.def_path(def_id).to_string_no_crate_verbose()
      .                   )
      .               }
      .           
      .               /// Note that this is *untracked* and should only be used within the query
      .               /// system if the result is otherwise tracked through queries
      .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
 48,406 ( 0.01%)          &*self.untracked_resolutions.cstore
 24,203 ( 0.01%)      }
      .           
      .               /// Note that this is *untracked* and should only be used within the query
      .               /// system if the result is otherwise tracked through queries
      .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
      .                   &self.untracked_resolutions.definitions
      .               }
      .           
      .               #[inline(always)]
      .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
      4 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
     19 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
      .               }
      .           
      .               #[inline(always)]
      .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
      .                   let resolutions = &self.gcx.untracked_resolutions;
      .                   StableHashingContext::ignore_spans(
      .                       self.sess,
      .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
      .               /// If `true`, we should use the MIR-based borrowck, but also
      .               /// fall back on the AST borrowck if the MIR-based one errors.
      .               pub fn migrate_borrowck(self) -> bool {
      .                   self.borrowck_mode().migrate()
      .               }
      .           
      .               /// What mode(s) of borrowck should we run? AST? MIR? both?
      .               /// (Also considers the `#![feature(nll)]` setting.)
    206 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
      .                   // Here are the main constraints we need to deal with:
      .                   //
      .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
      .                   //    synonymous with no `-Z borrowck=...` flag at all.
      .                   //
      .                   // 2. We want to allow developers on the Nightly channel
      .                   //    to opt back into the "hard error" mode for NLL,
      .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
      .                   //   errors. (To simplify the code here, it now even overrides
      .                   //   a user's attempt to specify `-Z borrowck=compare`, which
      .                   //   we arguably do not need anymore and should remove.)
      .                   //
      .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
      .                   //
      .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
      .           
    309 ( 0.00%)          if self.features().nll {
      .                       return BorrowckMode::Mir;
      .                   }
      .           
    103 ( 0.00%)          self.sess.opts.borrowck_mode
    412 ( 0.00%)      }
      .           
      .               /// If `true`, we should use lazy normalization for constants, otherwise
      .               /// we still evaluate them eagerly.
      .               #[inline]
      .               pub fn lazy_normalization(self) -> bool {
      .                   let features = self.features();
      .                   // Note: We only use lazy normalization for generic const expressions.
      .                   features.generic_const_exprs
-- line 1434 ----------------------------------------
-- line 1554 ----------------------------------------
      .                   self.mk_imm_ref(
      .                       self.lifetimes.re_static,
      .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
      .                           .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
      .                   )
      .               }
      .           
      .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
  1,078 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
    784 ( 0.00%)          match self.def_kind(def_id) {
      .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
      .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
      .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
      .                       },
  1,764 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
      .                   }
    882 ( 0.00%)      }
      .           
      .               pub fn type_length_limit(self) -> Limit {
      .                   self.limits(()).type_length_limit
      .               }
      .           
 40,145 ( 0.01%)      pub fn recursion_limit(self) -> Limit {
      .                   self.limits(()).recursion_limit
 45,880 ( 0.01%)      }
      .           
      .               pub fn move_size_limit(self) -> Limit {
      .                   self.limits(()).move_size_limit
      .               }
      .           
     49 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
      .                   self.limits(()).const_eval_limit
     56 ( 0.00%)      }
      .           
      .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
      .                   iter::once(LOCAL_CRATE)
      .                       .chain(self.crates(()).iter().copied())
      .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
      .               }
      .           }
      .           
-- line 1594 ----------------------------------------
-- line 1684 ----------------------------------------
      .               /// This is the implicit state of rustc. It contains the current
      .               /// `TyCtxt` and query. It is updated when creating a local interner or
      .               /// executing a new query. Whenever there's a `TyCtxt` value available
      .               /// you should also have access to an `ImplicitCtxt` through the functions
      .               /// in this module.
      .               #[derive(Clone)]
      .               pub struct ImplicitCtxt<'a, 'tcx> {
      .                   /// The current `TyCtxt`.
      1 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
      .           
      .                   /// The current query job, if any. This is updated by `JobOwner::start` in
      .                   /// `ty::query::plumbing` when executing a query.
      .                   pub query: Option<query::QueryJobId<DepKind>>,
      .           
      .                   /// Where to store diagnostics for the current query job, if any.
      .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
      .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
      .                   pub layout_depth: usize,
      .           
      .                   /// The current dep graph task. This is used to add dependencies to queries
      .                   /// when executing them.
      .                   pub task_deps: TaskDepsRef<'a>,
      .               }
      .           
      .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
      5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
      .                       let tcx = TyCtxt { gcx };
     25 ( 0.00%)              ImplicitCtxt {
      .                           tcx,
      .                           query: None,
      .                           diagnostics: None,
      .                           layout_depth: 0,
      .                           task_deps: TaskDepsRef::Ignore,
      .                       }
      5 ( 0.00%)          }
      .               }
      .           
      .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
      .               /// to `value` during the call to `f`. It is restored to its previous value after.
      .               /// This is used to set the pointer to the new `ImplicitCtxt`.
      .               #[cfg(parallel_compiler)]
      .               #[inline]
      .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
      .           
      .               /// Sets TLV to `value` during the call to `f`.
      .               /// It is restored to its previous value after.
      .               /// This is used to set the pointer to the new `ImplicitCtxt`.
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
      .                   let old = get_tlv();
 38,402 ( 0.01%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
      .                   TLV.with(|tlv| tlv.set(value));
      .                   f()
      .               }
      .           
      .               /// Gets the pointer to the current `ImplicitCtxt`.
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
      .               }
      .           
      .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
      .               #[inline]
      .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
      .               where
      .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
      .               {
      1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
      .               }
      .           
      .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
      .               #[inline]
      .               pub fn with_context_opt<F, R>(f: F) -> R
      .               where
      .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
      .               {
      .                   let context = get_tlv();
153,802 ( 0.04%)          if context == 0 {
      .                       f(None)
      .                   } else {
      .                       // We could get an `ImplicitCtxt` pointer from another thread.
      .                       // Ensure that `ImplicitCtxt` is `Sync`.
      .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
      .           
      .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
      .                   }
-- line 1789 ----------------------------------------
-- line 1805 ----------------------------------------
      .               /// This will panic if you pass it a `TyCtxt` which is different from the current
      .               /// `ImplicitCtxt`'s `tcx` field.
      .               #[inline]
      .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
      .               where
      .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
      .               {
      .                   with_context(|context| unsafe {
 76,223 ( 0.02%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
      .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
 76,182 ( 0.02%)              f(context)
      .                   })
      .               }
      .           
      .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
      .               /// Panics if there is no `ImplicitCtxt` available.
      .               #[inline]
      .               pub fn with<F, R>(f: F) -> R
      .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
      .               fn into_pointer(&self) -> *const () {
      .                   self.0 as *const _ as *const ()
      .               }
      .           }
      .           
      .           #[allow(rustc::usage_of_ty_tykind)]
      .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
      .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
 32,424 ( 0.01%)          &self.0.kind()
      .               }
      .           }
      .           
      .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
      .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
      .           
      .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
 42,996 ( 0.01%)          self.0.kind().hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
 13,820 ( 0.00%)          &self.0.kind
      .               }
      .           }
      .           
      .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
      .           
      .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  7,164 ( 0.00%)          self.0.kind.hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
      .               fn borrow<'a>(&'a self) -> &'a [T] {
 40,308 ( 0.01%)          &self.0[..]
      .               }
      .           }
      .           
      .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
      .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
      .           
      .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
 16,436 ( 0.00%)          self.0[..].hash(s)
      .               }
      .           }
      .           
      .           macro_rules! direct_interners {
      .               ($($name:ident: $method:ident($ty:ty),)+) => {
      .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
      .                       fn borrow<'a>(&'a self) -> &'a $ty {
 14,387 ( 0.00%)                  &self.0
      .                       }
      .                   }
      .           
      .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
      .                       fn eq(&self, other: &Self) -> bool {
      .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
      .                           // equals `x == y`.
      .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
      .                   }
      .           
      .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
      .           
      .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
      .                       fn hash<H: Hasher>(&self, s: &mut H) {
      .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
      .                           // x.hash(s)`.
 12,288 ( 0.00%)                  self.0.hash(s)
      .                       }
      .                   }
      .           
      .                   impl<'tcx> TyCtxt<'tcx> {
133,621 ( 0.03%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
 67,493 ( 0.02%)                  self.interners.$name.intern(v, |v| {
  2,502 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
      .                           }).0
149,949 ( 0.04%)              }
      .                   })+
      .               }
      .           }
      .           
      .           direct_interners! {
      .               region: mk_region(RegionKind),
      .               const_: mk_const(Const<'tcx>),
      .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
      .               adt_def: intern_adt_def(AdtDef),
      .               stability: intern_stability(attr::Stability),
      .               const_stability: intern_const_stability(attr::ConstStability),
      .           }
      .           
      .           macro_rules! slice_interners {
      .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
      .                   impl<'tcx> TyCtxt<'tcx> {
496,668 ( 0.13%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
      .                           self.interners.$field.intern_ref(v, || {
      .                               Interned(List::from_arena(&*self.arena, v))
      .                           }).0
443,484 ( 0.11%)              })+
      .                   }
      .               );
      .           }
      .           
      .           slice_interners!(
      .               type_list: _intern_type_list(Ty<'tcx>),
      .               substs: _intern_substs(GenericArg<'tcx>),
      .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2188 ----------------------------------------
      .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
      .                   })
      .               }
      .           
      .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
      .               /// `*r == kind`.
      .               #[inline]
      .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
 16,092 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
      .               }
      .           
      .               #[allow(rustc::usage_of_ty_tykind)]
      .               #[inline]
      .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
281,110 ( 0.07%)          self.interners.intern_ty(st)
      .               }
      .           
      .               #[inline]
      .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
182,060 ( 0.05%)          let inner = self.interners.intern_predicate(binder);
      .                   Predicate { inner }
      .               }
      .           
      .               #[inline]
295,128 ( 0.07%)      pub fn reuse_or_mk_predicate(
      .                   self,
      .                   pred: Predicate<'tcx>,
      .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
      .               ) -> Predicate<'tcx> {
 26,572 ( 0.01%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
295,128 ( 0.07%)      }
      .           
      .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
      .                   match tm {
      .                       IntTy::Isize => self.types.isize,
      .                       IntTy::I8 => self.types.i8,
      .                       IntTy::I16 => self.types.i16,
      .                       IntTy::I32 => self.types.i32,
      .                       IntTy::I64 => self.types.i64,
      .                       IntTy::I128 => self.types.i128,
      .                   }
      .               }
      .           
      .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
      5 ( 0.00%)          match tm {
      .                       UintTy::Usize => self.types.usize,
      .                       UintTy::U8 => self.types.u8,
      .                       UintTy::U16 => self.types.u16,
      .                       UintTy::U32 => self.types.u32,
      .                       UintTy::U64 => self.types.u64,
      .                       UintTy::U128 => self.types.u128,
      .                   }
      5 ( 0.00%)      }
      .           
      .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
      .                   match tm {
      .                       FloatTy::F32 => self.types.f32,
      .                       FloatTy::F64 => self.types.f64,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn mk_static_str(self) -> Ty<'tcx> {
     40 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
      .               }
      .           
      .               #[inline]
      .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   // Take a copy of substs so that we own the vectors inside.
      .                   self.mk_ty(Adt(def, substs))
      .               }
      .           
-- line 2259 ----------------------------------------
-- line 2329 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
      .               }
      .           
      .               #[inline]
    230 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
      .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
    240 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(Slice(ty))
      .               }
      .           
      .               #[inline]
      .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
      8 ( 0.00%)          let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
     43 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
      .               }
      .           
      .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
  1,010 ( 0.00%)          iter.intern_with(|ts| {
    248 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
  1,335 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
    882 ( 0.00%)          })
      .               }
      .           
      .               #[inline]
      .               pub fn mk_unit(self) -> Ty<'tcx> {
     30 ( 0.00%)          self.types.unit
      .               }
      .           
      .               #[inline]
      .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
      .                   if self.features().never_type_fallback { self.types.never } else { self.types.unit }
      .               }
      .           
      .               #[inline]
      .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(FnDef(def_id, substs))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
    268 ( 0.00%)          self.mk_ty(FnPtr(fty))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_dynamic(
      .                   self,
      .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
      .                   reg: ty::Region<'tcx>,
      .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
      .                   self.mk_ty_infer(TyVar(v))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
      6 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
      .               }
      .           
      .               #[inline]
      .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
      .                   self.mk_ty_infer(IntVar(v))
      .               }
      .           
      .               #[inline]
-- line 2428 ----------------------------------------
-- line 2445 ----------------------------------------
      .                   self.mk_ty(Param(ParamTy { index, name }))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
      .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
      .               }
      .           
  6,811 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
  4,841 ( 0.00%)          match param.kind {
      .                       GenericParamDefKind::Lifetime => {
     72 ( 0.00%)                  self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
      .                       }
  1,922 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
      .                       GenericParamDefKind::Const { .. } => {
      .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
      .                       }
      .                   }
  6,811 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(Opaque(def_id, substs))
      .               }
      .           
      5 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
      5 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
     10 ( 0.00%)      }
      .           
      .               pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
      .                   self.mk_place_elem(place, PlaceElem::Deref)
      .               }
      .           
      2 ( 0.00%)      pub fn mk_place_downcast(
      .                   self,
      .                   place: Place<'tcx>,
      .                   adt_def: &'tcx AdtDef,
      .                   variant_index: VariantIdx,
      .               ) -> Place<'tcx> {
      2 ( 0.00%)          self.mk_place_elem(
      .                       place,
      4 ( 0.00%)              PlaceElem::Downcast(Some(adt_def.variants[variant_index].name), variant_index),
      .                   )
      4 ( 0.00%)      }
      .           
      .               pub fn mk_place_downcast_unnamed(
      .                   self,
      .                   place: Place<'tcx>,
      .                   variant_index: VariantIdx,
      .               ) -> Place<'tcx> {
      .                   self.mk_place_elem(place, PlaceElem::Downcast(None, variant_index))
      .               }
-- line 2496 ----------------------------------------
-- line 2497 ----------------------------------------
      .           
      .               pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
      .                   self.mk_place_elem(place, PlaceElem::Index(index))
      .               }
      .           
      .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
      .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
      .               /// flight.
     63 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
      .                   let mut projection = place.projection.to_vec();
      .                   projection.push(elem);
      .           
      .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
     70 ( 0.00%)      }
      .           
  7,000 ( 0.00%)      pub fn intern_poly_existential_predicates(
      .                   self,
      .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
      .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
  1,000 ( 0.00%)          assert!(!eps.is_empty());
      .                   assert!(
      .                       eps.array_windows()
    840 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
      .                               != Ordering::Greater)
      .                   );
  4,000 ( 0.00%)          self._intern_poly_existential_predicates(eps)
  8,000 ( 0.00%)      }
      .           
      .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
      .                   // FIXME consider asking the input slice to be sorted to avoid
      .                   // re-interning permutations, in which case that would be asserted
      .                   // here.
  2,601 ( 0.00%)          if preds.is_empty() {
      .                       // The macro-generated method below asserts we don't intern an empty slice.
      .                       List::empty()
      .                   } else {
  1,626 ( 0.00%)              self._intern_predicates(preds)
      .                   }
  2,056 ( 0.00%)      }
      .           
      .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
  4,646 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
     64 ( 0.00%)      }
      .           
      .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
 84,167 ( 0.02%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
  7,080 ( 0.00%)      }
      .           
      .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
      .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
      .               }
      .           
      .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
    792 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
    272 ( 0.00%)      }
      .           
      .               pub fn intern_canonical_var_infos(
      .                   self,
      .                   ts: &[CanonicalVarInfo<'tcx>],
      .               ) -> CanonicalVarInfos<'tcx> {
  5,882 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
  1,444 ( 0.00%)      }
      .           
      .               pub fn intern_bound_variable_kinds(
      .                   self,
      .                   ts: &[ty::BoundVariableKind],
      .               ) -> &'tcx List<ty::BoundVariableKind> {
  7,029 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
 12,322 ( 0.00%)      }
      .           
      .               pub fn mk_fn_sig<I>(
      .                   self,
      .                   inputs: I,
      .                   output: I::Item,
      .                   c_variadic: bool,
      .                   unsafety: hir::Unsafety,
      .                   abi: abi::Abi,
      .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
      .               where
      .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
      .               {
      .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
    966 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
    148 ( 0.00%)              c_variadic,
    230 ( 0.00%)              unsafety,
    132 ( 0.00%)              abi,
    100 ( 0.00%)          })
      .               }
      .           
      .               pub fn mk_poly_existential_predicates<
      .                   I: InternAs<
      .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
      .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
      .                   >,
      .               >(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
  3,732 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
      .               }
      .           
      .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
      .                   iter.intern_with(|xs| self.intern_predicates(xs))
      .               }
      .           
      .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
  1,035 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
      .               }
      .           
      .               pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
160,112 ( 0.04%)          iter.intern_with(|xs| self.intern_substs(xs))
      .               }
      .           
      .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
    213 ( 0.00%)          iter.intern_with(|xs| self.intern_place_elems(xs))
      .               }
      .           
  2,246 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
      .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
  4,492 ( 0.00%)      }
      .           
      .               pub fn mk_bound_variable_kinds<
      .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
      .               >(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
 38,657 ( 0.01%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
      .               }
      .           
      .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
      .               /// It stops at `bound` and just returns it if reached.
 14,000 ( 0.00%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
 14,000 ( 0.00%)          let hir = self.hir();
      .                   loop {
 20,319 ( 0.01%)              if id == bound {
      .                           return bound;
      .                       }
      .           
 23,865 ( 0.01%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
      .                           return id;
      .                       }
      .                       let next = hir.get_parent_node(id);
 14,319 ( 0.00%)              if next == id {
      .                           bug!("lint traversal reached the root of the crate");
      .                       }
      .                       id = next;
      .                   }
 20,000 ( 0.01%)      }
      .           
  2,568 ( 0.00%)      pub fn lint_level_at_node(
      .                   self,
      .                   lint: &'static Lint,
      .                   mut id: hir::HirId,
      .               ) -> (Level, LintLevelSource) {
      .                   let sets = self.lint_levels(());
      .                   loop {
 13,044 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
      .                           return pair;
      .                       }
    950 ( 0.00%)              let next = self.hir().get_parent_node(id);
  2,850 ( 0.00%)              if next == id {
      .                           bug!("lint traversal reached the root of the crate");
      .                       }
      .                       id = next;
      .                   }
  2,568 ( 0.00%)      }
      .           
    322 ( 0.00%)      pub fn struct_span_lint_hir(
      .                   self,
      .                   lint: &'static Lint,
      .                   hir_id: HirId,
      .                   span: impl Into<MultiSpan>,
      .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
      .               ) {
    434 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
    223 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
    184 ( 0.00%)      }
      .           
      .               pub fn struct_lint_node(
      .                   self,
      .                   lint: &'static Lint,
      .                   id: HirId,
      .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
      .               ) {
      .                   let (level, src) = self.lint_level_at_node(lint, id);
      .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
      .               }
      .           
    917 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
    262 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
      .                   let candidates = map.get(&id.local_id)?;
    262 ( 0.00%)          Some(&*candidates)
  1,048 ( 0.00%)      }
      .           
  3,598 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
      .                   debug!(?id, "named_region");
      .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
  4,626 ( 0.00%)      }
      .           
     36 ( 0.00%)      pub fn is_late_bound(self, id: HirId) -> bool {
      .                   self.is_late_bound_map(id.owner)
      2 ( 0.00%)              .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
     32 ( 0.00%)      }
      .           
  3,276 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
      .                   self.object_lifetime_defaults_map(id.owner)
  4,212 ( 0.00%)      }
      .           
  5,211 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
      .                   self.mk_bound_variable_kinds(
      .                       self.late_bound_vars_map(id.owner)
      .                           .and_then(|map| map.get(&id.local_id).cloned())
      .                           .unwrap_or_else(|| {
      .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
      .                           })
      .                           .iter(),
      .                   )
  5,211 ( 0.00%)      }
      .           
      .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
      .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
      .               }
      .           
      .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
      .               /// feature gates
    180 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
     18 ( 0.00%)          if self.is_const_fn_raw(def_id) {
      6 ( 0.00%)              match self.lookup_const_stability(def_id) {
     12 ( 0.00%)                  Some(stability) if stability.level.is_unstable() => {
      .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
      .                               // corresponding feature gate.
      4 ( 0.00%)                      self.features()
      .                                   .declared_lib_features
      .                                   .iter()
      .                                   .any(|&(sym, _)| sym == stability.feature)
      .                           }
      .                           // functions without const stability are either stable user written
      .                           // const fn or the user is using feature gates and we thus don't
      .                           // care what they do
      .                           _ => true,
      .                       }
      .                   } else {
      .                       false
      .                   }
    162 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> TyCtxtAt<'tcx> {
      .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
      .               #[track_caller]
      .               pub fn ty_error(self) -> Ty<'tcx> {
      .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
      .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
      .           }
      .           
      .           impl<I, T, R, E> InternAs<[T], R> for I
      .           where
      .               E: InternIteratorElement<T, R>,
      .               I: Iterator<Item = E>,
      .           {
      .               type Output = E::Output;
107,992 ( 0.03%)      fn intern_with<F>(self, f: F) -> Self::Output
      .               where
      .                   F: FnOnce(&[T]) -> R,
      .               {
263,507 ( 0.07%)          E::intern_with(self, f)
109,512 ( 0.03%)      }
      .           }
      .           
      .           pub trait InternIteratorElement<T, R>: Sized {
      .               type Output;
      .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
      .           }
      .           
      .           impl<T, R> InternIteratorElement<T, R> for T {
      .               type Output = R;
 74,258 ( 0.02%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
      .                   mut iter: I,
      .                   f: F,
      .               ) -> Self::Output {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
      .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
      .                   // `assert`.
 96,748 ( 0.02%)          match iter.size_hint() {
      .                       (0, Some(0)) => {
      .                           assert!(iter.next().is_none());
      .                           f(&[])
      .                       }
      .                       (1, Some(1)) => {
      .                           let t0 = iter.next().unwrap();
      6 ( 0.00%)                  assert!(iter.next().is_none());
 12,739 ( 0.00%)                  f(&[t0])
      .                       }
      .                       (2, Some(2)) => {
      .                           let t0 = iter.next().unwrap();
      .                           let t1 = iter.next().unwrap();
     92 ( 0.00%)                  assert!(iter.next().is_none());
  6,990 ( 0.00%)                  f(&[t0, t1])
      .                       }
    224 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
      .                   }
 42,478 ( 0.01%)      }
      .           }
      .           
      .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
      .           where
      .               T: Clone + 'a,
      .           {
      .               type Output = R;
  3,025 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
      .                   // This code isn't hot.
     40 ( 0.00%)          f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
  2,456 ( 0.00%)      }
      .           }
      .           
      .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
      .               type Output = Result<R, E>;
 59,134 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
      .                   mut iter: I,
      .                   f: F,
      .               ) -> Self::Output {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
      .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
      .                   // `assert`, unless a failure happens first, in which case the result
      .                   // will be an error anyway.
 41,830 ( 0.01%)          Ok(match iter.size_hint() {
      .                       (0, Some(0)) => {
      .                           assert!(iter.next().is_none());
      .                           f(&[])
      .                       }
      .                       (1, Some(1)) => {
  2,226 ( 0.00%)                  let t0 = iter.next().unwrap()?;
      .                           assert!(iter.next().is_none());
  7,736 ( 0.00%)                  f(&[t0])
      .                       }
      .                       (2, Some(2)) => {
     60 ( 0.00%)                  let t0 = iter.next().unwrap()?;
     60 ( 0.00%)                  let t1 = iter.next().unwrap()?;
     90 ( 0.00%)                  assert!(iter.next().is_none());
  2,242 ( 0.00%)                  f(&[t0, t1])
      .                       }
    688 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
      .                   })
 64,764 ( 0.02%)      }
      .           }
      .           
      .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
      .           // won't work for us.
      .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
 76,223 ( 0.02%)      t as *const () == u as *const ()
      .           }
      .           
      .           pub fn provide(providers: &mut ty::query::Providers) {
      2 ( 0.00%)      providers.in_scope_traits_map =
      .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
      3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
      2 ( 0.00%)      providers.module_reexports =
      .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
      2 ( 0.00%)      providers.crate_name = |tcx, id| {
      1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
      1 ( 0.00%)          tcx.crate_name
      .               };
      2 ( 0.00%)      providers.maybe_unused_trait_import =
      .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
      2 ( 0.00%)      providers.maybe_unused_extern_crates =
      .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
      2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
      .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
      .               };
      .           
     11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
      2 ( 0.00%)      providers.lookup_const_stability =
      .                   |tcx, id| tcx.stability().local_const_stability(id.expect_local());
      2 ( 0.00%)      providers.lookup_deprecation_entry =
  2,296 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
      2 ( 0.00%)      providers.extern_mod_stmt_cnum =
      .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
      3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
      3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
      2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
      .                   assert_eq!(cnum, LOCAL_CRATE);
      .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
      .               };
      2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
      .                   assert_eq!(cnum, LOCAL_CRATE);
      .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
      .               };
      2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
      1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
      .                   // We want to check if the panic handler was defined in this crate
      3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
      .               };
      .           }

274,821 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
   89,594 ( 0.02%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
       37 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    1,072 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
        .               LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
-- line 173 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    2,933 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
       26 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
      104 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 224 ----------------------------------------
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    2,304 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
       14 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
       13 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
        .               pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
       13 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
    6,312 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    6,636 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        5 ( 0.00%)      QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
        .               MacroExpansion(u64),
        .               ProcMacroSourceCode(u64),
        .               /// Strings provided as `--cfg [cfgspec]` stored in a `crate_cfg`.
        .               CfgSpec(u64),
-- line 285 ----------------------------------------
-- line 288 ----------------------------------------
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
       91 ( 0.00%)      fn from(p: PathBuf) -> Self {
       26 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
       78 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
       91 ( 0.00%)      }
        .           }
        .           
        2 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
       52 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
       78 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
       78 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
       65 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
        .               pub fn to_string_lossy(&self) -> Cow<'_, str> {
        .                   match self.inner {
        .                       FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
        .               }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
    1,112 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
-- line 353 ----------------------------------------
-- line 357 ----------------------------------------
        .               }
        .           
        .               pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
        .               }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
       13 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
       26 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 383 ----------------------------------------
        .               }
        .           
        .               pub fn proc_macro_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::ProcMacroSourceCode(hasher.finish())
        .               }
        .           
       25 ( 0.00%)      pub fn cfg_spec_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
       10 ( 0.00%)          FileName::QuoteExpansion(hasher.finish())
       25 ( 0.00%)      }
        .           
        .               pub fn cli_crate_attr_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::CliCrateAttr(hasher.finish())
        .               }
        .           
        .               pub fn doc_test_source_code(path: PathBuf, line: isize) -> FileName {
-- line 403 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
       10 ( 0.00%)      pub lo: BytePos,
       10 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
       30 ( 0.00%)      pub ctxt: SyntaxContext,
       10 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
   38,682 ( 0.01%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
      180 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
   16,616 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
   12,462 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
   16,616 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
    7,398 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
    4,932 ( 0.00%)      }
        .               #[inline]
      624 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
      624 ( 0.00%)      }
        .               #[inline]
    2,511 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
    1,674 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
    1,645 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
      987 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
        .               pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
        .               }
-- line 566 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// Returns a new span representing an empty span at the beginning of this span.
        .               #[inline]
        .               pub fn shrink_to_lo(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_hi(span.lo)
        .               }
        .               /// Returns a new span representing an empty span at the end of this span.
        .               #[inline]
        6 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_lo(span.hi)
        4 ( 0.00%)      }
        .           
        .               #[inline]
        .               /// Returns `true` if `hi == lo`.
        .               pub fn is_empty(self) -> bool {
        .                   let span = self.data_untracked();
        .                   span.hi == span.lo
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
      540 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
      360 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
-- line 638 ----------------------------------------
-- line 663 ----------------------------------------
        .               /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,
        .               /// if any.
        .               pub fn parent_callsite(self) -> Option<Span> {
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(expn_data.call_site) } else { None }
        .               }
        .           
        .               /// Walk down the expansion ancestors to find a span that's contained within `outer`.
      460 ( 0.00%)      pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
      230 ( 0.00%)          while !outer.contains(self) {
        .                       self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
      506 ( 0.00%)      }
        .           
        .               /// Edition of the crate from which this span came.
    4,842 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
    3,228 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
    1,228 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
      491 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
      360 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
      185 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
       37 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
      148 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
    1,169 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
    1,002 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
      835 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
       40 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
       48 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
       32 ( 0.00%)      }
        .           
        .               /// Checks if a span is "internal" to a macro in which `unsafe`
        .               /// can be used without triggering the `unsafe_code` lint.
        .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
       24 ( 0.00%)      pub fn allows_unsafe(self) -> bool {
        6 ( 0.00%)          self.ctxt().outer_expn_data().allow_internal_unsafe
       24 ( 0.00%)      }
        .           
        .               pub fn macro_backtrace(mut self) -> impl Iterator<Item = ExpnData> {
        .                   let mut prev_span = DUMMY_SP;
        .                   std::iter::from_fn(move || {
        .                       loop {
        .                           let expn_data = self.ctxt().outer_expn_data();
        .                           if expn_data.is_root() {
        .                               return None;
-- line 752 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
   74,107 ( 0.02%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
   13,315 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
      159 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
       93 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
   46,046 ( 0.01%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
   60,633 ( 0.02%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
      583 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
      371 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
      424 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
      484 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
       88 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
      308 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
      396 ( 0.00%)      }
        .           
       77 ( 0.00%)      pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
       49 ( 0.00%)      }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
      218 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
        2 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
        .                   self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
    1,320 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
      770 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
    6,021 ( 0.00%)          span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
        .               pub fn remove_mark(&mut self) -> ExpnId {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.remove_mark();
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
-- line 897 ----------------------------------------
-- line 901 ----------------------------------------
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
   11,268 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
    7,512 ( 0.00%)          let mut span = self.data();
    6,166 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
   11,268 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
   12,426 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
       48 ( 0.00%)          let mut span = self.data();
       72 ( 0.00%)          let mark = span.ctxt.glob_adjust(expn_id, glob_span);
      192 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
        .               pub fn reverse_glob_adjust(
        .                   &mut self,
        .                   expn_id: ExpnId,
        .                   glob_span: Span,
        .               ) -> Option<Option<ExpnId>> {
        2 ( 0.00%)          let mut span = self.data();
        4 ( 0.00%)          let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
        8 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
    9,600 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
    8,400 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1048 ----------------------------------------
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_span(primary_span: Span) -> MultiSpan {
    1,335 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
      115 ( 0.00%)          MultiSpan { primary_spans: vec, span_labels: vec![] }
        .               }
        .           
        .               pub fn push_span_label(&mut self, span: Span, label: String) {
        .                   self.span_labels.push((span, label));
        .               }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
      176 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
        .               }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
-- line 1079 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
    1,335 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
    1,335 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
      115 ( 0.00%)      fn from(spans: Vec<Span>) -> MultiSpan {
       92 ( 0.00%)          MultiSpan::from_spans(spans)
      115 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      308 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      154 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      462 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
       39 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1257 ----------------------------------------
        .               AbsentOk,
        .               /// A failed attempt has been made to load the external source.
        .               AbsentErr,
        .               Unneeded,
        .           }
        .           
        .           impl ExternalSource {
        .               pub fn get_source(&self) -> Option<&Lrc<String>> {
       56 ( 0.00%)          match self {
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::Present(ref src), .. } => Some(src),
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
    1,086 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
       78 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    2,172 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        .                   let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
       54 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
        .                   let len = self.hash_len();
        .                   &self.value[..len]
        .               }
        .           
        .               fn hash_len(&self) -> usize {
       54 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
      754 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
       13 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
       13 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
       13 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
       52 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
       26 ( 0.00%)                          0..=0xFF => 1,
        .                                   0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
       26 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
       39 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
      143 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    4,887 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      543 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
  873,642 ( 0.22%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    1,086 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    5,973 ( 0.00%)              SourceFile {
    4,344 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    2,172 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    2,172 ( 0.00%)                  lines,
    2,172 ( 0.00%)                  multibyte_chars,
    2,172 ( 0.00%)                  non_narrow_chars,
    2,172 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    4,887 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
      198 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
       54 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
       36 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
       36 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
       54 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
      216 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
       36 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
      306 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
      198 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
       72 ( 0.00%)              lines,
       72 ( 0.00%)              multibyte_chars,
       72 ( 0.00%)              non_narrow_chars,
       72 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
      162 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
        .               pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
        .                   self.lines[line_index]
        .               }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
      700 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
      100 ( 0.00%)          if matches!(
      200 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        .                       let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        .                       if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
-- line 1582 ----------------------------------------
-- line 1592 ----------------------------------------
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
      100 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
      900 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
        .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
        .                   fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
      556 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
    3,527 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
    2,393 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
    4,813 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
    3,538 ( 0.00%)          assert!(line_index < self.lines.len());
    4,710 ( 0.00%)          if line_index == (self.lines.len() - 1) {
       74 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
    3,084 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
        2 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
        6 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
        .                       if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
        .                           total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
        .                           assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
       12 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
       10 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
        4 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
        7 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
        2 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
        .                   match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
        1 ( 0.00%)                  let linebpos = self.lines[a];
        2 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
        1 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
        8 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
        3 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
        2 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
        1 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
        5 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
        7 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
      180 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
      162 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       18 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       18 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
   11,805 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
    1,168 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
   22,911 ( 0.01%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
1,511,776 ( 0.38%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
  912,936 ( 0.23%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
        .               }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
   55,162 ( 0.01%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2037 ----------------------------------------
        .               pub source_len: usize,
        .               pub begin_pos: BytePos,
        .               pub end_pos: BytePos,
        .           }
        .           
        .           /// Range inside of a `Span` used for diagnostics when we only have access to relative positions.
        .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           pub struct InnerSpan {
        2 ( 0.00%)      pub start: usize,
        .               pub end: usize,
        .           }
        .           
        .           impl InnerSpan {
       46 ( 0.00%)      pub fn new(start: usize, end: usize) -> InnerSpan {
        .                   InnerSpan { start, end }
       23 ( 0.00%)      }
        .           }
        .           
        .           /// Requirements for a `StableHashingContext` to be used in this crate.
        .           ///
        .           /// This is a hack to allow using the [`HashStable_Generic`] derive macro
        .           /// instead of implementing everything in rustc_middle.
        .           pub trait HashStableContext {
        .               fn def_path_hash(&self, def_id: DefId) -> DefPathHash;
-- line 2060 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
   88,669 ( 0.02%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
   18,569 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
   70,100 ( 0.02%)          let span = self.data_untracked();
   20,295 ( 0.01%)          span.ctxt.hash_stable(ctx, hasher);
   38,001 ( 0.01%)          span.parent.hash_stable(ctx, hasher);
        .           
   25,564 ( 0.01%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
   24,874 ( 0.01%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
   49,748 ( 0.01%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
   24,874 ( 0.01%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
   12,437 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
   12,437 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
  101,336 ( 0.03%)      }
        .           }

1,304,600 ( 0.33%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir               

-- line 5 ----------------------------------------
      .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
      .           unsafe impl GlobalAlloc for System {
      .               #[inline]
      .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
      .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
      .                   // So only rely on MIN_ALIGN if size >= align.
      .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
      .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
615,120 ( 0.16%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
461,340 ( 0.12%)              libc::malloc(layout.size()) as *mut u8
      .                   } else {
      .                       #[cfg(target_os = "macos")]
      .                       {
      .                           if layout.align() > (1 << 31) {
      .                               return ptr::null_mut();
      .                           }
      .                       }
      .                       aligned_malloc(&layout)
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
      .                   // See the comment above in `alloc` for why this check looks the way it does.
 17,024 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
 25,536 ( 0.01%)              libc::calloc(layout.size(), 1) as *mut u8
      .                   } else {
      .                       let ptr = self.alloc(layout);
      .                       if !ptr.is_null() {
      .                           ptr::write_bytes(ptr, 0, layout.size());
      .                       }
      .                       ptr
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
158,025 ( 0.04%)          libc::free(ptr as *mut libc::c_void)
      .               }
      .           
      .               #[inline]
      .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
 55,776 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
111,552 ( 0.03%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
      .                   } else {
      .                       realloc_fallback(self, ptr, layout, new_size)
      .                   }
      .               }
      .           }
      .           
      .           cfg_if::cfg_if! {
      .               if #[cfg(any(
-- line 56 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs
--------------------------------------------------------------------------------
Ir               

-- line 12 ----------------------------------------
      .           use rustc_data_structures::sync::Lrc;
      .           use rustc_macros::HashStable_Generic;
      .           use rustc_span::symbol::{kw, sym};
      .           use rustc_span::symbol::{Ident, Symbol};
      .           use rustc_span::{self, edition::Edition, Span, DUMMY_SP};
      .           use std::borrow::Cow;
      .           use std::{fmt, mem};
      .           
  7,552 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
      .           pub enum CommentKind {
      .               Line,
      .               Block,
      .           }
      .           
    127 ( 0.00%)  #[derive(Clone, PartialEq, Encodable, Decodable, Hash, Debug, Copy)]
      .           #[derive(HashStable_Generic)]
      .           pub enum BinOpToken {
      .               Plus,
      .               Minus,
      .               Star,
      .               Slash,
      .               Percent,
      .               Caret,
      .               And,
      .               Or,
      .               Shl,
      .               Shr,
      .           }
      .           
      .           /// A delimiter token.
  4,263 ( 0.00%)  #[derive(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Debug, Copy)]
      .           #[derive(HashStable_Generic)]
      .           pub enum DelimToken {
      .               /// A round parenthesis (i.e., `(` or `)`).
      .               Paren,
      .               /// A square bracket (i.e., `[` or `]`).
      .               Bracket,
      .               /// A curly brace (i.e., `{` or `}`).
      .               Brace,
      .               /// An empty delimiter.
      .               NoDelim,
      .           }
      .           
  1,797 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
      .           pub enum LitKind {
      .               Bool, // AST only, must never appear in a `Token`
      .               Byte,
      .               Char,
      .               Integer,
      .               Float,
      .               Str,
      .               StrRaw(u16), // raw string delimited by `n` hash symbols
      .               ByteStr,
      .               ByteStrRaw(u16), // raw byte string delimited by `n` hash symbols
      .               Err,
      .           }
      .           
      .           /// A literal token.
  5,457 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
      .           pub struct Lit {
      .               pub kind: LitKind,
      .               pub symbol: Symbol,
      .               pub suffix: Option<Symbol>,
      .           }
      .           
      .           impl fmt::Display for Lit {
     10 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     18 ( 0.00%)          let Lit { kind, symbol, suffix } = *self;
      .                   match kind {
      .                       Byte => write!(f, "b'{}'", symbol)?,
      .                       Char => write!(f, "'{}'", symbol)?,
      6 ( 0.00%)              Str => write!(f, "\"{}\"", symbol)?,
      .                       StrRaw(n) => write!(
      .                           f,
      .                           "r{delim}\"{string}\"{delim}",
      .                           delim = "#".repeat(n as usize),
      .                           string = symbol
      .                       )?,
      .                       ByteStr => write!(f, "b\"{}\"", symbol)?,
      .                       ByteStrRaw(n) => write!(
-- line 91 ----------------------------------------
-- line 92 ----------------------------------------
      .                           f,
      .                           "br{delim}\"{string}\"{delim}",
      .                           delim = "#".repeat(n as usize),
      .                           string = symbol
      .                       )?,
      .                       Integer | Float | Bool | Err => write!(f, "{}", symbol)?,
      .                   }
      .           
      4 ( 0.00%)          if let Some(suffix) = suffix {
      .                       write!(f, "{}", suffix)?;
      .                   }
      .           
      .                   Ok(())
     10 ( 0.00%)      }
      .           }
      .           
      .           impl LitKind {
      .               /// An English article for the literal token kind.
      .               pub fn article(self) -> &'static str {
      .                   match self {
      .                       Integer | Err => "an",
      .                       _ => "a",
-- line 113 ----------------------------------------
-- line 130 ----------------------------------------
      .               crate fn may_have_suffix(self) -> bool {
      .                   matches!(self, Integer | Float | Err)
      .               }
      .           }
      .           
      .           impl Lit {
      .               pub fn new(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> Lit {
      .                   Lit { kind, symbol, suffix }
    754 ( 0.00%)      }
      .           }
      .           
     32 ( 0.00%)  pub fn ident_can_begin_expr(name: Symbol, span: Span, is_raw: bool) -> bool {
     56 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
      .           
     16 ( 0.00%)      !ident_token.is_reserved_ident()
      .                   || ident_token.is_path_segment_keyword()
      .                   || [
      .                       kw::Async,
      .                       kw::Do,
      .                       kw::Box,
      .                       kw::Break,
      .                       kw::Const,
      .                       kw::Continue,
-- line 152 ----------------------------------------
-- line 161 ----------------------------------------
      .                       kw::True,
      .                       kw::Try,
      .                       kw::Unsafe,
      .                       kw::While,
      .                       kw::Yield,
      .                       kw::Static,
      .                   ]
      .                   .contains(&name)
     40 ( 0.00%)  }
      .           
      .           fn ident_can_begin_type(name: Symbol, span: Span, is_raw: bool) -> bool {
    780 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
      .           
    272 ( 0.00%)      !ident_token.is_reserved_ident()
      .                   || ident_token.is_path_segment_keyword()
      .                   || [kw::Underscore, kw::For, kw::Impl, kw::Fn, kw::Unsafe, kw::Extern, kw::Typeof, kw::Dyn]
      .                       .contains(&name)
      .           }
      .           
808,046 ( 0.20%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
      .           pub enum TokenKind {
      .               /* Expression-operator symbols. */
      .               Eq,
      .               Lt,
      .               Le,
      .               EqEq,
      .               Ne,
      .               Ge,
      .               Gt,
      .               AndAnd,
      .               OrOr,
      .               Not,
      .               Tilde,
  6,858 ( 0.00%)      BinOp(BinOpToken),
      .               BinOpEq(BinOpToken),
      .           
      .               /* Structural symbols */
      .               At,
      .               Dot,
      .               DotDot,
      .               DotDotDot,
      .               DotDotEq,
-- line 202 ----------------------------------------
-- line 208 ----------------------------------------
      .               LArrow,
      .               FatArrow,
      .               Pound,
      .               Dollar,
      .               Question,
      .               /// Used by proc macros for representing lifetimes, not generated by lexer right now.
      .               SingleQuote,
      .               /// An opening delimiter (e.g., `{`).
 10,830 ( 0.00%)      OpenDelim(DelimToken),
      .               /// A closing delimiter (e.g., `}`).
  2,934 ( 0.00%)      CloseDelim(DelimToken),
      .           
      .               /* Literals */
  4,003 ( 0.00%)      Literal(Lit),
      .           
      .               /// Identifier token.
      .               /// Do not forget about `NtIdent` when you want to match on identifiers.
      .               /// It's recommended to use `Token::(ident,uninterpolate,uninterpolated_span)` to
      .               /// treat regular and interpolated identifiers in the same way.
  6,861 ( 0.00%)      Ident(Symbol, /* is_raw */ bool),
      .               /// Lifetime identifier token.
      .               /// Do not forget about `NtLifetime` when you want to match on lifetime identifiers.
      .               /// It's recommended to use `Token::(lifetime,uninterpolate,uninterpolated_span)` to
      .               /// treat regular and interpolated lifetime identifiers in the same way.
    216 ( 0.00%)      Lifetime(Symbol),
      .           
    251 ( 0.00%)      Interpolated(Lrc<Nonterminal>),
      .           
      .               /// A doc comment token.
      .               /// `Symbol` is the doc comment's data excluding its "quotes" (`///`, `/**`, etc)
      .               /// similarly to symbols in string literal tokens.
  2,067 ( 0.00%)      DocComment(CommentKind, ast::AttrStyle, Symbol),
      .           
      .               Eof,
      .           }
      .           
      .           // `TokenKind` is used a lot. Make sure it doesn't unintentionally get bigger.
      .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
      .           rustc_data_structures::static_assert_size!(TokenKind, 16);
      .           
 81,214 ( 0.02%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
      .           pub struct Token {
  4,608 ( 0.00%)      pub kind: TokenKind,
      .               pub span: Span,
      .           }
      .           
      .           impl TokenKind {
      .               pub fn lit(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> TokenKind {
      .                   Literal(Lit::new(kind, symbol, suffix))
    410 ( 0.00%)      }
      .           
      .               // An approximation to proc-macro-style single-character operators used by rustc parser.
      .               // If the operator token can be broken into two tokens, the first of which is single-character,
      .               // then this function performs that operation, otherwise it returns `None`.
    832 ( 0.00%)      pub fn break_two_token_op(&self) -> Option<(TokenKind, TokenKind)> {
  3,449 ( 0.00%)          Some(match *self {
      .                       Le => (Lt, Eq),
      .                       EqEq => (Eq, Eq),
      .                       Ne => (Not, Eq),
      .                       Ge => (Gt, Eq),
      .                       AndAnd => (BinOp(And), BinOp(And)),
      .                       OrOr => (BinOp(Or), BinOp(Or)),
      .                       BinOp(Shl) => (Lt, Lt),
      .                       BinOp(Shr) => (Gt, Gt),
-- line 271 ----------------------------------------
-- line 280 ----------------------------------------
      .                       BinOpEq(Shl) => (Lt, Le),
      .                       BinOpEq(Shr) => (Gt, Ge),
      .                       DotDot => (Dot, Dot),
      .                       DotDotDot => (Dot, DotDot),
      .                       ModSep => (Colon, Colon),
      .                       RArrow => (BinOp(Minus), Gt),
      .                       LArrow => (Lt, BinOp(Minus)),
      .                       FatArrow => (Eq, Gt),
    818 ( 0.00%)              _ => return None,
      .                   })
    832 ( 0.00%)      }
      .           
      .               /// Returns tokens that are likely to be typed accidentally instead of the current token.
      .               /// Enables better error recovery when the wrong token is found.
      .               pub fn similar_tokens(&self) -> Option<Vec<TokenKind>> {
      .                   match *self {
      .                       Comma => Some(vec![Dot, Lt, Semi]),
      .                       Semi => Some(vec![Colon, Comma]),
      .                       FatArrow => Some(vec![Eq, RArrow]),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               pub fn should_end_const_arg(&self) -> bool {
    512 ( 0.00%)          matches!(self, Gt | Ge | BinOp(Shr) | BinOpEq(Shr))
    110 ( 0.00%)      }
      .           }
      .           
      .           impl Token {
  8,209 ( 0.00%)      pub fn new(kind: TokenKind, span: Span) -> Self {
 28,224 ( 0.01%)          Token { kind, span }
  8,209 ( 0.00%)      }
      .           
      .               /// Some token that will be thrown away later.
  1,015 ( 0.00%)      pub fn dummy() -> Self {
      .                   Token::new(TokenKind::Question, DUMMY_SP)
  1,015 ( 0.00%)      }
      .           
      .               /// Recovers a `Token` from an `Ident`. This creates a raw identifier if necessary.
      .               pub fn from_ast_ident(ident: Ident) -> Self {
    136 ( 0.00%)          Token::new(Ident(ident.name, ident.is_raw_guess()), ident.span)
      .               }
      .           
      .               /// Return this token by value and leave a dummy token in its place.
  5,626 ( 0.00%)      pub fn take(&mut self) -> Self {
      .                   mem::replace(self, Token::dummy())
  5,626 ( 0.00%)      }
      .           
      .               /// For interpolated tokens, returns a span of the fragment to which the interpolated
      .               /// token refers. For all other tokens this is just a regular span.
      .               /// It is particularly important to use this for identifiers and lifetimes
      .               /// for which spans affect name resolution and edition checks.
      .               /// Note that keywords are also identifiers, so they should use this
      .               /// if they keep spans or perform edition checks.
      .               pub fn uninterpolated_span(&self) -> Span {
    412 ( 0.00%)          match &self.kind {
      .                       Interpolated(nt) => nt.span(),
    206 ( 0.00%)              _ => self.span,
      .                   }
    206 ( 0.00%)      }
      .           
      .               pub fn is_op(&self) -> bool {
 16,878 ( 0.00%)          !matches!(
  5,626 ( 0.00%)              self.kind,
      .                       OpenDelim(..)
      .                           | CloseDelim(..)
      .                           | Literal(..)
      .                           | DocComment(..)
      .                           | Ident(..)
      .                           | Lifetime(..)
      .                           | Interpolated(..)
      .                           | Eof
      .                   )
  5,626 ( 0.00%)      }
      .           
      .               pub fn is_like_plus(&self) -> bool {
  4,016 ( 0.00%)          matches!(self.kind, BinOp(Plus) | BinOpEq(Plus))
    794 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token can appear at the start of an expression.
      8 ( 0.00%)      pub fn can_begin_expr(&self) -> bool {
     40 ( 0.00%)          match self.uninterpolate().kind {
     72 ( 0.00%)              Ident(name, is_raw)              =>
     24 ( 0.00%)                  ident_can_begin_expr(name, self.span, is_raw), // value name or keyword
      .                       OpenDelim(..)                     | // tuple, array or block
      .                       Literal(..)                       | // literal
      .                       Not                               | // operator not
      .                       BinOp(Minus)                      | // unary minus
      .                       BinOp(Star)                       | // dereference
      .                       BinOp(Or) | OrOr                  | // closure
      .                       BinOp(And)                        | // reference
      .                       AndAnd                            | // double reference
-- line 371 ----------------------------------------
-- line 376 ----------------------------------------
      .                       Lifetime(..)                      | // labeled loop
      .                       Pound                             => true, // expression attributes
      .                       Interpolated(ref nt) => matches!(**nt, NtLiteral(..) |
      .                           NtExpr(..)    |
      .                           NtBlock(..)   |
      .                           NtPath(..)),
      .                       _ => false,
      .                   }
     16 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token can appear at the start of a type.
    692 ( 0.00%)      pub fn can_begin_type(&self) -> bool {
  1,142 ( 0.00%)          match self.uninterpolate().kind {
  1,170 ( 0.00%)              Ident(name, is_raw)        =>
    130 ( 0.00%)                  ident_can_begin_type(name, self.span, is_raw), // type name or keyword
      .                       OpenDelim(Paren)            | // tuple
      .                       OpenDelim(Bracket)          | // array
      .                       Not                         | // never
      .                       BinOp(Star)                 | // raw pointer
      .                       BinOp(And)                  | // reference
      .                       AndAnd                      | // double reference
      .                       Question                    | // maybe bound in trait object
      .                       Lifetime(..)                | // lifetime bound in trait object
      .                       Lt | BinOp(Shl)             | // associated path
      .                       ModSep                      => true, // global path
      .                       Interpolated(ref nt) => matches!(**nt, NtTy(..) | NtPath(..)),
      .                       _ => false,
      .                   }
  1,038 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token can appear at the start of a const param.
      .               pub fn can_begin_const_arg(&self) -> bool {
    640 ( 0.00%)          match self.kind {
      .                       OpenDelim(Brace) => true,
      .                       Interpolated(ref nt) => matches!(**nt, NtExpr(..) | NtBlock(..) | NtLiteral(..)),
    128 ( 0.00%)              _ => self.can_begin_literal_maybe_minus(),
      .                   }
      .               }
      .           
      .               /// Returns `true` if the token can appear at the start of a generic bound.
    108 ( 0.00%)      pub fn can_begin_bound(&self) -> bool {
    108 ( 0.00%)          self.is_path_start()
      .                       || self.is_lifetime()
      .                       || self.is_keyword(kw::For)
      .                       || self == &Question
      .                       || self == &OpenDelim(Paren)
    144 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is any literal.
      .               pub fn is_lit(&self) -> bool {
      .                   matches!(self.kind, Literal(..))
      .               }
      .           
      .               /// Returns `true` if the token is any literal, a minus (which can prefix a literal,
      .               /// for example a '-42', or one of the boolean idents).
      .               ///
      .               /// In other words, would this token be a valid start of `parse_literal_maybe_minus`?
      .               ///
      .               /// Keep this in sync with and `Lit::from_token`, excluding unary negation.
    132 ( 0.00%)      pub fn can_begin_literal_maybe_minus(&self) -> bool {
  1,299 ( 0.00%)          match self.uninterpolate().kind {
      .                       Literal(..) | BinOp(Minus) => true,
    444 ( 0.00%)              Ident(name, false) if name.is_bool_lit() => true,
      .                       Interpolated(ref nt) => match &**nt {
      .                           NtLiteral(_) => true,
      .                           NtExpr(e) => match &e.kind {
      .                               ast::ExprKind::Lit(_) => true,
      .                               ast::ExprKind::Unary(ast::UnOp::Neg, e) => {
      .                                   matches!(&e.kind, ast::ExprKind::Lit(_))
      .                               }
      .                               _ => false,
      .                           },
      .                           _ => false,
      .                       },
      .                       _ => false,
      .                   }
    264 ( 0.00%)      }
      .           
      .               // A convenience function for matching on identifiers during parsing.
      .               // Turns interpolated identifier (`$i: ident`) or lifetime (`$l: lifetime`) token
      .               // into the regular identifier or lifetime token it refers to,
      .               // otherwise returns the original token.
    772 ( 0.00%)      pub fn uninterpolate(&self) -> Cow<'_, Token> {
 75,937 ( 0.02%)          match &self.kind {
    450 ( 0.00%)              Interpolated(nt) => match **nt {
      .                           NtIdent(ident, is_raw) => {
      .                               Cow::Owned(Token::new(Ident(ident.name, is_raw), ident.span))
      .                           }
      .                           NtLifetime(ident) => Cow::Owned(Token::new(Lifetime(ident.name), ident.span)),
      .                           _ => Cow::Borrowed(self),
      .                       },
      .                       _ => Cow::Borrowed(self),
      .                   }
    772 ( 0.00%)      }
      .           
      .               /// Returns an identifier if this token is an identifier.
  7,262 ( 0.00%)      pub fn ident(&self) -> Option<(Ident, /* is_raw */ bool)> {
      .                   let token = self.uninterpolate();
 51,614 ( 0.01%)          match token.kind {
246,208 ( 0.06%)              Ident(name, is_raw) => Some((Ident::new(name, token.span), is_raw)),
      .                       _ => None,
      .                   }
 56,932 ( 0.01%)      }
      .           
      .               /// Returns a lifetime identifier if this token is a lifetime.
    234 ( 0.00%)      pub fn lifetime(&self) -> Option<Ident> {
      .                   let token = self.uninterpolate();
  1,748 ( 0.00%)          match token.kind {
    678 ( 0.00%)              Lifetime(name) => Some(Ident::new(name, token.span)),
      .                       _ => None,
      .                   }
  1,638 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is an identifier.
      .               pub fn is_ident(&self) -> bool {
      .                   self.ident().is_some()
    468 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is a lifetime.
    640 ( 0.00%)      pub fn is_lifetime(&self) -> bool {
      .                   self.lifetime().is_some()
  1,280 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is an identifier whose name is the given
      .               /// string slice.
    222 ( 0.00%)      pub fn is_ident_named(&self, name: Symbol) -> bool {
      .                   self.ident().map_or(false, |(ident, _)| ident.name == name)
    444 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is an interpolated path.
      .               fn is_path(&self) -> bool {
  4,292 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
      .                       if let NtPath(..) = **nt {
      .                           return true;
      .                       }
      .                   }
      .                   false
      .               }
      .           
      .               /// Would `maybe_whole_expr` in `parser.rs` return `Ok(..)`?
-- line 515 ----------------------------------------
-- line 522 ----------------------------------------
      .                       }
      .                   }
      .           
      .                   false
      .               }
      .           
      .               // Is the token an interpolated block (`$b:block`)?
      .               pub fn is_whole_block(&self) -> bool {
     24 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
      .                       if let NtBlock(..) = **nt {
      .                           return true;
      .                       }
      .                   }
      .                   false
     12 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is either the `mut` or `const` keyword.
      .               pub fn is_mutability(&self) -> bool {
      .                   self.is_keyword(kw::Mut) || self.is_keyword(kw::Const)
      .               }
      .           
    250 ( 0.00%)      pub fn is_qpath_start(&self) -> bool {
  2,396 ( 0.00%)          self == &Lt || self == &BinOp(Shl)
      .               }
      .           
  4,300 ( 0.00%)      pub fn is_path_start(&self) -> bool {
  6,298 ( 0.00%)          self == &ModSep
      .                       || self.is_qpath_start()
      .                       || self.is_path()
      .                       || self.is_path_segment_keyword()
    980 ( 0.00%)              || self.is_ident() && !self.is_reserved_ident()
  5,375 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is a given keyword, `kw`.
 14,632 ( 0.00%)      pub fn is_keyword(&self, kw: Symbol) -> bool {
      .                   self.is_non_raw_ident_where(|id| id.name == kw)
 29,264 ( 0.01%)      }
      .           
     91 ( 0.00%)      pub fn is_path_segment_keyword(&self) -> bool {
      .                   self.is_non_raw_ident_where(Ident::is_path_segment_keyword)
      .               }
      .           
      .               // Returns true for reserved identifiers used internally for elided lifetimes,
      .               // unnamed method parameters, crate root module, error recovery etc.
    176 ( 0.00%)      pub fn is_special_ident(&self) -> bool {
      .                   self.is_non_raw_ident_where(Ident::is_special)
      .               }
      .           
      .               /// Returns `true` if the token is a keyword used in the language.
    176 ( 0.00%)      pub fn is_used_keyword(&self) -> bool {
      .                   self.is_non_raw_ident_where(Ident::is_used_keyword)
      .               }
      .           
      .               /// Returns `true` if the token is a keyword reserved for possible future use.
    176 ( 0.00%)      pub fn is_unused_keyword(&self) -> bool {
      .                   self.is_non_raw_ident_where(Ident::is_unused_keyword)
      .               }
      .           
      .               /// Returns `true` if the token is either a special identifier or a keyword.
      .               pub fn is_reserved_ident(&self) -> bool {
      .                   self.is_non_raw_ident_where(Ident::is_reserved)
      .               }
      .           
      .               /// Returns `true` if the token is the identifier `true` or `false`.
     91 ( 0.00%)      pub fn is_bool_lit(&self) -> bool {
    182 ( 0.00%)          self.is_non_raw_ident_where(|id| id.name.is_bool_lit())
      .               }
      .           
      .               pub fn is_numeric_lit(&self) -> bool {
      .                   matches!(
      .                       self.kind,
      .                       Literal(Lit { kind: LitKind::Integer, .. }) | Literal(Lit { kind: LitKind::Float, .. })
      .                   )
      .               }
      .           
      .               /// Returns `true` if the token is a non-raw identifier for which `pred` holds.
     24 ( 0.00%)      pub fn is_non_raw_ident_where(&self, pred: impl FnOnce(Ident) -> bool) -> bool {
 99,738 ( 0.03%)          match self.ident() {
    917 ( 0.00%)              Some((id, false)) => pred(id),
      .                       _ => false,
      .                   }
     30 ( 0.00%)      }
      .           
 15,640 ( 0.00%)      pub fn glue(&self, joint: &Token) -> Option<Token> {
  7,820 ( 0.00%)          let kind = match self.kind {
    217 ( 0.00%)              Eq => match joint.kind {
      .                           Eq => EqEq,
      .                           Gt => FatArrow,
      .                           _ => return None,
      .                       },
    105 ( 0.00%)              Lt => match joint.kind {
      .                           Eq => Le,
      .                           Lt => BinOp(Shl),
      .                           Le => BinOpEq(Shl),
      .                           BinOp(Minus) => LArrow,
      .                           _ => return None,
      .                       },
    133 ( 0.00%)              Gt => match joint.kind {
      .                           Eq => Ge,
      .                           Gt => BinOp(Shr),
      .                           Ge => BinOpEq(Shr),
      .                           _ => return None,
      .                       },
      6 ( 0.00%)              Not => match joint.kind {
      .                           Eq => Ne,
      .                           _ => return None,
      .                       },
    774 ( 0.00%)              BinOp(op) => match joint.kind {
      .                           Eq => BinOpEq(op),
      4 ( 0.00%)                  BinOp(And) if op == And => AndAnd,
      .                           BinOp(Or) if op == Or => OrOr,
    115 ( 0.00%)                  Gt if op == Minus => RArrow,
      .                           _ => return None,
      .                       },
      .                       Dot => match joint.kind {
      .                           Dot => DotDot,
      .                           DotDot => DotDotDot,
      .                           _ => return None,
      .                       },
      .                       DotDot => match joint.kind {
      .                           Dot => DotDotDot,
      .                           Eq => DotDotEq,
      .                           _ => return None,
      .                       },
    386 ( 0.00%)              Colon => match joint.kind {
      .                           Colon => ModSep,
      .                           _ => return None,
      .                       },
      .                       SingleQuote => match joint.kind {
      .                           Ident(name, false) => Lifetime(Symbol::intern(&format!("'{}", name))),
      .                           _ => return None,
      .                       },
      .           
      .                       Le | EqEq | Ne | Ge | AndAnd | OrOr | Tilde | BinOpEq(..) | At | DotDotDot
      .                       | DotDotEq | Comma | Semi | ModSep | RArrow | LArrow | FatArrow | Pound | Dollar
      .                       | Question | OpenDelim(..) | CloseDelim(..) | Literal(..) | Ident(..)
      .                       | Lifetime(..) | Interpolated(..) | DocComment(..) | Eof => return None,
      .                   };
      .           
  4,771 ( 0.00%)          Some(Token::new(kind, self.span.to(joint.span)))
 14,076 ( 0.00%)      }
      .           }
      .           
      .           impl PartialEq<TokenKind> for Token {
      .               fn eq(&self, rhs: &TokenKind) -> bool {
 39,194 ( 0.01%)          self.kind == *rhs
      .               }
      .           }
      .           
    245 ( 0.00%)  #[derive(Clone, Encodable, Decodable)]
      .           /// For interpolation during macro expansion.
      .           pub enum Nonterminal {
      .               NtItem(P<ast::Item>),
      .               NtBlock(P<ast::Block>),
      .               NtStmt(ast::Stmt),
      .               NtPat(P<ast::Pat>),
     70 ( 0.00%)      NtExpr(P<ast::Expr>),
      .               NtTy(P<ast::Ty>),
      .               NtIdent(Ident, /* is_raw */ bool),
      .               NtLifetime(Ident),
      .               NtLiteral(P<ast::Expr>),
      .               /// Stuff inside brackets for attributes
      .               NtMeta(P<ast::AttrItem>),
      .               NtPath(ast::Path),
      .               NtVis(ast::Visibility),
-- line 686 ----------------------------------------
-- line 711 ----------------------------------------
      .               Path,
      .               Vis,
      .               TT,
      .           }
      .           
      .           impl NonterminalKind {
      .               /// The `edition` closure is used to get the edition for the given symbol. Doing
      .               /// `span.edition()` is expensive, so we do it lazily.
    120 ( 0.00%)      pub fn from_symbol(
      .                   symbol: Symbol,
      .                   edition: impl FnOnce() -> Edition,
      .               ) -> Option<NonterminalKind> {
    254 ( 0.00%)          Some(match symbol {
      .                       sym::item => NonterminalKind::Item,
      .                       sym::block => NonterminalKind::Block,
      .                       sym::stmt => NonterminalKind::Stmt,
      .                       sym::pat => match edition() {
      .                           Edition::Edition2015 | Edition::Edition2018 => {
      .                               NonterminalKind::PatParam { inferred: true }
      .                           }
      .                           Edition::Edition2021 => NonterminalKind::PatWithOr,
-- line 731 ----------------------------------------
-- line 737 ----------------------------------------
      .                       sym::lifetime => NonterminalKind::Lifetime,
      .                       sym::literal => NonterminalKind::Literal,
      .                       sym::meta => NonterminalKind::Meta,
      .                       sym::path => NonterminalKind::Path,
      .                       sym::vis => NonterminalKind::Vis,
      .                       sym::tt => NonterminalKind::TT,
      .                       _ => return None,
      .                   })
    120 ( 0.00%)      }
      .               fn symbol(self) -> Symbol {
      .                   match self {
      .                       NonterminalKind::Item => sym::item,
      .                       NonterminalKind::Block => sym::block,
      .                       NonterminalKind::Stmt => sym::stmt,
      .                       NonterminalKind::PatParam { inferred: false } => sym::pat_param,
      .                       NonterminalKind::PatParam { inferred: true } | NonterminalKind::PatWithOr => sym::pat,
      .                       NonterminalKind::Expr => sym::expr,
-- line 753 ----------------------------------------

277,602 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs
--------------------------------------------------------------------------------
Ir               

-- line 176 ----------------------------------------
      .               }
      .               fn sess(self) -> Option<&'tcx Session> {
      .                   None
      .               }
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   None
      .               }
      .           
  6,903 ( 0.00%)      fn decoder(self, pos: usize) -> DecodeContext<'a, 'tcx> {
  2,301 ( 0.00%)          let tcx = self.tcx();
425,864 ( 0.11%)          DecodeContext {
 43,104 ( 0.01%)              opaque: opaque::Decoder::new(self.blob(), pos),
  2,301 ( 0.00%)              cdata: self.cdata(),
      .                       blob: self.blob(),
 23,368 ( 0.01%)              sess: self.sess().or(tcx.map(|tcx| tcx.sess)),
      .                       tcx,
      .                       last_source_file_index: 0,
      .                       lazy_state: LazyState::NoNode,
      .                       alloc_decoding_session: self
      .                           .cdata()
 39,469 ( 0.01%)                  .map(|cdata| cdata.cdata.alloc_decoding_state.new_decoding_session()),
      .                   }
  6,903 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Metadata<'a, 'tcx> for &'a MetadataBlob {
      .               #[inline]
      .               fn blob(self) -> &'a MetadataBlob {
      .                   self
      .               }
      .           }
-- line 206 ----------------------------------------
-- line 255 ----------------------------------------
      .               }
      .               #[inline]
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   Some(self.1)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<T> {
105,083 ( 0.03%)      fn decode<M: Metadata<'a, 'tcx>>(self, metadata: M) -> T {
 44,311 ( 0.01%)          let mut dcx = metadata.decoder(self.position.get());
120,645 ( 0.03%)          dcx.lazy_state = LazyState::NodeStart(self.position);
 26,084 ( 0.01%)          T::decode(&mut dcx)
133,838 ( 0.03%)      }
      .           }
      .           
      .           impl<'a: 'x, 'tcx: 'x, 'x, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<[T]> {
      .               fn decode<M: Metadata<'a, 'tcx>>(
      .                   self,
      .                   metadata: M,
      .               ) -> impl ExactSizeIterator<Item = T> + Captures<'a> + Captures<'tcx> + 'x {
     35 ( 0.00%)          let mut dcx = metadata.decoder(self.position.get());
     10 ( 0.00%)          dcx.lazy_state = LazyState::NodeStart(self.position);
 11,902 ( 0.00%)          (0..self.meta).map(move |_| T::decode(&mut dcx))
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> DecodeContext<'a, 'tcx> {
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   debug_assert!(self.tcx.is_some(), "missing TyCtxt in DecodeContext");
      .                   self.tcx.unwrap()
-- line 285 ----------------------------------------
-- line 292 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn cdata(&self) -> CrateMetadataRef<'a> {
      .                   debug_assert!(self.cdata.is_some(), "missing CrateMetadata in DecodeContext");
      .                   self.cdata.unwrap()
      .               }
      .           
      .               fn map_encoded_cnum_to_current(&self, cnum: CrateNum) -> CrateNum {
146,476 ( 0.04%)          if cnum == LOCAL_CRATE { self.cdata().cnum } else { self.cdata().cnum_map[cnum] }
      .               }
      .           
 55,383 ( 0.01%)      fn read_lazy_with_meta<T: ?Sized + LazyMeta>(&mut self, meta: T::Meta) -> Lazy<T> {
      .                   let distance = self.read_usize();
 54,181 ( 0.01%)          let position = match self.lazy_state {
      .                       LazyState::NoNode => bug!("read_lazy_with_meta: outside of a metadata node"),
 10,942 ( 0.00%)              LazyState::NodeStart(start) => {
      .                           let start = start.get();
 21,884 ( 0.01%)                  assert!(distance <= start);
      .                           start - distance
      .                       }
 12,813 ( 0.00%)              LazyState::Previous(last_pos) => last_pos.get() + distance,
      .                   };
 30,426 ( 0.01%)          self.lazy_state = LazyState::Previous(NonZeroUsize::new(position).unwrap());
      .                   Lazy::from_position_and_meta(NonZeroUsize::new(position).unwrap(), meta)
 55,383 ( 0.01%)      }
      .           
      .               #[inline]
      .               pub fn read_raw_bytes(&mut self, len: usize) -> &'a [u8] {
      .                   self.opaque.read_raw_bytes(len)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> TyDecoder<'tcx> for DecodeContext<'a, 'tcx> {
-- line 324 ----------------------------------------
-- line 326 ----------------------------------------
      .           
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   self.tcx.expect("missing TyCtxt in DecodeContext")
      .               }
      .           
      .               #[inline]
      .               fn peek_byte(&self) -> u8 {
104,745 ( 0.03%)          self.opaque.data[self.opaque.position()]
      .               }
      .           
      .               #[inline]
      .               fn position(&self) -> usize {
      .                   self.opaque.position()
      .               }
      .           
109,564 ( 0.03%)      fn cached_ty_for_shorthand<F>(&mut self, shorthand: usize, or_insert_with: F) -> Ty<'tcx>
      .               where
      .                   F: FnOnce(&mut Self) -> Ty<'tcx>,
      .               {
 15,652 ( 0.00%)          let tcx = self.tcx();
      .           
 15,652 ( 0.00%)          let key = ty::CReaderCacheKey { cnum: Some(self.cdata().cnum), pos: shorthand };
      .           
 47,336 ( 0.01%)          if let Some(&ty) = tcx.ty_rcache.borrow().get(&key) {
      .                       return ty;
      .                   }
      .           
  3,818 ( 0.00%)          let ty = or_insert_with(self);
      .                   tcx.ty_rcache.borrow_mut().insert(key, ty);
      .                   ty
140,868 ( 0.04%)      }
      .           
      .               fn with_position<F, R>(&mut self, pos: usize, f: F) -> R
      .               where
      .                   F: FnOnce(&mut Self) -> R,
      .               {
      .                   let new_opaque = opaque::Decoder::new(self.opaque.data, pos);
      .                   let old_opaque = mem::replace(&mut self.opaque, new_opaque);
      .                   let old_state = mem::replace(&mut self.lazy_state, LazyState::NoNode);
      .                   let r = f(self);
 19,535 ( 0.00%)          self.opaque = old_opaque;
  3,907 ( 0.00%)          self.lazy_state = old_state;
      .                   r
      .               }
      .           
      .               fn decode_alloc_id(&mut self) -> rustc_middle::mir::interpret::AllocId {
      .                   if let Some(alloc_decoding_session) = self.alloc_decoding_session {
      .                       alloc_decoding_session.decode_alloc_id(self)
      .                   } else {
      .                       bug!("Attempting to decode interpret::AllocId without CrateMetadata")
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for CrateNum {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> CrateNum {
 80,067 ( 0.02%)          let cnum = CrateNum::from_u32(d.read_u32());
      .                   d.map_encoded_cnum_to_current(cnum)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for DefIndex {
    193 ( 0.00%)      fn decode(d: &mut DecodeContext<'a, 'tcx>) -> DefIndex {
136,493 ( 0.03%)          DefIndex::from_u32(d.read_u32())
    386 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnIndex {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> ExpnIndex {
      .                   ExpnIndex::from_u32(d.read_u32())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for SyntaxContext {
 34,188 ( 0.01%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> SyntaxContext {
  8,547 ( 0.00%)          let cdata = decoder.cdata();
  8,547 ( 0.00%)          let sess = decoder.sess.unwrap();
 17,094 ( 0.00%)          let cname = cdata.root.name;
      .                   rustc_span::hygiene::decode_syntax_context(decoder, &cdata.hygiene_context, |_, id| {
      .                       debug!("SpecializedDecoder<SyntaxContext>: decoding {}", id);
    216 ( 0.00%)              cdata
      .                           .root
      .                           .syntax_contexts
      .                           .get(cdata, id)
      .                           .unwrap_or_else(|| panic!("Missing SyntaxContext {:?} for crate {:?}", id, cname))
      .                           .decode((cdata, sess))
      .                   })
 42,735 ( 0.01%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnId {
  3,269 ( 0.00%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> ExpnId {
    467 ( 0.00%)          let local_cdata = decoder.cdata();
    467 ( 0.00%)          let sess = decoder.sess.unwrap();
      .           
      .                   let cnum = CrateNum::decode(decoder);
      .                   let index = u32::decode(decoder);
      .           
      .                   let expn_id = rustc_span::hygiene::decode_expn_id(cnum, index, |expn_id| {
      .                       let ExpnId { krate: cnum, local_id: index } = expn_id;
      .                       // Lookup local `ExpnData`s in our own crate data. Foreign `ExpnData`s
      .                       // are stored in the owning crate, to avoid duplication.
      .                       debug_assert_ne!(cnum, LOCAL_CRATE);
     73 ( 0.00%)              let crate_data = if cnum == local_cdata.cnum {
      .                           local_cdata
      .                       } else {
      .                           local_cdata.cstore.get_crate_data(cnum)
      .                       };
    365 ( 0.00%)              let expn_data = crate_data
      .                           .root
      .                           .expn_data
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
    365 ( 0.00%)              let expn_hash = crate_data
      .                           .root
      .                           .expn_hashes
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
    730 ( 0.00%)              (expn_data, expn_hash)
      .                   });
      .                   expn_id
  3,736 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Span {
 67,080 ( 0.02%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Span {
  8,385 ( 0.00%)          let ctxt = SyntaxContext::decode(decoder);
      .                   let tag = u8::decode(decoder);
      .           
 16,770 ( 0.00%)          if tag == TAG_PARTIAL_SPAN {
      .                       return DUMMY_SP.with_ctxt(ctxt);
      .                   }
      .           
      .                   debug_assert!(tag == TAG_VALID_SPAN_LOCAL || tag == TAG_VALID_SPAN_FOREIGN);
      .           
      .                   let lo = BytePos::decode(decoder);
      .                   let len = BytePos::decode(decoder);
      .                   let hi = lo + len;
      .           
 25,155 ( 0.01%)          let Some(sess) = decoder.sess else {
      .                       bug!("Cannot decode Span without Session.")
      .                   };
      .           
      .                   // There are two possibilities here:
      .                   // 1. This is a 'local span', which is located inside a `SourceFile`
      .                   // that came from this crate. In this case, we use the source map data
      .                   // encoded in this crate. This branch should be taken nearly all of the time.
      .                   // 2. This is a 'foreign span', which is located inside a `SourceFile`
-- line 476 ----------------------------------------
-- line 492 ----------------------------------------
      .                   // a transitive dependency.
      .                   //
      .                   // When we encode a foreign span, we adjust its 'lo' and 'high' values
      .                   // to be based on the *foreign* crate (e.g. crate C), not the crate
      .                   // we are writing metadata for (e.g. crate B). This allows us to
      .                   // treat the 'local' and 'foreign' cases almost identically during deserialization:
      .                   // we can call `imported_source_files` for the proper crate, and binary search
      .                   // through the returned slice using our span.
 19,235 ( 0.00%)          let imported_source_files = if tag == TAG_VALID_SPAN_LOCAL {
      .                       decoder.cdata().imported_source_files(sess)
      .                   } else {
      .                       // When we encode a proc-macro crate, all `Span`s should be encoded
      .                       // with `TAG_VALID_SPAN_LOCAL`
     16 ( 0.00%)              if decoder.cdata().root.is_proc_macro_crate() {
      .                           // Decode `CrateNum` as u32 - using `CrateNum::decode` will ICE
      .                           // since we don't have `cnum_map` populated.
      .                           let cnum = u32::decode(decoder);
      .                           panic!(
      .                               "Decoding of crate {:?} tried to access proc-macro dep {:?}",
      .                               decoder.cdata().root.name,
      .                               cnum
      .                           );
-- line 513 ----------------------------------------
-- line 518 ----------------------------------------
      .                           "SpecializedDecoder<Span>::specialized_decode: loading source files from cnum {:?}",
      .                           cnum
      .                       );
      .           
      .                       // Decoding 'foreign' spans should be rare enough that it's
      .                       // not worth it to maintain a per-CrateNum cache for `last_source_file_index`.
      .                       // We just set it to 0, to ensure that we don't try to access something out
      .                       // of bounds for our initial 'guess'
     32 ( 0.00%)              decoder.last_source_file_index = 0;
      .           
     16 ( 0.00%)              let foreign_data = decoder.cdata().cstore.get_crate_data(cnum);
      .                       foreign_data.imported_source_files(sess)
      .                   };
      .           
      .                   let source_file = {
      .                       // Optimize for the case that most spans within a translated item
      .                       // originate from the same source_file.
 25,155 ( 0.01%)              let last_source_file = &imported_source_files[decoder.last_source_file_index];
      .           
 33,436 ( 0.01%)              if lo >= last_source_file.original_start_pos && lo <= last_source_file.original_end_pos
      .                       {
      .                           last_source_file
      .                       } else {
      .                           let index = imported_source_files
      .                               .binary_search_by_key(&lo, |source_file| source_file.original_start_pos)
  4,928 ( 0.00%)                      .unwrap_or_else(|index| index - 1);
      .           
      .                           // Don't try to cache the index for foreign spans,
      .                           // as this would require a map from CrateNums to indices
  2,465 ( 0.00%)                  if tag == TAG_VALID_SPAN_LOCAL {
  2,460 ( 0.00%)                      decoder.last_source_file_index = index;
      .                           }
  4,930 ( 0.00%)                  &imported_source_files[index]
      .                       }
      .                   };
      .           
      .                   // Make sure our binary search above is correct.
      .                   debug_assert!(
      .                       lo >= source_file.original_start_pos && lo <= source_file.original_end_pos,
      .                       "Bad binary search: lo={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       lo,
-- line 558 ----------------------------------------
-- line 565 ----------------------------------------
      .                       hi >= source_file.original_start_pos && hi <= source_file.original_end_pos,
      .                       "Bad binary search: hi={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       hi,
      .                       source_file.original_start_pos,
      .                       source_file.original_end_pos
      .                   );
      .           
      .                   let lo =
 33,540 ( 0.01%)              (lo + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .                   let hi =
      .                       (hi + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .           
      .                   // Do not try to decode parent for foreign spans.
      .                   Span::new(lo, hi, ctxt, None)
 75,465 ( 0.02%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for &'tcx [thir::abstract_const::Node<'tcx>] {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
-- line 587 ----------------------------------------
-- line 590 ----------------------------------------
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<T>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
 20,962 ( 0.01%)          decoder.read_lazy_with_meta(())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<[T]>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
 14,117 ( 0.00%)          if len == 0 { Lazy::empty() } else { decoder.read_lazy_with_meta(len) }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, I: Idx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<Table<I, T>>
      .           where
      .               Option<T>: FixedSizeEncoding,
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
 15,548 ( 0.00%)          decoder.read_lazy_with_meta(len)
      .               }
      .           }
      .           
      .           implement_ty_decoder!(DecodeContext<'a, 'tcx>);
      .           
      .           impl<'tcx> MetadataBlob {
      .               crate fn new(metadata_ref: MetadataRef) -> MetadataBlob {
      .                   MetadataBlob(Lrc::new(metadata_ref))
-- line 626 ----------------------------------------
-- line 630 ----------------------------------------
      .                   self.blob().starts_with(METADATA_HEADER)
      .               }
      .           
      .               crate fn get_rustc_version(&self) -> String {
      .                   Lazy::<String>::from_position(NonZeroUsize::new(METADATA_HEADER.len() + 4).unwrap())
      .                       .decode(self)
      .               }
      .           
    276 ( 0.00%)      crate fn get_root(&self) -> CrateRoot<'tcx> {
     92 ( 0.00%)          let slice = &self.blob()[..];
      .                   let offset = METADATA_HEADER.len();
    460 ( 0.00%)          let pos = (((slice[offset + 0] as u32) << 24)
    184 ( 0.00%)              | ((slice[offset + 1] as u32) << 16)
    368 ( 0.00%)              | ((slice[offset + 2] as u32) << 8)
    276 ( 0.00%)              | ((slice[offset + 3] as u32) << 0)) as usize;
      .                   Lazy::<CrateRoot<'tcx>>::from_position(NonZeroUsize::new(pos).unwrap()).decode(self)
    460 ( 0.00%)      }
      .           
      .               crate fn list_crate_metadata(&self, out: &mut dyn io::Write) -> io::Result<()> {
      .                   let root = self.get_root();
      .                   writeln!(out, "Crate info:")?;
      .                   writeln!(out, "name {}{}", root.name, root.extra_filename)?;
      .                   writeln!(out, "hash {} stable_crate_id {:?}", root.hash, root.stable_crate_id)?;
      .                   writeln!(out, "proc_macro {:?}", root.proc_macro_data.is_some())?;
      .                   writeln!(out, "=External Dependencies=")?;
-- line 654 ----------------------------------------
-- line 666 ----------------------------------------
      .                   }
      .                   write!(out, "\n")?;
      .                   Ok(())
      .               }
      .           }
      .           
      .           impl CrateRoot<'_> {
      .               crate fn is_proc_macro_crate(&self) -> bool {
     59 ( 0.00%)          self.proc_macro_data.is_some()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
      6 ( 0.00%)          self.name
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
     30 ( 0.00%)          self.hash
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
     63 ( 0.00%)          self.stable_crate_id
      .               }
      .           
      .               crate fn triple(&self) -> &TargetTriple {
      .                   &self.triple
      .               }
      .           
      .               crate fn decode_crate_deps<'a>(
      .                   &self,
      .                   metadata: &'a MetadataBlob,
      .               ) -> impl ExactSizeIterator<Item = CrateDep> + Captures<'a> {
     58 ( 0.00%)          self.crate_deps.decode(metadata)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> CrateMetadataRef<'a> {
      7 ( 0.00%)      fn raw_proc_macro(self, id: DefIndex) -> &'a ProcMacro {
      .                   // DefIndex's in root.proc_macro_data have a one-to-one correspondence
      .                   // with items in 'raw_proc_macros'.
      2 ( 0.00%)          let pos = self
      .                       .root
      .                       .proc_macro_data
      .                       .as_ref()
      .                       .unwrap()
      .                       .macros
      .                       .decode(self)
      .                       .position(|i| i == id)
      .                       .unwrap();
      4 ( 0.00%)          &self.raw_proc_macros.unwrap()[pos]
      9 ( 0.00%)      }
      .           
 19,866 ( 0.01%)      fn opt_item_ident(self, item_index: DefIndex, sess: &Session) -> Option<Ident> {
 14,888 ( 0.00%)          let name = self.def_key(item_index).disambiguated_data.data.get_opt_name()?;
  8,288 ( 0.00%)          let span = match self.root.tables.ident_span.get(self, item_index) {
      .                       Some(lazy_span) => lazy_span.decode((self, sess)),
      .                       None => {
      .                           // FIXME: this weird case of a name with no span is specific to `extern crate`
      .                           // items, which are supposed to be treated like `use` items and only be encoded
      .                           // to metadata as `Export`s, return `None` because that's what all the callers
      .                           // expect in this case.
     90 ( 0.00%)                  assert_eq!(self.def_kind(item_index), DefKind::ExternCrate);
      .                           return None;
      .                       }
      .                   };
      .                   Some(Ident::new(name, span))
 25,460 ( 0.01%)      }
      .           
    184 ( 0.00%)      fn item_ident(self, item_index: DefIndex, sess: &Session) -> Ident {
  2,520 ( 0.00%)          self.opt_item_ident(item_index, sess).expect("no encoded ident for item")
    368 ( 0.00%)      }
      .           
      .               fn maybe_kind(self, item_id: DefIndex) -> Option<EntryKind> {
 21,092 ( 0.01%)          self.root.tables.kind.get(self, item_id).map(|k| k.decode(self))
      .               }
      .           
 84,368 ( 0.02%)      fn kind(self, item_id: DefIndex) -> EntryKind {
      .                   self.maybe_kind(item_id).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
 63,276 ( 0.02%)      }
      .           
  7,448 ( 0.00%)      fn def_kind(self, item_id: DefIndex) -> DefKind {
  5,306 ( 0.00%)          self.root.tables.def_kind.get(self, item_id).map(|k| k.decode(self)).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::def_kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
  4,256 ( 0.00%)      }
      .           
  1,656 ( 0.00%)      fn get_span(self, index: DefIndex, sess: &Session) -> Span {
  3,533 ( 0.00%)          self.root
      .                       .tables
      .                       .span
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing span for {:?}", index))
      .                       .decode((self, sess))
    920 ( 0.00%)      }
      .           
      .               fn load_proc_macro(self, id: DefIndex, sess: &Session) -> SyntaxExtension {
      .                   let (name, kind, helper_attrs) = match *self.raw_proc_macro(id) {
      .                       ProcMacro::CustomDerive { trait_name, attributes, client } => {
      .                           let helper_attrs =
      .                               attributes.iter().cloned().map(Symbol::intern).collect::<Vec<_>>();
      .                           (
      .                               trait_name,
-- line 778 ----------------------------------------
-- line 795 ----------------------------------------
      .                       self.get_span(id, sess),
      .                       helper_attrs,
      .                       self.root.edition,
      .                       Symbol::intern(name),
      .                       &attrs,
      .                   )
      .               }
      .           
    390 ( 0.00%)      fn get_trait_def(self, item_id: DefIndex, sess: &Session) -> ty::TraitDef {
    120 ( 0.00%)          match self.kind(item_id) {
     30 ( 0.00%)              EntryKind::Trait(data) => {
    180 ( 0.00%)                  let data = data.decode((self, sess));
    480 ( 0.00%)                  ty::TraitDef::new(
      .                               self.local_def_id(item_id),
     60 ( 0.00%)                      data.unsafety,
     60 ( 0.00%)                      data.paren_sugar,
     60 ( 0.00%)                      data.has_auto_impl,
     60 ( 0.00%)                      data.is_marker,
     30 ( 0.00%)                      data.skip_array_during_method_dispatch,
     30 ( 0.00%)                      data.specialization_kind,
    120 ( 0.00%)                      self.def_path_hash(item_id),
     30 ( 0.00%)                      data.must_implement_one_of,
      .                           )
      .                       }
      .                       EntryKind::TraitAlias => ty::TraitDef::new(
      .                           self.local_def_id(item_id),
      .                           hir::Unsafety::Normal,
      .                           false,
      .                           false,
      .                           false,
      .                           false,
      .                           ty::trait_def::TraitSpecializationKind::None,
      .                           self.def_path_hash(item_id),
      .                           None,
      .                       ),
      .                       _ => bug!("def-index does not refer to trait or trait alias"),
      .                   }
    270 ( 0.00%)      }
      .           
    378 ( 0.00%)      fn get_variant(
      .                   self,
      .                   kind: &EntryKind,
      .                   index: DefIndex,
      .                   parent_did: DefId,
      .                   sess: &Session,
      .               ) -> ty::VariantDef {
    168 ( 0.00%)          let data = match kind {
      .                       EntryKind::Variant(data) | EntryKind::Struct(data, _) | EntryKind::Union(data, _) => {
    210 ( 0.00%)                  data.decode(self)
      .                       }
      .                       _ => bug!(),
      .                   };
      .           
    142 ( 0.00%)          let adt_kind = match kind {
      .                       EntryKind::Variant(_) => ty::AdtKind::Enum,
      .                       EntryKind::Struct(..) => ty::AdtKind::Struct,
      .                       EntryKind::Union(..) => ty::AdtKind::Union,
      .                       _ => bug!(),
      .                   };
      .           
      .                   let variant_did =
      .                       if adt_kind == ty::AdtKind::Enum { Some(self.local_def_id(index)) } else { None };
     84 ( 0.00%)          let ctor_did = data.ctor.map(|index| self.local_def_id(index));
      .           
    924 ( 0.00%)          ty::VariantDef::new(
      .                       self.item_ident(index, sess).name,
      .                       variant_did,
      .                       ctor_did,
    168 ( 0.00%)              data.discr,
    252 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, index)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
      .                           .map(|index| ty::FieldDef {
     56 ( 0.00%)                      did: self.local_def_id(index),
    112 ( 0.00%)                      name: self.item_ident(index, sess).name,
    112 ( 0.00%)                      vis: self.get_visibility(index),
      .                           })
      .                           .collect(),
      .                       data.ctor_kind,
      .                       adt_kind,
      .                       parent_did,
      .                       false,
     42 ( 0.00%)              data.is_non_exhaustive,
      .                   )
    378 ( 0.00%)      }
      .           
    510 ( 0.00%)      fn get_adt_def(self, item_id: DefIndex, tcx: TyCtxt<'tcx>) -> &'tcx ty::AdtDef {
    136 ( 0.00%)          let kind = self.kind(item_id);
     68 ( 0.00%)          let did = self.local_def_id(item_id);
      .           
    160 ( 0.00%)          let (adt_kind, repr) = match kind {
      .                       EntryKind::Enum(repr) => (ty::AdtKind::Enum, repr),
      .                       EntryKind::Struct(_, repr) => (ty::AdtKind::Struct, repr),
      .                       EntryKind::Union(_, repr) => (ty::AdtKind::Union, repr),
      .                       _ => bug!("get_adt_def called on a non-ADT {:?}", did),
      .                   };
      .           
      .                   let variants = if let ty::AdtKind::Enum = adt_kind {
     25 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, item_id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
    221 ( 0.00%)                  .map(|index| self.get_variant(&self.kind(index), index, did, tcx.sess))
      .                           .collect()
      .                   } else {
    232 ( 0.00%)              std::iter::once(self.get_variant(&kind, item_id, did, tcx.sess)).collect()
      .                   };
      .           
    501 ( 0.00%)          tcx.alloc_adt_def(did, adt_kind, variants, repr)
    238 ( 0.00%)      }
      .           
      .               fn get_explicit_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
    965 ( 0.00%)          self.root.tables.explicit_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_inferred_outlives(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
    965 ( 0.00%)          self.root
      .                       .tables
      .                       .inferred_outlives
      .                       .get(self, item_id)
     16 ( 0.00%)              .map(|predicates| tcx.arena.alloc_from_iter(predicates.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_super_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
    130 ( 0.00%)          self.root.tables.super_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_explicit_item_bounds(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
      5 ( 0.00%)          self.root
      .                       .tables
      .                       .explicit_item_bounds
      .                       .get(self, item_id)
      4 ( 0.00%)              .map(|bounds| tcx.arena.alloc_from_iter(bounds.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_generics(self, item_id: DefIndex, sess: &Session) -> ty::Generics {
  2,106 ( 0.00%)          self.root.tables.generics.get(self, item_id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_type(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
 10,105 ( 0.00%)          self.root
      .                       .tables
      .                       .ty
      .                       .get(self, id)
      .                       .unwrap_or_else(|| panic!("Not a type: {:?}", id))
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_stability(self, id: DefIndex) -> Option<attr::Stability> {
    460 ( 0.00%)          self.root.tables.stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_const_stability(self, id: DefIndex) -> Option<attr::ConstStability> {
     15 ( 0.00%)          self.root.tables.const_stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_deprecation(self, id: DefIndex) -> Option<attr::Deprecation> {
    435 ( 0.00%)          self.root.tables.deprecation.get(self, id).map(|depr| depr.decode(self))
      .               }
      .           
     54 ( 0.00%)      fn get_visibility(self, id: DefIndex) -> ty::Visibility {
  3,469 ( 0.00%)          self.root.tables.visibility.get(self, id).unwrap().decode(self)
     36 ( 0.00%)      }
      .           
      .               fn get_impl_data(self, id: DefIndex) -> ImplData {
 56,646 ( 0.01%)          match self.kind(id) {
 47,205 ( 0.01%)              EntryKind::Impl(data) => data.decode(self),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_parent_impl(self, id: DefIndex) -> Option<DefId> {
 28,086 ( 0.01%)          self.get_impl_data(id).parent_impl
      .               }
      .           
      .               fn get_impl_polarity(self, id: DefIndex) -> ty::ImplPolarity {
     67 ( 0.00%)          self.get_impl_data(id).polarity
      .               }
      .           
      .               fn get_impl_defaultness(self, id: DefIndex) -> hir::Defaultness {
      7 ( 0.00%)          self.get_impl_data(id).defaultness
      .               }
      .           
      .               fn get_impl_constness(self, id: DefIndex) -> hir::Constness {
      5 ( 0.00%)          self.get_impl_data(id).constness
      .               }
      .           
      .               fn get_trait_item_def_id(self, id: DefIndex) -> Option<DefId> {
  1,695 ( 0.00%)          self.root.tables.trait_item_def_id.get(self, id).map(|d| d.decode(self))
      .               }
      .           
      .               fn get_coerce_unsized_info(self, id: DefIndex) -> Option<ty::adjustment::CoerceUnsizedInfo> {
      .                   self.get_impl_data(id).coerce_unsized_info
      .               }
      .           
      .               fn get_impl_trait(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Option<ty::TraitRef<'tcx>> {
112,636 ( 0.03%)          self.root.tables.impl_trait_ref.get(self, id).map(|tr| tr.decode((self, tcx)))
      .               }
      .           
      .               fn get_expn_that_defined(self, id: DefIndex, sess: &Session) -> ExpnId {
  1,700 ( 0.00%)          self.root.tables.expn_that_defined.get(self, id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_const_param_default(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> rustc_middle::ty::Const<'tcx> {
      .                   self.root.tables.const_defaults.get(self, id).unwrap().decode((self, tcx))
-- line 1026 ----------------------------------------
-- line 1028 ----------------------------------------
      .           
      .               /// Iterates over all the stability attributes in the given crate.
      .               fn get_lib_features(self, tcx: TyCtxt<'tcx>) -> &'tcx [(Symbol, Option<Symbol>)] {
      .                   tcx.arena.alloc_from_iter(self.root.lib_features.decode(self))
      .               }
      .           
      .               /// Iterates over the language items in the given crate.
      .               fn get_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [(DefId, usize)] {
     90 ( 0.00%)          tcx.arena.alloc_from_iter(
     60 ( 0.00%)              self.root
      .                           .lang_items
      .                           .decode(self)
    564 ( 0.00%)                  .map(|(def_index, index)| (self.local_def_id(def_index), index)),
      .                   )
      .               }
      .           
      .               /// Iterates over the diagnostic items in the given crate.
      .               fn get_diagnostic_items(self) -> DiagnosticItems {
      .                   let mut id_to_name = FxHashMap::default();
     60 ( 0.00%)          let name_to_id = self
      .                       .root
      .                       .diagnostic_items
      .                       .decode(self)
      .                       .map(|(name, def_index)| {
    130 ( 0.00%)                  let id = self.local_def_id(def_index);
    130 ( 0.00%)                  id_to_name.insert(id, name);
      .                           (name, id)
      .                       })
      .                       .collect();
    270 ( 0.00%)          DiagnosticItems { id_to_name, name_to_id }
      .               }
      .           
      .               /// Iterates over all named children of the given module,
      .               /// including both proper items and reexports.
      .               /// Module here is understood in name resolution sense - it can be a `mod` item,
      .               /// or a crate root, or an enum, or a trait.
      .               fn for_each_module_child(
      .                   self,
      .                   id: DefIndex,
      .                   mut callback: impl FnMut(ModChild),
      .                   sess: &Session,
      .               ) {
    212 ( 0.00%)          if let Some(data) = &self.root.proc_macro_data {
      .                       // If we are loading as a proc macro, we want to return
      .                       // the view of this crate as a proc macro crate.
      1 ( 0.00%)              if id == CRATE_DEF_INDEX {
     15 ( 0.00%)                  for def_index in data.macros.decode(self) {
      3 ( 0.00%)                      let raw_macro = self.raw_proc_macro(def_index);
      .                               let res = Res::Def(
      .                                   DefKind::Macro(macro_kind(raw_macro)),
      .                                   self.local_def_id(def_index),
      .                               );
      .                               let ident = self.item_ident(def_index, sess);
      .                               callback(ModChild {
      .                                   ident,
      .                                   res,
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
      .                                   span: ident.span,
      .                               });
      .                           }
      .                       }
      .                       return;
      .                   }
      .           
      .                   // Iterate over all children.
    416 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
    832 ( 0.00%)              for child_index in children.decode((self, sess)) {
  7,140 ( 0.00%)                  if let Some(ident) = self.opt_item_ident(child_index, sess) {
  1,542 ( 0.00%)                      let kind = self.def_kind(child_index);
  1,028 ( 0.00%)                      if matches!(kind, DefKind::Macro(..)) {
      .                                   // FIXME: Macros are currently encoded twice, once as items and once as
      .                                   // reexports. We ignore the items here and only use the reexports.
      .                                   continue;
      .                               }
      .                               let def_id = self.local_def_id(child_index);
      .                               let res = Res::Def(kind, def_id);
      .                               let vis = self.get_visibility(child_index);
      .                               let span = self.get_span(child_index, sess);
      .           
      .                               callback(ModChild { ident, res, vis, span });
      .           
      .                               // For non-re-export structs and variants add their constructors to children.
      .                               // Re-export lists automatically contain constructors when necessary.
  1,974 ( 0.00%)                      match kind {
      .                                   DefKind::Struct => {
     45 ( 0.00%)                              if let Some((ctor_def_id, ctor_kind)) =
      .                                           self.get_ctor_def_id_and_kind(child_index)
      .                                       {
      .                                           let ctor_res =
      .                                               Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);
      .                                           let vis = self.get_visibility(ctor_def_id.index);
      .                                           callback(ModChild { ident, res: ctor_res, vis, span });
      .                                       }
      .                                   }
      .                                   DefKind::Variant => {
      .                                       // Braced variants, unlike structs, generate unusable names in
      .                                       // value namespace, they are reserved for possible future use.
      .                                       // It's ok to use the variant's id as a ctor id since an
      .                                       // error will be reported on any use of such resolution anyway.
     15 ( 0.00%)                              let (ctor_def_id, ctor_kind) = self
      .                                           .get_ctor_def_id_and_kind(child_index)
      .                                           .unwrap_or((def_id, CtorKind::Fictive));
      .                                       let ctor_res =
      .                                           Res::Def(DefKind::Ctor(CtorOf::Variant, ctor_kind), ctor_def_id);
      .                                       let mut vis = self.get_visibility(ctor_def_id.index);
      5 ( 0.00%)                              if ctor_def_id == def_id && vis.is_public() {
      .                                           // For non-exhaustive variants lower the constructor visibility to
      .                                           // within the crate. We only need this for fictive constructors,
      .                                           // for other constructors correct visibilities
      .                                           // were already encoded in metadata.
      .                                           let mut attrs = self.get_item_attrs(def_id.index, sess);
      .                                           if attrs.any(|item| item.has_name(sym::non_exhaustive)) {
      .                                               let crate_def_id = self.local_def_id(CRATE_DEF_INDEX);
      .                                               vis = ty::Visibility::Restricted(crate_def_id);
-- line 1141 ----------------------------------------
-- line 1144 ----------------------------------------
      .                                       callback(ModChild { ident, res: ctor_res, vis, span });
      .                                   }
      .                                   _ => {}
      .                               }
      .                           }
      .                       }
      .                   }
      .           
    526 ( 0.00%)          match self.kind(id) {
     42 ( 0.00%)              EntryKind::Mod(exports) => {
  1,076 ( 0.00%)                  for exp in exports.decode((self, sess)) {
      .                               callback(exp);
      .                           }
      .                       }
      .                       EntryKind::Enum(..) | EntryKind::Trait(..) => {}
      .                       _ => bug!("`for_each_module_child` is called on a non-module: {:?}", self.def_kind(id)),
      .                   }
      .               }
      .           
      .               fn is_ctfe_mir_available(self, id: DefIndex) -> bool {
     12 ( 0.00%)          self.root.tables.mir_for_ctfe.get(self, id).is_some()
      .               }
      .           
      .               fn is_item_mir_available(self, id: DefIndex) -> bool {
      .                   self.root.tables.mir.get(self, id).is_some()
      .               }
      .           
      .               fn module_expansion(self, id: DefIndex, sess: &Session) -> ExpnId {
  2,170 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::Mod(_) | EntryKind::Enum(_) | EntryKind::Trait(_) => {
      .                           self.get_expn_that_defined(id, sess)
      .                       }
      .                       _ => panic!("Expected module, found {:?}", self.local_def_id(id)),
      .                   }
      .               }
      .           
      .               fn get_optimized_mir(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
-- line 1180 ----------------------------------------
-- line 1184 ----------------------------------------
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_optimized_mir: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_mir_for_ctfe(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
     15 ( 0.00%)          self.root
      .                       .tables
      .                       .mir_for_ctfe
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_mir_for_ctfe: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
-- line 1200 ----------------------------------------
-- line 1227 ----------------------------------------
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_promoted_mir: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn mir_const_qualif(self, id: DefIndex) -> mir::ConstQualifs {
      8 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::AnonConst(qualif, _)
      .                       | EntryKind::Const(qualif, _)
      .                       | EntryKind::AssocConst(
      .                           AssocContainer::ImplDefault
      .                           | AssocContainer::ImplFinal
      .                           | AssocContainer::TraitWithDefault,
      .                           qualif,
      .                           _,
      .                       ) => qualif,
      .                       _ => bug!("mir_const_qualif: unexpected kind"),
      .                   }
      .               }
      .           
      .               fn get_fn_has_self_parameter(self, id: DefIndex) -> bool {
    595 ( 0.00%)          match self.kind(id) {
    476 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).has_self,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn get_associated_item_def_ids(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [DefId] {
    532 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
    228 ( 0.00%)              tcx.arena.alloc_from_iter(
     76 ( 0.00%)                  children.decode((self, tcx.sess)).map(|child_index| self.local_def_id(child_index)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
      .               }
      .           
  3,852 ( 0.00%)      fn get_associated_item(self, id: DefIndex, sess: &Session) -> ty::AssocItem {
  2,247 ( 0.00%)          let def_key = self.def_key(id);
      .                   let parent = self.local_def_id(def_key.parent.unwrap());
      .                   let ident = self.item_ident(id, sess);
      .           
  2,263 ( 0.00%)          let (kind, container, has_self) = match self.kind(id) {
      .                       EntryKind::AssocConst(container, _, _) => (ty::AssocKind::Const, container, false),
    313 ( 0.00%)              EntryKind::AssocFn(data) => {
      .                           let data = data.decode(self);
  2,191 ( 0.00%)                  (ty::AssocKind::Fn, data.container, data.has_self)
      .                       }
     16 ( 0.00%)              EntryKind::AssocType(container) => (ty::AssocKind::Type, container, false),
      .                       _ => bug!("cannot get associated-item of `{:?}`", def_key),
      .                   };
      .           
  5,778 ( 0.00%)          ty::AssocItem {
      .                       name: ident.name,
      .                       kind,
      .                       vis: self.get_visibility(id),
      .                       defaultness: container.defaultness(),
      .                       def_id: self.local_def_id(id),
      .                       trait_item_def_id: self.get_trait_item_def_id(id),
      .                       container: container.with_def_id(parent),
      .                       fn_has_self_parameter: has_self,
      .                   }
  2,889 ( 0.00%)      }
      .           
      .               fn get_item_variances(self, id: DefIndex) -> impl Iterator<Item = ty::Variance> + 'a {
    120 ( 0.00%)          self.root.tables.variances.get(self, id).unwrap_or_else(Lazy::empty).decode(self)
      .               }
      .           
      .               fn get_ctor_def_id_and_kind(self, node_id: DefIndex) -> Option<(DefId, CtorKind)> {
  1,253 ( 0.00%)          match self.kind(node_id) {
      .                       EntryKind::Struct(data, _) | EntryKind::Variant(data) => {
    542 ( 0.00%)                  let vdata = data.decode(self);
    260 ( 0.00%)                  vdata.ctor.map(|index| (self.local_def_id(index), vdata.ctor_kind))
      .                       }
      .                       _ => None,
      .                   }
    600 ( 0.00%)      }
      .           
    168 ( 0.00%)      fn get_item_attrs(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = ast::Attribute> + 'a {
    624 ( 0.00%)          self.root
      .                       .tables
      .                       .attributes
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           // Structure and variant constructors don't have any attributes encoded for them,
      .                           // but we assume that someone passing a constructor ID actually wants to look at
      .                           // the attributes on the corresponding struct or variant.
      .                           let def_key = self.def_key(id);
-- line 1320 ----------------------------------------
-- line 1322 ----------------------------------------
      .                           let parent_id = def_key.parent.expect("no parent for a constructor");
      .                           self.root
      .                               .tables
      .                               .attributes
      .                               .get(self, parent_id)
      .                               .expect("no encoded attributes for a structure or variant")
      .                       })
      .                       .decode((self, sess))
    126 ( 0.00%)      }
      .           
      .               fn get_struct_field_names(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = Spanned<Symbol>> + 'a {
    570 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
  1,840 ( 0.00%)              .map(move |index| respan(self.get_span(index, sess), self.item_ident(index, sess).name))
      .               }
      .           
      .               fn get_struct_field_visibilities(self, id: DefIndex) -> impl Iterator<Item = Visibility> + 'a {
     70 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
     18 ( 0.00%)              .map(move |field_index| self.get_visibility(field_index))
      .               }
      .           
      .               fn get_inherent_implementations_for_type(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> &'tcx [DefId] {
     52 ( 0.00%)          tcx.arena.alloc_from_iter(
     65 ( 0.00%)              self.root
      .                           .tables
      .                           .inherent_impls
      .                           .get(self, id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
    358 ( 0.00%)                  .map(|index| self.local_def_id(index)),
      .                   )
      .               }
      .           
      .               fn get_traits(self) -> impl Iterator<Item = DefId> + 'a {
      .                   self.root.traits.decode(self).map(move |index| self.local_def_id(index))
      .               }
      .           
      .               fn get_trait_impls(self) -> impl Iterator<Item = (DefId, DefId, Option<SimplifiedType>)> + 'a {
-- line 1376 ----------------------------------------
-- line 1380 ----------------------------------------
      .                           index: *trait_index,
      .                       };
      .                       impls.decode(self).map(move |(impl_index, simplified_self_ty)| {
      .                           (trait_def_id, self.local_def_id(impl_index), simplified_self_ty)
      .                       })
      .                   })
      .               }
      .           
  8,370 ( 0.00%)      fn get_implementations_of_trait(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_def_id: DefId,
      .               ) -> &'tcx [(DefId, Option<SimplifiedType>)] {
    930 ( 0.00%)          if self.trait_impls.is_empty() {
      .                       return &[];
      .                   }
      .           
      .                   // Do a reverse lookup beforehand to avoid touching the crate_num
      .                   // hash map in the loop below.
  1,504 ( 0.00%)          let key = match self.reverse_translate_def_id(trait_def_id) {
      .                       Some(def_id) => (def_id.krate.as_u32(), def_id.index),
      .                       None => return &[],
      .                   };
      .           
      .                   if let Some(impls) = self.trait_impls.get(&key) {
  1,012 ( 0.00%)              tcx.arena.alloc_from_iter(
    506 ( 0.00%)                  impls
      .                               .decode(self)
  9,793 ( 0.00%)                      .map(|(idx, simplified_self_ty)| (self.local_def_id(idx), simplified_self_ty)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
  7,440 ( 0.00%)      }
      .           
      .               fn get_trait_of_item(self, id: DefIndex) -> Option<DefId> {
    152 ( 0.00%)          let def_key = self.def_key(id);
    190 ( 0.00%)          match def_key.disambiguated_data.data {
      .                       DefPathData::TypeNs(..) | DefPathData::ValueNs(..) => (),
      .                       // Not an associated item
      .                       _ => return None,
      .                   }
    342 ( 0.00%)          def_key.parent.and_then(|parent_index| match self.kind(parent_index) {
      .                       EntryKind::Trait(_) | EntryKind::TraitAlias => Some(self.local_def_id(parent_index)),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               fn get_native_libraries(self, sess: &'a Session) -> impl Iterator<Item = NativeLib> + 'a {
     60 ( 0.00%)          self.root.native_libraries.decode((self, sess))
      .               }
      .           
      .               fn get_proc_macro_quoted_span(self, index: usize, sess: &Session) -> Span {
      .                   self.root
      .                       .tables
      .                       .proc_macro_quoted_spans
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing proc macro quoted span: {:?}", index))
-- line 1437 ----------------------------------------
-- line 1450 ----------------------------------------
      .                       self.root.dylib_dependency_formats.decode(self).enumerate().flat_map(|(i, link)| {
      .                           let cnum = CrateNum::new(i + 1);
      .                           link.map(|link| (self.cnum_map[cnum], link))
      .                       }),
      .                   )
      .               }
      .           
      .               fn get_missing_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [lang_items::LangItem] {
    150 ( 0.00%)          tcx.arena.alloc_from_iter(self.root.lang_items_missing.decode(self))
      .               }
      .           
      .               fn get_fn_param_names(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [Ident] {
      .                   let param_names = match self.kind(id) {
      .                       EntryKind::Fn(data) | EntryKind::ForeignFn(data) => data.decode(self).param_names,
      .                       EntryKind::AssocFn(data) => data.decode(self).fn_data.param_names,
      .                       _ => Lazy::empty(),
      .                   };
-- line 1466 ----------------------------------------
-- line 1479 ----------------------------------------
      .                       EntryKind::AnonConst(_, data)
      .                       | EntryKind::Const(_, data)
      .                       | EntryKind::AssocConst(_, _, data) => data.decode(self).0,
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_macro(self, id: DefIndex, sess: &Session) -> MacroDef {
     72 ( 0.00%)          match self.kind(id) {
     12 ( 0.00%)              EntryKind::MacroDef(macro_def) => macro_def.decode((self, sess)),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               // This replicates some of the logic of the crate-local `is_const_fn_raw` query, because we
      .               // don't serialize constness for tuple variant and tuple struct constructors.
      .               fn is_const_fn_raw(self, id: DefIndex) -> bool {
     90 ( 0.00%)          let constness = match self.kind(id) {
     20 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).fn_data.constness,
      .                       EntryKind::Fn(data) => data.decode(self).constness,
      .                       EntryKind::ForeignFn(data) => data.decode(self).constness,
      .                       EntryKind::Variant(..) | EntryKind::Struct(..) => hir::Constness::Const,
      .                       _ => hir::Constness::NotConst,
      .                   };
      .                   constness == hir::Constness::Const
      .               }
      .           
-- line 1505 ----------------------------------------
-- line 1517 ----------------------------------------
      .                       EntryKind::ForeignImmStatic | EntryKind::ForeignMutStatic | EntryKind::ForeignFn(_) => {
      .                           true
      .                       }
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn static_mutability(self, id: DefIndex) -> Option<hir::Mutability> {
     11 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::ImmStatic | EntryKind::ForeignImmStatic => Some(hir::Mutability::Not),
      .                       EntryKind::MutStatic | EntryKind::ForeignMutStatic => Some(hir::Mutability::Mut),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               fn generator_kind(self, id: DefIndex) -> Option<hir::GeneratorKind> {
      .                   match self.kind(id) {
      .                       EntryKind::Generator(data) => Some(data),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               fn fn_sig(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {
    265 ( 0.00%)          self.root.tables.fn_sig.get(self, id).unwrap().decode((self, tcx))
      .               }
      .           
      .               #[inline]
 20,027 ( 0.01%)      fn def_key(self, index: DefIndex) -> DefKey {
  5,722 ( 0.00%)          *self
      .                       .def_key_cache
      .                       .lock()
      .                       .entry(index)
  8,405 ( 0.00%)              .or_insert_with(|| self.root.tables.def_keys.get(self, index).unwrap().decode(self))
 22,888 ( 0.01%)      }
      .           
      .               // Returns the path leading to the thing with this `id`.
      .               fn def_path(self, id: DefIndex) -> DefPath {
      .                   debug!("def_path(cnum={:?}, id={:?})", self.cnum, id);
      .                   DefPath::make(self.cnum, id, |parent| self.def_key(parent))
      .               }
      .           
      .               fn def_path_hash_unlocked(
      .                   self,
      .                   index: DefIndex,
      .                   def_path_hashes: &mut FxHashMap<DefIndex, DefPathHash>,
      .               ) -> DefPathHash {
  3,992 ( 0.00%)          *def_path_hashes.entry(index).or_insert_with(|| {
    520 ( 0.00%)              self.root.tables.def_path_hashes.get(self, index).unwrap().decode(self)
      .                   })
      .               }
      .           
      .               #[inline]
 13,972 ( 0.00%)      fn def_path_hash(self, index: DefIndex) -> DefPathHash {
      .                   let mut def_path_hashes = self.def_path_hash_cache.lock();
      .                   self.def_path_hash_unlocked(index, &mut def_path_hashes)
 15,968 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn def_path_hash_to_def_index(self, hash: DefPathHash) -> DefIndex {
      .                   self.def_path_hash_map.def_path_hash_to_def_index(&hash)
      .               }
      .           
      .               fn expn_hash_to_expn_id(self, sess: &Session, index_guess: u32, hash: ExpnHash) -> ExpnId {
      .                   debug_assert_eq!(ExpnId::from_hash(hash), None);
-- line 1580 ----------------------------------------
-- line 1635 ----------------------------------------
      .               /// Proc macro crates don't currently export spans, so this function does not have
      .               /// to work for them.
      .               fn imported_source_files(self, sess: &Session) -> &'a [ImportedSourceFile] {
      .                   // Translate the virtual `/rustc/$hash` prefix back to a real directory
      .                   // that should hold actual sources, where possible.
      .                   //
      .                   // NOTE: if you update this, you might need to also update bootstrap's code for generating
      .                   // the `rust-src` component in `Src::run` in `src/bootstrap/dist.rs`.
 16,770 ( 0.00%)          let virtual_rust_source_base_dir = option_env!("CFG_VIRTUAL_RUST_SOURCE_BASE_DIR")
      .                       .map(Path::new)
      .                       .filter(|_| {
      .                           // Only spend time on further checks if we have what to translate *to*.
      .                           sess.opts.real_rust_source_base_dir.is_some()
      .                       })
      .                       .filter(|virtual_dir| {
      .                           // Don't translate away `/rustc/$hash` if we're still remapping to it,
      .                           // since that means we're still building `std`/`rustc` that need it,
      .                           // and we don't want the real path to leak into codegen/debuginfo.
      .                           !sess.opts.remap_path_prefix.iter().any(|(_from, to)| to == virtual_dir)
      .                       });
 16,770 ( 0.00%)          let try_to_translate_virtual_to_real = |name: &mut rustc_span::FileName| {
      .                       debug!(
      .                           "try_to_translate_virtual_to_real(name={:?}): \
      .                            virtual_rust_source_base_dir={:?}, real_rust_source_base_dir={:?}",
      .                           name, virtual_rust_source_base_dir, sess.opts.real_rust_source_base_dir,
      .                       );
      .           
  2,715 ( 0.00%)              if let Some(virtual_dir) = virtual_rust_source_base_dir {
      .                           if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                               if let rustc_span::FileName::Real(old_name) = name {
      .                                   if let rustc_span::RealFileName::Remapped { local_path: _, virtual_name } =
      .                                       old_name
      .                                   {
      .                                       if let Ok(rest) = virtual_name.strip_prefix(virtual_dir) {
      .                                           let virtual_name = virtual_name.clone();
      .           
-- line 1670 ----------------------------------------
-- line 1709 ----------------------------------------
      .                                           *old_name = new_name;
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   };
      .           
 16,754 ( 0.00%)          self.cdata.source_map_import_info.get_or_init(|| {
     30 ( 0.00%)              let external_source_map = self.root.source_map.decode(self);
      .           
      .                       external_source_map
      .                           .map(|source_file_to_import| {
      .                               // We can't reuse an existing SourceFile, so allocate a new one
      .                               // containing the information we need.
      .                               let rustc_span::SourceFile {
 11,403 ( 0.00%)                          mut name,
  3,258 ( 0.00%)                          src_hash,
    543 ( 0.00%)                          start_pos,
  1,086 ( 0.00%)                          end_pos,
  2,715 ( 0.00%)                          mut lines,
  2,715 ( 0.00%)                          mut multibyte_chars,
  3,258 ( 0.00%)                          mut non_narrow_chars,
  2,715 ( 0.00%)                          mut normalized_pos,
  3,258 ( 0.00%)                          name_hash,
      .                                   ..
      .                               } = source_file_to_import;
      .           
      .                               // If this file is under $sysroot/lib/rustlib/src/ but has not been remapped
      .                               // during rust bootstrapping by `remap-debuginfo = true`, and the user
      .                               // wish to simulate that behaviour by -Z simulate-remapped-rust-src-base,
      .                               // then we change `name` to a similar state as if the rust was bootstrapped
      .                               // with `remap-debuginfo = true`.
      .                               // This is useful for testing so that tests about the effects of
      .                               // `try_to_translate_virtual_to_real` don't have to worry about how the
      .                               // compiler is bootstrapped.
  1,086 ( 0.00%)                      if let Some(virtual_dir) =
      .                                   &sess.opts.debugging_opts.simulate_remapped_rust_src_base
      .                               {
      .                                   if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                                       if let rustc_span::FileName::Real(ref mut old_name) = name {
      .                                           if let rustc_span::RealFileName::LocalPath(local) = old_name {
      .                                               if let Ok(rest) = local.strip_prefix(real_dir) {
      .                                                   *old_name = rustc_span::RealFileName::Remapped {
      .                                                       local_path: None,
-- line 1753 ----------------------------------------
-- line 1767 ----------------------------------------
      .                               let source_length = (end_pos - start_pos).to_usize();
      .           
      .                               // Translate line-start positions and multibyte character
      .                               // position into frame of reference local to file.
      .                               // `SourceMap::new_imported_source_file()` will then translate those
      .                               // coordinates to their new global frame of reference when the
      .                               // offset of the SourceFile is known.
      .                               for pos in &mut lines {
714,332 ( 0.18%)                          *pos = *pos - start_pos;
      .                               }
      .                               for mbc in &mut multibyte_chars {
  1,594 ( 0.00%)                          mbc.pos = mbc.pos - start_pos;
      .                               }
      .                               for swc in &mut non_narrow_chars {
    924 ( 0.00%)                          *swc = *swc - start_pos;
      .                               }
      .                               for np in &mut normalized_pos {
      .                                   np.pos = np.pos - start_pos;
      .                               }
      .           
  9,774 ( 0.00%)                      let local_version = sess.source_map().new_imported_source_file(
  7,059 ( 0.00%)                          name,
  3,801 ( 0.00%)                          src_hash,
      .                                   name_hash,
      .                                   source_length,
  1,086 ( 0.00%)                          self.cnum,
  2,715 ( 0.00%)                          lines,
  3,258 ( 0.00%)                          multibyte_chars,
  2,715 ( 0.00%)                          non_narrow_chars,
  2,172 ( 0.00%)                          normalized_pos,
      .                                   start_pos,
      .                                   end_pos,
      .                               );
      .                               debug!(
      .                                   "CrateMetaData::imported_source_files alloc \
      .                                    source_file {:?} original (start_pos {:?} end_pos {:?}) \
      .                                    translated (start_pos {:?} end_pos {:?})",
      .                                   local_version.name,
-- line 1804 ----------------------------------------
-- line 1808 ----------------------------------------
      .                                   local_version.end_pos
      .                               );
      .           
      .                               ImportedSourceFile {
      .                                   original_start_pos: start_pos,
      .                                   original_end_pos: end_pos,
      .                                   translated_source_file: local_version,
      .                               }
  1,629 ( 0.00%)                  })
      .                           .collect()
      .                   })
      .               }
      .           }
      .           
      .           impl CrateMetadata {
    360 ( 0.00%)      crate fn new(
      .                   sess: &Session,
      .                   blob: MetadataBlob,
      .                   root: CrateRoot<'static>,
      .                   raw_proc_macros: Option<&'static [ProcMacro]>,
      .                   cnum: CrateNum,
      .                   cnum_map: CrateNumMap,
      .                   dep_kind: CrateDepKind,
      .                   source: CrateSource,
      .                   private_dep: bool,
      .                   host_hash: Option<Svh>,
      .               ) -> CrateMetadata {
     90 ( 0.00%)          let trait_impls = root
      .                       .impls
      .                       .decode((&blob, sess))
      .                       .map(|trait_impls| (trait_impls.trait_id, trait_impls.impls))
      .                       .collect();
      .                   let alloc_decoding_state =
     90 ( 0.00%)              AllocDecodingState::new(root.interpret_alloc_index.decode(&blob).collect());
      .                   let dependencies = Lock::new(cnum_map.iter().cloned().collect());
      .           
      .                   // Pre-decode the DefPathHash->DefIndex table. This is a cheap operation
      .                   // that does not copy any data. It just does some data verification.
     30 ( 0.00%)          let def_path_hash_map = root.def_path_hash_map.decode(&blob);
      .           
    690 ( 0.00%)          CrateMetadata {
     30 ( 0.00%)              blob,
     90 ( 0.00%)              root,
    120 ( 0.00%)              trait_impls,
      .                       raw_proc_macros,
      .                       source_map_import_info: OnceCell::new(),
    120 ( 0.00%)              def_path_hash_map,
      .                       expn_hash_map: Default::default(),
    210 ( 0.00%)              alloc_decoding_state,
      .                       cnum,
    120 ( 0.00%)              cnum_map,
    150 ( 0.00%)              dependencies,
      .                       dep_kind: Lock::new(dep_kind),
    360 ( 0.00%)              source,
      .                       private_dep,
      .                       host_hash,
      .                       extern_crate: Lock::new(None),
      .                       hygiene_context: Default::default(),
      .                       def_key_cache: Default::default(),
      .                       def_path_hash_cache: Default::default(),
      .                   }
    270 ( 0.00%)      }
      .           
      .               crate fn dependencies(&self) -> LockGuard<'_, Vec<CrateNum>> {
      .                   self.dependencies.borrow()
      .               }
      .           
      .               crate fn add_dependency(&self, cnum: CrateNum) {
      .                   self.dependencies.borrow_mut().push(cnum);
      .               }
      .           
      .               crate fn update_extern_crate(&self, new_extern_crate: ExternCrate) -> bool {
      .                   let mut extern_crate = self.extern_crate.borrow_mut();
      .                   let update = Some(new_extern_crate.rank()) > extern_crate.as_ref().map(ExternCrate::rank);
      .                   if update {
    155 ( 0.00%)              *extern_crate = Some(new_extern_crate);
      .                   }
      .                   update
      .               }
      .           
      .               crate fn source(&self) -> &CrateSource {
      8 ( 0.00%)          &self.source
      .               }
      .           
      .               crate fn dep_kind(&self) -> CrateDepKind {
      .                   *self.dep_kind.lock()
      .               }
      .           
      .               crate fn update_dep_kind(&self, f: impl FnOnce(CrateDepKind) -> CrateDepKind) {
    123 ( 0.00%)          self.dep_kind.with_lock(|dep_kind| *dep_kind = f(*dep_kind))
      .               }
      .           
      .               crate fn panic_strategy(&self) -> PanicStrategy {
      .                   self.root.panic_strategy
      .               }
      .           
      .               crate fn needs_panic_runtime(&self) -> bool {
      .                   self.root.needs_panic_runtime
-- line 1905 ----------------------------------------
-- line 1909 ----------------------------------------
      .                   self.root.panic_runtime
      .               }
      .           
      .               crate fn is_profiler_runtime(&self) -> bool {
      .                   self.root.profiler_runtime
      .               }
      .           
      .               crate fn needs_allocator(&self) -> bool {
      5 ( 0.00%)          self.root.needs_allocator
      .               }
      .           
      .               crate fn has_global_allocator(&self) -> bool {
      .                   self.root.has_global_allocator
      .               }
      .           
      .               crate fn has_default_lib_allocator(&self) -> bool {
      .                   self.root.has_default_lib_allocator
      .               }
      .           
      .               crate fn is_proc_macro_crate(&self) -> bool {
      .                   self.root.is_proc_macro_crate()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
     43 ( 0.00%)          self.root.name
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
      .                   self.root.stable_crate_id
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
      .                   self.root.hash
      .               }
      .           
      .               fn num_def_ids(&self) -> usize {
      .                   self.root.tables.def_keys.size()
      .               }
      .           
      .               fn local_def_id(&self, index: DefIndex) -> DefId {
 14,155 ( 0.00%)          DefId { krate: self.cnum, index }
      .               }
      .           
      .               // Translate a DefId from the current compilation environment to a DefId
      .               // for an external crate.
      .               fn reverse_translate_def_id(&self, did: DefId) -> Option<DefId> {
      .                   for (local, &global) in self.cnum_map.iter_enumerated() {
  3,085 ( 0.00%)              if global == did.krate {
      .                           return Some(DefId { krate: local, index: did.index });
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .           }
      .           
      .           // Cannot be implemented on 'ProcMacro', as libproc_macro
      .           // does not depend on librustc_ast
      .           fn macro_kind(raw: &ProcMacro) -> MacroKind {
      3 ( 0.00%)      match raw {
      .                   ProcMacro::CustomDerive { .. } => MacroKind::Derive,
      .                   ProcMacro::Attr { .. } => MacroKind::Attr,
      .                   ProcMacro::Bang { .. } => MacroKind::Bang,
      .               }
      .           }

343,844 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 38 ----------------------------------------
      .           #[derive(Debug)]
      .           pub struct Token {
      .               pub kind: TokenKind,
      .               pub len: usize,
      .           }
      .           
      .           impl Token {
      .               fn new(kind: TokenKind, len: usize) -> Token {
 95,814 ( 0.02%)          Token { kind, len }
      .               }
      .           }
      .           
      .           /// Enum representing common lexeme types.
      .           // perf note: Changing all `usize` to `u32` doesn't change performance. See #77629
 26,610 ( 0.01%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
      .           pub enum TokenKind {
      .               // Multi-char tokens:
      .               /// "// comment"
      .               LineComment { doc_style: Option<DocStyle> },
      .               /// `/* block comment */`
      .               ///
      .               /// Block comments can be recursive, so the sequence like `/* /* */`
      .               /// will not be considered terminated and will result in a parsing error.
-- line 60 ----------------------------------------
-- line 192 ----------------------------------------
      .               /// Literal starts with "0x".
      .               Hexadecimal,
      .               /// Literal doesn't contain a prefix.
      .               Decimal,
      .           }
      .           
      .           /// `rustc` allows files to have a shebang, e.g. "#!/usr/bin/rustrun",
      .           /// but shebang isn't a part of rust syntax.
    126 ( 0.00%)  pub fn strip_shebang(input: &str) -> Option<usize> {
      .               // Shebang must start with `#!` literally, without any preceding whitespace.
      .               // For simplicity we consider any line starting with `#!` a shebang,
      .               // regardless of restrictions put on shebangs by specific platforms.
      .               if let Some(input_tail) = input.strip_prefix("#!") {
      .                   // Ok, this is a shebang but if the next non-whitespace token is `[`,
      .                   // then it may be valid Rust code, so consider it Rust code.
      .                   let next_non_whitespace_token = tokenize(input_tail).map(|tok| tok.kind).find(|tok| {
      .                       !matches!(
-- line 208 ----------------------------------------
-- line 213 ----------------------------------------
      .                       )
      .                   });
      .                   if next_non_whitespace_token != Some(TokenKind::OpenBracket) {
      .                       // No other choice than to consider this a shebang.
      .                       return Some(2 + input_tail.lines().next().unwrap_or_default().len());
      .                   }
      .               }
      .               None
    144 ( 0.00%)  }
      .           
      .           /// Parses the first token from the provided input string.
 31,938 ( 0.01%)  pub fn first_token(input: &str) -> Token {
      .               debug_assert!(!input.is_empty());
 10,646 ( 0.00%)      Cursor::new(input).advance_token()
 42,584 ( 0.01%)  }
      .           
      .           /// Creates an iterator that produces tokens from the input string.
      .           pub fn tokenize(input: &str) -> impl Iterator<Item = Token> + '_ {
      .               let mut cursor = Cursor::new(input);
      .               std::iter::from_fn(move || {
      .                   if cursor.is_eof() {
      .                       None
      .                   } else {
-- line 235 ----------------------------------------
-- line 243 ----------------------------------------
      .           /// See [Rust language reference](https://doc.rust-lang.org/reference/whitespace.html)
      .           /// for definitions of these classes.
      .           pub fn is_whitespace(c: char) -> bool {
      .               // This is Pattern_White_Space.
      .               //
      .               // Note that this set is stable (ie, it doesn't change with different
      .               // Unicode versions), so it's ok to just hard-code the values.
      .           
 26,896 ( 0.01%)      matches!(
      .                   c,
      .                   // Usual ASCII suspects
      .                   '\u{0009}'   // \t
      .                   | '\u{000A}' // \n
      .                   | '\u{000B}' // vertical tab
      .                   | '\u{000C}' // form feed
      .                   | '\u{000D}' // \r
      .                   | '\u{0020}' // space
-- line 259 ----------------------------------------
-- line 269 ----------------------------------------
      .                   | '\u{2028}' // LINE SEPARATOR
      .                   | '\u{2029}' // PARAGRAPH SEPARATOR
      .               )
      .           }
      .           
      .           /// True if `c` is valid as a first character of an identifier.
      .           /// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for
      .           /// a formal definition of valid identifier name.
     12 ( 0.00%)  pub fn is_id_start(c: char) -> bool {
      .               // This is XID_Start OR '_' (which formally is not a XID_Start).
    250 ( 0.00%)      c == '_' || unicode_xid::UnicodeXID::is_xid_start(c)
     12 ( 0.00%)  }
      .           
      .           /// True if `c` is valid as a non-first character of an identifier.
      .           /// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for
      .           /// a formal definition of valid identifier name.
      .           pub fn is_id_continue(c: char) -> bool {
      .               unicode_xid::UnicodeXID::is_xid_continue(c)
      .           }
      .           
-- line 288 ----------------------------------------
-- line 293 ----------------------------------------
      .                   is_id_start(start) && chars.all(is_id_continue)
      .               } else {
      .                   false
      .               }
      .           }
      .           
      .           impl Cursor<'_> {
      .               /// Parses a token from the input string.
 85,168 ( 0.02%)      fn advance_token(&mut self) -> Token {
      .                   let first_char = self.bump().unwrap();
 37,763 ( 0.01%)          let token_kind = match first_char {
      .                       // Slash, comment or block comment.
  2,116 ( 0.00%)              '/' => match self.first() {
      .                           '/' => self.line_comment(),
      .                           '*' => self.block_comment(),
      .                           _ => Slash,
      .                       },
      .           
      .                       // Whitespace sequence.
      .                       c if is_whitespace(c) => self.whitespace(),
      .           
      .                       // Raw identifier, raw string literal or identifier.
    136 ( 0.00%)              'r' => match (self.first(), self.second()) {
      .                           ('#', c1) if is_id_start(c1) => self.raw_ident(),
      .                           ('#', _) | ('"', _) => {
      .                               let (n_hashes, err) = self.raw_double_quoted_string(1);
      .                               let suffix_start = self.len_consumed();
      .                               if err.is_none() {
      .                                   self.eat_literal_suffix();
      .                               }
      .                               let kind = RawStr { n_hashes, err };
      .                               Literal { kind, suffix_start }
      .                           }
      .                           _ => self.ident_or_unknown_prefix(),
      .                       },
      .           
      .                       // Byte literal, byte string literal, raw byte string literal or identifier.
    594 ( 0.00%)              'b' => match (self.first(), self.second()) {
      .                           ('\'', _) => {
      .                               self.bump();
      .                               let terminated = self.single_quoted_string();
      .                               let suffix_start = self.len_consumed();
      .                               if terminated {
      .                                   self.eat_literal_suffix();
      .                               }
      .                               let kind = Byte { terminated };
-- line 338 ----------------------------------------
-- line 361 ----------------------------------------
      .                           _ => self.ident_or_unknown_prefix(),
      .                       },
      .           
      .                       // Identifier (this should be checked after other variant that can
      .                       // start as identifier).
      .                       c if is_id_start(c) => self.ident_or_unknown_prefix(),
      .           
      .                       // Numeric literal.
 12,258 ( 0.00%)              c @ '0'..='9' => {
      .                           let literal_kind = self.number(c);
      .                           let suffix_start = self.len_consumed();
      .                           self.eat_literal_suffix();
     25 ( 0.00%)                  TokenKind::Literal { kind: literal_kind, suffix_start }
      .                       }
      .           
      .                       // One-symbol tokens.
    288 ( 0.00%)              ';' => Semi,
    430 ( 0.00%)              ',' => Comma,
    302 ( 0.00%)              '.' => Dot,
    950 ( 0.00%)              '(' => OpenParen,
    950 ( 0.00%)              ')' => CloseParen,
    592 ( 0.00%)              '{' => OpenBrace,
    592 ( 0.00%)              '}' => CloseBrace,
    104 ( 0.00%)              '[' => OpenBracket,
    104 ( 0.00%)              ']' => CloseBracket,
      .                       '@' => At,
    104 ( 0.00%)              '#' => Pound,
      .                       '~' => Tilde,
      2 ( 0.00%)              '?' => Question,
  1,152 ( 0.00%)              ':' => Colon,
    112 ( 0.00%)              '$' => Dollar,
    252 ( 0.00%)              '=' => Eq,
    136 ( 0.00%)              '!' => Bang,
    334 ( 0.00%)              '<' => Lt,
    646 ( 0.00%)              '>' => Gt,
    230 ( 0.00%)              '-' => Minus,
    316 ( 0.00%)              '&' => And,
     52 ( 0.00%)              '|' => Or,
    210 ( 0.00%)              '+' => Plus,
     78 ( 0.00%)              '*' => Star,
      .                       '^' => Caret,
      .                       '%' => Percent,
      .           
      .                       // Lifetime or character literal.
    117 ( 0.00%)              '\'' => self.lifetime_or_char(),
      .           
      .                       // String literal.
      .                       '"' => {
    222 ( 0.00%)                  let terminated = self.double_quoted_string();
      .                           let suffix_start = self.len_consumed();
    148 ( 0.00%)                  if terminated {
      .                               self.eat_literal_suffix();
      .                           }
      .                           let kind = Str { terminated };
    148 ( 0.00%)                  Literal { kind, suffix_start }
      .                       }
      .                       // Identifier starting with an emoji. Only lexed for graceful error recovery.
      .                       c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {
      .                           self.fake_ident_or_unknown_prefix()
      .                       }
      .                       _ => Unknown,
      .                   };
      .                   Token::new(token_kind, self.len_consumed())
 95,814 ( 0.02%)      }
      .           
      .               fn line_comment(&mut self) -> TokenKind {
      .                   debug_assert!(self.prev() == '/' && self.first() == '/');
      .                   self.bump();
      .           
  1,110 ( 0.00%)          let doc_style = match self.first() {
      .                       // `//!` is an inner line doc comment.
      .                       '!' => Some(DocStyle::Inner),
      .                       // `////` (more than 3 slashes) is not considered a doc comment.
  1,509 ( 0.00%)              '/' if self.second() != '/' => Some(DocStyle::Outer),
      .                       _ => None,
      .                   };
      .           
 19,356 ( 0.00%)          self.eat_while(|c| c != '\n');
  1,587 ( 0.00%)          LineComment { doc_style }
      .               }
      .           
      .               fn block_comment(&mut self) -> TokenKind {
      .                   debug_assert!(self.prev() == '/' && self.first() == '*');
      .                   self.bump();
      .           
      .                   let doc_style = match self.first() {
      .                       // `/*!` is an inner block doc comment.
-- line 447 ----------------------------------------
-- line 474 ----------------------------------------
      .                   }
      .           
      .                   BlockComment { doc_style, terminated: depth == 0 }
      .               }
      .           
      .               fn whitespace(&mut self) -> TokenKind {
      .                   debug_assert!(is_whitespace(self.prev()));
      .                   self.eat_while(is_whitespace);
  3,370 ( 0.00%)          Whitespace
      .               }
      .           
      .               fn raw_ident(&mut self) -> TokenKind {
      .                   debug_assert!(self.prev() == 'r' && self.first() == '#' && is_id_start(self.second()));
      .                   // Eat "#" symbol.
      .                   self.bump();
      .                   // Eat the identifier part of RawIdent.
      .                   self.eat_identifier();
      .                   RawIdent
      .               }
      .           
 13,305 ( 0.00%)      fn ident_or_unknown_prefix(&mut self) -> TokenKind {
      .                   debug_assert!(is_id_start(self.prev()));
      .                   // Start is already eaten, eat the rest of identifier.
  5,322 ( 0.00%)          self.eat_while(is_id_continue);
      .                   // Known prefixes must have been handled earlier. So if
      .                   // we see a prefix here, it is definitely an unknown prefix.
  5,322 ( 0.00%)          match self.first() {
      .                       '#' | '"' | '\'' => UnknownPrefix,
  2,661 ( 0.00%)              c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {
      .                           self.fake_ident_or_unknown_prefix()
      .                       }
  2,661 ( 0.00%)              _ => Ident,
      .                   }
 10,644 ( 0.00%)      }
      .           
      .               fn fake_ident_or_unknown_prefix(&mut self) -> TokenKind {
      .                   // Start is already eaten, eat the rest of identifier.
      .                   self.eat_while(|c| {
      .                       unicode_xid::UnicodeXID::is_xid_continue(c)
      .                           || (!c.is_ascii() && unic_emoji_char::is_emoji(c))
      .                           || c == '\u{200d}'
      .                   });
-- line 515 ----------------------------------------
-- line 519 ----------------------------------------
      .                       '#' | '"' | '\'' => UnknownPrefix,
      .                       _ => InvalidIdent,
      .                   }
      .               }
      .           
      .               fn number(&mut self, first_digit: char) -> LiteralKind {
      .                   debug_assert!('0' <= self.prev() && self.prev() <= '9');
      .                   let mut base = Base::Decimal;
     10 ( 0.00%)          if first_digit == '0' {
      .                       // Attempt to parse encoding base.
     15 ( 0.00%)              let has_digits = match self.first() {
      .                           'b' => {
      .                               base = Base::Binary;
      .                               self.bump();
      .                               self.eat_decimal_digits()
      .                           }
      .                           'o' => {
      .                               base = Base::Octal;
      .                               self.bump();
-- line 537 ----------------------------------------
-- line 538 ----------------------------------------
      .                               self.eat_decimal_digits()
      .                           }
      .                           'x' => {
      .                               base = Base::Hexadecimal;
      .                               self.bump();
      .                               self.eat_hexadecimal_digits()
      .                           }
      .                           // Not a base prefix.
      9 ( 0.00%)                  '0'..='9' | '_' | '.' | 'e' | 'E' => {
      .                               self.eat_decimal_digits();
      .                               true
      .                           }
      .                           // Just a 0.
      .                           _ => return Int { base, empty_int: false },
      .                       };
      .                       // Base prefix was provided, but there were no digits
      .                       // after it, e.g. "0x".
-- line 554 ----------------------------------------
-- line 555 ----------------------------------------
      .                       if !has_digits {
      .                           return Int { base, empty_int: true };
      .                       }
      .                   } else {
      .                       // No base prefix, parse number in the usual way.
      .                       self.eat_decimal_digits();
      .                   };
      .           
     12 ( 0.00%)          match self.first() {
      .                       // Don't be greedy if this is actually an
      .                       // integer literal followed by field/method access or a range pattern
      .                       // (`0..2` and `12.foo()`)
      .                       '.' if self.second() != '.' && !is_id_start(self.second()) => {
      .                           // might have stuff after the ., and if it does, it needs to start
      .                           // with a number
      .                           self.bump();
      .                           let mut empty_exponent = false;
-- line 571 ----------------------------------------
-- line 585 ----------------------------------------
      .                           self.bump();
      .                           let empty_exponent = !self.eat_float_exponent();
      .                           Float { base, empty_exponent }
      .                       }
      .                       _ => Int { base, empty_int: false },
      .                   }
      .               }
      .           
    273 ( 0.00%)      fn lifetime_or_char(&mut self) -> TokenKind {
      .                   debug_assert!(self.prev() == '\'');
      .           
     78 ( 0.00%)          let can_be_a_lifetime = if self.second() == '\'' {
      .                       // It's surely not a lifetime.
      .                       false
      .                   } else {
      .                       // If the first symbol is valid for identifier, it can be a lifetime.
      .                       // Also check if it's a number for a better error reporting (so '0 will
      .                       // be reported as invalid lifetime and not as unterminated char literal).
      .                       is_id_start(self.first()) || self.first().is_digit(10)
      .                   };
-- line 604 ----------------------------------------
-- line 617 ----------------------------------------
      .                   // length greater than 1.
      .           
      .                   let starts_with_number = self.first().is_digit(10);
      .           
      .                   // Skip the literal contents.
      .                   // First symbol can be a number (which isn't a valid identifier start),
      .                   // so skip it without any checks.
      .                   self.bump();
     78 ( 0.00%)          self.eat_while(is_id_continue);
      .           
      .                   // Check if after skipping literal contents we've met a closing
      .                   // single quote (which means that user attempted to create a
      .                   // string with single quotes).
     78 ( 0.00%)          if self.first() == '\'' {
      .                       self.bump();
      .                       let kind = Char { terminated: true };
      .                       Literal { kind, suffix_start: self.len_consumed() }
      .                   } else {
     78 ( 0.00%)              Lifetime { starts_with_number }
      .                   }
    234 ( 0.00%)      }
      .           
      .               fn single_quoted_string(&mut self) -> bool {
      .                   debug_assert!(self.prev() == '\'');
      .                   // Check if it's a one-symbol literal.
      .                   if self.second() == '\'' && self.first() != '\\' {
      .                       self.bump();
      .                       self.bump();
      .                       return true;
-- line 645 ----------------------------------------
-- line 677 ----------------------------------------
      .                   false
      .               }
      .           
      .               /// Eats double-quoted string and returns true
      .               /// if string is terminated.
      .               fn double_quoted_string(&mut self) -> bool {
      .                   debug_assert!(self.prev() == '"');
      .                   while let Some(c) = self.bump() {
  3,580 ( 0.00%)              match c {
      .                           '"' => {
      .                               return true;
      .                           }
     16 ( 0.00%)                  '\\' if self.first() == '\\' || self.first() == '"' => {
      .                               // Bump again to skip escaped character.
      .                               self.bump();
      .                           }
      .                           _ => (),
      .                       }
      .                   }
      .                   // End of file reached.
      .                   false
     74 ( 0.00%)      }
      .           
      .               /// Eats the double-quoted string and returns `n_hashes` and an error if encountered.
      .               fn raw_double_quoted_string(&mut self, prefix_len: usize) -> (u16, Option<RawStrError>) {
      .                   // Wrap the actual function to handle the error with too many hashes.
      .                   // This way, it eats the whole raw string.
      .                   let (n_hashes, err) = self.raw_string_unvalidated(prefix_len);
      .                   // Only up to 65535 `#`s are allowed in raw strings
      .                   match u16::try_from(n_hashes) {
-- line 706 ----------------------------------------
-- line 773 ----------------------------------------
      .                           max_hashes = n_end_hashes;
      .                       }
      .                   }
      .               }
      .           
      .               fn eat_decimal_digits(&mut self) -> bool {
      .                   let mut has_digits = false;
      .                   loop {
      4 ( 0.00%)              match self.first() {
      .                           '_' => {
      .                               self.bump();
      .                           }
      6 ( 0.00%)                  '0'..='9' => {
      .                               has_digits = true;
      .                               self.bump();
      .                           }
      .                           _ => break,
      .                       }
      .                   }
      .                   has_digits
      4 ( 0.00%)      }
      .           
      .               fn eat_hexadecimal_digits(&mut self) -> bool {
      .                   let mut has_digits = false;
      .                   loop {
      .                       match self.first() {
      .                           '_' => {
      .                               self.bump();
      .                           }
-- line 801 ----------------------------------------
-- line 816 ----------------------------------------
      .                   if self.first() == '-' || self.first() == '+' {
      .                       self.bump();
      .                   }
      .                   self.eat_decimal_digits()
      .               }
      .           
      .               // Eats the suffix of the literal, e.g. "_u8".
      .               fn eat_literal_suffix(&mut self) {
    158 ( 0.00%)          self.eat_identifier();
      .               }
      .           
      .               // Eats the identifier.
    237 ( 0.00%)      fn eat_identifier(&mut self) {
      .                   if !is_id_start(self.first()) {
      .                       return;
      .                   }
      .                   self.bump();
      .           
      .                   self.eat_while(is_id_continue);
    316 ( 0.00%)      }
      .           }

151,825 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/sort.rs
--------------------------------------------------------------------------------
Ir               

-- line 45 ----------------------------------------
      .               //  2. They cannot overlap because we obtain pointers to difference indices of the slice.
      .               //     Namely, `i` and `i-1`.
      .               //  3. If the slice is properly aligned, the elements are properly aligned.
      .               //     It is the caller's responsibility to make sure the slice is properly aligned.
      .               //
      .               // See comments below for further detail.
      .               unsafe {
      .                   // If the first two elements are out-of-order...
     30 ( 0.00%)          if len >= 2 && is_less(v.get_unchecked(1), v.get_unchecked(0)) {
      .                       // Read the first element into a stack-allocated variable. If a following comparison
      .                       // operation panics, `hole` will get dropped and automatically write the element back
      .                       // into the slice.
      .                       let tmp = mem::ManuallyDrop::new(ptr::read(v.get_unchecked(0)));
      .                       let v = v.as_mut_ptr();
      .                       let mut hole = CopyOnDrop { src: &*tmp, dest: v.add(1) };
      .                       ptr::copy_nonoverlapping(v.add(1), v.add(0), 1);
      .           
      .                       for i in 2..len {
    123 ( 0.00%)                  if !is_less(&*v.add(i), &*tmp) {
      .                               break;
      .                           }
      .           
      .                           // Move `i`-th element one place to the left, thus shifting the hole to the right.
      .                           ptr::copy_nonoverlapping(v.add(i), v.add(i - 1), 1);
      .                           hole.dest = v.add(i);
      .                       }
      .                       // `hole` gets dropped and thus copies `tmp` into the remaining hole in `v`.
      .                   }
      .               }
      .           }
      .           
      .           /// Shifts the last element to the left until it encounters a smaller or equal element.
     47 ( 0.00%)  fn shift_tail<T, F>(v: &mut [T], is_less: &mut F)
      .           where
      .               F: FnMut(&T, &T) -> bool,
      .           {
      .               let len = v.len();
      .               // SAFETY: The unsafe operations below involves indexing without a bound check (by offsetting a
      .               // pointer) and copying memory (`ptr::copy_nonoverlapping`).
      .               //
      .               // a. Indexing:
-- line 85 ----------------------------------------
-- line 91 ----------------------------------------
      .               //  2. They cannot overlap because we obtain pointers to difference indices of the slice.
      .               //     Namely, `i` and `i+1`.
      .               //  3. If the slice is properly aligned, the elements are properly aligned.
      .               //     It is the caller's responsibility to make sure the slice is properly aligned.
      .               //
      .               // See comments below for further detail.
      .               unsafe {
      .                   // If the last two elements are out-of-order...
 33,482 ( 0.01%)          if len >= 2 && is_less(v.get_unchecked(len - 1), v.get_unchecked(len - 2)) {
      .                       // Read the last element into a stack-allocated variable. If a following comparison
      .                       // operation panics, `hole` will get dropped and automatically write the element back
      .                       // into the slice.
      .                       let tmp = mem::ManuallyDrop::new(ptr::read(v.get_unchecked(len - 1)));
      .                       let v = v.as_mut_ptr();
      .                       let mut hole = CopyOnDrop { src: &*tmp, dest: v.add(len - 2) };
      .                       ptr::copy_nonoverlapping(v.add(len - 2), v.add(len - 1), 1);
      .           
      .                       for i in (0..len - 2).rev() {
101,990 ( 0.03%)                  if !is_less(&*tmp, &*v.add(i)) {
      .                               break;
      .                           }
      .           
      .                           // Move `i`-th element one place to the right, thus shifting the hole to the left.
      .                           ptr::copy_nonoverlapping(v.add(i), v.add(i + 1), 1);
      .                           hole.dest = v.add(i);
      .                       }
      .                       // `hole` gets dropped and thus copies `tmp` into the remaining hole in `v`.
      .                   }
      .               }
     94 ( 0.00%)  }
      .           
      .           /// Partially sorts a slice by shifting several out-of-order elements around.
      .           ///
      .           /// Returns `true` if the slice is sorted at the end. This function is *O*(*n*) worst-case.
      .           #[cold]
    263 ( 0.00%)  fn partial_insertion_sort<T, F>(v: &mut [T], is_less: &mut F) -> bool
      .           where
      .               F: FnMut(&T, &T) -> bool,
      .           {
      .               // Maximum number of adjacent out-of-order pairs that will get shifted.
      .               const MAX_STEPS: usize = 5;
      .               // If the slice is shorter than this, don't shift any elements.
      .               const SHORTEST_SHIFTING: usize = 50;
      .           
-- line 134 ----------------------------------------
-- line 135 ----------------------------------------
      .               let len = v.len();
      .               let mut i = 1;
      .           
      .               for _ in 0..MAX_STEPS {
      .                   // SAFETY: We already explicitly did the bound checking with `i < len`.
      .                   // All our subsequent indexing is only in the range `0 <= index < len`
      .                   unsafe {
      .                       // Find the next pair of adjacent out-of-order elements.
    503 ( 0.00%)              while i < len && !is_less(v.get_unchecked(i), v.get_unchecked(i - 1)) {
     21 ( 0.00%)                  i += 1;
      .                       }
      .                   }
      .           
      .                   // Are we done?
     99 ( 0.00%)          if i == len {
      .                       return true;
      .                   }
      .           
      .                   // Don't shift elements on short arrays, that has a performance cost.
      .                   if len < SHORTEST_SHIFTING {
      .                       return false;
      .                   }
      .           
      .                   // Swap the found pair of elements. This puts them in correct order.
     15 ( 0.00%)          v.swap(i - 1, i);
      .           
      .                   // Shift the smaller element to the left.
      .                   shift_tail(&mut v[..i], is_less);
      .                   // Shift the greater element to the right.
      .                   shift_head(&mut v[i..], is_less);
      .               }
      .           
      .               // Didn't manage to sort the slice in the limited number of steps.
      .               false
    232 ( 0.00%)  }
      .           
      .           /// Sorts a slice using insertion sort, which is *O*(*n*^2) worst-case.
      .           fn insertion_sort<T, F>(v: &mut [T], is_less: &mut F)
      .           where
      .               F: FnMut(&T, &T) -> bool,
      .           {
      .               for i in 1..v.len() {
    141 ( 0.00%)          shift_tail(&mut v[..i + 1], is_less);
      .               }
      .           }
      .           
      .           /// Sorts `v` using heapsort, which guarantees *O*(*n* \* log(*n*)) worst-case.
      .           #[cold]
      .           #[unstable(feature = "sort_internals", reason = "internal to sort module", issue = "none")]
      .           pub fn heapsort<T, F>(v: &mut [T], mut is_less: F)
      .           where
-- line 185 ----------------------------------------
-- line 264 ----------------------------------------
      .               let mut offsets_r = [MaybeUninit::<u8>::uninit(); BLOCK];
      .           
      .               // FIXME: When we get VLAs, try creating one array of length `min(v.len(), 2 * BLOCK)` rather
      .               // than two fixed-size arrays of length `BLOCK`. VLAs might be more cache-efficient.
      .           
      .               // Returns the number of elements between pointers `l` (inclusive) and `r` (exclusive).
      .               fn width<T>(l: *mut T, r: *mut T) -> usize {
      .                   assert!(mem::size_of::<T>() > 0);
 10,555 ( 0.00%)          (r as usize - l as usize) / mem::size_of::<T>()
      .               }
      .           
      .               loop {
      .                   // We are done with partitioning block-by-block when `l` and `r` get very close. Then we do
      .                   // some patch-up work in order to partition the remaining elements in between.
  2,345 ( 0.00%)          let is_done = width(l, r) <= 2 * BLOCK;
      .           
    791 ( 0.00%)          if is_done {
      .                       // Number of remaining elements (still not compared to the pivot).
      .                       let mut rem = width(l, r);
  2,960 ( 0.00%)              if start_l < end_l || start_r < end_r {
     46 ( 0.00%)                  rem -= BLOCK;
      .                       }
      .           
      .                       // Adjust block sizes so that the left and right block don't overlap, but get perfectly
      .                       // aligned to cover the whole remaining gap.
     47 ( 0.00%)              if start_l < end_l {
      .                           block_r = rem;
      .                       } else if start_r < end_r {
      .                           block_l = rem;
      .                       } else {
      .                           // There were the same number of elements to switch on both blocks during the last
      .                           // iteration, so there are no remaining elements on either block. Cover the remaining
      .                           // items with roughly equally-sized blocks.
  1,422 ( 0.00%)                  block_l = rem / 2;
  1,422 ( 0.00%)                  block_r = rem - block_l;
      .                       }
      .                       debug_assert!(block_l <= BLOCK && block_r <= BLOCK);
      .                       debug_assert!(width(l, r) == block_l + block_r);
      .                   }
      .           
  2,346 ( 0.00%)          if start_l == end_l {
      .                       // Trace `block_l` elements from the left side.
      .                       start_l = MaybeUninit::slice_as_mut_ptr(&mut offsets_l);
      .                       end_l = start_l;
      .                       let mut elem = l;
      .           
      .                       for i in 0..block_l {
      .                           // SAFETY: The unsafety operations below involve the usage of the `offset`.
      .                           //         According to the conditions required by the function, we satisfy them because:
-- line 312 ----------------------------------------
-- line 315 ----------------------------------------
      .                           //            Casting a `bool` will never overflow `isize`.
      .                           //         3. We have guaranteed that `block_l` will be `<= BLOCK`.
      .                           //            Plus, `end_l` was initially set to the begin pointer of `offsets_` which was declared on the stack.
      .                           //            Thus, we know that even in the worst case (all invocations of `is_less` returns false) we will only be at most 1 byte pass the end.
      .                           //        Another unsafety operation here is dereferencing `elem`.
      .                           //        However, `elem` was initially the begin pointer to the slice which is always valid.
      .                           unsafe {
      .                               // Branchless comparison.
 23,800 ( 0.01%)                      *end_l = i as u8;
 22,774 ( 0.01%)                      end_l = end_l.offset(!is_less(&*elem, pivot) as isize);
      .                               elem = elem.offset(1);
      .                           }
      .                       }
      .                   }
      .           
  1,582 ( 0.00%)          if start_r == end_r {
      .                       // Trace `block_r` elements from the right side.
      .                       start_r = MaybeUninit::slice_as_mut_ptr(&mut offsets_r);
      .                       end_r = start_r;
      .                       let mut elem = r;
      .           
      .                       for i in 0..block_r {
      .                           // SAFETY: The unsafety operations below involve the usage of the `offset`.
      .                           //         According to the conditions required by the function, we satisfy them because:
-- line 338 ----------------------------------------
-- line 343 ----------------------------------------
      .                           //            Plus, `end_r` was initially set to the begin pointer of `offsets_` which was declared on the stack.
      .                           //            Thus, we know that even in the worst case (all invocations of `is_less` returns true) we will only be at most 1 byte pass the end.
      .                           //        Another unsafety operation here is dereferencing `elem`.
      .                           //        However, `elem` was initially `1 * sizeof(T)` past the end and we decrement it by `1 * sizeof(T)` before accessing it.
      .                           //        Plus, `block_r` was asserted to be less than `BLOCK` and `elem` will therefore at most be pointing to the beginning of the slice.
      .                           unsafe {
      .                               // Branchless comparison.
      .                               elem = elem.offset(-1);
 23,103 ( 0.01%)                      *end_r = i as u8;
 22,352 ( 0.01%)                      end_r = end_r.offset(is_less(&*elem, pivot) as isize);
      .                           }
      .                       }
      .                   }
      .           
      .                   // Number of out-of-order elements to swap between the left and right side.
      .                   let count = cmp::min(width(start_l, end_l), width(start_r, end_r));
      .           
  1,582 ( 0.00%)          if count > 0 {
      .                       macro_rules! left {
      .                           () => {
      .                               l.offset(*start_l as isize)
      .                           };
      .                       }
      .                       macro_rules! right {
      .                           () => {
      .                               r.offset(-(*start_r as isize) - 1)
-- line 368 ----------------------------------------
-- line 384 ----------------------------------------
      .                       // The calls to `start_l.offset` are valid because there are at most `count-1` of them,
      .                       // plus the final one at the end of the unsafe block, where `count` is the minimum number
      .                       // of collected offsets in `offsets_l` and `offsets_r`, so there is no risk of there not
      .                       // being enough elements. The same reasoning applies to the calls to `start_r.offset`.
      .                       //
      .                       // The calls to `copy_nonoverlapping` are safe because `left!` and `right!` are guaranteed
      .                       // not to overlap, and are valid because of the reasoning above.
      .                       unsafe {
    787 ( 0.00%)                  let tmp = ptr::read(left!());
  2,388 ( 0.00%)                  ptr::copy_nonoverlapping(right!(), left!(), 1);
      .           
      .                           for _ in 1..count {
      .                               start_l = start_l.offset(1);
 19,833 ( 0.01%)                      ptr::copy_nonoverlapping(left!(), right!(), 1);
      .                               start_r = start_r.offset(1);
 23,924 ( 0.01%)                      ptr::copy_nonoverlapping(right!(), left!(), 1);
      .                           }
      .           
      .                           ptr::copy_nonoverlapping(&tmp, right!(), 1);
      .                           mem::forget(tmp);
      .                           start_l = start_l.offset(1);
      .                           start_r = start_r.offset(1);
      .                       }
      .                   }
      .           
  2,373 ( 0.00%)          if start_l == end_l {
      .                       // All out-of-order elements in the left block were moved. Move to the next block.
      .           
      .                       // block-width-guarantee
      .                       // SAFETY: if `!is_done` then the slice width is guaranteed to be at least `2*BLOCK` wide. There
      .                       // are at most `BLOCK` elements in `offsets_l` because of its size, so the `offset` operation is
      .                       // safe. Otherwise, the debug assertions in the `is_done` case guarantee that
      .                       // `width(l, r) == block_l + block_r`, namely, that the block sizes have been adjusted to account
      .                       // for the smaller number of remaining elements.
      .                       l = unsafe { l.offset(block_l as isize) };
      .                   }
      .           
  2,345 ( 0.00%)          if start_r == end_r {
      .                       // All out-of-order elements in the right block were moved. Move to the previous block.
      .           
      .                       // SAFETY: Same argument as [block-width-guarantee]. Either this is a full block `2*BLOCK`-wide,
      .                       // or `block_r` has been adjusted for the last handful of elements.
  1,374 ( 0.00%)              r = unsafe { r.offset(-(block_r as isize)) };
      .                   }
      .           
    791 ( 0.00%)          if is_done {
      .                       break;
      .                   }
      .               }
      .           
      .               // All that remains now is at most one block (either the left or the right) with out-of-order
      .               // elements that need to be moved. Such remaining elements can be simply shifted to the end
      .               // within their block.
      .           
  1,468 ( 0.00%)      if start_l < end_l {
      .                   // The left block remains.
      .                   // Move its remaining out-of-order elements to the far right.
      .                   debug_assert_eq!(width(l, r), block_l);
  5,396 ( 0.00%)          while start_l < end_l {
      .                       // remaining-elements-safety
      .                       // SAFETY: while the loop condition holds there are still elements in `offsets_l`, so it
      .                       // is safe to point `end_l` to the previous element.
      .                       //
      .                       // The `ptr::swap` is safe if both its arguments are valid for reads and writes:
      .                       //  - Per the debug assert above, the distance between `l` and `r` is `block_l`
      .                       //    elements, so there can be at most `block_l` remaining offsets between `start_l`
      .                       //    and `end_l`. This means `r` will be moved at most `block_l` steps back, which
      .                       //    makes the `r.offset` calls valid (at that point `l == r`).
      .                       //  - `offsets_l` contains valid offsets into `v` collected during the partitioning of
      .                       //    the last block, so the `l.offset` calls are valid.
      .                       unsafe {
      .                           end_l = end_l.offset(-1);
  2,621 ( 0.00%)                  ptr::swap(l.offset(*end_l as isize), r.offset(-1));
      .                           r = r.offset(-1);
      .                       }
      .                   }
      .                   width(v.as_mut_ptr(), r)
    792 ( 0.00%)      } else if start_r < end_r {
      .                   // The right block remains.
      .                   // Move its remaining out-of-order elements to the far left.
      .                   debug_assert_eq!(width(l, r), block_r);
  6,127 ( 0.00%)          while start_r < end_r {
      .                       // SAFETY: See the reasoning in [remaining-elements-safety].
      .                       unsafe {
      .                           end_r = end_r.offset(-1);
  5,226 ( 0.00%)                  ptr::swap(l, r.offset(-(*end_r as isize) - 1));
      .                           l = l.offset(1);
      .                       }
      .                   }
      .                   width(v.as_mut_ptr(), l)
      .               } else {
      .                   // Nothing else to do, we're done.
      .                   width(v.as_mut_ptr(), l)
      .               }
-- line 477 ----------------------------------------
-- line 507 ----------------------------------------
      .                   let mut r = v.len();
      .           
      .                   // SAFETY: The unsafety below involves indexing an array.
      .                   // For the first one: We already do the bounds checking here with `l < r`.
      .                   // For the second one: We initially have `l == 0` and `r == v.len()` and we checked that `l < r` at every indexing operation.
      .                   //                     From here we know that `r` must be at least `r == l` which was shown to be valid from the first one.
      .                   unsafe {
      .                       // Find the first element greater than or equal to the pivot.
 22,009 ( 0.01%)              while l < r && is_less(v.get_unchecked(l), pivot) {
  5,142 ( 0.00%)                  l += 1;
      .                       }
      .           
      .                       // Find the last element smaller that the pivot.
 51,095 ( 0.01%)              while l < r && !is_less(v.get_unchecked(r - 1), pivot) {
      .                           r -= 1;
      .                       }
      .                   }
      .           
  5,137 ( 0.00%)          (l + partition_in_blocks(&mut v[l..r], pivot, is_less), l >= r)
      .           
      .                   // `_pivot_guard` goes out of scope and writes the pivot (which is a stack-allocated
      .                   // variable) back into the slice where it originally was. This step is critical in ensuring
      .                   // safety!
      .               };
      .           
      .               // Place the pivot between the two partitions.
      .               v.swap(0, mid);
-- line 533 ----------------------------------------
-- line 592 ----------------------------------------
      .           
      .               // `_pivot_guard` goes out of scope and writes the pivot (which is a stack-allocated variable)
      .               // back into the slice where it originally was. This step is critical in ensuring safety!
      .           }
      .           
      .           /// Scatters some elements around in an attempt to break patterns that might cause imbalanced
      .           /// partitions in quicksort.
      .           #[cold]
     13 ( 0.00%)  fn break_patterns<T>(v: &mut [T]) {
      .               let len = v.len();
      .               if len >= 8 {
      .                   // Pseudorandom number generator from the "Xorshift RNGs" paper by George Marsaglia.
      .                   let mut random = len as u32;
      .                   let mut gen_u32 = || {
    234 ( 0.00%)              random ^= random << 13;
    234 ( 0.00%)              random ^= random >> 17;
    234 ( 0.00%)              random ^= random << 5;
      .                       random
      .                   };
      .                   let mut gen_usize = || {
      .                       if usize::BITS <= 32 {
      .                           gen_u32() as usize
      .                       } else {
     78 ( 0.00%)                  (((gen_u32() as u64) << 32) | (gen_u32() as u64)) as usize
      .                       }
      .                   };
      .           
      .                   // Take random numbers modulo this number.
      .                   // The number fits into `usize` because `len` is not greater than `isize::MAX`.
      .                   let modulus = len.next_power_of_two();
      .           
      .                   // Some pivot candidates will be in the nearby of this index. Let's randomize them.
     39 ( 0.00%)          let pos = len / 4 * 2;
      .           
      .                   for i in 0..3 {
      .                       // Generate a random number modulo `len`. However, in order to avoid costly operations
      .                       // we first take it modulo a power of two, and then decrease by `len` until it fits
      .                       // into the range `[0, len - 1]`.
     78 ( 0.00%)              let mut other = gen_usize() & (modulus - 1);
      .           
      .                       // `other` is guaranteed to be less than `2 * len`.
    104 ( 0.00%)              if other >= len {
      .                           other -= len;
      .                       }
      .           
     13 ( 0.00%)              v.swap(pos - 1 + i, other);
      .                   }
      .               }
     26 ( 0.00%)  }
      .           
      .           /// Chooses a pivot in `v` and returns the index and `true` if the slice is likely already sorted.
      .           ///
      .           /// Elements in `v` might be reordered in the process.
      .           fn choose_pivot<T, F>(v: &mut [T], is_less: &mut F) -> (usize, bool)
      .           where
      .               F: FnMut(&T, &T) -> bool,
      .           {
-- line 648 ----------------------------------------
-- line 650 ----------------------------------------
      .               // Shorter slices use the simple median-of-three method.
      .               const SHORTEST_MEDIAN_OF_MEDIANS: usize = 50;
      .               // Maximum number of swaps that can be performed in this function.
      .               const MAX_SWAPS: usize = 4 * 3;
      .           
      .               let len = v.len();
      .           
      .               // Three indices near which we are going to choose a pivot.
  1,495 ( 0.00%)      let mut a = len / 4 * 1;
    761 ( 0.00%)      let mut b = len / 4 * 2;
    761 ( 0.00%)      let mut c = len / 4 * 3;
      .           
      .               // Counts the total number of swaps we are about to perform while sorting indices.
     54 ( 0.00%)      let mut swaps = 0;
      .           
      .               if len >= 8 {
      .                   // Swaps indices so that `v[a] <= v[b]`.
      .                   // SAFETY: `len >= 8` so there are at least two elements in the neighborhoods of
      .                   // `a`, `b` and `c`. This means the three calls to `sort_adjacent` result in
      .                   // corresponding calls to `sort3` with valid 3-item neighborhoods around each
      .                   // pointer, which in turn means the calls to `sort2` are done with valid
      .                   // references. Thus the `v.get_unchecked` calls are safe, as is the `ptr::swap`
      .                   // call.
    136 ( 0.00%)          let mut sort2 = |a: &mut usize, b: &mut usize| unsafe {
 22,977 ( 0.01%)              if is_less(v.get_unchecked(*b), v.get_unchecked(*a)) {
      .                           ptr::swap(a, b);
  4,523 ( 0.00%)                  swaps += 1;
      .                       }
      .                   };
      .           
      .                   // Swaps indices so that `v[a] <= v[b] <= v[c]`.
    320 ( 0.00%)          let mut sort3 = |a: &mut usize, b: &mut usize, c: &mut usize| {
     53 ( 0.00%)              sort2(a, b);
      .                       sort2(b, c);
      .                       sort2(a, b);
    318 ( 0.00%)          };
      .           
  1,468 ( 0.00%)          if len >= SHORTEST_MEDIAN_OF_MEDIANS {
      .                       // Finds the median of `v[a - 1], v[a], v[a + 1]` and stores the index into `a`.
      .                       let mut sort_adjacent = |a: &mut usize| {
      .                           let tmp = *a;
  1,700 ( 0.00%)                  sort3(&mut (tmp - 1), a, &mut (tmp + 1));
      .                       };
      .           
      .                       // Find medians in the neighborhoods of `a`, `b`, and `c`.
      .                       sort_adjacent(&mut a);
      .                       sort_adjacent(&mut b);
      .                       sort_adjacent(&mut c);
      .                   }
      .           
      .                   // Find the median among `a`, `b`, and `c`.
    130 ( 0.00%)          sort3(&mut a, &mut b, &mut c);
      .               }
      .           
    489 ( 0.00%)      if swaps < MAX_SWAPS {
  1,520 ( 0.00%)          (b, swaps == 0)
      .               } else {
      .                   // The maximum number of swaps was performed. Chances are the slice is descending or mostly
      .                   // descending, so reversing will probably help sort it faster.
      .                   v.reverse();
      .                   (len - 1 - b, true)
      .               }
      .           }
      .           
      .           /// Sorts `v` recursively.
      .           ///
      .           /// If the slice had a predecessor in the original array, it is specified as `pred`.
      .           ///
      .           /// `limit` is the number of allowed imbalanced partitions before switching to `heapsort`. If zero,
      .           /// this function will immediately switch to heapsort.
 11,867 ( 0.00%)  fn recurse<'a, T, F>(mut v: &'a mut [T], is_less: &mut F, mut pred: Option<&'a T>, mut limit: u32)
      .           where
      .               F: FnMut(&T, &T) -> bool,
      .           {
      .               // Slices of up to this length get sorted using insertion sort.
      .               const MAX_INSERTION: usize = 20;
      .           
      .               // True if the last partitioning was reasonably balanced.
      .               let mut was_balanced = true;
      .               // True if the last partitioning didn't shuffle elements (the slice was already partitioned).
      .               let mut was_partitioned = true;
      .           
      .               loop {
      .                   let len = v.len();
      .           
      .                   // Very short slices get sorted using insertion sort.
  3,917 ( 0.00%)          if len <= MAX_INSERTION {
      .                       insertion_sort(v, is_less);
      .                       return;
      .                   }
      .           
      .                   // If too many bad pivot choices were made, simply fall back to heapsort in order to
      .                   // guarantee `O(n * log(n))` worst-case.
  1,468 ( 0.00%)          if limit == 0 {
      .                       heapsort(v, is_less);
      .                       return;
      .                   }
      .           
      .                   // If the last partitioning was imbalanced, try breaking patterns in the slice by shuffling
      .                   // some elements around. Hopefully we'll choose a better pivot this time.
  1,468 ( 0.00%)          if !was_balanced {
     72 ( 0.00%)              break_patterns(v);
     26 ( 0.00%)              limit -= 1;
      .                   }
      .           
      .                   // Choose a pivot and try guessing whether the slice is already sorted.
  1,468 ( 0.00%)          let (pivot, likely_sorted) = choose_pivot(v, is_less);
      .           
      .                   // If the last partitioning was decently balanced and didn't shuffle elements, and if pivot
      .                   // selection predicts the slice is likely already sorted...
  1,497 ( 0.00%)          if was_balanced && was_partitioned && likely_sorted {
      .                       // Try identifying several out-of-order elements and shifting them to correct
      .                       // positions. If the slice ends up being completely sorted, we're done.
    228 ( 0.00%)              if partial_insertion_sort(v, is_less) {
      .                           return;
      .                       }
      .                   }
      .           
      .                   // If the chosen pivot is equal to the predecessor, then it's the smallest element in the
      .                   // slice. Partition the slice into elements equal to and elements greater than the pivot.
      .                   // This case is usually hit when the slice contains many duplicate elements.
    734 ( 0.00%)          if let Some(p) = pred {
  3,928 ( 0.00%)              if !is_less(p, &v[pivot]) {
      .                           let mid = partition_equal(v, pivot, is_less);
      .           
      .                           // Continue sorting elements greater than the pivot.
      .                           v = &mut { v }[mid..];
      .                           continue;
      .                       }
      .                   }
      .           
      .                   // Partition the slice.
      .                   let (mid, was_p) = partition(v, pivot, is_less);
  5,138 ( 0.00%)          was_balanced = cmp::min(mid, len - mid) >= len / 8;
      .                   was_partitioned = was_p;
      .           
      .                   // Split the slice into `left`, `pivot`, and `right`.
      .                   let (left, right) = { v }.split_at_mut(mid);
      .                   let (pivot, right) = right.split_at_mut(1);
      .                   let pivot = &pivot[0];
      .           
      .                   // Recurse into the shorter side only in order to minimize the total number of recursive
      .                   // calls and consume less stack space. Then just continue with the longer side (this is
      .                   // akin to tail recursion).
  1,468 ( 0.00%)          if left.len() < right.len() {
  3,636 ( 0.00%)              recurse(left, is_less, pred, limit);
      .                       v = right;
      .                       pred = Some(pivot);
      .                   } else {
  1,980 ( 0.00%)              recurse(right, is_less, Some(pivot), limit);
      .                       v = left;
      .                   }
      .               }
  8,632 ( 0.00%)  }
      .           
      .           /// Sorts `v` using pattern-defeating quicksort, which is *O*(*n* \* log(*n*)) worst-case.
      .           pub fn quicksort<T, F>(v: &mut [T], mut is_less: F)
      .           where
      .               F: FnMut(&T, &T) -> bool,
      .           {
      .               // Sorting has no meaningful behavior on zero-sized types.
      .               if mem::size_of::<T>() == 0 {
      .                   return;
      .               }
      .           
      .               // Limit the number of imbalanced partitions to `floor(log2(len)) + 1`.
    712 ( 0.00%)      let limit = usize::BITS - v.len().leading_zeros();
      .           
  1,346 ( 0.00%)      recurse(v, &mut is_less, None, limit);
      .           }
      .           
      .           fn partition_at_index_loop<'a, T, F>(
      .               mut v: &'a mut [T],
      .               mut index: usize,
      .               is_less: &mut F,
      .               mut pred: Option<&'a T>,
      .           ) where
-- line 826 ----------------------------------------

 50,297 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/sort.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/tuple.rs
--------------------------------------------------------------------------------
Ir               

-- line 10 ----------------------------------------
      .                       $(($idx:tt) -> $T:ident)+
      .                   }
      .               )+) => {
      .                   $(
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl<$($T:PartialEq),+> PartialEq for ($($T,)+) where last_type!($($T,)+): ?Sized {
      .                           #[inline]
      .                           fn eq(&self, other: &($($T,)+)) -> bool {
  8,793 ( 0.00%)                      $(self.$idx == other.$idx)&&+
      .                           }
      .                           #[inline]
      .                           fn ne(&self, other: &($($T,)+)) -> bool {
      .                               $(self.$idx != other.$idx)||+
      .                           }
      .                       }
      .           
      .                       #[stable(feature = "rust1", since = "1.0.0")]
-- line 26 ----------------------------------------
-- line 30 ----------------------------------------
      .                       impl<$($T:PartialOrd + PartialEq),+> PartialOrd for ($($T,)+)
      .                               where last_type!($($T,)+): ?Sized {
      .                           #[inline]
      .                           fn partial_cmp(&self, other: &($($T,)+)) -> Option<Ordering> {
      .                               lexical_partial_cmp!($(self.$idx, other.$idx),+)
      .                           }
      .                           #[inline]
      .                           fn lt(&self, other: &($($T,)+)) -> bool {
613,360 ( 0.16%)                      lexical_ord!(lt, $(self.$idx, other.$idx),+)
      .                           }
      .                           #[inline]
      .                           fn le(&self, other: &($($T,)+)) -> bool {
      .                               lexical_ord!(le, $(self.$idx, other.$idx),+)
      .                           }
      .                           #[inline]
      .                           fn ge(&self, other: &($($T,)+)) -> bool {
      1 ( 0.00%)                      lexical_ord!(ge, $(self.$idx, other.$idx),+)
      .                           }
      .                           #[inline]
      .                           fn gt(&self, other: &($($T,)+)) -> bool {
      .                               lexical_ord!(gt, $(self.$idx, other.$idx),+)
      .                           }
      .                       }
      .           
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl<$($T:Ord),+> Ord for ($($T,)+) where last_type!($($T,)+): ?Sized {
      .                           #[inline]
      .                           fn cmp(&self, other: &($($T,)+)) -> Ordering {
  4,156 ( 0.00%)                      lexical_cmp!($(self.$idx, other.$idx),+)
      .                           }
      .                       }
      .           
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl<$($T:Default),+> Default for ($($T,)+) {
      .                           #[inline]
      .                           fn default() -> ($($T,)+) {
    145 ( 0.00%)                      ($({ let x: $T = Default::default(); x},)+)
      .                           }
      .                       }
      .                   )+
      .               }
      .           }
      .           
      .           // Constructs an expression that performs a lexical ordering using method $rel.
      .           // The values are interleaved, so the macro invocation for
-- line 74 ----------------------------------------

    227 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/tuple.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 114 ----------------------------------------
      .           const EMPTY: u8 = 0b1111_1111;
      .           
      .           /// Control byte value for a deleted bucket.
      .           const DELETED: u8 = 0b1000_0000;
      .           
      .           /// Checks whether a control byte represents a full bucket (top bit is clear).
      .           #[inline]
      .           fn is_full(ctrl: u8) -> bool {
 48,219 ( 0.01%)      ctrl & 0x80 == 0
      .           }
      .           
      .           /// Checks whether a control byte represents a special value (top bit is set).
      .           #[inline]
      .           fn is_special(ctrl: u8) -> bool {
      .               ctrl & 0x80 != 0
      .           }
      .           
-- line 130 ----------------------------------------
-- line 146 ----------------------------------------
      .           /// Secondary hash function, saved in the low 7 bits of the control byte.
      .           #[inline]
      .           #[allow(clippy::cast_possible_truncation)]
      .           fn h2(hash: u64) -> u8 {
      .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
      .               // value, some hash functions (such as FxHash) produce a usize result
      .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
      .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
 52,641 ( 0.01%)      let top7 = hash >> (hash_len * 8 - 7);
      .               (top7 & 0x7f) as u8 // truncation
      .           }
      .           
      .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
      .           /// table size is a power of two) to visit every group of elements exactly once.
      .           ///
      .           /// A triangular probe has us jump by 1 more group every time. So first we
      .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 162 ----------------------------------------
-- line 173 ----------------------------------------
      .               #[inline]
      .               fn move_next(&mut self, bucket_mask: usize) {
      .                   // We should have found an empty bucket by now and ended the probe.
      .                   debug_assert!(
      .                       self.stride <= bucket_mask,
      .                       "Went past end of probe sequence"
      .                   );
      .           
  6,576 ( 0.00%)          self.stride += Group::WIDTH;
  6,576 ( 0.00%)          self.pos += self.stride;
  3,288 ( 0.00%)          self.pos &= bucket_mask;
      .               }
      .           }
      .           
      .           /// Returns the number of buckets needed to hold the given number of items,
      .           /// taking the maximum load factor into account.
      .           ///
      .           /// Returns `None` if an overflow occurs.
      .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
      .           #[cfg_attr(target_os = "emscripten", inline(never))]
      .           #[cfg_attr(not(target_os = "emscripten"), inline)]
      .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
      .               debug_assert_ne!(cap, 0);
      .           
      .               // For small tables we require at least 1 empty bucket so that lookups are
      .               // guaranteed to terminate if an element doesn't exist in the table.
  2,282 ( 0.00%)      if cap < 8 {
      .                   // We don't bother with a table size of 2 buckets since that can only
      .                   // hold a single element. Instead we skip directly to a 4 bucket table
      .                   // which can hold 3 elements.
  4,105 ( 0.00%)          return Some(if cap < 4 { 4 } else { 8 });
      .               }
      .           
      .               // Otherwise require 1/8 buckets to be empty (87.5% load)
      .               //
      .               // Be careful when modifying this, calculate_layout relies on the
      .               // overflow check here.
  1,920 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
      .           
      .               // Any overflows will have been caught by the checked_mul. Also, any
      .               // rounding errors from the division above will be cleaned up by
      .               // next_power_of_two (which can't overflow because of the previous divison).
      .               Some(adjusted_cap.next_power_of_two())
      .           }
      .           
      .           /// Returns the maximum effective capacity for the given bucket mask, taking
      .           /// the maximum load factor into account.
      .           #[inline]
      .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
  8,600 ( 0.00%)      if bucket_mask < 8 {
      .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
      .                   // Keep in mind that the bucket mask is one less than the bucket count.
      .                   bucket_mask
      .               } else {
      .                   // For larger tables we reserve 12.5% of the slots as empty.
  1,386 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
      .               }
      .           }
      .           
      .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
      .           /// while keeping the rest of `calculate_layout_for` independent of `T`
      .           #[derive(Copy, Clone)]
      .           struct TableLayout {
      .               size: usize,
-- line 236 ----------------------------------------
-- line 249 ----------------------------------------
      .           
      .               #[inline]
      .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
      .                   debug_assert!(buckets.is_power_of_two());
      .           
      .                   let TableLayout { size, ctrl_align } = self;
      .                   // Manual layout calculation since Layout methods are not yet stable.
      .                   let ctrl_offset =
  5,231 ( 0.00%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
  6,372 ( 0.00%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
      .           
      .                   Some((
      .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
      .                       ctrl_offset,
      .                   ))
      .               }
      .           }
      .           
-- line 266 ----------------------------------------
-- line 460 ----------------------------------------
      .               /// Attempts to allocate a new hash table with at least enough capacity
      .               /// for inserting the given number of elements without reallocating.
      .               fn fallible_with_capacity(
      .                   alloc: A,
      .                   capacity: usize,
      .                   fallibility: Fallibility,
      .               ) -> Result<Self, TryReserveError> {
      .                   Ok(Self {
     30 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
      .                           alloc,
      .                           TableLayout::new::<T>(),
      .                           capacity,
      .                           fallibility,
      .                       )?,
      .                       marker: PhantomData,
      .                   })
      .               }
-- line 476 ----------------------------------------
-- line 636 ----------------------------------------
      .                       }
      .                   }
      .               }
      .           
      .               /// Ensures that at least `additional` items can be inserted into the table
      .               /// without reallocation.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
    268 ( 0.00%)          if additional > self.table.growth_left {
      .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
  6,003 ( 0.00%)              if self
      .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
      .                           .is_err()
      .                       {
      .                           unsafe { hint::unreachable_unchecked() }
      .                       }
      .                   }
      .               }
      .           
-- line 654 ----------------------------------------
-- line 665 ----------------------------------------
      .                   } else {
      .                       Ok(())
      .                   }
      .               }
      .           
      .               /// Out-of-line slow path for `reserve` and `try_reserve`.
      .               #[cold]
      .               #[inline(never)]
  9,325 ( 0.00%)      fn reserve_rehash(
      .                   &mut self,
      .                   additional: usize,
      .                   hasher: impl Fn(&T) -> u64,
      .                   fallibility: Fallibility,
      .               ) -> Result<(), TryReserveError> {
      .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
  2,272 ( 0.00%)          let new_items = match self.table.items.checked_add(additional) {
      .                       Some(new_items) => new_items,
      .                       None => return Err(fallibility.capacity_overflow()),
      .                   };
  2,272 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.table.bucket_mask);
  4,544 ( 0.00%)          if new_items <= full_capacity / 2 {
      .                       // Rehash in-place without re-allocating if we have plenty of spare
      .                       // capacity that is locked up due to DELETED entries.
      .                       self.rehash_in_place(hasher);
      .                       Ok(())
      .                   } else {
      .                       // Otherwise, conservatively resize to at least the next size up
      .                       // to avoid churning deletes into frequent rehashes.
      .                       self.resize(
  1,136 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
      .                           hasher,
      .                           fallibility,
      .                       )
      .                   }
 10,224 ( 0.00%)      }
      .           
      .               /// Rehashes the contents of the table in place (i.e. without changing the
      .               /// allocation).
      .               ///
      .               /// If `hasher` panics then some the table's contents may be lost.
      .               fn rehash_in_place(&mut self, hasher: impl Fn(&T) -> u64) {
      .                   unsafe {
      .                       // If the hash function panics then properly clean up any elements
-- line 707 ----------------------------------------
-- line 780 ----------------------------------------
      .               fn resize(
      .                   &mut self,
      .                   capacity: usize,
      .                   hasher: impl Fn(&T) -> u64,
      .                   fallibility: Fallibility,
      .               ) -> Result<(), TryReserveError> {
      .                   unsafe {
      .                       let mut new_table =
  8,873 ( 0.00%)                  self.table
      .                               .prepare_resize(TableLayout::new::<T>(), capacity, fallibility)?;
      .           
      .                       // Copy all elements to the new table.
      .                       for item in self.iter() {
      .                           // This may panic.
 25,068 ( 0.01%)                  let hash = hasher(item.as_ref());
      .           
      .                           // We can use a simpler version of insert() here since:
      .                           // - there are no DELETED entries.
      .                           // - we know there is enough space in the table.
      .                           // - all elements are unique.
      .                           let (index, _) = new_table.prepare_insert_slot(hash);
 25,068 ( 0.01%)                  new_table.bucket(index).copy_from_nonoverlapping(&item);
      .                       }
      .           
      .                       // We successfully copied all elements without panicking. Now replace
      .                       // self with the new table. The old table will have its memory freed but
      .                       // the items will not be dropped (since they have been moved into the
      .                       // new table).
      .                       mem::swap(&mut self.table, &mut new_table);
      .           
  1,136 ( 0.00%)              Ok(())
      .                   }
      .               }
      .           
      .               /// Inserts a new element into the table, and returns its raw bucket.
      .               ///
      .               /// This does not check if the given element already exists in the table.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
      .                   unsafe {
      .                       let mut index = self.table.find_insert_slot(hash);
      .           
      .                       // We can avoid growing the table once we have reached our load
      .                       // factor if we are replacing a tombstone. This works since the
      .                       // number of EMPTY slots does not change in this case.
     62 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
 82,012 ( 0.02%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
      .                           self.reserve(1, hasher);
      .                           index = self.table.find_insert_slot(hash);
      .                       }
      .           
      .                       self.table.record_item_insert_at(index, old_ctrl, hash);
      .           
 20,515 ( 0.01%)              let bucket = self.bucket(index);
      .                       bucket.write(value);
      .                       bucket
      .                   }
      .               }
      .           
      .               /// Attempts to insert a new element without growing the table and return its raw bucket.
      .               ///
      .               /// Returns an `Err` containing the given element if inserting it would require growing the
-- line 841 ----------------------------------------
-- line 911 ----------------------------------------
      .                       true
      .                   } else {
      .                       false
      .                   }
      .               }
      .           
      .               /// Searches for an element in the table.
      .               #[inline]
 31,041 ( 0.01%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
      .                   unsafe {
198,788 ( 0.05%)              for bucket in self.iter_hash(hash) {
      .                           let elm = bucket.as_ref();
 28,384 ( 0.01%)                  if likely(eq(elm)) {
      .                               return Some(bucket);
      .                           }
      .                       }
      .                       None
      .                   }
 41,388 ( 0.01%)      }
      .           
      .               /// Gets a reference to an element in the table.
      .               #[inline]
      .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
  3,596 ( 0.00%)          match self.find(hash, eq) {
      .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Gets a mutable reference to an element in the table.
      .               #[inline]
      .               pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
-- line 943 ----------------------------------------
-- line 1007 ----------------------------------------
      .               }
      .           
      .               /// Returns the number of elements the map can hold without reallocating.
      .               ///
      .               /// This number is a lower bound; the table might be able to hold
      .               /// more, but is guaranteed to be able to hold at least this many.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn capacity(&self) -> usize {
  2,328 ( 0.00%)          self.table.items + self.table.growth_left
      .               }
      .           
      .               /// Returns the number of elements in the table.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn len(&self) -> usize {
      .                   self.table.items
      .               }
      .           
      .               /// Returns the number of buckets in the table.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn buckets(&self) -> usize {
     52 ( 0.00%)          self.table.bucket_mask + 1
      .               }
      .           
      .               /// Returns an iterator over every element in the table. It is up to
      .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
      .               /// Because we cannot make the `next` method unsafe on the `RawIter`
      .               /// struct, we have to make the `iter` method unsafe.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub unsafe fn iter(&self) -> RawIter<T> {
  1,136 ( 0.00%)          let data = Bucket::from_base_index(self.data_end(), 0);
      .                   RawIter {
      .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
      .                       items: self.table.items,
      .                   }
      .               }
      .           
      .               /// Returns an iterator over occupied buckets that could match a given hash.
      .               ///
-- line 1044 ----------------------------------------
-- line 1122 ----------------------------------------
      .           }
      .           
      .           unsafe impl<T, A: Allocator + Clone> Send for RawTable<T, A> where T: Send {}
      .           unsafe impl<T, A: Allocator + Clone> Sync for RawTable<T, A> where T: Sync {}
      .           
      .           impl<A> RawTableInner<A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               const fn new_in(alloc: A) -> Self {
  5,455 ( 0.00%)          Self {
      .                       // Be careful to cast the entire slice to a raw pointer.
  2,964 ( 0.00%)              ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
      .                       bucket_mask: 0,
      .                       items: 0,
      .                       growth_left: 0,
      .                       alloc,
      .                   }
      .               }
      .           }
      .           
-- line 1140 ----------------------------------------
-- line 1149 ----------------------------------------
      .                   debug_assert!(buckets.is_power_of_two());
      .           
      .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
      .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(buckets) {
      .                       Some(lco) => lco,
      .                       None => return Err(fallibility.capacity_overflow()),
      .                   };
      .           
  2,282 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
      .                       Ok(block) => block.cast(),
      .                       Err(_) => return Err(fallibility.alloc_err(layout)),
      .                   };
      .           
      .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
      .                   Ok(Self {
      .                       ctrl,
  1,290 ( 0.00%)              bucket_mask: buckets - 1,
      .                       items: 0,
      .                       growth_left: bucket_mask_to_capacity(buckets - 1),
      .                       alloc,
      .                   })
      .               }
      .           
      .               #[inline]
  7,382 ( 0.00%)      fn fallible_with_capacity(
      .                   alloc: A,
      .                   table_layout: TableLayout,
      .                   capacity: usize,
      .                   fallibility: Fallibility,
      .               ) -> Result<Self, TryReserveError> {
    168 ( 0.00%)          if capacity == 0 {
      .                       Ok(Self::new_in(alloc))
      .                   } else {
      .                       unsafe {
      .                           let buckets =
      .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
      .           
      .                           let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
      .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
      .           
  4,446 ( 0.00%)                  Ok(result)
      .                       }
      .                   }
  6,040 ( 0.00%)      }
      .           
      .               /// Searches for an empty or deleted bucket which is suitable for inserting
      .               /// a new element and sets the hash for that slot.
      .               ///
      .               /// There must be at least 1 empty bucket in the table.
      .               #[inline]
      .               unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
      .                   let index = self.find_insert_slot(hash);
-- line 1200 ----------------------------------------
-- line 1208 ----------------------------------------
      .               ///
      .               /// There must be at least 1 empty bucket in the table.
      .               #[inline]
      .               fn find_insert_slot(&self, hash: u64) -> usize {
      .                   let mut probe_seq = self.probe_seq(hash);
      .                   loop {
      .                       unsafe {
      .                           let group = Group::load(self.ctrl(probe_seq.pos));
 48,229 ( 0.01%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
139,974 ( 0.04%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
      .           
      .                               // In tables smaller than the group width, trailing control
      .                               // bytes outside the range of the table are filled with
      .                               // EMPTY entries. These will unfortunately trigger a
      .                               // match, but once masked may point to a full bucket that
      .                               // is already occupied. We detect this situation here and
      .                               // perform a second scan starting at the begining of the
      .                               // table. This second scan is guaranteed to find an empty
      .                               // slot (due to the load factor) before hitting the trailing
      .                               // control bytes (containing EMPTY).
 67,173 ( 0.02%)                      if unlikely(is_full(*self.ctrl(result))) {
      .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
      .                                   debug_assert_ne!(probe_seq.pos, 0);
      .                                   return Group::load_aligned(self.ctrl(0))
      .                                       .match_empty_or_deleted()
      .                                       .lowest_set_bit_nonzero();
      .                               }
      .           
      .                               return result;
-- line 1236 ----------------------------------------
-- line 1278 ----------------------------------------
      .               /// Returns an iterator-like object for a probe sequence on the table.
      .               ///
      .               /// This iterator never terminates, but is guaranteed to visit each bucket
      .               /// group exactly once. The loop using `probe_seq` must terminate upon
      .               /// reaching a group containing an empty bucket.
      .               #[inline]
      .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
      .                   ProbeSeq {
248,999 ( 0.06%)              pos: h1(hash) & self.bucket_mask,
      .                       stride: 0,
      .                   }
      .               }
      .           
      .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
      .               /// in the table, otherwise returns error
      .               #[cfg(feature = "raw")]
      .               #[inline]
-- line 1294 ----------------------------------------
-- line 1300 ----------------------------------------
      .                   } else {
      .                       self.record_item_insert_at(index, old_ctrl, hash);
      .                       Ok(index)
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
102,575 ( 0.03%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
      .                   self.set_ctrl_h2(index, hash);
 82,060 ( 0.02%)          self.items += 1;
      .               }
      .           
      .               #[inline]
      .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
      .                   let probe_seq_pos = self.probe_seq(hash).pos;
      .                   let probe_index =
      .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
      .                   probe_index(i) == probe_index(new_i)
-- line 1318 ----------------------------------------
-- line 1349 ----------------------------------------
      .                   // replicate the buckets at the end of the trailing group. For example
      .                   // with 2 buckets and a group size of 4, the control bytes will look
      .                   // like this:
      .                   //
      .                   //     Real    |             Replicated
      .                   // ---------------------------------------------
      .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
      .                   // ---------------------------------------------
136,749 ( 0.03%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
      .           
 45,583 ( 0.01%)          *self.ctrl(index) = ctrl;
 45,583 ( 0.01%)          *self.ctrl(index2) = ctrl;
      .               }
      .           
      .               /// Returns a pointer to a control byte.
      .               #[inline]
      .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
      .                   debug_assert!(index < self.num_ctrl_bytes());
      .                   self.ctrl.as_ptr().add(index)
      .               }
      .           
      .               #[inline]
      .               fn buckets(&self) -> usize {
  2,282 ( 0.00%)          self.bucket_mask + 1
      .               }
      .           
      .               #[inline]
      .               fn num_ctrl_bytes(&self) -> usize {
      .                   self.bucket_mask + 1 + Group::WIDTH
      .               }
      .           
      .               #[inline]
      .               fn is_empty_singleton(&self) -> bool {
  8,059 ( 0.00%)          self.bucket_mask == 0
      .               }
      .           
      .               #[allow(clippy::mut_mut)]
      .               #[inline]
  1,639 ( 0.00%)      unsafe fn prepare_resize(
      .                   &self,
      .                   table_layout: TableLayout,
      .                   capacity: usize,
      .                   fallibility: Fallibility,
      .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
      .                   debug_assert!(self.items <= capacity);
      .           
      .                   // Allocate and initialize the new table.
  3,750 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
      .                       self.alloc.clone(),
      .                       table_layout,
      .                       capacity,
      .                       fallibility,
      .                   )?;
  2,272 ( 0.00%)          new_table.growth_left -= self.items;
      .                   new_table.items = self.items;
      .           
      .                   // The hash function may panic, in which case we simply free the new
      .                   // table without dropping any elements that may have been copied into
      .                   // it.
      .                   //
      .                   // This guard is also used to free the old table on success, see
      .                   // the comment at the bottom of this function.
  1,192 ( 0.00%)          Ok(guard(new_table, move |self_| {
  1,136 ( 0.00%)              if !self_.is_empty_singleton() {
      .                           self_.free_buckets(table_layout);
      .                       }
      .                   }))
  1,192 ( 0.00%)      }
      .           
      .               #[inline]
      .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
      .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
      .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
      .                       Some(lco) => lco,
      .                       None => hint::unreachable_unchecked(),
      .                   };
      .                   self.alloc.deallocate(
    457 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
      .                       layout,
      .                   );
      .               }
      .           
      .               /// Marks all table buckets as empty without dropping their contents.
      .               #[inline]
      .               fn clear_no_drop(&mut self) {
      .                   if !self.is_empty_singleton() {
-- line 1434 ----------------------------------------
-- line 1667 ----------------------------------------
      .                       }
      .                   }
      .               }
      .           }
      .           #[cfg(not(feature = "nightly"))]
      .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn drop(&mut self) {
  2,979 ( 0.00%)          if !self.table.is_empty_singleton() {
      .                       unsafe {
      .                           self.drop_elements();
      .                           self.free_buckets();
      .                       }
      .                   }
      .               }
      .           }
      .           
-- line 1683 ----------------------------------------
-- line 1798 ----------------------------------------
      .           
      .           impl<T> Iterator for RawIterRange<T> {
      .               type Item = Bucket<T>;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<Bucket<T>> {
      .                   unsafe {
      .                       loop {
  3,365 ( 0.00%)                  if let Some(index) = self.current_group.lowest_set_bit() {
      .                               self.current_group = self.current_group.remove_lowest_bit();
      .                               return Some(self.data.next_n(index));
      .                           }
      .           
  5,234 ( 0.00%)                  if self.next_ctrl >= self.end {
      .                               return None;
      .                           }
      .           
      .                           // We might read past self.end up to the next group boundary,
      .                           // but this is fine because it only occurs on tables smaller
      .                           // than the group size where the trailing control bytes are all
      .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
      .                           // to the group size (since tables are power-of-two sized).
-- line 1819 ----------------------------------------
-- line 1990 ----------------------------------------
      .           }
      .           
      .           impl<T> Iterator for RawIter<T> {
      .               type Item = Bucket<T>;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<Bucket<T>> {
      .                   if let Some(b) = self.iter.next() {
 50,136 ( 0.01%)              self.items -= 1;
      .                       Some(b)
      .                   } else {
      .                       // We don't check against items == 0 here to allow the
      .                       // compiler to optimize away the item count entirely if the
      .                       // iterator length is never queried.
      .                       debug_assert_eq!(self.items, 0);
      .                       None
      .                   }
-- line 2006 ----------------------------------------
-- line 2178 ----------------------------------------
      .               }
      .           }
      .           impl<'a, A: Allocator + Clone> RawIterHashInner<'a, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn new(table: &'a RawTableInner<A>, hash: u64) -> Self {
      .                   unsafe {
      .                       let h2_hash = h2(hash);
      .                       let probe_seq = table.probe_seq(hash);
 32,849 ( 0.01%)              let group = Group::load(table.ctrl(probe_seq.pos));
      .                       let bitmask = group.match_byte(h2_hash).into_iter();
      .           
      .                       RawIterHashInner {
      .                           table,
      .                           h2_hash,
      .                           probe_seq,
      .                           group,
      .                           bitmask,
-- line 2194 ----------------------------------------
-- line 2195 ----------------------------------------
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, T, A: Allocator + Clone> Iterator for RawIterHash<'a, T, A> {
      .               type Item = Bucket<T>;
      .           
  2,696 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
      .                   unsafe {
      .                       match self.inner.next() {
  1,348 ( 0.00%)                  Some(index) => Some(self.inner.table.bucket(index)),
      .                           None => None,
      .                       }
      .                   }
  2,696 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, A: Allocator + Clone> Iterator for RawIterHashInner<'a, A> {
      .               type Item = usize;
      .           
      .               fn next(&mut self) -> Option<Self::Item> {
      .                   unsafe {
      .                       loop {
      .                           if let Some(bit) = self.bitmask.next() {
 38,573 ( 0.01%)                      let index = (self.probe_seq.pos + bit) & self.table.bucket_mask;
      .                               return Some(index);
      .                           }
 23,523 ( 0.01%)                  if likely(self.group.match_empty().any_bit_set()) {
      .                               return None;
      .                           }
      .                           self.probe_seq.move_next(self.table.bucket_mask);
      .                           self.group = Group::load(self.table.ctrl(self.probe_seq.pos));
  5,151 ( 0.00%)                  self.bitmask = self.group.match_byte(self.h2_hash).into_iter();
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           #[cfg(test)]
      .           mod test_map {
      .               use super::*;
-- line 2236 ----------------------------------------

232,026 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir               

-- line 91 ----------------------------------------
      .           // maximum of number bytes needed to fill an 8-byte-sized element on which
      .           // SipHash operates. Note that for variable-sized copies which are known to be
      .           // less than 8 bytes, this function will perform more work than necessary unless
      .           // the compiler is able to optimize the extra work away.
      .           #[inline]
      .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
      .               debug_assert!(count <= 8);
      .           
 13,818 ( 0.00%)      if count == 8 {
      .                   ptr::copy_nonoverlapping(src, dst, 8);
      .                   return;
      .               }
      .           
      .               let mut i = 0;
 19,636 ( 0.00%)      if i + 3 < count {
      .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
      .                   i += 4;
      .               }
      .           
 42,355 ( 0.01%)      if i + 1 < count {
      .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
  5,441 ( 0.00%)          i += 2
      .               }
      .           
 19,636 ( 0.00%)      if i < count {
 11,944 ( 0.00%)          *dst.add(i) = *src.add(i);
      .                   i += 1;
      .               }
      .           
      .               debug_assert_eq!(i, count);
      .           }
      .           
      .           // # Implementation
      .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
      .           
      .                   hasher
      .               }
      .           
      .               // A specialized write function for values with size <= 8.
      .               #[inline]
      .               fn short_write<T>(&mut self, x: T) {
      .                   let size = mem::size_of::<T>();
103,513 ( 0.03%)          let nbuf = self.nbuf;
      .                   debug_assert!(size <= 8);
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
      .           
676,677 ( 0.17%)          if nbuf + size < BUFFER_SIZE {
      .                       unsafe {
      .                           // The memcpy call is optimized away because the size is known.
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
      .                       }
      .           
204,523 ( 0.05%)              self.nbuf = nbuf + size;
      .           
      .                       return;
      .                   }
      .           
 30,947 ( 0.01%)          unsafe { self.short_write_process_buffer(x) }
      .               }
      .           
      .               // A specialized write function for values with size <= 8 that should only
      .               // be called when the write would cause the buffer to fill.
      .               //
      .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
      .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
      .               // overflow) if it wasn't already.
      .               #[inline(never)]
  9,644 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
      .                   let size = mem::size_of::<T>();
  9,644 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(size <= 8);
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
      .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
      .           
      .                   // Copy first part of input into end of buffer, possibly into spill
      .                   // element. The memcpy call is optimized away because the size is known.
      .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
      .           
      .                   // Process buffer.
      .                   for i in 0..BUFFER_CAPACITY {
 96,440 ( 0.02%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
 77,152 ( 0.02%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
 86,796 ( 0.02%)              self.state.v0 ^= elem;
      .                   }
      .           
      .                   // Copy remaining input into start of buffer by copying size - 1
      .                   // elements from spill (at most size - 1 bytes could have overflowed
      .                   // into the spill). The memcpy call is optimized away because the size
      .                   // is known. And the whole copy is optimized away for size == 1.
      .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
      .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
      .           
      .                   // This function should only be called when the write fills the buffer.
      .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
      .                   // is statically known, so the branch is optimized away.
 44,824 ( 0.01%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
 38,576 ( 0.01%)          self.processed += BUFFER_SIZE;
 19,288 ( 0.00%)      }
      .           
      .               // A write function for byte slices.
      .               #[inline]
      .               fn slice_write(&mut self, msg: &[u8]) {
      .                   let length = msg.len();
  6,929 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .           
 53,649 ( 0.01%)          if nbuf + length < BUFFER_SIZE {
      .                       unsafe {
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .           
 19,616 ( 0.00%)                  if length <= 8 {
      .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
      .                           } else {
      .                               // This memcpy is *not* optimized away.
      .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
      .                           }
      .                       }
      .           
  9,828 ( 0.00%)              self.nbuf = nbuf + length;
      .           
      .                       return;
      .                   }
      .           
  5,563 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
      .               }
      .           
      .               // A write function for byte slices that should only be called when the
      .               // write would cause the buffer to fill.
      .               //
      .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
      .               // and `msg` must contain enough bytes to initialize the rest of the element
      .               // containing the byte offset `self.nbuf`.
      .               #[inline(never)]
  4,265 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
      .                   let length = msg.len();
    853 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
      .           
      .                   // Always copy first part of input into current element of buffer.
      .                   // This function should only be called when the write fills the buffer,
      .                   // so we know that there is enough input to fill the current element.
  2,559 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
    853 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
      .           
      .                   let src = msg.as_ptr();
      .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
      .           
      .                   // Process buffer.
      .           
      .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
      .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
      .                   // We know that is true, because last step ensured we have a full
      .                   // element in the buffer.
  1,706 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
      .           
      .                   for i in 0..last {
  6,568 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
  7,421 ( 0.00%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
 13,136 ( 0.00%)              self.state.v0 ^= elem;
      .                   }
      .           
      .                   // Process the remaining element-sized chunks of input.
      .                   let mut processed = needed_in_elem;
  1,706 ( 0.00%)          let input_left = length - processed;
    609 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
      .                   let extra_bytes_left = input_left % ELEM_SIZE;
      .           
      .                   for _ in 0..elems_left {
    437 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
    437 ( 0.00%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
    437 ( 0.00%)              self.state.v0 ^= elem;
    874 ( 0.00%)              processed += ELEM_SIZE;
      .                   }
      .           
      .                   // Copy remaining input into start of buffer.
      .                   let src = msg.as_ptr().add(processed);
      .                   let dst = self.buf.as_mut_ptr() as *mut u8;
      .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
      .           
    853 ( 0.00%)          self.nbuf = extra_bytes_left;
  4,265 ( 0.00%)          self.processed += nbuf + processed;
  5,118 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn finish128(mut self) -> (u64, u64) {
      .                   debug_assert!(self.nbuf < BUFFER_SIZE);
      .           
      .                   // Process full elements in buffer.
  7,515 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
      .           
      .                   // Since we're consuming self, avoid updating members for a potential
      .                   // performance gain.
 10,020 ( 0.00%)          let mut state = self.state;
      .           
      .                   for i in 0..last {
  6,798 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
  6,798 ( 0.00%)              state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut state);
  6,798 ( 0.00%)              state.v0 ^= elem;
      .                   }
      .           
      .                   // Get remaining partial element.
  5,010 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
      .                       unsafe {
      .                           // Ensure element is initialized by writing zero bytes. At most
      .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
      .                           // to write this many because we have the spill and we maintain
      .                           // `self.nbuf` such that this write will start before the spill.
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
      .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
  2,116 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
      .                       }
      .                   } else {
      .                       0
      .                   };
      .           
      .                   // Finalize the hash.
  7,126 ( 0.00%)          let length = self.processed + self.nbuf;
  5,008 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
      .           
  2,504 ( 0.00%)          state.v3 ^= b;
      .                   Sip24Rounds::c_rounds(&mut state);
  2,504 ( 0.00%)          state.v0 ^= b;
      .           
  2,504 ( 0.00%)          state.v2 ^= 0xee;
      .                   Sip24Rounds::d_rounds(&mut state);
  7,760 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
      .           
  2,750 ( 0.00%)          state.v1 ^= 0xdd;
      .                   Sip24Rounds::d_rounds(&mut state);
  2,750 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
      .           
      .                   (_0, _1)
      .               }
      .           }
      .           
      .           impl Hasher for SipHasher128 {
      .               #[inline]
      .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
      .           }
      .           
      .           #[derive(Debug, Clone, Default)]
      .           struct Sip24Rounds;
      .           
      .           impl Sip24Rounds {
      .               #[inline]
      .               fn c_rounds(state: &mut State) {
386,039 ( 0.10%)          compress!(state);
422,472 ( 0.11%)          compress!(state);
      .               }
      .           
      .               #[inline]
      .               fn d_rounds(state: &mut State) {
 15,516 ( 0.00%)          compress!(state);
 15,516 ( 0.00%)          compress!(state);
 15,516 ( 0.00%)          compress!(state);
 13,013 ( 0.00%)          compress!(state);
      .               }
      .           }

 84,154 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir               

-- line 27 ----------------------------------------
      .           impl CacheEntry {
      .               #[inline]
      .               fn update(
      .                   &mut self,
      .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
      .                   pos: BytePos,
      .                   time_stamp: usize,
      .               ) {
  2,263 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
    839 ( 0.00%)              self.file = file;
  1,369 ( 0.00%)              self.file_index = file_idx;
      .                   }
      .           
    834 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
      .                   let line_bounds = self.file.line_bounds(line_index);
  3,140 ( 0.00%)          self.line_number = line_index + 1;
  4,415 ( 0.00%)          self.line = line_bounds;
      .                   self.touch(time_stamp);
      .               }
      .           
      .               #[inline]
      .               fn touch(&mut self, time_stamp: usize) {
 23,407 ( 0.01%)          self.time_stamp = time_stamp;
      .               }
      .           }
      .           
      .           #[derive(Clone)]
      .           pub struct CachingSourceMapView<'sm> {
      .               source_map: &'sm SourceMap,
      .               line_cache: [CacheEntry; 3],
      .               time_stamp: usize,
      .           }
      .           
      .           impl<'sm> CachingSourceMapView<'sm> {
    768 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
      .                   let files = source_map.files();
    384 ( 0.00%)          let first_file = files[0].clone();
      .                   let entry = CacheEntry {
      .                       time_stamp: 0,
      .                       line_number: 0,
      .                       line: BytePos(0)..BytePos(0),
      .                       file: first_file,
      .                       file_index: 0,
      .                   };
      .           
  1,920 ( 0.00%)          CachingSourceMapView {
      .                       source_map,
  2,688 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
      .                       time_stamp: 0,
      .                   }
  1,536 ( 0.00%)      }
      .           
      .               pub fn byte_pos_to_line_and_col(
      .                   &mut self,
      .                   pos: BytePos,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
      .                   self.time_stamp += 1;
      .           
      .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
      .                   };
      .           
      .                   let cache_entry = &mut self.line_cache[oldest];
      .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
      .           
      .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
      .               }
      .           
 87,059 ( 0.02%)      pub fn span_data_to_lines_and_cols(
      .                   &mut self,
      .                   span_data: &SpanData,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
 49,748 ( 0.01%)          self.time_stamp += 1;
      .           
      .                   // Check if lo and hi are in the cached lines.
 12,437 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
 12,437 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
      .           
 22,024 ( 0.01%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
      .                       // Cache hit for span lo and hi. Check if they belong to the same file.
      .                       let result = {
 21,940 ( 0.01%)                  let lo = &self.line_cache[lo_cache_idx as usize];
      .                           let hi = &self.line_cache[hi_cache_idx as usize];
      .           
 65,820 ( 0.02%)                  if lo.file_index != hi.file_index {
      .                               return None;
      .                           }
      .           
      .                           (
 21,940 ( 0.01%)                      lo.file.clone(),
      .                               lo.line_number,
      .                               span_data.lo - lo.line.start,
 10,970 ( 0.00%)                      hi.line_number,
      .                               span_data.hi - hi.line.start,
      .                           )
      .                       };
      .           
 10,970 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
 10,970 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
      .           
 43,880 ( 0.01%)              return Some(result);
      .                   }
      .           
      .                   // No cache hit or cache hit for only one of span lo and hi.
  2,850 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
      .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
      .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
      .                   } else {
      .                       self.oldest_cache_entry_index()
      .                   };
      .           
      .                   // If the entry doesn't point to the correct file, get the new file and index.
      .                   // Return early if the file containing beginning of span doesn't contain end of span.
 11,732 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
  3,165 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
  3,798 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
      .                           return None;
      .                       }
      .           
  2,532 ( 0.00%)              Some(new_file_and_idx)
      .                   } else {
      .                       let file = &self.line_cache[oldest].file;
  2,502 ( 0.00%)              if !file_contains(&file, span_data.hi) {
      .                           return None;
      .                       }
      .           
  2,502 ( 0.00%)              None
      .                   };
      .           
      .                   // Update the cache entries.
  7,335 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
      .                       // Oldest cache entry is for span_data.lo line.
      .                       (-1, -1) => {
      .                           let lo = &mut self.line_cache[oldest];
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
      .           
  3,081 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
      .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
      .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
      .                               let hi = &mut self.line_cache[next_oldest];
      .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
      .                               (oldest, next_oldest)
      .                           } else {
      .                               (oldest, oldest)
      .                           }
      .                       }
      .                       // Oldest cache entry is for span_data.lo line.
      .                       (-1, _) => {
      .                           let lo = &mut self.line_cache[oldest];
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
     84 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
    126 ( 0.00%)                  hi.touch(self.time_stamp);
      .                           (oldest, hi_cache_idx as usize)
      .                       }
      .                       // Oldest cache entry is for span_data.hi line.
      .                       (_, -1) => {
      .                           let hi = &mut self.line_cache[oldest];
    398 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
    796 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
  1,592 ( 0.00%)                  lo.touch(self.time_stamp);
      .                           (lo_cache_idx as usize, oldest)
      .                       }
      .                       _ => {
      .                           panic!();
      .                       }
      .                   };
      .           
      .                   let lo = &self.line_cache[lo_idx];
      .                   let hi = &self.line_cache[hi_idx];
      .           
      .                   // Span lo and hi may equal line end when last line doesn't
      .                   // end in newline, hence the inclusive upper bounds below.
  2,934 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
  1,467 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
  2,934 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
  1,467 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
  7,335 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
  4,401 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
  4,401 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
      .           
  4,401 ( 0.00%)          Some((
  1,467 ( 0.00%)              lo.file.clone(),
      .                       lo.line_number,
      .                       span_data.lo - lo.line.start,
  1,467 ( 0.00%)              hi.line_number,
      .                       span_data.hi - hi.line.start,
      .                   ))
111,933 ( 0.03%)      }
      .           
      .               fn cache_entry_index(&self, pos: BytePos) -> isize {
      .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
113,911 ( 0.03%)              if cache_entry.line.contains(&pos) {
      .                           return idx as isize;
      .                       }
      .                   }
      .           
      .                   -1
      .               }
      .           
      .               fn oldest_cache_entry_index(&self) -> usize {
      .                   let mut oldest = 0;
      .           
      .                   for idx in 1..self.line_cache.len() {
  6,162 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
      .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
      .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
      .           
      .                   for idx in 0..self.line_cache.len() {
  3,208 ( 0.00%)              if idx != avoid_idx
  1,392 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
      .                       {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
  3,165 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
    633 ( 0.00%)          if !self.source_map.files().is_empty() {
  1,266 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
      .                       let file = &self.source_map.files()[file_idx];
      .           
  5,064 ( 0.00%)              if file_contains(file, pos) {
      .                           return Some((file.clone(), file_idx));
      .                       }
      .                   }
      .           
      .                   None
  3,165 ( 0.00%)      }
      .           }
      .           
      .           #[inline]
      .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
      .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
      .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
      .               // purposes of converting a byte position to a line and column number, we can't come up with a
      .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

157,278 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core.rs
--------------------------------------------------------------------------------
Ir               

-- line 26 ----------------------------------------
      .               /// indices mapping from the entry hash to its index.
      .               indices: RawTable<usize>,
      .               /// entries is a dense vec of entries in their order.
      .               entries: Vec<Bucket<K, V>>,
      .           }
      .           
      .           #[inline(always)]
      .           fn get_hash<K, V>(entries: &[Bucket<K, V>]) -> impl Fn(&usize) -> u64 + '_ {
122,829 ( 0.03%)      move |&i| entries[i].hash.get()
      .           }
      .           
      .           #[inline]
      .           fn equivalent<'a, K, V, Q: ?Sized + Equivalent<K>>(
      .               key: &'a Q,
      .               entries: &'a [Bucket<K, V>],
      .           ) -> impl Fn(&usize) -> bool + 'a {
 34,006 ( 0.01%)      move |&i| Q::equivalent(key, &entries[i].key)
      .           }
      .           
      .           #[inline]
      .           fn erase_index(table: &mut RawTable<usize>, hash: HashValue, index: usize) {
      .               table.erase_entry(hash.get(), move |&i| i == index);
      .           }
      .           
      .           #[inline]
-- line 50 ----------------------------------------
-- line 96 ----------------------------------------
      .           
      .               #[inline]
      .               fn into_entries(self) -> Vec<Self::Entry> {
      .                   self.entries
      .               }
      .           
      .               #[inline]
      .               fn as_entries(&self) -> &[Self::Entry] {
    105 ( 0.00%)          &self.entries
      .               }
      .           
      .               #[inline]
      .               fn as_entries_mut(&mut self) -> &mut [Self::Entry] {
      .                   &mut self.entries
      .               }
      .           
      .               fn with_entries<F>(&mut self, f: F)
-- line 112 ----------------------------------------
-- line 124 ----------------------------------------
      .                   IndexMapCore {
      .                       indices: RawTable::new(),
      .                       entries: Vec::new(),
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub(crate) fn with_capacity(n: usize) -> Self {
     30 ( 0.00%)          IndexMapCore {
      .                       indices: RawTable::with_capacity(n),
      .                       entries: Vec::with_capacity(n),
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub(crate) fn len(&self) -> usize {
  1,448 ( 0.00%)          self.indices.len()
      .               }
      .           
      .               #[inline]
      .               pub(crate) fn capacity(&self) -> usize {
      .                   cmp::min(self.indices.capacity(), self.entries.capacity())
      .               }
      .           
      .               pub(crate) fn clear(&mut self) {
-- line 148 ----------------------------------------
-- line 152 ----------------------------------------
      .           
      .               pub(crate) fn truncate(&mut self, len: usize) {
      .                   if len < self.len() {
      .                       self.erase_indices(len, self.entries.len());
      .                       self.entries.truncate(len);
      .                   }
      .               }
      .           
    117 ( 0.00%)      pub(crate) fn drain<R>(&mut self, range: R) -> Drain<'_, Bucket<K, V>>
      .               where
      .                   R: RangeBounds<usize>,
      .               {
     39 ( 0.00%)          let range = simplify_range(range, self.entries.len());
      .                   self.erase_indices(range.start, range.end);
      .                   self.entries.drain(range)
    104 ( 0.00%)      }
      .           
      .               #[cfg(feature = "rayon")]
      .               pub(crate) fn par_drain<R>(&mut self, range: R) -> rayon::vec::Drain<'_, Bucket<K, V>>
      .               where
      .                   K: Send,
      .                   V: Send,
      .                   R: RangeBounds<usize>,
      .               {
-- line 175 ----------------------------------------
-- line 194 ----------------------------------------
      .               /// Reserve capacity for `additional` more key-value pairs.
      .               pub(crate) fn reserve(&mut self, additional: usize) {
      .                   self.indices.reserve(additional, get_hash(&self.entries));
      .                   self.reserve_entries();
      .               }
      .           
      .               /// Reserve entries capacity to match the indices
      .               fn reserve_entries(&mut self) {
  4,689 ( 0.00%)          let additional = self.indices.capacity() - self.entries.len();
      .                   self.entries.reserve_exact(additional);
      .               }
      .           
      .               /// Shrink the capacity of the map as much as possible.
      .               pub(crate) fn shrink_to_fit(&mut self) {
      .                   self.indices.shrink_to(0, get_hash(&self.entries));
      .                   self.entries.shrink_to_fit();
      .               }
-- line 210 ----------------------------------------
-- line 218 ----------------------------------------
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
      .               /// Append a key-value pair, *without* checking whether it already exists,
      .               /// and return the pair's new index.
      .               fn push(&mut self, hash: HashValue, key: K, value: V) -> usize {
 20,109 ( 0.01%)          let i = self.entries.len();
      .                   self.indices.insert(hash.get(), i, get_hash(&self.entries));
 41,107 ( 0.01%)          if i == self.entries.capacity() {
      .                       // Reserve our own capacity synced to the indices,
      .                       // rather than letting `Vec::push` just double it.
      .                       self.reserve_entries();
      .                   }
124,490 ( 0.03%)          self.entries.push(Bucket { hash, key, value });
      .                   i
      .               }
      .           
      .               /// Return the index in `entries` where an equivalent key can be found
  2,636 ( 0.00%)      pub(crate) fn get_index_of<Q>(&self, hash: HashValue, key: &Q) -> Option<usize>
      .               where
      .                   Q: ?Sized + Equivalent<K>,
      .               {
    812 ( 0.00%)          let eq = equivalent(key, &self.entries);
      .                   self.indices.get(hash.get(), eq).copied()
  2,642 ( 0.00%)      }
      .           
  3,750 ( 0.00%)      pub(crate) fn insert_full(&mut self, hash: HashValue, key: K, value: V) -> (usize, Option<V>)
      .               where
      .                   K: Eq,
      .               {
     10 ( 0.00%)          match self.get_index_of(hash, &key) {
      .                       Some(i) => (i, Some(replace(&mut self.entries[i].value, value))),
    632 ( 0.00%)              None => (self.push(hash, key, value), None),
      .                   }
  3,546 ( 0.00%)      }
      .           
      .               /// Remove an entry by shifting all entries that follow it
      .               pub(crate) fn shift_remove_full<Q>(&mut self, hash: HashValue, key: &Q) -> Option<(usize, K, V)>
      .               where
      .                   Q: ?Sized + Equivalent<K>,
      .               {
      .                   let eq = equivalent(key, &self.entries);
      .                   match self.indices.remove_entry(hash.get(), eq) {
-- line 262 ----------------------------------------
-- line 361 ----------------------------------------
      .                   let (init, shifted_entries) = self.entries.split_at(end);
      .                   let (start_entries, erased_entries) = init.split_at(start);
      .           
      .                   let erased = erased_entries.len();
      .                   let shifted = shifted_entries.len();
      .                   let half_capacity = self.indices.buckets() / 2;
      .           
      .                   // Use a heuristic between different strategies
     26 ( 0.00%)          if erased == 0 {
      .                       // Degenerate case, nothing to do
      .                   } else if start + shifted < half_capacity && start < erased {
      .                       // Reinsert everything, as there are few kept indices
      .                       self.indices.clear();
      .           
      .                       // Reinsert stable indices
      .                       for (i, entry) in enumerate(start_entries) {
      .                           self.indices.insert_no_grow(entry.hash.get(), i);
-- line 377 ----------------------------------------
-- line 457 ----------------------------------------
      .               Vacant(VacantEntry<'a, K, V>),
      .           }
      .           
      .           impl<'a, K, V> Entry<'a, K, V> {
      .               /// Inserts the given default value in the entry if it is vacant and returns a mutable
      .               /// reference to it. Otherwise a mutable reference to an already existent value is returned.
      .               ///
      .               /// Computes in **O(1)** time (amortized average).
     35 ( 0.00%)      pub fn or_insert(self, default: V) -> &'a mut V {
     10 ( 0.00%)          match self {
      .                       Entry::Occupied(entry) => entry.into_mut(),
     25 ( 0.00%)              Entry::Vacant(entry) => entry.insert(default),
      .                   }
     40 ( 0.00%)      }
      .           
      .               /// Inserts the result of the `call` function in the entry if it is vacant and returns a mutable
      .               /// reference to it. Otherwise a mutable reference to an already existent value is returned.
      .               ///
      .               /// Computes in **O(1)** time (amortized average).
 30,718 ( 0.01%)      pub fn or_insert_with<F>(self, call: F) -> &'a mut V
      .               where
      .                   F: FnOnce() -> V,
      .               {
  7,680 ( 0.00%)          match self {
  2,277 ( 0.00%)              Entry::Occupied(entry) => entry.into_mut(),
  2,151 ( 0.00%)              Entry::Vacant(entry) => entry.insert(call()),
      .                   }
 30,720 ( 0.01%)      }
      .           
      .               /// Inserts the result of the `call` function with a reference to the entry's key if it is
      .               /// vacant, and returns a mutable reference to the new value. Otherwise a mutable reference to
      .               /// an already existent value is returned.
      .               ///
      .               /// Computes in **O(1)** time (amortized average).
      .               pub fn or_insert_with_key<F>(self, call: F) -> &'a mut V
      .               where
-- line 492 ----------------------------------------
-- line 531 ----------------------------------------
      .                       x => x,
      .                   }
      .               }
      .           
      .               /// Inserts a default-constructed value in the entry if it is vacant and returns a mutable
      .               /// reference to it. Otherwise a mutable reference to an already existent value is returned.
      .               ///
      .               /// Computes in **O(1)** time (amortized average).
134,974 ( 0.03%)      pub fn or_default(self) -> &'a mut V
      .               where
      .                   V: Default,
      .               {
 38,564 ( 0.01%)          match self {
  1,744 ( 0.00%)              Entry::Occupied(entry) => entry.into_mut(),
 52,614 ( 0.01%)              Entry::Vacant(entry) => entry.insert(V::default()),
      .                   }
154,256 ( 0.04%)      }
      .           }
      .           
      .           impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for Entry<'_, K, V> {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   match *self {
      .                       Entry::Vacant(ref v) => f.debug_tuple(stringify!(Entry)).field(v).finish(),
      .                       Entry::Occupied(ref o) => f.debug_tuple(stringify!(Entry)).field(o).finish(),
      .                   }
-- line 555 ----------------------------------------
-- line 634 ----------------------------------------
      .           
      .               /// Return the index where the key-value pair will be inserted.
      .               pub fn index(&self) -> usize {
      .                   self.map.len()
      .               }
      .           
      .               /// Inserts the entry's key and the given value into the map, and returns a mutable reference
      .               /// to the value.
  7,637 ( 0.00%)      pub fn insert(self, value: V) -> &'a mut V {
 55,712 ( 0.01%)          let i = self.map.push(self.hash, self.key, value);
    123 ( 0.00%)          &mut self.map.entries[i].value
  8,860 ( 0.00%)      }
      .           }
      .           
      .           impl<K: fmt::Debug, V> fmt::Debug for VacantEntry<'_, K, V> {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   f.debug_tuple(stringify!(VacantEntry))
      .                       .field(self.key())
      .                       .finish()
      .               }
-- line 653 ----------------------------------------

135,941 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 70 ----------------------------------------
        .           
        .                   impl<'a, T> $name<'a, T> {
        .                       // Helper function for creating a slice from the iterator.
        .                       #[inline(always)]
        .                       fn make_slice(&self) -> &'a [T] {
        .                           // SAFETY: the iterator was created from a slice with pointer
        .                           // `self.ptr` and length `len!(self)`. This guarantees that all
        .                           // the prerequisites for `from_raw_parts` are fulfilled.
   14,055 ( 0.00%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
        .                       }
        .           
        .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
        .                       // returning the old start.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
        .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               let old = self.ptr.as_ptr();
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
   89,259 ( 0.02%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
        .                               old
        .                           }
        .                       }
        .           
        .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
        .                       // returning the new end.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
-- line 101 ----------------------------------------
-- line 102 ----------------------------------------
        .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
        .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
       30 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
        .                               self.end
        .                           }
        .                       }
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<T> ExactSizeIterator for $name<'_, T> {
        .                       #[inline(always)]
        .                       fn len(&self) -> usize {
   13,990 ( 0.00%)                  len!(self)
        .                       }
        .           
        .                       #[inline(always)]
        .                       fn is_empty(&self) -> bool {
        .                           is_empty!(self)
        .                       }
        .                   }
        .           
-- line 128 ----------------------------------------
-- line 134 ----------------------------------------
        .                       fn next(&mut self) -> Option<$elem> {
        .                           // could be implemented with slices, but this avoids bounds checks
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer
        .                           // must be non-null, and slices over non-ZSTs must also have a
        .                           // non-null end pointer. The call to `next_unchecked!` is safe
        .                           // since we check if the iterator is empty first.
        .                           unsafe {
   48,486 ( 0.01%)                      assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
   13,628 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
6,712,239 ( 1.70%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
        .                                   Some(next_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
        .                       fn size_hint(&self) -> (usize, Option<usize>) {
  151,935 ( 0.04%)                  let exact = len!(self);
        .                           (exact, Some(exact))
        .                       }
        .           
        .                       #[inline]
        .                       fn count(self) -> usize {
        .                           len!(self)
        .                       }
        .           
        .                       #[inline]
        .                       fn nth(&mut self, n: usize) -> Option<$elem> {
    1,568 ( 0.00%)                  if n >= len!(self) {
        .                               // This iterator is now empty.
        .                               if mem::size_of::<T>() == 0 {
        .                                   // We have to do it this way as `ptr` may never be 0, but `end`
        .                                   // could be (due to wrapping).
        .                                   self.end = self.ptr.as_ptr();
        .                               } else {
        .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
        .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
        .                       // faster to compile.
        .                       #[inline]
        .                       fn for_each<F>(mut self, mut f: F)
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item),
        .                       {
        .                           while let Some(x) = self.next() {
      604 ( 0.00%)                      f(x);
        .                           }
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn all<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
      169 ( 0.00%)                  while let Some(x) = self.next() {
    5,106 ( 0.00%)                      if !f(x) {
        .                                   return false;
        .                               }
        .                           }
        .                           true
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
    3,336 ( 0.00%)              fn any<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
   44,588 ( 0.01%)                  while let Some(x) = self.next() {
   68,837 ( 0.02%)                      if f(x) {
        .                                   return true;
        .                               }
        .                           }
        .                           false
    3,336 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
        .                       where
        .                           Self: Sized,
        .                           P: FnMut(&Self::Item) -> bool,
        .                       {
    2,367 ( 0.00%)                  while let Some(x) = self.next() {
   18,017 ( 0.00%)                      if predicate(&x) {
        .                                   return Some(x);
        .                               }
        .                           }
        .                           None
    4,336 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> Option<B>,
        .                       {
   10,393 ( 0.00%)                  while let Some(x) = self.next() {
   30,065 ( 0.01%)                      if let Some(y) = f(x) {
    5,597 ( 0.00%)                          return Some(y);
        .                               }
        .                           }
        .                           None
    1,545 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       #[rustc_inherit_overflow_checks]
        .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           Self: Sized,
        .                           P: FnMut(Self::Item) -> bool,
        .                       {
        .                           let n = len!(self);
        .                           let mut i = 0;
        .                           while let Some(x) = self.next() {
   32,704 ( 0.01%)                      if predicate(x) {
        .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
        .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                               i += 1;
        .                           }
        .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           P: FnMut(Self::Item) -> bool,
        .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
        .                       {
        .                           let n = len!(self);
        .                           let mut i = n;
    2,537 ( 0.00%)                  while let Some(x) = self.next_back() {
   30,263 ( 0.01%)                      i -= 1;
   26,774 ( 0.01%)                      if predicate(x) {
        .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
        .                                   // and is only decreasing.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                           }
        .                           None
        .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
        .                           // the returned references is guaranteed to refer to an element
        .                           // of the slice and thus guaranteed to be valid.
        .                           //
        .                           // Also note that the caller also guarantees that we're never
        .                           // called with the same index again, and that no other methods
        .                           // that will access this subslice are called, so it is valid
        .                           // for the returned reference to be mutable in the case of
        .                           // `IterMut`
    9,769 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
        .                       }
        .           
        .                       $($extra)*
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
        .                       #[inline]
-- line 348 ----------------------------------------
-- line 351 ----------------------------------------
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
        .                           // and slices over non-ZSTs must also have a non-null end pointer.
        .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
        .                           // empty first.
        .                           unsafe {
        .                               assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
       30 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
  102,345 ( 0.03%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
        .                                   Some(next_back_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
-- line 369 ----------------------------------------

1,031,118 ( 0.26%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir               

-- line 186 ----------------------------------------
      .           /// // use the values stored in map
      .           /// ```
      .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
      .               pub(crate) hash_builder: S,
      .               pub(crate) table: RawTable<(K, V), A>,
      .           }
      .           
      .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
    104 ( 0.00%)      fn clone(&self) -> Self {
    355 ( 0.00%)          HashMap {
      .                       hash_builder: self.hash_builder.clone(),
     66 ( 0.00%)              table: self.table.clone(),
      .                   }
    117 ( 0.00%)      }
      .           
      .               fn clone_from(&mut self, source: &Self) {
      .                   self.table.clone_from(&source.table);
      .           
      .                   // Update hash_builder only if we successfully cloned all elements.
      .                   self.hash_builder.clone_from(&source.hash_builder);
      .               }
      .           }
-- line 207 ----------------------------------------
-- line 210 ----------------------------------------
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash,
      .               S: BuildHasher,
      .           {
 17,595 ( 0.00%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
      .           }
      .           
      .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: ?Sized + Eq,
      .           {
 52,980 ( 0.01%)      move |x| k.eq(x.0.borrow())
      .           }
      .           
      .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: ?Sized + Eq,
      .           {
 71,384 ( 0.02%)      move |x| k.eq(x.borrow())
      .           }
      .           
      .           #[cfg(not(feature = "nightly"))]
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
      .               use core::hash::Hasher;
      .               let mut state = hash_builder.build_hasher();
      .               val.hash(&mut state);
      .               state.finish()
      .           }
      .           
      .           #[cfg(feature = "nightly")]
      .           #[cfg_attr(feature = "inline-more", inline)]
      8 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash + ?Sized,
      .               S: BuildHasher,
      .           {
      .               hash_builder.hash_one(val)
     16 ( 0.00%)  }
      .           
      .           #[cfg(not(feature = "nightly"))]
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
      .           where
      .               K: Hash,
      .               S: BuildHasher,
      .           {
-- line 274 ----------------------------------------
-- line 367 ----------------------------------------
      .               /// let s = DefaultHashBuilder::default();
      .               /// let mut map = HashMap::with_hasher(s);
      .               /// map.insert(1, 2);
      .               /// ```
      .               ///
      .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub const fn with_hasher(hash_builder: S) -> Self {
 28,855 ( 0.01%)          Self {
      .                       hash_builder,
      .                       table: RawTable::new(),
      .                   }
      .               }
      .           
      .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
      .               /// to hash the keys.
      .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
      .               /// use hashbrown::hash_map::DefaultHashBuilder;
      .               ///
      .               /// let s = DefaultHashBuilder::default();
      .               /// let mut map = HashMap::with_hasher(s);
      .               /// map.insert(1, 2);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
     88 ( 0.00%)          Self {
      .                       hash_builder,
      .                       table: RawTable::new_in(alloc),
      .                   }
      .               }
      .           
      .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
      .               /// to hash the keys. It will be allocated with the given allocator.
      .               ///
-- line 453 ----------------------------------------
-- line 663 ----------------------------------------
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// assert_eq!(a.len(), 0);
      .               /// a.insert(1, "a");
      .               /// assert_eq!(a.len(), 1);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn len(&self) -> usize {
  2,567 ( 0.00%)          self.table.len()
      .               }
      .           
      .               /// Returns `true` if the map contains no elements.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// assert!(a.is_empty());
      .               /// a.insert(1, "a");
      .               /// assert!(!a.is_empty());
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn is_empty(&self) -> bool {
 10,850 ( 0.00%)          self.len() == 0
      .               }
      .           
      .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
      .               /// allocated memory for reuse.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// a.insert(1, "a");
      .               /// a.clear();
      .               /// assert!(a.is_empty());
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      6 ( 0.00%)      pub fn clear(&mut self) {
      .                   self.table.clear();
      6 ( 0.00%)      }
      .           
      .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
      .               /// The map cannot be used after calling this.
      .               /// The iterator element type is `K`.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
      .               /// }
      .               ///
      .               /// assert_eq!(letters[&'s'], 2);
      .               /// assert_eq!(letters[&'t'], 3);
      .               /// assert_eq!(letters[&'u'], 1);
      .               /// assert_eq!(letters.get(&'y'), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
    340 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
      .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
      .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
     10 ( 0.00%)              Entry::Occupied(OccupiedEntry {
      .                           hash,
      .                           key: Some(key),
      .                           elem,
      .                           table: self,
      .                       })
      .                   } else {
    415 ( 0.00%)              Entry::Vacant(VacantEntry {
      .                           hash,
      .                           key,
      .                           table: self,
      .                       })
      .                   }
    425 ( 0.00%)      }
      .           
      .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
      .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
      .               /// ```
      .               #[inline]
      .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
 76,843 ( 0.02%)          match self.get_inner(k) {
      .                       Some(&(_, ref v)) => Some(v),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Returns the key-value pair corresponding to the supplied key.
      .               ///
      .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
146,315 ( 0.04%)          if self.table.is_empty() {
      .                       None
      .                   } else {
      4 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
      .                       self.table.get(hash, equivalent_key(k))
      .                   }
      .               }
      .           
      .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
      .               ///
      .               /// The supplied key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// assert_eq!(map.contains_key(&1), true);
      .               /// assert_eq!(map.contains_key(&2), false);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
 50,857 ( 0.01%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   self.get_inner(k).is_some()
 64,584 ( 0.02%)      }
      .           
      .               /// Returns a mutable reference to the value corresponding to the key.
      .               ///
      .               /// The key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
      .               ///
      .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// if let Some(x) = map.get_mut(&1) {
      .               ///     *x = "b";
      .               /// }
      .               /// assert_eq!(map[&1], "b");
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
     77 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
    231 ( 0.00%)          match self.get_inner_mut(k) {
      .                       Some(&mut (_, ref mut v)) => Some(v),
      .                       None => None,
      .                   }
    154 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
     77 ( 0.00%)          if self.table.is_empty() {
      .                       None
      .                   } else {
      .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
      .                       self.table.get_mut(hash, equivalent_key(k))
      .                   }
      .               }
      .           
      .               /// Attempts to get mutable references to `N` values in the map at once.
-- line 1219 ----------------------------------------
-- line 1495 ----------------------------------------
      .               /// assert_eq!(map.insert(37, "a"), None);
      .               /// assert_eq!(map.is_empty(), false);
      .               ///
      .               /// map.insert(37, "b");
      .               /// assert_eq!(map.insert(37, "c"), Some("b"));
      .               /// assert_eq!(map[&37], "c");
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
777,962 ( 0.20%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
      .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
    188 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
      2 ( 0.00%)              Some(mem::replace(item, v))
      .                   } else {
480,996 ( 0.12%)              self.table
409,708 ( 0.10%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
 45,725 ( 0.01%)              None
      .                   }
739,637 ( 0.19%)      }
      .           
      .               /// Insert a key-value pair into the map without checking
      .               /// if the key already exists in the map.
      .               ///
      .               /// Returns a reference to the key and value just inserted.
      .               ///
      .               /// This operation is safe if a key does not exist in the map.
      .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// assert_eq!(map.remove(&1), Some("a"));
      .               /// assert_eq!(map.remove(&1), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
  6,896 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
250,759 ( 0.06%)          match self.remove_entry(k) {
  2,581 ( 0.00%)              Some((_, v)) => Some(v),
  6,751 ( 0.00%)              None => None,
      .                   }
 15,657 ( 0.00%)      }
      .           
      .               /// Removes a key from the map, returning the stored key and value if the
      .               /// key was previously in the map.
      .               ///
      .               /// The key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
      .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
 61,289 ( 0.02%)          self.table.remove_entry(hash, equivalent_key(k))
      .               }
      .           }
      .           
      .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
      .               /// Creates a raw entry builder for the HashMap.
      .               ///
      .               /// Raw entries provide the lowest level of control for searching and
      .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2209 ----------------------------------------
      .               /// Creates a `RawEntryMut` from the given key and its hash.
      .               #[inline]
      .               #[allow(clippy::wrong_self_convention)]
      .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Eq,
      .               {
343,674 ( 0.09%)          self.from_hash(hash, equivalent(k))
      .               }
      .           }
      .           
      .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
      .               /// Creates a `RawEntryMut` from the given hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
876,803 ( 0.22%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   for<'b> F: FnMut(&'b K) -> bool,
      .               {
      .                   self.search(hash, is_match)
942,929 ( 0.24%)      }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   for<'b> F: FnMut(&'b K) -> bool,
      .               {
 91,392 ( 0.02%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
501,356 ( 0.13%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
      .                           elem,
      .                           table: &mut self.map.table,
      .                           hash_builder: &self.map.hash_builder,
      .                       }),
 85,818 ( 0.02%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
      .                           table: &mut self.map.table,
      .                           hash_builder: &self.map.hash_builder,
      .                       }),
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
      .               {
      .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
      .                   self.from_key_hashed_nocheck(hash, k)
      .               }
      .           
      .               /// Access an entry by a key and its hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
184,850 ( 0.05%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Eq,
      .               {
254,733 ( 0.06%)          self.from_hash(hash, equivalent(k))
347,201 ( 0.09%)      }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
      .               where
      .                   F: FnMut(&K) -> bool,
      .               {
336,044 ( 0.09%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
      .                       Some(&(ref key, ref value)) => Some((key, value)),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Access an entry by hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
      .               /// and returns a mutable reference to it.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::shadow_unrelated)]
      .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
      .               where
      .                   K: Hash,
      .                   S: BuildHasher,
      .               {
139,428 ( 0.04%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
      .                       hash,
      .                       (key, value),
      .                       make_hasher::<K, _, V, S>(self.hash_builder),
      .                   );
      .                   (k, v)
      .               }
      .           
      .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
      .               /// map.insert("a", 1);
      .               /// map.insert("b", 2);
      .               /// map.insert("c", 3);
      .               ///
      .               /// // Not possible with .iter()
      .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
    436 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
  9,130 ( 0.00%)          IntoIter {
  5,004 ( 0.00%)              inner: self.table.into_iter(),
      .                   }
  1,308 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
      .               type Item = (&'a K, &'a V);
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
 18,975 ( 0.00%)          match self.inner.next() {
      .                       Some(x) => unsafe {
      .                           let r = x.as_ref();
    387 ( 0.00%)                  Some((&r.0, &r.1))
      .                       },
      .                       None => None,
      .                   }
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      2 ( 0.00%)          self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V> ExactSizeIterator for Iter<'_, K, V> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn len(&self) -> usize {
      .                   self.inner.len()
      .               }
      .           }
-- line 3013 ----------------------------------------
-- line 3051 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
      .               type Item = (K, V);
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<(K, V)> {
    232 ( 0.00%)          self.inner.next()
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
      .                   f.debug_list().entries(self.iter()).finish()
      .               }
      .           }
      .           
      .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
      .               type Item = &'a K;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
     14 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
      .                   match self.inner.next() {
      .                       Some((k, _)) => Some(k),
      .                       None => None,
      .                   }
     28 ( 0.00%)      }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 3819 ----------------------------------------
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn insert(self, value: V) -> &'a mut V
      .               where
      .                   K: Hash,
      .                   S: BuildHasher,
      .               {
      .                   let table = &mut self.table.table;
     32 ( 0.00%)          let entry = table.insert_entry(
      .                       self.hash,
      .                       (self.key, value),
      .                       make_hasher::<K, _, V, S>(&self.table.hash_builder),
      .                   );
      .                   &mut entry.1
      .               }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3835 ----------------------------------------
-- line 4557 ----------------------------------------
      .           /// keys with new values returned from the iterator.
      .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
      .           where
      .               K: Eq + Hash,
      .               S: BuildHasher,
      .               A: Allocator + Clone,
      .           {
      .               #[cfg_attr(feature = "inline-more", inline)]
  8,477 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
      .                   // Keys may be already present or show multiple times in the iterator.
      .                   // Reserve the entire hint lower bound if the map is empty.
      .                   // Otherwise reserve half the hint (rounded up), so the map
      .                   // will only resize twice in the worst case.
  7,175 ( 0.00%)          let iter = iter.into_iter();
  2,960 ( 0.00%)          let reserve = if self.is_empty() {
      .                       iter.size_hint().0
      .                   } else {
      7 ( 0.00%)              (iter.size_hint().0 + 1) / 2
      .                   };
      .                   self.reserve(reserve);
      .                   iter.for_each(move |(k, v)| {
 24,125 ( 0.01%)              self.insert(k, v);
      .                   });
  4,851 ( 0.00%)      }
      .           
      .               #[inline]
      .               #[cfg(feature = "nightly")]
      .               fn extend_one(&mut self, (k, v): (K, V)) {
      .                   self.insert(k, v);
      .               }
      .           
      .               #[inline]
-- line 4588 ----------------------------------------

360,796 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/dl-lookup.c
  ./elf/do-rel.h
  ./malloc/malloc.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/strcmp.S

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
125,340,513 (31.75%)  events annotated

