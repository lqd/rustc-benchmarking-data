--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name url --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 -C metadata=c12cbebcca766be1 -C extra-filename=-c12cbebcca766be1 --out-dir /usr/home/liquid/tmp/.tmp4sEJLa/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmp4sEJLa/target/debug/deps --extern form_urlencoded=/usr/home/liquid/tmp/.tmp4sEJLa/target/debug/deps/libform_urlencoded-3cea3a7405cd5ecc.rmeta --extern idna=/usr/home/liquid/tmp/.tmp4sEJLa/target/debug/deps/libidna-9de2ab8db85921e0.rmeta --extern matches=/usr/home/liquid/tmp/.tmp4sEJLa/target/debug/deps/libmatches-23150ca1b1f9b6a3.rmeta --extern percent_encoding=/usr/home/liquid/tmp/.tmp4sEJLa/target/debug/deps/libpercent_encoding-6dc59570925b5fc1.rmeta -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-url-2.2.2-Check-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
1,627,343,532 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   file:function
--------------------------------------------------------------------------------
49,329,228 ( 3.03%)  ./malloc/malloc.c:_int_free
45,333,739 ( 2.79%)  ./malloc/malloc.c:_int_malloc
29,605,551 ( 1.82%)  ./malloc/malloc.c:malloc
25,352,355 ( 1.56%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
14,215,735 ( 0.87%)  ./malloc/malloc.c:free
12,684,844 ( 0.78%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
10,305,124 ( 0.63%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
 8,020,630 ( 0.49%)  ./malloc/malloc.c:malloc_consolidate
 7,531,660 ( 0.46%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
 6,132,291 ( 0.38%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
 5,981,143 ( 0.37%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 5,943,693 ( 0.37%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
 5,851,706 ( 0.36%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 5,843,372 ( 0.36%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
 5,772,124 ( 0.35%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 5,395,775 ( 0.33%)  ./malloc/malloc.c:realloc
 5,072,093 ( 0.31%)  ./malloc/malloc.c:unlink_chunk.constprop.0
 4,835,679 ( 0.30%)  ./elf/dl-lookup.c:do_lookup_x
 4,575,488 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, rustc_infer::infer::region_constraints::Constraint, rustc_infer::infer::SubregionOrigin, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<rustc_infer::infer::region_constraints::Constraint>
 4,556,225 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_middle::hir::map::Map>::attrs
 4,443,969 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
 4,229,211 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
 4,224,730 ( 0.26%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
 4,163,130 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
 4,141,271 ( 0.25%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
 4,020,770 ( 0.25%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
 3,948,680 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 3,933,611 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs:<rustc_borrowck::MirBorrowckCtxt>::access_place
 3,925,368 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 3,808,112 ( 0.23%)  ./malloc/malloc.c:_int_realloc
 3,758,542 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
 3,735,214 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::find_parent_node
 3,550,652 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
 3,445,308 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs:<rustc_infer::infer::type_variable::TypeVariableTable>::probe
 3,431,926 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/fulfill.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
 3,383,504 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::attrs
 3,348,418 ( 0.21%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
 3,107,082 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
 3,057,144 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,948,332 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/region_constraints/mod.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, rustc_infer::infer::region_constraints::Constraint, rustc_infer::infer::SubregionOrigin, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<rustc_infer::infer::region_constraints::Constraint>
 2,929,296 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 2,813,719 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::cmp::PartialEq>::eq
 2,799,619 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::source_map::SourceMap>::lookup_source_file_idx
 2,781,544 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::check
 2,773,282 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
 2,759,989 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/graph/scc/mod.rs:<rustc_data_structures::graph::scc::SccsConstruction<rustc_borrowck::constraints::graph::RegionGraph<rustc_borrowck::constraints::graph::Normal>, rustc_borrowck::constraints::ConstraintSccIndex>>::start_walk_from
 2,739,202 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,630,652 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs:<rustc_parse::lexer::StringReader>::next_token
 2,557,729 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,512,606 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::PredicateKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 2,473,815 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs:<rustc_privacy::DefIdVisitorSkeleton<rustc_privacy::TypePrivacyVisitor> as rustc_middle::ty::fold::TypeVisitor>::visit_ty
 2,406,387 ( 0.15%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<std::collections::hash::map::HashMap<rustc_middle::middle::region::Scope, (rustc_middle::middle::region::Scope, u32), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::get::<rustc_middle::middle::region::Scope>
 2,394,700 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::maybe_lint_level_root_bounded
 2,364,203 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs:rustc_mir_dataflow::drop_flag_effects::on_all_children_bits::is_terminal_path
 2,332,859 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/graph/scc/mod.rs:<rustc_data_structures::graph::scc::SccsConstruction<rustc_borrowck::constraints::graph::RegionGraph<rustc_borrowck::constraints::graph::Normal>, rustc_borrowck::constraints::ConstraintSccIndex>>::inspect_node
 2,305,276 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::sty::RegionKind>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::RegionKind, rustc_middle::ty::context::Interned<rustc_middle::ty::sty::RegionKind>>::{closure#0}>
 2,294,687 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs:<rustc_infer::infer::InferCtxtInner>::rollback_to
 2,217,939 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
 2,188,176 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>)>>::remove_entry::<hashbrown::map::equivalent_key<rustc_span::def_id::DefId, rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>>::{closure#0}>
 2,139,033 ( 0.13%)  ./elf/do-rel.h:_dl_relocate_object
 2,132,398 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::TokenCursor>::next
 2,122,802 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, ())>>::insert_entry::<hashbrown::map::make_hasher<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
 2,117,663 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs:<rustc_lexer::cursor::Cursor>::advance_token
 2,104,342 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
 2,091,786 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/traversal.rs:<rustc_middle::mir::traversal::Postorder>::traverse_successor
 2,070,359 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_predicate
 2,068,435 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump
 2,027,961 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
 2,012,240 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/interval.rs:<rustc_index::interval::IntervalSet<rustc_borrowck::region_infer::values::PointIndex>>::union
 1,999,135 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::TokenKind as core::clone::Clone>::clone
 1,990,976 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/../../stdarch/crates/core_arch/src/x86/sse2.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
 1,977,657 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs:stacker::remaining_stack
 1,966,193 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<rustc_middle::ty::subst::SubstFolder as rustc_middle::ty::fold::TypeFolder>::fold_ty
 1,939,031 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs:<rustc_parse::lexer::tokentrees::TokenTreesReader>::parse_token_tree
 1,928,624 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<&rustc_middle::ty::TyS as rustc_middle::ty::fold::TypeFoldable>::super_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
 1,925,653 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/freshen.rs:<rustc_infer::infer::freshen::TypeFreshener as rustc_middle::ty::fold::TypeFolder>::fold_ty
 1,914,819 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::Token>::is_keyword
 1,910,831 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
 1,903,221 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs:<rustc_middle::hir::map::Map>::attrs
 1,846,338 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/region_constraints/mod.rs:<rustc_infer::infer::region_constraints::RegionConstraintCollector>::make_subregion
 1,842,704 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs:<rustc_infer::infer::InferCtxtInner as ena::undo_log::Rollback<rustc_infer::infer::undo_log::UndoLog>>::reverse
 1,840,399 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
 1,825,886 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/walk.rs:<rustc_middle::ty::walk::TypeWalker as core::iter::traits::iterator::Iterator>::next
 1,817,299 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::mk_region
 1,816,058 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/bit.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 1,806,251 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 1,783,506 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sharded.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
 1,782,594 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::sty::RegionKind>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::RegionKind, rustc_middle::ty::context::Interned<rustc_middle::ty::sty::RegionKind>>::{closure#0}>
 1,771,433 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/into_iter.rs:<alloc::vec::into_iter::IntoIter<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>> as core::ops::drop::Drop>::drop
 1,760,746 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, rustc_infer::infer::region_constraints::Constraint, rustc_infer::infer::SubregionOrigin, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<rustc_infer::infer::region_constraints::Constraint>
 1,753,142 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
 1,718,898 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/cx/expr.rs:<rustc_mir_build::thir::cx::Cx>::mirror_expr_inner
 1,699,759 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::symbol::Symbol, usize)>>::reserve_rehash::<hashbrown::map::make_hasher<rustc_span::symbol::Symbol, rustc_span::symbol::Symbol, usize, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
 1,698,956 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs:rustc_mir_dataflow::drop_flag_effects::drop_flag_effects_for_location::<<rustc_mir_dataflow::impls::MaybeUninitializedPlaces as rustc_mir_dataflow::framework::GenKillAnalysis>::statement_effect<rustc_index::bit_set::BitSet<rustc_mir_dataflow::move_paths::MovePathIndex>>::{closure#0}>
 1,691,651 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/fulfill.rs:<rustc_trait_selection::traits::fulfill::FulfillProcessor>::progress_changed_obligations
 1,690,041 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/type_check/mod.rs:<rustc_borrowck::type_check::TypeChecker>::typeck_mir
 1,653,785 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs:rustc_middle::ty::relate::super_relate_tys::<rustc_infer::infer::combine::Generalizer>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir               

-- line 27 ----------------------------------------
      .           impl CacheEntry {
      .               #[inline]
      .               fn update(
      .                   &mut self,
      .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
      .                   pos: BytePos,
      .                   time_stamp: usize,
      .               ) {
  9,102 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
  5,837 ( 0.00%)              self.file = file;
  6,553 ( 0.00%)              self.file_index = file_idx;
      .                   }
      .           
  4,877 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
      .                   let line_bounds = self.file.line_bounds(line_index);
 18,014 ( 0.00%)          self.line_number = line_index + 1;
 27,827 ( 0.00%)          self.line = line_bounds;
      .                   self.touch(time_stamp);
      .               }
      .           
      .               #[inline]
      .               fn touch(&mut self, time_stamp: usize) {
106,570 ( 0.01%)          self.time_stamp = time_stamp;
      .               }
      .           }
      .           
      .           #[derive(Clone)]
      .           pub struct CachingSourceMapView<'sm> {
      .               source_map: &'sm SourceMap,
      .               line_cache: [CacheEntry; 3],
      .               time_stamp: usize,
      .           }
      .           
      .           impl<'sm> CachingSourceMapView<'sm> {
  3,212 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
      .                   let files = source_map.files();
  1,606 ( 0.00%)          let first_file = files[0].clone();
      .                   let entry = CacheEntry {
      .                       time_stamp: 0,
      .                       line_number: 0,
      .                       line: BytePos(0)..BytePos(0),
      .                       file: first_file,
      .                       file_index: 0,
      .                   };
      .           
  8,030 ( 0.00%)          CachingSourceMapView {
      .                       source_map,
 11,242 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
      .                       time_stamp: 0,
      .                   }
  6,424 ( 0.00%)      }
      .           
      .               pub fn byte_pos_to_line_and_col(
      .                   &mut self,
      .                   pos: BytePos,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
      .                   self.time_stamp += 1;
      .           
      .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
      .                   };
      .           
      .                   let cache_entry = &mut self.line_cache[oldest];
      .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
      .           
      .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
      .               }
      .           
398,545 ( 0.02%)      pub fn span_data_to_lines_and_cols(
      .                   &mut self,
      .                   span_data: &SpanData,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
227,740 ( 0.01%)          self.time_stamp += 1;
      .           
      .                   // Check if lo and hi are in the cached lines.
 56,935 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
 56,935 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
      .           
 99,562 ( 0.01%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
      .                       // Cache hit for span lo and hi. Check if they belong to the same file.
      .                       let result = {
 99,270 ( 0.01%)                  let lo = &self.line_cache[lo_cache_idx as usize];
      .                           let hi = &self.line_cache[hi_cache_idx as usize];
      .           
297,810 ( 0.02%)                  if lo.file_index != hi.file_index {
      .                               return None;
      .                           }
      .           
      .                           (
 99,270 ( 0.01%)                      lo.file.clone(),
      .                               lo.line_number,
      .                               span_data.lo - lo.line.start,
 49,635 ( 0.00%)                      hi.line_number,
      .                               span_data.hi - hi.line.start,
      .                           )
      .                       };
      .           
 49,635 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
 49,635 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
      .           
198,540 ( 0.01%)              return Some(result);
      .                   }
      .           
      .                   // No cache hit or cache hit for only one of span lo and hi.
 14,308 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
      .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
      .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
      .                   } else {
      .                       self.oldest_cache_entry_index()
      .                   };
      .           
      .                   // If the entry doesn't point to the correct file, get the new file and index.
      .                   // Return early if the file containing beginning of span doesn't contain end of span.
 57,416 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
 12,115 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
 14,538 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
      .                           return None;
      .                       }
      .           
  9,692 ( 0.00%)              Some(new_file_and_idx)
      .                   } else {
      .                       let file = &self.line_cache[oldest].file;
 14,631 ( 0.00%)              if !file_contains(&file, span_data.hi) {
      .                           return None;
      .                       }
      .           
 14,631 ( 0.00%)              None
      .                   };
      .           
      .                   // Update the cache entries.
 36,500 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
      .                       // Oldest cache entry is for span_data.lo line.
      .                       (-1, -1) => {
      .                           let lo = &mut self.line_cache[oldest];
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
      .           
 18,759 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
      .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
      .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
      .                               let hi = &mut self.line_cache[next_oldest];
      .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
      .                               (oldest, next_oldest)
      .                           } else {
      .                               (oldest, oldest)
      .                           }
      .                       }
      .                       // Oldest cache entry is for span_data.lo line.
      .                       (-1, _) => {
      .                           let lo = &mut self.line_cache[oldest];
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
    292 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
    438 ( 0.00%)                  hi.touch(self.time_stamp);
      .                           (oldest, hi_cache_idx as usize)
      .                       }
      .                       // Oldest cache entry is for span_data.hi line.
      .                       (_, -1) => {
      .                           let hi = &mut self.line_cache[oldest];
    901 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
  1,802 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
  3,604 ( 0.00%)                  lo.touch(self.time_stamp);
      .                           (lo_cache_idx as usize, oldest)
      .                       }
      .                       _ => {
      .                           panic!();
      .                       }
      .                   };
      .           
      .                   let lo = &self.line_cache[lo_idx];
      .                   let hi = &self.line_cache[hi_idx];
      .           
      .                   // Span lo and hi may equal line end when last line doesn't
      .                   // end in newline, hence the inclusive upper bounds below.
 14,600 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
  7,300 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
 14,600 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
  7,300 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
 36,500 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
 21,900 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
 21,900 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
      .           
 21,900 ( 0.00%)          Some((
  7,300 ( 0.00%)              lo.file.clone(),
      .                       lo.line_number,
      .                       span_data.lo - lo.line.start,
  7,300 ( 0.00%)              hi.line_number,
      .                       span_data.hi - hi.line.start,
      .                   ))
512,415 ( 0.03%)      }
      .           
      .               fn cache_entry_index(&self, pos: BytePos) -> isize {
      .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
627,489 ( 0.04%)              if cache_entry.line.contains(&pos) {
      .                           return idx as isize;
      .                       }
      .                   }
      .           
      .                   -1
      .               }
      .           
      .               fn oldest_cache_entry_index(&self) -> usize {
      .                   let mut oldest = 0;
      .           
      .                   for idx in 1..self.line_cache.len() {
 37,518 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
      .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
      .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
      .           
      .                   for idx in 0..self.line_cache.len() {
 16,204 ( 0.00%)              if idx != avoid_idx
  9,890 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
      .                       {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
 12,115 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
  2,423 ( 0.00%)          if !self.source_map.files().is_empty() {
  4,846 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
      .                       let file = &self.source_map.files()[file_idx];
      .           
 19,384 ( 0.00%)              if file_contains(file, pos) {
      .                           return Some((file.clone(), file_idx));
      .                       }
      .                   }
      .           
      .                   None
 12,115 ( 0.00%)      }
      .           }
      .           
      .           #[inline]
      .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
      .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
      .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
      .               // purposes of converting a byte position to a line and column number, we can't come up with a
      .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

741,941 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/walk.rs
--------------------------------------------------------------------------------
Ir               

-- line 20 ----------------------------------------
      .           ///
      .           /// It's very easy to produce a deeply
      .           /// nested type tree with a lot of
      .           /// identical subtrees. In order to work efficiently
      .           /// in this situation walker only visits each type once.
      .           /// It maintains a set of visited types and
      .           /// skips any types that are already there.
      .           impl<'tcx> TypeWalker<'tcx> {
 25,032 ( 0.00%)      pub fn new(root: GenericArg<'tcx>) -> Self {
100,128 ( 0.01%)          Self { stack: smallvec![root], last_subtree: 1, visited: SsoHashSet::new() }
 25,032 ( 0.00%)      }
      .           
      .               /// Skips the subtree corresponding to the last type
      .               /// returned by `next()`.
      .               ///
      .               /// Example: Imagine you are walking `Foo<Bar<i32>, usize>`.
      .               ///
      .               /// ```
      .               /// let mut iter: TypeWalker = ...;
      .               /// iter.next(); // yields Foo
      .               /// iter.next(); // yields Bar<i32>
      .               /// iter.skip_current_subtree(); // skips i32
      .               /// iter.next(); // yields usize
      .               /// ```
      .               pub fn skip_current_subtree(&mut self) {
    310 ( 0.00%)          self.stack.truncate(self.last_subtree);
    155 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> Iterator for TypeWalker<'tcx> {
      .               type Item = GenericArg<'tcx>;
      .           
755,487 ( 0.05%)      fn next(&mut self) -> Option<GenericArg<'tcx>> {
      .                   debug!("next(): stack={:?}", self.stack);
      .                   loop {
122,426 ( 0.01%)              let next = self.stack.pop()?;
 61,213 ( 0.00%)              self.last_subtree = self.stack.len();
122,426 ( 0.01%)              if self.visited.insert(next) {
176,733 ( 0.01%)                  push_inner(&mut self.stack, next);
      .                           debug!("next: stack={:?}", self.stack);
      .                           return Some(next);
      .                       }
      .                   }
587,601 ( 0.04%)      }
      .           }
      .           
      .           impl<'tcx> GenericArg<'tcx> {
      .               /// Iterator that walks `self` and any types reachable from
      .               /// `self`, in depth-first order. Note that just walks the types
      .               /// that appear in `self`, it does not descend into the fields of
      .               /// structs or variants. For example:
      .               ///
      .               /// ```text
      .               /// isize => { isize }
      .               /// Foo<Bar<isize>> => { Foo<Bar<isize>>, Bar<isize>, isize }
      .               /// [isize] => { [isize], isize }
      .               /// ```
 23,360 ( 0.00%)      pub fn walk(self) -> TypeWalker<'tcx> {
 11,680 ( 0.00%)          TypeWalker::new(self)
 35,040 ( 0.00%)      }
      .           
      .               /// Iterator that walks the immediate children of `self`. Hence
      .               /// `Foo<Bar<i32>, u32>` yields the sequence `[Bar<i32>, u32]`
      .               /// (but not `i32`, like `walk`).
      .               ///
      .               /// Iterator only walks items once.
      .               /// It accepts visited set, updates it with all visited types
      .               /// and skips any types that are already there.
 60,350 ( 0.00%)      pub fn walk_shallow(
      .                   self,
      .                   visited: &mut SsoHashSet<GenericArg<'tcx>>,
      .               ) -> impl Iterator<Item = GenericArg<'tcx>> {
      .                   let mut stack = SmallVec::new();
 12,070 ( 0.00%)          push_inner(&mut stack, self);
 24,140 ( 0.00%)          stack.retain(|a| visited.insert(*a));
132,770 ( 0.01%)          stack.into_iter()
 60,350 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> super::TyS<'tcx> {
      .               /// Iterator that walks `self` and any types reachable from
      .               /// `self`, in depth-first order. Note that just walks the types
      .               /// that appear in `self`, it does not descend into the fields of
      .               /// structs or variants. For example:
      .               ///
      .               /// ```text
      .               /// isize => { isize }
      .               /// Foo<Bar<isize>> => { Foo<Bar<isize>>, Bar<isize>, isize }
      .               /// [isize] => { [isize], isize }
      .               /// ```
 26,704 ( 0.00%)      pub fn walk(&'tcx self) -> TypeWalker<'tcx> {
 13,352 ( 0.00%)          TypeWalker::new(self.into())
 40,056 ( 0.00%)      }
      .           }
      .           
      .           /// We push `GenericArg`s on the stack in reverse order so as to
      .           /// maintain a pre-order traversal. As of the time of this
      .           /// writing, the fact that the traversal is pre-order is not
      .           /// known to be significant to any code, but it seems like the
      .           /// natural order one would expect (basically, the order of the
      .           /// types as they are written).
425,886 ( 0.03%)  fn push_inner<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent: GenericArg<'tcx>) {
      .               match parent.unpack() {
298,975 ( 0.02%)          GenericArgKind::Type(parent_ty) => match *parent_ty.kind() {
      .                       ty::Bool
      .                       | ty::Char
      .                       | ty::Int(_)
      .                       | ty::Uint(_)
      .                       | ty::Float(_)
      .                       | ty::Str
      .                       | ty::Infer(_)
      .                       | ty::Param(_)
      .                       | ty::Never
      .                       | ty::Error(_)
      .                       | ty::Placeholder(..)
      .                       | ty::Bound(..)
      .                       | ty::Foreign(..) => {}
      .           
    554 ( 0.00%)              ty::Array(ty, len) => {
    831 ( 0.00%)                  stack.push(len.into());
      .                           stack.push(ty.into());
      .                       }
      .                       ty::Slice(ty) => {
      .                           stack.push(ty.into());
      .                       }
      .                       ty::RawPtr(mt) => {
      .                           stack.push(mt.ty.into());
      .                       }
 18,440 ( 0.00%)              ty::Ref(lt, ty, _) => {
 18,440 ( 0.00%)                  stack.push(ty.into());
      .                           stack.push(lt.into());
      .                       }
     48 ( 0.00%)              ty::Projection(data) => {
      .                           stack.extend(data.substs.iter().rev());
      .                       }
    574 ( 0.00%)              ty::Dynamic(obj, lt) => {
    574 ( 0.00%)                  stack.push(lt.into());
    574 ( 0.00%)                  stack.extend(obj.iter().rev().flat_map(|predicate| {
      .                               let (substs, opt_ty) = match predicate.skip_binder() {
      .                                   ty::ExistentialPredicate::Trait(tr) => (tr.substs, None),
      .                                   ty::ExistentialPredicate::Projection(p) => (p.substs, Some(p.term)),
      .                                   ty::ExistentialPredicate::AutoTrait(_) =>
      .                                   // Empty iterator
      .                                   {
      .                                       (ty::InternalSubsts::empty(), None)
      .                                   }
      .                               };
      .           
    435 ( 0.00%)                      substs.iter().rev().chain(opt_ty.map(|term| match term {
      .                                   ty::Term::Ty(ty) => ty.into(),
      .                                   ty::Term::Const(ct) => ct.into(),
      .                               }))
      .                           }));
      .                       }
      .                       ty::Adt(_, substs)
      .                       | ty::Opaque(_, substs)
      .                       | ty::Closure(_, substs)
      .                       | ty::Generator(_, substs, _)
  3,865 ( 0.00%)              | ty::Tuple(substs)
      .                       | ty::FnDef(_, substs) => {
      .                           stack.extend(substs.iter().rev());
      .                       }
      .                       ty::GeneratorWitness(ts) => {
      .                           stack.extend(ts.skip_binder().iter().rev().map(|ty| ty.into()));
      .                       }
  3,588 ( 0.00%)              ty::FnPtr(sig) => {
 12,558 ( 0.00%)                  stack.push(sig.skip_binder().output().into());
 14,352 ( 0.00%)                  stack.extend(sig.skip_binder().inputs().iter().copied().rev().map(|ty| ty.into()));
      .                       }
      .                   },
      .                   GenericArgKind::Lifetime(_) => {}
      .                   GenericArgKind::Const(parent_ct) => {
      .                       stack.push(parent_ct.ty.into());
    554 ( 0.00%)              match parent_ct.val {
      .                           ty::ConstKind::Infer(_)
      .                           | ty::ConstKind::Param(_)
      .                           | ty::ConstKind::Placeholder(_)
      .                           | ty::ConstKind::Bound(..)
      .                           | ty::ConstKind::Value(_)
      .                           | ty::ConstKind::Error(_) => {}
      .           
     21 ( 0.00%)                  ty::ConstKind::Unevaluated(ct) => {
      .                               stack.extend(ct.substs.iter().rev());
      .                           }
      .                       }
      .                   }
      .               }
177,500 ( 0.01%)  }

409,513 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/walk.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 59 ----------------------------------------
      .                   &mut self,
      .                   def_id: DefId,
      .                   kind: &str,
      .                   descr: &dyn fmt::Display,
      .               ) -> ControlFlow<Self::BreakTy>;
      .           
      .               /// Not overridden, but used to actually visit types and traits.
      .               fn skeleton(&mut self) -> DefIdVisitorSkeleton<'_, 'tcx, Self> {
206,841 ( 0.01%)          DefIdVisitorSkeleton {
      .                       def_id_visitor: self,
      .                       visited_opaque_tys: Default::default(),
      .                       dummy: Default::default(),
      .                   }
      .               }
    936 ( 0.00%)      fn visit(&mut self, ty_fragment: impl TypeFoldable<'tcx>) -> ControlFlow<Self::BreakTy> {
      .                   ty_fragment.visit_with(&mut self.skeleton())
  1,560 ( 0.00%)      }
    558 ( 0.00%)      fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<Self::BreakTy> {
      .                   self.skeleton().visit_trait(trait_ref)
    558 ( 0.00%)      }
      .               fn visit_projection_ty(
      .                   &mut self,
      .                   projection: ty::ProjectionTy<'tcx>,
      .               ) -> ControlFlow<Self::BreakTy> {
     44 ( 0.00%)          self.skeleton().visit_projection_ty(projection)
      .               }
      .               fn visit_predicates(
      .                   &mut self,
      .                   predicates: ty::GenericPredicates<'tcx>,
      .               ) -> ControlFlow<Self::BreakTy> {
    733 ( 0.00%)          self.skeleton().visit_predicates(predicates)
      .               }
      .           }
      .           
      .           struct DefIdVisitorSkeleton<'v, 'tcx, V: ?Sized> {
      .               def_id_visitor: &'v mut V,
      .               visited_opaque_tys: FxHashSet<DefId>,
      .               dummy: PhantomData<TyCtxt<'tcx>>,
      .           }
      .           
      .           impl<'tcx, V> DefIdVisitorSkeleton<'_, 'tcx, V>
      .           where
      .               V: DefIdVisitor<'tcx> + ?Sized,
      .           {
      .               fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<V::BreakTy> {
     93 ( 0.00%)          let TraitRef { def_id, substs } = trait_ref;
  9,371 ( 0.00%)          self.def_id_visitor.visit_def_id(def_id, "trait", &trait_ref.print_only_trait_path())?;
     93 ( 0.00%)          if self.def_id_visitor.shallow() { ControlFlow::CONTINUE } else { substs.visit_with(self) }
      .               }
      .           
  2,560 ( 0.00%)      fn visit_projection_ty(
      .                   &mut self,
      .                   projection: ty::ProjectionTy<'tcx>,
      .               ) -> ControlFlow<V::BreakTy> {
  2,048 ( 0.00%)          let (trait_ref, assoc_substs) =
    512 ( 0.00%)              projection.trait_ref_and_own_substs(self.def_id_visitor.tcx());
      .                   self.visit_trait(trait_ref)?;
      .                   if self.def_id_visitor.shallow() {
      .                       ControlFlow::CONTINUE
      .                   } else {
      .                       assoc_substs.iter().try_for_each(|subst| subst.visit_with(self))
      .                   }
  2,304 ( 0.00%)      }
      .           
      .               fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<V::BreakTy> {
    137 ( 0.00%)          match predicate.kind().skip_binder() {
      .                       ty::PredicateKind::Trait(ty::TraitPredicate {
      .                           trait_ref,
      .                           constness: _,
      .                           polarity: _,
      .                       }) => self.visit_trait(trait_ref),
      .                       ty::PredicateKind::Projection(ty::ProjectionPredicate { projection_ty, term }) => {
     14 ( 0.00%)                  term.visit_with(self)?;
     35 ( 0.00%)                  self.visit_projection_ty(projection_ty)
      .                       }
      .                       ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(ty, _region)) => {
      .                           ty.visit_with(self)
      .                       }
      .                       ty::PredicateKind::RegionOutlives(..) => ControlFlow::CONTINUE,
      .                       ty::PredicateKind::ConstEvaluatable(uv)
      .                           if self.def_id_visitor.tcx().features().generic_const_exprs =>
      .                       {
-- line 140 ----------------------------------------
-- line 157 ----------------------------------------
      .                       ACNode::Leaf(leaf) => self.visit_const(leaf),
      .                       ACNode::Cast(_, _, ty) => self.visit_ty(ty),
      .                       ACNode::Binop(..) | ACNode::UnaryOp(..) | ACNode::FunctionCall(_, _) => {
      .                           ControlFlow::CONTINUE
      .                       }
      .                   })
      .               }
      .           
  5,131 ( 0.00%)      fn visit_predicates(
      .                   &mut self,
      .                   predicates: ty::GenericPredicates<'tcx>,
      .               ) -> ControlFlow<V::BreakTy> {
      .                   let ty::GenericPredicates { parent: _, predicates } = predicates;
      .                   predicates.iter().try_for_each(|&(predicate, _span)| self.visit_predicate(predicate))
  5,864 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx, V> TypeVisitor<'tcx> for DefIdVisitorSkeleton<'_, 'tcx, V>
      .           where
      .               V: DefIdVisitor<'tcx> + ?Sized,
      .           {
      .               type BreakTy = V::BreakTy;
      .           
586,205 ( 0.04%)      fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<V::BreakTy> {
 65,295 ( 0.00%)          let tcx = self.def_id_visitor.tcx();
      .                   // InternalSubsts are not visited here because they are visited below in `super_visit_with`.
324,631 ( 0.02%)          match *ty.kind() {
 72,776 ( 0.00%)              ty::Adt(&ty::AdtDef { did: def_id, .. }, ..)
      .                       | ty::Foreign(def_id)
      .                       | ty::FnDef(def_id, ..)
      .                       | ty::Closure(def_id, ..)
      .                       | ty::Generator(def_id, ..) => {
357,018 ( 0.02%)                  self.def_id_visitor.visit_def_id(def_id, "type", &ty)?;
      .                           if self.def_id_visitor.shallow() {
      .                               return ControlFlow::CONTINUE;
      .                           }
      .                           // Default type visitor doesn't visit signatures of fn types.
      .                           // Something like `fn() -> Priv {my_func}` is considered a private type even if
      .                           // `my_func` is public, so we need to visit signatures.
 78,722 ( 0.00%)                  if let ty::FnDef(..) = ty.kind() {
      .                               tcx.fn_sig(def_id).visit_with(self)?;
      .                           }
      .                           // Inherent static methods don't have self type in substs.
      .                           // Something like `fn() {my_method}` type of the method
      .                           // `impl Pub<Priv> { pub fn my_method() {} }` is considered a private type,
      .                           // so we need to visit the self type additionally.
112,578 ( 0.01%)                  if let Some(assoc_item) = tcx.opt_associated_item(def_id) {
  7,500 ( 0.00%)                      if let ty::ImplContainer(impl_def_id) = assoc_item.container {
  2,444 ( 0.00%)                          tcx.type_of(impl_def_id).visit_with(self)?;
      .                               }
      .                           }
      .                       }
    476 ( 0.00%)              ty::Projection(proj) => {
      .                           if self.def_id_visitor.skip_assoc_tys() {
      .                               // Visitors searching for minimal visibility/reachability want to
      .                               // conservatively approximate associated types like `<Type as Trait>::Alias`
      .                               // as visible/reachable even if both `Type` and `Trait` are private.
      .                               // Ideally, associated types should be substituted in the same way as
      .                               // free type aliases, but this isn't done yet.
      .                               return ControlFlow::CONTINUE;
      .                           }
      .                           // This will also visit substs if necessary, so we don't need to recurse.
  2,374 ( 0.00%)                  return self.visit_projection_ty(proj);
      .                       }
    184 ( 0.00%)              ty::Dynamic(predicates, ..) => {
      .                           // All traits in the list are considered the "primary" part of the type
      .                           // and are visited by shallow visitors.
  1,708 ( 0.00%)                  for predicate in predicates {
  2,160 ( 0.00%)                      let trait_ref = match predicate.skip_binder() {
  1,080 ( 0.00%)                          ty::ExistentialPredicate::Trait(trait_ref) => trait_ref,
  1,860 ( 0.00%)                          ty::ExistentialPredicate::Projection(proj) => proj.trait_ref(tcx),
      .                                   ty::ExistentialPredicate::AutoTrait(def_id) => {
      .                                       ty::ExistentialTraitRef { def_id, substs: InternalSubsts::empty() }
      .                                   }
      .                               };
    360 ( 0.00%)                      let ty::ExistentialTraitRef { def_id, substs: _ } = trait_ref;
  3,672 ( 0.00%)                      self.def_id_visitor.visit_def_id(def_id, "trait", &trait_ref)?;
      .                           }
      .                       }
      .                       ty::Opaque(def_id, ..) => {
      .                           // Skip repeated `Opaque`s to avoid infinite recursion.
      .                           if self.visited_opaque_tys.insert(def_id) {
      .                               // The intent is to treat `impl Trait1 + Trait2` identically to
      .                               // `dyn Trait1 + Trait2`. Therefore we ignore def-id of the opaque type itself
      .                               // (it either has no visibility, or its visibility is insignificant, like
-- line 241 ----------------------------------------
-- line 270 ----------------------------------------
      .                       ty::Bound(..) | ty::Placeholder(..) | ty::Infer(..) => {
      .                           bug!("unexpected type: {:?}", ty)
      .                       }
      .                   }
      .           
      .                   if self.def_id_visitor.shallow() {
      .                       ControlFlow::CONTINUE
      .                   } else {
188,599 ( 0.01%)              ty.super_visit_with(self)
      .                   }
576,591 ( 0.04%)      }
      .           
      .               fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {
  2,778 ( 0.00%)          self.visit_ty(c.ty)?;
    463 ( 0.00%)          let tcx = self.def_id_visitor.tcx();
  3,241 ( 0.00%)          if let Ok(Some(ct)) = AbstractConst::from_const(tcx, c) {
      .                       self.visit_abstract_const_expr(tcx, ct)?;
      .                   }
      .                   ControlFlow::CONTINUE
      .               }
      .           }
      .           
      .           fn min(vis1: ty::Visibility, vis2: ty::Visibility, tcx: TyCtxt<'_>) -> ty::Visibility {
    431 ( 0.00%)      if vis1.is_at_least(vis2, tcx) { vis2 } else { vis1 }
      .           }
      .           
      .           ////////////////////////////////////////////////////////////////////////////////
      .           /// Visitor used to determine if pub(restricted) is used anywhere in the crate.
      .           ///
      .           /// This is done so that `private_in_public` warnings can be turned into hard errors
      .           /// in crates that have been updated to use pub(restricted).
      .           ////////////////////////////////////////////////////////////////////////////////
-- line 301 ----------------------------------------
-- line 303 ----------------------------------------
      .               tcx: TyCtxt<'tcx>,
      .               has_pub_restricted: bool,
      .           }
      .           
      .           impl<'tcx> Visitor<'tcx> for PubRestrictedVisitor<'tcx> {
      .               type NestedFilter = nested_filter::All;
      .           
      .               fn nested_visit_map(&mut self) -> Self::Map {
    785 ( 0.00%)          self.tcx.hir()
      .               }
      .               fn visit_vis(&mut self, vis: &'tcx hir::Visibility<'tcx>) {
  1,740 ( 0.00%)          self.has_pub_restricted = self.has_pub_restricted || vis.node.is_pub_restricted();
      .               }
      .           }
      .           
      .           ////////////////////////////////////////////////////////////////////////////////
      .           /// Visitor used to determine impl visibility and reachability.
      .           ////////////////////////////////////////////////////////////////////////////////
      .           
      .           struct FindMin<'a, 'tcx, VL: VisibilityLike> {
-- line 322 ----------------------------------------
-- line 336 ----------------------------------------
      .                   true
      .               }
      .               fn visit_def_id(
      .                   &mut self,
      .                   def_id: DefId,
      .                   _kind: &str,
      .                   _descr: &dyn fmt::Display,
      .               ) -> ControlFlow<Self::BreakTy> {
  3,115 ( 0.00%)          self.min = VL::new_min(self, def_id);
      .                   ControlFlow::CONTINUE
      .               }
      .           }
      .           
      .           trait VisibilityLike: Sized {
      .               const MAX: Self;
      .               const SHALLOW: bool = false;
      .               fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self;
      .           
      .               // Returns an over-approximation (`skip_assoc_tys` = true) of visibility due to
      .               // associated types for which we can't determine visibility precisely.
  2,184 ( 0.00%)      fn of_impl(def_id: LocalDefId, tcx: TyCtxt<'_>, access_levels: &AccessLevels) -> Self {
  1,040 ( 0.00%)          let mut find = FindMin { tcx, access_levels, min: Self::MAX };
    312 ( 0.00%)          find.visit(tcx.type_of(def_id));
    936 ( 0.00%)          if let Some(trait_ref) = tcx.impl_trait_ref(def_id) {
     93 ( 0.00%)              find.visit_trait(trait_ref);
      .                   }
    252 ( 0.00%)          find.min
  2,496 ( 0.00%)      }
      .           }
      .           impl VisibilityLike for ty::Visibility {
      .               const MAX: Self = ty::Visibility::Public;
  2,149 ( 0.00%)      fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self {
    921 ( 0.00%)          min(find.tcx.visibility(def_id), find.min, find.tcx)
  3,070 ( 0.00%)      }
      .           }
      .           impl VisibilityLike for Option<AccessLevel> {
      .               const MAX: Self = Some(AccessLevel::Public);
      .               // Type inference is very smart sometimes.
      .               // It can make an impl reachable even some components of its type or trait are unreachable.
      .               // E.g. methods of `impl ReachableTrait<UnreachableTy> for ReachableTy<UnreachableTy> { ... }`
      .               // can be usable from other crates (#57264). So we skip substs when calculating reachability
      .               // and consider an impl reachable if its "shallow" type and trait are reachable.
      .               //
      .               // The assumption we make here is that type-inference won't let you use an impl without knowing
      .               // both "shallow" version of its self type and "shallow" version of its trait if it exists
      .               // (which require reaching the `DefId`s in them).
      .               const SHALLOW: bool = true;
  1,164 ( 0.00%)      fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self {
      .                   cmp::min(
  1,164 ( 0.00%)              if let Some(def_id) = def_id.as_local() {
    412 ( 0.00%)                  find.access_levels.map.get(&def_id).copied()
      .                       } else {
      .                           Self::MAX
      .                       },
    842 ( 0.00%)              find.min,
      .                   )
  1,552 ( 0.00%)      }
      .           }
      .           
      .           ////////////////////////////////////////////////////////////////////////////////
      .           /// The embargo visitor, used to determine the exports of the AST.
      .           ////////////////////////////////////////////////////////////////////////////////
      .           
      .           struct EmbargoVisitor<'tcx> {
      .               tcx: TyCtxt<'tcx>,
-- line 400 ----------------------------------------
-- line 422 ----------------------------------------
      .           
      .           struct ReachEverythingInTheInterfaceVisitor<'a, 'tcx> {
      .               access_level: Option<AccessLevel>,
      .               item_def_id: LocalDefId,
      .               ev: &'a mut EmbargoVisitor<'tcx>,
      .           }
      .           
      .           impl<'tcx> EmbargoVisitor<'tcx> {
  5,692 ( 0.00%)      fn get(&self, def_id: LocalDefId) -> Option<AccessLevel> {
      .                   self.access_levels.map.get(&def_id).copied()
  5,692 ( 0.00%)      }
      .           
      .               fn update_with_hir_id(
      .                   &mut self,
      .                   hir_id: hir::HirId,
      .                   level: Option<AccessLevel>,
      .               ) -> Option<AccessLevel> {
  1,322 ( 0.00%)          let def_id = self.tcx.hir().local_def_id(hir_id);
      .                   self.update(def_id, level)
      .               }
      .           
      .               /// Updates node level and returns the updated level.
      .               fn update(&mut self, def_id: LocalDefId, level: Option<AccessLevel>) -> Option<AccessLevel> {
  5,978 ( 0.00%)          let old_level = self.get(def_id);
      .                   // Accessibility levels can only grow.
      .                   if level > old_level {
      .                       self.access_levels.map.insert(def_id, level.unwrap());
    194 ( 0.00%)              self.changed = true;
      .                       level
      .                   } else {
      .                       old_level
      .                   }
      .               }
      .           
      .               fn reach(
      .                   &mut self,
-- line 457 ----------------------------------------
-- line 458 ----------------------------------------
      .                   def_id: LocalDefId,
      .                   access_level: Option<AccessLevel>,
      .               ) -> ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {
      .                   ReachEverythingInTheInterfaceVisitor {
      .                       access_level: cmp::min(access_level, Some(AccessLevel::Reachable)),
      .                       item_def_id: def_id,
      .                       ev: self,
      .                   }
  1,642 ( 0.00%)      }
      .           
      .               // We have to make sure that the items that macros might reference
      .               // are reachable, since they might be exported transitively.
      .               fn update_reachability_from_macro(&mut self, local_def_id: LocalDefId, md: &MacroDef) {
      .                   // Non-opaque macros cannot make other items more accessible than they already are.
      .           
     10 ( 0.00%)          let hir_id = self.tcx.hir().local_def_id_to_hir_id(local_def_id);
     30 ( 0.00%)          let attrs = self.tcx.hir().attrs(hir_id);
     70 ( 0.00%)          if attr::find_transparency(attrs, md.macro_rules).0 != Transparency::Opaque {
      .                       return;
      .                   }
      .           
      .                   let item_def_id = local_def_id.to_def_id();
      .                   let macro_module_def_id =
      .                       ty::DefIdTree::parent(self.tcx, item_def_id).unwrap().expect_local();
      .                   if self.tcx.hir().opt_def_kind(macro_module_def_id) != Some(DefKind::Mod) {
      .                       // The macro's parent doesn't correspond to a `mod`, return early (#63164, #65252).
-- line 483 ----------------------------------------
-- line 630 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {
      .               type NestedFilter = nested_filter::All;
      .           
      .               /// We want to visit items in the context of their containing
      .               /// module and so forth, so supply a crate for doing a deep walk.
      .               fn nested_visit_map(&mut self) -> Self::Map {
  1,570 ( 0.00%)          self.tcx.hir()
      .               }
      .           
  5,616 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
  1,248 ( 0.00%)          let item_level = match item.kind {
      .                       hir::ItemKind::Impl { .. } => {
      .                           let impl_level =
  1,248 ( 0.00%)                      Option::<AccessLevel>::of_impl(item.def_id, self.tcx, &self.access_levels);
    208 ( 0.00%)                  self.update(item.def_id, impl_level)
      .                       }
  1,664 ( 0.00%)              _ => self.get(item.def_id),
      .                   };
      .           
      .                   // Update levels of nested things.
  3,195 ( 0.00%)          match item.kind {
      .                       hir::ItemKind::Enum(ref def, _) => {
     16 ( 0.00%)                  for variant in def.variants {
    324 ( 0.00%)                      let variant_level = self.update_with_hir_id(variant.id, item_level);
    432 ( 0.00%)                      if let Some(ctor_hir_id) = variant.data.ctor_hir_id() {
      .                                   self.update_with_hir_id(ctor_hir_id, item_level);
      .                               }
    216 ( 0.00%)                      for field in variant.data.fields() {
     50 ( 0.00%)                          self.update_with_hir_id(field.hir_id, variant_level);
      .                               }
      .                           }
      .                       }
      .                       hir::ItemKind::Impl(ref impl_) => {
    624 ( 0.00%)                  for impl_item_ref in impl_.items {
  1,564 ( 0.00%)                      if impl_.of_trait.is_some()
    436 ( 0.00%)                          || self.tcx.visibility(impl_item_ref.id.def_id) == ty::Visibility::Public
      .                               {
    636 ( 0.00%)                          self.update(impl_item_ref.id.def_id, item_level);
      .                               }
      .                           }
      .                       }
     12 ( 0.00%)              hir::ItemKind::Trait(.., trait_item_refs) => {
      .                           for trait_item_ref in trait_item_refs {
      8 ( 0.00%)                      self.update(trait_item_ref.id.def_id, item_level);
      .                           }
      .                       }
      .                       hir::ItemKind::Struct(ref def, _) | hir::ItemKind::Union(ref def, _) => {
     56 ( 0.00%)                  if let Some(ctor_hir_id) = def.ctor_hir_id() {
      .                               self.update_with_hir_id(ctor_hir_id, item_level);
      .                           }
     28 ( 0.00%)                  for field in def.fields() {
    208 ( 0.00%)                      if field.vis.node.is_pub() {
     40 ( 0.00%)                          self.update_with_hir_id(field.hir_id, item_level);
      .                               }
      .                           }
      .                       }
      .                       hir::ItemKind::Macro(ref macro_def) => {
     20 ( 0.00%)                  self.update_reachability_from_macro(item.def_id, macro_def);
      .                       }
      .                       hir::ItemKind::ForeignMod { items, .. } => {
      .                           for foreign_item in items {
      .                               if self.tcx.visibility(foreign_item.id.def_id) == ty::Visibility::Public {
      .                                   self.update(foreign_item.id.def_id, item_level);
      .                               }
      .                           }
      .                       }
-- line 697 ----------------------------------------
-- line 704 ----------------------------------------
      .                       | hir::ItemKind::TyAlias(..)
      .                       | hir::ItemKind::Mod(..)
      .                       | hir::ItemKind::TraitAlias(..)
      .                       | hir::ItemKind::Fn(..)
      .                       | hir::ItemKind::ExternCrate(..) => {}
      .                   }
      .           
      .                   // Mark all items in interfaces of reachable items as reachable.
  3,120 ( 0.00%)          match item.kind {
      .                       // The interface is empty.
      .                       hir::ItemKind::Macro(..) | hir::ItemKind::ExternCrate(..) => {}
      .                       // All nested items are checked by `visit_item`.
      .                       hir::ItemKind::Mod(..) => {}
      .                       // Handled in the access level of in rustc_resolve
      .                       hir::ItemKind::Use(..) => {}
      .                       // The interface is empty.
      .                       hir::ItemKind::GlobalAsm(..) => {}
-- line 720 ----------------------------------------
-- line 732 ----------------------------------------
      .                               self.reach(item.def_id, exist_level).generics().predicates().ty();
      .                           }
      .                       }
      .                       // Visit everything.
      .                       hir::ItemKind::Const(..)
      .                       | hir::ItemKind::Static(..)
      .                       | hir::ItemKind::Fn(..)
      .                       | hir::ItemKind::TyAlias(..) => {
    116 ( 0.00%)                  if item_level.is_some() {
     92 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates().ty();
      .                           }
      .                       }
      .                       hir::ItemKind::Trait(.., trait_item_refs) => {
      4 ( 0.00%)                  if item_level.is_some() {
      .                               self.reach(item.def_id, item_level).generics().predicates();
      .           
      .                               for trait_item_ref in trait_item_refs {
      .                                   let mut reach = self.reach(trait_item_ref.id.def_id, item_level);
      .                                   reach.generics().predicates();
      .           
      .                                   if trait_item_ref.kind == AssocItemKind::Type
      .                                       && !trait_item_ref.defaultness.has_value()
-- line 753 ----------------------------------------
-- line 761 ----------------------------------------
      .                       }
      .                       hir::ItemKind::TraitAlias(..) => {
      .                           if item_level.is_some() {
      .                               self.reach(item.def_id, item_level).generics().predicates();
      .                           }
      .                       }
      .                       // Visit everything except for private impl items.
      .                       hir::ItemKind::Impl(ref impl_) => {
    208 ( 0.00%)                  if item_level.is_some() {
  1,500 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates().ty().trait_ref();
      .           
    150 ( 0.00%)                      for impl_item_ref in impl_.items {
    774 ( 0.00%)                          let impl_item_level = self.get(impl_item_ref.id.def_id);
    978 ( 0.00%)                          if impl_item_level.is_some() {
  2,380 ( 0.00%)                              self.reach(impl_item_ref.id.def_id, impl_item_level)
      .                                           .generics()
      .                                           .predicates()
      .                                           .ty();
      .                                   }
      .                               }
      .                           }
      .                       }
      .           
      .                       // Visit everything, but enum variants have their own levels.
      .                       hir::ItemKind::Enum(ref def, _) => {
     16 ( 0.00%)                  if item_level.is_some() {
     80 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates();
      .                           }
     16 ( 0.00%)                  for variant in def.variants {
    972 ( 0.00%)                      let variant_level = self.get(self.tcx.hir().local_def_id(variant.id));
    108 ( 0.00%)                      if variant_level.is_some() {
    176 ( 0.00%)                          for field in variant.data.fields() {
    126 ( 0.00%)                              self.reach(self.tcx.hir().local_def_id(field.hir_id), variant_level)
      .                                           .ty();
      .                                   }
      .                                   // Corner case: if the variant is reachable, but its
      .                                   // enum is not, make the enum reachable as well.
    176 ( 0.00%)                          self.update(item.def_id, variant_level);
      .                               }
      .                           }
      .                       }
      .                       // Visit everything, but foreign items have their own levels.
      .                       hir::ItemKind::ForeignMod { items, .. } => {
      .                           for foreign_item in items {
      .                               let foreign_item_level = self.get(foreign_item.id.def_id);
      .                               if foreign_item_level.is_some() {
-- line 806 ----------------------------------------
-- line 808 ----------------------------------------
      .                                       .generics()
      .                                       .predicates()
      .                                       .ty();
      .                               }
      .                           }
      .                       }
      .                       // Visit everything except for private fields.
      .                       hir::ItemKind::Struct(ref struct_def, _) | hir::ItemKind::Union(ref struct_def, _) => {
     14 ( 0.00%)                  if item_level.is_some() {
     80 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates();
     20 ( 0.00%)                      for field in struct_def.fields() {
    280 ( 0.00%)                          let def_id = self.tcx.hir().local_def_id(field.hir_id);
    120 ( 0.00%)                          let field_level = self.get(def_id);
     40 ( 0.00%)                          if field_level.is_some() {
      .                                       self.reach(def_id, field_level).ty();
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   }
      .           
      .                   let orig_level = mem::replace(&mut self.prev_level, item_level);
  1,872 ( 0.00%)          intravisit::walk_item(self, item);
    624 ( 0.00%)          self.prev_level = orig_level;
  4,992 ( 0.00%)      }
      .           
      .               fn visit_block(&mut self, b: &'tcx hir::Block<'tcx>) {
      .                   // Blocks can have public items, for example impls, but they always
      .                   // start as completely private regardless of publicity of a function,
      .                   // constant, type, field, etc., in which this block resides.
      .                   let orig_level = mem::replace(&mut self.prev_level, None);
      .                   intravisit::walk_block(self, b);
      .                   self.prev_level = orig_level;
      .               }
      .           }
      .           
      .           impl ReachEverythingInTheInterfaceVisitor<'_, '_> {
  3,178 ( 0.00%)      fn generics(&mut self) -> &mut Self {
  1,816 ( 0.00%)          for param in &self.ev.tcx.generics_of(self.item_def_id).params {
    650 ( 0.00%)              match param.kind {
      .                           GenericParamDefKind::Lifetime => {}
     44 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
     44 ( 0.00%)                      if has_default {
      8 ( 0.00%)                          self.visit(self.ev.tcx.type_of(param.def_id));
      .                               }
      .                           }
      .                           GenericParamDefKind::Const { has_default, .. } => {
      .                               self.visit(self.ev.tcx.type_of(param.def_id));
      .                               if has_default {
      .                                   self.visit(self.ev.tcx.const_param_default(param.def_id));
      .                               }
      .                           }
      .                       }
      .                   }
      .                   self
  4,086 ( 0.00%)      }
      .           
  2,270 ( 0.00%)      fn predicates(&mut self) -> &mut Self {
  1,362 ( 0.00%)          self.visit_predicates(self.ev.tcx.predicates_of(self.item_def_id));
      .                   self
  2,724 ( 0.00%)      }
      .           
  2,170 ( 0.00%)      fn ty(&mut self) -> &mut Self {
  1,316 ( 0.00%)          self.visit(self.ev.tcx.type_of(self.item_def_id));
      .                   self
  2,604 ( 0.00%)      }
      .           
      .               fn trait_ref(&mut self) -> &mut Self {
    900 ( 0.00%)          if let Some(trait_ref) = self.ev.tcx.impl_trait_ref(self.item_def_id) {
      .                       self.visit_trait(trait_ref);
      .                   }
      .                   self
      .               }
      .           }
      .           
      .           impl<'tcx> DefIdVisitor<'tcx> for ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {
      .               fn tcx(&self) -> TyCtxt<'tcx> {
  7,280 ( 0.00%)          self.ev.tcx
      .               }
  8,400 ( 0.00%)      fn visit_def_id(
      .                   &mut self,
      .                   def_id: DefId,
      .                   _kind: &str,
      .                   _descr: &dyn fmt::Display,
      .               ) -> ControlFlow<Self::BreakTy> {
  5,048 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
  4,679 ( 0.00%)              if let (ty::Visibility::Public, _) | (_, Some(AccessLevel::ReachableFromImplTrait)) =
  1,178 ( 0.00%)                  (self.tcx().visibility(def_id.to_def_id()), self.access_level)
      .                       {
      .                           self.ev.update(def_id, self.access_level);
      .                       }
      .                   }
      .                   ControlFlow::CONTINUE
 11,760 ( 0.00%)      }
      .           }
      .           
      .           //////////////////////////////////////////////////////////////////////////////////////
      .           /// Name privacy visitor, checks privacy and reports violations.
      .           /// Most of name privacy checks are performed during the main resolution phase,
      .           /// or later in type checking when field accesses and associated items are resolved.
      .           /// This pass performs remaining checks for fields in struct expressions and patterns.
      .           //////////////////////////////////////////////////////////////////////////////////////
-- line 909 ----------------------------------------
-- line 920 ----------------------------------------
      .               /// `Expr` or `Pat` nodes (they are guaranteed to be found only in bodies).
      .               #[track_caller]
      .               fn typeck_results(&self) -> &'tcx ty::TypeckResults<'tcx> {
      .                   self.maybe_typeck_results
      .                       .expect("`NamePrivacyVisitor::typeck_results` called outside of body")
      .               }
      .           
      .               // Checks that a field in a struct constructor (expression or pattern) is accessible.
  3,930 ( 0.00%)      fn check_field(
      .                   &mut self,
      .                   use_ctxt: Span,        // syntax context of the field name at the use site
      .                   span: Span,            // span of the field pattern, e.g., `x: 0`
      .                   def: &'tcx ty::AdtDef, // definition of the struct or enum
      .                   field: &'tcx ty::FieldDef,
      .                   in_update_syntax: bool,
      .               ) {
    786 ( 0.00%)          if def.is_enum() {
      .                       return;
      .                   }
      .           
      .                   // definition of the field
      .                   let ident = Ident::new(kw::Empty, use_ctxt);
    544 ( 0.00%)          let hir_id = self.tcx.hir().local_def_id_to_hir_id(self.current_item);
  1,904 ( 0.00%)          let def_id = self.tcx.adjust_ident_and_get_scope(ident, def.did, hir_id).1;
    272 ( 0.00%)          if !field.vis.is_accessible_from(def_id, self.tcx) {
      .                       let label = if in_update_syntax {
      .                           format!("field `{}` is private", field.name)
      .                       } else {
      .                           "private field".to_string()
      .                       };
      .           
      .                       struct_span_err!(
      .                           self.tcx.sess,
-- line 952 ----------------------------------------
-- line 955 ----------------------------------------
      .                           "field `{}` of {} `{}` is private",
      .                           field.name,
      .                           def.variant_descr(),
      .                           self.tcx.def_path_str(def.did)
      .                       )
      .                       .span_label(span, label)
      .                       .emit();
      .                   }
  3,144 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> Visitor<'tcx> for NamePrivacyVisitor<'tcx> {
      .               type NestedFilter = nested_filter::All;
      .           
      .               /// We want to visit items in the context of their containing
      .               /// module and so forth, so supply a crate for doing a deep walk.
      .               fn nested_visit_map(&mut self) -> Self::Map {
    498 ( 0.00%)          self.tcx.hir()
      .               }
      .           
      .               fn visit_mod(&mut self, _m: &'tcx hir::Mod<'tcx>, _s: Span, _n: hir::HirId) {
      .                   // Don't visit nested modules, since we run a separate visitor walk
      .                   // for each module in `privacy_access_levels`
      .               }
      .           
      .               fn visit_nested_body(&mut self, body: hir::BodyId) {
      .                   let old_maybe_typeck_results =
  1,527 ( 0.00%)              self.maybe_typeck_results.replace(self.tcx.typeck_body(body));
  1,680 ( 0.00%)          let body = self.tcx.hir().body(body);
      .                   self.visit_body(body);
    153 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
      .               }
      .           
      .               fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
    312 ( 0.00%)          let orig_current_item = mem::replace(&mut self.current_item, item.def_id);
    929 ( 0.00%)          intravisit::walk_item(self, item);
    312 ( 0.00%)          self.current_item = orig_current_item;
      .               }
      .           
112,743 ( 0.01%)      fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {
 25,054 ( 0.00%)          if let hir::ExprKind::Struct(qpath, fields, ref base) = expr.kind {
    624 ( 0.00%)              let res = self.typeck_results().qpath_res(qpath, expr.hir_id);
    312 ( 0.00%)              let adt = self.typeck_results().expr_ty(expr).ty_adt_def().unwrap();
    936 ( 0.00%)              let variant = adt.variant_of_res(res);
    416 ( 0.00%)              if let Some(base) = *base {
      .                           // If the expression uses FRU we need to make sure all the unmentioned fields
      .                           // are checked for privacy (RFC 736). Rather than computing the set of
      .                           // unmentioned fields, just check them all.
      .                           for (vf_index, variant_field) in variant.fields.iter().enumerate() {
      .                               let field = fields.iter().find(|f| {
    444 ( 0.00%)                          self.tcx.field_index(f.hir_id, self.typeck_results()) == vf_index
      .                               });
      .                               let (use_ctxt, span) = match field {
     36 ( 0.00%)                          Some(field) => (field.ident.span, field.span),
     76 ( 0.00%)                          None => (base.span, base.span),
      .                               };
    500 ( 0.00%)                      self.check_field(use_ctxt, span, adt, variant_field, true);
      .                           }
      .                       } else {
      .                           for field in fields {
    205 ( 0.00%)                      let use_ctxt = field.ident.span;
  1,520 ( 0.00%)                      let index = self.tcx.field_index(field.hir_id, self.typeck_results());
  2,255 ( 0.00%)                      self.check_field(use_ctxt, field.span, adt, &variant.fields[index], false);
      .                           }
      .                       }
      .                   }
      .           
125,270 ( 0.01%)          intravisit::walk_expr(self, expr);
      .               }
      .           
 19,928 ( 0.00%)      fn visit_pat(&mut self, pat: &'tcx hir::Pat<'tcx>) {
  5,122 ( 0.00%)          if let PatKind::Struct(ref qpath, fields, _) = pat.kind {
    980 ( 0.00%)              let res = self.typeck_results().qpath_res(qpath, pat.hir_id);
    560 ( 0.00%)              let adt = self.typeck_results().pat_ty(pat).ty_adt_def().unwrap();
  1,120 ( 0.00%)              let variant = adt.variant_of_res(res);
      .                       for field in fields {
    138 ( 0.00%)                  let use_ctxt = field.ident.span;
  1,065 ( 0.00%)                  let index = self.tcx.field_index(field.hir_id, self.typeck_results());
  1,380 ( 0.00%)                  self.check_field(use_ctxt, field.span, adt, &variant.fields[index], false);
      .                       }
      .                   }
      .           
 22,419 ( 0.00%)          intravisit::walk_pat(self, pat);
      .               }
      .           }
      .           
      .           ////////////////////////////////////////////////////////////////////////////////////////////
      .           /// Type privacy visitor, checks types for privacy and reports violations.
      .           /// Both explicitly written types and inferred types of expressions and patterns are checked.
      .           /// Checks are performed on "semantic" types regardless of names and their hygiene.
      .           ////////////////////////////////////////////////////////////////////////////////////////////
-- line 1045 ----------------------------------------
-- line 1061 ----------------------------------------
      .                       .expect("`TypePrivacyVisitor::typeck_results` called outside of body")
      .               }
      .           
      .               fn item_is_accessible(&self, did: DefId) -> bool {
      .                   self.tcx.visibility(did).is_accessible_from(self.current_item.to_def_id(), self.tcx)
      .               }
      .           
      .               // Take node-id of an expression or pattern and check its type for privacy.
110,348 ( 0.01%)      fn check_expr_pat_type(&mut self, id: hir::HirId, span: Span) -> bool {
 15,764 ( 0.00%)          self.span = span;
 15,764 ( 0.00%)          let typeck_results = self.typeck_results();
      .                   let result: ControlFlow<()> = try {
 63,056 ( 0.00%)              self.visit(typeck_results.node_type(id))?;
126,112 ( 0.01%)              self.visit(typeck_results.node_substs(id))?;
141,876 ( 0.01%)              if let Some(adjustments) = typeck_results.adjustments().get(id) {
      .                           adjustments.iter().try_for_each(|adjustment| self.visit(adjustment.target))?;
      .                       }
      .                   };
      .                   result.is_break()
126,112 ( 0.01%)      }
      .           
      .               fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {
 49,520 ( 0.00%)          let is_error = !self.item_is_accessible(def_id);
      .                   if is_error {
      .                       self.tcx
      .                           .sess
      .                           .struct_span_err(self.span, &format!("{} `{}` is private", kind, descr))
      .                           .span_label(self.span, &format!("private {}", kind))
      .                           .emit();
      .                   }
      .                   is_error
-- line 1091 ----------------------------------------
-- line 1093 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {
      .               type NestedFilter = nested_filter::All;
      .           
      .               /// We want to visit items in the context of their containing
      .               /// module and so forth, so supply a crate for doing a deep walk.
      .               fn nested_visit_map(&mut self) -> Self::Map {
    498 ( 0.00%)          self.tcx.hir()
      .               }
      .           
      .               fn visit_mod(&mut self, _m: &'tcx hir::Mod<'tcx>, _s: Span, _n: hir::HirId) {
      .                   // Don't visit nested modules, since we run a separate visitor walk
      .                   // for each module in `privacy_access_levels`
      .               }
      .           
  2,800 ( 0.00%)      fn visit_nested_body(&mut self, body: hir::BodyId) {
      .                   let old_maybe_typeck_results =
    840 ( 0.00%)              self.maybe_typeck_results.replace(self.tcx.typeck_body(body));
  1,680 ( 0.00%)          let body = self.tcx.hir().body(body);
      .                   self.visit_body(body);
    280 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
  2,240 ( 0.00%)      }
      .           
      .               fn visit_generic_arg(&mut self, generic_arg: &'tcx hir::GenericArg<'tcx>) {
  3,370 ( 0.00%)          match generic_arg {
    932 ( 0.00%)              hir::GenericArg::Type(t) => self.visit_ty(t),
      .                       hir::GenericArg::Infer(inf) => self.visit_infer(inf),
      .                       hir::GenericArg::Lifetime(_) | hir::GenericArg::Const(_) => {}
      .                   }
      .               }
      .           
 13,636 ( 0.00%)      fn visit_ty(&mut self, hir_ty: &'tcx hir::Ty<'tcx>) {
  3,896 ( 0.00%)          self.span = hir_ty.span;
  5,844 ( 0.00%)          if let Some(typeck_results) = self.maybe_typeck_results {
      .                       // Types in bodies.
  1,725 ( 0.00%)              if self.visit(typeck_results.node_type(hir_ty.hir_id)).is_break() {
      .                           return;
      .                       }
      .                   } else {
      .                       // Types in signatures.
      .                       // FIXME: This is very ineffective. Ideally each HIR type should be converted
      .                       // into a semantic type only once and the result should be cached somehow.
  4,119 ( 0.00%)              if self.visit(rustc_typeck::hir_ty_to_ty(self.tcx, hir_ty)).is_break() {
      .                           return;
      .                       }
      .                   }
      .           
  5,844 ( 0.00%)          intravisit::walk_ty(self, hir_ty);
 11,688 ( 0.00%)      }
      .           
      .               fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {
      .                   self.span = inf.span;
      .                   if let Some(typeck_results) = self.maybe_typeck_results {
      .                       if let Some(ty) = typeck_results.node_type_opt(inf.hir_id) {
      .                           if self.visit(ty).is_break() {
      .                               return;
      .                           }
-- line 1150 ----------------------------------------
-- line 1152 ----------------------------------------
      .                           // We don't do anything for const infers here.
      .                       }
      .                   } else {
      .                       bug!("visit_infer without typeck_results");
      .                   }
      .                   intravisit::walk_inf(self, inf);
      .               }
      .           
  1,024 ( 0.00%)      fn visit_trait_ref(&mut self, trait_ref: &'tcx hir::TraitRef<'tcx>) {
    384 ( 0.00%)          self.span = trait_ref.path.span;
    128 ( 0.00%)          if self.maybe_typeck_results.is_none() {
      .                       // Avoid calling `hir_trait_to_predicates` in bodies, it will ICE.
      .                       // The traits' privacy in bodies is already checked as a part of trait object types.
    127 ( 0.00%)              let bounds = rustc_typeck::hir_trait_to_predicates(
    127 ( 0.00%)                  self.tcx,
      .                           trait_ref,
      .                           // NOTE: This isn't really right, but the actual type doesn't matter here. It's
      .                           // just required by `ty::TraitRef`.
    381 ( 0.00%)                  self.tcx.types.never,
      .                       );
      .           
  1,143 ( 0.00%)              for (trait_predicate, _, _) in bounds.trait_bounds {
    889 ( 0.00%)                  if self.visit_trait(trait_predicate.skip_binder()).is_break() {
      .                               return;
      .                           }
      .                       }
      .           
    839 ( 0.00%)              for (poly_predicate, _) in bounds.projection_bounds {
     66 ( 0.00%)                  let pred = poly_predicate.skip_binder();
      .                           let poly_pred_term = self.visit(pred.term);
     44 ( 0.00%)                  if poly_pred_term.is_break()
      .                               || self.visit_projection_ty(pred.projection_ty).is_break()
      .                           {
      .                               return;
      .                           }
      .                       }
      .                   }
      .           
      .                   intravisit::walk_trait_ref(self, trait_ref);
  1,024 ( 0.00%)      }
      .           
      .               // Check types of expressions
112,743 ( 0.01%)      fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {
112,743 ( 0.01%)          if self.check_expr_pat_type(expr.hir_id, expr.span) {
      .                       // Do not check nested expressions if the error already happened.
      .                       return;
      .                   }
 83,395 ( 0.01%)          match expr.kind {
    425 ( 0.00%)              hir::ExprKind::Assign(_, rhs, _) | hir::ExprKind::Match(rhs, ..) => {
      .                           // Do not report duplicate errors for `x = y` and `match x { ... }`.
  2,289 ( 0.00%)                  if self.check_expr_pat_type(rhs.hir_id, rhs.span) {
      .                               return;
      .                           }
      .                       }
    959 ( 0.00%)              hir::ExprKind::MethodCall(segment, ..) => {
      .                           // Method calls have to be checked specially.
  1,918 ( 0.00%)                  self.span = segment.ident.span;
  5,754 ( 0.00%)                  if let Some(def_id) = self.typeck_results().type_dependent_def_id(expr.hir_id) {
  2,877 ( 0.00%)                      if self.visit(self.tcx.type_of(def_id)).is_break() {
      .                                   return;
      .                               }
      .                           } else {
      .                               self.tcx
      .                                   .sess
      .                                   .delay_span_bug(expr.span, "no type-dependent def for method call");
      .                           }
      .                       }
      .                       _ => {}
      .                   }
      .           
 37,581 ( 0.00%)          intravisit::walk_expr(self, expr);
100,216 ( 0.01%)      }
      .           
      .               // Prohibit access to associated items with insufficient nominal visibility.
      .               //
      .               // Additionally, until better reachability analysis for macros 2.0 is available,
      .               // we prohibit access to private statics from other crates, this allows to give
      .               // more code internal visibility at link time. (Access to private functions
      .               // is already prohibited by type privacy for function types.)
 63,790 ( 0.00%)      fn visit_qpath(&mut self, qpath: &'tcx hir::QPath<'tcx>, id: hir::HirId, span: Span) {
 12,758 ( 0.00%)          let def = match qpath {
 16,869 ( 0.00%)              hir::QPath::Resolved(_, path) => match path.res {
 13,878 ( 0.00%)                  Res::Def(kind, def_id) => Some((kind, def_id)),
      .                           _ => None,
      .                       },
    756 ( 0.00%)              hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
      .                           .maybe_typeck_results
  6,777 ( 0.00%)                  .and_then(|typeck_results| typeck_results.type_dependent_def(id)),
      .                   };
      .                   let def = def.filter(|(kind, _)| {
  6,132 ( 0.00%)              matches!(
      .                           kind,
      .                           DefKind::AssocFn | DefKind::AssocConst | DefKind::AssocTy | DefKind::Static
      .                       )
      .                   });
      .                   if let Some((kind, def_id)) = def {
      .                       let is_local_static =
  3,016 ( 0.00%)                  if let DefKind::Static = kind { def_id.is_local() } else { false };
  1,520 ( 0.00%)              if !self.item_is_accessible(def_id) && !is_local_static {
      .                           let sess = self.tcx.sess;
      .                           let sm = sess.source_map();
      .                           let name = match qpath {
      .                               hir::QPath::Resolved(..) | hir::QPath::LangItem(..) => {
      .                                   sm.span_to_snippet(qpath.span()).ok()
      .                               }
      .                               hir::QPath::TypeRelative(_, segment) => Some(segment.ident.to_string()),
      .                           };
-- line 1258 ----------------------------------------
-- line 1263 ----------------------------------------
      .                           };
      .                           sess.struct_span_err(span, &msg)
      .                               .span_label(span, &format!("private {}", kind))
      .                               .emit();
      .                           return;
      .                       }
      .                   }
      .           
 70,169 ( 0.00%)          intravisit::walk_qpath(self, qpath, id, span);
      .               }
      .           
      .               // Check types of patterns.
      .               fn visit_pat(&mut self, pattern: &'tcx hir::Pat<'tcx>) {
 16,243 ( 0.00%)          if self.check_expr_pat_type(pattern.hir_id, pattern.span) {
      .                       // Do not check nested patterns if the error already happened.
      .                       return;
      .                   }
      .           
  8,518 ( 0.00%)          intravisit::walk_pat(self, pattern);
      .               }
      .           
  2,225 ( 0.00%)      fn visit_local(&mut self, local: &'tcx hir::Local<'tcx>) {
  1,335 ( 0.00%)          if let Some(init) = local.init {
  2,933 ( 0.00%)              if self.check_expr_pat_type(init.hir_id, init.span) {
      .                           // Do not report duplicate errors for `let x = y`.
      .                           return;
      .                       }
      .                   }
      .           
      .                   intravisit::walk_local(self, local);
  1,692 ( 0.00%)      }
      .           
      .               // Check types in item interfaces.
      .               fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
    312 ( 0.00%)          let orig_current_item = mem::replace(&mut self.current_item, item.def_id);
      .                   let old_maybe_typeck_results = self.maybe_typeck_results.take();
    929 ( 0.00%)          intravisit::walk_item(self, item);
    312 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
    350 ( 0.00%)          self.current_item = orig_current_item;
      .               }
      .           }
      .           
      .           impl<'tcx> DefIdVisitor<'tcx> for TypePrivacyVisitor<'tcx> {
      .               fn tcx(&self) -> TyCtxt<'tcx> {
121,748 ( 0.01%)          self.tcx
      .               }
371,400 ( 0.02%)      fn visit_def_id(
      .                   &mut self,
      .                   def_id: DefId,
      .                   kind: &str,
      .                   descr: &dyn fmt::Display,
      .               ) -> ControlFlow<Self::BreakTy> {
      .                   if self.check_def_id(def_id, kind, descr) {
      .                       ControlFlow::BREAK
      .                   } else {
      .                       ControlFlow::CONTINUE
      .                   }
222,840 ( 0.01%)      }
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////////
      .           /// Obsolete visitors for checking for private items in public interfaces.
      .           /// These visitors are supposed to be kept in frozen state and produce an
      .           /// "old error node set". For backward compatibility the new visitor reports
      .           /// warnings instead of hard errors when the erroneous node is not in this old set.
      .           ///////////////////////////////////////////////////////////////////////////////
-- line 1328 ----------------------------------------
-- line 1342 ----------------------------------------
      .               /// Whether we've recurred at all (i.e., if we're pointing at the
      .               /// first type on which `visit_ty` was called).
      .               at_outer_type: bool,
      .               /// Whether that first type is a public path.
      .               outer_type_is_public_path: bool,
      .           }
      .           
      .           impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {
    428 ( 0.00%)      fn path_is_private_type(&self, path: &hir::Path<'_>) -> bool {
  1,314 ( 0.00%)          let did = match path.res {
      .                       Res::PrimTy(..) | Res::SelfTy(..) | Res::Err => return false,
  1,734 ( 0.00%)              res => res.def_id(),
      .                   };
      .           
      .                   // A path can only be private if:
      .                   // it's in this crate...
    289 ( 0.00%)          if let Some(did) = did.as_local() {
      .                       // .. and it corresponds to a private type in the AST (this returns
      .                       // `None` for type parameters).
    975 ( 0.00%)              match self.tcx.hir().find(self.tcx.hir().local_def_id_to_hir_id(did)) {
    700 ( 0.00%)                  Some(Node::Item(item)) => !item.vis.node.is_pub(),
      .                           Some(_) | None => false,
      .                       }
      .                   } else {
      .                       false
      .                   }
    856 ( 0.00%)      }
      .           
      .               fn trait_is_public(&self, trait_id: LocalDefId) -> bool {
      .                   // FIXME: this would preferably be using `exported_items`, but all
      .                   // traits are exported currently (see `EmbargoVisitor.exported_trait`).
      .                   self.access_levels.is_public(trait_id)
      .               }
      .           
      .               fn check_generic_bound(&mut self, bound: &hir::GenericBound<'_>) {
     48 ( 0.00%)          if let hir::GenericBound::Trait(ref trait_ref, _) = *bound {
     10 ( 0.00%)              if self.path_is_private_type(trait_ref.trait_ref.path) {
      .                           self.old_error_set.insert(trait_ref.trait_ref.hir_ref_id);
      .                       }
      .                   }
      .               }
      .           
      .               fn item_is_public(&self, def_id: LocalDefId, vis: &hir::Visibility<'_>) -> bool {
    316 ( 0.00%)          self.access_levels.is_reachable(def_id) || vis.node.is_pub()
      .               }
      .           }
      .           
      .           impl<'a, 'b, 'tcx, 'v> Visitor<'v> for ObsoleteCheckTypeForPrivatenessVisitor<'a, 'b, 'tcx> {
      .               fn visit_generic_arg(&mut self, generic_arg: &'v hir::GenericArg<'v>) {
    162 ( 0.00%)          match generic_arg {
      .                       hir::GenericArg::Type(t) => self.visit_ty(t),
      .                       hir::GenericArg::Infer(inf) => self.visit_ty(&inf.to_ty()),
      .                       hir::GenericArg::Lifetime(_) | hir::GenericArg::Const(_) => {}
      .                   }
      .               }
      .           
      .               fn visit_ty(&mut self, ty: &hir::Ty<'_>) {
    588 ( 0.00%)          if let hir::TyKind::Path(hir::QPath::Resolved(_, path)) = ty.kind {
    464 ( 0.00%)              if self.inner.path_is_private_type(path) {
      .                           self.contains_private = true;
      .                           // Found what we're looking for, so let's stop working.
      .                           return;
      .                       }
      .                   }
      .                   if let hir::TyKind::Path(_) = ty.kind {
     26 ( 0.00%)              if self.at_outer_type {
     95 ( 0.00%)                  self.outer_type_is_public_path = true;
      .                       }
      .                   }
    206 ( 0.00%)          self.at_outer_type = false;
    220 ( 0.00%)          intravisit::walk_ty(self, ty)
    384 ( 0.00%)      }
      .           
      .               // Don't want to recurse into `[, .. expr]`.
      .               fn visit_expr(&mut self, _: &hir::Expr<'_>) {}
      .           }
      .           
      .           impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {
      .               type NestedFilter = nested_filter::All;
      .           
      .               /// We want to visit items in the context of their containing
      .               /// module and so forth, so supply a crate for doing a deep walk.
      .               fn nested_visit_map(&mut self) -> Self::Map {
    388 ( 0.00%)          self.tcx.hir()
      .               }
      .           
  2,637 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
  1,172 ( 0.00%)          match item.kind {
      .                       // Contents of a private mod can be re-exported, so we need
      .                       // to check internals.
      .                       hir::ItemKind::Mod(_) => {}
      .           
      .                       // An `extern {}` doesn't introduce a new privacy
      .                       // namespace (the contents have their own privacies).
      .                       hir::ItemKind::ForeignMod { .. } => {}
      .           
      4 ( 0.00%)              hir::ItemKind::Trait(.., bounds, _) => {
      8 ( 0.00%)                  if !self.trait_is_public(item.def_id) {
      .                               return;
      .                           }
      .           
      .                           for bound in bounds.iter() {
      .                               self.check_generic_bound(bound)
      .                           }
      .                       }
      .           
-- line 1447 ----------------------------------------
-- line 1454 ----------------------------------------
      .                           // `impl [... for] Private` is never visible.
      .                           let self_contains_private;
      .                           // `impl [... for] Public<...>`, but not `impl [... for]
      .                           // Vec<Public>` or `(Public,)`, etc.
      .                           let self_is_public_path;
      .           
      .                           // Check the properties of the `Self` type:
      .                           {
    416 ( 0.00%)                      let mut visitor = ObsoleteCheckTypeForPrivatenessVisitor {
      .                                   inner: self,
      .                                   contains_private: false,
      .                                   at_outer_type: true,
      .                                   outer_type_is_public_path: false,
      .                               };
    104 ( 0.00%)                      visitor.visit_ty(impl_.self_ty);
      .                               self_contains_private = visitor.contains_private;
      .                               self_is_public_path = visitor.outer_type_is_public_path;
      .                           }
      .           
      .                           // Miscellaneous info about the impl:
      .           
      .                           // `true` iff this is `impl Private for ...`.
      .                           let not_private_trait = impl_.of_trait.as_ref().map_or(
      .                               true, // no trait counts as public trait
      .                               |tr| {
    279 ( 0.00%)                          if let Some(def_id) = tr.path.res.def_id().as_local() {
     18 ( 0.00%)                              self.trait_is_public(def_id)
      .                                   } else {
      .                                       true // external traits must be public
      .                                   }
      .                               },
      .                           );
      .           
      .                           // `true` iff this is a trait impl or at least one method is public.
      .                           //
      .                           // `impl Public { $( fn ...() {} )* }` is not visible.
      .                           //
      .                           // This is required over just using the methods' privacy
      .                           // directly because we might have `impl<T: Foo<Private>> ...`,
      .                           // and we shouldn't warn about the generics if all the methods
      .                           // are private (because `T` won't be visible externally).
      .                           let trait_or_some_public_method = impl_.of_trait.is_some()
     11 ( 0.00%)                      || impl_.items.iter().any(|impl_item_ref| {
    200 ( 0.00%)                          let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
    155 ( 0.00%)                          match impl_item.kind {
      .                                       hir::ImplItemKind::Const(..) | hir::ImplItemKind::Fn(..) => {
      .                                           self.access_levels.is_reachable(impl_item_ref.id.def_id)
      .                                       }
      .                                       hir::ImplItemKind::TyAlias(_) => false,
      .                                   }
      .                               });
      .           
    200 ( 0.00%)                  if !self_contains_private && not_private_trait && trait_or_some_public_method {
      .                               intravisit::walk_generics(self, &impl_.generics);
      .           
    172 ( 0.00%)                      match impl_.of_trait {
      .                                   None => {
      7 ( 0.00%)                              for impl_item_ref in impl_.items {
      .                                           // This is where we choose whether to walk down
      .                                           // further into the impl to check its items. We
      .                                           // should only walk into public items so that we
      .                                           // don't erroneously report errors for private
      .                                           // types in private items.
    396 ( 0.00%)                                  let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
    365 ( 0.00%)                                  match impl_item.kind {
      .                                               hir::ImplItemKind::Const(..) | hir::ImplItemKind::Fn(..)
    159 ( 0.00%)                                          if self
     66 ( 0.00%)                                              .item_is_public(impl_item.def_id, &impl_item.vis) =>
      .                                               {
      .                                                   intravisit::walk_impl_item(self, impl_item)
      .                                               }
      .                                               hir::ImplItemKind::TyAlias(..) => {
      .                                                   intravisit::walk_impl_item(self, impl_item)
      .                                               }
      .                                               _ => {}
      .                                           }
-- line 1529 ----------------------------------------
-- line 1538 ----------------------------------------
      .                                       //
      .                                       // Those in 1. can only occur if the trait is in
      .                                       // this crate and will've been warned about on the
      .                                       // trait definition (there's no need to warn twice
      .                                       // so we don't check the methods).
      .                                       //
      .                                       // Those in 2. are warned via walk_generics and this
      .                                       // call here.
    237 ( 0.00%)                              intravisit::walk_path(self, tr.path);
      .           
      .                                       // Those in 3. are warned with this call.
     79 ( 0.00%)                              for impl_item_ref in impl_.items {
    350 ( 0.00%)                                  let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
    561 ( 0.00%)                                  if let hir::ImplItemKind::TyAlias(ty) = impl_item.kind {
      .                                               self.visit_ty(ty);
      .                                           }
      .                                       }
      .                                   }
      .                               }
     54 ( 0.00%)                  } else if impl_.of_trait.is_none() && self_is_public_path {
      .                               // `impl Public<Private> { ... }`. Any public static
      .                               // methods will be visible as `Public::foo`.
      .                               let mut found_pub_static = false;
      4 ( 0.00%)                      for impl_item_ref in impl_.items {
    172 ( 0.00%)                          if self.access_levels.is_reachable(impl_item_ref.id.def_id)
     86 ( 0.00%)                              || self.tcx.visibility(impl_item_ref.id.def_id)
      .                                           == ty::Visibility::Public
      .                                   {
    100 ( 0.00%)                              let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
    251 ( 0.00%)                              match impl_item_ref.kind {
      .                                           AssocItemKind::Const => {
      .                                               found_pub_static = true;
      .                                               intravisit::walk_impl_item(self, impl_item);
      .                                           }
      .                                           AssocItemKind::Fn { has_self: false } => {
      .                                               found_pub_static = true;
      .                                               intravisit::walk_impl_item(self, impl_item);
      .                                           }
      .                                           _ => {}
      .                                       }
      .                                   }
      .                               }
      8 ( 0.00%)                      if found_pub_static {
      9 ( 0.00%)                          intravisit::walk_generics(self, &impl_.generics)
      .                               }
      .                           }
      .                           return;
      .                       }
      .           
      .                       // `type ... = ...;` can contain private types, because
      .                       // we're introducing a new name.
      .                       hir::ItemKind::TyAlias(..) => return,
      .           
      .                       // Not at all public, so we don't care.
  1,118 ( 0.00%)              _ if !self.item_is_public(item.def_id, &item.vis) => {
      .                           return;
      .                       }
      .           
      .                       _ => {}
      .                   }
      .           
      .                   // We've carefully constructed it so that if we're here, then
      .                   // any `visit_ty`'s will be called on things that are in
      .                   // public signatures, i.e., things that we're interested in for
      .                   // this visitor.
    600 ( 0.00%)          intravisit::walk_item(self, item);
  1,864 ( 0.00%)      }
      .           
    872 ( 0.00%)      fn visit_generics(&mut self, generics: &'tcx hir::Generics<'tcx>) {
      .                   for param in generics.params {
     15 ( 0.00%)              for bound in param.bounds {
      .                           self.check_generic_bound(bound);
      .                       }
      .                   }
    109 ( 0.00%)          for predicate in generics.where_clause.predicates {
     21 ( 0.00%)              match predicate {
      .                           hir::WherePredicate::BoundPredicate(bound_pred) => {
      7 ( 0.00%)                      for bound in bound_pred.bounds.iter() {
      .                                   self.check_generic_bound(bound)
      .                               }
      .                           }
      .                           hir::WherePredicate::RegionPredicate(_) => {}
      .                           hir::WherePredicate::EqPredicate(eq_pred) => {
      .                               self.visit_ty(eq_pred.rhs_ty);
      .                           }
      .                       }
      .                   }
    872 ( 0.00%)      }
      .           
      .               fn visit_foreign_item(&mut self, item: &'tcx hir::ForeignItem<'tcx>) {
      .                   if self.access_levels.is_reachable(item.def_id) {
      .                       intravisit::walk_foreign_item(self, item)
      .                   }
      .               }
      .           
      .               fn visit_ty(&mut self, t: &'tcx hir::Ty<'tcx>) {
  1,245 ( 0.00%)          if let hir::TyKind::Path(hir::QPath::Resolved(_, path)) = t.kind {
    716 ( 0.00%)              if self.path_is_private_type(path) {
      .                           self.old_error_set.insert(t.hir_id);
      .                       }
      .                   }
  2,353 ( 0.00%)          intravisit::walk_ty(self, t)
      .               }
      .           
    400 ( 0.00%)      fn visit_variant(
      .                   &mut self,
      .                   v: &'tcx hir::Variant<'tcx>,
      .                   g: &'tcx hir::Generics<'tcx>,
      .                   item_id: hir::HirId,
      .               ) {
    494 ( 0.00%)          if self.access_levels.is_reachable(self.tcx.hir().local_def_id(v.id)) {
     44 ( 0.00%)              self.in_variant = true;
      .                       intravisit::walk_variant(self, v, g, item_id);
     44 ( 0.00%)              self.in_variant = false;
      .                   }
    350 ( 0.00%)      }
      .           
    165 ( 0.00%)      fn visit_field_def(&mut self, s: &'tcx hir::FieldDef<'tcx>) {
    188 ( 0.00%)          if s.vis.node.is_pub() || self.in_variant {
      .                       intravisit::walk_field_def(self, s);
      .                   }
     84 ( 0.00%)      }
      .           
      .               // We don't need to introspect into these at all: an
      .               // expression/block context can't possibly contain exported things.
      .               // (Making them no-ops stops us from traversing the whole AST without
      .               // having to be super careful about our `walk_...` calls above.)
      .               fn visit_block(&mut self, _: &'tcx hir::Block<'tcx>) {}
      .               fn visit_expr(&mut self, _: &'tcx hir::Expr<'tcx>) {}
      .           }
-- line 1667 ----------------------------------------
-- line 1679 ----------------------------------------
      .               /// The visitor checks that each component type is at least this visible.
      .               required_visibility: ty::Visibility,
      .               has_pub_restricted: bool,
      .               has_old_errors: bool,
      .               in_assoc_ty: bool,
      .           }
      .           
      .           impl SearchInterfaceForPrivateItemsVisitor<'_> {
  1,953 ( 0.00%)      fn generics(&mut self) -> &mut Self {
    837 ( 0.00%)          for param in &self.tcx.generics_of(self.item_def_id).params {
    249 ( 0.00%)              match param.kind {
      .                           GenericParamDefKind::Lifetime => {}
     24 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
     24 ( 0.00%)                      if has_default {
      3 ( 0.00%)                          self.visit(self.tcx.type_of(param.def_id));
      .                               }
      .                           }
      .                           // FIXME(generic_const_exprs): May want to look inside const here
      .                           GenericParamDefKind::Const { .. } => {
      .                               self.visit(self.tcx.type_of(param.def_id));
      .                           }
      .                       }
      .                   }
      .                   self
  2,232 ( 0.00%)      }
      .           
  1,395 ( 0.00%)      fn predicates(&mut self) -> &mut Self {
      .                   // N.B., we use `explicit_predicates_of` and not `predicates_of`
      .                   // because we don't want to report privacy errors due to where
      .                   // clauses that the compiler inferred. We only want to
      .                   // consider the ones that the user wrote. This is important
      .                   // for the inferred outlives rules; see
      .                   // `src/test/ui/rfc-2093-infer-outlives/privacy.rs`.
    558 ( 0.00%)          self.visit_predicates(self.tcx.explicit_predicates_of(self.item_def_id));
      .                   self
  1,674 ( 0.00%)      }
      .           
      .               fn bounds(&mut self) -> &mut Self {
      .                   self.visit_predicates(ty::GenericPredicates {
      .                       parent: None,
      .                       predicates: self.tcx.explicit_item_bounds(self.item_def_id),
      .                   });
      .                   self
      .               }
      .           
  1,430 ( 0.00%)      fn ty(&mut self) -> &mut Self {
    572 ( 0.00%)          self.visit(self.tcx.type_of(self.item_def_id));
      .                   self
  1,430 ( 0.00%)      }
      .           
      .               fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {
  5,164 ( 0.00%)          if self.leaks_private_dep(def_id) {
      .                       self.tcx.struct_span_lint_hir(
      .                           lint::builtin::EXPORTED_PRIVATE_DEPENDENCIES,
      .                           self.tcx.hir().local_def_id_to_hir_id(self.item_def_id),
      .                           self.tcx.def_span(self.item_def_id.to_def_id()),
      .                           |lint| {
      .                               lint.build(&format!(
      .                                   "{} `{}` from private dependency '{}' in public \
      .                                                           interface",
-- line 1738 ----------------------------------------
-- line 1740 ----------------------------------------
      .                                   descr,
      .                                   self.tcx.crate_name(def_id.krate)
      .                               ))
      .                               .emit()
      .                           },
      .                       );
      .                   }
      .           
  2,681 ( 0.00%)          let hir_id = match def_id.as_local() {
    792 ( 0.00%)              Some(def_id) => self.tcx.hir().local_def_id_to_hir_id(def_id),
      .                       None => return false,
      .                   };
      .           
      .                   let vis = self.tcx.visibility(def_id);
  1,370 ( 0.00%)          if !vis.is_at_least(self.required_visibility, self.tcx) {
      .                       let vis_descr = match vis {
      .                           ty::Visibility::Public => "public",
      .                           ty::Visibility::Invisible => "private",
      .                           ty::Visibility::Restricted(vis_def_id) => {
      .                               if vis_def_id == self.tcx.parent_module(hir_id).to_def_id() {
      .                                   "private"
      .                               } else if vis_def_id.is_top_level_module() {
      .                                   "crate-private"
-- line 1762 ----------------------------------------
-- line 1792 ----------------------------------------
      .                   false
      .               }
      .           
      .               /// An item is 'leaked' from a private dependency if all
      .               /// of the following are true:
      .               /// 1. It's contained within a public type
      .               /// 2. It comes from a private crate
      .               fn leaks_private_dep(&self, item_id: DefId) -> bool {
  3,291 ( 0.00%)          let ret = self.required_visibility.is_public() && self.tcx.is_private_dep(item_id.krate);
      .           
      .                   tracing::debug!("leaks_private_dep(item_id={:?})={}", item_id, ret);
      .                   ret
      .               }
      .           }
      .           
      .           impl<'tcx> DefIdVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'tcx> {
      .               fn tcx(&self) -> TyCtxt<'tcx> {
  1,901 ( 0.00%)          self.tcx
      .               }
 17,552 ( 0.00%)      fn visit_def_id(
      .                   &mut self,
      .                   def_id: DefId,
      .                   kind: &str,
      .                   descr: &dyn fmt::Display,
      .               ) -> ControlFlow<Self::BreakTy> {
      .                   if self.check_def_id(def_id, kind, descr) {
      .                       ControlFlow::BREAK
      .                   } else {
      .                       ControlFlow::CONTINUE
      .                   }
  9,873 ( 0.00%)      }
      .           }
      .           
      .           struct PrivateItemsInPublicInterfacesVisitor<'tcx> {
      .               tcx: TyCtxt<'tcx>,
      .               has_pub_restricted: bool,
      .               old_error_set_ancestry: LocalDefIdSet,
      .           }
      .           
      .           impl<'tcx> PrivateItemsInPublicInterfacesVisitor<'tcx> {
      .               fn check(
      .                   &self,
      .                   def_id: LocalDefId,
      .                   required_visibility: ty::Visibility,
      .               ) -> SearchInterfaceForPrivateItemsVisitor<'tcx> {
  2,436 ( 0.00%)          SearchInterfaceForPrivateItemsVisitor {
    228 ( 0.00%)              tcx: self.tcx,
      .                       item_def_id: def_id,
      .                       required_visibility,
    349 ( 0.00%)              has_pub_restricted: self.has_pub_restricted,
      .                       has_old_errors: self.old_error_set_ancestry.contains(&def_id),
      .                       in_assoc_ty: false,
      .                   }
      .               }
      .           
  2,509 ( 0.00%)      fn check_assoc_item(
      .                   &self,
      .                   def_id: LocalDefId,
      .                   assoc_item_kind: AssocItemKind,
      .                   defaultness: hir::Defaultness,
      .                   vis: ty::Visibility,
      .               ) {
      .                   let mut check = self.check(def_id, vis);
      .           
    386 ( 0.00%)          let (check_ty, is_assoc_ty) = match assoc_item_kind {
      .                       AssocItemKind::Const | AssocItemKind::Fn { .. } => (true, false),
     16 ( 0.00%)              AssocItemKind::Type => (defaultness.has_value(), true),
      .                   };
    386 ( 0.00%)          check.in_assoc_ty = is_assoc_ty;
    772 ( 0.00%)          check.generics().predicates();
     16 ( 0.00%)          if check_ty {
    193 ( 0.00%)              check.ty();
      .                   }
  1,544 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'tcx> {
      .               type NestedFilter = nested_filter::OnlyBodies;
      .           
      .               fn nested_visit_map(&mut self) -> Self::Map {
    213 ( 0.00%)          self.tcx.hir()
      .               }
      .           
  2,808 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
    312 ( 0.00%)          let tcx = self.tcx;
    312 ( 0.00%)          let item_visibility = tcx.visibility(item.def_id);
      .           
  1,560 ( 0.00%)          match item.kind {
      .                       // Crates are always public.
      .                       hir::ItemKind::ExternCrate(..) => {}
      .                       // All nested items are checked by `visit_item`.
      .                       hir::ItemKind::Mod(..) => {}
      .                       // Checked in resolve.
      .                       hir::ItemKind::Use(..) => {}
      .                       // No subitems.
      .                       hir::ItemKind::Macro(..) | hir::ItemKind::GlobalAsm(..) => {}
      .                       // Subitems of these items have inherited publicity.
      .                       hir::ItemKind::Const(..)
      .                       | hir::ItemKind::Static(..)
      .                       | hir::ItemKind::Fn(..)
      .                       | hir::ItemKind::TyAlias(..) => {
    348 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates().ty();
      .                       }
      .                       hir::ItemKind::OpaqueTy(..) => {
      .                           // `ty()` for opaque types is the underlying type,
      .                           // it's not a part of interface, so we skip it.
      .                           self.check(item.def_id, item_visibility).generics().bounds();
      .                       }
      8 ( 0.00%)              hir::ItemKind::Trait(.., trait_item_refs) => {
      8 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates();
      .           
      .                           for trait_item_ref in trait_item_refs {
     12 ( 0.00%)                      self.check_assoc_item(
      2 ( 0.00%)                          trait_item_ref.id.def_id,
      .                                   trait_item_ref.kind,
      .                                   trait_item_ref.defaultness,
      .                                   item_visibility,
      .                               );
      .           
     14 ( 0.00%)                      if let AssocItemKind::Type = trait_item_ref.kind {
      .                                   self.check(trait_item_ref.id.def_id, item_visibility).bounds();
      .                               }
      .                           }
      .                       }
      .                       hir::ItemKind::TraitAlias(..) => {
      .                           self.check(item.def_id, item_visibility).generics().predicates();
      .                       }
      .                       hir::ItemKind::Enum(ref def, _) => {
     32 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates();
      .           
      8 ( 0.00%)                  for variant in def.variants {
     54 ( 0.00%)                      for field in variant.data.fields() {
    108 ( 0.00%)                          self.check(self.tcx.hir().local_def_id(field.hir_id), item_visibility).ty();
      .                               }
      .                           }
      .                       }
      .                       // Subitems of foreign modules have their own publicity.
      .                       hir::ItemKind::ForeignMod { items, .. } => {
      .                           for foreign_item in items {
      .                               let vis = tcx.visibility(foreign_item.id.def_id);
      .                               self.check(foreign_item.id.def_id, vis).generics().predicates().ty();
      .                           }
      .                       }
      .                       // Subitems of structs and unions have their own publicity.
      .                       hir::ItemKind::Struct(ref struct_def, _) | hir::ItemKind::Union(ref struct_def, _) => {
     28 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates();
      .           
     21 ( 0.00%)                  for field in struct_def.fields() {
    156 ( 0.00%)                      let def_id = tcx.hir().local_def_id(field.hir_id);
      .                               let field_visibility = tcx.visibility(def_id);
     78 ( 0.00%)                      self.check(def_id, min(item_visibility, field_visibility, tcx)).ty();
      .                           }
      .                       }
      .                       // An inherent impl is public when its type is public
      .                       // Subitems of inherent impls have their own publicity.
      .                       // A trait impl is public when both its type and its trait are public
      .                       // Subitems of trait impls have inherited publicity.
      .                       hir::ItemKind::Impl(ref impl_) => {
    416 ( 0.00%)                  let impl_vis = ty::Visibility::of_impl(item.def_id, tcx, &Default::default());
      .                           // check that private components do not appear in the generics or predicates of inherent impls
      .                           // this check is intentionally NOT performed for impls of traits, per #90586
    208 ( 0.00%)                  if impl_.of_trait.is_none() {
     55 ( 0.00%)                      self.check(item.def_id, impl_vis).generics().predicates();
      .                           }
    104 ( 0.00%)                  for impl_item_ref in impl_.items {
    151 ( 0.00%)                      let impl_item_vis = if impl_.of_trait.is_none() {
    109 ( 0.00%)                          min(tcx.visibility(impl_item_ref.id.def_id), impl_vis, tcx)
      .                               } else {
      .                                   impl_vis
      .                               };
  1,037 ( 0.00%)                      self.check_assoc_item(
    191 ( 0.00%)                          impl_item_ref.id.def_id,
      .                                   impl_item_ref.kind,
      .                                   impl_item_ref.defaultness,
      .                                   impl_item_vis,
      .                               );
      .                           }
      .                       }
      .                   }
  2,496 ( 0.00%)      }
      .           }
      .           
      .           pub fn provide(providers: &mut Providers) {
      8 ( 0.00%)      *providers = Providers {
      .                   visibility,
      .                   privacy_access_levels,
      .                   check_private_in_public,
      .                   check_mod_privacy,
      .                   ..*providers
      .               };
      1 ( 0.00%)  }
      .           
  6,201 ( 0.00%)  fn visibility(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Visibility {
    689 ( 0.00%)      let def_id = def_id.expect_local();
      .               match tcx.resolutions(()).visibilities.get(&def_id) {
  1,000 ( 0.00%)          Some(vis) => *vis,
      .                   None => {
      .                       let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);
  2,250 ( 0.00%)              match tcx.hir().get(hir_id) {
      .                           // Unique types created for closures participate in type privacy checking.
      .                           // They have visibilities inherited from the module they are defined in.
      .                           Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(..), .. }) => {
    234 ( 0.00%)                      ty::Visibility::Restricted(tcx.parent_module(hir_id).to_def_id())
      .                           }
      .                           // - AST lowering may clone `use` items and the clones don't
      .                           //   get their entries in the resolver's visibility table.
      .                           // - AST lowering also creates opaque type items with inherited visibilies.
      .                           //   Visibility on them should have no effect, but to avoid the visibility
      .                           //   query failing on some items, we provide it for opaque types as well.
      .                           Node::Item(hir::Item {
     68 ( 0.00%)                      vis,
      .                               kind: hir::ItemKind::Use(..) | hir::ItemKind::OpaqueTy(..),
      .                               ..
    408 ( 0.00%)                  }) => ty::Visibility::from_hir(vis, hir_id, tcx),
      .                           // Visibilities of trait impl items are inherited from their traits
      .                           // and are not filled in resolve.
      .                           Node::ImplItem(impl_item) => {
  1,066 ( 0.00%)                      match tcx.hir().get_by_def_id(tcx.hir().get_parent_item(hir_id)) {
      .                                   Node::Item(hir::Item {
      .                                       kind: hir::ItemKind::Impl(hir::Impl { of_trait: Some(tr), .. }),
      .                                       ..
     82 ( 0.00%)                          }) => tr.path.res.opt_def_id().map_or_else(
      .                                       || {
      .                                           tcx.sess.delay_span_bug(tr.path.span, "trait without a def-id");
      .                                           ty::Visibility::Public
      .                                       },
      .                                       |def_id| tcx.visibility(def_id),
      .                                   ),
      .                                   _ => span_bug!(impl_item.span, "the parent is not a trait impl"),
      .                               }
-- line 2021 ----------------------------------------
-- line 2023 ----------------------------------------
      .                           _ => span_bug!(
      .                               tcx.def_span(def_id),
      .                               "visibility table unexpectedly missing a def-id: {:?}",
      .                               def_id,
      .                           ),
      .                       }
      .                   }
      .               }
  5,512 ( 0.00%)  }
      .           
     56 ( 0.00%)  fn check_mod_privacy(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {
      .               // Check privacy of names not checked in previous compilation stages.
      .               let mut visitor =
     28 ( 0.00%)          NamePrivacyVisitor { tcx, maybe_typeck_results: None, current_item: module_def_id };
     63 ( 0.00%)      let (module, span, hir_id) = tcx.hir().get_module(module_def_id);
      .           
      .               intravisit::walk_mod(&mut visitor, module, hir_id);
      .           
      .               // Check privacy of explicitly written types and traits as well as
      .               // inferred types of expressions and patterns.
      .               let mut visitor =
     42 ( 0.00%)          TypePrivacyVisitor { tcx, maybe_typeck_results: None, current_item: module_def_id, span };
      .               intravisit::walk_mod(&mut visitor, module, hir_id);
     56 ( 0.00%)  }
      .           
      7 ( 0.00%)  fn privacy_access_levels(tcx: TyCtxt<'_>, (): ()) -> &AccessLevels {
      .               // Build up a set of all exported items in the AST. This is a set of all
      .               // items which are reachable from external crates based on visibility.
      9 ( 0.00%)      let mut visitor = EmbargoVisitor {
      .                   tcx,
      .                   access_levels: tcx.resolutions(()).access_levels.clone(),
      .                   macro_reachable: Default::default(),
      .                   prev_level: Some(AccessLevel::Public),
      .                   changed: false,
      .               };
      .           
      .               loop {
      .                   tcx.hir().walk_toplevel_module(&mut visitor);
      4 ( 0.00%)          if visitor.changed {
      3 ( 0.00%)              visitor.changed = false;
      .                   } else {
      .                       break;
      .                   }
      .               }
      .           
      1 ( 0.00%)      tcx.arena.alloc(visitor.access_levels)
      9 ( 0.00%)  }
      .           
      8 ( 0.00%)  fn check_private_in_public(tcx: TyCtxt<'_>, (): ()) {
      .               let access_levels = tcx.privacy_access_levels(());
      .           
      9 ( 0.00%)      let mut visitor = ObsoleteVisiblePrivateTypesVisitor {
      .                   tcx,
      .                   access_levels,
      .                   in_variant: false,
      .                   old_error_set: Default::default(),
      .               };
      .               tcx.hir().walk_toplevel_module(&mut visitor);
      .           
      .               let has_pub_restricted = {
      5 ( 0.00%)          let mut pub_restricted_visitor = PubRestrictedVisitor { tcx, has_pub_restricted: false };
      .                   tcx.hir().walk_toplevel_module(&mut pub_restricted_visitor);
      1 ( 0.00%)          pub_restricted_visitor.has_pub_restricted
      .               };
      .           
      .               let mut old_error_set_ancestry = HirIdSet::default();
      9 ( 0.00%)      for mut id in visitor.old_error_set.iter().copied() {
      .                   loop {
      .                       if !old_error_set_ancestry.insert(id) {
      .                           break;
      .                       }
      .                       let parent = tcx.hir().get_parent_node(id);
      .                       if parent == id {
      .                           break;
      .                       }
      .                       id = parent;
      .                   }
      .               }
      .           
      .               // Check for private types and traits in public interfaces.
      8 ( 0.00%)      let mut visitor = PrivateItemsInPublicInterfacesVisitor {
      .                   tcx,
      .                   has_pub_restricted,
      .                   // Only definition IDs are ever searched in `old_error_set_ancestry`,
      .                   // so we can filter away all non-definition IDs at this point.
      .                   old_error_set_ancestry: old_error_set_ancestry
      .                       .into_iter()
      .                       .filter_map(|hir_id| tcx.hir().opt_local_def_id(hir_id))
      .                       .collect(),
      .               };
      6 ( 0.00%)      tcx.hir().visit_all_item_likes(&mut DeepVisitor::new(&mut visitor));
      8 ( 0.00%)  }

286,279 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir                 

-- line 91 ----------------------------------------
        .           // maximum of number bytes needed to fill an 8-byte-sized element on which
        .           // SipHash operates. Note that for variable-sized copies which are known to be
        .           // less than 8 bytes, this function will perform more work than necessary unless
        .           // the compiler is able to optimize the extra work away.
        .           #[inline]
        .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
        .               debug_assert!(count <= 8);
        .           
   33,653 ( 0.00%)      if count == 8 {
        .                   ptr::copy_nonoverlapping(src, dst, 8);
        .                   return;
        .               }
        .           
        .               let mut i = 0;
   40,698 ( 0.00%)      if i + 3 < count {
        .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
        .                   i += 4;
        .               }
        .           
   88,154 ( 0.01%)      if i + 1 < count {
        .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
   10,883 ( 0.00%)          i += 2
        .               }
        .           
   40,698 ( 0.00%)      if i < count {
   25,857 ( 0.00%)          *dst.add(i) = *src.add(i);
        .                   i += 1;
        .               }
        .           
        .               debug_assert_eq!(i, count);
        .           }
        .           
        .           // # Implementation
        .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
        .           
        .                   hasher
        .               }
        .           
        .               // A specialized write function for values with size <= 8.
        .               #[inline]
        .               fn short_write<T>(&mut self, x: T) {
        .                   let size = mem::size_of::<T>();
  456,210 ( 0.03%)          let nbuf = self.nbuf;
        .                   debug_assert!(size <= 8);
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
        .           
3,024,140 ( 0.19%)          if nbuf + size < BUFFER_SIZE {
        .                       unsafe {
        .                           // The memcpy call is optimized away because the size is known.
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
        .                       }
        .           
  943,399 ( 0.06%)              self.nbuf = nbuf + size;
        .           
        .                       return;
        .                   }
        .           
  144,397 ( 0.01%)          unsafe { self.short_write_process_buffer(x) }
        .               }
        .           
        .               // A specialized write function for values with size <= 8 that should only
        .               // be called when the write would cause the buffer to fill.
        .               //
        .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
        .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
        .               // overflow) if it wasn't already.
        .               #[inline(never)]
   43,711 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
        .                   let size = mem::size_of::<T>();
   43,711 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(size <= 8);
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
        .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
        .           
        .                   // Copy first part of input into end of buffer, possibly into spill
        .                   // element. The memcpy call is optimized away because the size is known.
        .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
        .           
        .                   // Process buffer.
        .                   for i in 0..BUFFER_CAPACITY {
  437,110 ( 0.03%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
  349,688 ( 0.02%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
  393,399 ( 0.02%)              self.state.v0 ^= elem;
        .                   }
        .           
        .                   // Copy remaining input into start of buffer by copying size - 1
        .                   // elements from spill (at most size - 1 bytes could have overflowed
        .                   // into the spill). The memcpy call is optimized away because the size
        .                   // is known. And the whole copy is optimized away for size == 1.
        .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
        .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
        .           
        .                   // This function should only be called when the write fills the buffer.
        .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
        .                   // is statically known, so the branch is optimized away.
  202,703 ( 0.01%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
  174,844 ( 0.01%)          self.processed += BUFFER_SIZE;
   87,422 ( 0.01%)      }
        .           
        .               // A write function for byte slices.
        .               #[inline]
        .               fn slice_write(&mut self, msg: &[u8]) {
        .                   let length = msg.len();
    9,137 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .           
  123,699 ( 0.01%)          if nbuf + length < BUFFER_SIZE {
        .                       unsafe {
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .           
   44,298 ( 0.00%)                  if length <= 8 {
        .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
        .                           } else {
        .                               // This memcpy is *not* optimized away.
        .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
        .                           }
        .                       }
        .           
   22,438 ( 0.00%)              self.nbuf = nbuf + length;
        .           
        .                       return;
        .                   }
        .           
   18,052 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
        .               }
        .           
        .               // A write function for byte slices that should only be called when the
        .               // write would cause the buffer to fill.
        .               //
        .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
        .               // and `msg` must contain enough bytes to initialize the rest of the element
        .               // containing the byte offset `self.nbuf`.
        .               #[inline(never)]
   11,510 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
        .                   let length = msg.len();
    2,302 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
        .           
        .                   // Always copy first part of input into current element of buffer.
        .                   // This function should only be called when the write fills the buffer,
        .                   // so we know that there is enough input to fill the current element.
    6,906 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
    2,302 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
        .           
        .                   let src = msg.as_ptr();
        .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
        .           
        .                   // Process buffer.
        .           
        .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
        .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
        .                   // We know that is true, because last step ensured we have a full
        .                   // element in the buffer.
    4,604 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
        .           
        .                   for i in 0..last {
   17,617 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
   19,919 ( 0.00%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
   35,234 ( 0.00%)              self.state.v0 ^= elem;
        .                   }
        .           
        .                   // Process the remaining element-sized chunks of input.
        .                   let mut processed = needed_in_elem;
    4,604 ( 0.00%)          let input_left = length - processed;
    2,751 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
        .                   let extra_bytes_left = input_left % ELEM_SIZE;
        .           
        .                   for _ in 0..elems_left {
    1,464 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
    1,464 ( 0.00%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
    1,464 ( 0.00%)              self.state.v0 ^= elem;
    2,928 ( 0.00%)              processed += ELEM_SIZE;
        .                   }
        .           
        .                   // Copy remaining input into start of buffer.
        .                   let src = msg.as_ptr().add(processed);
        .                   let dst = self.buf.as_mut_ptr() as *mut u8;
        .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
        .           
    2,302 ( 0.00%)          self.nbuf = extra_bytes_left;
   11,510 ( 0.00%)          self.processed += nbuf + processed;
   13,812 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn finish128(mut self) -> (u64, u64) {
        .                   debug_assert!(self.nbuf < BUFFER_SIZE);
        .           
        .                   // Process full elements in buffer.
   19,035 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
        .           
        .                   // Since we're consuming self, avoid updating members for a potential
        .                   // performance gain.
   25,380 ( 0.00%)          let mut state = self.state;
        .           
        .                   for i in 0..last {
   16,170 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
   16,170 ( 0.00%)              state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut state);
   16,170 ( 0.00%)              state.v0 ^= elem;
        .                   }
        .           
        .                   // Get remaining partial element.
   12,690 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
        .                       unsafe {
        .                           // Ensure element is initialized by writing zero bytes. At most
        .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
        .                           // to write this many because we have the spill and we maintain
        .                           // `self.nbuf` such that this write will start before the spill.
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
        .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
    5,698 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
        .                       }
        .                   } else {
        .                       0
        .                   };
        .           
        .                   // Finalize the hash.
   18,388 ( 0.00%)          let length = self.processed + self.nbuf;
   12,688 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
        .           
    6,344 ( 0.00%)          state.v3 ^= b;
        .                   Sip24Rounds::c_rounds(&mut state);
    6,344 ( 0.00%)          state.v0 ^= b;
        .           
    6,344 ( 0.00%)          state.v2 ^= 0xee;
        .                   Sip24Rounds::d_rounds(&mut state);
   20,478 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
        .           
    7,788 ( 0.00%)          state.v1 ^= 0xdd;
        .                   Sip24Rounds::d_rounds(&mut state);
    7,788 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
        .           
        .                   (_0, _1)
        .               }
        .           }
        .           
        .           impl Hasher for SipHasher128 {
        .               #[inline]
        .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
        .           }
        .           
        .           #[derive(Debug, Clone, Default)]
        .           struct Sip24Rounds;
        .           
        .           impl Sip24Rounds {
        .               #[inline]
        .               fn c_rounds(state: &mut State) {
1,615,749 ( 0.10%)          compress!(state);
1,749,116 ( 0.11%)          compress!(state);
        .               }
        .           
        .               #[inline]
        .               fn d_rounds(state: &mut State) {
   40,952 ( 0.00%)          compress!(state);
   40,952 ( 0.00%)          compress!(state);
   40,952 ( 0.00%)          compress!(state);
   34,609 ( 0.00%)          compress!(state);
        .               }
        .           }

  354,146 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/../../stdarch/crates/core_arch/src/x86/sse2.rs
--------------------------------------------------------------------------------
Ir                  

-- line 94 ----------------------------------------
         .           /// Adds packed 32-bit integers in `a` and `b`.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_add_epi32)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(paddd))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_add_epi32(a: __m128i, b: __m128i) -> __m128i {
        17 ( 0.00%)      transmute(simd_add(a.as_i32x4(), b.as_i32x4()))
         .           }
         .           
         .           /// Adds packed 64-bit integers in `a` and `b`.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_add_epi64)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(paddq))]
-- line 110 ----------------------------------------
-- line 767 ----------------------------------------
         .           /// `b`.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_or_si128)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(orps))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_or_si128(a: __m128i, b: __m128i) -> __m128i {
         4 ( 0.00%)      simd_or(a, b)
         .           }
         .           
         .           /// Computes the bitwise XOR of 128 bits (representing integer data) in `a` and
         .           /// `b`.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_xor_si128)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
-- line 783 ----------------------------------------
-- line 790 ----------------------------------------
         .           /// Compares packed 8-bit integers in `a` and `b` for equality.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmpeq_epi8)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pcmpeqb))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_cmpeq_epi8(a: __m128i, b: __m128i) -> __m128i {
   281,630 ( 0.02%)      transmute::<i8x16, _>(simd_eq(a.as_i8x16(), b.as_i8x16()))
         .           }
         .           
         .           /// Compares packed 16-bit integers in `a` and `b` for equality.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmpeq_epi16)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pcmpeqw))]
-- line 806 ----------------------------------------
-- line 823 ----------------------------------------
         .           /// Compares packed 8-bit integers in `a` and `b` for greater-than.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmpgt_epi8)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pcmpgtb))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_cmpgt_epi8(a: __m128i, b: __m128i) -> __m128i {
         8 ( 0.00%)      transmute::<i8x16, _>(simd_gt(a.as_i8x16(), b.as_i8x16()))
         .           }
         .           
         .           /// Compares packed 16-bit integers in `a` and `b` for greater-than.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmpgt_epi16)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pcmpgtw))]
-- line 839 ----------------------------------------
-- line 856 ----------------------------------------
         .           /// Compares packed 8-bit integers in `a` and `b` for less-than.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmplt_epi8)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pcmpgtb))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_cmplt_epi8(a: __m128i, b: __m128i) -> __m128i {
    24,776 ( 0.00%)      transmute::<i8x16, _>(simd_lt(a.as_i8x16(), b.as_i8x16()))
         .           }
         .           
         .           /// Compares packed 16-bit integers in `a` and `b` for less-than.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmplt_epi16)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pcmpgtw))]
-- line 872 ----------------------------------------
-- line 1174 ----------------------------------------
         .           /// `mem_addr` must be aligned on a 16-byte boundary.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_load_si128)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(movaps))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_load_si128(mem_addr: *const __m128i) -> __m128i {
   111,772 ( 0.01%)      *mem_addr
         .           }
         .           
         .           /// Loads 128-bits of integer data from memory into a new vector.
         .           ///
         .           /// `mem_addr` does not need to be aligned on any particular boundary.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_loadu_si128)
         .           #[inline]
-- line 1190 ----------------------------------------
-- line 1224 ----------------------------------------
         .           /// `mem_addr` must be aligned on a 16-byte boundary.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_store_si128)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(movaps))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_store_si128(mem_addr: *mut __m128i, a: __m128i) {
         4 ( 0.00%)      *mem_addr = a;
         .           }
         .           
         .           /// Stores 128-bits of integer data from `a` into memory.
         .           ///
         .           /// `mem_addr` does not need to be aligned on any particular boundary.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_storeu_si128)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(movups))] // FIXME movdqu expected
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_storeu_si128(mem_addr: *mut __m128i, a: __m128i) {
        16 ( 0.00%)      storeudq(mem_addr as *mut i8, a);
         .           }
         .           
         .           /// Stores the lower 64-bit integer `a` to a memory location.
         .           ///
         .           /// `mem_addr` does not need to be aligned on any particular boundary.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_storel_epi64)
         .           #[inline]
-- line 1253 ----------------------------------------
-- line 1373 ----------------------------------------
         .           /// Returns a mask of the most significant bit of each element in `a`.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_movemask_epi8)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pmovmskb))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_movemask_epi8(a: __m128i) -> i32 {
17,328,880 ( 1.06%)      pmovmskb(a.as_i8x16())
         .           }
         .           
         .           /// Shuffles 32-bit integers in `a` using the control in `IMM8`.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_shuffle_epi32)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pshufd, IMM8 = 9))]
-- line 1389 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs
--------------------------------------------------------------------------------
Ir                 

-- line 14 ----------------------------------------
        .           
        .           pub type EncodeResult = Result<(), !>;
        .           
        .           pub struct Encoder {
        .               pub data: Vec<u8>,
        .           }
        .           
        .           impl Encoder {
        1 ( 0.00%)      pub fn new(data: Vec<u8>) -> Encoder {
        4 ( 0.00%)          Encoder { data }
        1 ( 0.00%)      }
        .           
        1 ( 0.00%)      pub fn into_inner(self) -> Vec<u8> {
        4 ( 0.00%)          self.data
        1 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn position(&self) -> usize {
   12,308 ( 0.00%)          self.data.len()
        .               }
        .           }
        .           
        .           macro_rules! write_leb128 {
        .               ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{
        .                   const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);
        .                   let old_len = $enc.data.len();
        .           
-- line 40 ----------------------------------------
-- line 67 ----------------------------------------
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> EncodeResult {
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn emit_usize(&mut self, v: usize) -> EncodeResult {
  236,763 ( 0.01%)          write_leb128!(self, v, usize, write_usize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u128(&mut self, v: u128) -> EncodeResult {
      469 ( 0.00%)          write_leb128!(self, v, u128, write_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u64(&mut self, v: u64) -> EncodeResult {
    1,246 ( 0.00%)          write_leb128!(self, v, u64, write_u64_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u32(&mut self, v: u32) -> EncodeResult {
  203,213 ( 0.01%)          write_leb128!(self, v, u32, write_u32_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u16(&mut self, v: u16) -> EncodeResult {
        .                   self.data.extend_from_slice(&v.to_le_bytes());
        .                   Ok(())
        .               }
        .           
-- line 98 ----------------------------------------
-- line 131 ----------------------------------------
        .               #[inline]
        .               fn emit_i8(&mut self, v: i8) -> EncodeResult {
        .                   let as_u8: u8 = unsafe { std::mem::transmute(v) };
        .                   self.emit_u8(as_u8)
        .               }
        .           
        .               #[inline]
        .               fn emit_bool(&mut self, v: bool) -> EncodeResult {
    2,421 ( 0.00%)          self.emit_u8(if v { 1 } else { 0 })
        .               }
        .           
        .               #[inline]
        .               fn emit_f64(&mut self, v: f64) -> EncodeResult {
        .                   let as_u64: u64 = v.to_bits();
        .                   self.emit_u64(as_u64)
        .               }
        .           
-- line 147 ----------------------------------------
-- line 549 ----------------------------------------
        .               #[inline]
        .               pub fn advance(&mut self, bytes: usize) {
        .                   self.position += bytes;
        .               }
        .           
        .               #[inline]
        .               pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {
        .                   let start = self.position;
       27 ( 0.00%)          self.position += bytes;
       27 ( 0.00%)          &self.data[start..self.position]
        .               }
        .           }
        .           
        .           macro_rules! read_leb128 {
        .               ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};
        .           }
        .           
        .           impl<'a> serialize::Decoder for Decoder<'a> {
        .               #[inline]
        .               fn read_unit(&mut self) -> () {
        .                   ()
        .               }
        .           
        .               #[inline]
        .               fn read_u128(&mut self) -> u128 {
      639 ( 0.00%)          read_leb128!(self, read_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_u64(&mut self) -> u64 {
    3,643 ( 0.00%)          read_leb128!(self, read_u64_leb128)
        .               }
        .           
        .               #[inline]
   74,448 ( 0.00%)      fn read_u32(&mut self) -> u32 {
  276,204 ( 0.02%)          read_leb128!(self, read_u32_leb128)
  148,896 ( 0.01%)      }
        .           
        .               #[inline]
        .               fn read_u16(&mut self) -> u16 {
  561,407 ( 0.03%)          let bytes = [self.data[self.position], self.data[self.position + 1]];
   80,201 ( 0.00%)          let value = u16::from_le_bytes(bytes);
  160,408 ( 0.01%)          self.position += 2;
        .                   value
        .               }
        .           
        .               #[inline]
        .               fn read_u8(&mut self) -> u8 {
2,228,164 ( 0.14%)          let value = self.data[self.position];
  448,043 ( 0.03%)          self.position += 1;
        .                   value
        .               }
        .           
        .               #[inline]
  349,938 ( 0.02%)      fn read_usize(&mut self) -> usize {
  350,706 ( 0.02%)          read_leb128!(self, read_usize_leb128)
  699,876 ( 0.04%)      }
        .           
        .               #[inline]
        .               fn read_i128(&mut self) -> i128 {
        .                   read_leb128!(self, read_i128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_i64(&mut self) -> i64 {
-- line 613 ----------------------------------------
-- line 637 ----------------------------------------
        .               #[inline]
        .               fn read_isize(&mut self) -> isize {
        .                   read_leb128!(self, read_isize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_bool(&mut self) -> bool {
        .                   let value = self.read_u8();
   35,612 ( 0.00%)          value != 0
        .               }
        .           
        .               #[inline]
        .               fn read_f64(&mut self) -> f64 {
        .                   let bits = self.read_u64();
        .                   f64::from_bits(bits)
        .               }
        .           
-- line 653 ----------------------------------------
-- line 660 ----------------------------------------
        .               #[inline]
        .               fn read_char(&mut self) -> char {
        .                   let bits = self.read_u32();
        .                   std::char::from_u32(bits).unwrap()
        .               }
        .           
        .               #[inline]
        .               fn read_str(&mut self) -> Cow<'_, str> {
   53,894 ( 0.00%)          let len = self.read_usize();
  315,632 ( 0.02%)          let sentinel = self.data[self.position + len];
   79,484 ( 0.00%)          assert!(sentinel == STR_SENTINEL);
        .                   let s = unsafe {
        .                       std::str::from_utf8_unchecked(&self.data[self.position..self.position + len])
        .                   };
  198,710 ( 0.01%)          self.position += len + 1;
   44,745 ( 0.00%)          Cow::Borrowed(s)
        .               }
        .           
        .               #[inline]
        .               fn read_raw_bytes_into(&mut self, s: &mut [u8]) {
      227 ( 0.00%)          let start = self.position;
    1,790 ( 0.00%)          self.position += s.len();
      227 ( 0.00%)          s.copy_from_slice(&self.data[start..self.position]);
        .               }
        .           }
        .           
        .           // Specializations for contiguous byte sequences follow. The default implementations for slices
        .           // encode and decode each element individually. This isn't necessary for `u8` slices when using
        .           // opaque encoders and decoders, because each `u8` is unchanged by encoding and decoding.
        .           // Therefore, we can use more efficient implementations that process the entire sequence at once.
        .           
-- line 690 ----------------------------------------

  839,474 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs
--------------------------------------------------------------------------------
Ir               

-- line 44 ----------------------------------------
      .           /// Convert from a specific kind of undo to the more general UndoLog
      .           impl<'tcx> From<Instantiate> for UndoLog<'tcx> {
      .               fn from(l: Instantiate) -> Self {
      .                   UndoLog::Values(sv::UndoLog::Other(l))
      .               }
      .           }
      .           
      .           impl<'tcx> Rollback<UndoLog<'tcx>> for TypeVariableStorage<'tcx> {
 56,711 ( 0.00%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
239,783 ( 0.01%)          match undo {
 43,772 ( 0.00%)              UndoLog::EqRelation(undo) => self.eq_relations.reverse(undo),
 27,210 ( 0.00%)              UndoLog::SubRelation(undo) => self.sub_relations.reverse(undo),
 42,440 ( 0.00%)              UndoLog::Values(undo) => self.values.reverse(undo),
      .                   }
113,422 ( 0.01%)      }
      .           }
      .           
      .           pub struct TypeVariableStorage<'tcx> {
      .               values: sv::SnapshotVecStorage<Delegate>,
      .           
      .               /// Two variables are unified in `eq_relations` when we have a
      .               /// constraint `?X == ?Y`. This table also stores, for each key,
      .               /// the known value.
-- line 66 ----------------------------------------
-- line 136 ----------------------------------------
      .               DynReturnFn,
      .               LatticeVariable,
      .           }
      .           
      .           pub(crate) struct TypeVariableData {
      .               origin: TypeVariableOrigin,
      .           }
      .           
419,586 ( 0.03%)  #[derive(Copy, Clone, Debug)]
      .           pub enum TypeVariableValue<'tcx> {
      .               Known { value: Ty<'tcx> },
      .               Unknown { universe: ty::UniverseIndex },
      .           }
      .           
      .           impl<'tcx> TypeVariableValue<'tcx> {
      .               /// If this value is known, returns the type it is known to be.
      .               /// Otherwise, `None`.
      .               pub fn known(&self) -> Option<Ty<'tcx>> {
267,952 ( 0.02%)          match *self {
      .                       TypeVariableValue::Unknown { .. } => None,
      .                       TypeVariableValue::Known { value } => Some(value),
      .                   }
      .               }
      .           
      .               pub fn is_unknown(&self) -> bool {
      .                   match *self {
      .                       TypeVariableValue::Unknown { .. } => true,
-- line 162 ----------------------------------------
-- line 166 ----------------------------------------
      .           }
      .           
      .           pub(crate) struct Instantiate;
      .           
      .           pub(crate) struct Delegate;
      .           
      .           impl<'tcx> TypeVariableStorage<'tcx> {
      .               pub fn new() -> TypeVariableStorage<'tcx> {
 25,395 ( 0.00%)          TypeVariableStorage {
      .                       values: sv::SnapshotVecStorage::new(),
      .                       eq_relations: ut::UnificationTableStorage::new(),
      .                       sub_relations: ut::UnificationTableStorage::new(),
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub(crate) fn with_log<'a>(
-- line 182 ----------------------------------------
-- line 188 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> TypeVariableTable<'_, 'tcx> {
      .               /// Returns the origin that was given when `vid` was created.
      .               ///
      .               /// Note that this function does not return care whether
      .               /// `vid` has been unified with something else or not.
      .               pub fn var_origin(&self, vid: ty::TyVid) -> &TypeVariableOrigin {
    665 ( 0.00%)          &self.storage.values.get(vid.as_usize()).origin
      .               }
      .           
      .               /// Records that `a == b`, depending on `dir`.
      .               ///
      .               /// Precondition: neither `a` nor `b` are known.
      .               pub fn equate(&mut self, a: ty::TyVid, b: ty::TyVid) {
      .                   debug_assert!(self.probe(a).is_unknown());
      .                   debug_assert!(self.probe(b).is_unknown());
  3,724 ( 0.00%)          self.eq_relations().union(a, b);
  3,192 ( 0.00%)          self.sub_relations().union(a, b);
      .               }
      .           
      .               /// Records that `a <: b`, depending on `dir`.
      .               ///
      .               /// Precondition: neither `a` nor `b` are known.
      .               pub fn sub(&mut self, a: ty::TyVid, b: ty::TyVid) {
      .                   debug_assert!(self.probe(a).is_unknown());
      .                   debug_assert!(self.probe(b).is_unknown());
  3,271 ( 0.00%)          self.sub_relations().union(a, b);
      .               }
      .           
      .               /// Instantiates `vid` with the type `ty`.
      .               ///
      .               /// Precondition: `vid` must not have been previously instantiated.
 87,975 ( 0.01%)      pub fn instantiate(&mut self, vid: ty::TyVid, ty: Ty<'tcx>) {
      .                   let vid = self.root_var(vid);
      .                   debug_assert!(self.probe(vid).is_unknown());
      .                   debug_assert!(
      .                       self.eq_relations().probe_value(vid).is_unknown(),
      .                       "instantiating type variable `{:?}` twice: new-value = {:?}, old-value={:?}",
      .                       vid,
      .                       ty,
      .                       self.eq_relations().probe_value(vid)
      .                   );
123,165 ( 0.01%)          self.eq_relations().union_value(vid, TypeVariableValue::Known { value: ty });
      .           
      .                   // Hack: we only need this so that `types_escaping_snapshot`
      .                   // can see what has been unified; see the Delegate impl for
      .                   // more details.
      .                   self.undo_log.push(Instantiate);
 87,975 ( 0.01%)      }
      .           
      .               /// Creates a new type variable.
      .               ///
      .               /// - `diverging`: indicates if this is a "diverging" type
      .               ///   variable, e.g.,  one created as the type of a `return`
      .               ///   expression. The code in this module doesn't care if a
      .               ///   variable is diverging, but the main Rust type-checker will
      .               ///   sometimes "unify" such variables with the `!` or `()` types.
      .               /// - `origin`: indicates *why* the type variable was created.
      .               ///   The code in this module doesn't care, but it can be useful
      .               ///   for improving error messages.
125,352 ( 0.01%)      pub fn new_var(
      .                   &mut self,
      .                   universe: ty::UniverseIndex,
      .                   origin: TypeVariableOrigin,
      .               ) -> ty::TyVid {
188,028 ( 0.01%)          let eq_key = self.eq_relations().new_key(TypeVariableValue::Unknown { universe });
      .           
104,460 ( 0.01%)          let sub_key = self.sub_relations().new_key(());
 20,892 ( 0.00%)          assert_eq!(eq_key.vid, sub_key);
      .           
188,028 ( 0.01%)          let index = self.values().push(TypeVariableData { origin });
 83,568 ( 0.01%)          assert_eq!(eq_key.vid.as_u32(), index as u32);
      .           
      .                   debug!("new_var(index={:?}, universe={:?}, origin={:?}", eq_key.vid, universe, origin,);
      .           
      .                   eq_key.vid
146,244 ( 0.01%)      }
      .           
      .               /// Returns the number of type variables created thus far.
      .               pub fn num_vars(&self) -> usize {
  1,569 ( 0.00%)          self.storage.values.len()
      .               }
      .           
      .               /// Returns the "root" variable of `vid` in the `eq_relations`
      .               /// equivalence table. All type variables that have been equated
      .               /// will yield the same root variable (per the union-find
      .               /// algorithm), so `root_var(a) == root_var(b)` implies that `a ==
      .               /// b` (transitively).
      .               pub fn root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
 71,562 ( 0.00%)          self.eq_relations().find(vid).vid
      .               }
      .           
      .               /// Returns the "root" variable of `vid` in the `sub_relations`
      .               /// equivalence table. All type variables that have been are
      .               /// related via equality or subtyping will yield the same root
      .               /// variable (per the union-find algorithm), so `sub_root_var(a)
      .               /// == sub_root_var(b)` implies that:
      .               ///
      .               ///     exists X. (a <: X || X <: a) && (b <: X || X <: b)
    272 ( 0.00%)      pub fn sub_root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
 55,119 ( 0.00%)          self.sub_relations().find(vid)
    544 ( 0.00%)      }
      .           
      .               /// Returns `true` if `a` and `b` have same "sub-root" (i.e., exists some
      .               /// type X such that `forall i in {a, b}. (i <: X || X <: i)`.
      .               pub fn sub_unified(&mut self, a: ty::TyVid, b: ty::TyVid) -> bool {
      .                   self.sub_root_var(a) == self.sub_root_var(b)
      .               }
      .           
      .               /// Retrieves the type to which `vid` has been instantiated, if
      .               /// any.
957,030 ( 0.06%)      pub fn probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
      .                   self.inlined_probe(vid)
957,030 ( 0.06%)      }
      .           
      .               /// An always-inlined variant of `probe`, for very hot call sites.
      .               #[inline(always)]
      .               pub fn inlined_probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
826,694 ( 0.05%)          self.eq_relations().inlined_probe_value(vid)
      .               }
      .           
      .               /// If `t` is a type-inference variable, and it has been
      .               /// instantiated, then return the with which it was
      .               /// instantiated. Otherwise, returns `t`.
      .               pub fn replace_if_possible(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
225,836 ( 0.01%)          match *t.kind() {
145,972 ( 0.01%)              ty::Infer(ty::TyVar(v)) => match self.probe(v) {
      .                           TypeVariableValue::Unknown { .. } => t,
      .                           TypeVariableValue::Known { value } => value,
      .                       },
      .                       _ => t,
      .                   }
      .               }
      .           
      .               #[inline]
-- line 323 ----------------------------------------
-- line 324 ----------------------------------------
      .               fn values(
      .                   &mut self,
      .               ) -> sv::SnapshotVec<Delegate, &mut Vec<TypeVariableData>, &mut InferCtxtUndoLogs<'tcx>> {
      .                   self.storage.values.with_log(self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn eq_relations(&mut self) -> super::UnificationTable<'_, 'tcx, TyVidEqKey<'tcx>> {
918,411 ( 0.06%)          self.storage.eq_relations.with_log(self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn sub_relations(&mut self) -> super::UnificationTable<'_, 'tcx, ty::TyVid> {
 41,948 ( 0.00%)          self.storage.sub_relations.with_log(self.undo_log)
      .               }
      .           
      .               /// Returns a range of the type variables created during the snapshot.
  7,845 ( 0.00%)      pub fn vars_since_snapshot(
      .                   &mut self,
      .                   value_count: usize,
      .               ) -> (Range<TyVid>, Vec<TypeVariableOrigin>) {
      .                   let range = TyVid::from_usize(value_count)..TyVid::from_usize(self.num_vars());
  9,414 ( 0.00%)          (
      .                       range.start..range.end,
      .                       (range.start.as_usize()..range.end.as_usize())
      .                           .map(|index| self.storage.values.get(index).origin)
      .                           .collect(),
      .                   )
  9,414 ( 0.00%)      }
      .           
      .               /// Returns indices of all variables that are not yet
      .               /// instantiated.
      .               pub fn unsolved_variables(&mut self) -> Vec<ty::TyVid> {
      .                   (0..self.storage.values.len())
      .                       .filter_map(|i| {
      .                           let vid = ty::TyVid::from_usize(i);
 53,572 ( 0.00%)                  match self.probe(vid) {
      .                               TypeVariableValue::Unknown { .. } => Some(vid),
      .                               TypeVariableValue::Known { .. } => None,
      .                           }
      .                       })
      .                       .collect()
      .               }
      .           }
      .           
-- line 368 ----------------------------------------
-- line 391 ----------------------------------------
      .           /// These structs (a newtyped TyVid) are used as the unification key
      .           /// for the `eq_relations`; they carry a `TypeVariableValue` along
      .           /// with them.
      .           #[derive(Copy, Clone, Debug, PartialEq, Eq)]
      .           pub(crate) struct TyVidEqKey<'tcx> {
      .               vid: ty::TyVid,
      .           
      .               // in the table, we map each ty-vid to one of these:
908,601 ( 0.06%)      phantom: PhantomData<TypeVariableValue<'tcx>>,
      .           }
      .           
      .           impl<'tcx> From<ty::TyVid> for TyVidEqKey<'tcx> {
      .               #[inline] // make this function eligible for inlining - it is quite hot.
      .               fn from(vid: ty::TyVid) -> Self {
      .                   TyVidEqKey { vid, phantom: PhantomData }
      .               }
      .           }
-- line 407 ----------------------------------------
-- line 419 ----------------------------------------
      .                   "TyVidEqKey"
      .               }
      .           }
      .           
      .           impl<'tcx> ut::UnifyValue for TypeVariableValue<'tcx> {
      .               type Error = ut::NoError;
      .           
      .               fn unify_values(value1: &Self, value2: &Self) -> Result<Self, ut::NoError> {
 73,040 ( 0.00%)          match (value1, value2) {
      .                       // We never equate two type variables, both of which
      .                       // have known types.  Instead, we recursively equate
      .                       // those types.
      .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Known { .. }) => {
      .                           bug!("equating two type variables, both of which have known types")
      .                       }
      .           
      .                       // If one side is known, prefer that one.
      .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Unknown { .. }) => Ok(*value1),
      .                       (&TypeVariableValue::Unknown { .. }, &TypeVariableValue::Known { .. }) => Ok(*value2),
      .           
      .                       // If both sides are *unknown*, it hardly matters, does it?
      .                       (
    532 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe1 },
    532 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe2 },
      .                       ) => {
      .                           // If we unify two unbound variables, ?T and ?U, then whatever
      .                           // value they wind up taking (which must be the same value) must
      .                           // be nameable by both universes. Therefore, the resulting
      .                           // universe is the minimum of the two universes, because that is
      .                           // the one which contains the fewest names in scope.
      .                           let universe = cmp::min(universe1, universe2);
  2,128 ( 0.00%)                  Ok(TypeVariableValue::Unknown { universe })
      .                       }
      .                   }
      .               }
      .           }

 50,672 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs
--------------------------------------------------------------------------------
Ir                 

-- line 28 ----------------------------------------
        .           
        .               /// Returns a static string we can use for printouts.
        .               fn tag(&self) -> &'static str;
        .           
        .               /// Returns `true` if the value `a` is the "expected" type in the
        .               /// relation. Just affects error messages.
        .               fn a_is_expected(&self) -> bool;
        .           
    2,545 ( 0.00%)      fn with_cause<F, R>(&mut self, _cause: Cause, f: F) -> R
        .               where
        .                   F: FnOnce(&mut Self) -> R,
        .               {
        .                   f(self)
    2,243 ( 0.00%)      }
        .           
        .               /// Generic relation routine suitable for most anything.
  369,090 ( 0.02%)      fn relate<T: Relate<'tcx>>(&mut self, a: T, b: T) -> RelateResult<'tcx, T> {
  182,450 ( 0.01%)          Relate::relate(self, a, b)
  303,343 ( 0.02%)      }
        .           
        .               /// Relate the two substitutions for the given item. The default
        .               /// is to look up the variance for the item and proceed
        .               /// accordingly.
   72,900 ( 0.00%)      fn relate_item_substs(
        .                   &mut self,
        .                   item_def_id: DefId,
        .                   a_subst: SubstsRef<'tcx>,
        .                   b_subst: SubstsRef<'tcx>,
        .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
        .                   debug!(
        .                       "relate_item_substs(item_def_id={:?}, a_subst={:?}, b_subst={:?})",
        .                       item_def_id, a_subst, b_subst
        .                   );
        .           
        .                   let tcx = self.tcx();
        .                   let opt_variances = tcx.variances_of(item_def_id);
   29,160 ( 0.00%)          relate_substs(self, Some((item_def_id, opt_variances)), a_subst, b_subst)
   65,610 ( 0.00%)      }
        .           
        .               /// Switch variance for the purpose of relating `a` and `b`.
        .               fn relate_with_variance<T: Relate<'tcx>>(
        .                   &mut self,
        .                   variance: ty::Variance,
        .                   info: ty::VarianceDiagInfo<'tcx>,
        .                   a: T,
        .                   b: T,
-- line 73 ----------------------------------------
-- line 108 ----------------------------------------
        .                   a: Self,
        .                   b: Self,
        .               ) -> RelateResult<'tcx, Self>;
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Relate impls
        .           
  133,738 ( 0.01%)  pub fn relate_type_and_mut<'tcx, R: TypeRelation<'tcx>>(
        .               relation: &mut R,
        .               a: ty::TypeAndMut<'tcx>,
        .               b: ty::TypeAndMut<'tcx>,
        .               base_ty: Ty<'tcx>,
        .           ) -> RelateResult<'tcx, ty::TypeAndMut<'tcx>> {
        .               debug!("{}.mts({:?}, {:?})", relation.tag(), a, b);
   23,311 ( 0.00%)      if a.mutbl != b.mutbl {
      768 ( 0.00%)          Err(TypeError::Mutability)
        .               } else {
        .                   let mutbl = a.mutbl;
        .                   let (variance, info) = match mutbl {
        .                       ast::Mutability::Not => (ty::Covariant, ty::VarianceDiagInfo::None),
        .                       ast::Mutability::Mut => {
        .                           (ty::Invariant, ty::VarianceDiagInfo::Invariant { ty: base_ty, param_index: 0 })
        .                       }
        .                   };
    9,923 ( 0.00%)          let ty = relation.relate_with_variance(variance, info, a.ty, b.ty)?;
   61,607 ( 0.00%)          Ok(ty::TypeAndMut { ty, mutbl })
        .               }
  134,175 ( 0.01%)  }
        .           
        .           pub fn relate_substs<'tcx, R: TypeRelation<'tcx>>(
        .               relation: &mut R,
        .               variances: Option<(DefId, &[ty::Variance])>,
        .               a_subst: SubstsRef<'tcx>,
        .               b_subst: SubstsRef<'tcx>,
        .           ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
   75,659 ( 0.00%)      let tcx = relation.tcx();
   33,494 ( 0.00%)      let mut cached_ty = None;
        .           
        .               let params = iter::zip(a_subst, b_subst).enumerate().map(|(i, (a, b))| {
  205,049 ( 0.01%)          let (variance, variance_info) = match variances {
   26,176 ( 0.00%)              Some((ty_def_id, variances)) => {
   39,264 ( 0.00%)                  let variance = variances[i];
   13,088 ( 0.00%)                  let variance_info = if variance == ty::Invariant {
        .                               let ty =
    3,828 ( 0.00%)                          cached_ty.get_or_insert_with(|| tcx.type_of(ty_def_id).subst(tcx, a_subst));
        .                               ty::VarianceDiagInfo::Invariant { ty, param_index: i.try_into().unwrap() }
        .                           } else {
        .                               ty::VarianceDiagInfo::default()
        .                           };
        .                           (variance, variance_info)
        .                       }
        .                       None => (ty::Invariant, ty::VarianceDiagInfo::default()),
        .                   };
   50,551 ( 0.00%)          relation.relate_with_variance(variance, variance_info, a, b)
        .               });
        .           
        .               tcx.mk_substs(params)
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {
   14,274 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::FnSig<'tcx>,
        .                   b: ty::FnSig<'tcx>,
        .               ) -> RelateResult<'tcx, ty::FnSig<'tcx>> {
        .                   let tcx = relation.tcx();
        .           
    6,588 ( 0.00%)          if a.c_variadic != b.c_variadic {
        .                       return Err(TypeError::VariadicMismatch(expected_found(
        .                           relation,
        .                           a.c_variadic,
        .                           b.c_variadic,
        .                       )));
        .                   }
    5,394 ( 0.00%)          let unsafety = relation.relate(a.unsafety, b.unsafety)?;
        .                   let abi = relation.relate(a.abi, b.abi)?;
        .           
    9,381 ( 0.00%)          if a.inputs().len() != b.inputs().len() {
        .                       return Err(TypeError::ArgCount);
        .                   }
        .           
    9,882 ( 0.00%)          let inputs_and_output = iter::zip(a.inputs(), b.inputs())
    4,387 ( 0.00%)              .map(|(&a, &b)| ((a, b), false))
    8,784 ( 0.00%)              .chain(iter::once(((a.output(), b.output()), true)))
    1,229 ( 0.00%)              .map(|((a, b), is_output)| {
    1,229 ( 0.00%)                  if is_output {
    1,336 ( 0.00%)                      relation.relate(a, b)
        .                           } else {
        .                               relation.relate_with_variance(
        .                                   ty::Contravariant,
        .                                   ty::VarianceDiagInfo::default(),
        .                                   a,
        .                                   b,
        .                               )
        .                           }
        .                       })
        .                       .enumerate()
    6,996 ( 0.00%)              .map(|(i, r)| match r {
        .                           Err(TypeError::Sorts(exp_found) | TypeError::ArgumentSorts(exp_found, _)) => {
        .                               Err(TypeError::ArgumentSorts(exp_found, i))
        .                           }
        .                           Err(TypeError::Mutability | TypeError::ArgumentMutability(_)) => {
        .                               Err(TypeError::ArgumentMutability(i))
        .                           }
    8,433 ( 0.00%)                  r => r,
        .                       });
    8,187 ( 0.00%)          Ok(ty::FnSig {
        .                       inputs_and_output: tcx.mk_type_list(inputs_and_output)?,
    1,098 ( 0.00%)              c_variadic: a.c_variadic,
        .                       unsafety,
        .                       abi,
        .                   })
    9,882 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::BoundConstness {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::BoundConstness,
        .                   b: ty::BoundConstness,
        .               ) -> RelateResult<'tcx, ty::BoundConstness> {
-- line 229 ----------------------------------------
-- line 236 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ast::Unsafety {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ast::Unsafety,
        .                   b: ast::Unsafety,
        .               ) -> RelateResult<'tcx, ast::Unsafety> {
    1,098 ( 0.00%)          if a != b {
        .                       Err(TypeError::UnsafetyMismatch(expected_found(relation, a, b)))
        .                   } else {
        .                       Ok(a)
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for abi::Abi {
-- line 252 ----------------------------------------
-- line 255 ----------------------------------------
        .                   a: abi::Abi,
        .                   b: abi::Abi,
        .               ) -> RelateResult<'tcx, abi::Abi> {
        .                   if a == b { Ok(a) } else { Err(TypeError::AbiMismatch(expected_found(relation, a, b))) }
        .               }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::ProjectionTy<'tcx> {
    3,369 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::ProjectionTy<'tcx>,
        .                   b: ty::ProjectionTy<'tcx>,
        .               ) -> RelateResult<'tcx, ty::ProjectionTy<'tcx>> {
      744 ( 0.00%)          if a.item_def_id != b.item_def_id {
        .                       Err(TypeError::ProjectionMismatched(expected_found(
        .                           relation,
        .                           a.item_def_id,
        .                           b.item_def_id,
        .                       )))
        .                   } else {
        .                       let substs = relation.relate(a.substs, b.substs)?;
      968 ( 0.00%)              Ok(ty::ProjectionTy { item_def_id: a.item_def_id, substs: &substs })
        .                   }
    2,190 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::ExistentialProjection<'tcx> {
    1,907 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::ExistentialProjection<'tcx>,
        .                   b: ty::ExistentialProjection<'tcx>,
        .               ) -> RelateResult<'tcx, ty::ExistentialProjection<'tcx>> {
    1,365 ( 0.00%)          if a.item_def_id != b.item_def_id {
        .                       Err(TypeError::ProjectionMismatched(expected_found(
        .                           relation,
        .                           a.item_def_id,
        .                           b.item_def_id,
        .                       )))
        .                   } else {
        .                       let term = relation.relate_with_variance(
        .                           ty::Invariant,
        .                           ty::VarianceDiagInfo::default(),
      638 ( 0.00%)                  a.term,
      714 ( 0.00%)                  b.term,
        .                       )?;
      602 ( 0.00%)              let substs = relation.relate_with_variance(
        .                           ty::Invariant,
        .                           ty::VarianceDiagInfo::default(),
      195 ( 0.00%)                  a.substs,
      195 ( 0.00%)                  b.substs,
        .                       )?;
    1,831 ( 0.00%)              Ok(ty::ExistentialProjection { item_def_id: a.item_def_id, substs, term })
        .                   }
    1,755 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::TraitRef<'tcx> {
  144,942 ( 0.01%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::TraitRef<'tcx>,
        .                   b: ty::TraitRef<'tcx>,
        .               ) -> RelateResult<'tcx, ty::TraitRef<'tcx>> {
        .                   // Different traits cannot be related.
   31,026 ( 0.00%)          if a.def_id != b.def_id {
       63 ( 0.00%)              Err(TypeError::Traits(expected_found(relation, a.def_id, b.def_id)))
        .                   } else {
   10,335 ( 0.00%)              let substs = relate_substs(relation, None, a.substs, b.substs)?;
   24,076 ( 0.00%)              Ok(ty::TraitRef { def_id: a.def_id, substs })
        .                   }
   93,176 ( 0.01%)      }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::ExistentialTraitRef<'tcx> {
      638 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::ExistentialTraitRef<'tcx>,
        .                   b: ty::ExistentialTraitRef<'tcx>,
        .               ) -> RelateResult<'tcx, ty::ExistentialTraitRef<'tcx>> {
        .                   // Different traits cannot be related.
    1,101 ( 0.00%)          if a.def_id != b.def_id {
        .                       Err(TypeError::Traits(expected_found(relation, a.def_id, b.def_id)))
        .                   } else {
      503 ( 0.00%)              let substs = relate_substs(relation, None, a.substs, b.substs)?;
      578 ( 0.00%)              Ok(ty::ExistentialTraitRef { def_id: a.def_id, substs })
        .                   }
      406 ( 0.00%)      }
        .           }
        .           
        .           #[derive(Copy, Debug, Clone, TypeFoldable)]
        .           struct GeneratorWitness<'tcx>(&'tcx ty::List<Ty<'tcx>>);
        .           
        .           impl<'tcx> Relate<'tcx> for GeneratorWitness<'tcx> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
-- line 348 ----------------------------------------
-- line 358 ----------------------------------------
        .           
        .           impl<'tcx> Relate<'tcx> for Ty<'tcx> {
        .               #[inline]
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: Ty<'tcx>,
        .                   b: Ty<'tcx>,
        .               ) -> RelateResult<'tcx, Ty<'tcx>> {
  231,782 ( 0.01%)          relation.tys(a, b)
        .               }
        .           }
        .           
        .           /// The main "type relation" routine. Note that this does not handle
        .           /// inference artifacts, so you should filter those out before calling
        .           /// it.
  516,288 ( 0.03%)  pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(
        .               relation: &mut R,
        .               a: Ty<'tcx>,
        .               b: Ty<'tcx>,
        .           ) -> RelateResult<'tcx, Ty<'tcx>> {
        .               let tcx = relation.tcx();
        .               debug!("super_relate_tys: a={:?} b={:?}", a, b);
1,141,814 ( 0.07%)      match (a.kind(), b.kind()) {
        .                   (&ty::Infer(_), _) | (_, &ty::Infer(_)) => {
        .                       // The caller should handle these cases!
        .                       bug!("var types encountered in super_relate_tys")
        .                   }
        .           
        .                   (ty::Bound(..), _) | (_, ty::Bound(..)) => {
        .                       bug!("bound types encountered in super_relate_tys")
        .                   }
-- line 388 ----------------------------------------
-- line 391 ----------------------------------------
        .           
        .                   (&ty::Never, _)
        .                   | (&ty::Char, _)
        .                   | (&ty::Bool, _)
        .                   | (&ty::Int(_), _)
        .                   | (&ty::Uint(_), _)
        .                   | (&ty::Float(_), _)
        .                   | (&ty::Str, _)
    9,917 ( 0.00%)              if a == b =>
        .                   {
        .                       Ok(a)
        .                   }
        .           
    1,550 ( 0.00%)          (&ty::Param(ref a_p), &ty::Param(ref b_p)) if a_p.index == b_p.index => Ok(a),
        .           
        .                   (ty::Placeholder(p1), ty::Placeholder(p2)) if p1 == p2 => Ok(a),
        .           
  216,858 ( 0.01%)          (&ty::Adt(a_def, a_substs), &ty::Adt(b_def, b_substs)) if a_def == b_def => {
   67,867 ( 0.00%)              let substs = relation.relate_item_substs(a_def.did, a_substs, b_substs)?;
        .                       Ok(tcx.mk_adt(a_def, substs))
        .                   }
        .           
        .                   (&ty::Foreign(a_id), &ty::Foreign(b_id)) if a_id == b_id => Ok(tcx.mk_foreign(a_id)),
        .           
    2,575 ( 0.00%)          (&ty::Dynamic(a_obj, a_region), &ty::Dynamic(b_obj, b_region)) => {
      720 ( 0.00%)              let region_bound = relation.with_cause(Cause::ExistentialRegionBound, |relation| {
        .                           relation.relate_with_variance(
        .                               ty::Contravariant,
        .                               ty::VarianceDiagInfo::default(),
      360 ( 0.00%)                      a_region,
        .                               b_region,
        .                           )
        .                       })?;
        .                       Ok(tcx.mk_dynamic(relation.relate(a_obj, b_obj)?, region_bound))
        .                   }
        .           
        .                   (&ty::Generator(a_id, a_substs, movability), &ty::Generator(b_id, b_substs, _))
        .                       if a_id == b_id =>
-- line 428 ----------------------------------------
-- line 439 ----------------------------------------
        .                       // inside the binder so we can related them
        .                       let a_types = a_types.map_bound(GeneratorWitness);
        .                       let b_types = b_types.map_bound(GeneratorWitness);
        .                       // Then remove the GeneratorWitness for the result
        .                       let types = relation.relate(a_types, b_types)?.map_bound(|witness| witness.0);
        .                       Ok(tcx.mk_generator_witness(types))
        .                   }
        .           
    1,984 ( 0.00%)          (&ty::Closure(a_id, a_substs), &ty::Closure(b_id, b_substs)) if a_id == b_id => {
        .                       // All Closure types with the same id represent
        .                       // the (anonymous) type of the same closure expression. So
        .                       // all of their regions should be equated.
      496 ( 0.00%)              let substs = relation.relate(a_substs, b_substs)?;
        .                       Ok(tcx.mk_closure(a_id, &substs))
        .                   }
        .           
        .                   (&ty::RawPtr(a_mt), &ty::RawPtr(b_mt)) => {
        .                       let mt = relate_type_and_mut(relation, a_mt, b_mt, a)?;
        .                       Ok(tcx.mk_ptr(mt))
        .                   }
        .           
  219,581 ( 0.01%)          (&ty::Ref(a_r, a_ty, a_mutbl), &ty::Ref(b_r, b_ty, b_mutbl)) => {
   97,811 ( 0.01%)              let r = relation.relate_with_variance(
        .                           ty::Contravariant,
        .                           ty::VarianceDiagInfo::default(),
        .                           a_r,
        .                           b_r,
        .                       )?;
        .                       let a_mt = ty::TypeAndMut { ty: a_ty, mutbl: a_mutbl };
        .                       let b_mt = ty::TypeAndMut { ty: b_ty, mutbl: b_mutbl };
  155,896 ( 0.01%)              let mt = relate_type_and_mut(relation, a_mt, b_mt, a)?;
        .                       Ok(tcx.mk_ref(r, mt))
        .                   }
        .           
    3,315 ( 0.00%)          (&ty::Array(a_t, sz_a), &ty::Array(b_t, sz_b)) => {
    1,431 ( 0.00%)              let t = relation.relate(a_t, b_t)?;
    1,326 ( 0.00%)              match relation.relate(sz_a, sz_b) {
    1,989 ( 0.00%)                  Ok(sz) => Ok(tcx.mk_ty(ty::Array(t, sz))),
        .                           Err(err) => {
        .                               // Check whether the lengths are both concrete/known values,
        .                               // but are unequal, for better diagnostics.
        .                               //
        .                               // It might seem dubious to eagerly evaluate these constants here,
        .                               // we however cannot end up with errors in `Relate` during both
        .                               // `type_of` and `predicates_of`. This means that evaluating the
        .                               // constants should not cause cycle errors here.
-- line 484 ----------------------------------------
-- line 489 ----------------------------------------
        .                                       TypeError::FixedArraySize(expected_found(relation, sz_a_val, sz_b_val)),
        .                                   ),
        .                                   _ => Err(err),
        .                               }
        .                           }
        .                       }
        .                   }
        .           
    2,553 ( 0.00%)          (&ty::Slice(a_t), &ty::Slice(b_t)) => {
      430 ( 0.00%)              let t = relation.relate(a_t, b_t)?;
        .                       Ok(tcx.mk_slice(t))
        .                   }
        .           
    8,258 ( 0.00%)          (&ty::Tuple(as_), &ty::Tuple(bs)) => {
    8,258 ( 0.00%)              if as_.len() == bs.len() {
        .                           Ok(tcx.mk_tup(
   27,248 ( 0.00%)                      iter::zip(as_, bs).map(|(a, b)| relation.relate(a.expect_ty(), b.expect_ty())),
        .                           )?)
        3 ( 0.00%)              } else if !(as_.is_empty() || bs.is_empty()) {
        .                           Err(TypeError::TupleSize(expected_found(relation, as_.len(), bs.len())))
        .                       } else {
        .                           Err(TypeError::Sorts(expected_found(relation, a, b)))
        .                       }
        .                   }
        .           
    1,263 ( 0.00%)          (&ty::FnDef(a_def_id, a_substs), &ty::FnDef(b_def_id, b_substs))
    2,105 ( 0.00%)              if a_def_id == b_def_id =>
        .                   {
    1,684 ( 0.00%)              let substs = relation.relate_item_substs(a_def_id, a_substs, b_substs)?;
        .                       Ok(tcx.mk_fn_def(a_def_id, substs))
        .                   }
        .           
        .                   (&ty::FnPtr(a_fty), &ty::FnPtr(b_fty)) => {
    9,046 ( 0.00%)              let fty = relation.relate(a_fty, b_fty)?;
        .                       Ok(tcx.mk_fn_ptr(fty))
        .                   }
        .           
        .                   // these two are already handled downstream in case of lazy normalization
      105 ( 0.00%)          (&ty::Projection(a_data), &ty::Projection(b_data)) => {
        .                       let projection_ty = relation.relate(a_data, b_data)?;
        .                       Ok(tcx.mk_projection(projection_ty.item_def_id, projection_ty.substs))
        .                   }
        .           
        .                   (&ty::Opaque(a_def_id, a_substs), &ty::Opaque(b_def_id, b_substs))
        .                       if a_def_id == b_def_id =>
        .                   {
        .                       let substs = relate_substs(relation, None, a_substs, b_substs)?;
        .                       Ok(tcx.mk_opaque(a_def_id, substs))
        .                   }
        .           
        .                   _ => Err(TypeError::Sorts(expected_found(relation, a, b))),
        .               }
  580,824 ( 0.04%)  }
        .           
        .           /// The main "const relation" routine. Note that this does not handle
        .           /// inference artifacts, so you should filter those out before calling
        .           /// it.
    1,860 ( 0.00%)  pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(
        .               relation: &mut R,
        .               a: &'tcx ty::Const<'tcx>,
        .               b: &'tcx ty::Const<'tcx>,
        .           ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
        .               debug!("{}.super_relate_consts(a = {:?}, b = {:?})", relation.tag(), a, b);
        .               let tcx = relation.tcx();
        .           
        .               // FIXME(oli-obk): once const generics can have generic types, this assertion
        .               // will likely get triggered. Move to `normalize_erasing_regions` at that point.
      372 ( 0.00%)      let a_ty = tcx.erase_regions(a.ty);
      372 ( 0.00%)      let b_ty = tcx.erase_regions(b.ty);
      186 ( 0.00%)      if a_ty != b_ty {
        .                   relation.tcx().sess.delay_span_bug(
        .                       DUMMY_SP,
        .                       &format!("cannot relate constants of different types: {} != {}", a_ty, b_ty),
        .                   );
        .               }
        .           
        .               let eagerly_eval = |x: &'tcx ty::Const<'tcx>| x.eval(tcx, relation.param_env());
      186 ( 0.00%)      let a = eagerly_eval(a);
      372 ( 0.00%)      let b = eagerly_eval(b);
        .           
        .               // Currently, the values that can be unified are primitive types,
        .               // and those that derive both `PartialEq` and `Eq`, corresponding
        .               // to structural-match types.
    2,046 ( 0.00%)      let is_match = match (a.val, b.val) {
        .                   (ty::ConstKind::Infer(_), _) | (_, ty::ConstKind::Infer(_)) => {
        .                       // The caller should handle these cases!
        .                       bug!("var types encountered in super_relate_consts: {:?} {:?}", a, b)
        .                   }
        .           
        .                   (ty::ConstKind::Error(_), _) => return Ok(a),
        .                   (_, ty::ConstKind::Error(_)) => return Ok(b),
        .           
-- line 580 ----------------------------------------
-- line 608 ----------------------------------------
        .                               substs,
        .                               promoted: au.promoted,
        .                           }),
        .                           ty: a.ty,
        .                       }));
        .                   }
        .                   _ => false,
        .               };
    1,116 ( 0.00%)      if is_match { Ok(a) } else { Err(TypeError::ConstMismatch(expected_found(relation, a, b))) }
    1,674 ( 0.00%)  }
        .           
        .           fn check_const_value_eq<'tcx, R: TypeRelation<'tcx>>(
        .               relation: &mut R,
        .               a_val: ConstValue<'tcx>,
        .               b_val: ConstValue<'tcx>,
        .               // FIXME(oli-obk): these arguments should go away with valtrees
        .               a: &'tcx ty::Const<'tcx>,
        .               b: &'tcx ty::Const<'tcx>,
        .               // FIXME(oli-obk): this should just be `bool` with valtrees
        .           ) -> RelateResult<'tcx, bool> {
      186 ( 0.00%)      let tcx = relation.tcx();
    2,046 ( 0.00%)      Ok(match (a_val, b_val) {
    4,092 ( 0.00%)          (ConstValue::Scalar(Scalar::Int(a_val)), ConstValue::Scalar(Scalar::Int(b_val))) => {
      186 ( 0.00%)              a_val == b_val
        .                   }
        .                   (
        .                       ConstValue::Scalar(Scalar::Ptr(a_val, _a_size)),
        .                       ConstValue::Scalar(Scalar::Ptr(b_val, _b_size)),
        .                   ) => {
        .                       a_val == b_val
        .                           || match (tcx.global_alloc(a_val.provenance), tcx.global_alloc(b_val.provenance)) {
        .                               (GlobalAlloc::Function(a_instance), GlobalAlloc::Function(b_instance)) => {
-- line 639 ----------------------------------------
-- line 672 ----------------------------------------
        .                       }
        .                   }
        .           
        .                   _ => false,
        .               })
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>> {
    3,710 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: Self,
        .                   b: Self,
        .               ) -> RelateResult<'tcx, Self> {
      371 ( 0.00%)          let tcx = relation.tcx();
        .           
        .                   // FIXME: this is wasteful, but want to do a perf run to see how slow it is.
        .                   // We need to perform this deduplication as we sometimes generate duplicate projections
        .                   // in `a`.
        .                   let mut a_v: Vec<_> = a.into_iter().collect();
        .                   let mut b_v: Vec<_> = b.into_iter().collect();
        .                   // `skip_binder` here is okay because `stable_cmp` doesn't look at binders
    1,884 ( 0.00%)          a_v.sort_by(|a, b| a.skip_binder().stable_cmp(tcx, &b.skip_binder()));
        .                   a_v.dedup();
        .                   b_v.sort_by(|a, b| a.skip_binder().stable_cmp(tcx, &b.skip_binder()));
        .                   b_v.dedup();
    1,113 ( 0.00%)          if a_v.len() != b_v.len() {
       12 ( 0.00%)              return Err(TypeError::ExistentialMismatch(expected_found(relation, a, b)));
        .                   }
        .           
    1,472 ( 0.00%)          let v = iter::zip(a_v, b_v).map(|(ep_a, ep_b)| {
        .                       use crate::ty::ExistentialPredicate::*;
    2,872 ( 0.00%)              match (ep_a.skip_binder(), ep_b.skip_binder()) {
    1,404 ( 0.00%)                  (Trait(a), Trait(b)) => Ok(ep_a
       17 ( 0.00%)                      .rebind(Trait(relation.relate(ep_a.rebind(a), ep_b.rebind(b))?.skip_binder()))),
    1,316 ( 0.00%)                  (Projection(a), Projection(b)) => Ok(ep_a.rebind(Projection(
        .                               relation.relate(ep_a.rebind(a), ep_b.rebind(b))?.skip_binder(),
        .                           ))),
      238 ( 0.00%)                  (AutoTrait(a), AutoTrait(b)) if a == b => Ok(ep_a.rebind(AutoTrait(a))),
        .                           _ => Err(TypeError::ExistentialMismatch(expected_found(relation, a, b))),
        .                       }
        .                   });
      736 ( 0.00%)          tcx.mk_poly_existential_predicates(v)
    2,968 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::ClosureSubsts<'tcx> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::ClosureSubsts<'tcx>,
        .                   b: ty::ClosureSubsts<'tcx>,
        .               ) -> RelateResult<'tcx, ty::ClosureSubsts<'tcx>> {
-- line 722 ----------------------------------------
-- line 737 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for SubstsRef<'tcx> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: SubstsRef<'tcx>,
        .                   b: SubstsRef<'tcx>,
        .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
      691 ( 0.00%)          relate_substs(relation, None, a, b)
        .               }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::Region<'tcx> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::Region<'tcx>,
        .                   b: ty::Region<'tcx>,
        .               ) -> RelateResult<'tcx, ty::Region<'tcx>> {
  117,625 ( 0.01%)          relation.regions(a, b)
        .               }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for &'tcx ty::Const<'tcx> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: &'tcx ty::Const<'tcx>,
        .                   b: &'tcx ty::Const<'tcx>,
        .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
    2,609 ( 0.00%)          relation.consts(a, b)
        .               }
        .           }
        .           
        .           impl<'tcx, T: Relate<'tcx>> Relate<'tcx> for ty::Binder<'tcx, T> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::Binder<'tcx, T>,
        .                   b: ty::Binder<'tcx, T>,
        .               ) -> RelateResult<'tcx, ty::Binder<'tcx, T>> {
   13,012 ( 0.00%)          relation.binders(a, b)
        .               }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for GenericArg<'tcx> {
  159,620 ( 0.01%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: GenericArg<'tcx>,
        .                   b: GenericArg<'tcx>,
        .               ) -> RelateResult<'tcx, GenericArg<'tcx>> {
  198,254 ( 0.01%)          match (a.unpack(), b.unpack()) {
        .                       (GenericArgKind::Lifetime(a_lt), GenericArgKind::Lifetime(b_lt)) => {
        .                           Ok(relation.relate(a_lt, b_lt)?.into())
        .                       }
        .                       (GenericArgKind::Type(a_ty), GenericArgKind::Type(b_ty)) => {
    1,655 ( 0.00%)                  Ok(relation.relate(a_ty, b_ty)?.into())
        .                       }
        .                       (GenericArgKind::Const(a_ct), GenericArgKind::Const(b_ct)) => {
        .                           Ok(relation.relate(a_ct, b_ct)?.into())
        .                       }
        .                       (GenericArgKind::Lifetime(unpacked), x) => {
        .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
        .                       }
        .                       (GenericArgKind::Type(unpacked), x) => {
        .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
        .                       }
        .                       (GenericArgKind::Const(unpacked), x) => {
        .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
        .                       }
        .                   }
  171,595 ( 0.01%)      }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::ImplPolarity {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::ImplPolarity,
        .                   b: ty::ImplPolarity,
        .               ) -> RelateResult<'tcx, ty::ImplPolarity> {
-- line 813 ----------------------------------------
-- line 815 ----------------------------------------
        .                       Err(TypeError::PolarityMismatch(expected_found(relation, a, b)))
        .                   } else {
        .                       Ok(a)
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::TraitPredicate<'tcx> {
      319 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::TraitPredicate<'tcx>,
        .                   b: ty::TraitPredicate<'tcx>,
        .               ) -> RelateResult<'tcx, ty::TraitPredicate<'tcx>> {
        .                   Ok(ty::TraitPredicate {
      145 ( 0.00%)              trait_ref: relation.relate(a.trait_ref, b.trait_ref)?,
        .                       constness: relation.relate(a.constness, b.constness)?,
        .                       polarity: relation.relate(a.polarity, b.polarity)?,
        .                   })
      261 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::Term<'tcx> {
      585 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: Self,
        .                   b: Self,
        .               ) -> RelateResult<'tcx, Self> {
    1,365 ( 0.00%)          Ok(match (a, b) {
      258 ( 0.00%)              (Term::Ty(a), Term::Ty(b)) => relation.relate(a, b)?.into(),
        .                       (Term::Const(a), Term::Const(b)) => relation.relate(a, b)?.into(),
        .                       _ => return Err(TypeError::Mismatch),
        .                   })
      780 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::ProjectionPredicate<'tcx> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::ProjectionPredicate<'tcx>,
        .                   b: ty::ProjectionPredicate<'tcx>,
        .               ) -> RelateResult<'tcx, ty::ProjectionPredicate<'tcx>> {
-- line 855 ----------------------------------------
-- line 862 ----------------------------------------
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Error handling
        .           
        .           pub fn expected_found<'tcx, R, T>(relation: &mut R, a: T, b: T) -> ExpectedFound<T>
        .           where
        .               R: TypeRelation<'tcx>,
        .           {
       42 ( 0.00%)      ExpectedFound::new(relation.a_is_expected(), a, b)
        .           }

1,275,420 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                  

-- line 70 ----------------------------------------
         .           
         .                   impl<'a, T> $name<'a, T> {
         .                       // Helper function for creating a slice from the iterator.
         .                       #[inline(always)]
         .                       fn make_slice(&self) -> &'a [T] {
         .                           // SAFETY: the iterator was created from a slice with pointer
         .                           // `self.ptr` and length `len!(self)`. This guarantees that all
         .                           // the prerequisites for `from_raw_parts` are fulfilled.
    48,744 ( 0.00%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
         .                       }
         .           
         .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
         .                       // returning the old start.
         .                       // Unsafe because the offset must not exceed `self.len()`.
         .                       #[inline(always)]
         .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
         .                           if mem::size_of::<T>() == 0 {
         .                               zst_shrink!(self, offset);
         .                               self.ptr.as_ptr()
         .                           } else {
         .                               let old = self.ptr.as_ptr();
         .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
         .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
   376,269 ( 0.02%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
         .                               old
         .                           }
         .                       }
         .           
         .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
         .                       // returning the new end.
         .                       // Unsafe because the offset must not exceed `self.len()`.
         .                       #[inline(always)]
-- line 101 ----------------------------------------
-- line 102 ----------------------------------------
         .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
         .                           if mem::size_of::<T>() == 0 {
         .                               zst_shrink!(self, offset);
         .                               self.ptr.as_ptr()
         .                           } else {
         .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
         .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
         .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
        37 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
         .                               self.end
         .                           }
         .                       }
         .                   }
         .           
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   impl<T> ExactSizeIterator for $name<'_, T> {
         .                       #[inline(always)]
         .                       fn len(&self) -> usize {
    96,087 ( 0.01%)                  len!(self)
         .                       }
         .           
         .                       #[inline(always)]
         .                       fn is_empty(&self) -> bool {
         .                           is_empty!(self)
         .                       }
         .                   }
         .           
-- line 128 ----------------------------------------
-- line 134 ----------------------------------------
         .                       fn next(&mut self) -> Option<$elem> {
         .                           // could be implemented with slices, but this avoids bounds checks
         .           
         .                           // SAFETY: `assume` calls are safe since a slice's start pointer
         .                           // must be non-null, and slices over non-ZSTs must also have a
         .                           // non-null end pointer. The call to `next_unchecked!` is safe
         .                           // since we check if the iterator is empty first.
         .                           unsafe {
   143,182 ( 0.01%)                      assume(!self.ptr.as_ptr().is_null());
         .                               if mem::size_of::<T>() != 0 {
    49,622 ( 0.00%)                          assume(!self.end.is_null());
         .                               }
29,814,893 ( 1.83%)                      if is_empty!(self) {
         .                                   None
         .                               } else {
         .                                   Some(next_unchecked!(self))
         .                               }
         .                           }
         .                       }
         .           
         .                       #[inline]
         .                       fn size_hint(&self) -> (usize, Option<usize>) {
   927,366 ( 0.06%)                  let exact = len!(self);
         .                           (exact, Some(exact))
         .                       }
         .           
         .                       #[inline]
         .                       fn count(self) -> usize {
         .                           len!(self)
         .                       }
         .           
         .                       #[inline]
         .                       fn nth(&mut self, n: usize) -> Option<$elem> {
    18,353 ( 0.00%)                  if n >= len!(self) {
         .                               // This iterator is now empty.
         .                               if mem::size_of::<T>() == 0 {
         .                                   // We have to do it this way as `ptr` may never be 0, but `end`
         .                                   // could be (due to wrapping).
         .                                   self.end = self.ptr.as_ptr();
         .                               } else {
         .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
         .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
         .                       // faster to compile.
         .                       #[inline]
         .                       fn for_each<F>(mut self, mut f: F)
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item),
         .                       {
         .                           while let Some(x) = self.next() {
     5,180 ( 0.00%)                      f(x);
         .                           }
         .                       }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
         .                       fn all<F>(&mut self, mut f: F) -> bool
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> bool,
         .                       {
     1,068 ( 0.00%)                  while let Some(x) = self.next() {
     8,495 ( 0.00%)                      if !f(x) {
         .                                   return false;
         .                               }
         .                           }
         .                           true
         .                       }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
       416 ( 0.00%)              fn any<F>(&mut self, mut f: F) -> bool
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> bool,
         .                       {
   498,692 ( 0.03%)                  while let Some(x) = self.next() {
   302,527 ( 0.02%)                      if f(x) {
         .                                   return true;
         .                               }
         .                           }
         .                           false
       416 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
         .                       fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
         .                       where
         .                           Self: Sized,
         .                           P: FnMut(&Self::Item) -> bool,
         .                       {
    23,522 ( 0.00%)                  while let Some(x) = self.next() {
    59,934 ( 0.00%)                      if predicate(&x) {
        42 ( 0.00%)                          return Some(x);
         .                               }
         .                           }
         .                           None
     1,926 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
         .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> Option<B>,
         .                       {
    17,637 ( 0.00%)                  while let Some(x) = self.next() {
   128,207 ( 0.01%)                      if let Some(y) = f(x) {
    16,582 ( 0.00%)                          return Some(y);
         .                               }
         .                           }
         .                           None
     2,901 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile. Also, the `assume` avoids a bounds check.
         .                       #[inline]
         .                       #[rustc_inherit_overflow_checks]
         .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
         .                           Self: Sized,
         .                           P: FnMut(Self::Item) -> bool,
         .                       {
         .                           let n = len!(self);
         .                           let mut i = 0;
         .                           while let Some(x) = self.next() {
   222,255 ( 0.01%)                      if predicate(x) {
         .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
         .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
         .                                   unsafe { assume(i < n) };
         .                                   return Some(i);
         .                               }
         .                               i += 1;
         .                           }
         .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
         .                       // faster to compile. Also, the `assume` avoids a bounds check.
         .                       #[inline]
         .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
         .                           P: FnMut(Self::Item) -> bool,
         .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
         .                       {
         .                           let n = len!(self);
         .                           let mut i = n;
     5,203 ( 0.00%)                  while let Some(x) = self.next_back() {
    79,976 ( 0.00%)                      i -= 1;
    54,413 ( 0.00%)                      if predicate(x) {
         .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
         .                                   // and is only decreasing.
         .                                   unsafe { assume(i < n) };
         .                                   return Some(i);
         .                               }
         .                           }
         .                           None
         .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
         .                           // the returned references is guaranteed to refer to an element
         .                           // of the slice and thus guaranteed to be valid.
         .                           //
         .                           // Also note that the caller also guarantees that we're never
         .                           // called with the same index again, and that no other methods
         .                           // that will access this subslice are called, so it is valid
         .                           // for the returned reference to be mutable in the case of
         .                           // `IterMut`
    56,100 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
         .                       }
         .           
         .                       $($extra)*
         .                   }
         .           
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
         .                       #[inline]
-- line 348 ----------------------------------------
-- line 349 ----------------------------------------
         .                       fn next_back(&mut self) -> Option<$elem> {
         .                           // could be implemented with slices, but this avoids bounds checks
         .           
         .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
         .                           // and slices over non-ZSTs must also have a non-null end pointer.
         .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
         .                           // empty first.
         .                           unsafe {
        10 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
         .                               if mem::size_of::<T>() != 0 {
        38 ( 0.00%)                          assume(!self.end.is_null());
         .                               }
   810,073 ( 0.05%)                      if is_empty!(self) {
         .                                   None
         .                               } else {
         .                                   Some(next_back_unchecked!(self))
         .                               }
         .                           }
         .                       }
         .           
         .                       #[inline]
-- line 369 ----------------------------------------

 6,006,833 ( 0.37%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/traversal.rs
--------------------------------------------------------------------------------
Ir               

-- line 23 ----------------------------------------
      .           pub struct Preorder<'a, 'tcx> {
      .               body: &'a Body<'tcx>,
      .               visited: BitSet<BasicBlock>,
      .               worklist: Vec<BasicBlock>,
      .               root_is_start_block: bool,
      .           }
      .           
      .           impl<'a, 'tcx> Preorder<'a, 'tcx> {
 14,720 ( 0.00%)      pub fn new(body: &'a Body<'tcx>, root: BasicBlock) -> Preorder<'a, 'tcx> {
  1,472 ( 0.00%)          let worklist = vec![root];
      .           
  4,416 ( 0.00%)          Preorder {
      .                       body,
      .                       visited: BitSet::new_empty(body.basic_blocks().len()),
  5,888 ( 0.00%)              worklist,
      .                       root_is_start_block: root == START_BLOCK,
      .                   }
 13,248 ( 0.00%)      }
      .           }
      .           
  1,744 ( 0.00%)  pub fn preorder<'a, 'tcx>(body: &'a Body<'tcx>) -> Preorder<'a, 'tcx> {
  5,344 ( 0.00%)      Preorder::new(body, START_BLOCK)
  2,616 ( 0.00%)  }
      .           
      .           impl<'a, 'tcx> Iterator for Preorder<'a, 'tcx> {
      .               type Item = (BasicBlock, &'a BasicBlockData<'tcx>);
      .           
378,059 ( 0.02%)      fn next(&mut self) -> Option<(BasicBlock, &'a BasicBlockData<'tcx>)> {
 52,754 ( 0.00%)          while let Some(idx) = self.worklist.pop() {
 52,754 ( 0.00%)              if !self.visited.insert(idx) {
      .                           continue;
      .                       }
      .           
 32,897 ( 0.00%)              let data = &self.body[idx];
      .           
164,485 ( 0.01%)              if let Some(ref term) = data.terminator {
      .                           self.worklist.extend(term.successors());
      .                       }
      .           
      .                       return Some((idx, data));
      .                   }
      .           
      .                   None
309,321 ( 0.02%)      }
      .           
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   // All the blocks, minus the number of blocks we've visited.
      .                   let upper = self.body.basic_blocks().len() - self.visited.count();
      .           
      .                   let lower = if self.root_is_start_block {
      .                       // We will visit all remaining blocks exactly once.
      .                       upper
-- line 74 ----------------------------------------
-- line 101 ----------------------------------------
      .           pub struct Postorder<'a, 'tcx> {
      .               body: &'a Body<'tcx>,
      .               visited: BitSet<BasicBlock>,
      .               visit_stack: Vec<(BasicBlock, Successors<'a>)>,
      .               root_is_start_block: bool,
      .           }
      .           
      .           impl<'a, 'tcx> Postorder<'a, 'tcx> {
 14,287 ( 0.00%)      pub fn new(body: &'a Body<'tcx>, root: BasicBlock) -> Postorder<'a, 'tcx> {
      .                   let mut po = Postorder {
      .                       body,
      .                       visited: BitSet::new_empty(body.basic_blocks().len()),
      .                       visit_stack: Vec::new(),
      .                       root_is_start_block: root == START_BLOCK,
      .                   };
      .           
      .                   let data = &po.body[root];
      .           
 14,287 ( 0.00%)          if let Some(ref term) = data.terminator {
      .                       po.visited.insert(root);
  8,164 ( 0.00%)              po.visit_stack.push((root, term.successors()));
  4,082 ( 0.00%)              po.traverse_successor();
      .                   }
      .           
      .                   po
 18,369 ( 0.00%)      }
      .           
324,128 ( 0.02%)      fn traverse_successor(&mut self) {
      .                   // This is quite a complex loop due to 1. the borrow checker not liking it much
      .                   // and 2. what exactly is going on is not clear
      .                   //
      .                   // It does the actual traversal of the graph, while the `next` method on the iterator
      .                   // just pops off of the stack. `visit_stack` is a stack containing pairs of nodes and
      .                   // iterators over the successors of those nodes. Each iteration attempts to get the next
      .                   // node from the top of the stack, then pushes that node and an iterator over the
      .                   // successors to the top of the stack. This loop only grows `visit_stack`, stopping when
-- line 136 ----------------------------------------
-- line 169 ----------------------------------------
      .                   //
      .                   // Now that the top of the stack has no successors we can traverse, each item will
      .                   // be popped off during iteration until we get back to `A`. This yields [E, D, B].
      .                   //
      .                   // When we yield `B` and call `traverse_successor`, we push `C` to the stack, but
      .                   // since we've already visited `E`, that child isn't added to the stack. The last
      .                   // two iterations yield `C` and finally `A` for a final traversal of [E, D, B, C, A]
      .                   loop {
344,896 ( 0.02%)              let bb = if let Some(&mut (_, ref mut iter)) = self.visit_stack.last_mut() {
210,066 ( 0.01%)                  if let Some(&bb) = iter.next() {
      .                               bb
      .                           } else {
      .                               break;
      .                           }
      .                       } else {
      .                           break;
      .                       };
      .           
 70,022 ( 0.00%)              if self.visited.insert(bb) {
295,554 ( 0.02%)                  if let Some(term) = &self.body[bb].terminator {
168,888 ( 0.01%)                      self.visit_stack.push((bb, term.successors()));
      .                           }
      .                       }
      .                   }
370,432 ( 0.02%)      }
      .           }
      .           
     32 ( 0.00%)  pub fn postorder<'a, 'tcx>(body: &'a Body<'tcx>) -> Postorder<'a, 'tcx> {
     32 ( 0.00%)      Postorder::new(body, START_BLOCK)
     48 ( 0.00%)  }
      .           
      .           impl<'a, 'tcx> Iterator for Postorder<'a, 'tcx> {
      .               type Item = (BasicBlock, &'a BasicBlockData<'tcx>);
      .           
    186 ( 0.00%)      fn next(&mut self) -> Option<(BasicBlock, &'a BasicBlockData<'tcx>)> {
      .                   let next = self.visit_stack.pop();
 44,263 ( 0.00%)          if next.is_some() {
 86,501 ( 0.01%)              self.traverse_successor();
      .                   }
      .           
 44,263 ( 0.00%)          next.map(|(bb, _)| (bb, &self.body[bb]))
    310 ( 0.00%)      }
      .           
    105 ( 0.00%)      fn size_hint(&self) -> (usize, Option<usize>) {
      .                   // All the blocks, minus the number of blocks we've visited.
  7,435 ( 0.00%)          let upper = self.body.basic_blocks().len() - self.visited.count();
      .           
  7,435 ( 0.00%)          let lower = if self.root_is_start_block {
      .                       // We will visit all remaining blocks exactly once.
      .                       upper
      .                   } else {
      .                       self.visit_stack.len()
      .                   };
      .           
     63 ( 0.00%)          (lower, Some(upper))
    147 ( 0.00%)      }
      .           }
      .           
      .           /// Reverse postorder traversal of a graph
      .           ///
      .           /// Reverse postorder is the reverse order of a postorder traversal.
      .           /// This is different to a preorder traversal and represents a natural
      .           /// linearization of control-flow.
      .           ///
-- line 232 ----------------------------------------
-- line 253 ----------------------------------------
      .           pub struct ReversePostorder<'a, 'tcx> {
      .               body: &'a Body<'tcx>,
      .               blocks: Vec<BasicBlock>,
      .               idx: usize,
      .           }
      .           
      .           impl<'a, 'tcx> ReversePostorder<'a, 'tcx> {
      .               pub fn new(body: &'a Body<'tcx>, root: BasicBlock) -> ReversePostorder<'a, 'tcx> {
  4,050 ( 0.00%)          let blocks: Vec<_> = Postorder::new(body, root).map(|(bb, _)| bb).collect();
      .           
  2,025 ( 0.00%)          let len = blocks.len();
      .           
 10,125 ( 0.00%)          ReversePostorder { body, blocks, idx: len }
      .               }
      .           }
      .           
 12,150 ( 0.00%)  pub fn reverse_postorder<'a, 'tcx>(body: &'a Body<'tcx>) -> ReversePostorder<'a, 'tcx> {
      .               ReversePostorder::new(body, START_BLOCK)
 10,125 ( 0.00%)  }
      .           
      .           impl<'a, 'tcx> Iterator for ReversePostorder<'a, 'tcx> {
      .               type Item = (BasicBlock, &'a BasicBlockData<'tcx>);
      .           
 46,242 ( 0.00%)      fn next(&mut self) -> Option<(BasicBlock, &'a BasicBlockData<'tcx>)> {
184,968 ( 0.01%)          if self.idx == 0 {
      .                       return None;
      .                   }
 88,434 ( 0.01%)          self.idx -= 1;
      .           
      .                   self.blocks.get(self.idx).map(|&bb| (bb, &self.body[bb]))
 92,484 ( 0.01%)      }
      .           
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   (self.idx, Some(self.idx))
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> ExactSizeIterator for ReversePostorder<'a, 'tcx> {}
      .           
-- line 291 ----------------------------------------
-- line 295 ----------------------------------------
      .           /// This is clearer than writing `preorder` in cases where the order doesn't matter.
      .           pub fn reachable<'a, 'tcx>(
      .               body: &'a Body<'tcx>,
      .           ) -> impl 'a + Iterator<Item = (BasicBlock, &'a BasicBlockData<'tcx>)> {
      .               preorder(body)
      .           }
      .           
      .           /// Returns a `BitSet` containing all basic blocks reachable from the `START_BLOCK`.
  3,600 ( 0.00%)  pub fn reachable_as_bitset<'tcx>(body: &Body<'tcx>) -> BitSet<BasicBlock> {
      .               let mut iter = preorder(body);
      .               (&mut iter).for_each(drop);
  2,400 ( 0.00%)      iter.visited
  3,600 ( 0.00%)  }

450,670 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/traversal.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir                 

-- line 5 ----------------------------------------
        .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
        .           unsafe impl GlobalAlloc for System {
        .               #[inline]
        .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
        .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
        .                   // So only rely on MIN_ALIGN if size >= align.
        .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
        .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
2,416,692 ( 0.15%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
1,812,519 ( 0.11%)              libc::malloc(layout.size()) as *mut u8
        .                   } else {
        .                       #[cfg(target_os = "macos")]
        .                       {
        .                           if layout.align() > (1 << 31) {
        .                               return ptr::null_mut();
        .                           }
        .                       }
        .                       aligned_malloc(&layout)
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
        .                   // See the comment above in `alloc` for why this check looks the way it does.
   46,816 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
   70,224 ( 0.00%)              libc::calloc(layout.size(), 1) as *mut u8
        .                   } else {
        .                       let ptr = self.alloc(layout);
        .                       if !ptr.is_null() {
        .                           ptr::write_bytes(ptr, 0, layout.size());
        .                       }
        .                       ptr
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
  615,866 ( 0.04%)          libc::free(ptr as *mut libc::c_void)
        .               }
        .           
        .               #[inline]
        .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
  229,632 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
  459,264 ( 0.03%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
        .                   } else {
        .                       realloc_fallback(self, ptr, layout, new_size)
        .                   }
        .               }
        .           }
        .           
        .           cfg_if::cfg_if! {
        .               if #[cfg(any(
-- line 56 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir                  

-- line 23 ----------------------------------------
         .           use std::cmp::Ordering;
         .           use std::marker::PhantomData;
         .           use std::ops::Range;
         .           use ty::util::IntTypeExt;
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable, TypeFoldable, Lift)]
         .           pub struct TypeAndMut<'tcx> {
       102 ( 0.00%)      pub ty: Ty<'tcx>,
       510 ( 0.00%)      pub mutbl: hir::Mutability,
         .           }
         .           
         .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
         .           #[derive(HashStable)]
         .           /// A "free" region `fr` can be interpreted as "some region
         .           /// at least as big as the scope `fr.scope`".
         .           pub struct FreeRegion {
    21,137 ( 0.00%)      pub scope: DefId,
    34,292 ( 0.00%)      pub bound_region: BoundRegionKind,
         .           }
         .           
   322,071 ( 0.02%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
         .           #[derive(HashStable)]
         .           pub enum BoundRegionKind {
         .               /// An anonymous region parameter for a given fn (&T)
    35,705 ( 0.00%)      BrAnon(u32),
         .           
         .               /// Named region parameters for functions (a in &'a T)
         .               ///
         .               /// The `DefId` is needed to distinguish free regions in
         .               /// the event of shadowing.
     1,100 ( 0.00%)      BrNamed(DefId, Symbol),
         .           
         .               /// Anonymous region for the implicit env pointer parameter
         .               /// to a closure
         .               BrEnv,
         .           }
         .           
       588 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
         .           #[derive(HashStable)]
         .           pub struct BoundRegion {
    59,094 ( 0.00%)      pub var: BoundVar,
    45,764 ( 0.00%)      pub kind: BoundRegionKind,
         .           }
         .           
         .           impl BoundRegionKind {
         .               pub fn is_named(&self) -> bool {
         .                   match *self {
         .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
         .                       _ => false,
         .                   }
         .               }
         .           }
         .           
         .           /// Defines the kinds of types.
         .           ///
         .           /// N.B., if you change this, you'll probably want to change the corresponding
         .           /// AST structure in `rustc_ast/src/ast.rs` as well.
 7,670,990 ( 0.47%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
         .           #[derive(HashStable)]
         .           #[rustc_diagnostic_item = "TyKind"]
         .           pub enum TyKind<'tcx> {
         .               /// The primitive boolean type. Written as `bool`.
         .               Bool,
         .           
         .               /// The primitive character type; holds a Unicode scalar value
         .               /// (a non-surrogate code point). Written as `char`.
-- line 89 ----------------------------------------
-- line 99 ----------------------------------------
         .               Float(ty::FloatTy),
         .           
         .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
         .               ///
         .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
         .               /// That is, even after substitution it is possible that there are type
         .               /// variables. This happens when the `Adt` corresponds to an ADT
         .               /// definition and not a concrete use of it.
   862,794 ( 0.05%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
         .           
         .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
         .               Foreign(DefId),
         .           
         .               /// The pointee of a string slice. Written as `str`.
         .               Str,
         .           
         .               /// An array with the given length. Written as `[T; n]`.
    15,203 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
         .           
         .               /// The pointee of an array slice. Written as `[T]`.
         .               Slice(Ty<'tcx>),
         .           
         .               /// A raw pointer. Written as `*mut T` or `*const T`
         .               RawPtr(TypeAndMut<'tcx>),
         .           
         .               /// A reference; a pointer with an associated lifetime. Written as
         .               /// `&'a mut T` or `&'a T`.
   912,012 ( 0.06%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
         .           
         .               /// The anonymous type of a function declaration/definition. Each
         .               /// function has a unique type, which is output (for a function
         .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
         .               ///
         .               /// For example the type of `bar` here:
         .               ///
         .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
         .               ///
         .               /// ```rust
         .               /// fn foo() -> i32 { 1 }
         .               /// let bar: fn() -> i32 = foo;
         .               /// ```
         .               FnPtr(PolyFnSig<'tcx>),
         .           
         .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
    16,716 ( 0.00%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
         .           
         .               /// The anonymous type of a closure. Used to represent the type of
         .               /// `|a| a`.
         .               Closure(DefId, SubstsRef<'tcx>),
         .           
         .               /// The anonymous type of a generator. Used to represent the type of
         .               /// `|a| yield a`.
         .               Generator(DefId, SubstsRef<'tcx>, hir::Movability),
-- line 159 ----------------------------------------
-- line 180 ----------------------------------------
         .               /// The substitutions are for the generics of the function in question.
         .               /// After typeck, the concrete type can be found in the `types` map.
         .               Opaque(DefId, SubstsRef<'tcx>),
         .           
         .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
         .               Param(ParamTy),
         .           
         .               /// Bound type variable, used only when preparing a trait query.
     2,879 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
         .           
         .               /// A placeholder type - universally quantified higher-ranked type.
         .               Placeholder(ty::PlaceholderType),
         .           
         .               /// A type variable used during type checking.
         .               Infer(InferTy),
         .           
         .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 330 ----------------------------------------
         .               pub closure_kind_ty: T,
         .               pub closure_sig_as_fn_ptr_ty: T,
         .               pub tupled_upvars_ty: T,
         .           }
         .           
         .           impl<'tcx> ClosureSubsts<'tcx> {
         .               /// Construct `ClosureSubsts` from `ClosureSubstsParts`, containing `Substs`
         .               /// for the closure parent, alongside additional closure-specific components.
        39 ( 0.00%)      pub fn new(
         .                   tcx: TyCtxt<'tcx>,
         .                   parts: ClosureSubstsParts<'tcx, Ty<'tcx>>,
         .               ) -> ClosureSubsts<'tcx> {
         .                   ClosureSubsts {
         .                       substs: tcx.mk_substs(
        78 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
       156 ( 0.00%)                      [parts.closure_kind_ty, parts.closure_sig_as_fn_ptr_ty, parts.tupled_upvars_ty]
         .                                   .iter()
         .                                   .map(|&ty| ty.into()),
         .                           ),
         .                       ),
         .                   }
        78 ( 0.00%)      }
         .           
         .               /// Divides the closure substs into their respective components.
         .               /// The ordering assumed here must match that used by `ClosureSubsts::new` above.
       829 ( 0.00%)      fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {
         .                   match self.substs[..] {
     7,330 ( 0.00%)              [
     1,863 ( 0.00%)                  ref parent_substs @ ..,
     2,203 ( 0.00%)                  closure_kind_ty,
       945 ( 0.00%)                  closure_sig_as_fn_ptr_ty,
     1,347 ( 0.00%)                  tupled_upvars_ty,
     3,316 ( 0.00%)              ] => ClosureSubstsParts {
         .                           parent_substs,
         .                           closure_kind_ty,
         .                           closure_sig_as_fn_ptr_ty,
         .                           tupled_upvars_ty,
         .                       },
         .                       _ => bug!("closure substs missing synthetics"),
         .                   }
     2,487 ( 0.00%)      }
         .           
         .               /// Returns `true` only if enough of the synthetic types are known to
         .               /// allow using all of the methods on `ClosureSubsts` without panicking.
         .               ///
         .               /// Used primarily by `ty::print::pretty` to be able to handle closure
         .               /// types that haven't had their synthetic types substituted in.
         1 ( 0.00%)      pub fn is_valid(self) -> bool {
         2 ( 0.00%)          self.substs.len() >= 3
         2 ( 0.00%)              && matches!(self.split().tupled_upvars_ty.expect_ty().kind(), Tuple(_))
         2 ( 0.00%)      }
         .           
         .               /// Returns the substitutions of the closure's parent.
         .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
         .                   self.split().parent_substs
         .               }
         .           
         .               /// Returns an iterator over the list of types of captured paths by the closure.
         .               /// In case there was a type error in figuring out the types of the captured path, an
         .               /// empty iterator is returned.
         .               #[inline]
       210 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       294 ( 0.00%)          match self.tupled_upvars_ty().kind() {
         .                       TyKind::Error(_) => None,
       197 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
         .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
         .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
         .                   }
         .                   .into_iter()
         .                   .flatten()
       140 ( 0.00%)      }
         .           
         .               /// Returns the tuple type representing the upvars for this closure.
         .               #[inline]
         .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
     3,718 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
         .               }
         .           
         .               /// Returns the closure kind for this closure; may return a type
         .               /// variable during inference. To get the closure kind during
         .               /// inference, use `infcx.closure_kind(substs)`.
       757 ( 0.00%)      pub fn kind_ty(self) -> Ty<'tcx> {
         .                   self.split().closure_kind_ty.expect_ty()
     1,514 ( 0.00%)      }
         .           
         .               /// Returns the `fn` pointer type representing the closure signature for this
         .               /// closure.
         .               // FIXME(eddyb) this should be unnecessary, as the shallowly resolved
         .               // type is known at the time of the creation of `ClosureSubsts`,
         .               // see `rustc_typeck::check::closure`.
         .               pub fn sig_as_fn_ptr_ty(self) -> Ty<'tcx> {
         .                   self.split().closure_sig_as_fn_ptr_ty.expect_ty()
         .               }
         .           
         .               /// Returns the closure kind for this closure; only usable outside
         .               /// of an inference context, because in that context we know that
         .               /// there are no type variables.
         .               ///
         .               /// If you have an inference context, use `infcx.closure_kind()`.
        22 ( 0.00%)      pub fn kind(self) -> ty::ClosureKind {
        22 ( 0.00%)          self.kind_ty().to_opt_closure_kind().unwrap()
        44 ( 0.00%)      }
         .           
         .               /// Extracts the signature from the closure.
       428 ( 0.00%)      pub fn sig(self) -> ty::PolyFnSig<'tcx> {
         .                   let ty = self.sig_as_fn_ptr_ty();
       856 ( 0.00%)          match ty.kind() {
     1,712 ( 0.00%)              ty::FnPtr(sig) => *sig,
         .                       _ => bug!("closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}", ty.kind()),
         .                   }
     1,284 ( 0.00%)      }
         .           }
         .           
         .           /// Similar to `ClosureSubsts`; see the above documentation for more.
         .           #[derive(Copy, Clone, Debug, TypeFoldable)]
         .           pub struct GeneratorSubsts<'tcx> {
         .               pub substs: SubstsRef<'tcx>,
         .           }
         .           
-- line 448 ----------------------------------------
-- line 676 ----------------------------------------
         .           }
         .           
         .           impl<'tcx> UpvarSubsts<'tcx> {
         .               /// Returns an iterator over the list of types of captured paths by the closure/generator.
         .               /// In case there was a type error in figuring out the types of the captured path, an
         .               /// empty iterator is returned.
         .               #[inline]
         .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       122 ( 0.00%)          let tupled_tys = match self {
       161 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
         .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
         .                   };
         .           
       261 ( 0.00%)          match tupled_tys.kind() {
         .                       TyKind::Error(_) => None,
       222 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
         .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
         .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
         .                   }
         .                   .into_iter()
         .                   .flatten()
         .               }
         .           
         .               #[inline]
         .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
       200 ( 0.00%)          match self {
       244 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
         .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
         .                   }
         .               }
         .           }
         .           
         .           /// An inline const is modeled like
         .           ///
         .           ///     const InlineConst<'l0...'li, T0...Tj, R>: R;
-- line 710 ----------------------------------------
-- line 760 ----------------------------------------
         .               }
         .           
         .               /// Returns the type of this inline const.
         .               pub fn ty(self) -> Ty<'tcx> {
         .                   self.split().ty.expect_ty()
         .               }
         .           }
         .           
    26,704 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
    24,677 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub enum ExistentialPredicate<'tcx> {
         .               /// E.g., `Iterator`.
         .               Trait(ExistentialTraitRef<'tcx>),
         .               /// E.g., `Iterator::Item = T`.
         .               Projection(ExistentialProjection<'tcx>),
         .               /// E.g., `Send`.
       127 ( 0.00%)      AutoTrait(DefId),
         .           }
         .           
         .           impl<'tcx> ExistentialPredicate<'tcx> {
         .               /// Compares via an ordering that will not change if modules are reordered or other changes are
         .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
     3,680 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
         .                   use self::ExistentialPredicate::*;
     4,924 ( 0.00%)          match (*self, *other) {
         .                       (Trait(_), Trait(_)) => Ordering::Equal,
         .                       (Projection(ref a), Projection(ref b)) => {
         .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
         .                       }
         .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
         .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
         .                       }
         .                       (Trait(_), _) => Ordering::Less,
         .                       (Projection(_), Trait(_)) => Ordering::Greater,
         .                       (Projection(_), _) => Ordering::Less,
         .                       (AutoTrait(_), _) => Ordering::Greater,
         .                   }
     4,416 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
     1,233 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
         .                   use crate::ty::ToPredicate;
       685 ( 0.00%)          match self.skip_binder() {
         .                       ExistentialPredicate::Trait(tr) => {
         .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
         .                       }
         .                       ExistentialPredicate::Projection(p) => {
         .                           self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)
         .                       }
         .                       ExistentialPredicate::AutoTrait(did) => {
         .                           let trait_ref = self.rebind(ty::TraitRef {
         .                               def_id: did,
         .                               substs: tcx.mk_substs_trait(self_ty, &[]),
         .                           });
         .                           trait_ref.without_const().to_predicate(tcx)
         .                       }
         .                   }
     1,096 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
         .               /// Returns the "principal `DefId`" of this set of existential predicates.
         .               ///
         .               /// A Rust trait object type consists (in addition to a lifetime bound)
         .               /// of a set of trait bounds, which are separated into any number
         .               /// of auto-trait bounds, and at most one non-auto-trait bound. The
-- line 826 ----------------------------------------
-- line 839 ----------------------------------------
         .               /// are the set `{Sync}`.
         .               ///
         .               /// It is also possible to have a "trivial" trait object that
         .               /// consists only of auto traits, with no principal - for example,
         .               /// `dyn Send + Sync`. In that case, the set of auto-trait bounds
         .               /// is `{Send, Sync}`, while there is no principal. These trait objects
         .               /// have a "trivial" vtable consisting of just the size, alignment,
         .               /// and destructor.
        70 ( 0.00%)      pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {
       658 ( 0.00%)          self[0]
       448 ( 0.00%)              .map_bound(|this| match this {
         .                           ExistentialPredicate::Trait(tr) => Some(tr),
         .                           _ => None,
       280 ( 0.00%)              })
         .                       .transpose()
       210 ( 0.00%)      }
         .           
       116 ( 0.00%)      pub fn principal_def_id(&self) -> Option<DefId> {
         .                   self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)
       232 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn projection_bounds<'a>(
         .                   &'a self,
         .               ) -> impl Iterator<Item = ty::Binder<'tcx, ExistentialProjection<'tcx>>> + 'a {
         .                   self.iter().filter_map(|predicate| {
       162 ( 0.00%)              predicate
       334 ( 0.00%)                  .map_bound(|pred| match pred {
        70 ( 0.00%)                      ExistentialPredicate::Projection(projection) => Some(projection),
         .                               _ => None,
         .                           })
         .                           .transpose()
         .                   })
         .               }
         .           
         .               #[inline]
         .               pub fn auto_traits<'a>(&'a self) -> impl Iterator<Item = DefId> + 'a {
-- line 875 ----------------------------------------
-- line 886 ----------------------------------------
         .           ///     T: Foo<U>
         .           ///
         .           /// This would be represented by a trait-reference where the `DefId` is the
         .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
         .           /// and `U` as parameter 1.
         .           ///
         .           /// Trait references also appear in object types like `Foo<U>`, but in
         .           /// that case the `Self` parameter is absent from the substitutions.
    25,663 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
   480,140 ( 0.03%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct TraitRef<'tcx> {
       388 ( 0.00%)      pub def_id: DefId,
   337,546 ( 0.02%)      pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           impl<'tcx> TraitRef<'tcx> {
     1,359 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
         .                   TraitRef { def_id, substs }
     5,436 ( 0.00%)      }
         .           
         .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
         .               /// are the parameters defined on trait.
     1,206 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
       536 ( 0.00%)          ty::Binder::dummy(TraitRef {
         .                       def_id,
       804 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
         .                   })
     1,072 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn self_ty(&self) -> Ty<'tcx> {
         .                   self.substs.type_at(0)
         .               }
         .           
       512 ( 0.00%)      pub fn from_method(
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_id: DefId,
         .                   substs: SubstsRef<'tcx>,
         .               ) -> ty::TraitRef<'tcx> {
         .                   let defs = tcx.generics_of(trait_id);
         .           
        64 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
       704 ( 0.00%)      }
         .           }
         .           
         .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
         .           
         .           impl<'tcx> PolyTraitRef<'tcx> {
         .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
         .                   self.map_bound_ref(|tr| tr.self_ty())
         .               }
         .           
         .               pub fn def_id(&self) -> DefId {
     1,902 ( 0.00%)          self.skip_binder().def_id
       634 ( 0.00%)      }
         .           
     1,322 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
     2,644 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
         .                       trait_ref,
         .                       constness: ty::BoundConstness::NotConst,
         .                       polarity: ty::ImplPolarity::Positive,
         .                   })
     1,322 ( 0.00%)      }
         .           }
         .           
         .           /// An existential reference to a trait, where `Self` is erased.
         .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
         .           ///
         .           ///     exists T. T: Trait<'a, 'b, X, Y>
         .           ///
         .           /// The substitutions don't include the erased `Self`, only trait
         .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
       104 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
     6,698 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ExistentialTraitRef<'tcx> {
       794 ( 0.00%)      pub def_id: DefId,
     7,497 ( 0.00%)      pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           impl<'tcx> ExistentialTraitRef<'tcx> {
       260 ( 0.00%)      pub fn erase_self_ty(
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_ref: ty::TraitRef<'tcx>,
         .               ) -> ty::ExistentialTraitRef<'tcx> {
         .                   // Assert there is a Self.
         .                   trait_ref.substs.type_at(0);
         .           
         .                   ty::ExistentialTraitRef {
         .                       def_id: trait_ref.def_id,
         .                       substs: tcx.intern_substs(&trait_ref.substs[1..]),
         .                   }
       260 ( 0.00%)      }
         .           
         .               /// Object types don't have a self type specified. Therefore, when
         .               /// we convert the principal trait-ref into a normal trait-ref,
         .               /// you must give *some* self type. A common choice is `mk_err()`
         .               /// or some placeholder type.
        84 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::TraitRef<'tcx> {
         .                   // otherwise the escaping vars would be captured by the binder
         .                   // debug_assert!(!self_ty.has_escaping_bound_vars());
         .           
        42 ( 0.00%)          ty::TraitRef { def_id: self.def_id, substs: tcx.mk_substs_trait(self_ty, self.substs) }
       210 ( 0.00%)      }
         .           }
         .           
         .           pub type PolyExistentialTraitRef<'tcx> = Binder<'tcx, ExistentialTraitRef<'tcx>>;
         .           
         .           impl<'tcx> PolyExistentialTraitRef<'tcx> {
         .               pub fn def_id(&self) -> DefId {
         .                   self.skip_binder().def_id
         .               }
         .           
         .               /// Object types don't have a self type specified. Therefore, when
         .               /// we convert the principal trait-ref into a normal trait-ref,
         .               /// you must give *some* self type. A common choice is `mk_err()`
         .               /// or some placeholder type.
        60 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
        60 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
        80 ( 0.00%)      }
         .           }
         .           
    24,098 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub enum BoundVariableKind {
         .               Ty(BoundTyKind),
         .               Region(BoundRegionKind),
         .               Const,
         .           }
         .           
         .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
-- line 1015 ----------------------------------------
-- line 1016 ----------------------------------------
         .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
         .           /// (which would be represented by the type `PolyTraitRef ==
         .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
         .           /// erase, or otherwise "discharge" these bound vars, we change the
         .           /// type from `Binder<'tcx, T>` to just `T` (see
         .           /// e.g., `liberate_late_bound_regions`).
         .           ///
         .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
    27,188 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
   334,000 ( 0.02%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
         .           
         .           impl<'tcx, T> Binder<'tcx, T>
         .           where
         .               T: TypeFoldable<'tcx>,
         .           {
         .               /// Wraps `value` in a binder, asserting that `value` does not
         .               /// contain any bound vars that would be bound by the
         .               /// binder. This is commonly used to 'inject' a value T into a
         .               /// different binding level.
    29,021 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
   113,654 ( 0.01%)          assert!(!value.has_escaping_bound_vars());
   242,483 ( 0.01%)          Binder(value, ty::List::empty())
    28,918 ( 0.00%)      }
         .           
         .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(vars);
         .                       value.visit_with(&mut validator);
         .                   }
     9,889 ( 0.00%)          Binder(value, vars)
         .               }
         .           }
         .           
         .           impl<'tcx, T> Binder<'tcx, T> {
         .               /// Skips the binder and returns the "bound" value. This is a
         .               /// risky thing to do because it's easy to get confused about
         .               /// De Bruijn indices and the like. It is usually better to
         .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
         .               /// accounting.
         .               ///
         .               /// Some examples where `skip_binder` is reasonable:
         .               ///
         .               /// - extracting the `DefId` from a PolyTraitRef;
         .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
         .               ///   a type parameter `X`, since the type `X` does not reference any regions
         .               pub fn skip_binder(self) -> T {
   706,550 ( 0.04%)          self.0
         .               }
         .           
         .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
       743 ( 0.00%)          self.1
         .               }
         .           
         .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
     2,164 ( 0.00%)          Binder(&self.0, self.1)
         .               }
         .           
         .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(&T) -> U,
         .               {
         .                   let value = f(&self.0);
         .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
         .           
         .               pub fn map_bound_ref<F, U: TypeFoldable<'tcx>>(&self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(&T) -> U,
         .               {
         .                   self.as_ref().map_bound(f)
         .               }
         .           
       711 ( 0.00%)      pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(T) -> U,
         .               {
    15,965 ( 0.00%)          let value = f(self.0);
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.1);
         .                       value.visit_with(&mut validator);
         .                   }
   162,576 ( 0.01%)          Binder(value, self.1)
       669 ( 0.00%)      }
         .           
         .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
         .               where
         .                   F: FnOnce(T) -> Result<U, E>,
         .               {
         .                   let value = f(self.0)?;
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.1);
         .                       value.visit_with(&mut validator);
         .                   }
     4,868 ( 0.00%)          Ok(Binder(value, self.1))
         .               }
         .           
         .               /// Wraps a `value` in a binder, using the same bound variables as the
         .               /// current `Binder`. This should not be used if the new value *changes*
         .               /// the bound variables. Note: the (old or new) value itself does not
         .               /// necessarily need to *name* all the bound variables.
         .               ///
         .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
         .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
         .               where
         .                   U: TypeFoldable<'tcx>,
         .               {
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
         .                       value.visit_with(&mut validator);
         .                   }
     8,729 ( 0.00%)          Binder(value, self.1)
         .               }
         .           
         .               /// Unwraps and returns the value within, but only if it contains
         .               /// no bound vars at all. (In other words, if this binder --
         .               /// and indeed any enclosing binder -- doesn't bind anything at
         .               /// all.) Otherwise, returns `None`.
         .               ///
         .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
         .               /// binder, but permits late-bound vars bound by enclosing
         .               /// binders, but that would require adjusting the debruijn
         .               /// indices, and given the shallow binding structure we often use,
         .               /// would not be that useful.)
         .               pub fn no_bound_vars(self) -> Option<T>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
   116,008 ( 0.01%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
     1,260 ( 0.00%)      }
         .           
         .               /// Splits the contents into two things that share the same binder
         .               /// level as the original, returning two distinct binders.
         .               ///
         .               /// `f` should consider bound regions at depth 1 to be free, and
         .               /// anything it produces with bound regions at depth 1 will be
         .               /// bound in the resulting return values.
         .               pub fn split<U, V, F>(self, f: F) -> (Binder<'tcx, U>, Binder<'tcx, V>)
-- line 1160 ----------------------------------------
-- line 1170 ----------------------------------------
         .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
         .                   let bound_vars = self.1;
         .                   self.0.map(|v| Binder(v, bound_vars))
         .               }
         .           }
         .           
         .           /// Represents the projection of an associated type. In explicit UFCS
         .           /// form this would be written `<T as Trait<..>>::N`.
       465 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
    22,802 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ProjectionTy<'tcx> {
         .               /// The parameters of the associated item.
    13,443 ( 0.00%)      pub substs: SubstsRef<'tcx>,
         .           
         .               /// The `DefId` of the `TraitItem` for the associated type `N`.
         .               ///
         .               /// Note that this is not the `DefId` of the `TraitRef` containing this
         .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
    11,879 ( 0.00%)      pub item_def_id: DefId,
         .           }
         .           
         .           impl<'tcx> ProjectionTy<'tcx> {
     9,499 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
     2,714 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
    10,856 ( 0.00%)      }
         .           
         .               /// Extracts the underlying trait reference and own substs from this projection.
         .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
         .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
     1,792 ( 0.00%)      pub fn trait_ref_and_own_substs(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
       768 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
         .                   let trait_generics = tcx.generics_of(def_id);
     1,280 ( 0.00%)          (
         .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
         .                       &self.substs[trait_generics.count()..],
         .                   )
     2,304 ( 0.00%)      }
         .           
         .               /// Extracts the underlying trait reference from this projection.
         .               /// For example, if this is a projection of `<T as Iterator>::Item`,
         .               /// then this function would return a `T: Iterator` trait reference.
         .               ///
         .               /// WARNING: This will drop the substs for generic associated types
         .               /// consider calling [Self::trait_ref_and_own_substs] to get those
         .               /// as well.
    11,943 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
     1,327 ( 0.00%)          let def_id = self.trait_def_id(tcx);
     1,327 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
    14,597 ( 0.00%)      }
         .           
     2,684 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
     8,052 ( 0.00%)          self.substs.type_at(0)
     5,368 ( 0.00%)      }
         .           }
         .           
         .           #[derive(Copy, Clone, Debug, TypeFoldable)]
         .           pub struct GenSig<'tcx> {
         .               pub resume_ty: Ty<'tcx>,
         .               pub yield_ty: Ty<'tcx>,
         .               pub return_ty: Ty<'tcx>,
         .           }
-- line 1233 ----------------------------------------
-- line 1235 ----------------------------------------
         .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
         .           
         .           /// Signature of a function type, which we have arbitrarily
         .           /// decided to use to refer to the input/output types.
         .           ///
         .           /// - `inputs`: is the list of arguments and their modes.
         .           /// - `output`: is the return type.
         .           /// - `c_variadic`: indicates whether this is a C-variadic function.
    32,281 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    27,237 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct FnSig<'tcx> {
     6,261 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
    46,608 ( 0.00%)      pub c_variadic: bool,
     9,546 ( 0.00%)      pub unsafety: hir::Unsafety,
    43,137 ( 0.00%)      pub abi: abi::Abi,
         .           }
         .           
         .           impl<'tcx> FnSig<'tcx> {
    25,442 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
   114,536 ( 0.01%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
    50,884 ( 0.00%)      }
         .           
    15,718 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
   119,614 ( 0.01%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
    31,436 ( 0.00%)      }
         .           
         .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
         .               // method.
         .               fn fake() -> FnSig<'tcx> {
         .                   FnSig {
         .                       inputs_and_output: List::empty(),
         .                       c_variadic: false,
         .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
         .               }
         .           }
         .           
         .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
         .           
         .           impl<'tcx> PolyFnSig<'tcx> {
         .               #[inline]
         .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
     2,803 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
         .               }
         .               #[inline]
         .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
    11,449 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
         .               }
         .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
         .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
       271 ( 0.00%)      }
         .               #[inline]
         .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
     6,751 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
         .               }
         .               pub fn c_variadic(&self) -> bool {
       524 ( 0.00%)          self.skip_binder().c_variadic
       262 ( 0.00%)      }
         .               pub fn unsafety(&self) -> hir::Unsafety {
     5,060 ( 0.00%)          self.skip_binder().unsafety
     2,530 ( 0.00%)      }
         .               pub fn abi(&self) -> abi::Abi {
     5,496 ( 0.00%)          self.skip_binder().abi
     1,374 ( 0.00%)      }
         .           }
         .           
         .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
         .           
        76 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub struct ParamTy {
        20 ( 0.00%)      pub index: u32,
         .               pub name: Symbol,
         .           }
         .           
         .           impl<'tcx> ParamTy {
        66 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
         .                   ParamTy { index, name }
        33 ( 0.00%)      }
         .           
         .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
        22 ( 0.00%)          ParamTy::new(def.index, def.name)
        11 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
         .                   tcx.mk_ty_param(self.index, self.name)
         .               }
         .           }
         .           
         .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
         .           #[derive(HashStable)]
         .           pub struct ParamConst {
       114 ( 0.00%)      pub index: u32,
       114 ( 0.00%)      pub name: Symbol,
         .           }
         .           
         .           impl ParamConst {
         .               pub fn new(index: u32, name: Symbol) -> ParamConst {
         .                   ParamConst { index, name }
         .               }
         .           
         .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
         .           /// the inference variable is supposed to satisfy the relation
         .           /// *for every value of the placeholder region*. To ensure that doesn't
         .           /// happen, you can use `leak_check`. This is more clearly explained
         .           /// by the [rustc dev guide].
         .           ///
         .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
         .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
         .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
 3,053,545 ( 0.19%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
        38 ( 0.00%)  pub enum RegionKind {
         .               /// Region bound in a type or fn declaration which will be
         .               /// substituted 'early' -- that is, at the same time when type
         .               /// parameters are substituted.
         .               ReEarlyBound(EarlyBoundRegion),
         .           
         .               /// Region bound in a function scope, which will be substituted when the
         .               /// function is called.
    87,264 ( 0.01%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
         .           
         .               /// When checking a function body, the types of all arguments and so forth
         .               /// that refer to bound region parameters are modified to refer to free
         .               /// region parameters.
         .               ReFree(FreeRegion),
         .           
         .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
         .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
         .               /// regions visible from `U`, but not less than regions not visible
         .               /// from `U`.
         .               ReEmpty(ty::UniverseIndex),
         .           
         .               /// Erased region, used by trait selection, in MIR and during codegen.
         .               ReErased,
         .           }
         .           
    19,762 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
         .           pub struct EarlyBoundRegion {
     6,721 ( 0.00%)      pub def_id: DefId,
    21,090 ( 0.00%)      pub index: u32,
    19,234 ( 0.00%)      pub name: Symbol,
         .           }
         .           
         .           /// A **`const`** **v**ariable **ID**.
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
         .           pub struct ConstVid<'tcx> {
     1,596 ( 0.00%)      pub index: u32,
       339 ( 0.00%)      pub phantom: PhantomData<&'tcx ()>,
         .           }
         .           
         .           rustc_index::newtype_index! {
         .               /// A **region** (lifetime) **v**ariable **ID**.
         .               pub struct RegionVid {
         .                   DEBUG_FORMAT = custom,
         .               }
         .           }
-- line 1505 ----------------------------------------
-- line 1513 ----------------------------------------
         .           rustc_index::newtype_index! {
         .               pub struct BoundVar { .. }
         .           }
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub struct BoundTy {
         .               pub var: BoundVar,
     2,879 ( 0.00%)      pub kind: BoundTyKind,
         .           }
         .           
    49,039 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub enum BoundTyKind {
         .               Anon,
         .               Param(Symbol),
         .           }
         .           
         .           impl From<BoundVar> for BoundTy {
         .               fn from(var: BoundVar) -> Self {
         .                   BoundTy { var, kind: BoundTyKind::Anon }
         .               }
         .           }
         .           
         .           /// A `ProjectionPredicate` for an `ExistentialTraitRef`.
        91 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
     4,825 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ExistentialProjection<'tcx> {
       404 ( 0.00%)      pub item_def_id: DefId,
     4,320 ( 0.00%)      pub substs: SubstsRef<'tcx>,
     1,080 ( 0.00%)      pub term: Term<'tcx>,
         .           }
         .           
         .           pub type PolyExistentialProjection<'tcx> = Binder<'tcx, ExistentialProjection<'tcx>>;
         .           
         .           impl<'tcx> ExistentialProjection<'tcx> {
         .               /// Extracts the underlying existential trait reference from this projection.
         .               /// For example, if this is a projection of `exists T. <T as Iterator>::Item == X`,
         .               /// then this function would return an `exists T. T: Iterator` existential trait
         .               /// reference.
       938 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::ExistentialTraitRef<'tcx> {
       402 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
       268 ( 0.00%)          let subst_count = tcx.generics_of(def_id).count() - 1;
       134 ( 0.00%)          let substs = tcx.intern_substs(&self.substs[..subst_count]);
         .                   ty::ExistentialTraitRef { def_id, substs }
     1,206 ( 0.00%)      }
         .           
         .               pub fn with_self_ty(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   self_ty: Ty<'tcx>,
         .               ) -> ty::ProjectionPredicate<'tcx> {
         .                   // otherwise the escaping regions would be captured by the binders
         .                   debug_assert!(!self_ty.has_escaping_bound_vars());
-- line 1566 ----------------------------------------
-- line 1569 ----------------------------------------
         .                       projection_ty: ty::ProjectionTy {
         .                           item_def_id: self.item_def_id,
         .                           substs: tcx.mk_substs_trait(self_ty, self.substs),
         .                       },
         .                       term: self.term,
         .                   }
         .               }
         .           
       105 ( 0.00%)      pub fn erase_self_ty(
         .                   tcx: TyCtxt<'tcx>,
         .                   projection_predicate: ty::ProjectionPredicate<'tcx>,
         .               ) -> Self {
         .                   // Assert there is a Self.
        63 ( 0.00%)          projection_predicate.projection_ty.substs.type_at(0);
         .           
        84 ( 0.00%)          Self {
        42 ( 0.00%)              item_def_id: projection_predicate.projection_ty.item_def_id,
         .                       substs: tcx.intern_substs(&projection_predicate.projection_ty.substs[1..]),
        21 ( 0.00%)              term: projection_predicate.term,
         .                   }
       147 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> PolyExistentialProjection<'tcx> {
       135 ( 0.00%)      pub fn with_self_ty(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   self_ty: Ty<'tcx>,
         .               ) -> ty::PolyProjectionPredicate<'tcx> {
       135 ( 0.00%)          self.map_bound(|p| p.with_self_ty(tcx, self_ty))
       162 ( 0.00%)      }
         .           
         .               pub fn item_def_id(&self) -> DefId {
        54 ( 0.00%)          self.skip_binder().item_def_id
        27 ( 0.00%)      }
         .           }
         .           
         .           /// Region utilities
         .           impl RegionKind {
         .               /// Is this region named by the user?
         .               pub fn has_name(&self) -> bool {
         .                   match *self {
         .                       RegionKind::ReEarlyBound(ebr) => ebr.has_name(),
-- line 1611 ----------------------------------------
-- line 1616 ----------------------------------------
         .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
         .                       RegionKind::ReEmpty(_) => false,
         .                       RegionKind::ReErased => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_late_bound(&self) -> bool {
     2,616 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_placeholder(&self) -> bool {
         .                   matches!(*self, ty::RePlaceholder(..))
         .               }
         .           
         .               #[inline]
         .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
    77,670 ( 0.00%)          match *self {
         .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
         .                       _ => false,
         .                   }
         .               }
         .           
         .               pub fn type_flags(&self) -> TypeFlags {
         .                   let mut flags = TypeFlags::empty();
         .           
   174,335 ( 0.01%)          match *self {
         .                       ty::ReVar(..) => {
         .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
         .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
         .                           flags = flags | TypeFlags::HAS_RE_INFER;
         .                       }
         .                       ty::RePlaceholder(..) => {
         .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
         .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
         .                       ty::ReErased => {
         .                           flags = flags | TypeFlags::HAS_RE_ERASED;
         .                       }
         .                   }
         .           
         .                   debug!("type_flags({:?}) = {:?}", self, flags);
         .           
         .                   flags
     5,399 ( 0.00%)      }
         .           
         .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
         .               /// For example, consider the regions in this snippet of code:
         .               ///
         .               /// ```
         .               /// impl<'a> Foo {
         .               ///      ^^ -- early bound, declared on an impl
         .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
         .           
         .               #[inline(always)]
         .               pub fn flags(&self) -> TypeFlags {
         .                   self.flags
         .               }
         .           
         .               #[inline]
         .               pub fn is_unit(&self) -> bool {
     3,918 ( 0.00%)          match self.kind() {
     1,339 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_never(&self) -> bool {
    40,352 ( 0.00%)          matches!(self.kind(), Never)
         .               }
         .           
         .               #[inline]
         .               pub fn is_primitive(&self) -> bool {
         .                   self.kind().is_primitive()
         .               }
         .           
         .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn is_ref(&self) -> bool {
         .                   matches!(self.kind(), Ref(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_ty_var(&self) -> bool {
    52,612 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
    30,832 ( 0.00%)          match self.kind() {
     5,339 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_ty_infer(&self) -> bool {
       117 ( 0.00%)          matches!(self.kind(), Infer(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_phantom_data(&self) -> bool {
         .                   if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
         .               }
         .           
         .               #[inline]
-- line 1770 ----------------------------------------
-- line 1775 ----------------------------------------
         .               /// Returns `true` if this type is a `str`.
         .               #[inline]
         .               pub fn is_str(&self) -> bool {
         .                   *self.kind() == Str
         .               }
         .           
         .               #[inline]
         .               pub fn is_param(&self, index: u32) -> bool {
        70 ( 0.00%)          match self.kind() {
         .                       ty::Param(ref data) => data.index == index,
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_slice(&self) -> bool {
         .                   match self.kind() {
         .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_array(&self) -> bool {
       160 ( 0.00%)          matches!(self.kind(), Array(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_simd(&self) -> bool {
         .                   match self.kind() {
         .                       Adt(def, _) => def.repr.simd(),
         .                       _ => false,
         .                   }
         .               }
         .           
       218 ( 0.00%)      pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
       436 ( 0.00%)          match self.kind() {
         .                       Array(ty, _) | Slice(ty) => ty,
         .                       Str => tcx.mk_mach_uint(ty::UintTy::U8),
         .                       _ => bug!("`sequence_element_type` called on non-sequence value: {}", self),
         .                   }
       218 ( 0.00%)      }
         .           
         .               pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {
         .                   match self.kind() {
         .                       Adt(def, substs) => {
         .                           assert!(def.repr.simd(), "`simd_size_and_type` called on non-SIMD type");
         .                           let variant = def.non_enum_variant();
         .                           let f0_ty = variant.fields[0].ty(tcx, substs);
         .           
-- line 1824 ----------------------------------------
-- line 1838 ----------------------------------------
         .                           }
         .                       }
         .                       _ => bug!("`simd_size_and_type` called on invalid type"),
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_region_ptr(&self) -> bool {
        92 ( 0.00%)          matches!(self.kind(), Ref(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_mutable_ptr(&self) -> bool {
         3 ( 0.00%)          matches!(
         2 ( 0.00%)              self.kind(),
         .                       RawPtr(TypeAndMut { mutbl: hir::Mutability::Mut, .. })
         .                           | Ref(_, _, hir::Mutability::Mut)
         .                   )
         .               }
         .           
         .               /// Get the mutability of the reference or `None` when not a reference
         .               #[inline]
         .               pub fn ref_mutability(&self) -> Option<hir::Mutability> {
-- line 1860 ----------------------------------------
-- line 1861 ----------------------------------------
         .                   match self.kind() {
         .                       Ref(_, _, mutability) => Some(*mutability),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_unsafe_ptr(&self) -> bool {
     2,806 ( 0.00%)          matches!(self.kind(), RawPtr(_))
         .               }
         .           
         .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
         .               #[inline]
         .               pub fn is_any_ptr(&self) -> bool {
       112 ( 0.00%)          self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
         .               }
         .           
         .               #[inline]
         .               pub fn is_box(&self) -> bool {
    44,044 ( 0.00%)          match self.kind() {
     7,549 ( 0.00%)              Adt(def, _) => def.is_box(),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               /// Panics if called on any type other than `Box<T>`.
        84 ( 0.00%)      pub fn boxed_ty(&self) -> Ty<'tcx> {
        84 ( 0.00%)          match self.kind() {
       210 ( 0.00%)              Adt(def, substs) if def.is_box() => substs.type_at(0),
         .                       _ => bug!("`boxed_ty` is called on non-box type {:?}", self),
         .                   }
        84 ( 0.00%)      }
         .           
         .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
         .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
         .               /// contents are abstract to rustc.)
         .               #[inline]
         .               pub fn is_scalar(&self) -> bool {
     1,506 ( 0.00%)          matches!(
     3,281 ( 0.00%)              self.kind(),
         .                       Bool | Char
         .                           | Int(_)
         .                           | Float(_)
         .                           | Uint(_)
         .                           | FnDef(..)
         .                           | FnPtr(_)
         .                           | RawPtr(_)
         .                           | Infer(IntVar(_) | FloatVar(_))
-- line 1908 ----------------------------------------
-- line 1917 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn is_trait(&self) -> bool {
         .                   matches!(self.kind(), Dynamic(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_enum(&self) -> bool {
       112 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
         .               }
         .           
         .               #[inline]
         .               pub fn is_union(&self) -> bool {
    10,003 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
         .               }
         .           
         .               #[inline]
         .               pub fn is_closure(&self) -> bool {
     1,960 ( 0.00%)          matches!(self.kind(), Closure(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_generator(&self) -> bool {
     2,907 ( 0.00%)          matches!(self.kind(), Generator(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_integral(&self) -> bool {
    12,859 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fresh_ty(&self) -> bool {
         .                   matches!(self.kind(), Infer(FreshTy(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fresh(&self) -> bool {
     1,736 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_char(&self) -> bool {
         .                   matches!(self.kind(), Char)
         .               }
         .           
         .               #[inline]
-- line 1963 ----------------------------------------
-- line 1967 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn is_signed(&self) -> bool {
         .                   matches!(self.kind(), Int(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_ptr_sized_integral(&self) -> bool {
     1,620 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
         .               }
         .           
         .               #[inline]
         .               pub fn has_concrete_skeleton(&self) -> bool {
         .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
         .               }
         .           
         .               /// Returns the type and mutability of `*ty`.
         .               ///
         .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
         .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
     8,764 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
    53,221 ( 0.00%)          match self.kind() {
       400 ( 0.00%)              Adt(def, _) if def.is_box() => {
       118 ( 0.00%)                  Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
         .                       }
    34,356 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
         .                       RawPtr(mt) if explicit => Some(*mt),
         .                       _ => None,
         .                   }
    17,528 ( 0.00%)      }
         .           
         .               /// Returns the type of `ty[i]`.
         .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
       726 ( 0.00%)          match self.kind() {
         .                       Array(ty, _) | Slice(ty) => Some(ty),
         .                       _ => None,
         .                   }
       114 ( 0.00%)      }
         .           
    47,608 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
    23,804 ( 0.00%)          match self.kind() {
    17,853 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
         .                       FnPtr(f) => *f,
         .                       Error(_) => {
         .                           // ignore errors (#54954)
         .                           ty::Binder::dummy(FnSig::fake())
         .                       }
         .                       Closure(..) => bug!(
         .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
         .                       ),
         .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
         .                   }
    53,559 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn is_fn(&self) -> bool {
       768 ( 0.00%)          matches!(self.kind(), FnDef(..) | FnPtr(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fn_ptr(&self) -> bool {
         .                   matches!(self.kind(), FnPtr(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_impl_trait(&self) -> bool {
         .                   matches!(self.kind(), Opaque(..))
         .               }
         .           
         .               #[inline]
         .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
     2,965 ( 0.00%)          match self.kind() {
         .                       Adt(adt, _) => Some(adt),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               /// Iterates over tuple fields.
         .               /// Panics when called on anything but a tuple.
       161 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
     1,820 ( 0.00%)          match self.kind() {
     1,194 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
         .                       _ => bug!("tuple_fields called on non-tuple"),
         .                   }
       322 ( 0.00%)      }
         .           
         .               /// Get the `i`-th element of a tuple.
         .               /// Panics when called on anything but a tuple.
       123 ( 0.00%)      pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
       246 ( 0.00%)          match self.kind() {
       246 ( 0.00%)              Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
         .                       _ => bug!("tuple_fields called on non-tuple"),
         .                   }
       246 ( 0.00%)      }
         .           
         .               /// If the type contains variants, returns the valid range of variant indices.
         .               //
         .               // FIXME: This requires the optimized MIR in the case of generators.
         .               #[inline]
         .               pub fn variant_range(&self, tcx: TyCtxt<'tcx>) -> Option<Range<VariantIdx>> {
         .                   match self.kind() {
         .                       TyKind::Adt(adt, _) => Some(adt.variant_range()),
-- line 2068 ----------------------------------------
-- line 2073 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// If the type contains variants, returns the variant for `variant_index`.
         .               /// Panics if `variant_index` is out of range.
         .               //
         .               // FIXME: This requires the optimized MIR in the case of generators.
         .               #[inline]
       560 ( 0.00%)      pub fn discriminant_for_variant(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   variant_index: VariantIdx,
         .               ) -> Option<Discr<'tcx>> {
       280 ( 0.00%)          match self.kind() {
         .                       TyKind::Adt(adt, _) if adt.variants.is_empty() => {
         .                           // This can actually happen during CTFE, see
         .                           // https://github.com/rust-lang/rust/issues/89765.
         .                           None
         .                       }
         .                       TyKind::Adt(adt, _) if adt.is_enum() => {
         .                           Some(adt.discriminant_for_variant(tcx, variant_index))
         .                       }
         .                       TyKind::Generator(def_id, substs, _) => {
         .                           Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
         .                       }
         .                       _ => None,
         .                   }
       448 ( 0.00%)      }
         .           
         .               /// Returns the type of the discriminant of this type.
     5,740 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
     2,870 ( 0.00%)          match self.kind() {
     4,592 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
         .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
         .           
         .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
         .                           let assoc_items = tcx.associated_item_def_ids(
         .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
         .                           );
         .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
         .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
         .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
         .           
         .                       ty::Bound(..)
         .                       | ty::Placeholder(_)
         .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
         .                       }
         .                   }
     4,592 ( 0.00%)      }
         .           
         .               /// Returns the type of metadata for (potentially fat) pointers to this type.
         .               pub fn ptr_metadata_ty(
         .                   &'tcx self,
         .                   tcx: TyCtxt<'tcx>,
         .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
         .               ) -> Ty<'tcx> {
         .                   let tail = tcx.struct_tail_with_normalize(self, normalize);
-- line 2151 ----------------------------------------
-- line 2200 ----------------------------------------
         .               /// function converts such a special type into the closure
         .               /// kind. To go the other way, use
         .               /// `tcx.closure_kind_ty(closure_kind)`.
         .               ///
         .               /// Note that during type checking, we use an inference variable
         .               /// to represent the closure kind, because it has not yet been
         .               /// inferred. Once upvar inference (in `rustc_typeck/src/check/upvar.rs`)
         .               /// is complete, that type variable will be unified.
     1,696 ( 0.00%)      pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {
     3,392 ( 0.00%)          match self.kind() {
     1,988 ( 0.00%)              Int(int_ty) => match int_ty {
         .                           ty::IntTy::I8 => Some(ty::ClosureKind::Fn),
         .                           ty::IntTy::I16 => Some(ty::ClosureKind::FnMut),
         .                           ty::IntTy::I32 => Some(ty::ClosureKind::FnOnce),
         .                           _ => bug!("cannot convert type `{:?}` to a closure kind", self),
         .                       },
         .           
         .                       // "Bound" types appear in canonical queries when the
         .                       // closure type is not yet known
         .                       Bound(..) | Infer(_) => None,
         .           
         .                       Error(_) => Some(ty::ClosureKind::Fn),
         .           
         .                       _ => bug!("cannot convert type `{:?}` to a closure kind", self),
         .                   }
     1,696 ( 0.00%)      }
         .           
         .               /// Fast path helper for testing if a type is `Sized`.
         .               ///
         .               /// Returning true means the type is known to be sized. Returning
         .               /// `false` means nothing -- could be sized, might not be.
         .               ///
         .               /// Note that we could never rely on the fact that a type such as `[_]` is
         .               /// trivially `!Sized` because we could be in a type environment with a
         .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
         .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
         .               /// this method doesn't return `Option<bool>`.
   176,562 ( 0.01%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
   117,708 ( 0.01%)          match self.kind() {
         .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
         .                       | ty::Uint(_)
         .                       | ty::Int(_)
         .                       | ty::Bool
         .                       | ty::Float(_)
         .                       | ty::FnDef(..)
         .                       | ty::FnPtr(_)
         .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
         .                       | ty::GeneratorWitness(..)
         .                       | ty::Array(..)
         .                       | ty::Closure(..)
         .                       | ty::Never
         .                       | ty::Error(_) => true,
         .           
         .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
         .           
     4,128 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
         .           
    11,412 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
         .           
         .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
         .           
         .                       ty::Infer(ty::TyVar(_)) => false,
         .           
         .                       ty::Bound(..)
         .                       | ty::Placeholder(..)
         .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
         .                       }
         .                   }
   176,562 ( 0.01%)      }
         .           }
         .           
         .           /// Extra information about why we ended up with a particular variance.
         .           /// This is only used to add more information to error messages, and
         .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
         .           /// may lead to confusing notes in error messages, it will never cause
         .           /// a miscompilation or unsoundness.
         .           ///
         .           /// When in doubt, use `VarianceDiagInfo::default()`
        63 ( 0.00%)  #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]
         .           pub enum VarianceDiagInfo<'tcx> {
         .               /// No additional information - this is the default.
         .               /// We will not add any additional information to error messages.
         .               #[default]
         .               None,
         .               /// We switched our variance because a generic argument occurs inside
         .               /// the invariant generic argument of another type.
         .               Invariant {
-- line 2290 ----------------------------------------
-- line 2295 ----------------------------------------
         .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
         .                   param_index: u32,
         .               },
         .           }
         .           
         .           impl<'tcx> VarianceDiagInfo<'tcx> {
         .               /// Mirrors `Variance::xform` - used to 'combine' the existing
         .               /// and new `VarianceDiagInfo`s when our variance changes.
    51,094 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
         .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
    76,641 ( 0.00%)          match self {
         .                       VarianceDiagInfo::None => other,
         .                       VarianceDiagInfo::Invariant { .. } => self,
         .                   }
    25,547 ( 0.00%)      }
         .           }

10,828,868 ( 0.67%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs
--------------------------------------------------------------------------------
Ir                 

-- line 12 ----------------------------------------
        .           use rustc_data_structures::sync::Lrc;
        .           use rustc_macros::HashStable_Generic;
        .           use rustc_span::symbol::{kw, sym};
        .           use rustc_span::symbol::{Ident, Symbol};
        .           use rustc_span::{self, edition::Edition, Span, DUMMY_SP};
        .           use std::borrow::Cow;
        .           use std::{fmt, mem};
        .           
   26,974 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum CommentKind {
        .               Line,
        .               Block,
        .           }
        .           
      352 ( 0.00%)  #[derive(Clone, PartialEq, Encodable, Decodable, Hash, Debug, Copy)]
        .           #[derive(HashStable_Generic)]
        .           pub enum BinOpToken {
        .               Plus,
        .               Minus,
        .               Star,
        .               Slash,
        .               Percent,
        .               Caret,
        .               And,
        .               Or,
        .               Shl,
        .               Shr,
        .           }
        .           
        .           /// A delimiter token.
   23,909 ( 0.00%)  #[derive(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Debug, Copy)]
        .           #[derive(HashStable_Generic)]
        .           pub enum DelimToken {
        .               /// A round parenthesis (i.e., `(` or `)`).
        .               Paren,
        .               /// A square bracket (i.e., `[` or `]`).
        .               Bracket,
        .               /// A curly brace (i.e., `{` or `}`).
        .               Brace,
        .               /// An empty delimiter.
        .               NoDelim,
        .           }
        .           
    2,657 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum LitKind {
        .               Bool, // AST only, must never appear in a `Token`
        .               Byte,
        .               Char,
        .               Integer,
        .               Float,
        .               Str,
        .               StrRaw(u16), // raw string delimited by `n` hash symbols
        .               ByteStr,
        .               ByteStrRaw(u16), // raw byte string delimited by `n` hash symbols
        .               Err,
        .           }
        .           
        .           /// A literal token.
   23,854 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub struct Lit {
        .               pub kind: LitKind,
        .               pub symbol: Symbol,
        .               pub suffix: Option<Symbol>,
        .           }
        .           
        .           impl fmt::Display for Lit {
      370 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      666 ( 0.00%)          let Lit { kind, symbol, suffix } = *self;
        .                   match kind {
      159 ( 0.00%)              Byte => write!(f, "b'{}'", symbol)?,
        3 ( 0.00%)              Char => write!(f, "'{}'", symbol)?,
       21 ( 0.00%)              Str => write!(f, "\"{}\"", symbol)?,
        .                       StrRaw(n) => write!(
        .                           f,
        .                           "r{delim}\"{string}\"{delim}",
        .                           delim = "#".repeat(n as usize),
        .                           string = symbol
        .                       )?,
        .                       ByteStr => write!(f, "b\"{}\"", symbol)?,
        .                       ByteStrRaw(n) => write!(
        .                           f,
        .                           "br{delim}\"{string}\"{delim}",
        .                           delim = "#".repeat(n as usize),
        .                           string = symbol
        .                       )?,
       39 ( 0.00%)              Integer | Float | Bool | Err => write!(f, "{}", symbol)?,
        .                   }
        .           
      148 ( 0.00%)          if let Some(suffix) = suffix {
        .                       write!(f, "{}", suffix)?;
        .                   }
        .           
        .                   Ok(())
      370 ( 0.00%)      }
        .           }
        .           
        .           impl LitKind {
        .               /// An English article for the literal token kind.
        .               pub fn article(self) -> &'static str {
        .                   match self {
        .                       Integer | Err => "an",
        .                       _ => "a",
-- line 113 ----------------------------------------
-- line 123 ----------------------------------------
        .                       Float => "float",
        .                       Str | StrRaw(..) => "string",
        .                       ByteStr | ByteStrRaw(..) => "byte string",
        .                       Err => "error",
        .                   }
        .               }
        .           
        .               crate fn may_have_suffix(self) -> bool {
        2 ( 0.00%)          matches!(self, Integer | Float | Err)
        .               }
        .           }
        .           
        .           impl Lit {
        .               pub fn new(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> Lit {
        .                   Lit { kind, symbol, suffix }
    7,105 ( 0.00%)      }
        .           }
        .           
    1,116 ( 0.00%)  pub fn ident_can_begin_expr(name: Symbol, span: Span, is_raw: bool) -> bool {
    1,953 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
        .           
      697 ( 0.00%)      !ident_token.is_reserved_ident()
        .                   || ident_token.is_path_segment_keyword()
        .                   || [
        .                       kw::Async,
        .                       kw::Do,
        .                       kw::Box,
        .                       kw::Break,
        .                       kw::Const,
        .                       kw::Continue,
-- line 152 ----------------------------------------
-- line 161 ----------------------------------------
        .                       kw::True,
        .                       kw::Try,
        .                       kw::Unsafe,
        .                       kw::While,
        .                       kw::Yield,
        .                       kw::Static,
        .                   ]
        .                   .contains(&name)
    1,395 ( 0.00%)  }
        .           
        .           fn ident_can_begin_type(name: Symbol, span: Span, is_raw: bool) -> bool {
      876 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
        .           
      316 ( 0.00%)      !ident_token.is_reserved_ident()
        .                   || ident_token.is_path_segment_keyword()
        .                   || [kw::Underscore, kw::For, kw::Impl, kw::Fn, kw::Unsafe, kw::Extern, kw::Typeof, kw::Dyn]
        .                       .contains(&name)
        .           }
        .           
3,799,510 ( 0.23%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum TokenKind {
        .               /* Expression-operator symbols. */
        .               Eq,
        .               Lt,
        .               Le,
        .               EqEq,
        .               Ne,
        .               Ge,
        .               Gt,
        .               AndAnd,
        .               OrOr,
        .               Not,
        .               Tilde,
   36,582 ( 0.00%)      BinOp(BinOpToken),
      141 ( 0.00%)      BinOpEq(BinOpToken),
        .           
        .               /* Structural symbols */
        .               At,
        .               Dot,
        .               DotDot,
        .               DotDotDot,
        .               DotDotEq,
        .               Comma,
-- line 203 ----------------------------------------
-- line 208 ----------------------------------------
        .               LArrow,
        .               FatArrow,
        .               Pound,
        .               Dollar,
        .               Question,
        .               /// Used by proc macros for representing lifetimes, not generated by lexer right now.
        .               SingleQuote,
        .               /// An opening delimiter (e.g., `{`).
   66,282 ( 0.00%)      OpenDelim(DelimToken),
        .               /// A closing delimiter (e.g., `}`).
   19,392 ( 0.00%)      CloseDelim(DelimToken),
        .           
        .               /* Literals */
   12,898 ( 0.00%)      Literal(Lit),
        .           
        .               /// Identifier token.
        .               /// Do not forget about `NtIdent` when you want to match on identifiers.
        .               /// It's recommended to use `Token::(ident,uninterpolate,uninterpolated_span)` to
        .               /// treat regular and interpolated identifiers in the same way.
   22,127 ( 0.00%)      Ident(Symbol, /* is_raw */ bool),
        .               /// Lifetime identifier token.
        .               /// Do not forget about `NtLifetime` when you want to match on lifetime identifiers.
        .               /// It's recommended to use `Token::(lifetime,uninterpolate,uninterpolated_span)` to
        .               /// treat regular and interpolated lifetime identifiers in the same way.
      540 ( 0.00%)      Lifetime(Symbol),
        .           
      647 ( 0.00%)      Interpolated(Lrc<Nonterminal>),
        .           
        .               /// A doc comment token.
        .               /// `Symbol` is the doc comment's data excluding its "quotes" (`///`, `/**`, etc)
        .               /// similarly to symbols in string literal tokens.
    4,911 ( 0.00%)      DocComment(CommentKind, ast::AttrStyle, Symbol),
        .           
        .               Eof,
        .           }
        .           
        .           // `TokenKind` is used a lot. Make sure it doesn't unintentionally get bigger.
        .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
        .           rustc_data_structures::static_assert_size!(TokenKind, 16);
        .           
  256,081 ( 0.02%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub struct Token {
   15,725 ( 0.00%)      pub kind: TokenKind,
       20 ( 0.00%)      pub span: Span,
        .           }
        .           
        .           impl TokenKind {
        .               pub fn lit(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> TokenKind {
        .                   Literal(Lit::new(kind, symbol, suffix))
       50 ( 0.00%)      }
        .           
        .               // An approximation to proc-macro-style single-character operators used by rustc parser.
        .               // If the operator token can be broken into two tokens, the first of which is single-character,
        .               // then this function performs that operation, otherwise it returns `None`.
    4,118 ( 0.00%)      pub fn break_two_token_op(&self) -> Option<(TokenKind, TokenKind)> {
   16,623 ( 0.00%)          Some(match *self {
        .                       Le => (Lt, Eq),
        .                       EqEq => (Eq, Eq),
        .                       Ne => (Not, Eq),
        .                       Ge => (Gt, Eq),
        .                       AndAnd => (BinOp(And), BinOp(And)),
        .                       OrOr => (BinOp(Or), BinOp(Or)),
        .                       BinOp(Shl) => (Lt, Lt),
        .                       BinOp(Shr) => (Gt, Gt),
-- line 271 ----------------------------------------
-- line 280 ----------------------------------------
        .                       BinOpEq(Shl) => (Lt, Le),
        .                       BinOpEq(Shr) => (Gt, Ge),
        .                       DotDot => (Dot, Dot),
        .                       DotDotDot => (Dot, DotDot),
        .                       ModSep => (Colon, Colon),
        .                       RArrow => (BinOp(Minus), Gt),
        .                       LArrow => (Lt, BinOp(Minus)),
        .                       FatArrow => (Eq, Gt),
    4,099 ( 0.00%)              _ => return None,
        .                   })
    4,118 ( 0.00%)      }
        .           
        .               /// Returns tokens that are likely to be typed accidentally instead of the current token.
        .               /// Enables better error recovery when the wrong token is found.
        .               pub fn similar_tokens(&self) -> Option<Vec<TokenKind>> {
        .                   match *self {
        .                       Comma => Some(vec![Dot, Lt, Semi]),
        .                       Semi => Some(vec![Colon, Comma]),
        .                       FatArrow => Some(vec![Eq, RArrow]),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               pub fn should_end_const_arg(&self) -> bool {
    1,006 ( 0.00%)          matches!(self, Gt | Ge | BinOp(Shr) | BinOpEq(Shr))
      229 ( 0.00%)      }
        .           }
        .           
        .           impl Token {
   31,957 ( 0.00%)      pub fn new(kind: TokenKind, span: Span) -> Self {
  105,662 ( 0.01%)          Token { kind, span }
   31,957 ( 0.00%)      }
        .           
        .               /// Some token that will be thrown away later.
    2,697 ( 0.00%)      pub fn dummy() -> Self {
        .                   Token::new(TokenKind::Question, DUMMY_SP)
    2,697 ( 0.00%)      }
        .           
        .               /// Recovers a `Token` from an `Ident`. This creates a raw identifier if necessary.
        .               pub fn from_ast_ident(ident: Ident) -> Self {
    1,232 ( 0.00%)          Token::new(Ident(ident.name, ident.is_raw_guess()), ident.span)
        .               }
        .           
        .               /// Return this token by value and leave a dummy token in its place.
   21,364 ( 0.00%)      pub fn take(&mut self) -> Self {
        .                   mem::replace(self, Token::dummy())
   21,364 ( 0.00%)      }
        .           
        .               /// For interpolated tokens, returns a span of the fragment to which the interpolated
        .               /// token refers. For all other tokens this is just a regular span.
        .               /// It is particularly important to use this for identifiers and lifetimes
        .               /// for which spans affect name resolution and edition checks.
        .               /// Note that keywords are also identifiers, so they should use this
        .               /// if they keep spans or perform edition checks.
        .               pub fn uninterpolated_span(&self) -> Span {
    3,494 ( 0.00%)          match &self.kind {
        .                       Interpolated(nt) => nt.span(),
    1,747 ( 0.00%)              _ => self.span,
        .                   }
    1,747 ( 0.00%)      }
        .           
        .               pub fn is_op(&self) -> bool {
   64,092 ( 0.00%)          !matches!(
   21,364 ( 0.00%)              self.kind,
        .                       OpenDelim(..)
        .                           | CloseDelim(..)
        .                           | Literal(..)
        .                           | DocComment(..)
        .                           | Ident(..)
        .                           | Lifetime(..)
        .                           | Interpolated(..)
        .                           | Eof
        .                   )
   21,364 ( 0.00%)      }
        .           
        .               pub fn is_like_plus(&self) -> bool {
    7,336 ( 0.00%)          matches!(self.kind, BinOp(Plus) | BinOpEq(Plus))
    1,454 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token can appear at the start of an expression.
      396 ( 0.00%)      pub fn can_begin_expr(&self) -> bool {
    2,046 ( 0.00%)          match self.uninterpolate().kind {
    2,511 ( 0.00%)              Ident(name, is_raw)              =>
      837 ( 0.00%)                  ident_can_begin_expr(name, self.span, is_raw), // value name or keyword
        .                       OpenDelim(..)                     | // tuple, array or block
        .                       Literal(..)                       | // literal
        .                       Not                               | // operator not
        .                       BinOp(Minus)                      | // unary minus
        .                       BinOp(Star)                       | // dereference
        .                       BinOp(Or) | OrOr                  | // closure
        .                       BinOp(And)                        | // reference
        .                       AndAnd                            | // double reference
-- line 371 ----------------------------------------
-- line 376 ----------------------------------------
        .                       Lifetime(..)                      | // labeled loop
        .                       Pound                             => true, // expression attributes
        .                       Interpolated(ref nt) => matches!(**nt, NtLiteral(..) |
        .                           NtExpr(..)    |
        .                           NtBlock(..)   |
        .                           NtPath(..)),
        .                       _ => false,
        .                   }
      792 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token can appear at the start of a type.
      980 ( 0.00%)      pub fn can_begin_type(&self) -> bool {
    1,747 ( 0.00%)          match self.uninterpolate().kind {
    1,314 ( 0.00%)              Ident(name, is_raw)        =>
      146 ( 0.00%)                  ident_can_begin_type(name, self.span, is_raw), // type name or keyword
        .                       OpenDelim(Paren)            | // tuple
        .                       OpenDelim(Bracket)          | // array
        .                       Not                         | // never
        .                       BinOp(Star)                 | // raw pointer
        .                       BinOp(And)                  | // reference
        .                       AndAnd                      | // double reference
        .                       Question                    | // maybe bound in trait object
        .                       Lifetime(..)                | // lifetime bound in trait object
        .                       Lt | BinOp(Shl)             | // associated path
        .                       ModSep                      => true, // global path
        .                       Interpolated(ref nt) => matches!(**nt, NtTy(..) | NtPath(..)),
        .                       _ => false,
        .                   }
    1,470 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token can appear at the start of a const param.
        .               pub fn can_begin_const_arg(&self) -> bool {
    1,040 ( 0.00%)          match self.kind {
        .                       OpenDelim(Brace) => true,
        .                       Interpolated(ref nt) => matches!(**nt, NtExpr(..) | NtBlock(..) | NtLiteral(..)),
      208 ( 0.00%)              _ => self.can_begin_literal_maybe_minus(),
        .                   }
        .               }
        .           
        .               /// Returns `true` if the token can appear at the start of a generic bound.
        .               pub fn can_begin_bound(&self) -> bool {
        .                   self.is_path_start()
        .                       || self.is_lifetime()
        .                       || self.is_keyword(kw::For)
-- line 419 ----------------------------------------
-- line 427 ----------------------------------------
        .               }
        .           
        .               /// Returns `true` if the token is any literal, a minus (which can prefix a literal,
        .               /// for example a '-42', or one of the boolean idents).
        .               ///
        .               /// In other words, would this token be a valid start of `parse_literal_maybe_minus`?
        .               ///
        .               /// Keep this in sync with and `Lit::from_token`, excluding unary negation.
      250 ( 0.00%)      pub fn can_begin_literal_maybe_minus(&self) -> bool {
    2,019 ( 0.00%)          match self.uninterpolate().kind {
        .                       Literal(..) | BinOp(Minus) => true,
      532 ( 0.00%)              Ident(name, false) if name.is_bool_lit() => true,
        .                       Interpolated(ref nt) => match &**nt {
        .                           NtLiteral(_) => true,
        .                           NtExpr(e) => match &e.kind {
        .                               ast::ExprKind::Lit(_) => true,
        .                               ast::ExprKind::Unary(ast::UnOp::Neg, e) => {
        .                                   matches!(&e.kind, ast::ExprKind::Lit(_))
        .                               }
        .                               _ => false,
        .                           },
        .                           _ => false,
        .                       },
        .                       _ => false,
        .                   }
      500 ( 0.00%)      }
        .           
        .               // A convenience function for matching on identifiers during parsing.
        .               // Turns interpolated identifier (`$i: ident`) or lifetime (`$l: lifetime`) token
        .               // into the regular identifier or lifetime token it refers to,
        .               // otherwise returns the original token.
    8,398 ( 0.00%)      pub fn uninterpolate(&self) -> Cow<'_, Token> {
  359,774 ( 0.02%)          match &self.kind {
    1,896 ( 0.00%)              Interpolated(nt) => match **nt {
      336 ( 0.00%)                  NtIdent(ident, is_raw) => {
      840 ( 0.00%)                      Cow::Owned(Token::new(Ident(ident.name, is_raw), ident.span))
        .                           }
        .                           NtLifetime(ident) => Cow::Owned(Token::new(Lifetime(ident.name), ident.span)),
        .                           _ => Cow::Borrowed(self),
        .                       },
        .                       _ => Cow::Borrowed(self),
        .                   }
    8,398 ( 0.00%)      }
        .           
        .               /// Returns an identifier if this token is an identifier.
   32,623 ( 0.00%)      pub fn ident(&self) -> Option<(Ident, /* is_raw */ bool)> {
        .                   let token = self.uninterpolate();
  249,281 ( 0.02%)          match token.kind {
1,095,918 ( 0.07%)              Ident(name, is_raw) => Some((Ident::new(name, token.span), is_raw)),
        .                       _ => None,
        .                   }
  262,168 ( 0.02%)      }
        .           
        .               /// Returns a lifetime identifier if this token is a lifetime.
    1,194 ( 0.00%)      pub fn lifetime(&self) -> Option<Ident> {
        .                   let token = self.uninterpolate();
    4,226 ( 0.00%)          match token.kind {
    1,802 ( 0.00%)              Lifetime(name) => Some(Ident::new(name, token.span)),
        .                       _ => None,
        .                   }
    8,358 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is an identifier.
        .               pub fn is_ident(&self) -> bool {
        .                   self.ident().is_some()
    3,251 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is a lifetime.
      919 ( 0.00%)      pub fn is_lifetime(&self) -> bool {
        .                   self.lifetime().is_some()
    1,838 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is an identifier whose name is the given
        .               /// string slice.
    3,613 ( 0.00%)      pub fn is_ident_named(&self, name: Symbol) -> bool {
        .                   self.ident().map_or(false, |(ident, _)| ident.name == name)
    7,226 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is an interpolated path.
        .               fn is_path(&self) -> bool {
   25,760 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
        .                       if let NtPath(..) = **nt {
        .                           return true;
        .                       }
        .                   }
        .                   false
        .               }
        .           
        .               /// Would `maybe_whole_expr` in `parser.rs` return `Ok(..)`?
        .               /// That is, is this a pre-parsed expression dropped into the token stream
        .               /// (which happens while parsing the result of macro expansion)?
        .               pub fn is_whole_expr(&self) -> bool {
        4 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
        .                       if let NtExpr(_) | NtLiteral(_) | NtPath(_) | NtIdent(..) | NtBlock(_) = **nt {
        .                           return true;
        .                       }
        .                   }
        .           
        .                   false
        2 ( 0.00%)      }
        .           
        .               // Is the token an interpolated block (`$b:block`)?
        .               pub fn is_whole_block(&self) -> bool {
      346 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
        .                       if let NtBlock(..) = **nt {
        .                           return true;
        .                       }
        .                   }
        .                   false
      173 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is either the `mut` or `const` keyword.
        .               pub fn is_mutability(&self) -> bool {
        .                   self.is_keyword(kw::Mut) || self.is_keyword(kw::Const)
        .               }
        .           
    1,452 ( 0.00%)      pub fn is_qpath_start(&self) -> bool {
   14,336 ( 0.00%)          self == &Lt || self == &BinOp(Shl)
        .               }
        .           
   25,784 ( 0.00%)      pub fn is_path_start(&self) -> bool {
   37,840 ( 0.00%)          self == &ModSep
        .                       || self.is_qpath_start()
        .                       || self.is_path()
        .                       || self.is_path_segment_keyword()
    5,499 ( 0.00%)              || self.is_ident() && !self.is_reserved_ident()
   32,230 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is a given keyword, `kw`.
   67,800 ( 0.00%)      pub fn is_keyword(&self, kw: Symbol) -> bool {
        .                   self.is_non_raw_ident_where(|id| id.name == kw)
  135,600 ( 0.01%)      }
        .           
    1,126 ( 0.00%)      pub fn is_path_segment_keyword(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_path_segment_keyword)
        .               }
        .           
        .               // Returns true for reserved identifiers used internally for elided lifetimes,
        .               // unnamed method parameters, crate root module, error recovery etc.
      176 ( 0.00%)      pub fn is_special_ident(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_special)
        .               }
        .           
        .               /// Returns `true` if the token is a keyword used in the language.
      176 ( 0.00%)      pub fn is_used_keyword(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_used_keyword)
        .               }
        .           
        .               /// Returns `true` if the token is a keyword reserved for possible future use.
      176 ( 0.00%)      pub fn is_unused_keyword(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_unused_keyword)
        .               }
        .           
        .               /// Returns `true` if the token is either a special identifier or a keyword.
        .               pub fn is_reserved_ident(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_reserved)
        .               }
        .           
        .               /// Returns `true` if the token is the identifier `true` or `false`.
    1,134 ( 0.00%)      pub fn is_bool_lit(&self) -> bool {
    2,268 ( 0.00%)          self.is_non_raw_ident_where(|id| id.name.is_bool_lit())
        .               }
        .           
        .               pub fn is_numeric_lit(&self) -> bool {
        .                   matches!(
        .                       self.kind,
        .                       Literal(Lit { kind: LitKind::Integer, .. }) | Literal(Lit { kind: LitKind::Float, .. })
        .                   )
        .               }
        .           
        .               /// Returns `true` if the token is a non-raw identifier for which `pred` holds.
        .               pub fn is_non_raw_ident_where(&self, pred: impl FnOnce(Ident) -> bool) -> bool {
  500,454 ( 0.03%)          match self.ident() {
    5,093 ( 0.00%)              Some((id, false)) => pred(id),
        .                       _ => false,
        .                   }
        .               }
        .           
   57,300 ( 0.00%)      pub fn glue(&self, joint: &Token) -> Option<Token> {
   28,650 ( 0.00%)          let kind = match self.kind {
    1,576 ( 0.00%)              Eq => match joint.kind {
        .                           Eq => EqEq,
        .                           Gt => FatArrow,
        .                           _ => return None,
        .                       },
      142 ( 0.00%)              Lt => match joint.kind {
        .                           Eq => Le,
        .                           Lt => BinOp(Shl),
        .                           Le => BinOpEq(Shl),
        .                           BinOp(Minus) => LArrow,
        .                           _ => return None,
        .                       },
      550 ( 0.00%)              Gt => match joint.kind {
        .                           Eq => Ge,
        .                           Gt => BinOp(Shr),
        .                           Ge => BinOpEq(Shr),
        .                           _ => return None,
        .                       },
       48 ( 0.00%)              Not => match joint.kind {
        .                           Eq => Ne,
        .                           _ => return None,
        .                       },
    2,682 ( 0.00%)              BinOp(op) => match joint.kind {
        .                           Eq => BinOpEq(op),
       62 ( 0.00%)                  BinOp(And) if op == And => AndAnd,
       52 ( 0.00%)                  BinOp(Or) if op == Or => OrOr,
      186 ( 0.00%)                  Gt if op == Minus => RArrow,
        .                           _ => return None,
        .                       },
      399 ( 0.00%)              Dot => match joint.kind {
        .                           Dot => DotDot,
        .                           DotDot => DotDotDot,
        .                           _ => return None,
        .                       },
      159 ( 0.00%)              DotDot => match joint.kind {
        .                           Dot => DotDotDot,
        .                           Eq => DotDotEq,
        .                           _ => return None,
        .                       },
    1,006 ( 0.00%)              Colon => match joint.kind {
        .                           Colon => ModSep,
        .                           _ => return None,
        .                       },
        .                       SingleQuote => match joint.kind {
        .                           Ident(name, false) => Lifetime(Symbol::intern(&format!("'{}", name))),
        .                           _ => return None,
        .                       },
        .           
        .                       Le | EqEq | Ne | Ge | AndAnd | OrOr | Tilde | BinOpEq(..) | At | DotDotDot
        .                       | DotDotEq | Comma | Semi | ModSep | RArrow | LArrow | FatArrow | Pound | Dollar
        .                       | Question | OpenDelim(..) | CloseDelim(..) | Literal(..) | Ident(..)
        .                       | Lifetime(..) | Interpolated(..) | DocComment(..) | Eof => return None,
        .                   };
        .           
   18,603 ( 0.00%)          Some(Token::new(kind, self.span.to(joint.span)))
   51,570 ( 0.00%)      }
        .           }
        .           
        .           impl PartialEq<TokenKind> for Token {
        .               fn eq(&self, rhs: &TokenKind) -> bool {
  221,717 ( 0.01%)          self.kind == *rhs
        .               }
        .           }
        .           
        .           #[derive(Clone, Encodable, Decodable)]
        .           /// For interpolation during macro expansion.
        .           pub enum Nonterminal {
        .               NtItem(P<ast::Item>),
        .               NtBlock(P<ast::Block>),
-- line 675 ----------------------------------------
-- line 711 ----------------------------------------
        .               Path,
        .               Vis,
        .               TT,
        .           }
        .           
        .           impl NonterminalKind {
        .               /// The `edition` closure is used to get the edition for the given symbol. Doing
        .               /// `span.edition()` is expensive, so we do it lazily.
      200 ( 0.00%)      pub fn from_symbol(
        .                   symbol: Symbol,
        .                   edition: impl FnOnce() -> Edition,
        .               ) -> Option<NonterminalKind> {
      432 ( 0.00%)          Some(match symbol {
        .                       sym::item => NonterminalKind::Item,
        .                       sym::block => NonterminalKind::Block,
        .                       sym::stmt => NonterminalKind::Stmt,
        .                       sym::pat => match edition() {
        .                           Edition::Edition2015 | Edition::Edition2018 => {
        .                               NonterminalKind::PatParam { inferred: true }
        .                           }
        .                           Edition::Edition2021 => NonterminalKind::PatWithOr,
-- line 731 ----------------------------------------
-- line 737 ----------------------------------------
        .                       sym::lifetime => NonterminalKind::Lifetime,
        .                       sym::literal => NonterminalKind::Literal,
        .                       sym::meta => NonterminalKind::Meta,
        .                       sym::path => NonterminalKind::Path,
        .                       sym::vis => NonterminalKind::Vis,
        .                       sym::tt => NonterminalKind::TT,
        .                       _ => return None,
        .                   })
      200 ( 0.00%)      }
        .               fn symbol(self) -> Symbol {
        .                   match self {
        .                       NonterminalKind::Item => sym::item,
        .                       NonterminalKind::Block => sym::block,
        .                       NonterminalKind::Stmt => sym::stmt,
        .                       NonterminalKind::PatParam { inferred: false } => sym::pat_param,
        .                       NonterminalKind::PatParam { inferred: true } | NonterminalKind::PatWithOr => sym::pat,
        .                       NonterminalKind::Expr => sym::expr,
-- line 753 ----------------------------------------

1,301,598 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 417 ----------------------------------------
        .               /// # #![allow(unused_mut)]
        .               /// let mut vec: Vec<i32> = Vec::new();
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        .               pub const fn new() -> Self {
2,932,229 ( 0.18%)          Vec { buf: RawVec::NEW, len: 0 }
      322 ( 0.00%)      }
        .           
        .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
        .               ///
        .               /// The vector will be able to hold exactly `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the vector will not allocate.
        .               ///
        .               /// It is important to note that although the returned vector has the
        .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 601 ----------------------------------------
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
  734,187 ( 0.05%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
        .               }
        .           
        .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
-- line 617 ----------------------------------------
-- line 677 ----------------------------------------
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
   47,421 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
        .               }
        .           
        .               /// Decomposes a `Vec<T>` into its raw components.
        .               ///
        .               /// Returns the raw pointer to the underlying data, the length of
        .               /// the vector (in elements), and the allocated capacity of the
        .               /// data (in elements). These are the same arguments in the same
        .               /// order as the arguments to [`from_raw_parts`].
-- line 693 ----------------------------------------
-- line 778 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let vec: Vec<i32> = Vec::with_capacity(10);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn capacity(&self) -> usize {
   93,010 ( 0.01%)          self.buf.capacity()
        .               }
        .           
        .               /// Reserves capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 794 ----------------------------------------
-- line 801 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve(&mut self, additional: usize) {
  227,320 ( 0.01%)          self.buf.reserve(self.len, additional);
        .               }
        .           
        .               /// Reserves the minimum capacity for exactly `additional` more elements to
        .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
        .               /// capacity will be greater than or equal to `self.len() + additional`.
        .               /// Does nothing if the capacity is already sufficient.
        .               ///
        .               /// Note that the allocator may give the collection more space than it
-- line 817 ----------------------------------------
-- line 829 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve_exact(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve_exact(&mut self, additional: usize) {
    8,294 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
        .               }
        .           
        .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `try_reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 845 ----------------------------------------
-- line 930 ----------------------------------------
        .               /// assert!(vec.capacity() >= 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn shrink_to_fit(&mut self) {
        .                   // The capacity is never less than the length, and there's nothing to do when
        .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
        .                   // by only calling it with a greater capacity.
   23,857 ( 0.00%)          if self.capacity() > self.len {
    3,915 ( 0.00%)              self.buf.shrink_to_fit(self.len);
        .                   }
        .               }
        .           
        .               /// Shrinks the capacity of the vector with a lower bound.
        .               ///
        .               /// The capacity will remain at least as large as both the length
        .               /// and the supplied value.
        .               ///
-- line 947 ----------------------------------------
-- line 990 ----------------------------------------
        .               /// let slice = vec.into_boxed_slice();
        .               /// assert_eq!(slice.into_vec().capacity(), 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn into_boxed_slice(mut self) -> Box<[T], A> {
        .                   unsafe {
        .                       self.shrink_to_fit();
    9,697 ( 0.00%)              let me = ManuallyDrop::new(self);
        .                       let buf = ptr::read(&me.buf);
        .                       let len = me.len();
        .                       buf.into_box(len).assume_init()
        .                   }
        .               }
        .           
        .               /// Shortens the vector, keeping the first `len` elements and dropping
        .               /// the rest.
-- line 1006 ----------------------------------------
-- line 1040 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.truncate(0);
        .               /// assert_eq!(vec, []);
        .               /// ```
        .               ///
        .               /// [`clear`]: Vec::clear
        .               /// [`drain`]: Vec::drain
        .               #[stable(feature = "rust1", since = "1.0.0")]
  191,482 ( 0.01%)      pub fn truncate(&mut self, len: usize) {
        .                   // This is safe because:
        .                   //
        .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
        .                   //   case avoids creating an invalid slice, and
        .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
        .                   //   such that no value will be dropped twice in case `drop_in_place`
        .                   //   were to panic once (if it panics twice, the program aborts).
        .                   unsafe {
        .                       // Note: It's intentional that this is `>` and not `>=`.
        .                       //       Changing it to `>=` has negative performance
        .                       //       implications in some cases. See #78884 for more.
  160,364 ( 0.01%)              if len > self.len {
        .                           return;
        .                       }
        .                       let remaining_len = self.len - len;
        .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
  172,715 ( 0.01%)              self.len = len;
    6,068 ( 0.00%)              ptr::drop_in_place(s);
        .                   }
  229,778 ( 0.01%)      }
        .           
        .               /// Extracts a slice containing the entire vector.
        .               ///
        .               /// Equivalent to `&s[..]`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1076 ----------------------------------------
-- line 1126 ----------------------------------------
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_ptr(&self) -> *const T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref`, which creates an intermediate reference.
4,225,705 ( 0.26%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns an unsafe mutable pointer to the vector's buffer.
        .               ///
-- line 1142 ----------------------------------------
-- line 1162 ----------------------------------------
        .               /// }
        .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
        .               /// ```
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_mut_ptr(&mut self) -> *mut T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref_mut`, which creates an intermediate reference.
3,107,974 ( 0.19%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
-- line 1178 ----------------------------------------
-- line 1259 ----------------------------------------
        .               ///
        .               /// Normally, here, one would use [`clear`] instead to correctly drop
        .               /// the contents and thus not leak memory.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   debug_assert!(new_len <= self.capacity());
        .           
  393,866 ( 0.02%)          self.len = new_len;
      634 ( 0.00%)      }
        .           
        .               /// Removes an element from the vector and returns it.
        .               ///
        .               /// The removed element is replaced by the last element of the vector.
        .               ///
        .               /// This does not preserve ordering, but is *O*(1).
        .               /// If you need to preserve the element order, use [`remove`] instead.
        .               ///
-- line 1276 ----------------------------------------
-- line 1305 ----------------------------------------
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // We replace self[index] with the last element. Note that if the
        .                       // bounds check above succeeds there must be a last element (which
        .                       // can be self[index] itself).
        .                       let value = ptr::read(self.as_ptr().add(index));
        .                       let base_ptr = self.as_mut_ptr();
        1 ( 0.00%)              ptr::copy(base_ptr.add(len - 1), base_ptr.add(index), 1);
        .                       self.set_len(len - 1);
        .                       value
        .                   }
        .               }
        .           
        .               /// Inserts an element at position `index` within the vector, shifting all
        .               /// elements after it to the right.
        .               ///
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.insert(1, 4);
        .               /// assert_eq!(vec, [1, 4, 2, 3]);
        .               /// vec.insert(4, 5);
        .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    8,078 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
        .                   }
        .           
    1,239 ( 0.00%)          let len = self.len();
    2,656 ( 0.00%)          if index > len {
        .                       assert_failed(index, len);
        .                   }
        .           
        .                   // space for the new element
    3,344 ( 0.00%)          if len == self.buf.capacity() {
        .                       self.reserve(1);
        .                   }
        .           
        .                   unsafe {
        .                       // infallible
        .                       // The spot to put the new value
        .                       {
        .                           let p = self.as_mut_ptr().add(index);
        .                           // Shift everything over to make space. (Duplicating the
        .                           // `index`th element into two consecutive places.)
    4,761 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
        .                           // Write it in, overwriting the first copy of the `index`th
        .                           // element.
        .                           ptr::write(p, element);
        .                       }
    3,344 ( 0.00%)              self.set_len(len + 1);
        .                   }
    6,924 ( 0.00%)      }
        .           
        .               /// Removes and returns the element at position `index` within the vector,
        .               /// shifting all elements after it to the left.
        .               ///
        .               /// Note: Because this shifts over the remaining elements, it has a
        .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
        .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
        .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1395 ----------------------------------------
        .               pub fn remove(&mut self, index: usize) -> T {
        .                   #[cold]
        .                   #[inline(never)]
        .                   #[track_caller]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("removal index (is {}) should be < len (is {})", index, len);
        .                   }
        .           
      242 ( 0.00%)          let len = self.len();
      937 ( 0.00%)          if index >= len {
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // infallible
        .                       let ret;
        .                       {
        .                           // the place we are taking from.
        .                           let ptr = self.as_mut_ptr().add(index);
        .                           // copy it out, unsafely having a copy of the value on
        .                           // the stack and in the vector at the same time.
      496 ( 0.00%)                  ret = ptr::read(ptr);
        .           
        .                           // Shift everything down to fill in that spot.
      603 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
        .                       }
      378 ( 0.00%)              self.set_len(len - 1);
        .                       ret
        .                   }
        .               }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
-- line 1428 ----------------------------------------
-- line 1442 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3, 4, 5];
        .               /// let keep = [false, true, true, false, true];
        .               /// let mut iter = keep.iter();
        .               /// vec.retain(|_| *iter.next().unwrap());
        .               /// assert_eq!(vec, [2, 3, 5]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
  235,068 ( 0.01%)      pub fn retain<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&T) -> bool,
        .               {
   22,380 ( 0.00%)          self.retain_mut(|elem| f(elem));
  224,416 ( 0.01%)      }
        .           
        .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
        .               /// });
        .               /// assert_eq!(vec, [2, 3, 4]);
        .               /// ```
        .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
        .               pub fn retain_mut<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
   30,135 ( 0.00%)          let original_len = self.len();
        .                   // Avoid double drop if the drop guard is not executed,
        .                   // since we may make some holes during the process.
        .                   unsafe { self.set_len(0) };
        .           
        .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
        .                   //      |<-              processed len   ->| ^- next to check
        .                   //                  |<-  deleted cnt     ->|
        .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
        .                       v: &'a mut Vec<T, A>,
        .                       processed_len: usize,
        .                       deleted_cnt: usize,
        .                       original_len: usize,
        .                   }
        .           
        .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
        .                       fn drop(&mut self) {
   21,708 ( 0.00%)                  if self.deleted_cnt > 0 {
        .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
        .                               unsafe {
        .                                   ptr::copy(
        .                                       self.v.as_ptr().add(self.processed_len),
   16,891 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
        .                                       self.original_len - self.processed_len,
        .                                   );
        .                               }
        .                           }
        .                           // SAFETY: After filling holes, all items are in contiguous memory.
        .                           unsafe {
        2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
        .                           }
        .                       }
        .                   }
        .           
        .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
        .           
        .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
        .                       original_len: usize,
        .                       f: &mut F,
        .                       g: &mut BackshiftOnDrop<'_, T, A>,
        .                   ) where
        .                       F: FnMut(&mut T) -> bool,
        .                   {
  365,093 ( 0.02%)              while g.processed_len != original_len {
        .                           // SAFETY: Unchecked element must be valid.
        .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
   95,004 ( 0.01%)                  if !f(cur) {
        .                               // Advance early to avoid double drop if `drop_in_place` panicked.
    1,712 ( 0.00%)                      g.processed_len += 1;
      866 ( 0.00%)                      g.deleted_cnt += 1;
        .                               // SAFETY: We never touch this element again after dropped.
    1,143 ( 0.00%)                      unsafe { ptr::drop_in_place(cur) };
        .                               // We already advanced the counter.
        .                               if DELETED {
        .                                   continue;
        .                               } else {
        .                                   break;
        .                               }
        .                           }
        .                           if DELETED {
        .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
        .                               // We use copy for move, and never touch this element again.
        .                               unsafe {
    5,544 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
        .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
        .                               }
        .                           }
    3,696 ( 0.00%)                  g.processed_len += 1;
        .                       }
        .                   }
        .           
        .                   // Stage 1: Nothing was deleted.
        .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
        .           
        .                   // Stage 2: Some elements were deleted.
        .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
        .               ///
        .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
        .               ///
        .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
        .               /// ```
        .               #[stable(feature = "dedup_by", since = "1.16.0")]
    5,299 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
        .               where
        .                   F: FnMut(&mut T, &mut T) -> bool,
        .               {
      757 ( 0.00%)          let len = self.len();
    2,558 ( 0.00%)          if len <= 1 {
        .                       return;
        .                   }
        .           
        .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
        .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
        .                       /* Offset of the element we want to check if it is duplicate */
        .                       read: usize,
        .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
        .                   let ptr = gap.vec.as_mut_ptr();
        .           
        .                   /* Drop items while going through Vec, it should be more efficient than
        .                    * doing slice partition_dedup + truncate */
        .           
        .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
        .                    * are always in-bounds and read_ptr never aliases prev_ptr */
        .                   unsafe {
    2,696 ( 0.00%)              while gap.read < len {
        .                           let read_ptr = ptr.add(gap.read);
        .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
        .           
      474 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
        .                               // Increase `gap.read` now since the drop may panic.
        .                               gap.read += 1;
        .                               /* We have found duplicate, drop it in-place */
        .                               ptr::drop_in_place(read_ptr);
        .                           } else {
        .                               let write_ptr = ptr.add(gap.write);
        .           
        .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
        .                                * have to use `copy` or conditional `copy_nonoverlapping`.
        .                                * Looks like the first option is faster. */
        .                               ptr::copy(read_ptr, write_ptr, 1);
        .           
        .                               /* We have filled that place, so go further */
    1,675 ( 0.00%)                      gap.write += 1;
        .                               gap.read += 1;
        .                           }
        .                       }
        .           
        .                       /* Technically we could let `gap` clean up with its Drop, but
        .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
        .                        * the codegen, so we just do it manually */
        .                       gap.vec.set_len(gap.write);
        .                       mem::forget(gap);
        .                   }
    6,056 ( 0.00%)      }
        .           
        .               /// Appends an element to the back of a collection.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
        .               ///
        .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2];
        .               /// vec.push(3);
        .               /// assert_eq!(vec, [1, 2, 3]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      185 ( 0.00%)      pub fn push(&mut self, value: T) {
        .                   // This will panic or abort if we would allocate > isize::MAX bytes
        .                   // or if the length increment would overflow for zero-sized types.
4,547,246 ( 0.28%)          if self.len == self.buf.capacity() {
  336,025 ( 0.02%)              self.buf.reserve_for_push(self.len);
        .                   }
        .                   unsafe {
  156,559 ( 0.01%)              let end = self.as_mut_ptr().add(self.len);
        .                       ptr::write(end, value);
6,227,670 ( 0.38%)              self.len += 1;
        .                   }
      148 ( 0.00%)      }
        .           
        .               /// Removes the last element from a vector and returns it, or [`None`] if it
        .               /// is empty.
        .               ///
        .               /// If you'd like to pop the first element, consider using
        .               /// [`VecDeque::pop_front`] instead.
        .               ///
        .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3];
        .               /// assert_eq!(vec.pop(), Some(3));
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop(&mut self) -> Option<T> {
1,110,028 ( 0.07%)          if self.len == 0 {
      116 ( 0.00%)              None
        .                   } else {
        .                       unsafe {
  869,689 ( 0.05%)                  self.len -= 1;
  155,573 ( 0.01%)                  Some(ptr::read(self.as_ptr().add(self.len())))
        .                       }
        .                   }
        .               }
        .           
        .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
        .               ///
        .               /// # Panics
        .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
        .               /// let mut vec2 = vec![4, 5, 6];
        .               /// vec.append(&mut vec2);
        .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
        .               /// assert_eq!(vec2, []);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "append", since = "1.4.0")]
      322 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
        .                   unsafe {
        .                       self.append_elements(other.as_slice() as _);
        .                       other.set_len(0);
        .                   }
      276 ( 0.00%)      }
        .           
        .               /// Appends elements to `Self` from other buffer.
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               unsafe fn append_elements(&mut self, other: *const [T]) {
        .                   let count = unsafe { (*other).len() };
        .                   self.reserve(count);
    9,284 ( 0.00%)          let len = self.len();
        .                   unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
  165,183 ( 0.01%)          self.len += count;
        .               }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// When the iterator **is** dropped, all elements in the range are removed
        .               /// from the vector, even if the iterator was not fully consumed. If the
        .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
-- line 1807 ----------------------------------------
-- line 1834 ----------------------------------------
        .                   // When the Drain is first created, it shortens the length of
        .                   // the source vector to make sure no uninitialized or moved-from elements
        .                   // are accessible at all if the Drain's destructor never gets to run.
        .                   //
        .                   // Drain will ptr::read out the values to remove.
        .                   // When finished, remaining tail of the vec is copied back to cover
        .                   // the hole, and the vector length is restored to the new length.
        .                   //
   31,906 ( 0.00%)          let len = self.len();
        .                   let Range { start, end } = slice::range(range, ..len);
        .           
        .                   unsafe {
        .                       // set self.vec length's to start, to be safe in case Drain is leaked
        .                       self.set_len(start);
        .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
        .                       // whole Drain iterator (like &mut T).
        6 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
    1,131 ( 0.00%)              Drain {
        .                           tail_start: end,
        6 ( 0.00%)                  tail_len: len - end,
        .                           iter: range_slice.iter(),
        .                           vec: NonNull::from(self),
        .                       }
        .                   }
        .               }
        .           
        .               /// Clears the vector, removing all values.
        .               ///
-- line 1861 ----------------------------------------
-- line 1869 ----------------------------------------
        .               ///
        .               /// v.clear();
        .               ///
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn clear(&mut self) {
  342,243 ( 0.02%)          self.truncate(0)
        .               }
        .           
        .               /// Returns the number of elements in the vector, also referred to
        .               /// as its 'length'.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1885 ----------------------------------------
-- line 1900 ----------------------------------------
        .               /// let mut v = Vec::new();
        .               /// assert!(v.is_empty());
        .               ///
        .               /// v.push(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn is_empty(&self) -> bool {
  443,371 ( 0.03%)          self.len() == 0
        .               }
        .           
        .               /// Splits the collection into two at the given index.
        .               ///
        .               /// Returns a newly allocated vector containing the elements in the range
        .               /// `[at, len)`. After the call, the original vector will be left containing
        .               /// the elements `[0, at)` with its previous capacity unchanged.
        .               ///
-- line 1916 ----------------------------------------
-- line 1935 ----------------------------------------
        .                   A: Clone,
        .               {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(at: usize, len: usize) -> ! {
        .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
        .                   }
        .           
    1,118 ( 0.00%)          if at > self.len() {
        .                       assert_failed(at, self.len());
        .                   }
        .           
      910 ( 0.00%)          if at == 0 {
        .                       // the new vector can take over the original buffer and avoid the copy
        .                       return mem::replace(
        .                           self,
        .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
        .                       );
        .                   }
        .           
        .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
        .               ///
        .               /// let mut vec = vec![];
        .               /// let mut p = 1;
        .               /// vec.resize_with(4, || { p *= 2; p });
        .               /// assert_eq!(vec, [2, 4, 8, 16]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
   46,110 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
        .               where
        .                   F: FnMut() -> T,
        .               {
    6,096 ( 0.00%)          let len = self.len();
   12,192 ( 0.00%)          if new_len > len {
   29,919 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
   40,014 ( 0.00%)      }
        .           
        .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
        .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
        .               /// `'a`. If the type has only static references, or none at all, then this
        .               /// may be chosen to be `'static`.
        .               ///
        .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
        .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2070 ----------------------------------------
        .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
        .               #[inline]
        .               pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
        .                   // Note:
        .                   // This method is not implemented in terms of `split_at_spare_mut`,
        .                   // to prevent invalidation of pointers to the buffer.
        .                   unsafe {
        .                       slice::from_raw_parts_mut(
        2 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
       39 ( 0.00%)                  self.buf.capacity() - self.len,
        .                       )
        .                   }
        .               }
        .           
        .               /// Returns vector content as a slice of `T`, along with the remaining spare
        .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
        .               ///
        .               /// The returned spare capacity slice can be used to fill the vector with data
-- line 2087 ----------------------------------------
-- line 2189 ----------------------------------------
        .               /// assert_eq!(vec, ["hello", "world", "world"]);
        .               ///
        .               /// let mut vec = vec![1, 2, 3, 4];
        .               /// vec.resize(2, 0);
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize", since = "1.5.0")]
      450 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
       45 ( 0.00%)          let len = self.len();
        .           
      135 ( 0.00%)          if new_len > len {
    2,652 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
       45 ( 0.00%)      }
        .           
        .               /// Clones and appends all elements in a slice to the `Vec`.
        .               ///
        .               /// Iterates over the slice `other`, clones each element, and then appends
        .               /// it to this `Vec`. The `other` slice is traversed in-order.
        .               ///
        .               /// Note that this function is same as [`extend`] except that it is
        .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2271 ----------------------------------------
        .           trait ExtendWith<T> {
        .               fn next(&mut self) -> T;
        .               fn last(self) -> T;
        .           }
        .           
        .           struct ExtendElement<T>(T);
        .           impl<T: Clone> ExtendWith<T> for ExtendElement<T> {
        .               fn next(&mut self) -> T {
      162 ( 0.00%)          self.0.clone()
        .               }
        .               fn last(self) -> T {
        .                   self.0
        .               }
        .           }
        .           
        .           struct ExtendFunc<F>(F);
        .           impl<T, F: FnMut() -> T> ExtendWith<T> for ExtendFunc<F> {
-- line 2287 ----------------------------------------
-- line 2291 ----------------------------------------
        .               fn last(mut self) -> T {
        .                   (self.0)()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               #[cfg(not(no_global_oom_handling))]
        .               /// Extend the vector by `n` values, using the given generator.
  158,171 ( 0.01%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
        .                   self.reserve(n);
        .           
        .                   unsafe {
    5,007 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
        .                       // Use SetLenOnDrop to work around bug where compiler
        .                       // might not realize the store through `ptr` through self.set_len()
        .                       // don't alias.
        .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
        .           
        .                       // Write all elements except the last one
        .                       for _ in 1..n {
        .                           ptr::write(ptr, value.next());
        .                           ptr = ptr.offset(1);
        .                           // Increment the length in every step in case next() panics
        .                           local_len.increment_len(1);
        .                       }
        .           
  182,920 ( 0.01%)              if n > 0 {
        .                           // We can write the last element directly without cloning needlessly
        .                           ptr::write(ptr, value.last());
        .                           local_len.increment_len(1);
        .                       }
        .           
        .                       // len set by scope guard
        .                   }
  125,603 ( 0.01%)      }
        .           }
        .           
        .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
        .               /// Removes consecutive repeated elements in the vector according to the
        .               /// [`PartialEq`] trait implementation.
        .               ///
        .               /// If the vector is sorted, this removes all duplicates.
        .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
        .               ///
        .               /// vec.dedup();
        .               ///
        .               /// assert_eq!(vec, [1, 2, 3, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn dedup(&mut self) {
      758 ( 0.00%)          self.dedup_by(|a, b| a == b)
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Internal methods and functions
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
   28,709 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
  209,171 ( 0.01%)      <T as SpecFromElem>::from_elem(elem, n, Global)
   37,365 ( 0.00%)  }
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[unstable(feature = "allocator_api", issue = "32838")]
        .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
        .               <T as SpecFromElem>::from_elem(elem, n, alloc)
        .           }
        .           
-- line 2367 ----------------------------------------
-- line 2424 ----------------------------------------
        .           // Common trait implementations for Vec
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
        .               type Target = [T];
        .           
        .               fn deref(&self) -> &[T] {
6,036,599 ( 0.37%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
      205 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
        .               fn deref_mut(&mut self) -> &mut [T] {
1,782,712 ( 0.11%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           trait SpecCloneFrom {
        .               fn clone_from(this: &mut Self, other: &Self);
        .           }
        .           
-- line 2447 ----------------------------------------
-- line 2468 ----------------------------------------
        .                   this.extend_from_slice(other);
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
        .               #[cfg(not(test))]
  146,001 ( 0.01%)      fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
        2 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
  182,103 ( 0.01%)      }
        .           
        .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
        .               // required for this method definition, is not available. Instead use the
        .               // `slice::to_vec`  function which is only available with cfg(test)
        .               // NB see the slice::hack module in slice.rs for more information
        .               #[cfg(test)]
        .               fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
        .               type Output = I::Output;
        .           
        .               #[inline]
        .               fn index(&self, index: I) -> &Self::Output {
  282,762 ( 0.02%)          Index::index(&**self, index)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_on_unimplemented(
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {
        .               #[inline]
        .               fn index_mut(&mut self, index: I) -> &mut Self::Output {
      292 ( 0.00%)          IndexMut::index_mut(&mut **self, index)
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> FromIterator<T> for Vec<T> {
        .               #[inline]
        .               fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
1,261,254 ( 0.08%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
        .               type Item = T;
        .               type IntoIter = IntoIter<T, A>;
        .           
-- line 2555 ----------------------------------------
-- line 2564 ----------------------------------------
        .               /// for s in v.into_iter() {
        .               ///     // s has type String, not &String
        .               ///     println!("{}", s);
        .               /// }
        .               /// ```
        .               #[inline]
        .               fn into_iter(self) -> IntoIter<T, A> {
        .                   unsafe {
  586,187 ( 0.04%)              let mut me = ManuallyDrop::new(self);
        .                       let alloc = ptr::read(me.allocator());
        .                       let begin = me.as_mut_ptr();
        .                       let end = if mem::size_of::<T>() == 0 {
        .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
        .                       } else {
        .                           begin.add(me.len()) as *const T
        .                       };
        .                       let cap = me.buf.capacity();
  175,853 ( 0.01%)              IntoIter {
        .                           buf: NonNull::new_unchecked(begin),
        .                           phantom: PhantomData,
        .                           cap,
        .                           alloc,
        .                           ptr: begin,
        .                           end,
        .                       }
        .                   }
-- line 2589 ----------------------------------------
-- line 2591 ----------------------------------------
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a Vec<T, A> {
        .               type Item = &'a T;
        .               type IntoIter = slice::Iter<'a, T>;
        .           
        .               fn into_iter(self) -> slice::Iter<'a, T> {
      630 ( 0.00%)          self.iter()
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
        .               type Item = &'a mut T;
        .               type IntoIter = slice::IterMut<'a, T>;
        .           
        .               fn into_iter(self) -> slice::IterMut<'a, T> {
    1,140 ( 0.00%)          self.iter_mut()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
        .               #[inline]
    1,608 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
  773,293 ( 0.05%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
    1,608 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, item: T) {
       84 ( 0.00%)          self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
        .                   self.reserve(additional);
        .               }
        .           }
        .           
-- line 2631 ----------------------------------------
-- line 2636 ----------------------------------------
        .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
        .                   // This is the case for a general iterator.
        .                   //
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iterator {
        .                   //          self.push(item);
        .                   //      }
   69,223 ( 0.00%)          while let Some(element) = iterator.next() {
   39,953 ( 0.00%)              let len = self.len();
  306,356 ( 0.02%)              if len == self.capacity() {
      632 ( 0.00%)                  let (lower, _) = iterator.size_hint();
        .                           self.reserve(lower.saturating_add(1));
        .                       }
        .                       unsafe {
        .                           ptr::write(self.as_mut_ptr().add(len), element);
        .                           // Since next() executes user code which can panic we have to bump the length
        .                           // after each step.
        .                           // NB can't overflow since we would have had to alloc the address space
  218,336 ( 0.01%)                  self.set_len(len + 1);
        .                       }
        .                   }
    3,787 ( 0.00%)      }
        .           
        .               /// Creates a splicing iterator that replaces the specified range in the vector
        .               /// with the given `replace_with` iterator and yields the removed items.
        .               /// `replace_with` does not need to be the same length as `range`.
        .               ///
        .               /// `range` is removed even if the iterator is not consumed until the end.
        .               ///
        .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2693 ----------------------------------------
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "vec_splice", since = "1.21.0")]
        .               pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter, A>
        .               where
        .                   R: RangeBounds<usize>,
        .                   I: IntoIterator<Item = T>,
        .               {
       44 ( 0.00%)          Splice { drain: self.drain(range), replace_with: replace_with.into_iter() }
        .               }
        .           
        .               /// Creates an iterator which uses a closure to determine if an element should be removed.
        .               ///
        .               /// If the closure returns true, then the element is removed and yielded.
        .               /// If the closure returns false, the element will remain in the vector and will not be yielded
        .               /// by the iterator.
        .               ///
-- line 2709 ----------------------------------------
-- line 2745 ----------------------------------------
        .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
        .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
        .               /// ```
        .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
        .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
    1,846 ( 0.00%)          let old_len = self.len();
        .           
        .                   // Guard against us getting leaked (leak amplification)
        .                   unsafe {
        .                       self.set_len(0);
        .                   }
        .           
    6,488 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
        .               }
        .           }
        .           
        .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
        .           ///
        .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
        .           /// append the entire slice at once.
        .           ///
-- line 2768 ----------------------------------------
-- line 2803 ----------------------------------------
        .               #[inline]
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   Ord::cmp(&**self, &**other)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
  881,539 ( 0.05%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // use drop for [T]
        .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
        .                       // could avoid questions of validity in certain cases
  346,938 ( 0.02%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
        .                   }
        .                   // RawVec handles deallocation
1,043,460 ( 0.06%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
        .           impl<T> const Default for Vec<T> {
        .               /// Creates an empty `Vec<T>`.
        .               fn default() -> Vec<T> {
        .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
        .               /// newly-allocated buffer with exactly the right capacity.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
        .               /// ```
        .               fn from(v: Vec<T, A>) -> Self {
        4 ( 0.00%)          v.into_boxed_slice()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl From<&str> for Vec<u8> {
        .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
        .               ///
-- line 2992 ----------------------------------------

1,722,663 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/freshen.rs
--------------------------------------------------------------------------------
Ir               

-- line 47 ----------------------------------------
      .               const_freshen_count: u32,
      .               ty_freshen_map: FxHashMap<ty::InferTy, Ty<'tcx>>,
      .               const_freshen_map: FxHashMap<ty::InferConst<'tcx>, &'tcx ty::Const<'tcx>>,
      .               keep_static: bool,
      .           }
      .           
      .           impl<'a, 'tcx> TypeFreshener<'a, 'tcx> {
      .               pub fn new(infcx: &'a InferCtxt<'a, 'tcx>, keep_static: bool) -> TypeFreshener<'a, 'tcx> {
392,505 ( 0.02%)          TypeFreshener {
      .                       infcx,
      .                       ty_freshen_count: 0,
      .                       const_freshen_count: 0,
      .                       ty_freshen_map: Default::default(),
      .                       const_freshen_map: Default::default(),
      .                       keep_static,
      .                   }
      .               }
      .           
158,656 ( 0.01%)      fn freshen_ty<F>(
      .                   &mut self,
      .                   opt_ty: Option<Ty<'tcx>>,
      .                   key: ty::InferTy,
      .                   freshener: F,
      .               ) -> Ty<'tcx>
      .               where
      .                   F: FnOnce(u32) -> ty::InferTy,
      .               {
 39,664 ( 0.00%)          if let Some(ty) = opt_ty {
      .                       return ty.fold_with(self);
      .                   }
      .           
 23,304 ( 0.00%)          match self.ty_freshen_map.entry(key) {
    987 ( 0.00%)              Entry::Occupied(entry) => *entry.get(),
      .                       Entry::Vacant(entry) => {
 10,665 ( 0.00%)                  let index = self.ty_freshen_count;
 42,660 ( 0.00%)                  self.ty_freshen_count += 1;
 21,330 ( 0.00%)                  let t = self.infcx.tcx.mk_ty_infer(freshener(index));
      .                           entry.insert(t);
      .                           t
      .                       }
      .                   }
104,868 ( 0.01%)      }
      .           
      .               fn freshen_const<F>(
      .                   &mut self,
      .                   opt_ct: Option<&'tcx ty::Const<'tcx>>,
      .                   key: ty::InferConst<'tcx>,
      .                   freshener: F,
      .                   ty: Ty<'tcx>,
      .               ) -> &'tcx ty::Const<'tcx>
-- line 96 ----------------------------------------
-- line 111 ----------------------------------------
      .                           ct
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {
      .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
134,318 ( 0.01%)          self.infcx.tcx
 27,812 ( 0.00%)      }
      .           
      .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
 88,448 ( 0.01%)          match *r {
      .                       ty::ReLateBound(..) => {
      .                           // leave bound regions alone
      .                           r
      .                       }
      .           
      .                       ty::ReEarlyBound(..)
      .                       | ty::ReFree(_)
      .                       | ty::ReVar(_)
      .                       | ty::RePlaceholder(..)
      .                       | ty::ReEmpty(_)
      .                       | ty::ReErased => {
      .                           // replace all free regions with 'erased
      .                           self.tcx().lifetimes.re_erased
      .                       }
      .                       ty::ReStatic => {
  1,542 ( 0.00%)                  if self.keep_static {
      .                               r
      .                           } else {
      .                               self.tcx().lifetimes.re_erased
      .                           }
      .                       }
      .                   }
    425 ( 0.00%)      }
      .           
490,044 ( 0.03%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
245,022 ( 0.02%)          if !t.needs_infer() && !t.has_erasable_regions() {
      .                       return t;
      .                   }
      .           
      .                   let tcx = self.infcx.tcx;
      .           
280,727 ( 0.02%)          match *t.kind() {
 18,906 ( 0.00%)              ty::Infer(ty::TyVar(v)) => {
151,248 ( 0.01%)                  let opt_ty = self.infcx.inner.borrow_mut().type_variables().probe(v).known();
170,154 ( 0.01%)                  self.freshen_ty(opt_ty, ty::TyVar(v), ty::FreshTy)
      .                       }
      .           
  3,704 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self.freshen_ty(
  7,408 ( 0.00%)                  self.infcx
      .                               .inner
      .                               .borrow_mut()
      .                               .int_unification_table()
      .                               .probe_value(v)
      .                               .map(|v| v.to_type(tcx)),
      .                           ty::IntVar(v),
      .                           ty::FreshIntTy,
      .                       ),
-- line 170 ----------------------------------------
-- line 210 ----------------------------------------
      .                       | ty::Dynamic(..)
      .                       | ty::Never
      .                       | ty::Tuple(..)
      .                       | ty::Projection(..)
      .                       | ty::Foreign(..)
      .                       | ty::Param(..)
      .                       | ty::Closure(..)
      .                       | ty::GeneratorWitness(..)
219,752 ( 0.01%)              | ty::Opaque(..) => t.super_fold_with(self),
      .           
      .                       ty::Placeholder(..) | ty::Bound(..) => bug!("unexpected type {:?}", t),
      .                   }
247,093 ( 0.02%)      }
      .           
  2,832 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
  2,832 ( 0.00%)          match ct.val {
      .                       ty::ConstKind::Infer(ty::InferConst::Var(v)) => {
      .                           let opt_ct = self
      .                               .infcx
      .                               .inner
      .                               .borrow_mut()
      .                               .const_unification_table()
      .                               .probe_value(v)
      .                               .val
-- line 233 ----------------------------------------
-- line 256 ----------------------------------------
      .                       }
      .           
      .                       ty::ConstKind::Param(_)
      .                       | ty::ConstKind::Value(_)
      .                       | ty::ConstKind::Unevaluated(..)
      .                       | ty::ConstKind::Error(_) => {}
      .                   }
      .           
  3,776 ( 0.00%)          ct.super_fold_with(self)
      .               }
      .           }

188,085 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/freshen.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 157 ----------------------------------------
        .               pub fn opt_fn_def_id(self) -> Option<DefId> {
        .                   if let Res::Def(DefKind::Fn, def_id) = self.res { Some(def_id) } else { None }
        .               }
        .           }
        .           
        .           /// The "header" of an impl is everything outside the body: a Self type, a trait
        .           /// ref (in the case of a trait impl), and a set of predicates (from the
        .           /// bounds / where-clauses).
      140 ( 0.00%)  #[derive(Clone, Debug, TypeFoldable)]
        .           pub struct ImplHeader<'tcx> {
        .               pub impl_def_id: DefId,
        .               pub self_ty: Ty<'tcx>,
        .               pub trait_ref: Option<TraitRef<'tcx>>,
        .               pub predicates: Vec<Predicate<'tcx>>,
        .           }
        .           
        .           #[derive(
        .               Copy,
        .               Clone,
   59,425 ( 0.00%)      PartialEq,
        .               Eq,
        .               Hash,
        .               TyEncodable,
   16,030 ( 0.00%)      TyDecodable,
        .               HashStable,
        .               Debug,
        .               TypeFoldable
        .           )]
        .           pub enum ImplPolarity {
        .               /// `impl Trait for Type`
        .               Positive,
        .               /// `impl !Trait for Type`
-- line 188 ----------------------------------------
-- line 210 ----------------------------------------
        .                   match self {
        .                       Self::Positive => f.write_str("positive"),
        .                       Self::Negative => f.write_str("negative"),
        .                       Self::Reservation => f.write_str("reservation"),
        .                   }
        .               }
        .           }
        .           
  145,425 ( 0.01%)  #[derive(Clone, Debug, PartialEq, Eq, Copy, Hash, TyEncodable, TyDecodable, HashStable)]
        .           pub enum Visibility {
        .               /// Visible everywhere (including in other crates).
        .               Public,
        .               /// Visible only in the given crate-local module.
        .               Restricted(DefId),
        .               /// Not visible anywhere in the local crate. This is the visibility of private external items.
        .               Invisible,
        .           }
        .           
   70,103 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable, TyEncodable, TyDecodable)]
        .           pub enum BoundConstness {
        .               /// `T: Trait`
        .               NotConst,
        .               /// `T: ~const Trait`
        .               ///
        .               /// Requires resolving to const only when we are in a const context.
        .               ConstIfConst,
        .           }
        .           
        .           impl BoundConstness {
        .               /// Reduce `self` and `constness` to two possible combined states instead of four.
   20,990 ( 0.00%)      pub fn and(&mut self, constness: hir::Constness) -> hir::Constness {
   31,485 ( 0.00%)          match (constness, self) {
        .                       (hir::Constness::Const, BoundConstness::ConstIfConst) => hir::Constness::Const,
        .                       (_, this) => {
   31,380 ( 0.00%)                  *this = BoundConstness::NotConst;
        .                           hir::Constness::NotConst
        .                       }
        .                   }
   10,495 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Display for BoundConstness {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   match self {
        .                       Self::NotConst => f.write_str("normal"),
        .                       Self::ConstIfConst => f.write_str("`~const`"),
        .                   }
-- line 256 ----------------------------------------
-- line 275 ----------------------------------------
        .               /// Tuple containing the types of closure captures after the feature `capture_disjoint_fields`
        .               pub after_feature_tys: Ty<'tcx>,
        .           }
        .           
        .           pub trait DefIdTree: Copy {
        .               fn parent(self, id: DefId) -> Option<DefId>;
        .           
        .               fn is_descendant_of(self, mut descendant: DefId, ancestor: DefId) -> bool {
       53 ( 0.00%)          if descendant.krate != ancestor.krate {
        .                       return false;
        .                   }
        .           
    5,933 ( 0.00%)          while descendant != ancestor {
    6,623 ( 0.00%)              match self.parent(descendant) {
        .                           Some(parent) => descendant = parent,
        .                           None => return false,
        .                       }
        .                   }
        .                   true
        .               }
        .           }
        .           
        .           impl<'tcx> DefIdTree for TyCtxt<'tcx> {
    8,868 ( 0.00%)      fn parent(self, id: DefId) -> Option<DefId> {
        .                   self.def_key(id).parent.map(|index| DefId { index, ..id })
   13,302 ( 0.00%)      }
        .           }
        .           
        .           impl Visibility {
      136 ( 0.00%)      pub fn from_hir(visibility: &hir::Visibility<'_>, id: hir::HirId, tcx: TyCtxt<'_>) -> Self {
      408 ( 0.00%)          match visibility.node {
        .                       hir::VisibilityKind::Public => Visibility::Public,
        .                       hir::VisibilityKind::Crate(_) => Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)),
        .                       hir::VisibilityKind::Restricted { ref path, .. } => match path.res {
        .                           // If there is no resolution, `resolve` will have already reported an error, so
        .                           // assume that the visibility is public to avoid reporting more privacy errors.
        .                           Res::Err => Visibility::Public,
        .                           def => Visibility::Restricted(def.def_id()),
        .                       },
        .                       hir::VisibilityKind::Inherited => {
      256 ( 0.00%)                  Visibility::Restricted(tcx.parent_module(id).to_def_id())
        .                       }
        .                   }
      136 ( 0.00%)      }
        .           
        .               /// Returns `true` if an item with this visibility is accessible from the given block.
   46,647 ( 0.00%)      pub fn is_accessible_from<T: DefIdTree>(self, module: DefId, tree: T) -> bool {
  207,119 ( 0.01%)          let restriction = match self {
        .                       // Public items are visible everywhere.
        .                       Visibility::Public => return true,
        .                       // Private items from other crates are visible nowhere.
        .                       Visibility::Invisible => return false,
        .                       // Restricted items are visible in an arbitrary local module.
    2,303 ( 0.00%)              Visibility::Restricted(other) if other.krate != module.krate => return false,
        .                       Visibility::Restricted(module) => module,
        .                   };
        .           
        .                   tree.is_descendant_of(module, restriction)
   46,647 ( 0.00%)      }
        .           
        .               /// Returns `true` if this visibility is at least as accessible as the given visibility
    2,259 ( 0.00%)      pub fn is_at_least<T: DefIdTree>(self, vis: Visibility, tree: T) -> bool {
    9,454 ( 0.00%)          let vis_restriction = match vis {
        .                       Visibility::Public => return self == Visibility::Public,
        .                       Visibility::Invisible => return true,
        .                       Visibility::Restricted(module) => module,
        .                   };
        .           
        .                   self.is_accessible_from(vis_restriction, tree)
    2,259 ( 0.00%)      }
        .           
        .               // Returns `true` if this item is visible anywhere in the local crate.
        .               pub fn is_visible_locally(self) -> bool {
        .                   match self {
        .                       Visibility::Public => true,
        .                       Visibility::Restricted(def_id) => def_id.is_local(),
        .                       Visibility::Invisible => false,
        .                   }
        .               }
        .           
        .               pub fn is_public(self) -> bool {
    2,194 ( 0.00%)          matches!(self, Visibility::Public)
    1,097 ( 0.00%)      }
        .           }
        .           
        .           /// The crate variances map is computed during typeck and contains the
        .           /// variance of every item in the local crate. You should not use it
        .           /// directly, because to do so will make your pass dependent on the
        .           /// HIR of every item in the local crate. Instead, use
        .           /// `tcx.variances_of()` to get the variance for a *particular*
        .           /// item.
-- line 365 ----------------------------------------
-- line 434 ----------------------------------------
        .           }
        .           
        .           // `TyS` is used a lot. Make sure it doesn't unintentionally get bigger.
        .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
        .           static_assert_size!(TyS<'_>, 40);
        .           
        .           impl<'tcx> Ord for TyS<'tcx> {
        .               fn cmp(&self, other: &TyS<'tcx>) -> Ordering {
        3 ( 0.00%)          self.kind().cmp(other.kind())
        .               }
        .           }
        .           
        .           impl<'tcx> PartialOrd for TyS<'tcx> {
        .               fn partial_cmp(&self, other: &TyS<'tcx>) -> Option<Ordering> {
        .                   Some(self.kind().cmp(other.kind()))
        .               }
        .           }
-- line 450 ----------------------------------------
-- line 509 ----------------------------------------
        .           #[derive(Clone, Copy, Lift)]
        .           pub struct Predicate<'tcx> {
        .               inner: &'tcx PredicateInner<'tcx>,
        .           }
        .           
        .           impl<'tcx> PartialEq for Predicate<'tcx> {
        .               fn eq(&self, other: &Self) -> bool {
        .                   // `self.kind` is always interned.
   59,052 ( 0.00%)          ptr::eq(self.inner, other.inner)
   57,888 ( 0.00%)      }
        .           }
        .           
        .           impl Hash for Predicate<'_> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   (self.inner as *const PredicateInner<'_>).hash(s)
        .               }
        .           }
        .           
        .           impl<'tcx> Eq for Predicate<'tcx> {}
        .           
        .           impl<'tcx> Predicate<'tcx> {
        .               /// Gets the inner `Binder<'tcx, PredicateKind<'tcx>>`.
        .               #[inline]
        .               pub fn kind(self) -> Binder<'tcx, PredicateKind<'tcx>> {
  585,032 ( 0.04%)          self.inner.kind
        .               }
        .           
        .               /// Flips the polarity of a Predicate.
        .               ///
        .               /// Given `T: Trait` predicate it returns `T: !Trait` and given `T: !Trait` returns `T: Trait`.
        .               pub fn flip_polarity(&self, tcx: TyCtxt<'tcx>) -> Option<Predicate<'tcx>> {
        .                   let kind = self
        .                       .inner
-- line 541 ----------------------------------------
-- line 567 ----------------------------------------
        .                       flags: _,
        .                       outer_exclusive_binder: _,
        .                   } = self.inner;
        .           
        .                   kind.hash_stable(hcx, hasher);
        .               }
        .           }
        .           
2,700,651 ( 0.17%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
1,662,273 ( 0.10%)  #[derive(HashStable, TypeFoldable)]
        .           pub enum PredicateKind<'tcx> {
        .               /// Corresponds to `where Foo: Bar<A, B, C>`. `Foo` here would be
        .               /// the `Self` type of the trait reference and `A`, `B`, and `C`
        .               /// would be the type parameters.
        .               Trait(TraitPredicate<'tcx>),
        .           
        .               /// `where 'a: 'b`
        .               RegionOutlives(RegionOutlivesPredicate<'tcx>),
-- line 584 ----------------------------------------
-- line 594 ----------------------------------------
        .               WellFormed(GenericArg<'tcx>),
        .           
        .               /// Trait must be object-safe.
        .               ObjectSafe(DefId),
        .           
        .               /// No direct syntax. May be thought of as `where T: FnFoo<...>`
        .               /// for some substitutions `...` and `T` being a closure type.
        .               /// Satisfied (or refuted) once we know the closure's kind.
    3,086 ( 0.00%)      ClosureKind(DefId, SubstsRef<'tcx>, ClosureKind),
        .           
        .               /// `T1 <: T2`
        .               ///
        .               /// This obligation is created most often when we have two
        .               /// unresolved type variables and hence don't have enough
        .               /// information to process the subtyping obligation yet.
    1,444 ( 0.00%)      Subtype(SubtypePredicate<'tcx>),
        .           
        .               /// `T1` coerced to `T2`
        .               ///
        .               /// Like a subtyping obligation, this is created most often
        .               /// when we have two unresolved type variables and hence
        .               /// don't have enough information to process the coercion
        .               /// obligation yet. At the moment, we actually process coercions
        .               /// very much like subtyping and don't handle the full coercion
-- line 617 ----------------------------------------
-- line 645 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> Predicate<'tcx> {
        .               /// Performs a substitution suitable for going from a
        .               /// poly-trait-ref to supertraits that must hold if that
        .               /// poly-trait-ref holds. This is slightly different from a normal
        .               /// substitution in terms of what happens with bound regions. See
        .               /// lengthy comment below for details.
    6,687 ( 0.00%)      pub fn subst_supertrait(
        .                   self,
        .                   tcx: TyCtxt<'tcx>,
        .                   trait_ref: &ty::PolyTraitRef<'tcx>,
        .               ) -> Predicate<'tcx> {
        .                   // The interaction between HRTB and supertraits is not entirely
        .                   // obvious. Let me walk you (and myself) through an example.
        .                   //
        .                   // Let's start with an easy case. Consider two traits:
-- line 661 ----------------------------------------
-- line 731 ----------------------------------------
        .                   //    ['x, 'b]
        .                   let bound_pred = self.kind();
        .                   let pred_bound_vars = bound_pred.bound_vars();
        .                   let trait_bound_vars = trait_ref.bound_vars();
        .                   // 1) Self: Bar1<'a, '^0.0> -> Self: Bar1<'a, '^0.1>
        .                   let shifted_pred =
        .                       tcx.shift_bound_var_indices(trait_bound_vars.len(), bound_pred.skip_binder());
        .                   // 2) Self: Bar1<'a, '^0.1> -> T: Bar1<'^0.0, '^0.1>
      743 ( 0.00%)          let new = shifted_pred.subst(tcx, trait_ref.skip_binder().substs);
        .                   // 3) ['x] + ['b] -> ['x, 'b]
        .                   let bound_vars =
        .                       tcx.mk_bound_variable_kinds(trait_bound_vars.iter().chain(pred_bound_vars));
    6,687 ( 0.00%)          tcx.reuse_or_mk_predicate(self, ty::Binder::bind_with_vars(new, bound_vars))
    5,201 ( 0.00%)      }
        .           }
        .           
    2,225 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
  100,700 ( 0.01%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct TraitPredicate<'tcx> {
        .               pub trait_ref: TraitRef<'tcx>,
        .           
  213,616 ( 0.01%)      pub constness: BoundConstness,
        .           
  220,778 ( 0.01%)      pub polarity: ImplPolarity,
        .           }
        .           
        .           pub type PolyTraitPredicate<'tcx> = ty::Binder<'tcx, TraitPredicate<'tcx>>;
        .           
        .           impl<'tcx> TraitPredicate<'tcx> {
  167,728 ( 0.01%)      pub fn remap_constness(&mut self, tcx: TyCtxt<'tcx>, param_env: &mut ParamEnv<'tcx>) {
  146,922 ( 0.01%)          if unlikely!(Some(self.trait_ref.def_id) == tcx.lang_items().drop_trait()) {
        .                       // remap without changing constness of this predicate.
        .                       // this is because `T: ~const Drop` has a different meaning to `T: Drop`
      160 ( 0.00%)              param_env.remap_constness_with(self.constness)
        .                   } else {
   20,886 ( 0.00%)              *param_env = param_env.with_constness(self.constness.and(param_env.constness()))
        .                   }
  125,796 ( 0.01%)      }
        .           
        .               /// Remap the constness of this predicate before emitting it for diagnostics.
        .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
        .                   // this is different to `remap_constness` that callees want to print this predicate
        .                   // in case of selection errors. `T: ~const Drop` bounds cannot end up here when the
        .                   // param_env is not const because we it is always satisfied in non-const contexts.
        .                   if let hir::Constness::NotConst = param_env.constness() {
        .                       self.constness = ty::BoundConstness::NotConst;
        .                   }
        .               }
        .           
        .               pub fn def_id(self) -> DefId {
   54,216 ( 0.00%)          self.trait_ref.def_id
   27,108 ( 0.00%)      }
        .           
   30,909 ( 0.00%)      pub fn self_ty(self) -> Ty<'tcx> {
   92,727 ( 0.01%)          self.trait_ref.self_ty()
   61,818 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> PolyTraitPredicate<'tcx> {
        .               pub fn def_id(self) -> DefId {
        .                   // Ok to skip binder since trait `DefId` does not care about regions.
        .                   self.skip_binder().def_id()
   18,747 ( 0.00%)      }
        .           
        9 ( 0.00%)      pub fn self_ty(self) -> ty::Binder<'tcx, Ty<'tcx>> {
       36 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.self_ty())
       18 ( 0.00%)      }
        .           
        .               /// Remap the constness of this predicate before emitting it for diagnostics.
        .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
        .                   *self = self.map_bound(|mut p| {
        .                       p.remap_constness_diag(param_env);
        .                       p
        .                   });
        .               }
        .           }
        .           
       24 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
   34,264 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
   36,901 ( 0.00%)  pub struct OutlivesPredicate<A, B>(pub A, pub B); // `A: B`
        .           pub type RegionOutlivesPredicate<'tcx> = OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>;
        .           pub type TypeOutlivesPredicate<'tcx> = OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>;
        .           pub type PolyRegionOutlivesPredicate<'tcx> = ty::Binder<'tcx, RegionOutlivesPredicate<'tcx>>;
        .           pub type PolyTypeOutlivesPredicate<'tcx> = ty::Binder<'tcx, TypeOutlivesPredicate<'tcx>>;
        .           
        .           /// Encodes that `a` must be a subtype of `b`. The `a_is_expected` flag indicates
        .           /// whether the `a` type is the type that we should label as "expected" when
        .           /// presenting user diagnostics.
        .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
    2,020 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct SubtypePredicate<'tcx> {
    3,052 ( 0.00%)      pub a_is_expected: bool,
        .               pub a: Ty<'tcx>,
        .               pub b: Ty<'tcx>,
        .           }
        .           pub type PolySubtypePredicate<'tcx> = ty::Binder<'tcx, SubtypePredicate<'tcx>>;
        .           
        .           /// Encodes that we have to coerce *from* the `a` type to the `b` type.
        .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
       70 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct CoercePredicate<'tcx> {
        .               pub a: Ty<'tcx>,
        .               pub b: Ty<'tcx>,
        .           }
        .           pub type PolyCoercePredicate<'tcx> = ty::Binder<'tcx, CoercePredicate<'tcx>>;
        .           
   20,332 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, TyEncodable, TyDecodable)]
   18,113 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub enum Term<'tcx> {
    1,080 ( 0.00%)      Ty(Ty<'tcx>),
        .               Const(&'tcx Const<'tcx>),
        .           }
        .           
        .           impl<'tcx> From<Ty<'tcx>> for Term<'tcx> {
        .               fn from(ty: Ty<'tcx>) -> Self {
        .                   Term::Ty(ty)
    2,298 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> From<&'tcx Const<'tcx>> for Term<'tcx> {
        .               fn from(c: &'tcx Const<'tcx>) -> Self {
        .                   Term::Const(c)
        .               }
        .           }
        .           
        .           impl<'tcx> Term<'tcx> {
        .               pub fn ty(&self) -> Option<Ty<'tcx>> {
    2,322 ( 0.00%)          if let Term::Ty(ty) = self { Some(ty) } else { None }
    1,161 ( 0.00%)      }
        .           }
        .           
        .           /// This kind of predicate has no *direct* correspondent in the
        .           /// syntax, but it roughly corresponds to the syntactic forms:
        .           ///
        .           /// 1. `T: TraitRef<..., Item = Type>`
        .           /// 2. `<T as TraitRef<...>>::Item == Type` (NYI)
        .           ///
        .           /// In particular, form #1 is "desugared" to the combination of a
        .           /// normal trait predicate (`T: TraitRef<...>`) and one of these
        .           /// predicates. Form #2 is a broader form in that it also permits
        .           /// equality between arbitrary types. Processing an instance of
        .           /// Form #2 eventually yields one of these `ProjectionPredicate`
        .           /// instances to normalize the LHS.
       42 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
    3,539 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct ProjectionPredicate<'tcx> {
        .               pub projection_ty: ProjectionTy<'tcx>,
    5,877 ( 0.00%)      pub term: Term<'tcx>,
        .           }
        .           
        .           pub type PolyProjectionPredicate<'tcx> = Binder<'tcx, ProjectionPredicate<'tcx>>;
        .           
        .           impl<'tcx> PolyProjectionPredicate<'tcx> {
        .               /// Returns the `DefId` of the trait of the associated item being projected.
        .               #[inline]
        .               pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
      120 ( 0.00%)          self.skip_binder().projection_ty.trait_def_id(tcx)
        .               }
        .           
        .               /// Get the [PolyTraitRef] required for this projection to be well formed.
        .               /// Note that for generic associated types the predicates of the associated
        .               /// type also need to be checked.
        .               #[inline]
        .               pub fn required_poly_trait_ref(&self, tcx: TyCtxt<'tcx>) -> PolyTraitRef<'tcx> {
        .                   // Note: unlike with `TraitRef::to_poly_trait_ref()`,
        .                   // `self.0.trait_ref` is permitted to have escaping regions.
        .                   // This is because here `self` has a `Binder` and so does our
        .                   // return value, so we are preserving the number of binding
        .                   // levels.
       70 ( 0.00%)          self.map_bound(|predicate| predicate.projection_ty.trait_ref(tcx))
        .               }
        .           
        .               pub fn term(&self) -> Binder<'tcx, Term<'tcx>> {
        .                   self.map_bound(|predicate| predicate.term)
        .               }
        .           
        .               /// The `DefId` of the `TraitItem` for the associated type.
        .               ///
        .               /// Note that this is not the `DefId` of the `TraitRef` containing this
        .               /// associated type, which is in `tcx.associated_item(projection_def_id()).container`.
        .               pub fn projection_def_id(&self) -> DefId {
        .                   // Ok to skip binder since trait `DefId` does not care about regions.
      220 ( 0.00%)          self.skip_binder().projection_ty.item_def_id
      110 ( 0.00%)      }
        .           }
        .           
        .           pub trait ToPolyTraitRef<'tcx> {
        .               fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx>;
        .           }
        .           
        .           impl<'tcx> ToPolyTraitRef<'tcx> for PolyTraitPredicate<'tcx> {
    1,893 ( 0.00%)      fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx> {
    1,893 ( 0.00%)          self.map_bound_ref(|trait_pred| trait_pred.trait_ref)
    1,893 ( 0.00%)      }
        .           }
        .           
        .           pub trait ToPredicate<'tcx> {
        .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx>;
        .           }
        .           
        .           impl<'tcx> ToPredicate<'tcx> for Binder<'tcx, PredicateKind<'tcx>> {
        .               #[inline(always)]
        .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
        .                   tcx.mk_predicate(self)
        .               }
        .           }
        .           
        .           impl<'tcx> ToPredicate<'tcx> for PolyTraitPredicate<'tcx> {
   11,774 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
   58,870 ( 0.00%)          self.map_bound(PredicateKind::Trait).to_predicate(tcx)
   23,548 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> ToPredicate<'tcx> for PolyRegionOutlivesPredicate<'tcx> {
        .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
        .                   self.map_bound(PredicateKind::RegionOutlives).to_predicate(tcx)
        .               }
        .           }
        .           
        .           impl<'tcx> ToPredicate<'tcx> for PolyTypeOutlivesPredicate<'tcx> {
       44 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
       88 ( 0.00%)          self.map_bound(PredicateKind::TypeOutlives).to_predicate(tcx)
       88 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {
      435 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
    2,175 ( 0.00%)          self.map_bound(PredicateKind::Projection).to_predicate(tcx)
      870 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Predicate<'tcx> {
    7,230 ( 0.00%)      pub fn to_opt_poly_trait_pred(self) -> Option<PolyTraitPredicate<'tcx>> {
        .                   let predicate = self.kind();
   21,690 ( 0.00%)          match predicate.skip_binder() {
   16,715 ( 0.00%)              PredicateKind::Trait(t) => Some(predicate.rebind(t)),
        .                       PredicateKind::Projection(..)
        .                       | PredicateKind::Subtype(..)
        .                       | PredicateKind::Coerce(..)
        .                       | PredicateKind::RegionOutlives(..)
        .                       | PredicateKind::WellFormed(..)
        .                       | PredicateKind::ObjectSafe(..)
        .                       | PredicateKind::ClosureKind(..)
        .                       | PredicateKind::TypeOutlives(..)
        .                       | PredicateKind::ConstEvaluatable(..)
        .                       | PredicateKind::ConstEquate(..)
      272 ( 0.00%)              | PredicateKind::TypeWellFormedFromEnv(..) => None,
        .                   }
    7,230 ( 0.00%)      }
        .           
      591 ( 0.00%)      pub fn to_opt_type_outlives(self) -> Option<PolyTypeOutlivesPredicate<'tcx>> {
        .                   let predicate = self.kind();
    1,182 ( 0.00%)          match predicate.skip_binder() {
        .                       PredicateKind::TypeOutlives(data) => Some(predicate.rebind(data)),
        .                       PredicateKind::Trait(..)
        .                       | PredicateKind::Projection(..)
        .                       | PredicateKind::Subtype(..)
        .                       | PredicateKind::Coerce(..)
        .                       | PredicateKind::RegionOutlives(..)
        .                       | PredicateKind::WellFormed(..)
        .                       | PredicateKind::ObjectSafe(..)
        .                       | PredicateKind::ClosureKind(..)
        .                       | PredicateKind::ConstEvaluatable(..)
        .                       | PredicateKind::ConstEquate(..)
      591 ( 0.00%)              | PredicateKind::TypeWellFormedFromEnv(..) => None,
        .                   }
      591 ( 0.00%)      }
        .           }
        .           
        .           /// Represents the bounds declared on a particular set of type
        .           /// parameters. Should eventually be generalized into a flag list of
        .           /// where-clauses. You can obtain an `InstantiatedPredicates` list from a
        .           /// `GenericPredicates` by using the `instantiate` method. Note that this method
        .           /// reflects an important semantic invariant of `InstantiatedPredicates`: while
        .           /// the `GenericPredicates` are expressed in terms of the bound type
-- line 1005 ----------------------------------------
-- line 1011 ----------------------------------------
        .           /// Example:
        .           ///
        .           ///     struct Foo<T, U: Bar<T>> { ... }
        .           ///
        .           /// Here, the `GenericPredicates` for `Foo` would contain a list of bounds like
        .           /// `[[], [U:Bar<T>]]`. Now if there were some particular reference
        .           /// like `Foo<isize,usize>`, then the `InstantiatedPredicates` would be `[[],
        .           /// [usize:Bar<isize>]]`.
   81,626 ( 0.01%)  #[derive(Clone, Debug, TypeFoldable)]
        .           pub struct InstantiatedPredicates<'tcx> {
        .               pub predicates: Vec<Predicate<'tcx>>,
        .               pub spans: Vec<Span>,
        .           }
        .           
        .           impl<'tcx> InstantiatedPredicates<'tcx> {
      263 ( 0.00%)      pub fn empty() -> InstantiatedPredicates<'tcx> {
   34,148 ( 0.00%)          InstantiatedPredicates { predicates: vec![], spans: vec![] }
      263 ( 0.00%)      }
        .           
        .               pub fn is_empty(&self) -> bool {
        .                   self.predicates.is_empty()
        8 ( 0.00%)      }
        .           }
        .           
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable, TyEncodable, TyDecodable, TypeFoldable)]
        .           pub struct OpaqueTypeKey<'tcx> {
        .               pub def_id: DefId,
        .               pub substs: SubstsRef<'tcx>,
        .           }
        .           
-- line 1040 ----------------------------------------
-- line 1091 ----------------------------------------
        .               /// ```
        .               /// for<'a> fn(&'a u32)
        .               /// ```
        .               ///
        .               /// Once we "enter" into this `for<'a>` quantifier, we are in a
        .               /// new universe that extends `U` -- in this new universe, we can
        .               /// name the region `'a`, but that region was not nameable from
        .               /// `U` because it was not in scope there.
   13,610 ( 0.00%)      pub fn next_universe(self) -> UniverseIndex {
        .                   UniverseIndex::from_u32(self.private.checked_add(1).unwrap())
   40,830 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` can name a name from `other` -- in other words,
        .               /// if the set of names in `self` is a superset of those in
        .               /// `other` (`self >= other`).
        .               pub fn can_name(self, other: UniverseIndex) -> bool {
   64,708 ( 0.00%)          self.private >= other.private
   32,354 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` cannot name some names from `other` -- in other
        .               /// words, if the set of names in `self` is a strict subset of
        .               /// those in `other` (`self < other`).
        .               pub fn cannot_name(self, other: UniverseIndex) -> bool {
      822 ( 0.00%)          self.private < other.private
      411 ( 0.00%)      }
        .           }
        .           
        .           /// The "placeholder index" fully defines a placeholder region, type, or const. Placeholders are
        .           /// identified by both a universe, as well as a name residing within that universe. Distinct bound
        .           /// regions/types/consts within the same universe simply have an unknown relationship to one
        .           /// another.
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, PartialOrd, Ord)]
        .           pub struct Placeholder<T> {
   26,859 ( 0.00%)      pub universe: UniverseIndex,
    7,620 ( 0.00%)      pub name: T,
        .           }
        .           
        .           impl<'a, T> HashStable<StableHashingContext<'a>> for Placeholder<T>
        .           where
        .               T: HashStable<StableHashingContext<'a>>,
        .           {
        .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
        .                   self.universe.hash_stable(hcx, hasher);
-- line 1133 ----------------------------------------
-- line 1194 ----------------------------------------
        .           /// aren't allowed to call that query: it is equal to `type_of(const_param)` which is
        .           /// trivial to compute.
        .           ///
        .           /// If we now want to use that constant in a place which potentionally needs its type
        .           /// we also pass the type of its `const_param`. This is the point of `WithOptConstParam`,
        .           /// except that instead of a `Ty` we bundle the `DefId` of the const parameter.
        .           /// Meaning that we need to use `type_of(const_param_did)` if `const_param_did` is `Some`
        .           /// to get the type of `did`.
      915 ( 0.00%)  #[derive(Copy, Clone, Debug, TypeFoldable, Lift, TyEncodable, TyDecodable)]
        .           #[derive(PartialEq, Eq, PartialOrd, Ord)]
        .           #[derive(Hash, HashStable)]
        .           pub struct WithOptConstParam<T> {
    2,911 ( 0.00%)      pub did: T,
        .               /// The `DefId` of the corresponding generic parameter in case `did` is
        .               /// a const argument.
        .               ///
        .               /// Note that even if `did` is a const argument, this may still be `None`.
        .               /// All queries taking `WithOptConstParam` start by calling `tcx.opt_const_param_of(def.did)`
        .               /// to potentially update `param_did` in the case it is `None`.
    5,323 ( 0.00%)      pub const_param_did: Option<DefId>,
        .           }
        .           
        .           impl<T> WithOptConstParam<T> {
        .               /// Creates a new `WithOptConstParam` setting `const_param_did` to `None`.
        .               #[inline(always)]
        .               pub fn unknown(did: T) -> WithOptConstParam<T> {
        .                   WithOptConstParam { did, const_param_did: None }
    5,337 ( 0.00%)      }
        .           }
        .           
        .           impl WithOptConstParam<LocalDefId> {
        .               /// Returns `Some((did, param_did))` if `def_id` is a const argument,
        .               /// `None` otherwise.
        .               #[inline(always)]
        .               pub fn try_lookup(did: LocalDefId, tcx: TyCtxt<'_>) -> Option<(LocalDefId, DefId)> {
        .                   tcx.opt_const_param_of(did).map(|param_did| (did, param_did))
        .               }
        .           
        .               /// In case `self` is unknown but `self.did` is a const argument, this returns
        .               /// a `WithOptConstParam` with the correct `const_param_did`.
        .               #[inline(always)]
        .               pub fn try_upgrade(self, tcx: TyCtxt<'_>) -> Option<WithOptConstParam<LocalDefId>> {
      849 ( 0.00%)          if self.const_param_did.is_none() {
    1,409 ( 0.00%)              if let const_param_did @ Some(_) = tcx.opt_const_param_of(self.did) {
        .                           return Some(WithOptConstParam { did: self.did, const_param_did });
        .                       }
        .                   }
        .           
        .                   None
        .               }
        .           
        .               pub fn to_global(self) -> WithOptConstParam<DefId> {
        .                   WithOptConstParam { did: self.did.to_def_id(), const_param_did: self.const_param_did }
        .               }
        .           
       36 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
       36 ( 0.00%)          if let Some(did) = self.const_param_did { did } else { self.did.to_def_id() }
        9 ( 0.00%)      }
        .           }
        .           
        .           impl WithOptConstParam<DefId> {
      637 ( 0.00%)      pub fn as_local(self) -> Option<WithOptConstParam<LocalDefId>> {
        .                   self.did
        .                       .as_local()
        .                       .map(|did| WithOptConstParam { did, const_param_did: self.const_param_did })
      637 ( 0.00%)      }
        .           
        .               pub fn as_const_arg(self) -> Option<(LocalDefId, DefId)> {
    1,197 ( 0.00%)          if let Some(param_did) = self.const_param_did {
      490 ( 0.00%)              if let Some(did) = self.did.as_local() {
        .                           return Some((did, param_did));
        .                       }
        .                   }
        .           
        .                   None
      624 ( 0.00%)      }
        .           
        .               pub fn is_local(self) -> bool {
        .                   self.did.is_local()
        .               }
        .           
      190 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
        .                   self.const_param_did.unwrap_or(self.did)
      190 ( 0.00%)      }
        .           }
        .           
        .           /// When type checking, we use the `ParamEnv` to track
        .           /// details about the set of where-clauses that are in scope at this
        .           /// particular point.
        .           #[derive(Copy, Clone, Hash, PartialEq, Eq)]
        .           pub struct ParamEnv<'tcx> {
        .               /// This packs both caller bounds and the reveal enum into one pointer.
-- line 1285 ----------------------------------------
-- line 1302 ----------------------------------------
        .               reveal: traits::Reveal,
        .               constness: hir::Constness,
        .           }
        .           
        .           unsafe impl rustc_data_structures::tagged_ptr::Tag for ParamTag {
        .               const BITS: usize = 2;
        .               #[inline]
        .               fn into_usize(self) -> usize {
   49,683 ( 0.00%)          match self {
        .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst } => 0,
        .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst } => 1,
        .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const } => 2,
        .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::Const } => 3,
        .                   }
        .               }
        .               #[inline]
        .               unsafe fn from_usize(ptr: usize) -> Self {
  382,705 ( 0.02%)          match ptr {
        .                       0 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst },
        .                       1 => Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst },
        .                       2 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const },
        .                       3 => Self { reveal: traits::Reveal::All, constness: hir::Constness::Const },
        .                       _ => std::hint::unreachable_unchecked(),
        .                   }
        .               }
        .           }
-- line 1327 ----------------------------------------
-- line 1405 ----------------------------------------
        .               pub fn new(
        .                   caller_bounds: &'tcx List<Predicate<'tcx>>,
        .                   reveal: Reveal,
        .                   constness: hir::Constness,
        .               ) -> Self {
        .                   ty::ParamEnv { packed: CopyTaggedPtr::new(caller_bounds, ParamTag { reveal, constness }) }
        .               }
        .           
       23 ( 0.00%)      pub fn with_user_facing(mut self) -> Self {
        .                   self.packed.set_tag(ParamTag { reveal: Reveal::UserFacing, ..self.packed.tag() });
        .                   self
       23 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn with_constness(mut self, constness: hir::Constness) -> Self {
        .                   self.packed.set_tag(ParamTag { constness, ..self.packed.tag() });
        .                   self
        .               }
        .           
        .               #[inline]
-- line 1424 ----------------------------------------
-- line 1430 ----------------------------------------
        .               #[inline]
        .               pub fn without_const(mut self) -> Self {
        .                   self.packed.set_tag(ParamTag { constness: hir::Constness::NotConst, ..self.packed.tag() });
        .                   self
        .               }
        .           
        .               #[inline]
        .               pub fn remap_constness_with(&mut self, mut constness: ty::BoundConstness) {
   11,876 ( 0.00%)          *self = self.with_constness(constness.and(self.constness()))
        .               }
        .           
        .               /// Returns a new parameter environment with the same clauses, but
        .               /// which "reveals" the true results of projections in all cases
        .               /// (even for associated types that are specializable). This is
        .               /// the desired behavior during codegen and certain other special
        .               /// contexts; normally though we want to use `Reveal::UserFacing`,
        .               /// which is the default.
        .               /// All opaque types in the caller_bounds of the `ParamEnv`
        .               /// will be normalized to their underlying types.
        .               /// See PR #65989 and issue #65918 for more details
   38,312 ( 0.00%)      pub fn with_reveal_all_normalized(self, tcx: TyCtxt<'tcx>) -> Self {
        .                   if self.packed.tag().reveal == traits::Reveal::All {
        .                       return self;
        .                   }
        .           
        .                   ParamEnv::new(
        .                       tcx.normalize_opaque_types(self.caller_bounds()),
        .                       Reveal::All,
        .                       self.constness(),
        .                   )
   43,101 ( 0.00%)      }
        .           
        .               /// Returns this same environment but with no caller bounds.
        .               #[inline]
        .               pub fn without_caller_bounds(self) -> Self {
        .                   Self::new(List::empty(), self.reveal(), self.constness())
        .               }
        .           
        .               /// Creates a suitable environment in which to perform trait
-- line 1468 ----------------------------------------
-- line 1472 ----------------------------------------
        .               /// pair it with the empty environment. This improves caching and is generally
        .               /// invisible.
        .               ///
        .               /// N.B., we preserve the environment when type-checking because it
        .               /// is possible for the user to have wacky where-clauses like
        .               /// `where Box<u32>: Copy`, which are clearly never
        .               /// satisfiable. We generally want to behave as if they were true,
        .               /// although the surrounding function is never reachable.
   31,451 ( 0.00%)      pub fn and<T: TypeFoldable<'tcx>>(self, value: T) -> ParamEnvAnd<'tcx, T> {
        .                   match self.reveal() {
        .                       Reveal::UserFacing => ParamEnvAnd { param_env: self, value },
        .           
        .                       Reveal::All => {
    4,877 ( 0.00%)                  if value.is_global() {
        .                               ParamEnvAnd { param_env: self.without_caller_bounds(), value }
        .                           } else {
        .                               ParamEnvAnd { param_env: self, value }
        .                           }
        .                       }
        .                   }
   30,261 ( 0.00%)      }
        .           }
        .           
        .           // FIXME(ecstaticmorse): Audit all occurrences of `without_const().to_predicate(tcx)` to ensure that
        .           // the constness of trait bounds is being propagated correctly.
        .           impl<'tcx> PolyTraitRef<'tcx> {
        .               #[inline]
        .               pub fn with_constness(self, constness: BoundConstness) -> PolyTraitPredicate<'tcx> {
      670 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
        .                       trait_ref,
        .                       constness,
        .                       polarity: ty::ImplPolarity::Positive,
        .                   })
        .               }
        .               #[inline]
        .               pub fn without_const(self) -> PolyTraitPredicate<'tcx> {
        .                   self.with_constness(BoundConstness::NotConst)
        .               }
        .           }
        .           
    1,162 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TypeFoldable)]
        .           pub struct ParamEnvAnd<'tcx, T> {
   16,745 ( 0.00%)      pub param_env: ParamEnv<'tcx>,
  295,552 ( 0.02%)      pub value: T,
        .           }
        .           
        .           impl<'tcx, T> ParamEnvAnd<'tcx, T> {
        .               pub fn into_parts(self) -> (ParamEnv<'tcx>, T) {
        .                   (self.param_env, self.value)
        .               }
        .           
        .               #[inline]
        .               pub fn without_const(mut self) -> Self {
        .                   self.param_env = self.param_env.without_const();
    3,813 ( 0.00%)          self
        .               }
        .           }
        .           
        .           impl<'a, 'tcx, T> HashStable<StableHashingContext<'a>> for ParamEnvAnd<'tcx, T>
        .           where
        .               T: HashStable<StableHashingContext<'a>>,
        .           {
        .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
-- line 1534 ----------------------------------------
-- line 1542 ----------------------------------------
        .           #[derive(Copy, Clone, Debug, HashStable)]
        .           pub struct Destructor {
        .               /// The `DefId` of the destructor method
        .               pub did: DefId,
        .               /// The constness of the destructor method
        .               pub constness: hir::Constness,
        .           }
        .           
    1,587 ( 0.00%)  bitflags! {
    2,223 ( 0.00%)      #[derive(HashStable, TyEncodable, TyDecodable)]
        .               pub struct VariantFlags: u32 {
        .                   const NO_VARIANT_FLAGS        = 0;
        .                   /// Indicates whether the field list of this variant is `#[non_exhaustive]`.
        .                   const IS_FIELD_LIST_NON_EXHAUSTIVE = 1 << 0;
        .                   /// Indicates whether this variant was obtained as part of recovering from
        .                   /// a syntactic error. May be incomplete or bogus.
        .                   const IS_RECOVERED = 1 << 1;
        .               }
        .           }
        .           
        .           /// Definition of a variant -- a struct's fields or an enum variant.
  147,165 ( 0.01%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
        .           pub struct VariantDef {
        .               /// `DefId` that identifies the variant itself.
        .               /// If this variant belongs to a struct or union, then this is a copy of its `DefId`.
        .               pub def_id: DefId,
        .               /// `DefId` that identifies the variant's constructor.
        .               /// If this variant is a struct variant, then this is `None`.
        .               pub ctor_def_id: Option<DefId>,
        .               /// Variant or struct name.
-- line 1571 ----------------------------------------
-- line 1592 ----------------------------------------
        .               /// `parent_did` is the `DefId` of the `AdtDef` representing the enum or struct that
        .               /// owns this variant. It is used for checking if a struct has `#[non_exhaustive]` w/out having
        .               /// to go through the redirect of checking the ctor's attributes - but compiling a small crate
        .               /// requires loading the `AdtDef`s for all the structs in the universe (e.g., coherence for any
        .               /// built-in trait), and we do not want to load attributes twice.
        .               ///
        .               /// If someone speeds up attribute loading to not be a performance concern, they can
        .               /// remove this hack and use the constructor `DefId` everywhere.
    1,616 ( 0.00%)      pub fn new(
        .                   name: Symbol,
        .                   variant_did: Option<DefId>,
        .                   ctor_def_id: Option<DefId>,
        .                   discr: VariantDiscr,
        .                   fields: Vec<FieldDef>,
        .                   ctor_kind: CtorKind,
        .                   adt_kind: AdtKind,
        .                   parent_did: DefId,
-- line 1608 ----------------------------------------
-- line 1611 ----------------------------------------
        .               ) -> Self {
        .                   debug!(
        .                       "VariantDef::new(name = {:?}, variant_did = {:?}, ctor_def_id = {:?}, discr = {:?},
        .                        fields = {:?}, ctor_kind = {:?}, adt_kind = {:?}, parent_did = {:?})",
        .                       name, variant_did, ctor_def_id, discr, fields, ctor_kind, adt_kind, parent_did,
        .                   );
        .           
        .                   let mut flags = VariantFlags::NO_VARIANT_FLAGS;
      202 ( 0.00%)          if is_field_list_non_exhaustive {
        .                       flags |= VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE;
        .                   }
        .           
      606 ( 0.00%)          if recovered {
        .                       flags |= VariantFlags::IS_RECOVERED;
        .                   }
        .           
    1,818 ( 0.00%)          VariantDef {
        .                       def_id: variant_did.unwrap_or(parent_did),
        .                       ctor_def_id,
        .                       name,
        .                       discr,
      808 ( 0.00%)              fields,
        .                       ctor_kind,
        .                       flags,
        .                   }
      808 ( 0.00%)      }
        .           
        .               /// Is this field list non-exhaustive?
        .               #[inline]
        .               pub fn is_field_list_non_exhaustive(&self) -> bool {
        .                   self.flags.intersects(VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE)
        .               }
        .           
        .               /// Was this variant obtained as part of recovering from a syntactic error?
        .               #[inline]
        .               pub fn is_recovered(&self) -> bool {
        .                   self.flags.intersects(VariantFlags::IS_RECOVERED)
        .               }
        .           
        .               /// Computes the `Ident` of this variant by looking up the `Span`
    6,475 ( 0.00%)      pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
    3,700 ( 0.00%)          Ident::new(self.name, tcx.def_ident_span(self.def_id).unwrap())
    8,325 ( 0.00%)      }
        .           }
        .           
   83,567 ( 0.01%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]
        .           pub enum VariantDiscr {
        .               /// Explicit value for this variant, i.e., `X = 123`.
        .               /// The `DefId` corresponds to the embedded constant.
        .               Explicit(DefId),
        .           
        .               /// The previous variant's discriminant plus one.
        .               /// For efficiency reasons, the distance from the
        .               /// last `Explicit` discriminant is being stored,
        .               /// or `0` for the first variant, if it has none.
        .               Relative(u32),
        .           }
        .           
  194,275 ( 0.01%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
        .           pub struct FieldDef {
        .               pub did: DefId,
        .               pub name: Symbol,
        .               pub vis: Visibility,
        .           }
        .           
      218 ( 0.00%)  bitflags! {
        .               #[derive(TyEncodable, TyDecodable, Default, HashStable)]
        .               pub struct ReprFlags: u8 {
        .                   const IS_C               = 1 << 0;
        .                   const IS_SIMD            = 1 << 1;
        .                   const IS_TRANSPARENT     = 1 << 2;
        .                   // Internal only for now. If true, don't reorder fields.
        .                   const IS_LINEAR          = 1 << 3;
        .                   // If true, don't expose any niche to type's context.
-- line 1684 ----------------------------------------
-- line 1689 ----------------------------------------
        .                   // Any of these flags being set prevent field reordering optimisation.
        .                   const IS_UNOPTIMISABLE   = ReprFlags::IS_C.bits
        .                                            | ReprFlags::IS_SIMD.bits
        .                                            | ReprFlags::IS_LINEAR.bits;
        .               }
        .           }
        .           
        .           /// Represents the repr options provided by the user,
  113,300 ( 0.01%)  #[derive(Copy, Clone, Debug, Eq, PartialEq, TyEncodable, TyDecodable, Default, HashStable)]
        .           pub struct ReprOptions {
        .               pub int: Option<attr::IntType>,
        .               pub align: Option<Align>,
        .               pub pack: Option<Align>,
        .               pub flags: ReprFlags,
        .               /// The seed to be used for randomizing a type's layout
        .               ///
        .               /// Note: This could technically be a `[u8; 16]` (a `u128`) which would
-- line 1705 ----------------------------------------
-- line 1706 ----------------------------------------
        .               /// be the "most accurate" hash as it'd encompass the item and crate
        .               /// hash without loss, but it does pay the price of being larger.
        .               /// Everything's a tradeoff, a `u64` seed should be sufficient for our
        .               /// purposes (primarily `-Z randomize-layout`)
        .               pub field_shuffle_seed: u64,
        .           }
        .           
        .           impl ReprOptions {
      195 ( 0.00%)      pub fn new(tcx: TyCtxt<'_>, did: DefId) -> ReprOptions {
        .                   let mut flags = ReprFlags::empty();
        .                   let mut size = None;
        .                   let mut max_align: Option<Align> = None;
        .                   let mut min_pack: Option<Align> = None;
        .           
        .                   // Generate a deterministically-derived seed from the item's path hash
        .                   // to allow for cross-crate compilation to actually work
        .                   let mut field_shuffle_seed = tcx.def_path_hash(did).0.to_smaller_hash();
        .           
        .                   // If the user defined a custom seed for layout randomization, xor the item's
        .                   // path hash with the user defined seed, this will allowing determinism while
        .                   // still allowing users to further randomize layout generation for e.g. fuzzing
       45 ( 0.00%)          if let Some(user_seed) = tcx.sess.opts.debugging_opts.layout_seed {
        .                       field_shuffle_seed ^= user_seed;
        .                   }
        .           
       60 ( 0.00%)          for attr in tcx.get_attrs(did).iter() {
      475 ( 0.00%)              for r in attr::find_repr_attrs(&tcx.sess, attr) {
        .                           flags.insert(match r {
        .                               attr::ReprC => ReprFlags::IS_C,
        .                               attr::ReprPacked(pack) => {
        .                                   let pack = Align::from_bytes(pack as u64).unwrap();
        .                                   min_pack = Some(if let Some(min_pack) = min_pack {
        .                                       min_pack.min(pack)
        .                                   } else {
        .                                       pack
-- line 1740 ----------------------------------------
-- line 1753 ----------------------------------------
        .                                   ReprFlags::empty()
        .                               }
        .                           });
        .                       }
        .                   }
        .           
        .                   // If `-Z randomize-layout` was enabled for the type definition then we can
        .                   // consider performing layout randomization
      120 ( 0.00%)          if tcx.sess.opts.debugging_opts.randomize_layout {
        .                       flags.insert(ReprFlags::RANDOMIZE_LAYOUT);
        .                   }
        .           
        .                   // This is here instead of layout because the choice must make it into metadata.
       90 ( 0.00%)          if !tcx.consider_optimizing(|| format!("Reorder fields of {:?}", tcx.def_path_str(did))) {
        .                       flags.insert(ReprFlags::IS_LINEAR);
        .                   }
        .           
       30 ( 0.00%)          Self { int: size, align: max_align, pack: min_pack, flags, field_shuffle_seed }
      420 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn simd(&self) -> bool {
        .                   self.flags.contains(ReprFlags::IS_SIMD)
        .               }
        .           
        .               #[inline]
        .               pub fn c(&self) -> bool {
-- line 1779 ----------------------------------------
-- line 1798 ----------------------------------------
        .               #[inline]
        .               pub fn hide_niche(&self) -> bool {
        .                   self.flags.contains(ReprFlags::HIDE_NICHE)
        .               }
        .           
        .               /// Returns the discriminant type, given these `repr` options.
        .               /// This must only be called on enums!
        .               pub fn discr_type(&self) -> attr::IntType {
    1,588 ( 0.00%)          self.int.unwrap_or(attr::SignedInt(ast::IntTy::Isize))
      950 ( 0.00%)      }
        .           
        .               /// Returns `true` if this `#[repr()]` should inhabit "smart enum
        .               /// layout" optimizations, such as representing `Foo<&T>` as a
        .               /// single pointer.
        .               pub fn inhibit_enum_layout_opt(&self) -> bool {
       40 ( 0.00%)          self.c() || self.int.is_some()
        .               }
        .           
        .               /// Returns `true` if this `#[repr()]` should inhibit struct field reordering
        .               /// optimizations, such as with `repr(C)`, `repr(packed(1))`, or `repr(<int>)`.
        .               pub fn inhibit_struct_field_reordering_opt(&self) -> bool {
      148 ( 0.00%)          if let Some(pack) = self.pack {
        .                       if pack.bytes() == 1 {
        .                           return true;
        .                       }
        .                   }
        .           
      304 ( 0.00%)          self.flags.intersects(ReprFlags::IS_UNOPTIMISABLE) || self.int.is_some()
        .               }
        .           
        .               /// Returns `true` if this type is valid for reordering and `-Z randomize-layout`
        .               /// was enabled for its declaration crate
        .               pub fn can_randomize_type_layout(&self) -> bool {
       72 ( 0.00%)          !self.inhibit_struct_field_reordering_opt()
        .                       && self.flags.contains(ReprFlags::RANDOMIZE_LAYOUT)
        .               }
        .           
        .               /// Returns `true` if this `#[repr()]` should inhibit union ABI optimisations.
        .               pub fn inhibit_union_abi_opt(&self) -> bool {
        .                   self.c()
        .               }
        .           }
        .           
        .           impl<'tcx> FieldDef {
        .               /// Returns the type of this field. The resulting type is not normalized. The `subst` is
        .               /// typically obtained via the second field of [`TyKind::Adt`].
   35,035 ( 0.00%)      pub fn ty(&self, tcx: TyCtxt<'tcx>, subst: SubstsRef<'tcx>) -> Ty<'tcx> {
   10,010 ( 0.00%)          tcx.type_of(self.did).subst(tcx, subst)
   40,040 ( 0.00%)      }
        .           
        .               /// Computes the `Ident` of this variant by looking up the `Span`
   18,053 ( 0.00%)      pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
   10,316 ( 0.00%)          Ident::new(self.name, tcx.def_ident_span(self.did).unwrap())
   23,211 ( 0.00%)      }
        .           }
        .           
        .           pub type Attributes<'tcx> = &'tcx [ast::Attribute];
        .           
        .           #[derive(Debug, PartialEq, Eq)]
        .           pub enum ImplOverlapKind {
        .               /// These impls are always allowed to overlap.
        .               Permitted {
-- line 1859 ----------------------------------------
-- line 1891 ----------------------------------------
        .               /// marker traits.
        .               /// 4. Neither of the impls can have any where-clauses.
        .               ///
        .               /// Once `traitobject` 0.1.0 is no longer an active concern, this hack can be removed.
        .               Issue33140,
        .           }
        .           
        .           impl<'tcx> TyCtxt<'tcx> {
   13,048 ( 0.00%)      pub fn typeck_body(self, body: hir::BodyId) -> &'tcx TypeckResults<'tcx> {
    3,262 ( 0.00%)          self.typeck(self.hir().body_owner_def_id(body))
   13,048 ( 0.00%)      }
        .           
        .               pub fn provided_trait_methods(self, id: DefId) -> impl 'tcx + Iterator<Item = &'tcx AssocItem> {
        .                   self.associated_items(id)
        .                       .in_definition_order()
        .                       .filter(|item| item.kind == AssocKind::Fn && item.defaultness.has_value())
        .               }
        .           
        .               fn item_name_from_hir(self, def_id: DefId) -> Option<Ident> {
        .                   self.hir().get_if_local(def_id).and_then(|node| node.ident())
        .               }
        .           
      522 ( 0.00%)      fn item_name_from_def_id(self, def_id: DefId) -> Option<Symbol> {
       58 ( 0.00%)          if def_id.index == CRATE_DEF_INDEX {
        .                       Some(self.crate_name(def_id.krate))
        .                   } else {
      174 ( 0.00%)              let def_key = self.def_key(def_id);
      290 ( 0.00%)              match def_key.disambiguated_data.data {
        .                           // The name of a constructor is that of its parent.
        .                           rustc_hir::definitions::DefPathData::Ctor => self.item_name_from_def_id(DefId {
        .                               krate: def_id.krate,
        .                               index: def_key.parent.unwrap(),
        .                           }),
      116 ( 0.00%)                  _ => def_key.disambiguated_data.data.get_opt_name(),
        .                       }
        .                   }
      464 ( 0.00%)      }
        .           
        .               /// Look up the name of an item across crates. This does not look at HIR.
        .               ///
        .               /// When possible, this function should be used for cross-crate lookups over
        .               /// [`opt_item_name`] to avoid invalidating the incremental cache. If you
        .               /// need to handle items without a name, or HIR items that will not be
        .               /// serialized cross-crate, or if you need the span of the item, use
        .               /// [`opt_item_name`] instead.
        .               ///
        .               /// [`opt_item_name`]: Self::opt_item_name
      406 ( 0.00%)      pub fn item_name(self, id: DefId) -> Symbol {
        .                   // Look at cross-crate items first to avoid invalidating the incremental cache
        .                   // unless we have to.
       58 ( 0.00%)          self.item_name_from_def_id(id).unwrap_or_else(|| {
        .                       bug!("item_name: no name for {:?}", self.def_path(id));
        .                   })
      290 ( 0.00%)      }
        .           
        .               /// Look up the name and span of an item or [`Node`].
        .               ///
        .               /// See [`item_name`][Self::item_name] for more information.
        .               pub fn opt_item_name(self, def_id: DefId) -> Option<Ident> {
        .                   // Look at the HIR first so the span will be correct if this is a local item.
        .                   self.item_name_from_hir(def_id)
        .                       .or_else(|| self.item_name_from_def_id(def_id).map(Ident::with_dummy_span))
        .               }
        .           
  280,080 ( 0.02%)      pub fn opt_associated_item(self, def_id: DefId) -> Option<&'tcx AssocItem> {
  112,032 ( 0.01%)          if let DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy = self.def_kind(def_id) {
        .                       Some(self.associated_item(def_id))
        .                   } else {
        .                       None
        .                   }
  252,072 ( 0.02%)      }
        .           
    2,268 ( 0.00%)      pub fn field_index(self, hir_id: hir::HirId, typeck_results: &TypeckResults<'_>) -> usize {
        .                   typeck_results.field_indices().get(hir_id).cloned().expect("no index for a field")
    4,536 ( 0.00%)      }
        .           
        .               pub fn find_field_index(self, ident: Ident, variant: &VariantDef) -> Option<usize> {
        .                   variant
        .                       .fields
        .                       .iter()
        .                       .position(|field| self.hygienic_eq(ident, field.ident(self), variant.def_id))
        .               }
        .           
        .               /// Returns `true` if the impls are the same polarity and the trait either
        .               /// has no items or is annotated `#[marker]` and prevents item overrides.
    6,040 ( 0.00%)      pub fn impls_are_allowed_to_overlap(
        .                   self,
        .                   def_id1: DefId,
        .                   def_id2: DefId,
        .               ) -> Option<ImplOverlapKind> {
        .                   // If either trait impl references an error, they're allowed to overlap,
        .                   // as one of them essentially doesn't exist.
        .                   if self.impl_trait_ref(def_id1).map_or(false, |tr| tr.references_error())
    1,208 ( 0.00%)              || self.impl_trait_ref(def_id2).map_or(false, |tr| tr.references_error())
        .                   {
        .                       return Some(ImplOverlapKind::Permitted { marker: false });
        .                   }
        .           
    6,040 ( 0.00%)          match (self.impl_polarity(def_id1), self.impl_polarity(def_id2)) {
        .                       (ImplPolarity::Reservation, _) | (_, ImplPolarity::Reservation) => {
        .                           // `#[rustc_reservation_impl]` impls don't overlap with anything
        .                           debug!(
        .                               "impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (reservations)",
        .                               def_id1, def_id2
        .                           );
        .                           return Some(ImplOverlapKind::Permitted { marker: false });
        .                       }
-- line 1997 ----------------------------------------
-- line 2004 ----------------------------------------
        .                           );
        .                           return None;
        .                       }
        .                       (ImplPolarity::Positive, ImplPolarity::Positive)
        .                       | (ImplPolarity::Negative, ImplPolarity::Negative) => {}
        .                   };
        .           
        .                   let is_marker_overlap = {
    6,040 ( 0.00%)              let is_marker_impl = |def_id: DefId| -> bool {
    1,812 ( 0.00%)                  let trait_ref = self.impl_trait_ref(def_id);
    1,812 ( 0.00%)                  trait_ref.map_or(false, |tr| self.trait_def(tr.def_id).is_marker)
    4,832 ( 0.00%)              };
    2,416 ( 0.00%)              is_marker_impl(def_id1) && is_marker_impl(def_id2)
        .                   };
        .           
        .                   if is_marker_overlap {
        .                       debug!(
        .                           "impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (marker overlap)",
        .                           def_id1, def_id2
        .                       );
        .                       Some(ImplOverlapKind::Permitted { marker: true })
        .                   } else {
    2,416 ( 0.00%)              if let Some(self_ty1) = self.issue33140_self_ty(def_id1) {
        .                           if let Some(self_ty2) = self.issue33140_self_ty(def_id2) {
        .                               if self_ty1 == self_ty2 {
        .                                   debug!(
        .                                       "impls_are_allowed_to_overlap({:?}, {:?}) - issue #33140 HACK",
        .                                       def_id1, def_id2
        .                                   );
        .                                   return Some(ImplOverlapKind::Issue33140);
        .                               } else {
-- line 2034 ----------------------------------------
-- line 2038 ----------------------------------------
        .                                   );
        .                               }
        .                           }
        .                       }
        .           
        .                       debug!("impls_are_allowed_to_overlap({:?}, {:?}) = None", def_id1, def_id2);
        .                       None
        .                   }
    4,832 ( 0.00%)      }
        .           
        .               /// Returns `ty::VariantDef` if `res` refers to a struct,
        .               /// or variant or their constructors, panics otherwise.
    1,785 ( 0.00%)      pub fn expect_variant_res(self, res: Res) -> &'tcx VariantDef {
    3,060 ( 0.00%)          match res {
        .                       Res::Def(DefKind::Variant, did) => {
        .                           let enum_did = self.parent(did).unwrap();
        .                           self.adt_def(enum_did).variant_with_id(did)
        .                       }
        .                       Res::Def(DefKind::Struct | DefKind::Union, did) => self.adt_def(did).non_enum_variant(),
        .                       Res::Def(DefKind::Ctor(CtorOf::Variant, ..), variant_ctor_did) => {
        .                           let variant_did = self.parent(variant_ctor_did).unwrap();
        .                           let enum_did = self.parent(variant_did).unwrap();
-- line 2059 ----------------------------------------
-- line 2060 ----------------------------------------
        .                           self.adt_def(enum_did).variant_with_ctor_id(variant_ctor_did)
        .                       }
        .                       Res::Def(DefKind::Ctor(CtorOf::Struct, ..), ctor_did) => {
        .                           let struct_did = self.parent(ctor_did).expect("struct ctor has no parent");
        .                           self.adt_def(struct_did).non_enum_variant()
        .                       }
        .                       _ => bug!("expect_variant_res used with unexpected res {:?}", res),
        .                   }
    2,040 ( 0.00%)      }
        .           
        .               /// Returns the possibly-auto-generated MIR of a `(DefId, Subst)` pair.
        .               pub fn instance_mir(self, instance: ty::InstanceDef<'tcx>) -> &'tcx Body<'tcx> {
        .                   match instance {
        .                       ty::InstanceDef::Item(def) => match self.def_kind(def.did) {
        .                           DefKind::Const
        .                           | DefKind::Static
        .                           | DefKind::AssocConst
-- line 2076 ----------------------------------------
-- line 2091 ----------------------------------------
        .                       | ty::InstanceDef::Virtual(..)
        .                       | ty::InstanceDef::ClosureOnceShim { .. }
        .                       | ty::InstanceDef::DropGlue(..)
        .                       | ty::InstanceDef::CloneShim(..) => self.mir_shims(instance),
        .                   }
        .               }
        .           
        .               /// Gets the attributes of a definition.
   90,850 ( 0.01%)      pub fn get_attrs(self, did: DefId) -> Attributes<'tcx> {
   27,255 ( 0.00%)          if let Some(did) = did.as_local() {
   21,693 ( 0.00%)              self.hir().attrs(self.hir().local_def_id_to_hir_id(did))
        .                   } else {
        .                       self.item_attrs(did)
        .                   }
   72,680 ( 0.00%)      }
        .           
        .               /// Determines whether an item is annotated with an attribute.
   12,152 ( 0.00%)      pub fn has_attr(self, did: DefId, attr: Symbol) -> bool {
   35,901 ( 0.00%)          self.sess.contains_name(&self.get_attrs(did), attr)
        .               }
        .           
        .               /// Determines whether an item is annotated with `doc(hidden)`.
    1,316 ( 0.00%)      pub fn is_doc_hidden(self, did: DefId) -> bool {
      188 ( 0.00%)          self.get_attrs(did)
        .                       .iter()
      151 ( 0.00%)              .filter_map(|attr| if attr.has_name(sym::doc) { attr.meta_item_list() } else { None })
        .                       .any(|items| items.iter().any(|item| item.has_name(sym::hidden)))
    1,504 ( 0.00%)      }
        .           
        .               /// Returns `true` if this is an `auto trait`.
    6,328 ( 0.00%)      pub fn trait_is_auto(self, trait_def_id: DefId) -> bool {
      904 ( 0.00%)          self.trait_def(trait_def_id).has_auto_impl
    7,232 ( 0.00%)      }
        .           
        .               /// Returns layout of a generator. Layout might be unavailable if the
        .               /// generator is tainted by errors.
        .               pub fn generator_layout(self, def_id: DefId) -> Option<&'tcx GeneratorLayout<'tcx>> {
        .                   self.optimized_mir(def_id).generator_layout()
        .               }
        .           
        .               /// Given the `DefId` of an impl, returns the `DefId` of the trait it implements.
        .               /// If it implements no trait, returns `None`.
    5,187 ( 0.00%)      pub fn trait_id_of_impl(self, def_id: DefId) -> Option<DefId> {
        .                   self.impl_trait_ref(def_id).map(|tr| tr.def_id)
    6,669 ( 0.00%)      }
        .           
        .               /// If the given defid describes a method belonging to an impl, returns the
        .               /// `DefId` of the impl that the method belongs to; otherwise, returns `None`.
      191 ( 0.00%)      pub fn impl_of_method(self, def_id: DefId) -> Option<DefId> {
      764 ( 0.00%)          self.opt_associated_item(def_id).and_then(|trait_item| match trait_item.container {
        .                       TraitContainer(_) => None,
        .                       ImplContainer(def_id) => Some(def_id),
        .                   })
      382 ( 0.00%)      }
        .           
        .               /// Looks up the span of `impl_did` if the impl is local; otherwise returns `Err`
        .               /// with the name of the crate containing the impl.
        .               pub fn span_of_impl(self, impl_did: DefId) -> Result<Span, Symbol> {
        .                   if let Some(impl_did) = impl_did.as_local() {
        .                       Ok(self.def_span(impl_did))
        .                   } else {
        .                       Err(self.crate_name(impl_did.krate))
        .                   }
        .               }
        .           
        .               /// Hygienically compares a use-site name (`use_name`) for a field or an associated item with
        .               /// its supposed definition name (`def_name`). The method also needs `DefId` of the supposed
        .               /// definition's parent/scope to perform comparison.
   19,384 ( 0.00%)      pub fn hygienic_eq(self, use_name: Ident, def_name: Ident, def_parent_def_id: DefId) -> bool {
        .                   // We could use `Ident::eq` here, but we deliberately don't. The name
        .                   // comparison fails frequently, and we want to avoid the expensive
        .                   // `normalize_to_macros_2_0()` calls required for the span comparison whenever possible.
    2,423 ( 0.00%)          use_name.name == def_name.name
    7,017 ( 0.00%)              && use_name
        .                           .span
        .                           .ctxt()
        .                           .hygienic_eq(def_name.span.ctxt(), self.expn_that_defined(def_parent_def_id))
   19,384 ( 0.00%)      }
        .           
    3,195 ( 0.00%)      pub fn adjust_ident(self, mut ident: Ident, scope: DefId) -> Ident {
      710 ( 0.00%)          ident.span.normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope));
      710 ( 0.00%)          ident
    2,840 ( 0.00%)      }
        .           
   23,148 ( 0.00%)      pub fn adjust_ident_and_get_scope(
        .                   self,
        .                   mut ident: Ident,
        .                   scope: DefId,
        .                   block: hir::HirId,
        .               ) -> (Ident, DefId) {
    2,572 ( 0.00%)          let scope = ident
        .                       .span
        .                       .normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope))
        .                       .and_then(|actual_expansion| actual_expansion.expn_data().parent_module)
   10,288 ( 0.00%)              .unwrap_or_else(|| self.parent_module(block).to_def_id());
   15,432 ( 0.00%)          (ident, scope)
   23,148 ( 0.00%)      }
        .           
      539 ( 0.00%)      pub fn is_object_safe(self, key: DefId) -> bool {
        .                   self.object_safety_violations(key).is_empty()
      616 ( 0.00%)      }
        .           }
        .           
        .           /// Yields the parent function's `LocalDefId` if `def_id` is an `impl Trait` definition.
    2,883 ( 0.00%)  pub fn is_impl_trait_defn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<LocalDefId> {
    2,883 ( 0.00%)      let def_id = def_id.as_local()?;
    2,212 ( 0.00%)      if let Node::Item(item) = tcx.hir().get_by_def_id(def_id) {
      624 ( 0.00%)          if let hir::ItemKind::OpaqueTy(ref opaque_ty) = item.kind {
        .                       return match opaque_ty.origin {
        .                           hir::OpaqueTyOrigin::FnReturn(parent) | hir::OpaqueTyOrigin::AsyncFn(parent) => {
        .                               Some(parent)
        .                           }
        .                           hir::OpaqueTyOrigin::TyAlias => None,
        .                       };
        .                   }
        .               }
        .               None
    3,844 ( 0.00%)  }
        .           
        .           pub fn int_ty(ity: ast::IntTy) -> IntTy {
        .               match ity {
        .                   ast::IntTy::Isize => IntTy::Isize,
        .                   ast::IntTy::I8 => IntTy::I8,
        .                   ast::IntTy::I16 => IntTy::I16,
        .                   ast::IntTy::I32 => IntTy::I32,
        .                   ast::IntTy::I64 => IntTy::I64,
-- line 2216 ----------------------------------------
-- line 2231 ----------------------------------------
        .           
        .           pub fn float_ty(fty: ast::FloatTy) -> FloatTy {
        .               match fty {
        .                   ast::FloatTy::F32 => FloatTy::F32,
        .                   ast::FloatTy::F64 => FloatTy::F64,
        .               }
        .           }
        .           
      263 ( 0.00%)  pub fn ast_int_ty(ity: IntTy) -> ast::IntTy {
        .               match ity {
        .                   IntTy::Isize => ast::IntTy::Isize,
        .                   IntTy::I8 => ast::IntTy::I8,
        .                   IntTy::I16 => ast::IntTy::I16,
        .                   IntTy::I32 => ast::IntTy::I32,
        .                   IntTy::I64 => ast::IntTy::I64,
        .                   IntTy::I128 => ast::IntTy::I128,
        .               }
      263 ( 0.00%)  }
        .           
        .           pub fn ast_uint_ty(uty: UintTy) -> ast::UintTy {
        .               match uty {
        .                   UintTy::Usize => ast::UintTy::Usize,
        .                   UintTy::U8 => ast::UintTy::U8,
        .                   UintTy::U16 => ast::UintTy::U16,
        .                   UintTy::U32 => ast::UintTy::U32,
        .                   UintTy::U64 => ast::UintTy::U64,
-- line 2256 ----------------------------------------
-- line 2262 ----------------------------------------
        .               closure::provide(providers);
        .               context::provide(providers);
        .               erase_regions::provide(providers);
        .               layout::provide(providers);
        .               util::provide(providers);
        .               print::provide(providers);
        .               super::util::bug::provide(providers);
        .               super::middle::provide(providers);
        8 ( 0.00%)      *providers = ty::query::Providers {
        .                   trait_impls_of: trait_def::trait_impls_of_provider,
        .                   type_uninhabited_from: inhabitedness::type_uninhabited_from,
        .                   const_param_default: consts::const_param_default,
        .                   vtable_allocation: vtable::vtable_allocation_provider,
        .                   ..*providers
        .               };
        1 ( 0.00%)  }
        .           
        .           /// A map for the local crate mapping each type to a vector of its
        .           /// inherent impls. This is not meant to be used outside of coherence;
        .           /// rather, you should request the vector for a specific type via
        .           /// `tcx.inherent_impls(def_id)` so as to minimize your dependencies
        .           /// (constructing this map requires touching the entire crate).
        .           #[derive(Clone, Debug, Default, HashStable)]
        .           pub struct CrateInherentImpls {
-- line 2285 ----------------------------------------
-- line 2288 ----------------------------------------
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, HashStable)]
        .           pub struct SymbolName<'tcx> {
        .               /// `&str` gives a consistent ordering, which ensures reproducible builds.
        .               pub name: &'tcx str,
        .           }
        .           
        .           impl<'tcx> SymbolName<'tcx> {
        6 ( 0.00%)      pub fn new(tcx: TyCtxt<'tcx>, name: &str) -> SymbolName<'tcx> {
        .                   SymbolName {
        .                       name: unsafe { str::from_utf8_unchecked(tcx.arena.alloc_slice(name.as_bytes())) },
        .                   }
        8 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> fmt::Display for SymbolName<'tcx> {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   fmt::Display::fmt(&self.name, fmt)
        .               }
        .           }
        .           
-- line 2308 ----------------------------------------

1,999,773 ( 0.12%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 121 ----------------------------------------
      .           #[derive(Debug)]
      .           pub enum ProcessResult<O, E> {
      .               Unchanged,
      .               Changed(Vec<O>),
      .               Error(E),
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
 31,746 ( 0.00%)  struct ObligationTreeId(usize);
      .           
      .           type ObligationTreeIdGenerator =
      .               std::iter::Map<std::ops::RangeFrom<usize>, fn(usize) -> ObligationTreeId>;
      .           
      .           pub struct ObligationForest<O: ForestObligation> {
      .               /// The list of obligations. In between calls to `process_obligations`,
      .               /// this list only contains nodes in the `Pending` or `Waiting` state.
      .               ///
-- line 137 ----------------------------------------
-- line 181 ----------------------------------------
      .               has_parent: bool,
      .           
      .               /// Identifier of the obligation tree to which this node belongs.
      .               obligation_tree_id: ObligationTreeId,
      .           }
      .           
      .           impl<O> Node<O> {
      .               fn new(parent: Option<usize>, obligation: O, obligation_tree_id: ObligationTreeId) -> Node<O> {
368,496 ( 0.02%)          Node {
      .                       obligation,
      .                       state: Cell::new(NodeState::Pending),
 44,505 ( 0.00%)              dependents: if let Some(parent_index) = parent { vec![parent_index] } else { vec![] },
      .                       has_parent: parent.is_some(),
      .                       obligation_tree_id,
      .                   }
      .               }
      .           }
      .           
      .           /// The state of one node in some tree within the forest. This represents the
      .           /// current state of processing for the obligation (of type `O`) associated
-- line 200 ----------------------------------------
-- line 223 ----------------------------------------
      .           ///  |     compress()
      .           ///  v
      .           /// (Removed)
      .           /// ```
      .           /// The `Error` state can be introduced in several places, via `error_at()`.
      .           ///
      .           /// Outside of `ObligationForest` methods, nodes should be either `Pending` or
      .           /// `Waiting`.
633,978 ( 0.04%)  #[derive(Debug, Copy, Clone, PartialEq, Eq)]
      .           enum NodeState {
      .               /// This obligation has not yet been selected successfully. Cannot have
      .               /// subobligations.
      .               Pending,
      .           
      .               /// This obligation was selected successfully, but may or may not have
      .               /// subobligations.
      .               Success,
-- line 239 ----------------------------------------
-- line 279 ----------------------------------------
      .               pub stalled: bool,
      .           }
      .           
      .           impl<O, E> OutcomeTrait for Outcome<O, E> {
      .               type Error = Error<O, E>;
      .               type Obligation = O;
      .           
      .               fn new() -> Self {
 54,084 ( 0.00%)          Self { stalled: true, errors: vec![] }
      .               }
      .           
      .               fn mark_not_stalled(&mut self) {
 22,811 ( 0.00%)          self.stalled = false;
      .               }
      .           
      .               fn is_stalled(&self) -> bool {
 13,813 ( 0.00%)          self.stalled
      .               }
      .           
      .               fn record_completed(&mut self, _outcome: &Self::Obligation) {
      .                   // do nothing
      .               }
      .           
      .               fn record_error(&mut self, error: Self::Error) {
     64 ( 0.00%)          self.errors.push(error)
      .               }
      .           }
      .           
      .           #[derive(Debug, PartialEq, Eq)]
      .           pub struct Error<O, E> {
      .               pub error: E,
      .               pub backtrace: Vec<O>,
      .           }
      .           
      .           impl<O: ForestObligation> ObligationForest<O> {
  6,741 ( 0.00%)      pub fn new() -> ObligationForest<O> {
 80,892 ( 0.00%)          ObligationForest {
      .                       nodes: vec![],
      .                       done_cache: Default::default(),
      .                       active_cache: Default::default(),
      .                       reused_node_vec: vec![],
      .                       obligation_tree_id_generator: (0..).map(ObligationTreeId),
      .                       error_cache: Default::default(),
      .                   }
  6,741 ( 0.00%)      }
      .           
      .               /// Returns the total number of nodes in the forest that have not
      .               /// yet been fully resolved.
      .               pub fn len(&self) -> usize {
      .                   self.nodes.len()
      .               }
      .           
      .               /// Registers an obligation.
      .               pub fn register_obligation(&mut self, obligation: O) {
      .                   // Ignore errors here - there is no guarantee of success.
250,042 ( 0.02%)          let _ = self.register_obligation_at(obligation, None);
      .               }
      .           
      .               // Returns Err(()) if we already know this obligation failed.
342,705 ( 0.02%)      fn register_obligation_at(&mut self, obligation: O, parent: Option<usize>) -> Result<(), ()> {
 62,310 ( 0.00%)          let cache_key = obligation.as_cache_key();
 62,310 ( 0.00%)          if self.done_cache.contains(&cache_key) {
      .                       debug!("register_obligation_at: ignoring already done obligation: {:?}", obligation);
      .                       return Ok(());
      .                   }
      .           
158,100 ( 0.01%)          match self.active_cache.entry(cache_key) {
      .                       Entry::Occupied(o) => {
  6,638 ( 0.00%)                  let node = &mut self.nodes[*o.get()];
  6,638 ( 0.00%)                  if let Some(parent_index) = parent {
      .                               // If the node is already in `active_cache`, it has already
      .                               // had its chance to be marked with a parent. So if it's
      .                               // not already present, just dump `parent` into the
      .                               // dependents as a non-parent.
  5,928 ( 0.00%)                      if !node.dependents.contains(&parent_index) {
      .                                   node.dependents.push(parent_index);
      .                               }
      .                           }
  9,957 ( 0.00%)                  if let NodeState::Error = node.state.get() { Err(()) } else { Ok(()) }
      .                       }
 69,093 ( 0.00%)              Entry::Vacant(v) => {
138,186 ( 0.01%)                  let obligation_tree_id = match parent {
 14,316 ( 0.00%)                      Some(parent_index) => self.nodes[parent_index].obligation_tree_id,
      .                               None => self.obligation_tree_id_generator.next().unwrap(),
      .                           };
      .           
      .                           let already_failed = parent.is_some()
      .                               && self
      .                                   .error_cache
      .                                   .get(&obligation_tree_id)
      .                                   .map_or(false, |errors| errors.contains(v.key()));
      .           
      .                           if already_failed {
      .                               Err(())
      .                           } else {
 23,031 ( 0.00%)                      let new_index = self.nodes.len();
      .                               v.insert(new_index);
      .                               self.nodes.push(Node::new(parent, obligation, obligation_tree_id));
      .                               Ok(())
      .                           }
      .                       }
      .                   }
280,395 ( 0.02%)      }
      .           
      .               /// Converts all remaining obligations to the given error.
 61,642 ( 0.00%)      pub fn to_errors<E: Clone>(&mut self, error: E) -> Vec<Error<O, E>> {
      .                   let errors = self
      .                       .nodes
      .                       .iter()
      .                       .enumerate()
      .                       .filter(|(_index, node)| node.state.get() == NodeState::Pending)
      .                       .map(|(index, _node)| Error { error: error.clone(), backtrace: self.error_at(index) })
      .                       .collect();
      .           
 17,612 ( 0.00%)          self.compress(|_| assert!(false));
      .                   errors
 52,836 ( 0.00%)      }
      .           
      .               /// Returns the set of obligations that are in a pending state.
      .               pub fn map_pending_obligations<P, F>(&self, f: F) -> Vec<P>
      .               where
      .                   F: Fn(&O) -> P,
      .               {
     51 ( 0.00%)          self.nodes
      .                       .iter()
      .                       .filter(|node| node.state.get() == NodeState::Pending)
      .                       .map(|node| f(&node.obligation))
      .                       .collect()
      .               }
      .           
     28 ( 0.00%)      fn insert_into_error_cache(&mut self, index: usize) {
      .                   let node = &self.nodes[index];
      4 ( 0.00%)          self.error_cache
     12 ( 0.00%)              .entry(node.obligation_tree_id)
      .                       .or_default()
      .                       .insert(node.obligation.as_cache_key());
     32 ( 0.00%)      }
      .           
      .               /// Performs a pass through the obligation list. This must
      .               /// be called in a loop until `outcome.stalled` is false.
      .               ///
      .               /// This _cannot_ be unrolled (presently, at least).
      .               #[inline(never)]
243,378 ( 0.01%)      pub fn process_obligations<P, OUT>(&mut self, processor: &mut P) -> OUT
      .               where
      .                   P: ObligationProcessor<Obligation = O>,
      .                   OUT: OutcomeTrait<Obligation = O, Error = Error<O, P::Error>>,
      .               {
      .                   let mut outcome = OUT::new();
      .           
      .                   // Note that the loop body can append new nodes, and those new nodes
      .                   // will then be processed by subsequent iterations of the loop.
      .                   //
      .                   // We can't use an iterator for the loop because `self.nodes` is
      .                   // appended to and the borrow checker would complain. We also can't use
      .                   // `for index in 0..self.nodes.len() { ... }` because the range would
      .                   // be computed with the initial length, and we would miss the appended
      .                   // nodes. Therefore we use a `while` loop.
      .                   let mut index = 0;
291,172 ( 0.02%)          while let Some(node) = self.nodes.get_mut(index) {
      .                       // `processor.process_obligation` can modify the predicate within
      .                       // `node.obligation`, and that predicate is the key used for
      .                       // `self.active_cache`. This means that `self.active_cache` can get
      .                       // out of sync with `nodes`. It's not very common, but it does
      .                       // happen, and code in `compress` has to allow for it.
528,260 ( 0.03%)              if node.state.get() != NodeState::Pending {
 15,442 ( 0.00%)                  index += 1;
      .                           continue;
      .                       }
      .           
132,187 ( 0.01%)              match processor.process_obligation(&mut node.obligation) {
      .                           ProcessResult::Unchanged => {
      .                               // No change in state.
      .                           }
 91,228 ( 0.01%)                  ProcessResult::Changed(children) => {
      .                               // We are not (yet) stalled.
      .                               outcome.mark_not_stalled();
      .                               node.state.set(NodeState::Success);
      .           
115,070 ( 0.01%)                      for child in children {
202,657 ( 0.01%)                          let st = self.register_obligation_at(child, Some(index));
 23,842 ( 0.00%)                          if let Err(()) = st {
      .                                       // Error already reported - propagate it
      .                                       // to our node.
      .                                       self.error_at(index);
      .                                   }
      .                               }
      .                           }
      .                           ProcessResult::Error(err) => {
      .                               outcome.mark_not_stalled();
    132 ( 0.00%)                      outcome.record_error(Error { error: err, backtrace: self.error_at(index) });
      .                           }
      .                       }
497,376 ( 0.03%)              index += 1;
      .                   }
      .           
      .                   // There's no need to perform marking, cycle processing and compression when nothing
      .                   // changed.
 13,813 ( 0.00%)          if !outcome.is_stalled() {
      .                       self.mark_successes();
      .                       self.process_cycles(processor);
 12,676 ( 0.00%)              self.compress(|obl| outcome.record_completed(obl));
      .                   }
      .           
      .                   outcome
243,378 ( 0.01%)      }
      .           
      .               /// Returns a vector of obligations for `p` and all of its
      .               /// ancestors, putting them into the error state in the process.
     28 ( 0.00%)      fn error_at(&self, mut index: usize) -> Vec<O> {
      .                   let mut error_stack: Vec<usize> = vec![];
      .                   let mut trace = vec![];
      .           
      .                   loop {
      .                       let node = &self.nodes[index];
      4 ( 0.00%)              node.state.set(NodeState::Error);
      .                       trace.push(node.obligation.clone());
      8 ( 0.00%)              if node.has_parent {
      .                           // The first dependent is the parent, which is treated
      .                           // specially.
      .                           error_stack.extend(node.dependents.iter().skip(1));
      .                           index = node.dependents[0];
      .                       } else {
      .                           // No parent; treat all dependents non-specially.
      .                           error_stack.extend(node.dependents.iter());
      .                           break;
-- line 504 ----------------------------------------
-- line 509 ----------------------------------------
      .                       let node = &self.nodes[index];
      .                       if node.state.get() != NodeState::Error {
      .                           node.state.set(NodeState::Error);
      .                           error_stack.extend(node.dependents.iter());
      .                       }
      .                   }
      .           
      .                   trace
     32 ( 0.00%)      }
      .           
      .               /// Mark all `Waiting` nodes as `Success`, except those that depend on a
      .               /// pending node.
      .               fn mark_successes(&self) {
      .                   // Convert all `Waiting` nodes to `Success`.
      .                   for node in &self.nodes {
189,288 ( 0.01%)              if node.state.get() == NodeState::Waiting {
      .                           node.state.set(NodeState::Success);
      .                       }
      .                   }
      .           
      .                   // Convert `Success` nodes that depend on a pending node back to
      .                   // `Waiting`.
      .                   for node in &self.nodes {
110,532 ( 0.01%)              if node.state.get() == NodeState::Pending {
      .                           // This call site is hot.
      .                           self.inlined_mark_dependents_as_waiting(node);
      .                       }
      .                   }
      .               }
      .           
      .               // This always-inlined function is for the hot call site.
      .               #[inline(always)]
      .               fn inlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
  6,057 ( 0.00%)          for &index in node.dependents.iter() {
      .                       let node = &self.nodes[index];
  6,057 ( 0.00%)              let state = node.state.get();
  6,057 ( 0.00%)              if state == NodeState::Success {
      .                           // This call site is cold.
 16,125 ( 0.00%)                  self.uninlined_mark_dependents_as_waiting(node);
      .                       } else {
      .                           debug_assert!(state == NodeState::Waiting || state == NodeState::Error)
      .                       }
      .                   }
      .               }
      .           
      .               // This never-inlined function is for the cold call site.
      .               #[inline(never)]
 37,625 ( 0.00%)      fn uninlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
      .                   // Mark node Waiting in the cold uninlined code instead of the hot inlined
      .                   node.state.set(NodeState::Waiting);
      .                   self.inlined_mark_dependents_as_waiting(node)
 43,000 ( 0.00%)      }
      .           
      .               /// Report cycles between all `Success` nodes, and convert all `Success`
      .               /// nodes to `Done`. This must be called after `mark_successes`.
      .               fn process_cycles<P>(&mut self, processor: &mut P)
      .               where
      .                   P: ObligationProcessor<Obligation = O>,
      .               {
  6,338 ( 0.00%)          let mut stack = std::mem::take(&mut self.reused_node_vec);
      .                   for (index, node) in self.nodes.iter().enumerate() {
      .                       // For some benchmarks this state test is extremely hot. It's a win
      .                       // to handle the no-op cases immediately to avoid the cost of the
      .                       // function call.
110,532 ( 0.01%)              if node.state.get() == NodeState::Success {
109,385 ( 0.01%)                  self.find_cycles_from_node(&mut stack, processor, index);
      .                       }
      .                   }
      .           
      .                   debug_assert!(stack.is_empty());
 50,704 ( 0.00%)          self.reused_node_vec = stack;
      .               }
      .           
277,911 ( 0.02%)      fn find_cycles_from_node<P>(&self, stack: &mut Vec<usize>, processor: &mut P, index: usize)
      .               where
      .                   P: ObligationProcessor<Obligation = O>,
      .               {
      .                   let node = &self.nodes[index];
 61,758 ( 0.00%)          if node.state.get() == NodeState::Success {
  1,864 ( 0.00%)              match stack.iter().rposition(|&n| n == index) {
      .                           None => {
      .                               stack.push(index);
  9,002 ( 0.00%)                      for &dep_index in node.dependents.iter() {
 36,008 ( 0.00%)                          self.find_cycles_from_node(stack, processor, dep_index);
      .                               }
      .                               stack.pop();
      .                               node.state.set(NodeState::Done);
      .                           }
      .                           Some(rpos) => {
      .                               // Cycle detected.
      .                               processor.process_backedge(
      .                                   stack[rpos..].iter().map(|&i| &self.nodes[i].obligation),
      .                                   PhantomData,
      .                               );
      .                           }
      .                       }
      .                   }
247,032 ( 0.02%)      }
      .           
      .               /// Compresses the vector, removing all popped nodes. This adjusts the
      .               /// indices and hence invalidates any outstanding indices. `process_cycles`
      .               /// must be run beforehand to remove any cycles on `Success` nodes.
      .               #[inline(never)]
112,346 ( 0.01%)      fn compress(&mut self, mut outcome_cb: impl FnMut(&O)) {
 15,144 ( 0.00%)          let orig_nodes_len = self.nodes.len();
      .                   let mut node_rewrites: Vec<_> = std::mem::take(&mut self.reused_node_vec);
      .                   debug_assert!(node_rewrites.is_empty());
      .                   node_rewrites.extend(0..orig_nodes_len);
      .                   let mut dead_nodes = 0;
      .           
      .                   // Move removable nodes to the end, preserving the order of the
      .                   // remaining nodes.
      .                   //
      .                   // LOOP INVARIANT:
      .                   //     self.nodes[0..index - dead_nodes] are the first remaining nodes
      .                   //     self.nodes[index - dead_nodes..index] are all dead
      .                   //     self.nodes[index..] are unchanged
      .                   for index in 0..orig_nodes_len {
      .                       let node = &self.nodes[index];
578,012 ( 0.04%)              match node.state.get() {
      .                           NodeState::Pending | NodeState::Waiting => {
175,442 ( 0.01%)                      if dead_nodes > 0 {
 41,253 ( 0.00%)                          self.nodes.swap(index, index - dead_nodes);
 68,755 ( 0.00%)                          node_rewrites[index] -= dead_nodes;
      .                               }
      .                           }
      .                           NodeState::Done => {
      .                               // This lookup can fail because the contents of
      .                               // `self.active_cache` are not guaranteed to match those of
      .                               // `self.nodes`. See the comment in `process_obligation`
      .                               // for more details.
 84,470 ( 0.01%)                      if let Some((predicate, _)) =
 68,421 ( 0.00%)                          self.active_cache.remove_entry(&node.obligation.as_cache_key())
      .                               {
      .                                   self.done_cache.insert(predicate);
      .                               } else {
      .                                   self.done_cache.insert(node.obligation.as_cache_key().clone());
      .                               }
      .                               // Extract the success stories.
      .                               outcome_cb(&node.obligation);
 45,614 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
 45,614 ( 0.00%)                      dead_nodes += 1;
      .                           }
      .                           NodeState::Error => {
      .                               // We *intentionally* remove the node from the cache at this point. Otherwise
      .                               // tests must come up with a different type on every type error they
      .                               // check against.
     12 ( 0.00%)                      self.active_cache.remove(&node.obligation.as_cache_key());
      8 ( 0.00%)                      self.insert_into_error_cache(index);
      8 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
      8 ( 0.00%)                      dead_nodes += 1;
      .                           }
      .                           NodeState::Success => unreachable!(),
      .                       }
      .                   }
      .           
      .                   if dead_nodes > 0 {
      .                       // Remove the dead nodes and rewrite indices.
 12,136 ( 0.00%)              self.nodes.truncate(orig_nodes_len - dead_nodes);
  6,068 ( 0.00%)              self.apply_rewrites(&node_rewrites);
      .                   }
      .           
      .                   node_rewrites.truncate(0);
 60,576 ( 0.00%)          self.reused_node_vec = node_rewrites;
121,152 ( 0.01%)      }
      .           
      .               #[inline(never)]
 54,612 ( 0.00%)      fn apply_rewrites(&mut self, node_rewrites: &[usize]) {
      .                   let orig_nodes_len = node_rewrites.len();
      .           
      .                   for node in &mut self.nodes {
      .                       let mut i = 0;
 87,429 ( 0.01%)              while let Some(dependent) = node.dependents.get_mut(i) {
 20,872 ( 0.00%)                  let new_index = node_rewrites[*dependent];
 10,436 ( 0.00%)                  if new_index >= orig_nodes_len {
      .                               node.dependents.swap_remove(i);
      .                               if i == 0 && node.has_parent {
      .                                   // We just removed the parent.
      .                                   node.has_parent = false;
      .                               }
      .                           } else {
  5,218 ( 0.00%)                      *dependent = new_index;
 10,436 ( 0.00%)                      i += 1;
      .                           }
      .                       }
      .                   }
      .           
      .                   // This updating of `self.active_cache` is necessary because the
      .                   // removal of nodes within `compress` can fail. See above.
      .                   self.active_cache.retain(|_predicate, index| {
355,876 ( 0.02%)              let new_index = node_rewrites[*index];
177,938 ( 0.01%)              if new_index >= orig_nodes_len {
      .                           false
      .                       } else {
 82,211 ( 0.01%)                  *index = new_index;
      .                           true
      .                       }
      .                   });
 48,544 ( 0.00%)      }
      .           }

971,111 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs
--------------------------------------------------------------------------------
Ir                 

-- line 40 ----------------------------------------
        .           
        .           impl<BorrowType: marker::BorrowType, K, V> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {
        .               /// Looks up a given key in a (sub)tree headed by the node, recursively.
        .               /// Returns a `Found` with the handle of the matching KV, if any. Otherwise,
        .               /// returns a `GoDown` with the handle of the leaf edge where the key belongs.
        .               ///
        .               /// The result is meaningful only if the tree is ordered by key, like the tree
        .               /// in a `BTreeMap` is.
  672,809 ( 0.04%)      pub fn search_tree<Q: ?Sized>(
        .                   mut self,
        .                   key: &Q,
        .               ) -> SearchResult<BorrowType, K, V, marker::LeafOrInternal, marker::Leaf>
        .               where
        .                   Q: Ord,
        .                   K: Borrow<Q>,
        .               {
        .                   loop {
        .                       self = match self.search_node(key) {
        .                           Found(handle) => return Found(handle),
   41,880 ( 0.00%)                  GoDown(handle) => match handle.force() {
        .                               Leaf(leaf) => return GoDown(leaf),
        .                               Internal(internal) => internal.descend(),
        .                           },
        .                       }
        .                   }
  363,559 ( 0.02%)      }
        .           
        .               /// Descends to the nearest node where the edge matching the lower bound
        .               /// of the range is different from the edge matching the upper bound, i.e.,
        .               /// the nearest node that has at least one key contained in the range.
        .               ///
        .               /// If found, returns an `Ok` with that node, the strictly ascending pair of
        .               /// edge indices in the node delimiting the range, and the corresponding
        .               /// pair of bounds for continuing the search in the child nodes, in case
-- line 73 ----------------------------------------
-- line 202 ----------------------------------------
        .               unsafe fn find_key_index<Q: ?Sized>(&self, key: &Q, start_index: usize) -> IndexResult
        .               where
        .                   Q: Ord,
        .                   K: Borrow<Q>,
        .               {
        .                   let node = self.reborrow();
        .                   let keys = node.keys();
        .                   debug_assert!(start_index <= keys.len());
  502,899 ( 0.03%)          for (offset, k) in unsafe { keys.get_unchecked(start_index..) }.iter().enumerate() {
2,221,892 ( 0.14%)              match key.cmp(k.borrow()) {
        .                           Ordering::Greater => {}
        .                           Ordering::Equal => return IndexResult::KV(start_index + offset),
        .                           Ordering::Less => return IndexResult::Edge(start_index + offset),
        .                       }
        .                   }
        .                   IndexResult::Edge(keys.len())
        .               }
        .           
-- line 219 ----------------------------------------

1,117,755 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .                   #[inline]
        .                   pub fn $fn_name(
        .                       out: &mut [::std::mem::MaybeUninit<u8>; max_leb128_len!($int_ty)],
        .                       mut value: $int_ty,
        .                   ) -> &[u8] {
        .                       let mut i = 0;
        .           
        .                       loop {
  158,640 ( 0.01%)                  if value < 0x80 {
        .                               unsafe {
   69,504 ( 0.00%)                          *out.get_unchecked_mut(i).as_mut_ptr() = value as u8;
        .                               }
        .           
   94,804 ( 0.01%)                      i += 1;
        .                               break;
        .                           } else {
        .                               unsafe {
   84,768 ( 0.01%)                          *out.get_unchecked_mut(i).as_mut_ptr() = ((value & 0x7f) | 0x80) as u8;
        .                               }
        .           
   32,813 ( 0.00%)                      value >>= 7;
        .                               i += 1;
        .                           }
        .                       }
        .           
        .                       unsafe { ::std::mem::MaybeUninit::slice_assume_init_ref(&out.get_unchecked(..i)) }
        .                   }
        .               };
        .           }
-- line 45 ----------------------------------------
-- line 53 ----------------------------------------
        .           macro_rules! impl_read_unsigned_leb128 {
        .               ($fn_name:ident, $int_ty:ty) => {
        .                   #[inline]
        .                   pub fn $fn_name(slice: &[u8], position: &mut usize) -> $int_ty {
        .                       // The first iteration of this loop is unpeeled. This is a
        .                       // performance win because this code is hot and integer values less
        .                       // than 128 are very common, typically occurring 50-80% or more of
        .                       // the time, even for u64 and u128.
2,524,768 ( 0.16%)              let byte = slice[*position];
1,262,384 ( 0.08%)              *position += 1;
1,262,384 ( 0.08%)              if (byte & 0x80) == 0 {
      134 ( 0.00%)                  return byte as $int_ty;
        .                       }
    1,144 ( 0.00%)              let mut result = (byte & 0x7F) as $int_ty;
        .                       let mut shift = 7;
        .                       loop {
  871,107 ( 0.05%)                  let byte = slice[*position];
  573,348 ( 0.04%)                  *position += 1;
  580,738 ( 0.04%)                  if (byte & 0x80) == 0 {
  476,009 ( 0.03%)                      result |= (byte as $int_ty) << shift;
        .                               return result;
        .                           } else {
        .                               result |= ((byte & 0x7F) as $int_ty) << shift;
        .                           }
        .                           shift += 7;
        .                       }
        .                   }
        .               };
-- line 80 ----------------------------------------

  925,462 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .           use rustc_span::hygiene::MacroKind;
        .           use rustc_span::source_map::Spanned;
        .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
        .           use rustc_span::Span;
        .           use rustc_target::spec::abi::Abi;
        .           use std::collections::VecDeque;
        .           
        .           fn fn_decl<'hir>(node: Node<'hir>) -> Option<&'hir FnDecl<'hir>> {
    3,420 ( 0.00%)      match node {
        .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
        .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
        .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(&sig.decl),
        .                   Node::Expr(Expr { kind: ExprKind::Closure(_, fn_decl, ..), .. })
        .                   | Node::ForeignItem(ForeignItem { kind: ForeignItemKind::Fn(fn_decl, ..), .. }) => {
        .                       Some(fn_decl)
        .                   }
        .                   _ => None,
        .               }
        .           }
        .           
        .           pub fn fn_sig<'hir>(node: Node<'hir>) -> Option<&'hir FnSig<'hir>> {
       70 ( 0.00%)      match &node {
        .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
        .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
        .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(sig),
        .                   _ => None,
        .               }
        .           }
        .           
        .           pub fn associated_body<'hir>(node: Node<'hir>) -> Option<BodyId> {
   41,931 ( 0.00%)      match node {
        .                   Node::Item(Item {
        .                       kind: ItemKind::Const(_, body) | ItemKind::Static(.., body) | ItemKind::Fn(.., body),
        .                       ..
        .                   })
        .                   | Node::TraitItem(TraitItem {
        .                       kind:
        .                           TraitItemKind::Const(_, Some(body)) | TraitItemKind::Fn(_, TraitFn::Provided(body)),
        .                       ..
        .                   })
        .                   | Node::ImplItem(ImplItem {
        .                       kind: ImplItemKind::Const(_, body) | ImplItemKind::Fn(_, body),
        .                       ..
        .                   })
    7,579 ( 0.00%)          | Node::Expr(Expr { kind: ExprKind::Closure(.., body, _, _), .. }) => Some(*body),
        .           
       72 ( 0.00%)          Node::AnonConst(constant) => Some(constant.body),
        .           
        .                   _ => None,
        .               }
        .           }
        .           
        .           fn is_body_owner<'hir>(node: Node<'hir>, hir_id: HirId) -> bool {
        .               match associated_body(node) {
        .                   Some(b) => b.hir_id == hir_id,
-- line 71 ----------------------------------------
-- line 83 ----------------------------------------
        .           pub struct ParentHirIterator<'hir> {
        .               current_id: HirId,
        .               map: Map<'hir>,
        .           }
        .           
        .           impl<'hir> Iterator for ParentHirIterator<'hir> {
        .               type Item = (HirId, Node<'hir>);
        .           
    3,857 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
      575 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
        .                       return None;
        .                   }
        .                   loop {
        .                       // There are nodes that do not have entries, so we need to skip them.
        .                       let parent_id = self.map.get_parent_node(self.current_id);
        .           
    1,734 ( 0.00%)              if parent_id == self.current_id {
        .                           self.current_id = CRATE_HIR_ID;
        .                           return None;
        .                       }
        .           
    1,180 ( 0.00%)              self.current_id = parent_id;
    4,633 ( 0.00%)              if let Some(node) = self.map.find(parent_id) {
    2,204 ( 0.00%)                  return Some((parent_id, node));
        .                       }
        .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
        .                   }
    4,959 ( 0.00%)      }
        .           }
        .           
        .           /// An iterator that walks up the ancestor tree of a given `HirId`.
        .           /// Constructed using `tcx.hir().parent_owner_iter(hir_id)`.
        .           pub struct ParentOwnerIterator<'hir> {
        .               current_id: HirId,
        .               map: Map<'hir>,
        .           }
        .           
        .           impl<'hir> Iterator for ParentOwnerIterator<'hir> {
        .               type Item = (LocalDefId, OwnerNode<'hir>);
        .           
   36,405 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
   12,135 ( 0.00%)          if self.current_id.local_id.index() != 0 {
    2,108 ( 0.00%)              self.current_id.local_id = ItemLocalId::new(0);
    8,432 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
        .                           return Some((self.current_id.owner, node.node));
        .                       }
        .                   }
    1,937 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
      212 ( 0.00%)              return None;
        .                   }
        .                   loop {
        .                       // There are nodes that do not have entries, so we need to skip them.
        .                       let parent_id = self.map.def_key(self.current_id.owner).parent;
        .           
        .                       let parent_id = parent_id.map_or(CRATE_HIR_ID.owner, |local_def_index| {
        .                           let def_id = LocalDefId { local_def_index };
        .                           self.map.local_def_id_to_hir_id(def_id).owner
        .                       });
    3,662 ( 0.00%)              self.current_id = HirId::make_owner(parent_id);
        .           
        .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
    3,662 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
        .                           return Some((self.current_id.owner, node.node));
        .                       }
        .                   }
   32,360 ( 0.00%)      }
        .           }
        .           
        .           impl<'hir> Map<'hir> {
      217 ( 0.00%)      pub fn krate(&self) -> &'hir Crate<'hir> {
       31 ( 0.00%)          self.tcx.hir_crate(())
      248 ( 0.00%)      }
        .           
        7 ( 0.00%)      pub fn root_module(&self) -> &'hir Mod<'hir> {
        1 ( 0.00%)          match self.tcx.hir_owner(CRATE_DEF_ID).map(|o| o.node) {
        .                       Some(OwnerNode::Crate(item)) => item,
        .                       _ => bug!(),
        .                   }
        8 ( 0.00%)      }
        .           
        .               pub fn items(&self) -> impl Iterator<Item = &'hir Item<'hir>> + 'hir {
        .                   let krate = self.krate();
        .                   krate.owners.iter().filter_map(|owner| match owner.as_ref()?.node() {
        .                       OwnerNode::Item(item) => Some(item),
        .                       _ => None,
        .                   })
        .               }
-- line 169 ----------------------------------------
-- line 184 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn def_path_hash(self, def_id: LocalDefId) -> DefPathHash {
        .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
        .                   self.tcx.untracked_resolutions.definitions.def_path_hash(def_id)
        .               }
        .           
        .               #[inline]
   57,636 ( 0.00%)      pub fn local_def_id(&self, hir_id: HirId) -> LocalDefId {
   13,299 ( 0.00%)          self.opt_local_def_id(hir_id).unwrap_or_else(|| {
        .                       bug!(
        .                           "local_def_id: no entry for `{:?}`, which has a map of `{:?}`",
        .                           hir_id,
        .                           self.find(hir_id)
        .                       )
        .                   })
   43,227 ( 0.00%)      }
        .           
        .               #[inline]
   35,464 ( 0.00%)      pub fn opt_local_def_id(&self, hir_id: HirId) -> Option<LocalDefId> {
   10,257 ( 0.00%)          if hir_id.local_id == ItemLocalId::new(0) {
        .                       Some(hir_id.owner)
        .                   } else {
    5,244 ( 0.00%)              self.tcx
        .                           .hir_owner_nodes(hir_id.owner)?
        .                           .local_id_to_def_id
        .                           .get(&hir_id.local_id)
        .                           .copied()
        .                   }
   39,897 ( 0.00%)      }
        .           
        .               #[inline]
      122 ( 0.00%)      pub fn local_def_id_to_hir_id(&self, def_id: LocalDefId) -> HirId {
        .                   // FIXME(#85914) is this access safe for incr. comp.?
    2,505 ( 0.00%)          self.tcx.untracked_resolutions.definitions.local_def_id_to_hir_id(def_id)
      244 ( 0.00%)      }
        .           
        7 ( 0.00%)      pub fn iter_local_def_id(&self) -> impl Iterator<Item = LocalDefId> + '_ {
        .                   // Create a dependency to the crate to be sure we reexcute this when the amount of
        .                   // definitions change.
        1 ( 0.00%)          self.tcx.ensure().hir_crate(());
        .                   self.tcx.untracked_resolutions.definitions.iter_local_def_id()
        9 ( 0.00%)      }
        .           
    6,573 ( 0.00%)      pub fn opt_def_kind(&self, local_def_id: LocalDefId) -> Option<DefKind> {
        .                   let hir_id = self.local_def_id_to_hir_id(local_def_id);
   12,207 ( 0.00%)          let def_kind = match self.find(hir_id)? {
    1,248 ( 0.00%)              Node::Item(item) => match item.kind {
        .                           ItemKind::Static(..) => DefKind::Static,
        .                           ItemKind::Const(..) => DefKind::Const,
        .                           ItemKind::Fn(..) => DefKind::Fn,
        .                           ItemKind::Macro(..) => DefKind::Macro(MacroKind::Bang),
        .                           ItemKind::Mod(..) => DefKind::Mod,
        .                           ItemKind::OpaqueTy(..) => DefKind::OpaqueTy,
        .                           ItemKind::TyAlias(..) => DefKind::TyAlias,
        .                           ItemKind::Enum(..) => DefKind::Enum,
-- line 239 ----------------------------------------
-- line 247 ----------------------------------------
        .                           ItemKind::GlobalAsm(..) => DefKind::GlobalAsm,
        .                           ItemKind::Impl { .. } => DefKind::Impl,
        .                       },
        .                       Node::ForeignItem(item) => match item.kind {
        .                           ForeignItemKind::Fn(..) => DefKind::Fn,
        .                           ForeignItemKind::Static(..) => DefKind::Static,
        .                           ForeignItemKind::Type => DefKind::ForeignTy,
        .                       },
        4 ( 0.00%)              Node::TraitItem(item) => match item.kind {
        .                           TraitItemKind::Const(..) => DefKind::AssocConst,
        .                           TraitItemKind::Fn(..) => DefKind::AssocFn,
        .                           TraitItemKind::Type(..) => DefKind::AssocTy,
        .                       },
      191 ( 0.00%)              Node::ImplItem(item) => match item.kind {
        .                           ImplItemKind::Const(..) => DefKind::AssocConst,
        .                           ImplItemKind::Fn(..) => DefKind::AssocFn,
        .                           ImplItemKind::TyAlias(..) => DefKind::AssocTy,
        .                       },
        .                       Node::Variant(_) => DefKind::Variant,
        .                       Node::Ctor(variant_data) => {
        .                           // FIXME(eddyb) is this even possible, if we have a `Node::Ctor`?
      275 ( 0.00%)                  assert_ne!(variant_data.ctor_hir_id(), None);
        .           
      383 ( 0.00%)                  let ctor_of = match self.find(self.get_parent_node(hir_id)) {
        .                               Some(Node::Item(..)) => def::CtorOf::Struct,
        .                               Some(Node::Variant(..)) => def::CtorOf::Variant,
        .                               _ => unreachable!(),
        .                           };
      110 ( 0.00%)                  DefKind::Ctor(ctor_of, def::CtorKind::from_hir(variant_data))
      220 ( 0.00%)              }
        .                       Node::AnonConst(_) => {
        6 ( 0.00%)                  let inline = match self.find(self.get_parent_node(hir_id)) {
        .                               Some(Node::Expr(&Expr {
        .                                   kind: ExprKind::ConstBlock(ref anon_const), ..
        .                               })) if anon_const.hir_id == hir_id => true,
        .                               _ => false,
        .                           };
        .                           if inline { DefKind::InlineConst } else { DefKind::AnonConst }
        .                       }
        .                       Node::Field(_) => DefKind::Field,
      195 ( 0.00%)              Node::Expr(expr) => match expr.kind {
        .                           ExprKind::Closure(.., None) => DefKind::Closure,
        .                           ExprKind::Closure(.., Some(_)) => DefKind::Generator,
        .                           _ => bug!("def_kind: unsupported node: {}", self.node_to_string(hir_id)),
        .                       },
      201 ( 0.00%)              Node::GenericParam(param) => match param.kind {
        .                           GenericParamKind::Lifetime { .. } => DefKind::LifetimeParam,
        .                           GenericParamKind::Type { .. } => DefKind::TyParam,
        .                           GenericParamKind::Const { .. } => DefKind::ConstParam,
        .                       },
        .                       Node::Crate(_) => DefKind::Mod,
        .                       Node::Stmt(_)
        .                       | Node::PathSegment(_)
        .                       | Node::Ty(_)
-- line 300 ----------------------------------------
-- line 304 ----------------------------------------
        .                       | Node::Binding(_)
        .                       | Node::Local(_)
        .                       | Node::Param(_)
        .                       | Node::Arm(_)
        .                       | Node::Lifetime(_)
        .                       | Node::Visibility(_)
        .                       | Node::Block(_) => return None,
        .                   };
    3,028 ( 0.00%)          Some(def_kind)
    9,390 ( 0.00%)      }
        .           
        .               pub fn def_kind(&self, local_def_id: LocalDefId) -> DefKind {
        .                   self.opt_def_kind(local_def_id)
        .                       .unwrap_or_else(|| bug!("def_kind: unsupported node: {:?}", local_def_id))
        .               }
        .           
1,199,912 ( 0.07%)      pub fn find_parent_node(&self, id: HirId) -> Option<HirId> {
  149,989 ( 0.01%)          if id.local_id == ItemLocalId::from_u32(0) {
        .                       Some(self.tcx.hir_owner_parent(id.owner))
        .                   } else {
  295,832 ( 0.02%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
  147,916 ( 0.01%)              let node = owner.nodes[id.local_id].as_ref()?;
  443,748 ( 0.03%)              let hir_id = HirId { owner: id.owner, local_id: node.parent };
        .                       Some(hir_id)
        .                   }
1,199,912 ( 0.07%)      }
        .           
    2,939 ( 0.00%)      pub fn get_parent_node(&self, hir_id: HirId) -> HirId {
  852,068 ( 0.05%)          self.find_parent_node(hir_id).unwrap()
    5,878 ( 0.00%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
  319,840 ( 0.02%)      pub fn find(&self, id: HirId) -> Option<Node<'hir>> {
   39,980 ( 0.00%)          if id.local_id == ItemLocalId::from_u32(0) {
        .                       let owner = self.tcx.hir_owner(id.owner)?;
   21,938 ( 0.00%)              Some(owner.node.into())
        .                   } else {
   35,684 ( 0.00%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
   17,842 ( 0.00%)              let node = owner.nodes[id.local_id].as_ref()?;
   53,526 ( 0.00%)              Some(node.node)
        .                   }
  319,840 ( 0.02%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
        .               #[inline]
        .               pub fn find_by_def_id(&self, id: LocalDefId) -> Option<Node<'hir>> {
    5,409 ( 0.00%)          self.find(self.local_def_id_to_hir_id(id))
        .               }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
   27,267 ( 0.00%)      pub fn get(&self, id: HirId) -> Node<'hir> {
   15,254 ( 0.00%)          self.find(id).unwrap_or_else(|| bug!("couldn't find hir id {} in the HIR map", id))
   18,178 ( 0.00%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
        .               #[inline]
        .               pub fn get_by_def_id(&self, id: LocalDefId) -> Node<'hir> {
        .                   self.find_by_def_id(id).unwrap_or_else(|| bug!("couldn't find {:?} in the HIR map", id))
        .               }
        .           
      584 ( 0.00%)      pub fn get_if_local(&self, id: DefId) -> Option<Node<'hir>> {
      292 ( 0.00%)          id.as_local().and_then(|id| self.find(self.local_def_id_to_hir_id(id)))
      584 ( 0.00%)      }
        .           
        .               pub fn get_generics(&self, id: LocalDefId) -> Option<&'hir Generics<'hir>> {
        .                   let node = self.tcx.hir_owner(id)?;
        .                   match node.node {
        .                       OwnerNode::ImplItem(impl_item) => Some(&impl_item.generics),
        .                       OwnerNode::TraitItem(trait_item) => Some(&trait_item.generics),
        .                       OwnerNode::Item(Item {
        .                           kind:
-- line 374 ----------------------------------------
-- line 381 ----------------------------------------
        .                               | ItemKind::TraitAlias(generics, _)
        .                               | ItemKind::Impl(Impl { generics, .. }),
        .                           ..
        .                       }) => Some(generics),
        .                       _ => None,
        .                   }
        .               }
        .           
   59,220 ( 0.00%)      pub fn item(&self, id: ItemId) -> &'hir Item<'hir> {
   16,920 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_item()
   67,680 ( 0.00%)      }
        .           
      364 ( 0.00%)      pub fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
      104 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_trait_item()
      416 ( 0.00%)      }
        .           
   38,115 ( 0.00%)      pub fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
   10,890 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_impl_item()
   43,560 ( 0.00%)      }
        .           
        .               pub fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
        .                   self.tcx.hir_owner(id.def_id).unwrap().node.expect_foreign_item()
        .               }
        .           
   66,654 ( 0.00%)      pub fn body(&self, id: BodyId) -> &'hir Body<'hir> {
   19,044 ( 0.00%)          self.tcx.hir_owner_nodes(id.hir_id.owner).unwrap().bodies[&id.hir_id.local_id]
   76,176 ( 0.00%)      }
        .           
    2,052 ( 0.00%)      pub fn fn_decl_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnDecl<'hir>> {
    2,052 ( 0.00%)          if let Some(node) = self.find(hir_id) {
        .                       fn_decl(node)
        .                   } else {
        .                       bug!("no node for hir_id `{}`", hir_id)
        .                   }
    1,368 ( 0.00%)      }
        .           
       27 ( 0.00%)      pub fn fn_sig_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnSig<'hir>> {
       27 ( 0.00%)          if let Some(node) = self.find(hir_id) {
        .                       fn_sig(node)
        .                   } else {
        .                       bug!("no node for hir_id `{}`", hir_id)
        .                   }
       27 ( 0.00%)      }
        .           
        .               pub fn enclosing_body_owner(&self, hir_id: HirId) -> HirId {
        .                   for (parent, _) in self.parent_iter(hir_id) {
        .                       if let Some(body) = self.maybe_body_owned_by(parent) {
        .                           return self.body_owner(body);
        .                       }
        .                   }
        .           
        .                   bug!("no `enclosing_body_owner` for hir_id `{}`", hir_id);
        .               }
        .           
        .               /// Returns the `HirId` that corresponds to the definition of
        .               /// which this is the body of, i.e., a `fn`, `const` or `static`
        .               /// item (possibly associated), a closure, or a `hir::AnonConst`.
   45,176 ( 0.00%)      pub fn body_owner(&self, BodyId { hir_id }: BodyId) -> HirId {
        .                   let parent = self.get_parent_node(hir_id);
   33,882 ( 0.00%)          assert!(self.find(parent).map_or(false, |n| is_body_owner(n, hir_id)));
        .                   parent
   45,176 ( 0.00%)      }
        .           
   14,010 ( 0.00%)      pub fn body_owner_def_id(&self, id: BodyId) -> LocalDefId {
   22,165 ( 0.00%)          self.local_def_id(self.body_owner(id))
   14,010 ( 0.00%)      }
        .           
        .               /// Given a `HirId`, returns the `BodyId` associated with it,
        .               /// if the node is a body owner, otherwise returns `None`.
    1,938 ( 0.00%)      pub fn maybe_body_owned_by(&self, hir_id: HirId) -> Option<BodyId> {
    6,375 ( 0.00%)          self.find(hir_id).map(associated_body).flatten()
    5,814 ( 0.00%)      }
        .           
        .               /// Given a body owner's id, returns the `BodyId` associated with it.
    5,049 ( 0.00%)      pub fn body_owned_by(&self, id: HirId) -> BodyId {
        .                   self.maybe_body_owned_by(id).unwrap_or_else(|| {
        .                       span_bug!(
        .                           self.span(id),
        .                           "body_owned_by: {} has no associated body",
        .                           self.node_to_string(id)
        .                       );
        .                   })
    3,927 ( 0.00%)      }
        .           
      232 ( 0.00%)      pub fn body_param_names(&self, id: BodyId) -> impl Iterator<Item = Ident> + 'hir {
    2,232 ( 0.00%)          self.body(id).params.iter().map(|arg| match arg.pat.kind {
      764 ( 0.00%)              PatKind::Binding(_, _, ident, _) => ident,
        .                       _ => Ident::empty(),
        .                   })
      696 ( 0.00%)      }
        .           
        .               /// Returns the `BodyOwnerKind` of this `LocalDefId`.
        .               ///
        .               /// Panics if `LocalDefId` does not have an associated body.
    8,343 ( 0.00%)      pub fn body_owner_kind(&self, id: HirId) -> BodyOwnerKind {
   22,085 ( 0.00%)          match self.get(id) {
        .                       Node::Item(&Item { kind: ItemKind::Const(..), .. })
        .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Const(..), .. })
        .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Const(..), .. })
        .                       | Node::AnonConst(_) => BodyOwnerKind::Const,
        .                       Node::Ctor(..)
        .                       | Node::Item(&Item { kind: ItemKind::Fn(..), .. })
        .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Fn(..), .. })
        .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Fn(..), .. }) => BodyOwnerKind::Fn,
       12 ( 0.00%)              Node::Item(&Item { kind: ItemKind::Static(_, m, _), .. }) => BodyOwnerKind::Static(m),
        .                       Node::Expr(&Expr { kind: ExprKind::Closure(..), .. }) => BodyOwnerKind::Closure,
        .                       node => bug!("{:#?} is not a body node", node),
        .                   }
    8,343 ( 0.00%)      }
        .           
        .               /// Returns the `ConstContext` of the body associated with this `LocalDefId`.
        .               ///
        .               /// Panics if `LocalDefId` does not have an associated body.
        .               ///
        .               /// This should only be used for determining the context of a body, a return
        .               /// value of `Some` does not always suggest that the owner of the body is `const`,
        .               /// just that it has to be checked as if it were.
    9,104 ( 0.00%)      pub fn body_const_context(&self, did: LocalDefId) -> Option<ConstContext> {
        .                   let hir_id = self.local_def_id_to_hir_id(did);
   13,656 ( 0.00%)          let ccx = match self.body_owner_kind(hir_id) {
        .                       BodyOwnerKind::Const => ConstContext::Const,
       18 ( 0.00%)              BodyOwnerKind::Static(mt) => ConstContext::Static(mt),
        .           
      928 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_constructor(did.to_def_id()) => return None,
      928 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_const_fn_raw(did.to_def_id()) => ConstContext::ConstFn,
        .                       BodyOwnerKind::Fn
    1,856 ( 0.00%)                  if self.tcx.has_attr(did.to_def_id(), sym::default_method_body_is_const) =>
        .                       {
        .                           ConstContext::ConstFn
        .                       }
        .                       BodyOwnerKind::Fn | BodyOwnerKind::Closure => return None,
        .                   };
        .           
        .                   Some(ccx)
   10,242 ( 0.00%)      }
        .           
        .               /// Returns an iterator of the `DefId`s for all body-owners in this
        .               /// crate. If you would prefer to iterate over the bodies
        .               /// themselves, you can do `self.hir().krate().body_ids.iter()`.
       21 ( 0.00%)      pub fn body_owners(self) -> impl Iterator<Item = LocalDefId> + 'hir {
        3 ( 0.00%)          self.krate()
        .                       .owners
        .                       .iter_enumerated()
        .                       .flat_map(move |(owner, owner_info)| {
    2,817 ( 0.00%)                  let bodies = &owner_info.as_ref()?.nodes.bodies;
        .                           Some(bodies.iter().map(move |&(local_id, _)| {
       40 ( 0.00%)                      let hir_id = HirId { owner, local_id };
        .                               let body_id = BodyId { hir_id };
    2,680 ( 0.00%)                      self.body_owner_def_id(body_id)
        .                           }))
        .                       })
        .                       .flatten()
       15 ( 0.00%)      }
        .           
       10 ( 0.00%)      pub fn par_body_owners<F: Fn(LocalDefId) + Sync + Send>(self, f: F) {
        .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
        .                   #[cfg(parallel_compiler)]
        .                   use rustc_rayon::iter::IndexedParallelIterator;
        .           
        3 ( 0.00%)          par_iter(&self.krate().owners.raw).enumerate().for_each(|(owner, owner_info)| {
        .                       let owner = LocalDefId::new(owner);
    5,634 ( 0.00%)              if let Some(owner_info) = owner_info {
        .                           par_iter(owner_info.nodes.bodies.range(..)).for_each(|(local_id, _)| {
        .                               let hir_id = HirId { owner, local_id: *local_id };
        .                               let body_id = BodyId { hir_id };
    2,520 ( 0.00%)                      f(self.body_owner_def_id(body_id))
        .                           })
        .                       }
        .                   });
        8 ( 0.00%)      }
        .           
       20 ( 0.00%)      pub fn ty_param_owner(&self, id: HirId) -> LocalDefId {
        4 ( 0.00%)          match self.get(id) {
        .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
        .                           id.expect_owner()
        .                       }
        .                       Node::GenericParam(_) => self.get_parent_item(id),
        .                       _ => bug!("ty_param_owner: {} not a type parameter", self.node_to_string(id)),
        .                   }
       14 ( 0.00%)      }
        .           
       60 ( 0.00%)      pub fn ty_param_name(&self, id: HirId) -> Symbol {
       12 ( 0.00%)          match self.get(id) {
        .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
        .                           kw::SelfUpper
        .                       }
       12 ( 0.00%)              Node::GenericParam(param) => param.name.ident().name,
        .                       _ => bug!("ty_param_name: {} not a type parameter", self.node_to_string(id)),
        .                   }
       36 ( 0.00%)      }
        .           
      810 ( 0.00%)      pub fn trait_impls(&self, trait_did: DefId) -> &'hir [LocalDefId] {
       90 ( 0.00%)          self.tcx.all_local_trait_impls(()).get(&trait_did).map_or(&[], |xs| &xs[..])
      810 ( 0.00%)      }
        .           
        .               /// Gets the attributes on the crate. This is preferable to
        .               /// invoking `krate.attrs` because it registers a tighter
        .               /// dep-graph access.
        .               pub fn krate_attrs(&self) -> &'hir [ast::Attribute] {
       20 ( 0.00%)          self.attrs(CRATE_HIR_ID)
        .               }
        .           
      203 ( 0.00%)      pub fn get_module(&self, module: LocalDefId) -> (&'hir Mod<'hir>, Span, HirId) {
        .                   let hir_id = HirId::make_owner(module);
      145 ( 0.00%)          match self.tcx.hir_owner(module).map(|o| o.node) {
       36 ( 0.00%)              Some(OwnerNode::Item(&Item { span, kind: ItemKind::Mod(ref m), .. })) => {
        .                           (m, span, hir_id)
        .                       }
       33 ( 0.00%)              Some(OwnerNode::Crate(item)) => (item, item.inner, hir_id),
        .                       node => panic!("not a module: {:?}", node),
        .                   }
      261 ( 0.00%)      }
        .           
        .               /// Walks the contents of a crate. See also `Crate::visit_all_items`.
       11 ( 0.00%)      pub fn walk_toplevel_module(self, visitor: &mut impl Visitor<'hir>) {
       30 ( 0.00%)          let (top_mod, span, hir_id) = self.get_module(CRATE_DEF_ID);
        .                   visitor.visit_mod(top_mod, span, hir_id);
        8 ( 0.00%)      }
        .           
        .               /// Walks the attributes in a crate.
       20 ( 0.00%)      pub fn walk_attributes(self, visitor: &mut impl Visitor<'hir>) {
        2 ( 0.00%)          let krate = self.krate();
        .                   for (owner, info) in krate.owners.iter_enumerated() {
    3,756 ( 0.00%)              if let Some(info) = info {
        .                           for (local_id, attrs) in info.attrs.map.iter() {
        .                               let id = HirId { owner, local_id: *local_id };
        .                               for a in *attrs {
    9,405 ( 0.00%)                          visitor.visit_attribute(id, a)
        .                               }
        .                           }
        .                       }
        .                   }
       16 ( 0.00%)      }
        .           
        .               /// Visits all items in the crate in some deterministic (but
        .               /// unspecified) order. If you just need to process every item,
        .               /// but don't care about nesting, this method is the best choice.
        .               ///
        .               /// If you do care about nesting -- usually because your algorithm
        .               /// follows lexical scoping rules -- then you want a different
        .               /// approach. You should override `visit_nested_item` in your
        .               /// visitor and then call `intravisit::walk_crate` instead.
      152 ( 0.00%)      pub fn visit_all_item_likes<V>(&self, visitor: &mut V)
        .               where
        .                   V: itemlikevisit::ItemLikeVisitor<'hir>,
        .               {
       21 ( 0.00%)          let krate = self.krate();
       71 ( 0.00%)          for owner in krate.owners.iter().filter_map(Option::as_ref) {
   18,216 ( 0.00%)              match owner.node() {
   14,664 ( 0.00%)                  OwnerNode::Item(item) => visitor.visit_item(item),
        .                           OwnerNode::ForeignItem(item) => visitor.visit_foreign_item(item),
      573 ( 0.00%)                  OwnerNode::ImplItem(item) => visitor.visit_impl_item(item),
        .                           OwnerNode::TraitItem(item) => visitor.visit_trait_item(item),
        .                           OwnerNode::Crate(_) => {}
        .                       }
        .                   }
      152 ( 0.00%)      }
        .           
        .               /// A parallel version of `visit_all_item_likes`.
        .               pub fn par_visit_all_item_likes<V>(&self, visitor: &V)
        .               where
        .                   V: itemlikevisit::ParItemLikeVisitor<'hir> + Sync + Send,
        .               {
        1 ( 0.00%)          let krate = self.krate();
        2 ( 0.00%)          par_for_each_in(&krate.owners.raw, |owner| match owner.as_ref().map(OwnerInfo::node) {
      312 ( 0.00%)              Some(OwnerNode::Item(item)) => visitor.visit_item(item),
        .                       Some(OwnerNode::ForeignItem(item)) => visitor.visit_foreign_item(item),
      191 ( 0.00%)              Some(OwnerNode::ImplItem(item)) => visitor.visit_impl_item(item),
        2 ( 0.00%)              Some(OwnerNode::TraitItem(item)) => visitor.visit_trait_item(item),
        .                       Some(OwnerNode::Crate(_)) | None => {}
        .                   })
        .               }
        .           
      602 ( 0.00%)      pub fn visit_item_likes_in_module<V>(&self, module: LocalDefId, visitor: &mut V)
        .               where
        .                   V: ItemLikeVisitor<'hir>,
        .               {
       77 ( 0.00%)          let module = self.tcx.hir_module_items(module);
        .           
       84 ( 0.00%)          for id in module.items.iter() {
   14,040 ( 0.00%)              visitor.visit_item(self.item(*id));
        .                   }
        .           
       84 ( 0.00%)          for id in module.trait_items.iter() {
       80 ( 0.00%)              visitor.visit_trait_item(self.trait_item(*id));
        .                   }
        .           
       84 ( 0.00%)          for id in module.impl_items.iter() {
    7,449 ( 0.00%)              visitor.visit_impl_item(self.impl_item(*id));
        .                   }
        .           
       84 ( 0.00%)          for id in module.foreign_items.iter() {
        .                       visitor.visit_foreign_item(self.foreign_item(*id));
        .                   }
      616 ( 0.00%)      }
        .           
       46 ( 0.00%)      pub fn for_each_module(&self, f: impl Fn(LocalDefId)) {
        .                   let mut queue = VecDeque::new();
        .                   queue.push_back(CRATE_DEF_ID);
        .           
       56 ( 0.00%)          while let Some(id) = queue.pop_front() {
        .                       f(id);
       21 ( 0.00%)              let items = self.tcx.hir_module_items(id);
      224 ( 0.00%)              queue.extend(items.submodules.iter().copied())
        .                   }
       40 ( 0.00%)      }
        .           
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId)) {
        4 ( 0.00%)          self.for_each_module(f)
        .               }
        .           
        .               #[cfg(parallel_compiler)]
        .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId) + Sync) {
        .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
        .                   par_iter_submodules(self.tcx, CRATE_DEF_ID, &f);
        .           
        .                   fn par_iter_submodules<F>(tcx: TyCtxt<'_>, module: LocalDefId, f: &F)
-- line 699 ----------------------------------------
-- line 703 ----------------------------------------
        .                       (*f)(module);
        .                       let items = tcx.hir_module_items(module);
        .                       par_iter(&items.submodules[..]).for_each(|&sm| par_iter_submodules(tcx, sm, f));
        .                   }
        .               }
        .           
        .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
        .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
      549 ( 0.00%)      pub fn parent_iter(self, current_id: HirId) -> ParentHirIterator<'hir> {
        .                   ParentHirIterator { current_id, map: self }
    2,208 ( 0.00%)      }
        .           
        .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
        .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
        .               pub fn parent_owner_iter(self, current_id: HirId) -> ParentOwnerIterator<'hir> {
        .                   ParentOwnerIterator { current_id, map: self }
   11,539 ( 0.00%)      }
        .           
        .               /// Checks if the node is left-hand side of an assignment.
        .               pub fn is_lhs(&self, id: HirId) -> bool {
        .                   match self.find(self.get_parent_node(id)) {
        .                       Some(Node::Expr(expr)) => match expr.kind {
        .                           ExprKind::Assign(lhs, _rhs, _span) => lhs.hir_id == id,
        .                           _ => false,
        .                       },
-- line 727 ----------------------------------------
-- line 752 ----------------------------------------
        .               /// ```
        .               /// fn foo(x: usize) -> bool {
        .               ///     loop {
        .               ///         true  // If `get_return_block` gets passed the `id` corresponding
        .               ///     }         // to this, it will return `None`.
        .               ///     false
        .               /// }
        .               /// ```
       27 ( 0.00%)      pub fn get_return_block(&self, id: HirId) -> Option<HirId> {
        3 ( 0.00%)          let mut iter = self.parent_iter(id).peekable();
        .                   let mut ignore_tail = false;
       12 ( 0.00%)          if let Some(node) = self.find(id) {
       12 ( 0.00%)              if let Node::Expr(Expr { kind: ExprKind::Ret(_), .. }) = node {
        .                           // When dealing with `return` statements, we don't care about climbing only tail
        .                           // expressions.
        .                           ignore_tail = true;
        .                       }
        .                   }
       42 ( 0.00%)          while let Some((hir_id, node)) = iter.next() {
      168 ( 0.00%)              if let (Some((_, next_node)), false) = (iter.peek(), ignore_tail) {
        .                           match next_node {
        .                               Node::Block(Block { expr: None, .. }) => return None,
        .                               // The current node is not the tail expression of its parent.
        .                               Node::Block(Block { expr: Some(e), .. }) if hir_id != e.hir_id => return None,
        .                               _ => {}
        .                           }
        .                       }
      180 ( 0.00%)              match node {
        .                           Node::Item(_)
        .                           | Node::ForeignItem(_)
        .                           | Node::TraitItem(_)
        .                           | Node::Expr(Expr { kind: ExprKind::Closure(..), .. })
        .                           | Node::ImplItem(_) => return Some(hir_id),
        .                           // Ignore `return`s on the first iteration
        .                           Node::Expr(Expr { kind: ExprKind::Loop(..) | ExprKind::Ret(..), .. })
        .                           | Node::Local(_) => {
        .                               return None;
        .                           }
        .                           _ => {}
        .                       }
        .                   }
        .                   None
       30 ( 0.00%)      }
        .           
        .               /// Retrieves the `HirId` for `id`'s parent item, or `id` itself if no
        .               /// parent item is in this map. The "parent item" is the closest parent node
        .               /// in the HIR which is recorded by the map and is an item, either an item
        .               /// in a module, trait, or impl.
    3,412 ( 0.00%)      pub fn get_parent_item(&self, hir_id: HirId) -> LocalDefId {
   30,750 ( 0.00%)          if let Some((def_id, _node)) = self.parent_owner_iter(hir_id).next() {
        .                       def_id
        .                   } else {
        .                       CRATE_DEF_ID
        .                   }
    6,824 ( 0.00%)      }
        .           
        .               /// Returns the `HirId` of `id`'s nearest module parent, or `id` itself if no
        .               /// module parent is in this map.
        .               pub(super) fn get_module_parent_node(&self, hir_id: HirId) -> LocalDefId {
    4,412 ( 0.00%)          for (def_id, node) in self.parent_owner_iter(hir_id) {
    1,860 ( 0.00%)              if let OwnerNode::Item(&Item { kind: ItemKind::Mod(_), .. }) = node {
        .                           return def_id;
        .                       }
        .                   }
        .                   CRATE_DEF_ID
        .               }
        .           
        .               /// When on an if expression, a match arm tail expression or a match arm, give back
        .               /// the enclosing `if` or `match` expression.
-- line 820 ----------------------------------------
-- line 885 ----------------------------------------
        .                       }
        .                   }
        .                   bug!(
        .                       "expected foreign mod or inlined parent, found {}",
        .                       self.node_to_string(HirId::make_owner(parent))
        .                   )
        .               }
        .           
   12,495 ( 0.00%)      pub fn expect_item(&self, id: LocalDefId) -> &'hir Item<'hir> {
    5,355 ( 0.00%)          match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::Item(item), .. }) => item,
        .                       _ => bug!("expected item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
   14,280 ( 0.00%)      }
        .           
    2,674 ( 0.00%)      pub fn expect_impl_item(&self, id: LocalDefId) -> &'hir ImplItem<'hir> {
    1,146 ( 0.00%)          match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::ImplItem(item), .. }) => item,
        .                       _ => bug!("expected impl item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
    3,056 ( 0.00%)      }
        .           
       28 ( 0.00%)      pub fn expect_trait_item(&self, id: LocalDefId) -> &'hir TraitItem<'hir> {
       12 ( 0.00%)          match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::TraitItem(item), .. }) => item,
        .                       _ => bug!("expected trait item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
       32 ( 0.00%)      }
        .           
        .               pub fn expect_variant(&self, id: HirId) -> &'hir Variant<'hir> {
        .                   match self.find(id) {
        .                       Some(Node::Variant(variant)) => variant,
        .                       _ => bug!("expected variant, found {}", self.node_to_string(id)),
        .                   }
        .               }
        .           
-- line 920 ----------------------------------------
-- line 929 ----------------------------------------
        .           
        .               pub fn expect_expr(&self, id: HirId) -> &'hir Expr<'hir> {
        .                   match self.find(id) {
        .                       Some(Node::Expr(expr)) => expr,
        .                       _ => bug!("expected expr, found {}", self.node_to_string(id)),
        .                   }
        .               }
        .           
    3,519 ( 0.00%)      pub fn opt_name(&self, id: HirId) -> Option<Symbol> {
    1,313 ( 0.00%)          Some(match self.get(id) {
        .                       Node::Item(i) => i.ident.name,
        .                       Node::ForeignItem(fi) => fi.ident.name,
        .                       Node::ImplItem(ii) => ii.ident.name,
        .                       Node::TraitItem(ti) => ti.ident.name,
        .                       Node::Variant(v) => v.ident.name,
        .                       Node::Field(f) => f.ident.name,
        .                       Node::Lifetime(lt) => lt.name.ident().name,
      963 ( 0.00%)              Node::GenericParam(param) => param.name.ident().name,
      140 ( 0.00%)              Node::Binding(&Pat { kind: PatKind::Binding(_, _, l, _), .. }) => l.name,
        .                       Node::Ctor(..) => self.name(HirId::make_owner(self.get_parent_item(id))),
        .                       _ => return None,
        .                   })
    1,955 ( 0.00%)      }
        .           
    2,848 ( 0.00%)      pub fn name(&self, id: HirId) -> Symbol {
    1,243 ( 0.00%)          match self.opt_name(id) {
        .                       Some(name) => name,
        .                       None => bug!("no name for {}", self.node_to_string(id)),
        .                   }
    2,136 ( 0.00%)      }
        .           
        .               /// Given a node ID, gets a list of attributes associated with the AST
        .               /// corresponding to the node-ID.
1,480,283 ( 0.09%)      pub fn attrs(&self, id: HirId) -> &'hir [ast::Attribute] {
  211,469 ( 0.01%)          self.tcx.hir_attrs(id.owner).get(id.local_id)
1,691,752 ( 0.10%)      }
        .           
        .               /// Gets the span of the definition of the specified HIR node.
        .               /// This is used by `tcx.get_span`
    3,858 ( 0.00%)      pub fn span(&self, hir_id: HirId) -> Span {
   36,386 ( 0.00%)          self.opt_span(hir_id)
        .                       .unwrap_or_else(|| bug!("hir::map::Map::span: id not in map: {:?}", hir_id))
    3,858 ( 0.00%)      }
        .           
   76,069 ( 0.00%)      pub fn opt_span(&self, hir_id: HirId) -> Option<Span> {
   76,069 ( 0.00%)          let span = match self.find(hir_id)? {
        .                       Node::Param(param) => param.span,
      980 ( 0.00%)              Node::Item(item) => match &item.kind {
        .                           ItemKind::Fn(sig, _, _) => sig.span,
      588 ( 0.00%)                  _ => item.span,
        .                       },
        .                       Node::ForeignItem(foreign_item) => foreign_item.span,
       16 ( 0.00%)              Node::TraitItem(trait_item) => match &trait_item.kind {
       16 ( 0.00%)                  TraitItemKind::Fn(sig, _) => sig.span,
        .                           _ => trait_item.span,
        .                       },
    1,480 ( 0.00%)              Node::ImplItem(impl_item) => match &impl_item.kind {
    1,464 ( 0.00%)                  ImplItemKind::Fn(sig, _) => sig.span,
       16 ( 0.00%)                  _ => impl_item.span,
        .                       },
      108 ( 0.00%)              Node::Variant(variant) => variant.span,
       70 ( 0.00%)              Node::Field(field) => field.span,
       35 ( 0.00%)              Node::AnonConst(constant) => self.body(constant.body).value.span,
        .                       Node::Expr(expr) => expr.span,
        .                       Node::Stmt(stmt) => stmt.span,
        .                       Node::PathSegment(seg) => seg.ident.span,
        .                       Node::Ty(ty) => ty.span,
        .                       Node::TraitRef(tr) => tr.path.span,
        .                       Node::Binding(pat) => pat.span,
        .                       Node::Pat(pat) => pat.span,
        .                       Node::Arm(arm) => arm.span,
        .                       Node::Block(block) => block.span,
      437 ( 0.00%)              Node::Ctor(..) => match self.find(self.get_parent_node(hir_id))? {
        .                           Node::Item(item) => item.span,
        .                           Node::Variant(variant) => variant.span,
        .                           _ => unreachable!(),
        .                       },
        .                       Node::Lifetime(lifetime) => lifetime.span,
        .                       Node::GenericParam(param) => param.span,
        .                       Node::Visibility(&Spanned {
        .                           node: VisibilityKind::Restricted { ref path, .. },
        .                           ..
        .                       }) => path.span,
        .                       Node::Infer(i) => i.span,
        .                       Node::Visibility(v) => bug!("unexpected Visibility {:?}", v),
        .                       Node::Local(local) => local.span,
        4 ( 0.00%)              Node::Crate(item) => item.inner,
        .                   };
        .                   Some(span)
  108,670 ( 0.01%)      }
        .           
        .               /// Like `hir.span()`, but includes the body of function items
        .               /// (instead of just the function header)
        .               pub fn span_with_body(&self, hir_id: HirId) -> Span {
        .                   match self.find(hir_id) {
        .                       Some(Node::TraitItem(item)) => item.span,
        .                       Some(Node::ImplItem(impl_item)) => impl_item.span,
        .                       Some(Node::Item(item)) => item.span,
        .                       Some(_) => self.span(hir_id),
        .                       _ => bug!("hir::map::Map::span_with_body: id not in map: {:?}", hir_id),
        .                   }
        .               }
        .           
      180 ( 0.00%)      pub fn span_if_local(&self, id: DefId) -> Option<Span> {
    1,528 ( 0.00%)          id.as_local().and_then(|id| self.opt_span(self.local_def_id_to_hir_id(id)))
      270 ( 0.00%)      }
        .           
        .               pub fn res_span(&self, res: Res) -> Option<Span> {
        .                   match res {
        .                       Res::Err => None,
        .                       Res::Local(id) => Some(self.span(id)),
        .                       res => self.span_if_local(res.opt_def_id()?),
        .                   }
        .               }
-- line 1042 ----------------------------------------
-- line 1062 ----------------------------------------
        .           }
        .           
        .           impl<'hir> intravisit::Map<'hir> for Map<'hir> {
        .               fn find(&self, hir_id: HirId) -> Option<Node<'hir>> {
        .                   self.find(hir_id)
        .               }
        .           
        .               fn body(&self, id: BodyId) -> &'hir Body<'hir> {
    5,538 ( 0.00%)          self.body(id)
        .               }
        .           
        .               fn item(&self, id: ItemId) -> &'hir Item<'hir> {
    4,018 ( 0.00%)          self.item(id)
        .               }
        .           
        .               fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
       28 ( 0.00%)          self.trait_item(id)
        .               }
        .           
        .               fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
    2,674 ( 0.00%)          self.impl_item(id)
        .               }
        .           
        .               fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
        .                   self.foreign_item(id)
        .               }
        .           }
        .           
        7 ( 0.00%)  pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {
        .               debug_assert_eq!(crate_num, LOCAL_CRATE);
        .               let krate = tcx.hir_crate(());
        3 ( 0.00%)      let hir_body_hash = krate.hir_hash;
        .           
        .               let upstream_crates = upstream_crates(tcx);
        .           
        .               // We hash the final, remapped names of all local source files so we
        .               // don't have to include the path prefix remapping commandline args.
        .               // If we included the full mapping in the SVH, we could only have
        .               // reproducible builds by compiling from the same directory. So we just
        .               // hash the result of the mapping instead of the mapping itself.
        2 ( 0.00%)      let mut source_file_names: Vec<_> = tcx
        .                   .sess
        .                   .source_map()
        .                   .files()
        .                   .iter()
        .                   .filter(|source_file| source_file.cnum == LOCAL_CRATE)
       20 ( 0.00%)          .map(|source_file| source_file.name_hash)
        .                   .collect();
        .           
        .               source_file_names.sort_unstable();
        .           
        .               let mut hcx = tcx.create_stable_hashing_context();
        .               let mut stable_hasher = StableHasher::new();
        .               hir_body_hash.hash_stable(&mut hcx, &mut stable_hasher);
        .               upstream_crates.hash_stable(&mut hcx, &mut stable_hasher);
        .               source_file_names.hash_stable(&mut hcx, &mut stable_hasher);
        3 ( 0.00%)      if tcx.sess.opts.debugging_opts.incremental_relative_spans {
        .                   let definitions = &tcx.untracked_resolutions.definitions;
        .                   let mut owner_spans: Vec<_> = krate
        .                       .owners
        .                       .iter_enumerated()
        .                       .filter_map(|(def_id, info)| {
        .                           let _ = info.as_ref()?;
        .                           let def_path_hash = definitions.def_path_hash(def_id);
        .                           let span = definitions.def_span(def_id);
        .                           debug_assert_eq!(span.parent(), None);
        .                           Some((def_path_hash, span))
        .                       })
        .                       .collect();
        .                   owner_spans.sort_unstable_by_key(|bn| bn.0);
        .                   owner_spans.hash_stable(&mut hcx, &mut stable_hasher);
        .               }
        3 ( 0.00%)      tcx.sess.opts.dep_tracking_hash(true).hash_stable(&mut hcx, &mut stable_hasher);
        2 ( 0.00%)      tcx.sess.local_stable_crate_id().hash_stable(&mut hcx, &mut stable_hasher);
        .           
        .               let crate_hash: Fingerprint = stable_hasher.finish();
        1 ( 0.00%)      Svh::new(crate_hash.to_smaller_hash())
        9 ( 0.00%)  }
        .           
        .           fn upstream_crates(tcx: TyCtxt<'_>) -> Vec<(StableCrateId, Svh)> {
        .               let mut upstream_crates: Vec<_> = tcx
        .                   .crates(())
        .                   .iter()
        .                   .map(|&cnum| {
      135 ( 0.00%)              let stable_crate_id = tcx.resolutions(()).cstore.stable_crate_id(cnum);
       27 ( 0.00%)              let hash = tcx.crate_hash(cnum);
        .                       (stable_crate_id, hash)
        .                   })
        .                   .collect();
        .               upstream_crates.sort_unstable_by_key(|&(stable_crate_id, _)| stable_crate_id);
        .               upstream_crates
        .           }
        .           
        .           fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {
-- line 1155 ----------------------------------------
-- line 1238 ----------------------------------------
        .                   Some(Node::Lifetime(_)) => node_str("lifetime"),
        .                   Some(Node::GenericParam(ref param)) => format!("generic_param {:?}{}", param, id_str),
        .                   Some(Node::Visibility(ref vis)) => format!("visibility {:?}{}", vis, id_str),
        .                   Some(Node::Crate(..)) => String::from("root_crate"),
        .                   None => format!("unknown node{}", id_str),
        .               }
        .           }
        .           
       63 ( 0.00%)  pub(super) fn hir_module_items(tcx: TyCtxt<'_>, module_id: LocalDefId) -> ModuleItems {
       42 ( 0.00%)      let mut collector = ModuleCollector {
        .                   tcx,
        .                   submodules: Vec::default(),
        .                   items: Vec::default(),
        .                   trait_items: Vec::default(),
        .                   impl_items: Vec::default(),
        .                   foreign_items: Vec::default(),
        .               };
        .           
       35 ( 0.00%)      let (hir_mod, span, hir_id) = tcx.hir().get_module(module_id);
        .               collector.visit_mod(hir_mod, span, hir_id);
        .           
      112 ( 0.00%)      let ModuleCollector { submodules, items, trait_items, impl_items, foreign_items, .. } =
        .                   collector;
       77 ( 0.00%)      return ModuleItems {
       28 ( 0.00%)          submodules: submodules.into_boxed_slice(),
       28 ( 0.00%)          items: items.into_boxed_slice(),
       28 ( 0.00%)          trait_items: trait_items.into_boxed_slice(),
       28 ( 0.00%)          impl_items: impl_items.into_boxed_slice(),
       28 ( 0.00%)          foreign_items: foreign_items.into_boxed_slice(),
        .               };
        .           
        .               struct ModuleCollector<'tcx> {
        .                   tcx: TyCtxt<'tcx>,
        .                   submodules: Vec<LocalDefId>,
        .                   items: Vec<ItemId>,
        .                   trait_items: Vec<TraitItemId>,
        .                   impl_items: Vec<ImplItemId>,
        .                   foreign_items: Vec<ForeignItemId>,
        .               }
        .           
        .               impl<'hir> Visitor<'hir> for ModuleCollector<'hir> {
        .                   type NestedFilter = nested_filter::All;
        .           
        .                   fn nested_visit_map(&mut self) -> Self::Map {
      778 ( 0.00%)              self.tcx.hir()
        .                   }
        .           
    1,560 ( 0.00%)          fn visit_item(&mut self, item: &'hir Item<'hir>) {
      936 ( 0.00%)              self.items.push(item.item_id());
      624 ( 0.00%)              if let ItemKind::Mod(..) = item.kind {
        .                           // If this declares another module, do not recurse inside it.
        6 ( 0.00%)                  self.submodules.push(item.def_id);
        .                       } else {
    1,836 ( 0.00%)                  intravisit::walk_item(self, item)
        .                       }
       24 ( 0.00%)          }
        .           
        .                   fn visit_trait_item(&mut self, item: &'hir TraitItem<'hir>) {
        6 ( 0.00%)              self.trait_items.push(item.trait_item_id());
        6 ( 0.00%)              intravisit::walk_trait_item(self, item)
        .                   }
        .           
        .                   fn visit_impl_item(&mut self, item: &'hir ImplItem<'hir>) {
      573 ( 0.00%)              self.impl_items.push(item.impl_item_id());
      573 ( 0.00%)              intravisit::walk_impl_item(self, item)
        .                   }
        .           
        .                   fn visit_foreign_item(&mut self, item: &'hir ForeignItem<'hir>) {
        .                       self.foreign_items.push(item.foreign_item_id());
        .                       intravisit::walk_foreign_item(self, item)
        .                   }
        .               }
       56 ( 0.00%)  }

  496,904 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir                 

-- line 186 ----------------------------------------
        .           /// // use the values stored in map
        .           /// ```
        .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
        .               pub(crate) hash_builder: S,
        .               pub(crate) table: RawTable<(K, V), A>,
        .           }
        .           
        .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
      576 ( 0.00%)      fn clone(&self) -> Self {
    2,512 ( 0.00%)          HashMap {
        .                       hash_builder: self.hash_builder.clone(),
      495 ( 0.00%)              table: self.table.clone(),
        .                   }
      648 ( 0.00%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   self.table.clone_from(&source.table);
        .           
        .                   // Update hash_builder only if we successfully cloned all elements.
        .                   self.hash_builder.clone_from(&source.hash_builder);
        .               }
        .           }
-- line 207 ----------------------------------------
-- line 210 ----------------------------------------
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash,
        .               S: BuildHasher,
        .           {
  105,396 ( 0.01%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
        .           }
        .           
        .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: ?Sized + Eq,
        .           {
  365,743 ( 0.02%)      move |x| k.eq(x.0.borrow())
        .           }
        .           
        .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: ?Sized + Eq,
        .           {
  361,573 ( 0.02%)      move |x| k.eq(x.borrow())
        .           }
        .           
        .           #[cfg(not(feature = "nightly"))]
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
        .               use core::hash::Hasher;
        .               let mut state = hash_builder.build_hasher();
        .               val.hash(&mut state);
        .               state.finish()
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           #[cfg_attr(feature = "inline-more", inline)]
        4 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash + ?Sized,
        .               S: BuildHasher,
        .           {
        .               hash_builder.hash_one(val)
        8 ( 0.00%)  }
        .           
        .           #[cfg(not(feature = "nightly"))]
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
        .           where
        .               K: Hash,
        .               S: BuildHasher,
        .           {
-- line 274 ----------------------------------------
-- line 367 ----------------------------------------
        .               /// let s = DefaultHashBuilder::default();
        .               /// let mut map = HashMap::with_hasher(s);
        .               /// map.insert(1, 2);
        .               /// ```
        .               ///
        .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub const fn with_hasher(hash_builder: S) -> Self {
  224,818 ( 0.01%)          Self {
        .                       hash_builder,
        .                       table: RawTable::new(),
        .                   }
        .               }
        .           
        .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
        .               /// to hash the keys.
        .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
        .               /// use hashbrown::hash_map::DefaultHashBuilder;
        .               ///
        .               /// let s = DefaultHashBuilder::default();
        .               /// let mut map = HashMap::with_hasher(s);
        .               /// map.insert(1, 2);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
      913 ( 0.00%)          Self {
        .                       hash_builder,
        .                       table: RawTable::new_in(alloc),
        .                   }
        .               }
        .           
        .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
        .               /// to hash the keys. It will be allocated with the given allocator.
        .               ///
-- line 453 ----------------------------------------
-- line 663 ----------------------------------------
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// assert_eq!(a.len(), 0);
        .               /// a.insert(1, "a");
        .               /// assert_eq!(a.len(), 1);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn len(&self) -> usize {
   13,127 ( 0.00%)          self.table.len()
        .               }
        .           
        .               /// Returns `true` if the map contains no elements.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// assert!(a.is_empty());
        .               /// a.insert(1, "a");
        .               /// assert!(!a.is_empty());
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn is_empty(&self) -> bool {
   92,004 ( 0.01%)          self.len() == 0
        .               }
        .           
        .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
        .               /// allocated memory for reuse.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// a.insert(1, "a");
        .               /// a.clear();
        .               /// assert!(a.is_empty());
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        6 ( 0.00%)      pub fn clear(&mut self) {
        .                   self.table.clear();
        6 ( 0.00%)      }
        .           
        .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
        .               /// The map cannot be used after calling this.
        .               /// The iterator element type is `K`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
        .               /// }
        .               ///
        .               /// assert_eq!(letters[&'s'], 2);
        .               /// assert_eq!(letters[&'t'], 3);
        .               /// assert_eq!(letters[&'u'], 1);
        .               /// assert_eq!(letters.get(&'y'), None);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
      416 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
        .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
        .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
       25 ( 0.00%)              Entry::Occupied(OccupiedEntry {
        .                           hash,
        .                           key: Some(key),
        .                           elem,
        .                           table: self,
        .                       })
        .                   } else {
      495 ( 0.00%)              Entry::Vacant(VacantEntry {
        .                           hash,
        .                           key,
        .                           table: self,
        .                       })
        .                   }
      520 ( 0.00%)      }
        .           
        .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
        .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
  834,138 ( 0.05%)          match self.get_inner(k) {
        .                       Some(&(_, ref v)) => Some(v),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Returns the key-value pair corresponding to the supplied key.
        .               ///
        .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
        .               }
        .           
        .               #[inline]
        .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
  909,546 ( 0.06%)          if self.table.is_empty() {
        .                       None
        .                   } else {
        2 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
        .                       self.table.get(hash, equivalent_key(k))
        .                   }
        .               }
        .           
        .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
        .               ///
        .               /// The supplied key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// assert_eq!(map.contains_key(&1), true);
        .               /// assert_eq!(map.contains_key(&2), false);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
  276,089 ( 0.02%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   self.get_inner(k).is_some()
  349,404 ( 0.02%)      }
        .           
        .               /// Returns a mutable reference to the value corresponding to the key.
        .               ///
        .               /// The key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
        .               ///
        .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// if let Some(x) = map.get_mut(&1) {
        .               ///     *x = "b";
        .               /// }
        .               /// assert_eq!(map[&1], "b");
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
      515 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
    1,545 ( 0.00%)          match self.get_inner_mut(k) {
        .                       Some(&mut (_, ref mut v)) => Some(v),
        .                       None => None,
        .                   }
    1,030 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
      515 ( 0.00%)          if self.table.is_empty() {
        .                       None
        .                   } else {
        .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
        .                       self.table.get_mut(hash, equivalent_key(k))
        .                   }
        .               }
        .           
        .               /// Attempts to get mutable references to `N` values in the map at once.
-- line 1219 ----------------------------------------
-- line 1495 ----------------------------------------
        .               /// assert_eq!(map.insert(37, "a"), None);
        .               /// assert_eq!(map.is_empty(), false);
        .               ///
        .               /// map.insert(37, "b");
        .               /// assert_eq!(map.insert(37, "c"), Some("b"));
        .               /// assert_eq!(map[&37], "c");
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
2,382,664 ( 0.15%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
        .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
      390 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
        4 ( 0.00%)              Some(mem::replace(item, v))
        .                   } else {
1,123,233 ( 0.07%)              self.table
  901,568 ( 0.06%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
  105,794 ( 0.01%)              None
        .                   }
2,268,173 ( 0.14%)      }
        .           
        .               /// Insert a key-value pair into the map without checking
        .               /// if the key already exists in the map.
        .               ///
        .               /// Returns a reference to the key and value just inserted.
        .               ///
        .               /// This operation is safe if a key does not exist in the map.
        .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// assert_eq!(map.remove(&1), Some("a"));
        .               /// assert_eq!(map.remove(&1), None);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
   84,652 ( 0.01%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
  520,844 ( 0.03%)          match self.remove_entry(k) {
   33,456 ( 0.00%)              Some((_, v)) => Some(v),
   61,750 ( 0.00%)              None => None,
        .                   }
  197,180 ( 0.01%)      }
        .           
        .               /// Removes a key from the map, returning the stored key and value if the
        .               /// key was previously in the map.
        .               ///
        .               /// The key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
        .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
  200,719 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
        .               }
        .           }
        .           
        .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
        .               /// Creates a raw entry builder for the HashMap.
        .               ///
        .               /// Raw entries provide the lowest level of control for searching and
        .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2209 ----------------------------------------
        .               /// Creates a `RawEntryMut` from the given key and its hash.
        .               #[inline]
        .               #[allow(clippy::wrong_self_convention)]
        .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Eq,
        .               {
1,790,512 ( 0.11%)          self.from_hash(hash, equivalent(k))
        .               }
        .           }
        .           
        .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
        .               /// Creates a `RawEntryMut` from the given hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
4,777,874 ( 0.29%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   for<'b> F: FnMut(&'b K) -> bool,
        .               {
        .                   self.search(hash, is_match)
5,088,674 ( 0.31%)      }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   for<'b> F: FnMut(&'b K) -> bool,
        .               {
  516,798 ( 0.03%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
2,674,646 ( 0.16%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
        .                           elem,
        .                           table: &mut self.map.table,
        .                           hash_builder: &self.map.hash_builder,
        .                       }),
  460,362 ( 0.03%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
        .                           table: &mut self.map.table,
        .                           hash_builder: &self.map.hash_builder,
        .                       }),
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
        .               {
        .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
        .                   self.from_key_hashed_nocheck(hash, k)
        .               }
        .           
        .               /// Access an entry by a key and its hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
1,053,675 ( 0.06%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Eq,
        .               {
1,222,274 ( 0.08%)          self.from_hash(hash, equivalent(k))
1,921,612 ( 0.12%)      }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
        .               where
        .                   F: FnMut(&K) -> bool,
        .               {
2,017,652 ( 0.12%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
        .                       Some(&(ref key, ref value)) => Some((key, value)),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Access an entry by hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
        .               /// and returns a mutable reference to it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::shadow_unrelated)]
        .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
        .               where
        .                   K: Hash,
        .                   S: BuildHasher,
        .               {
  754,480 ( 0.05%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
        .                       hash,
        .                       (key, value),
        .                       make_hasher::<K, _, V, S>(self.hash_builder),
        .                   );
        .                   (k, v)
        .               }
        .           
        .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
        .               /// map.insert("a", 1);
        .               /// map.insert("b", 2);
        .               /// map.insert("c", 3);
        .               ///
        .               /// // Not possible with .iter()
        .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
      956 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
   19,726 ( 0.00%)          IntoIter {
   12,257 ( 0.00%)              inner: self.table.into_iter(),
        .                   }
    2,868 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
        .               type Item = (&'a K, &'a V);
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
  123,537 ( 0.01%)          match self.inner.next() {
        .                       Some(x) => unsafe {
        .                           let r = x.as_ref();
    1,023 ( 0.00%)                  Some((&r.0, &r.1))
        .                       },
        .                       None => None,
        .                   }
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
       16 ( 0.00%)          self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V> ExactSizeIterator for Iter<'_, K, V> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn len(&self) -> usize {
        .                   self.inner.len()
        .               }
        .           }
-- line 3013 ----------------------------------------
-- line 3018 ----------------------------------------
        .               type Item = (&'a K, &'a mut V);
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<(&'a K, &'a mut V)> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match self.inner.next() {
        .                       Some(x) => unsafe {
        .                           let r = x.as_mut();
       21 ( 0.00%)                  Some((&r.0, &mut r.1))
        .                       },
        .                       None => None,
        .                   }
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
-- line 3034 ----------------------------------------
-- line 3051 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
        .               type Item = (K, V);
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<(K, V)> {
    1,242 ( 0.00%)          self.inner.next()
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
        .                   f.debug_list().entries(self.iter()).finish()
        .               }
        .           }
        .           
        .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
        .               type Item = &'a K;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
      183 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match self.inner.next() {
        .                       Some((k, _)) => Some(k),
        .                       None => None,
        .                   }
      366 ( 0.00%)      }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 3819 ----------------------------------------
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn insert(self, value: V) -> &'a mut V
        .               where
        .                   K: Hash,
        .                   S: BuildHasher,
        .               {
        .                   let table = &mut self.table.table;
       38 ( 0.00%)          let entry = table.insert_entry(
        .                       self.hash,
        .                       (self.key, value),
        .                       make_hasher::<K, _, V, S>(&self.table.hash_builder),
        .                   );
        .                   &mut entry.1
        .               }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3835 ----------------------------------------
-- line 4557 ----------------------------------------
        .           /// keys with new values returned from the iterator.
        .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
        .           where
        .               K: Eq + Hash,
        .               S: BuildHasher,
        .               A: Allocator + Clone,
        .           {
        .               #[cfg_attr(feature = "inline-more", inline)]
   25,268 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
        .                   // Keys may be already present or show multiple times in the iterator.
        .                   // Reserve the entire hint lower bound if the map is empty.
        .                   // Otherwise reserve half the hint (rounded up), so the map
        .                   // will only resize twice in the worst case.
   18,943 ( 0.00%)          let iter = iter.into_iter();
   20,022 ( 0.00%)          let reserve = if self.is_empty() {
        .                       iter.size_hint().0
        .                   } else {
      857 ( 0.00%)              (iter.size_hint().0 + 1) / 2
        .                   };
        .                   self.reserve(reserve);
        .                   iter.for_each(move |(k, v)| {
   73,253 ( 0.00%)              self.insert(k, v);
        .                   });
   17,848 ( 0.00%)      }
        .           
        .               #[inline]
        .               #[cfg(feature = "nightly")]
        .               fn extend_one(&mut self, (k, v): (K, V)) {
        .                   self.insert(k, v);
        .               }
        .           
        .               #[inline]
-- line 4588 ----------------------------------------

2,186,591 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs
--------------------------------------------------------------------------------
Ir                 

-- line 22 ----------------------------------------
        .           
        .           /// An entity in the Rust type system, which can be one of
        .           /// several kinds (types, lifetimes, and consts).
        .           /// To reduce memory usage, a `GenericArg` is an interned pointer,
        .           /// with the lowest 2 bits being reserved for a tag to
        .           /// indicate the type (`Ty`, `Region`, or `Const`) it points to.
        .           #[derive(Copy, Clone, PartialEq, Eq, Hash)]
        .           pub struct GenericArg<'tcx> {
  239,750 ( 0.01%)      ptr: NonZeroUsize,
  683,781 ( 0.04%)      marker: PhantomData<(Ty<'tcx>, ty::Region<'tcx>, &'tcx ty::Const<'tcx>)>,
        .           }
        .           
        .           const TAG_MASK: usize = 0b11;
        .           const TYPE_TAG: usize = 0b00;
        .           const REGION_TAG: usize = 0b01;
        .           const CONST_TAG: usize = 0b10;
        .           
   61,938 ( 0.00%)  #[derive(Debug, TyEncodable, TyDecodable, PartialEq, Eq, PartialOrd, Ord, HashStable)]
        .           pub enum GenericArgKind<'tcx> {
        .               Lifetime(ty::Region<'tcx>),
        .               Type(Ty<'tcx>),
        .               Const(&'tcx ty::Const<'tcx>),
        .           }
        .           
        .           impl<'tcx> GenericArgKind<'tcx> {
   16,209 ( 0.00%)      fn pack(self) -> GenericArg<'tcx> {
   16,209 ( 0.00%)          let (tag, ptr) = match self {
        .                       GenericArgKind::Lifetime(lt) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(lt) & TAG_MASK, 0);
        .                           (REGION_TAG, lt as *const _ as usize)
        .                       }
        .                       GenericArgKind::Type(ty) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(ty) & TAG_MASK, 0);
-- line 56 ----------------------------------------
-- line 58 ----------------------------------------
        .                       }
        .                       GenericArgKind::Const(ct) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(ct) & TAG_MASK, 0);
        .                           (CONST_TAG, ct as *const _ as usize)
        .                       }
        .                   };
        .           
  148,139 ( 0.01%)          GenericArg { ptr: unsafe { NonZeroUsize::new_unchecked(ptr | tag) }, marker: PhantomData }
   16,209 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> fmt::Debug for GenericArg<'tcx> {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   match self.unpack() {
        .                       GenericArgKind::Lifetime(lt) => lt.fmt(f),
        .                       GenericArgKind::Type(ty) => ty.fmt(f),
        .                       GenericArgKind::Const(ct) => ct.fmt(f),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> Ord for GenericArg<'tcx> {
       15 ( 0.00%)      fn cmp(&self, other: &GenericArg<'_>) -> Ordering {
       10 ( 0.00%)          self.unpack().cmp(&other.unpack())
       16 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> PartialOrd for GenericArg<'tcx> {
        .               fn partial_cmp(&self, other: &GenericArg<'_>) -> Option<Ordering> {
        .                   Some(self.cmp(&other))
        .               }
        .           }
        .           
        .           impl<'tcx> From<ty::Region<'tcx>> for GenericArg<'tcx> {
   97,243 ( 0.01%)      fn from(r: ty::Region<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Lifetime(r).pack()
   97,243 ( 0.01%)      }
        .           }
        .           
        .           impl<'tcx> From<Ty<'tcx>> for GenericArg<'tcx> {
  309,662 ( 0.02%)      fn from(ty: Ty<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Type(ty).pack()
  309,662 ( 0.02%)      }
        .           }
        .           
        .           impl<'tcx> From<&'tcx ty::Const<'tcx>> for GenericArg<'tcx> {
      278 ( 0.00%)      fn from(c: &'tcx ty::Const<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Const(c).pack()
      278 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> GenericArg<'tcx> {
        .               #[inline]
        .               pub fn unpack(self) -> GenericArgKind<'tcx> {
        .                   let ptr = self.ptr.get();
        .                   unsafe {
4,633,576 ( 0.28%)              match ptr & TAG_MASK {
   78,737 ( 0.00%)                  REGION_TAG => GenericArgKind::Lifetime(&*((ptr & !TAG_MASK) as *const _)),
1,055,453 ( 0.06%)                  TYPE_TAG => GenericArgKind::Type(&*((ptr & !TAG_MASK) as *const _)),
      688 ( 0.00%)                  CONST_TAG => GenericArgKind::Const(&*((ptr & !TAG_MASK) as *const _)),
        .                           _ => intrinsics::unreachable(),
        .                       }
        .                   }
        .               }
        .           
        .               /// Unpack the `GenericArg` as a type when it is known certainly to be a type.
        .               /// This is true in cases where `Substs` is used in places where the kinds are known
        .               /// to be limited (e.g. in tuples, where the only parameters are type parameters).
        .               pub fn expect_ty(self) -> Ty<'tcx> {
        .                   match self.unpack() {
        .                       GenericArgKind::Type(ty) => ty,
        .                       _ => bug!("expected a type, but found another kind"),
        .                   }
   24,786 ( 0.00%)      }
        .           
        .               /// Unpack the `GenericArg` as a const when it is known certainly to be a const.
        .               pub fn expect_const(self) -> &'tcx ty::Const<'tcx> {
        .                   match self.unpack() {
        .                       GenericArgKind::Const(c) => c,
        .                       _ => bug!("expected a const, but found another kind"),
        .                   }
        .               }
-- line 140 ----------------------------------------
-- line 170 ----------------------------------------
        .                       GenericArgKind::Type(ty) => ty.visit_with(visitor),
        .                       GenericArgKind::Const(ct) => ct.visit_with(visitor),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for GenericArg<'tcx> {
        .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
    1,911 ( 0.00%)          self.unpack().encode(e)
        .               }
        .           }
        .           
        .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for GenericArg<'tcx> {
   81,045 ( 0.00%)      fn decode(d: &mut D) -> GenericArg<'tcx> {
   81,045 ( 0.00%)          GenericArgKind::decode(d).pack()
        .               }
        .           }
        .           
        .           /// A substitution mapping generic parameters to new values.
        .           pub type InternalSubsts<'tcx> = List<GenericArg<'tcx>>;
        .           
        .           pub type SubstsRef<'tcx> = &'tcx InternalSubsts<'tcx>;
        .           
        .           impl<'a, 'tcx> InternalSubsts<'tcx> {
        .               /// Interpret these substitutions as the substitutions of a closure type.
        .               /// Closure substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the signature and closure kind;
        .               /// see `ty::ClosureSubsts` struct for more comments.
    1,939 ( 0.00%)      pub fn as_closure(&'a self) -> ClosureSubsts<'a> {
        .                   ClosureSubsts { substs: self }
    1,939 ( 0.00%)      }
        .           
        .               /// Interpret these substitutions as the substitutions of a generator type.
        .               /// Generator substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the signature and generator kind;
        .               /// see `ty::GeneratorSubsts` struct for more comments.
        .               pub fn as_generator(&'tcx self) -> GeneratorSubsts<'tcx> {
        .                   GeneratorSubsts { substs: self }
        .               }
-- line 208 ----------------------------------------
-- line 211 ----------------------------------------
        .               /// Inline const substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the inferred type;
        .               /// see `ty::InlineConstSubsts` struct for more comments.
        .               pub fn as_inline_const(&'tcx self) -> InlineConstSubsts<'tcx> {
        .                   InlineConstSubsts { substs: self }
        .               }
        .           
        .               /// Creates an `InternalSubsts` that maps each generic parameter to itself.
    8,560 ( 0.00%)      pub fn identity_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {
    1,984 ( 0.00%)          Self::for_item(tcx, def_id, |param, _| tcx.mk_param_from_def(param))
    7,704 ( 0.00%)      }
        .           
        .               /// Creates an `InternalSubsts` for generic parameter definitions,
        .               /// by calling closures to obtain each kind.
        .               /// The closures get to observe the `InternalSubsts` as they're
        .               /// being built, which can be used to correctly
        .               /// substitute defaults of generic parameters.
  121,835 ( 0.01%)      pub fn for_item<F>(tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
        .               where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   let defs = tcx.generics_of(def_id);
        .                   let count = defs.count();
        .                   let mut substs = SmallVec::with_capacity(count);
   44,642 ( 0.00%)          Self::fill_item(&mut substs, tcx, defs, &mut mk_kind);
   27,474 ( 0.00%)          tcx.intern_substs(&substs)
  123,696 ( 0.01%)      }
        .           
        .               pub fn extend_to<F>(&self, tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
        .               where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   Self::for_item(tcx, def_id, |param, substs| {
        .                       self.get(param.index as usize).cloned().unwrap_or_else(|| mk_kind(param, substs))
        .                   })
        .               }
        .           
  161,911 ( 0.01%)      pub fn fill_item<F>(
        .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
        .                   tcx: TyCtxt<'tcx>,
        .                   defs: &ty::Generics,
        .                   mk_kind: &mut F,
        .               ) where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
   67,710 ( 0.00%)          if let Some(def_id) = defs.parent {
        .                       let parent_defs = tcx.generics_of(def_id);
    7,660 ( 0.00%)              Self::fill_item(substs, tcx, parent_defs, mk_kind);
        .                   }
        .                   Self::fill_single(substs, defs, mk_kind)
  129,096 ( 0.01%)      }
        .           
       64 ( 0.00%)      pub fn fill_single<F>(
        .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
        .                   defs: &ty::Generics,
        .                   mk_kind: &mut F,
        .               ) where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   substs.reserve(defs.params.len());
        .                   for param in &defs.params {
        .                       let kind = mk_kind(param, substs);
   94,783 ( 0.01%)              assert_eq!(param.index as usize, substs.len());
        .                       substs.push(kind);
        .                   }
       64 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn types(&'a self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> + 'a {
        .                   self.iter()
        .                       .filter_map(|k| if let GenericArgKind::Type(ty) = k.unpack() { Some(ty) } else { None })
        .               }
        .           
        .               #[inline]
-- line 284 ----------------------------------------
-- line 302 ----------------------------------------
        .                   self.iter().filter_map(|k| match k.unpack() {
        .                       GenericArgKind::Lifetime(_) => None,
        .                       generic => Some(generic),
        .                   })
        .               }
        .           
        .               #[inline]
        .               pub fn type_at(&self, i: usize) -> Ty<'tcx> {
  142,968 ( 0.01%)          if let GenericArgKind::Type(ty) = self[i].unpack() {
        .                       ty
        .                   } else {
        .                       bug!("expected type for param #{} in {:?}", i, self);
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn region_at(&self, i: usize) -> ty::Region<'tcx> {
-- line 318 ----------------------------------------
-- line 350 ----------------------------------------
        .               /// impl<U> X<U> for U { fn f<V>() {} }
        .               /// ```
        .               ///
        .               /// * If `self` is `[Self, S, T]`: the identity substs of `f` in the trait.
        .               /// * If `source_ancestor` is the def_id of the trait.
        .               /// * If `target_substs` is `[U]`, the substs for the impl.
        .               /// * Then we will return `[U, T]`, the subst for `f` in the impl that
        .               ///   are needed for it to match the trait.
    5,586 ( 0.00%)      pub fn rebase_onto(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .                   source_ancestor: DefId,
        .                   target_substs: SubstsRef<'tcx>,
        .               ) -> SubstsRef<'tcx> {
        .                   let defs = tcx.generics_of(source_ancestor);
    1,596 ( 0.00%)          tcx.mk_substs(target_substs.iter().chain(self.iter().skip(defs.params.len())))
    6,384 ( 0.00%)      }
        .           
        .               pub fn truncate_to(&self, tcx: TyCtxt<'tcx>, generics: &ty::Generics) -> SubstsRef<'tcx> {
        .                   tcx.mk_substs(self.iter().take(generics.count()))
        .               }
        .           }
        .           
        .           impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {
   10,864 ( 0.00%)      fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error> {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // The match arms are in order of frequency. The 1, 2, and 0 cases are
        .                   // typically hit in 90--99.99% of cases. When folding doesn't change
        .                   // the substs, it's faster to reuse the existing substs rather than
        .                   // calling `intern_substs`.
  983,278 ( 0.06%)          match self.len() {
        .                       1 => {
  176,183 ( 0.01%)                  let param0 = self[0].try_fold_with(folder)?;
  578,941 ( 0.04%)                  if param0 == self[0] { Ok(self) } else { Ok(folder.tcx().intern_substs(&[param0])) }
        .                       }
        .                       2 => {
  109,181 ( 0.01%)                  let param0 = self[0].try_fold_with(folder)?;
  254,700 ( 0.02%)                  let param1 = self[1].try_fold_with(folder)?;
  258,373 ( 0.02%)                  if param0 == self[0] && param1 == self[1] {
        .                               Ok(self)
        .                           } else {
  225,441 ( 0.01%)                      Ok(folder.tcx().intern_substs(&[param0, param1]))
        .                           }
        .                       }
        .                       0 => Ok(self),
        .                       _ => {
        .                           let params: SmallVec<[_; 8]> =
   16,952 ( 0.00%)                      self.iter().map(|k| k.try_fold_with(folder)).collect::<Result<_, _>>()?;
    1,774 ( 0.00%)                  if params[..] == self[..] {
        .                               Ok(self)
        .                           } else {
    3,864 ( 0.00%)                      Ok(folder.tcx().intern_substs(&params))
        .                           }
        .                       }
        .                   }
   39,971 ( 0.00%)      }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
  144,523 ( 0.01%)          self.iter().try_for_each(|t| t.visit_with(visitor))
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Public trait `Subst`
        .           //
        .           // Just call `foo.subst(tcx, substs)` to perform a substitution across
        .           // `foo`. Or use `foo.subst_spanned(tcx, substs, Some(span))` when
-- line 420 ----------------------------------------
-- line 435 ----------------------------------------
        .           
        .           impl<'tcx, T: TypeFoldable<'tcx>> Subst<'tcx> for T {
        .               fn subst_spanned(
        .                   self,
        .                   tcx: TyCtxt<'tcx>,
        .                   substs: &[GenericArg<'tcx>],
        .                   span: Option<Span>,
        .               ) -> T {
  328,932 ( 0.02%)          let mut folder = SubstFolder { tcx, substs, span, binders_passed: 0 };
        .                   self.fold_with(&mut folder)
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // The actual substitution engine itself is a type folder.
        .           
        .           struct SubstFolder<'a, 'tcx> {
-- line 451 ----------------------------------------
-- line 456 ----------------------------------------
        .               span: Option<Span>,
        .           
        .               /// Number of region binders we have passed through while doing the substitution
        .               binders_passed: u32,
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
   65,079 ( 0.00%)          self.tcx
        .               }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: ty::Binder<'tcx, T>,
        .               ) -> ty::Binder<'tcx, T> {
   83,634 ( 0.01%)          self.binders_passed += 1;
   18,092 ( 0.00%)          let t = t.super_fold_with(self);
   83,634 ( 0.01%)          self.binders_passed -= 1;
        .                   t
        .               }
        .           
  138,264 ( 0.01%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
        .                   // Note: This routine only handles regions that are bound on
        .                   // type declarations and other outer declarations, not those
        .                   // bound in *fn types*. Region substitution of the bound
        .                   // regions that appear in a function signature is done using
        .                   // the specialized routine `ty::replace_late_regions()`.
   46,088 ( 0.00%)          match *r {
   33,896 ( 0.00%)              ty::ReEarlyBound(data) => {
   33,896 ( 0.00%)                  let rk = self.substs.get(data.index as usize).map(|k| k.unpack());
        .                           match rk {
   16,948 ( 0.00%)                      Some(GenericArgKind::Lifetime(lt)) => self.shift_region_through_binders(lt),
        .                               _ => {
        .                                   let span = self.span.unwrap_or(DUMMY_SP);
        .                                   let msg = format!(
        .                                       "Region parameter out of range \
        .                                        when substituting in region {} (index={})",
        .                                       data.name, data.index
        .                                   );
        .                                   span_bug!(span, "{}", msg);
        .                               }
        .                           }
        .                       }
        .                       _ => r,
        .                   }
  161,308 ( 0.01%)      }
        .           
  331,221 ( 0.02%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
  110,407 ( 0.01%)          if !t.needs_subst() {
        .                       return t;
        .                   }
        .           
  155,490 ( 0.01%)          match *t.kind() {
  243,155 ( 0.01%)              ty::Param(p) => self.ty_for_param(p, t),
  174,684 ( 0.01%)              _ => t.super_fold_with(self),
        .                   }
  406,465 ( 0.02%)      }
        .           
    4,473 ( 0.00%)      fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
    2,403 ( 0.00%)          if let ty::ConstKind::Param(p) = c.val {
        .                       self.const_for_param(p, c)
        .                   } else {
    3,726 ( 0.00%)              c.super_fold_with(self)
        .                   }
    1,800 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {
        .                   c.super_fold_with(self)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> SubstFolder<'a, 'tcx> {
        .               fn ty_for_param(&self, p: ty::ParamTy, source_ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   // Look up the type in the substitutions. It really should be in there.
   97,262 ( 0.01%)          let opt_ty = self.substs.get(p.index as usize).map(|k| k.unpack());
        .                   let ty = match opt_ty {
        .                       Some(GenericArgKind::Type(ty)) => ty,
        .                       Some(kind) => {
        .                           let span = self.span.unwrap_or(DUMMY_SP);
        .                           span_bug!(
        .                               span,
        .                               "expected type for `{:?}` ({:?}/{}) but found {:?} \
        .                                when substituting, substs={:?}",
-- line 539 ----------------------------------------
-- line 562 ----------------------------------------
        .               }
        .           
        .               fn const_for_param(
        .                   &self,
        .                   p: ParamConst,
        .                   source_ct: &'tcx ty::Const<'tcx>,
        .               ) -> &'tcx ty::Const<'tcx> {
        .                   // Look up the const in the substitutions. It really should be in there.
      450 ( 0.00%)          let opt_ct = self.substs.get(p.index as usize).map(|k| k.unpack());
        .                   let ct = match opt_ct {
        .                       Some(GenericArgKind::Const(ct)) => ct,
        .                       Some(kind) => {
        .                           let span = self.span.unwrap_or(DUMMY_SP);
        .                           span_bug!(
        .                               span,
        .                               "expected const for `{:?}` ({:?}/{}) but found {:?} \
        .                                when substituting substs={:?}",
-- line 578 ----------------------------------------
-- line 645 ----------------------------------------
        .               fn shift_vars_through_binders<T: TypeFoldable<'tcx>>(&self, val: T) -> T {
        .                   debug!(
        .                       "shift_vars(val={:?}, binders_passed={:?}, has_escaping_bound_vars={:?})",
        .                       val,
        .                       self.binders_passed,
        .                       val.has_escaping_bound_vars()
        .                   );
        .           
  175,907 ( 0.01%)          if self.binders_passed == 0 || !val.has_escaping_bound_vars() {
        .                       return val;
        .                   }
        .           
        .                   let result = ty::fold::shift_vars(self.tcx(), val, self.binders_passed);
        .                   debug!("shift_vars: shifted result = {:?}", result);
        .           
        .                   result
        .               }
        .           
        .               fn shift_region_through_binders(&self, region: ty::Region<'tcx>) -> ty::Region<'tcx> {
   40,125 ( 0.00%)          if self.binders_passed == 0 || !region.has_escaping_bound_vars() {
        .                       return region;
        .                   }
        .                   ty::fold::shift_region(self.tcx, region, self.binders_passed)
        .               }
        .           }
        .           
        .           /// Stores the user-given substs to reach some fully qualified path
        .           /// (e.g., `<T>::Item` or `<T as Trait>::Item`).
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
    6,882 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct UserSubsts<'tcx> {
        .               /// The substitutions for the item as given by the user.
        .               pub substs: SubstsRef<'tcx>,
        .           
        .               /// The self type, in the case of a `<T>::Item` path (when applied
        .               /// to an inherent impl). See `UserSelfTy` below.
    1,148 ( 0.00%)      pub user_self_ty: Option<UserSelfTy<'tcx>>,
        .           }
        .           
        .           /// Specifies the user-given self type. In the case of a path that
        .           /// refers to a member in an inherent impl, this self type is
        .           /// sometimes needed to constrain the type parameters on the impl. For
        .           /// example, in this code:
        .           ///
        .           /// ```
-- line 689 ----------------------------------------
-- line 696 ----------------------------------------
        .           /// self type `Foo<u32>`. Then we can instantiate the parameters of
        .           /// the impl (with the substs from `UserSubsts`) and apply those to
        .           /// the self type, giving `Foo<?A>`. Finally, we unify that with
        .           /// the self type here, which contains `?A` to be `&'static u32`
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
        .           #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct UserSelfTy<'tcx> {
        .               pub impl_def_id: DefId,
    1,044 ( 0.00%)      pub self_ty: Ty<'tcx>,
        .           }

1,628,266 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 42 ----------------------------------------
      .           /// `stack_size` bytes.
      .           ///
      .           /// The closure `f` is guaranteed to run on a stack with at least `red_zone` bytes, and it will be
      .           /// run on the current stack if there's space available.
      .           #[inline(always)]
      .           pub fn maybe_grow<R, F: FnOnce() -> R>(red_zone: usize, stack_size: usize, callback: F) -> R {
      .               // if we can't guess the remaining stack (unsupported on some platforms) we immediately grow
      .               // the stack and then cache the new stack size (which we do know now because we allocated it.
382,541 ( 0.02%)      let enough_space = match remaining_stack() {
      .                   Some(remaining) => remaining >= red_zone,
      .                   None => false,
      .               };
539,361 ( 0.03%)      if enough_space {
 28,865 ( 0.00%)          callback()
      .               } else {
      .                   grow(stack_size, callback)
      .               }
      .           }
      .           
      .           /// Always creates a new stack for the passed closure to run on.
      .           /// The closure will still be on the same thread as the caller of `grow`.
      .           /// This will allocate a new stack with at least `stack_size` bytes.
-- line 63 ----------------------------------------
-- line 82 ----------------------------------------
      .               _grow(stack_size, dyn_callback);
      .               ret.unwrap()
      .           }
      .           
      .           /// Queries the amount of remaining stack as interpreted by this library.
      .           ///
      .           /// This function will return the amount of stack space left which will be used
      .           /// to determine whether a stack switch should be made or not.
359,574 ( 0.02%)  pub fn remaining_stack() -> Option<usize> {
      .               let current_ptr = current_stack_ptr();
359,574 ( 0.02%)      get_stack_limit().map(|limit| current_ptr - limit)
719,148 ( 0.04%)  }
      .           
      .           psm_stack_information! (
      .               yes {
      .                   fn current_stack_ptr() -> usize {
359,574 ( 0.02%)              psm::stack_pointer() as usize
      .                   }
      .               }
      .               no {
      .                   #[inline(always)]
      .                   fn current_stack_ptr() -> usize {
      .                       unsafe {
      .                           let mut x = std::mem::MaybeUninit::<u8>::uninit();
      .                           // Unlikely to be ever exercised. As a fallback we execute a volatile read to a
-- line 106 ----------------------------------------
-- line 111 ----------------------------------------
      .                           x.as_ptr() as usize
      .                       }
      .                   }
      .               }
      .           );
      .           
      .           thread_local! {
      .               static STACK_LIMIT: Cell<Option<usize>> = Cell::new(unsafe {
      1 ( 0.00%)          guess_os_stack_limit()
      .               })
      .           }
      .           
      .           #[inline(always)]
      .           fn get_stack_limit() -> Option<usize> {
      .               STACK_LIMIT.with(|s| s.get())
      .           }
      .           
-- line 127 ----------------------------------------
-- line 403 ----------------------------------------
      .                       VirtualQuery(
      .                           psm::stack_pointer() as *const _,
      .                           mi.as_mut_ptr(),
      .                           std::mem::size_of::<QueryT>() as SIZE_T,
      .                       );
      .                       Some(mi.assume_init().AllocationBase as usize + get_thread_stack_guarantee() + 0x1000)
      .                   }
      .               } else if #[cfg(any(target_os = "linux", target_os="solaris", target_os = "netbsd"))] {
      2 ( 0.00%)          unsafe fn guess_os_stack_limit() -> Option<usize> {
      .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
      7 ( 0.00%)              assert_eq!(libc::pthread_getattr_np(libc::pthread_self(),
      .                                                           attr.as_mut_ptr()), 0);
      1 ( 0.00%)              let mut stackaddr = std::ptr::null_mut();
      4 ( 0.00%)              let mut stacksize = 0;
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_getstack(
      .                           attr.as_ptr(), &mut stackaddr, &mut stacksize
      .                       ), 0);
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_destroy(attr.as_mut_ptr()), 0);
      1 ( 0.00%)              Some(stackaddr as usize)
      3 ( 0.00%)          }
      .               } else if #[cfg(any(target_os = "freebsd", target_os = "dragonfly"))] {
      .                   unsafe fn guess_os_stack_limit() -> Option<usize> {
      .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
      .                       assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
      .                       assert_eq!(libc::pthread_attr_get_np(libc::pthread_self(), attr.as_mut_ptr()), 0);
      .                       let mut stackaddr = std::ptr::null_mut();
      .                       let mut stacksize = 0;
      .                       assert_eq!(libc::pthread_attr_getstack(
-- line 431 ----------------------------------------

226,747 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs
--------------------------------------------------------------------------------
Ir                 

-- line 48 ----------------------------------------
        .           //
        .           // FIXME: we have to do something for moving slice patterns.
        .           fn place_contents_drop_state_cannot_differ<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               place: mir::Place<'tcx>,
        .           ) -> bool {
        .               let ty = place.ty(body, tcx).ty;
  407,010 ( 0.03%)      match ty.kind() {
        .                   ty::Array(..) => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} => false",
        .                           place, ty
        .                       );
        .                       false
        .                   }
        .                   ty::Slice(..) | ty::Ref(..) | ty::RawPtr(..) => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} refd => true",
        .                           place, ty
        .                       );
        .                       true
        .                   }
  170,361 ( 0.01%)          ty::Adt(def, _) if (def.has_dtor(tcx) && !def.is_box()) || def.is_union() => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} Drop => true",
        .                           place, ty
        .                       );
        .                       true
        .                   }
        .                   _ => false,
        .               }
-- line 79 ----------------------------------------
-- line 83 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               lookup_result: LookupResult,
        .               each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
   10,550 ( 0.00%)      match lookup_result {
        .                   LookupResult::Parent(..) => {
        .                       // access to untracked value - do not touch children
        .                   }
        .                   LookupResult::Exact(e) => on_all_children_bits(tcx, body, move_data, e, each_child),
        .               }
        .           }
        .           
        .           pub fn on_all_children_bits<'tcx, F>(
-- line 99 ----------------------------------------
-- line 100 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               move_path_index: MovePathIndex,
        .               mut each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
  618,736 ( 0.04%)      fn is_terminal_path<'tcx>(
        .                   tcx: TyCtxt<'tcx>,
        .                   body: &Body<'tcx>,
        .                   move_data: &MoveData<'tcx>,
        .                   path: MovePathIndex,
        .               ) -> bool {
  154,684 ( 0.01%)          place_contents_drop_state_cannot_differ(tcx, body, move_data.move_paths[path].place)
  618,736 ( 0.04%)      }
        .           
  723,658 ( 0.04%)      fn on_all_children_bits<'tcx, F>(
        .                   tcx: TyCtxt<'tcx>,
        .                   body: &Body<'tcx>,
        .                   move_data: &MoveData<'tcx>,
        .                   move_path_index: MovePathIndex,
        .                   each_child: &mut F,
        .               ) where
        .                   F: FnMut(MovePathIndex),
        .               {
   24,385 ( 0.00%)          each_child(move_path_index);
        .           
  541,394 ( 0.03%)          if is_terminal_path(tcx, body, move_data, move_path_index) {
        .                       return;
        .                   }
        .           
   48,545 ( 0.00%)          let mut next_child_index = move_data.move_paths[move_path_index].first_child;
  106,864 ( 0.01%)          while let Some(child_index) = next_child_index {
   14,592 ( 0.00%)              on_all_children_bits(tcx, body, move_data, child_index, each_child);
    2,432 ( 0.00%)              next_child_index = move_data.move_paths[child_index].next_sibling;
        .                   }
  618,480 ( 0.04%)      }
  452,490 ( 0.03%)      on_all_children_bits(tcx, body, move_data, move_path_index, &mut each_child);
        .           }
        .           
        .           pub fn on_all_drop_children_bits<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               path: MovePathIndex,
        .               mut each_child: F,
-- line 146 ----------------------------------------
-- line 156 ----------------------------------------
        .                   if erased_ty.needs_drop(tcx, ctxt.param_env) {
        .                       each_child(child);
        .                   } else {
        .                       debug!("on_all_drop_children_bits - skipping")
        .                   }
        .               })
        .           }
        .           
    6,880 ( 0.00%)  pub fn drop_flag_effects_for_function_entry<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex, DropFlagState),
        .           {
        .               let move_data = &ctxt.move_data;
      624 ( 0.00%)      for arg in body.args_iter() {
    1,808 ( 0.00%)          let place = mir::Place::from(arg);
    2,712 ( 0.00%)          let lookup_result = move_data.rev_lookup.find(place.as_ref());
        .                   on_lookup_result_bits(tcx, body, move_data, lookup_result, |mpi| {
      930 ( 0.00%)              callback(mpi, DropFlagState::Present)
        .                   });
        .               }
    4,992 ( 0.00%)  }
        .           
1,135,476 ( 0.07%)  pub fn drop_flag_effects_for_location<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               loc: Location,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex, DropFlagState),
        .           {
        .               let move_data = &ctxt.move_data;
        .               debug!("drop_flag_effects_for_location({:?})", loc);
        .           
        .               // first, move out of the RHS
   94,254 ( 0.01%)      for mi in &move_data.loc_map[loc] {
  183,337 ( 0.01%)          let path = mi.move_path_index(move_data);
        .                   debug!("moving out of path {:?}", move_data.move_paths[path]);
        .           
   47,194 ( 0.00%)          on_all_children_bits(tcx, body, move_data, path, |mpi| callback(mpi, DropFlagState::Absent))
        .               }
        .           
        .               debug!("drop_flag_effects: assignment for location({:?})", loc);
        .           
   24,391 ( 0.00%)      for_location_inits(tcx, body, move_data, loc, |mpi| callback(mpi, DropFlagState::Present));
  757,968 ( 0.05%)  }
        .           
        .           pub fn for_location_inits<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               loc: Location,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
   94,254 ( 0.01%)      for ii in &move_data.init_loc_map[loc] {
  118,456 ( 0.01%)          let init = move_data.inits[*ii];
   71,264 ( 0.00%)          match init.kind {
        .                       InitKind::Deep => {
        .                           let path = init.path;
        .           
        .                           on_all_children_bits(tcx, body, move_data, path, &mut callback)
        .                       }
        .                       InitKind::Shallow => {
        .                           let mpi = init.path;
        .                           callback(mpi);
-- line 226 ----------------------------------------
-- line 230 ----------------------------------------
        .               }
        .           }
        .           
        .           /// Calls `handle_inactive_variant` for each descendant move path of `enum_place` that contains a
        .           /// `Downcast` to a variant besides the `active_variant`.
        .           ///
        .           /// NOTE: If there are no move paths corresponding to an inactive variant,
        .           /// `handle_inactive_variant` will not be called for that variant.
    7,392 ( 0.00%)  pub(crate) fn on_all_inactive_variants<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &mir::Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               enum_place: mir::Place<'tcx>,
        .               active_variant: VariantIdx,
        .               mut handle_inactive_variant: impl FnMut(MovePathIndex),
        .           ) {
    3,080 ( 0.00%)      let enum_mpi = match move_data.rev_lookup.find(enum_place.as_ref()) {
        .                   LookupResult::Exact(mpi) => mpi,
        .                   LookupResult::Parent(_) => return,
        .               };
        .           
        .               let enum_path = &move_data.move_paths[enum_mpi];
    1,417 ( 0.00%)      for (variant_mpi, variant_path) in enum_path.children(&move_data.move_paths) {
        .                   // Because of the way we build the `MoveData` tree, each child should have exactly one more
        .                   // projection than `enum_place`. This additional projection must be a downcast since the
        .                   // base is an enum.
       82 ( 0.00%)          let (downcast, base_proj) = variant_path.place.projection.split_last().unwrap();
      328 ( 0.00%)          assert_eq!(enum_place.projection.len(), base_proj.len());
        .           
      246 ( 0.00%)          let variant_idx = match *downcast {
        .                       mir::ProjectionElem::Downcast(_, idx) => idx,
        .                       _ => unreachable!(),
        .                   };
        .           
       82 ( 0.00%)          if variant_idx != active_variant {
        .                       on_all_children_bits(tcx, body, move_data, variant_mpi, |mpi| {
       70 ( 0.00%)                  handle_inactive_variant(mpi)
        .                       });
        .                   }
        .               }
    4,928 ( 0.00%)  }

  503,041 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 26 ----------------------------------------
      .           pub struct UnmatchedBrace {
      .               pub expected_delim: token::DelimToken,
      .               pub found_delim: Option<token::DelimToken>,
      .               pub found_span: Span,
      .               pub unclosed_span: Option<Span>,
      .               pub candidate_span: Option<Span>,
      .           }
      .           
     98 ( 0.00%)  crate fn parse_token_trees<'a>(
      .               sess: &'a ParseSess,
      .               src: &'a str,
      .               start_pos: BytePos,
      .               override_span: Option<Span>,
      .           ) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
      .               StringReader { sess, start_pos, pos: start_pos, end_src_index: src.len(), src, override_span }
      .                   .into_token_trees()
     63 ( 0.00%)  }
      .           
      .           struct StringReader<'a> {
      .               sess: &'a ParseSess,
      .               /// Initial position, read-only.
      .               start_pos: BytePos,
      .               /// The absolute offset within the source_map of the current character.
      .               pos: BytePos,
      .               /// Stop reading src at this index.
-- line 50 ----------------------------------------
-- line 51 ----------------------------------------
      .               end_src_index: usize,
      .               /// Source text to tokenize.
      .               src: &'a str,
      .               override_span: Option<Span>,
      .           }
      .           
      .           impl<'a> StringReader<'a> {
      .               fn mk_sp(&self, lo: BytePos, hi: BytePos) -> Span {
 38,004 ( 0.00%)          self.override_span.unwrap_or_else(|| Span::with_root_ctxt(lo, hi))
      .               }
      .           
      .               /// Returns the next token, and info about preceding whitespace, if any.
196,637 ( 0.01%)      fn next_token(&mut self) -> (Spacing, Token) {
      .                   let mut spacing = Spacing::Joint;
      .           
      .                   // Skip `#!` at the start of the file
 56,182 ( 0.00%)          let start_src_index = self.src_index(self.pos);
 84,273 ( 0.01%)          let text: &str = &self.src[start_src_index..self.end_src_index];
      .                   let is_beginning_of_file = self.pos == self.start_pos;
 28,091 ( 0.00%)          if is_beginning_of_file {
     28 ( 0.00%)              if let Some(shebang_len) = rustc_lexer::strip_shebang(text) {
      .                           self.pos = self.pos + BytePos::from_usize(shebang_len);
      .                           spacing = Spacing::Alone;
      .                       }
      .                   }
      .           
      .                   // Skip trivial (whitespace & comments) tokens
      .                   loop {
 52,767 ( 0.00%)              let start_src_index = self.src_index(self.pos);
121,287 ( 0.01%)              let text: &str = &self.src[start_src_index..self.end_src_index];
      .           
 40,429 ( 0.00%)              if text.is_empty() {
      .                           let span = self.mk_sp(self.pos, self.pos);
     35 ( 0.00%)                  return (spacing, Token::new(token::Eof, span));
      .                       }
      .           
121,266 ( 0.01%)              let token = rustc_lexer::first_token(text);
      .           
 80,844 ( 0.00%)              let start = self.pos;
 40,422 ( 0.00%)              self.pos = self.pos + BytePos::from_usize(token.len);
      .           
      .                       debug!("next_token: {:?}({:?})", token.kind, self.str_from(start));
      .           
329,532 ( 0.02%)              match self.cook_lexer_token(token.kind, start) {
224,672 ( 0.01%)                  Some(kind) => {
      .                               let span = self.mk_sp(start, self.pos);
168,504 ( 0.01%)                      return (spacing, Token::new(kind, span));
      .                           }
      .                           None => spacing = Spacing::Alone,
      .                       }
      .                   }
252,819 ( 0.02%)      }
      .           
      .               /// Report a fatal lexical error with a given span.
      .               fn fatal_span(&self, sp: Span, m: &str) -> FatalError {
      .                   self.sess.span_diagnostic.span_fatal(sp, m)
      .               }
      .           
      .               /// Report a lexical error with a given span.
      .               fn err_span(&self, sp: Span, m: &str) {
-- line 110 ----------------------------------------
-- line 130 ----------------------------------------
      .               ) -> DiagnosticBuilder<'a> {
      .                   self.sess
      .                       .span_diagnostic
      .                       .struct_span_fatal(self.mk_sp(from_pos, to_pos), &format!("{}: {}", m, escaped_char(c)))
      .               }
      .           
      .               /// Detect usages of Unicode codepoints changing the direction of the text on screen and loudly
      .               /// complain about it.
  1,694 ( 0.00%)      fn lint_unicode_text_flow(&self, start: BytePos) {
      .                   // Opening delimiter of the length 2 is not included into the comment text.
      .                   let content_start = start + BytePos(2);
      .                   let content = self.str_from(content_start);
      .                   if contains_text_flow_control_chars(content) {
      .                       let span = self.mk_sp(start, self.pos);
      .                       self.sess.buffer_lint_with_diagnostic(
      .                           &TEXT_DIRECTION_CODEPOINT_IN_COMMENT,
      .                           span,
      .                           ast::CRATE_NODE_ID,
      .                           "unicode codepoint changing visible direction of text present in comment",
      .                           BuiltinLintDiagnostics::UnicodeTextFlow(span, content.to_string()),
      .                       );
      .                   }
  1,936 ( 0.00%)      }
      .           
      .               /// Turns simple `rustc_lexer::TokenKind` enum into a rich
      .               /// `rustc_ast::TokenKind`. This turns strings into interned
      .               /// symbols and runs additional validation.
      .               fn cook_lexer_token(&self, token: rustc_lexer::TokenKind, start: BytePos) -> Option<TokenKind> {
202,110 ( 0.01%)          Some(match token {
  1,780 ( 0.00%)              rustc_lexer::TokenKind::LineComment { doc_style } => {
      .                           // Skip non-doc comments
  8,174 ( 0.00%)                  let doc_style = if let Some(doc_style) = doc_style {
      .                               doc_style
      .                           } else {
      .                               self.lint_unicode_text_flow(start);
      .                               return None;
      .                           };
      .           
      .                           // Opening delimiter of the length 3 is not included into the symbol.
      .                           let content_start = start + BytePos(3);
      .                           let content = self.str_from(content_start);
  7,690 ( 0.00%)                  self.cook_doc_comment(content_start, content, CommentKind::Line, doc_style)
      .                       }
      2 ( 0.00%)              rustc_lexer::TokenKind::BlockComment { doc_style, terminated } => {
      1 ( 0.00%)                  if !terminated {
      .                               let msg = match doc_style {
      .                                   Some(_) => "unterminated block doc-comment",
      .                                   None => "unterminated block comment",
      .                               };
      .                               let last_bpos = self.pos;
      .                               self.sess.span_diagnostic.span_fatal_with_code(
      .                                   self.mk_sp(start, last_bpos),
      .                                   msg,
      .                                   error_code!(E0758),
      .                               );
      .                           }
      .           
      .                           // Skip non-doc comments
      4 ( 0.00%)                  let doc_style = if let Some(doc_style) = doc_style {
      .                               doc_style
      .                           } else {
      .                               self.lint_unicode_text_flow(start);
      .                               return None;
      .                           };
      .           
      .                           // Opening delimiter of the length 3 and closing delimiter of the length 2
      .                           // are not included into the symbol.
      .                           let content_start = start + BytePos(3);
      .                           let content_end = self.pos - BytePos(if terminated { 2 } else { 0 });
      7 ( 0.00%)                  let content = self.str_from_to(content_start, content_end);
      4 ( 0.00%)                  self.cook_doc_comment(content_start, content, CommentKind::Block, doc_style)
      .                       }
      .                       rustc_lexer::TokenKind::Whitespace => return None,
      .                       rustc_lexer::TokenKind::Ident
      .                       | rustc_lexer::TokenKind::RawIdent
      .                       | rustc_lexer::TokenKind::UnknownPrefix => {
 39,624 ( 0.00%)                  let is_raw_ident = token == rustc_lexer::TokenKind::RawIdent;
 49,530 ( 0.00%)                  let is_unknown_prefix = token == rustc_lexer::TokenKind::UnknownPrefix;
      .                           let mut ident_start = start;
 19,812 ( 0.00%)                  if is_raw_ident {
      .                               ident_start = ident_start + BytePos(2);
      .                           }
 29,718 ( 0.00%)                  if is_unknown_prefix {
      .                               self.report_unknown_prefix(start);
      .                           }
 49,530 ( 0.00%)                  let sym = nfc_normalize(self.str_from(ident_start));
      .                           let span = self.mk_sp(start, self.pos);
 39,624 ( 0.00%)                  self.sess.symbol_gallery.insert(sym, span);
 19,812 ( 0.00%)                  if is_raw_ident {
      .                               if !sym.can_be_raw() {
      .                                   self.err_span(span, &format!("`{}` cannot be a raw identifier", sym));
      .                               }
      .                               self.sess.raw_identifier_spans.borrow_mut().push(span);
      .                           }
 69,342 ( 0.00%)                  token::Ident(sym, is_raw_ident)
      .                       }
      .                       rustc_lexer::TokenKind::InvalidIdent
      .                           // Do not recover an identifier with emoji if the codepoint is a confusable
      .                           // with a recoverable substitution token, like `➖`.
      .                           if UNICODE_ARRAY
      .                               .iter()
      .                               .find(|&&(c, _, _)| {
      .                                   let sym = self.str_from(start);
-- line 232 ----------------------------------------
-- line 234 ----------------------------------------
      .                               })
      .                               .is_none() =>
      .                       {
      .                           let sym = nfc_normalize(self.str_from(start));
      .                           let span = self.mk_sp(start, self.pos);
      .                           self.sess.bad_unicode_identifiers.borrow_mut().entry(sym).or_default().push(span);
      .                           token::Ident(sym, false)
      .                       }
 12,816 ( 0.00%)              rustc_lexer::TokenKind::Literal { kind, suffix_start } => {
      .                           let suffix_start = start + BytePos(suffix_start as u32);
      .                           let (kind, symbol) = self.cook_lexer_literal(start, suffix_start, kind);
  2,403 ( 0.00%)                  let suffix = if suffix_start < self.pos {
      .                               let string = self.str_from(suffix_start);
      .                               if string == "_" {
      .                                   self.sess
      .                                       .span_diagnostic
      .                                       .struct_span_warn(
      .                                           self.mk_sp(suffix_start, self.pos),
      .                                           "underscore literal suffix is not allowed",
      .                                       )
-- line 253 ----------------------------------------
-- line 259 ----------------------------------------
      .                                       .note(
      .                                           "see issue #42326 \
      .                                            <https://github.com/rust-lang/rust/issues/42326> \
      .                                            for more information",
      .                                       )
      .                                       .emit();
      .                                   None
      .                               } else {
      5 ( 0.00%)                          Some(Symbol::intern(string))
      .                               }
      .                           } else {
      .                               None
      .                           };
  6,408 ( 0.00%)                  token::Literal(token::Lit { kind, symbol, suffix })
      .                       }
    250 ( 0.00%)              rustc_lexer::TokenKind::Lifetime { starts_with_number } => {
      .                           // Include the leading `'` in the real identifier, for macro
      .                           // expansion purposes. See #12512 for the gory details of why
      .                           // this is necessary.
      .                           let lifetime_name = self.str_from(start);
    125 ( 0.00%)                  if starts_with_number {
      .                               self.err_span_(start, self.pos, "lifetimes cannot start with a number");
      .                           }
    375 ( 0.00%)                  let ident = Symbol::intern(lifetime_name);
    500 ( 0.00%)                  token::Lifetime(ident)
      .                       }
      .                       rustc_lexer::TokenKind::Semi => token::Semi,
      .                       rustc_lexer::TokenKind::Comma => token::Comma,
      .                       rustc_lexer::TokenKind::Dot => token::Dot,
      .                       rustc_lexer::TokenKind::OpenParen => token::OpenDelim(token::Paren),
      .                       rustc_lexer::TokenKind::CloseParen => token::CloseDelim(token::Paren),
      .                       rustc_lexer::TokenKind::OpenBrace => token::OpenDelim(token::Brace),
      .                       rustc_lexer::TokenKind::CloseBrace => token::CloseDelim(token::Brace),
-- line 291 ----------------------------------------
-- line 324 ----------------------------------------
      .                               err.help("source files must contain UTF-8 encoded text, unexpected null bytes might occur when a different encoding is used");
      .                           }
      .                           err.emit();
      .                           token?
      .                       }
      .                   })
      .               }
      .           
 18,468 ( 0.00%)      fn cook_doc_comment(
      .                   &self,
      .                   content_start: BytePos,
      .                   content: &str,
      .                   comment_kind: CommentKind,
      .                   doc_style: DocStyle,
      .               ) -> TokenKind {
  1,539 ( 0.00%)          if content.contains('\r') {
      .                       for (idx, _) in content.char_indices().filter(|&(_, c)| c == '\r') {
      .                           self.err_span_(
      .                               content_start + BytePos(idx as u32),
      .                               content_start + BytePos(idx as u32 + 1),
      .                               match comment_kind {
      .                                   CommentKind::Line => "bare CR not allowed in doc-comment",
      .                                   CommentKind::Block => "bare CR not allowed in block doc-comment",
      .                               },
-- line 347 ----------------------------------------
-- line 349 ----------------------------------------
      .                       }
      .                   }
      .           
      .                   let attr_style = match doc_style {
      .                       DocStyle::Outer => AttrStyle::Outer,
      .                       DocStyle::Inner => AttrStyle::Inner,
      .                   };
      .           
  4,617 ( 0.00%)          token::DocComment(comment_kind, attr_style, Symbol::intern(content))
 23,085 ( 0.00%)      }
      .           
      .               fn cook_lexer_literal(
      .                   &self,
      .                   start: BytePos,
      .                   suffix_start: BytePos,
      .                   kind: rustc_lexer::LiteralKind,
      .               ) -> (token::LitKind, Symbol) {
      .                   // prefix means `"` or `br"` or `r###"`, ...
      .                   let (lit_kind, mode, prefix_len, postfix_len) = match kind {
    319 ( 0.00%)              rustc_lexer::LiteralKind::Char { terminated } => {
    319 ( 0.00%)                  if !terminated {
      .                               self.sess.span_diagnostic.span_fatal_with_code(
      .                                   self.mk_sp(start, suffix_start),
      .                                   "unterminated character literal",
      .                                   error_code!(E0762),
      .                               )
      .                           }
      .                           (token::Char, Mode::Char, 1, 1) // ' '
      .                       }
    100 ( 0.00%)              rustc_lexer::LiteralKind::Byte { terminated } => {
    100 ( 0.00%)                  if !terminated {
      .                               self.sess.span_diagnostic.span_fatal_with_code(
      .                                   self.mk_sp(start + BytePos(1), suffix_start),
      .                                   "unterminated byte constant",
      .                                   error_code!(E0763),
      .                               )
      .                           }
      .                           (token::Byte, Mode::Byte, 2, 1) // b' '
      .                       }
    189 ( 0.00%)              rustc_lexer::LiteralKind::Str { terminated } => {
    189 ( 0.00%)                  if !terminated {
      .                               self.sess.span_diagnostic.span_fatal_with_code(
      .                                   self.mk_sp(start, suffix_start),
      .                                   "unterminated double quote string",
      .                                   error_code!(E0765),
      .                               )
      .                           }
      .                           (token::Str, Mode::Str, 1, 1) // " "
      .                       }
      1 ( 0.00%)              rustc_lexer::LiteralKind::ByteStr { terminated } => {
      1 ( 0.00%)                  if !terminated {
      .                               self.sess.span_diagnostic.span_fatal_with_code(
      .                                   self.mk_sp(start + BytePos(1), suffix_start),
      .                                   "unterminated double quote byte string",
      .                                   error_code!(E0766),
      .                               )
      .                           }
      .                           (token::ByteStr, Mode::ByteStr, 2, 1) // b" "
      .                       }
      .                       rustc_lexer::LiteralKind::RawStr { n_hashes, err } => {
      .                           self.report_raw_str_error(start, err);
      .                           let n = u32::from(n_hashes);
      5 ( 0.00%)                  (token::StrRaw(n_hashes), Mode::RawStr, 2 + n, 1 + n) // r##" "##
      .                       }
      .                       rustc_lexer::LiteralKind::RawByteStr { n_hashes, err } => {
      .                           self.report_raw_str_error(start, err);
      .                           let n = u32::from(n_hashes);
      .                           (token::ByteStrRaw(n_hashes), Mode::RawByteStr, 3 + n, 1 + n) // br##" "##
      .                       }
    382 ( 0.00%)              rustc_lexer::LiteralKind::Int { base, empty_int } => {
    191 ( 0.00%)                  return if empty_int {
      .                               self.sess
      .                                   .span_diagnostic
      .                                   .struct_span_err_with_code(
      .                                       self.mk_sp(start, suffix_start),
      .                                       "no valid digits found for number",
      .                                       error_code!(E0768),
      .                                   )
      .                                   .emit();
      .                               (token::Integer, sym::integer(0))
      .                           } else {
      .                               self.validate_int_literal(base, start, suffix_start);
    573 ( 0.00%)                      (token::Integer, self.symbol_from_to(start, suffix_start))
      .                           };
      .                       }
      .                       rustc_lexer::LiteralKind::Float { base, empty_exponent } => {
      .                           if empty_exponent {
      .                               self.err_span_(start, self.pos, "expected at least one digit in exponent");
      .                           }
      .           
      .                           match base {
-- line 439 ----------------------------------------
-- line 452 ----------------------------------------
      .                           }
      .           
      .                           let id = self.symbol_from_to(start, suffix_start);
      .                           return (token::Float, id);
      .                       }
      .                   };
      .                   let content_start = start + BytePos(prefix_len);
      .                   let content_end = suffix_start - BytePos(postfix_len);
  1,830 ( 0.00%)          let id = self.symbol_from_to(content_start, content_end);
      .                   self.validate_literal_escape(mode, content_start, content_end, prefix_len, postfix_len);
      .                   (lit_kind, id)
      .               }
      .           
      .               #[inline]
      .               fn src_index(&self, pos: BytePos) -> usize {
      .                   (pos - self.start_pos).to_usize()
      .               }
      .           
      .               /// Slice of the source text from `start` up to but excluding `self.pos`,
      .               /// meaning the slice does not include the character `self.ch`.
      .               fn str_from(&self, start: BytePos) -> &str {
 74,111 ( 0.00%)          self.str_from_to(start, self.pos)
      .               }
      .           
      .               /// As symbol_from, with an explicit endpoint.
      .               fn symbol_from_to(&self, start: BytePos, end: BytePos) -> Symbol {
      .                   debug!("taking an ident from {:?} to {:?}", start, end);
  8,657 ( 0.00%)          Symbol::intern(self.str_from_to(start, end))
      .               }
      .           
      .               /// Slice of the source text spanning from `start` up to but excluding `end`.
 13,224 ( 0.00%)      fn str_from_to(&self, start: BytePos, end: BytePos) -> &str {
      .                   &self.src[self.src_index(start)..self.src_index(end)]
 52,896 ( 0.00%)      }
      .           
      .               fn report_raw_str_error(&self, start: BytePos, opt_err: Option<RawStrError>) {
      2 ( 0.00%)          match opt_err {
      .                       Some(RawStrError::InvalidStarter { bad_char }) => {
      .                           self.report_non_started_raw_string(start, bad_char)
      .                       }
      .                       Some(RawStrError::NoTerminator { expected, found, possible_terminator_offset }) => self
      .                           .report_unterminated_raw_string(start, expected, possible_terminator_offset, found),
      .                       Some(RawStrError::TooManyDelimiters { found }) => {
      .                           self.report_too_many_hashes(start, found)
      .                       }
-- line 496 ----------------------------------------
-- line 609 ----------------------------------------
      .               fn validate_literal_escape(
      .                   &self,
      .                   mode: Mode,
      .                   content_start: BytePos,
      .                   content_end: BytePos,
      .                   prefix_len: u32,
      .                   postfix_len: u32,
      .               ) {
  3,660 ( 0.00%)          let lit_content = self.str_from_to(content_start, content_end);
 30,348 ( 0.00%)          unescape::unescape_literal(lit_content, mode, &mut |range, result| {
      .                       // Here we only check for errors. The actual unescaping is done later.
  4,232 ( 0.00%)              if let Err(err) = result {
      .                           let span_with_quotes = self
      .                               .mk_sp(content_start - BytePos(prefix_len), content_end + BytePos(postfix_len));
      .                           let (start, end) = (range.start as u32, range.end as u32);
      .                           let lo = content_start + BytePos(start);
      .                           let hi = lo + BytePos(end - start);
      .                           let span = self.mk_sp(lo, hi);
      .                           emit_unescape_error(
      .                               &self.sess.span_diagnostic,
-- line 628 ----------------------------------------
-- line 629 ----------------------------------------
      .                               lit_content,
      .                               span_with_quotes,
      .                               span,
      .                               mode,
      .                               range,
      .                               err,
      .                           );
      .                       }
 19,044 ( 0.00%)          });
      .               }
      .           
      .               fn validate_int_literal(&self, base: Base, content_start: BytePos, content_end: BytePos) {
    764 ( 0.00%)          let base = match base {
      .                       Base::Binary => 2,
      .                       Base::Octal => 8,
      .                       _ => return,
      .                   };
      .                   let s = self.str_from_to(content_start + BytePos(2), content_end);
      .                   for (idx, c) in s.char_indices() {
      .                       let idx = idx as u32;
      .                       if c != '_' && c.to_digit(base).is_none() {
-- line 649 ----------------------------------------
-- line 650 ----------------------------------------
      .                           let lo = content_start + BytePos(2 + idx);
      .                           let hi = content_start + BytePos(2 + idx + c.len_utf8() as u32);
      .                           self.err_span_(lo, hi, &format!("invalid digit for a base {} literal", base));
      .                       }
      .                   }
      .               }
      .           }
      .           
 89,154 ( 0.01%)  pub fn nfc_normalize(string: &str) -> Symbol {
      .               use unicode_normalization::{is_nfc_quick, IsNormalized, UnicodeNormalization};
 19,812 ( 0.00%)      match is_nfc_quick(string.chars()) {
 99,060 ( 0.01%)          IsNormalized::Yes => Symbol::intern(string),
      .                   _ => {
      .                       let normalized_str: String = string.chars().nfc().collect();
      .                       Symbol::intern(&normalized_str)
      .                   }
      .               }
      .           }

136,383 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 141 ----------------------------------------
        .               /// ```
        .               /// let a = [1, 2, 3];
        .               /// assert!(!a.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
        .               #[inline]
        .               pub const fn is_empty(&self) -> bool {
  547,458 ( 0.03%)          self.len() == 0
        .               }
        .           
        .               /// Returns the first element of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 159 ----------------------------------------
        .               ///
        .               /// let w: &[i32] = &[];
        .               /// assert_eq!(None, w.first());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn first(&self) -> Option<&T> {
    3,769 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
        .               }
        .           
        .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 178 ----------------------------------------
        .               ///     *first = 5;
        .               /// }
        .               /// assert_eq!(x, &[5, 1, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
        .               #[inline]
        .               pub const fn first_mut(&mut self) -> Option<&mut T> {
    4,460 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
        .               }
        .           
        .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 197 ----------------------------------------
        .               ///     assert_eq!(first, &0);
        .               ///     assert_eq!(elements, &[1, 2]);
        .               /// }
        .               /// ```
        .               #[stable(feature = "slice_splits", since = "1.5.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn split_first(&self) -> Option<(&T, &[T])> {
       10 ( 0.00%)          if let [first, tail @ ..] = self { Some((first, tail)) } else { None }
        .               }
        .           
        .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 213 ----------------------------------------
-- line 237 ----------------------------------------
        .               ///     assert_eq!(last, &2);
        .               ///     assert_eq!(elements, &[0, 1]);
        .               /// }
        .               /// ```
        .               #[stable(feature = "slice_splits", since = "1.5.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
   17,762 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
        .               }
        .           
        .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
        .               ///
        .               /// let w: &[i32] = &[];
        .               /// assert_eq!(None, w.last());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn last(&self) -> Option<&T> {
  314,297 ( 0.02%)          if let [.., last] = self { Some(last) } else { None }
        .               }
        .           
        .               /// Returns a mutable pointer to the last item in the slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 295 ----------------------------------------
        .               ///     *last = 10;
        .               /// }
        .               /// assert_eq!(x, &[0, 1, 10]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
        .               #[inline]
        .               pub const fn last_mut(&mut self) -> Option<&mut T> {
  596,595 ( 0.04%)          if let [.., last] = self { Some(last) } else { None }
        .               }
        .           
        .               /// Returns a reference to an element or subslice depending on the type of
        .               /// index.
        .               ///
        .               /// - If given a position, returns a reference to the element at that
        .               ///   position or `None` if out of bounds.
        .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 448 ----------------------------------------
        .               /// }
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: slice::as_mut_ptr
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
        .               #[inline]
        .               pub const fn as_ptr(&self) -> *const T {
  630,730 ( 0.04%)          self as *const [T] as *const T
        .               }
        .           
        .               /// Returns an unsafe mutable pointer to the slice's buffer.
        .               ///
        .               /// The caller must ensure that the slice outlives the pointer this
        .               /// function returns, or else it will end up pointing to garbage.
        .               ///
        .               /// Modifying the container referenced by this slice may cause its buffer
-- line 464 ----------------------------------------
-- line 476 ----------------------------------------
        .               ///     }
        .               /// }
        .               /// assert_eq!(x, &[3, 4, 6]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
        .               #[inline]
        .               pub const fn as_mut_ptr(&mut self) -> *mut T {
        8 ( 0.00%)          self as *mut [T] as *mut T
        .               }
        .           
        .               /// Returns the two raw pointers spanning the slice.
        .               ///
        .               /// The returned range is half-open, which means that the end pointer
        .               /// points *one past* the last element of the slice. This way, an empty
        .               /// slice is represented by two equal pointers, and the difference between
        .               /// the two pointers represents the size of the slice.
-- line 492 ----------------------------------------
-- line 582 ----------------------------------------
        .               /// v.swap(2, 4);
        .               /// assert!(v == ["a", "b", "e", "d", "c"]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
        .               #[inline]
        .               #[track_caller]
        .               pub const fn swap(&mut self, a: usize, b: usize) {
    9,080 ( 0.00%)          let _ = &self[a];
   39,180 ( 0.00%)          let _ = &self[b];
        .           
        .                   // SAFETY: we just checked that both `a` and `b` are in bounds
        .                   unsafe { self.swap_unchecked(a, b) }
        .               }
        .           
        .               /// Swaps two elements in the slice, without doing bounds checking.
        .               ///
        .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 677 ----------------------------------------
        .           
        .                       // Because this function is first compiled in isolation,
        .                       // this check tells LLVM that the indexing below is
        .                       // in-bounds.  Then after inlining -- once the actual
        .                       // lengths of the slices are known -- it's removed.
        .                       let (a, b) = (&mut a[..n], &mut b[..n]);
        .           
        .                       for i in 0..n {
      798 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns an iterator over the slice.
        .               ///
        .               /// # Examples
        .               ///
-- line 693 ----------------------------------------
-- line 1499 ----------------------------------------
        .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
        .               ///     assert_eq!(right, []);
        .               /// }
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               #[track_caller]
        .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
       18 ( 0.00%)          assert!(mid <= self.len());
        .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
        .                   // fulfills the requirements of `from_raw_parts_mut`.
        .                   unsafe { self.split_at_unchecked(mid) }
        .               }
        .           
        .               /// Divides one mutable slice into two at an index.
        .               ///
        .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
        .               /// left[1] = 2;
        .               /// right[1] = 4;
        .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               #[track_caller]
        .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
   61,224 ( 0.00%)          assert!(mid <= self.len());
        .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
        .                   // fulfills the requirements of `from_raw_parts_mut`.
        .                   unsafe { self.split_at_mut_unchecked(mid) }
        .               }
        .           
        .               /// Divides one slice into two at an index, without doing bounds checking.
        .               ///
        .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
        .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
        .                   let len = self.len();
        .                   let ptr = self.as_mut_ptr();
        .           
        .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
        .                   //
        .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
        .                   // is fine.
    4,816 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
        .               }
        .           
        .               /// Divides one slice into an array and a remainder slice at an index.
        .               ///
        .               /// The array will contain all indices from `[0, N)` (excluding
        .               /// the index `N` itself) and the slice will contain all
        .               /// indices from `[N, len)` (excluding the index `len` itself).
        .               ///
-- line 1644 ----------------------------------------
-- line 2113 ----------------------------------------
        .               /// assert!(!v.iter().any(|e| e == "hi"));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn contains(&self, x: &T) -> bool
        .               where
        .                   T: PartialEq,
        .               {
      942 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
        .               }
        .           
        .               /// Returns `true` if `needle` is a prefix of the slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let v = [10, 40, 30];
-- line 2129 ----------------------------------------
-- line 2142 ----------------------------------------
        .               /// assert!(v.starts_with(&[]));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn starts_with(&self, needle: &[T]) -> bool
        .               where
        .                   T: PartialEq,
        .               {
        .                   let n = needle.len();
   42,608 ( 0.00%)          self.len() >= n && needle == &self[..n]
        .               }
        .           
        .               /// Returns `true` if `needle` is a suffix of the slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let v = [10, 40, 30];
-- line 2158 ----------------------------------------
-- line 2171 ----------------------------------------
        .               /// assert!(v.ends_with(&[]));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn ends_with(&self, needle: &[T]) -> bool
        .               where
        .                   T: PartialEq,
        .               {
        .                   let (m, n) = (self.len(), needle.len());
    4,290 ( 0.00%)          m >= n && needle == &self[m - n..]
        .               }
        .           
        .               /// Returns a subslice with the prefix removed.
        .               ///
        .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
        .               /// If `prefix` is empty, simply returns the original slice.
        .               ///
        .               /// If the slice does not start with `prefix`, returns `None`.
-- line 2187 ----------------------------------------
-- line 2293 ----------------------------------------
        .               /// s.insert(idx, num);
        .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
        .               where
        .                   T: Ord,
        .               {
        3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
        .               }
        .           
        .               /// Binary searches this sorted slice with a comparator function.
        .               ///
        .               /// The comparator function should implement an order consistent
        .               /// with the sort order of the underlying slice, returning an
        .               /// order code that indicates whether its argument is `Less`,
        .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
        .               #[inline]
        .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
        .               where
        .                   F: FnMut(&'a T) -> Ordering,
        .               {
        .                   let mut size = self.len();
        .                   let mut left = 0;
        .                   let mut right = size;
2,064,280 ( 0.13%)          while left < right {
2,402,202 ( 0.15%)              let mid = left + size / 2;
        .           
        .                       // SAFETY: the call is made safe by the following invariants:
        .                       // - `mid >= 0`
        .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
  299,133 ( 0.02%)              let cmp = f(unsafe { self.get_unchecked(mid) });
        .           
        .                       // The reason why we use if/else control flow rather than match
        .                       // is because match reorders comparison operations, which is perf sensitive.
        .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
  700,847 ( 0.04%)              if cmp == Less {
1,032,182 ( 0.06%)                  left = mid + 1;
  309,189 ( 0.02%)              } else if cmp == Greater {
        .                           right = mid;
        .                       } else {
        .                           // SAFETY: same as the `get_unchecked` above
        .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
        .                           return Ok(mid);
        .                       }
        .           
2,135,246 ( 0.13%)              size = right - left;
        .                   }
        .                   Err(left)
        .               }
        .           
        .               /// Binary searches this sorted slice with a key extraction function.
        .               ///
        .               /// Assumes that the slice is sorted by the key, for instance with
        .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3203 ----------------------------------------
        .                   #[track_caller]
        .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
        .                       panic!(
        .                           "source slice length ({}) does not match destination slice length ({})",
        .                           src_len, dst_len,
        .                       );
        .                   }
        .           
   98,476 ( 0.01%)          if self.len() != src.len() {
        .                       len_mismatch_fail(self.len(), src.len());
        .                   }
        .           
        .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
        .                   // checked to have the same length. The slices cannot overlap because
        .                   // mutable references are exclusive.
        .                   unsafe {
        .                       ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
-- line 3219 ----------------------------------------
-- line 3382 ----------------------------------------
        .                   }
        .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
        .                   let ts: usize = mem::size_of::<U>() / gcd;
        .                   let us: usize = mem::size_of::<T>() / gcd;
        .           
        .                   // Armed with this knowledge, we can find how many `U`s we can fit!
        .                   let us_len = self.len() / ts * us;
        .                   // And how many `T`s will be in the trailing slice!
    3,090 ( 0.00%)          let ts_len = self.len() % ts;
        .                   (us_len, ts_len)
        .               }
        .           
        .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
        .               /// maintained.
        .               ///
        .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
        .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
        .                       return (self, &[], &[]);
        .                   }
        .           
        .                   // First, find at what point do we split between the first and 2nd slice. Easy with
        .                   // ptr.align_offset.
        .                   let ptr = self.as_ptr();
        .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
        .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
    3,090 ( 0.00%)          if offset > self.len() {
        .                       (self, &[], &[])
        .                   } else {
        .                       let (left, rest) = self.split_at(offset);
        .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
        .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
        .                       // since the caller guarantees that we can transmute `T` to `U` safely.
        .                       unsafe {
        .                           (
        .                               left,
        .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
    3,090 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
        .                           )
        .                       }
        .                   }
        .               }
        .           
        .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
        .               /// maintained.
        .               ///
-- line 3456 ----------------------------------------
-- line 3731 ----------------------------------------
        .               /// let v = [1, 2, 3, 3, 5, 6, 7];
        .               /// let i = v.partition_point(|&x| x < 5);
        .               ///
        .               /// assert_eq!(i, 4);
        .               /// assert!(v[..i].iter().all(|&x| x < 5));
        .               /// assert!(v[i..].iter().all(|&x| !(x < 5)));
        .               /// ```
        .               #[stable(feature = "partition_point", since = "1.52.0")]
        6 ( 0.00%)      pub fn partition_point<P>(&self, mut pred: P) -> usize
        .               where
        .                   P: FnMut(&T) -> bool,
        .               {
        .                   self.binary_search_by(|x| if pred(x) { Less } else { Greater }).unwrap_or_else(|i| i)
       12 ( 0.00%)      }
        .           
        .               /// Removes the subslice corresponding to the given range
        .               /// and returns a reference to it.
        .               ///
        .               /// Returns `None` and does not modify the slice if the given
        .               /// range is out of bounds.
        .               ///
        .               /// Note that this method only accepts one-sided ranges such as
-- line 3752 ----------------------------------------

2,187,624 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 108 ----------------------------------------
        .                   suppress_errors: bool,
        .               },
        .           }
        .           
        .           impl RegionckMode {
        .               /// Indicates that the MIR borrowck will repeat these region
        .               /// checks, so we should ignore errors if NLL is (unconditionally)
        .               /// enabled.
      241 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
        .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
        .                   // this always `true` and then proceed to eliminate the dead code.
      241 ( 0.00%)          match tcx.borrowck_mode() {
        .                       // If we're on Migrate mode, report AST region errors
        .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
        .           
        .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
        .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
        .                   }
      482 ( 0.00%)      }
        .           }
        .           
        .           /// This type contains all the things within `InferCtxt` that sit within a
        .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
        .           /// operations are hot enough that we want only one call to `borrow_mut` per
        .           /// call to `start_snapshot` and `rollback_to`.
        .           pub struct InferCtxtInner<'tcx> {
        .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
        .               /// type instantiations (`ty::Infer`) to the actual opaque
        .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
        .               /// opaque type inference variables to their corresponding
        .               /// opaque type.
        .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
        .           }
        .           
        .           impl<'tcx> InferCtxtInner<'tcx> {
   42,325 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
  287,810 ( 0.02%)          InferCtxtInner {
        .                       projection_cache: Default::default(),
        .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
        .                       undo_log: InferCtxtUndoLogs::default(),
        .                       const_unification_storage: ut::UnificationTableStorage::new(),
        .                       int_unification_storage: ut::UnificationTableStorage::new(),
        .                       float_unification_storage: ut::UnificationTableStorage::new(),
   25,395 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
        .                       region_obligations: vec![],
        .                       opaque_types: Default::default(),
        .                       opaque_types_vars: Default::default(),
        .                   }
   50,790 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
        .                   &self.region_obligations
        .               }
        .           
        .               #[inline]
        .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
    3,421 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
  496,747 ( 0.03%)          self.type_variable_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn int_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::IntVid,
        .                       &mut ut::UnificationStorage<ty::IntVid>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
   26,373 ( 0.00%)          self.int_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn float_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::FloatVid,
-- line 258 ----------------------------------------
-- line 268 ----------------------------------------
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::ConstVid<'tcx>,
        .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
    2,455 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
   71,867 ( 0.00%)          self.region_constraint_storage
        .                       .as_mut()
        .                       .expect("region constraints already solved")
   86,720 ( 0.01%)              .with_log(&mut self.undo_log)
        .               }
        .           }
        .           
        .           pub struct InferCtxt<'a, 'tcx> {
        .               pub tcx: TyCtxt<'tcx>,
        .           
        .               /// The `DefId` of the item in whose context we are performing inference or typeck.
        .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
        .               /// item we are type-checking, and just consider those names as
        .               /// part of the root universe. So this would only get incremented
        .               /// when we enter into a higher-ranked (`for<..>`) type or trait
        .               /// bound.
        .               universe: Cell<ty::UniverseIndex>,
        .           }
        .           
        .           /// See the `error_reporting` module for more details.
  136,256 ( 0.01%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
        .           pub enum ValuePairs<'tcx> {
        .               Types(ExpectedFound<Ty<'tcx>>),
        .               Regions(ExpectedFound<ty::Region<'tcx>>),
        .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
        .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
        .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
        .           }
        .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
        .           pub struct TypeTrace<'tcx> {
        .               cause: ObligationCause<'tcx>,
        .               values: ValuePairs<'tcx>,
        .           }
        .           
        .           /// The origin of a `r1 <= r2` constraint.
        .           ///
        .           /// See `error_reporting` module for more details
  107,188 ( 0.01%)  #[derive(Clone, Debug)]
        .           pub enum SubregionOrigin<'tcx> {
        .               /// Arose from a subtyping relation
    6,029 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
        .           
        .               /// When casting `&'a T` to an `&'b Trait` object,
        .               /// relating `'a` to `'b`
        .               RelateObjectBound(Span),
        .           
        .               /// Some type parameter was instantiated with the given type,
        .               /// and that type must outlive some region.
      863 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
        .           
        .               /// The given region parameter was instantiated with a region
        .               /// that must outlive some other region.
        .               RelateRegionParamBound(Span),
        .           
        .               /// Creating a pointer `b` to contents of another reference
        .               Reborrow(Span),
        .           
        .               /// Creating a pointer `b` to contents of an upvar
        .               ReborrowUpvar(Span, ty::UpvarId),
        .           
        .               /// Data with type `Ty<'tcx>` was borrowed
    1,007 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
        .           
        .               /// (&'a &'b T) where a >= b
      822 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
        .           
        .               /// Comparing the signature and requirements of an impl method against
        .               /// the containing trait.
        .               CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
        .           
        .               /// Comparing the signature and requirements of an impl associated type
        .               /// against the containing trait
        .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
-- line 426 ----------------------------------------
-- line 554 ----------------------------------------
        .               defining_use_anchor: Option<LocalDefId>,
        .           }
        .           
        .           pub trait TyCtxtInferExt<'tcx> {
        .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
        .           }
        .           
        .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
    8,465 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
   25,395 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
    8,465 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> InferCtxtBuilder<'tcx> {
        .               /// Used only by `rustc_typeck` during body type-checking/inference,
        .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
        .               /// Will also change the scope for opaque type defining use checks to the given owner.
    5,508 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
    6,732 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
    3,060 ( 0.00%)          self.with_opaque_type_inference(table_owner)
    4,284 ( 0.00%)      }
        .           
        .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
        .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
        .               ///
        .               /// It is only meant to be called in two places, for typeck
        .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
        .               /// in mir borrowck.
      560 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
      280 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
    1,784 ( 0.00%)          self
      840 ( 0.00%)      }
        .           
        .               /// Given a canonical value `C` as a starting point, create an
        .               /// inference context that contains each of the bound values
        .               /// within instantiated as a fresh variable. The `f` closure is
        .               /// invoked with the new infcx, along with the instantiated value
        .               /// `V` and a substitution `S`. This substitution `S` maps from
        .               /// the bound values in `C` to their instantiated values in `V`
        .               /// (in other words, `S(C) = V`).
   14,930 ( 0.00%)      pub fn enter_with_canonical<T, R>(
        .                   &mut self,
        .                   span: Span,
        .                   canonical: &Canonical<'tcx, T>,
        .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
        .               ) -> R
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   self.enter(|infcx| {
   21,420 ( 0.00%)              let (value, subst) =
    1,279 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
   32,096 ( 0.00%)              f(infcx, value, subst)
        .                   })
   16,134 ( 0.00%)      }
        .           
   43,641 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
   24,168 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
        .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
  350,291 ( 0.02%)          f(InferCtxt {
        .                       tcx,
        .                       defining_use_anchor,
        .                       in_progress_typeck_results,
    8,465 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
        .                       lexical_region_resolutions: RefCell::new(None),
        .                       selection_cache: Default::default(),
        .                       evaluation_cache: Default::default(),
        .                       reported_trait_errors: Default::default(),
        .                       reported_closure_mismatch: Default::default(),
        .                       tainted_by_errors_flag: Cell::new(false),
    8,465 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
        .                       in_snapshot: Cell::new(false),
        .                       skip_leak_check: Cell::new(false),
        .                       universe: Cell::new(ty::UniverseIndex::ROOT),
        .                   })
   47,288 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx, T> InferOk<'tcx, T> {
        .               pub fn unit(self) -> InferOk<'tcx, ()> {
        .                   InferOk { value: (), obligations: self.obligations }
        .               }
        .           
        .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
        .               pub fn into_value_registering_obligations(
        .                   self,
        .                   infcx: &InferCtxt<'_, 'tcx>,
        .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
        .               ) -> T {
      290 ( 0.00%)          let InferOk { value, obligations } = self;
    1,254 ( 0.00%)          for obligation in obligations {
      130 ( 0.00%)              fulfill_cx.register_predicate_obligation(infcx, obligation);
        .                   }
        .                   value
        .               }
        .           }
        .           
        .           impl<'tcx> InferOk<'tcx, ()> {
   10,133 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
   40,532 ( 0.00%)          self.obligations
   10,133 ( 0.00%)      }
        .           }
        .           
        .           #[must_use = "once you start a snapshot, you should always consume it"]
        .           pub struct CombinedSnapshot<'a, 'tcx> {
        .               undo_snapshot: Snapshot<'tcx>,
        .               region_constraints_snapshot: RegionSnapshot,
        .               universe: ty::UniverseIndex,
        .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
        .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
        .                   debug!("canonical consts: {:?}", &canonical.value);
        .           
        .                   self.tcx.try_unify_abstract_consts(canonical.value)
        .               }
        .           
        .               pub fn is_in_snapshot(&self) -> bool {
        .                   self.in_snapshot.get()
   19,234 ( 0.00%)      }
        .           
  129,792 ( 0.01%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
  146,016 ( 0.01%)          t.fold_with(&mut self.freshener())
  146,016 ( 0.01%)      }
        .           
        .               /// Returns the origin of the type variable identified by `vid`, or `None`
        .               /// if this is not a type variable.
        .               ///
        .               /// No attempt is made to resolve `ty`.
      454 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
      908 ( 0.00%)          match *ty.kind() {
      214 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
      856 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
        .                       }
       13 ( 0.00%)              _ => None,
        .                   }
      908 ( 0.00%)      }
        .           
   16,224 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
        .                   freshen::TypeFreshener::new(self, false)
   16,224 ( 0.00%)      }
        .           
        .               /// Like `freshener`, but does not replace `'static` regions.
   62,277 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
        .                   freshen::TypeFreshener::new(self, true)
   62,277 ( 0.00%)      }
        .           
    1,252 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
      626 ( 0.00%)          let mut inner = self.inner.borrow_mut();
      626 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
        .                       .type_variables()
        .                       .unsolved_variables()
        .                       .into_iter()
      428 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
        .                       .collect();
        .                   vars.extend(
        .                       (0..inner.int_unification_table().len())
        .                           .map(|i| ty::IntVid { index: i as u32 })
      594 ( 0.00%)                  .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
       13 ( 0.00%)                  .map(|v| self.tcx.mk_int_var(v)),
        .                   );
        .                   vars.extend(
        .                       (0..inner.float_unification_table().len())
        .                           .map(|i| ty::FloatVid { index: i as u32 })
        .                           .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
        .                           .map(|v| self.tcx.mk_float_var(v)),
        .                   );
        .                   vars
    2,191 ( 0.00%)      }
        .           
   37,581 ( 0.00%)      fn combine_fields(
        .                   &'a self,
        .                   trace: TypeTrace<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .               ) -> CombineFields<'a, 'tcx> {
  150,736 ( 0.01%)          CombineFields {
        .                       infcx: self,
  376,840 ( 0.02%)              trace,
        .                       cause: None,
        .                       param_env,
        .                       obligations: PredicateObligations::new(),
        .                   }
   37,581 ( 0.00%)      }
        .           
        .               /// Clear the "currently in a snapshot" flag, invoke the closure,
        .               /// then restore the flag to its original value. This flag is a
        .               /// debugging measure designed to detect cases where we start a
        .               /// snapshot, create type variables, and register obligations
        .               /// which may involve those type variables in the fulfillment cx,
        .               /// potentially leaving "dangling type variables" behind.
        .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 755 ----------------------------------------
        .               /// better than grovelling through megabytes of `RUSTC_LOG` output.
        .               ///
        .               /// HOWEVER, in some cases the flag is unhelpful. In particular, we
        .               /// sometimes create a "mini-fulfilment-cx" in which we enroll
        .               /// obligations. As long as this fulfillment cx is fully drained
        .               /// before we return, this is not a problem, as there won't be any
        .               /// escaping obligations in the main cx. In those cases, you can
        .               /// use this function.
        8 ( 0.00%)      pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
        .               where
        .                   F: FnOnce(&Self) -> R,
        .               {
        .                   let flag = self.in_snapshot.replace(false);
    9,417 ( 0.00%)          let result = func(self);
        .                   self.in_snapshot.set(flag);
        .                   result
        9 ( 0.00%)      }
        .           
  185,512 ( 0.01%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
        .                   debug!("start_snapshot()");
        .           
        .                   let in_snapshot = self.in_snapshot.replace(true);
        .           
        .                   let mut inner = self.inner.borrow_mut();
        .           
  556,536 ( 0.03%)          CombinedSnapshot {
        .                       undo_snapshot: inner.undo_log.start_snapshot(),
        .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
        .                       universe: self.universe(),
        .                       was_in_snapshot: in_snapshot,
        .                       // Borrow typeck results "in progress" (i.e., during typeck)
        .                       // to ban writes from within a snapshot to them.
   92,756 ( 0.01%)              _in_progress_typeck_results: self
        .                           .in_progress_typeck_results
        .                           .map(|typeck_results| typeck_results.borrow()),
        .                   }
  371,024 ( 0.02%)      }
        .           
  333,179 ( 0.02%)      #[instrument(skip(self, snapshot), level = "debug")]
        .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
        .                   let CombinedSnapshot {
   30,289 ( 0.00%)              undo_snapshot,
   30,289 ( 0.00%)              region_constraints_snapshot,
   30,289 ( 0.00%)              universe,
   30,289 ( 0.00%)              was_in_snapshot,
   60,578 ( 0.00%)              _in_progress_typeck_results,
        .                   } = snapshot;
        .           
        .                   self.in_snapshot.set(was_in_snapshot);
        .                   self.universe.set(universe);
        .           
        .                   let mut inner = self.inner.borrow_mut();
   30,289 ( 0.00%)          inner.rollback_to(undo_snapshot);
        .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
        .               }
        .           
  937,005 ( 0.06%)      #[instrument(skip(self, snapshot), level = "debug")]
        .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
        .                   let CombinedSnapshot {
   62,467 ( 0.00%)              undo_snapshot,
        .                       region_constraints_snapshot: _,
        .                       universe: _,
   62,467 ( 0.00%)              was_in_snapshot,
  124,934 ( 0.01%)              _in_progress_typeck_results,
        .                   } = snapshot;
        .           
        .                   self.in_snapshot.set(was_in_snapshot);
        .           
        .                   self.inner.borrow_mut().commit(undo_snapshot);
        .               }
        .           
        .               /// Executes `f` and commit the bindings.
   37,710 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
   46,508 ( 0.00%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
    4,228 ( 0.00%)          let snapshot = self.start_snapshot();
   14,370 ( 0.00%)          let r = f(&snapshot);
   29,596 ( 0.00%)          self.commit_from(snapshot);
   25,120 ( 0.00%)          r
        .               }
        .           
        .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
  409,480 ( 0.03%)      #[instrument(skip(self, f), level = "debug")]
  505,559 ( 0.03%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
        .               {
   77,798 ( 0.00%)          let snapshot = self.start_snapshot();
  233,744 ( 0.01%)          let r = f(&snapshot);
        .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
   83,848 ( 0.01%)          match r {
        .                       Ok(_) => {
  413,697 ( 0.03%)                  self.commit_from(snapshot);
        .                       }
        .                       Err(_) => {
  124,767 ( 0.01%)                  self.rollback_to("commit_if_ok -- error", snapshot);
        .                       }
        .                   }
  449,931 ( 0.03%)          r
        .               }
        .           
        .               /// Execute `f` then unroll any bindings it creates.
  120,328 ( 0.01%)      #[instrument(skip(self, f), level = "debug")]
  143,370 ( 0.01%)      pub fn probe<R, F>(&self, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
   33,409 ( 0.00%)          let snapshot = self.start_snapshot();
   61,968 ( 0.00%)          let r = f(&snapshot);
  160,347 ( 0.01%)          self.rollback_to("probe", snapshot);
   33,798 ( 0.00%)          r
        .               }
        .           
        .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
       54 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
       72 ( 0.00%)      pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
       12 ( 0.00%)          let snapshot = self.start_snapshot();
        6 ( 0.00%)          let was_skip_leak_check = self.skip_leak_check.get();
       12 ( 0.00%)          if should_skip {
        .                       self.skip_leak_check.set(true);
        .                   }
       24 ( 0.00%)          let r = f(&snapshot);
       54 ( 0.00%)          self.rollback_to("probe", snapshot);
        .                   self.skip_leak_check.set(was_skip_leak_check);
       72 ( 0.00%)          r
        .               }
        .           
        .               /// Scan the constraints produced since `snapshot` began and returns:
        .               ///
        .               /// - `None` -- if none of them involve "region outlives" constraints
        .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
        .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
    6,424 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
        .                   &self,
        .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
        .               ) -> Option<bool> {
   12,848 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .unwrap_region_constraints()
        .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
    9,636 ( 0.00%)      }
        .           
        .               pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
        .                   self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
        .               }
        .           
    1,008 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
        .               where
        .                   T: at::ToTrace<'tcx>,
        .               {
        .                   let origin = &ObligationCause::dummy();
        .                   self.probe(|_| {
        .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
        .                           // Ignore obligations, since we are unrolling
        .                           // everything anyway.
        .                       })
        .                   })
      756 ( 0.00%)      }
        .           
    3,648 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
        .               where
        .                   T: at::ToTrace<'tcx>,
        .               {
        .                   let origin = &ObligationCause::dummy();
        .                   self.probe(|_| {
        .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
        .                           // Ignore obligations, since we are unrolling
        .                           // everything anyway.
        .                       })
        .                   })
    2,736 ( 0.00%)      }
        .           
   46,230 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        .               pub fn sub_regions(
        .                   &self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   a: ty::Region<'tcx>,
        .                   b: ty::Region<'tcx>,
        .               ) {
   41,607 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
        .               }
        .           
        .               /// Require that the region `r` be equal to one of the regions in
        .               /// the set `regions`.
        .               #[instrument(skip(self), level = "debug")]
        .               pub fn member_constraint(
        .                   &self,
        .                   opaque_type_def_id: DefId,
-- line 947 ----------------------------------------
-- line 969 ----------------------------------------
        .               /// to `subtype_predicate` -- that is, "coercing" `a` to `b` winds up
        .               /// actually requiring `a <: b`. This is of course a valid coercion,
        .               /// but it's not as flexible as `FnCtxt::coerce` would be.
        .               ///
        .               /// (We may refactor this in the future, but there are a number of
        .               /// practical obstacles. Among other things, `FnCtxt::coerce` presently
        .               /// records adjustments that are required on the HIR in order to perform
        .               /// the coercion, and we don't currently have a way to manage that.)
      210 ( 0.00%)      pub fn coerce_predicate(
        .                   &self,
        .                   cause: &ObligationCause<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   predicate: ty::PolyCoercePredicate<'tcx>,
        .               ) -> Option<InferResult<'tcx, ()>> {
      140 ( 0.00%)          let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
        .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
        .                       a: p.a,
        .                       b: p.b,
        .                   });
      350 ( 0.00%)          self.subtype_predicate(cause, param_env, subtype_predicate)
      280 ( 0.00%)      }
        .           
    4,212 ( 0.00%)      pub fn subtype_predicate(
        .                   &self,
        .                   cause: &ObligationCause<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   predicate: ty::PolySubtypePredicate<'tcx>,
        .               ) -> Option<InferResult<'tcx, ()>> {
        .                   // Check for two unresolved inference variables, in which case we can
        .                   // make no progress. This is partly a micro-optimization, but it's
        .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
        .                   // earlier that they are sub-unified).
        .                   //
        .                   // Note that we can just skip the binders here because
        .                   // type variables can't (at present, at
        .                   // least) capture any of the things bound by this binder.
        .                   //
        .                   // Note that this sub here is not just for diagnostics - it has semantic
        .                   // effects as well.
      351 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
      351 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
    2,410 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
      508 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
        .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
      508 ( 0.00%)                  return None;
        .                       }
        .                       _ => {}
        .                   }
        .           
        .                   Some(self.commit_if_ok(|_snapshot| {
       97 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
        .                           self.replace_bound_vars_with_placeholders(predicate);
        .           
      194 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
        .           
        .                       Ok(ok.unit())
        .                   }))
    3,159 ( 0.00%)      }
        .           
   10,392 ( 0.00%)      pub fn region_outlives_predicate(
        .                   &self,
        .                   cause: &traits::ObligationCause<'tcx>,
        .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
        .               ) -> UnitResult<'tcx> {
        .                   self.commit_if_ok(|_snapshot| {
        .                       let ty::OutlivesPredicate(r_a, r_b) =
        .                           self.replace_bound_vars_with_placeholders(predicate);
        .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
        .                           RelateRegionParamBound(cause.span)
        .                       });
    8,660 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
        .                       Ok(())
        .                   })
    6,928 ( 0.00%)      }
        .           
        .               /// Number of type variables created so far.
       72 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
        .                   self.inner.borrow_mut().type_variables().num_vars()
      144 ( 0.00%)      }
        .           
   18,414 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
   92,070 ( 0.01%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
   27,621 ( 0.00%)      }
        .           
   16,638 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
   63,561 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
   24,957 ( 0.00%)      }
        .           
      904 ( 0.00%)      pub fn next_ty_var_in_universe(
        .                   &self,
        .                   origin: TypeVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> Ty<'tcx> {
    4,972 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
      452 ( 0.00%)          self.tcx.mk_ty_var(vid)
    1,356 ( 0.00%)      }
        .           
        .               pub fn next_const_var(
        .                   &self,
        .                   ty: Ty<'tcx>,
        .                   origin: ConstVariableOrigin,
        .               ) -> &'tcx ty::Const<'tcx> {
        .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
        .               }
-- line 1074 ----------------------------------------
-- line 1090 ----------------------------------------
        .               pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {
        .                   self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
        .                       origin,
        .                       val: ConstVariableValue::Unknown { universe: self.universe() },
        .                   })
        .               }
        .           
        .               fn next_int_var_id(&self) -> IntVid {
      840 ( 0.00%)          self.inner.borrow_mut().int_unification_table().new_key(None)
        .               }
        .           
      504 ( 0.00%)      pub fn next_int_var(&self) -> Ty<'tcx> {
        .                   self.tcx.mk_int_var(self.next_int_var_id())
      672 ( 0.00%)      }
        .           
        .               fn next_float_var_id(&self) -> FloatVid {
        .                   self.inner.borrow_mut().float_unification_table().new_key(None)
        .               }
        .           
        .               pub fn next_float_var(&self) -> Ty<'tcx> {
        .                   self.tcx.mk_float_var(self.next_float_var_id())
        .               }
        .           
        .               /// Creates a fresh region variable with the next available index.
        .               /// The variable will be created in the maximum universe created
        .               /// thus far, allowing it to name any region created thus far.
    9,363 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
  208,900 ( 0.01%)          self.next_region_var_in_universe(origin, self.universe())
   18,726 ( 0.00%)      }
        .           
        .               /// Creates a fresh region variable with the next available index
        .               /// in the given universe; typically, you can use
        .               /// `next_region_var` and just use the maximal universe.
   80,660 ( 0.00%)      pub fn next_region_var_in_universe(
        .                   &self,
        .                   origin: RegionVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> ty::Region<'tcx> {
        .                   let region_var =
  524,290 ( 0.03%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
  201,650 ( 0.01%)          self.tcx.mk_region(ty::ReVar(region_var))
  120,990 ( 0.01%)      }
        .           
        .               /// Return the universe that the region `r` was created in.  For
        .               /// most regions (e.g., `'static`, named regions from the user,
        .               /// etc) this is the root universe U0. For inference variables or
        .               /// placeholders, however, it will return the universe which which
        .               /// they are associated.
    6,210 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
        .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
    9,315 ( 0.00%)      }
        .           
        .               /// Number of region variables created so far.
    2,318 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
        .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
    3,477 ( 0.00%)      }
        .           
        .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
   16,279 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
        .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
   32,558 ( 0.00%)      }
        .           
        .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
    1,057 ( 0.00%)      pub fn next_nll_region_var_in_universe(
        .                   &self,
        .                   origin: NllRegionVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> ty::Region<'tcx> {
    7,787 ( 0.00%)          self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
    2,114 ( 0.00%)      }
        .           
  136,616 ( 0.01%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
   73,089 ( 0.00%)          match param.kind {
        .                       GenericParamDefKind::Lifetime => {
        .                           // Create a region inference variable for the given
        .                           // region parameter definition.
    6,148 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
        .                       }
        .                       GenericParamDefKind::Type { .. } => {
        .                           // Create a type inference variable for the given
        .                           // type parameter definition. The substitutions are
        .                           // for actual parameters that may be referred to by
        .                           // the default of this type parameter, if it exists.
        .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
        .                           // used in a path such as `Foo::<T, U>::new()` will
        .                           // use an inference variable for `C` with `[T, U]`
        .                           // as the substitutions for the default, `(T, U)`.
   43,128 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
        .                               self.universe(),
   53,910 ( 0.00%)                      TypeVariableOrigin {
        .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
   10,782 ( 0.00%)                              param.name,
   10,782 ( 0.00%)                              Some(param.def_id),
        .                                   ),
        .                                   span,
        .                               },
        .                           );
        .           
   10,782 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
        .                       }
        .                       GenericParamDefKind::Const { .. } => {
        .                           let origin = ConstVariableOrigin {
        .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
        .                                   param.name,
        .                                   param.def_id,
        .                               ),
        .                               span,
        .                           };
        .                           let const_var_id =
    1,617 ( 0.00%)                      self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
        .                                   origin,
        .                                   val: ConstVariableValue::Unknown { universe: self.universe() },
        .                               });
      147 ( 0.00%)                  self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
        .                       }
        .                   }
    1,176 ( 0.00%)      }
        .           
        .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
        .               /// type/region parameter to a fresh inference variable.
   31,572 ( 0.00%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
  139,749 ( 0.01%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
   21,048 ( 0.00%)      }
        .           
        .               /// Returns `true` if errors have been reported since this infcx was
        .               /// created. This is sometimes used as a heuristic to skip
        .               /// reporting errors that often occur as a result of earlier
        .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
        .               /// inference variables, regionck errors).
      940 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
        .                   debug!(
        .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
        .                        tainted_by_errors_flag={})",
        .                       self.tcx.sess.err_count(),
        .                       self.err_count_on_creation,
        .                       self.tainted_by_errors_flag.get()
        .                   );
        .           
   19,886 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
        .                       return true; // errors reported since this infcx was made
        .                   }
        .                   self.tainted_by_errors_flag.get()
    1,410 ( 0.00%)      }
        .           
        .               /// Set the "tainted by errors" flag to true. We call this when we
        .               /// observe an error from a prior pass.
        .               pub fn set_tainted_by_errors(&self) {
        .                   debug!("set_tainted_by_errors()");
        .                   self.tainted_by_errors_flag.set(true)
        .               }
        .           
        .               /// Process the region constraints and return any any errors that
        .               /// result. After this, no more unification operations should be
        .               /// done -- or the compiler will panic -- but it is legal to use
        .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
   19,362 ( 0.00%)      pub fn resolve_regions(
        .                   &self,
        .                   region_context: DefId,
        .                   outlives_env: &OutlivesEnvironment<'tcx>,
        .                   mode: RegionckMode,
        .               ) -> Vec<RegionResolutionError<'tcx>> {
   52,554 ( 0.00%)          let (var_infos, data) = {
        .                       let mut inner = self.inner.borrow_mut();
        .                       let inner = &mut *inner;
    2,766 ( 0.00%)              assert!(
    8,298 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
        .                           "region_obligations not empty: {:#?}",
        .                           inner.region_obligations
        .                       );
        .                       inner
        .                           .region_constraint_storage
        .                           .take()
        .                           .expect("regions already resolved")
        .                           .with_log(&mut inner.undo_log)
        .                           .into_infos_and_data()
    2,766 ( 0.00%)          };
        .           
        .                   let region_rels =
    2,766 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
        .           
   24,894 ( 0.00%)          let (lexical_region_resolutions, errors) =
   66,384 ( 0.00%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
        .           
   11,064 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
    2,766 ( 0.00%)          assert!(old_value.is_none());
        .           
        .                   errors
   24,894 ( 0.00%)      }
        .           
        .               /// Process the region constraints and report any errors that
        .               /// result. After this, no more unification operations should be
        .               /// done -- or the compiler will panic -- but it is legal to use
        .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
   27,660 ( 0.00%)      pub fn resolve_regions_and_report_errors(
        .                   &self,
        .                   region_context: DefId,
        .                   outlives_env: &OutlivesEnvironment<'tcx>,
        .                   mode: RegionckMode,
        .               ) {
    5,532 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
        .           
    8,298 ( 0.00%)          if !self.is_tainted_by_errors() {
        .                       // As a heuristic, just skip reporting region errors
        .                       // altogether if other errors have been reported while
        .                       // this infcx was in use.  This is totally hokey but
        .                       // otherwise we have a hard time separating legit region
        .                       // errors from silly ones.
    5,532 ( 0.00%)              self.report_region_errors(&errors);
        .                   }
   13,830 ( 0.00%)      }
        .           
        .               /// Obtains (and clears) the current set of region
        .               /// constraints. The inference context is still usable: further
        .               /// unifications will simply add new constraints.
        .               ///
        .               /// This method is not meant to be used with normal lexical region
        .               /// resolution. Rather, it is used in the NLL mode as a kind of
        .               /// interim hack: basically we run normal type-check and generate
-- line 1307 ----------------------------------------
-- line 1319 ----------------------------------------
        .               }
        .           
        .               /// Gives temporary access to the region constraint data.
        .               pub fn with_region_constraints<R>(
        .                   &self,
        .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
        .               ) -> R {
        .                   let mut inner = self.inner.borrow_mut();
    7,116 ( 0.00%)          op(inner.unwrap_region_constraints().data())
        .               }
        .           
        .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
        .                   let mut inner = self.inner.borrow_mut();
        .                   let inner = &mut *inner;
        .                   inner
        .                       .region_constraint_storage
        .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
        .                       .var_origin(vid)
        .               }
        .           
        .               /// Takes ownership of the list of variable regions. This implies
        .               /// that all the region constraints have already been taken, and
        .               /// hence that `resolve_regions_and_report_errors` can never be
        .               /// called. This is used only during NLL processing to "hand off" ownership
        .               /// of the set of region variables into the NLL region context.
    1,400 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
        .                   let mut inner = self.inner.borrow_mut();
    5,320 ( 0.00%)          let (var_infos, data) = inner
        .                       .region_constraint_storage
        .                       .take()
        .                       .expect("regions already resolved")
        .                       .with_log(&mut inner.undo_log)
      280 ( 0.00%)              .into_infos_and_data();
      280 ( 0.00%)          assert!(data.is_empty());
        .                   var_infos
    2,240 ( 0.00%)      }
        .           
        .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
        .                   self.resolve_vars_if_possible(t).to_string()
        .               }
        .           
        .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
        .               /// universe index of `TyVar(vid)`.
    6,710 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
        .                   use self::type_variable::TypeVariableValue;
        .           
   20,130 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
        .                       TypeVariableValue::Known { value } => Ok(value),
        .                       TypeVariableValue::Unknown { universe } => Err(universe),
        .                   }
   23,485 ( 0.00%)      }
        .           
        .               /// Resolve any type variables found in `value` -- but only one
        .               /// level.  So, if the variable `?X` is bound to some type
        .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
        .               /// itself be bound to a type).
        .               ///
        .               /// Useful when you only need to inspect the outermost level of
        .               /// the type and don't care about nested types (or perhaps you
        .               /// will be resolving them as well, e.g. in a loop).
        .               pub fn shallow_resolve<T>(&self, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  169,685 ( 0.01%)          value.fold_with(&mut ShallowResolver { infcx: self })
        .               }
        .           
   10,962 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
        .                   self.inner.borrow_mut().type_variables().root_var(var)
   16,443 ( 0.00%)      }
        .           
        .               /// Where possible, replaces type/const variables in
        .               /// `value` with their final value. Note that region variables
        .               /// are unaffected. If a type/const variable has not been unified, it
        .               /// is left as is. This is an idempotent operation that does
        .               /// not affect inference state in any way and so you can do it
        .               /// at will.
    2,084 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  152,736 ( 0.01%)          if !value.needs_infer() {
   79,856 ( 0.00%)              return value; // Avoid duplicated subst-folding.
        .                   }
  160,523 ( 0.01%)          let mut r = resolve::OpportunisticVarResolver::new(self);
  197,245 ( 0.01%)          value.fold_with(&mut r)
    2,563 ( 0.00%)      }
        .           
        .               /// Returns the first unresolved variable contained in `T`. In the
        .               /// process of visiting `T`, this will resolve (where possible)
        .               /// type variables in `T`, but it never constructs the final,
        .               /// resolved type, so it's more efficient than
        .               /// `resolve_vars_if_possible()`.
        .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
        .               where
-- line 1415 ----------------------------------------
-- line 1490 ----------------------------------------
        .                   expected: &'tcx ty::Const<'tcx>,
        .                   actual: &'tcx ty::Const<'tcx>,
        .                   err: TypeError<'tcx>,
        .               ) -> DiagnosticBuilder<'tcx> {
        .                   let trace = TypeTrace::consts(cause, true, expected, actual);
        .                   self.report_and_explain_type_error(trace, &err)
        .               }
        .           
   15,426 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
        .                   &self,
        .                   span: Span,
        .                   lbrct: LateBoundRegionConversionTime,
        .                   value: ty::Binder<'tcx, T>,
        .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   let fld_r =
  108,333 ( 0.01%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
        .                   let fld_t = |_| {
        .                       self.next_ty_var(TypeVariableOrigin {
        .                           kind: TypeVariableOriginKind::MiscVariable,
        .                           span,
        .                       })
        .                   };
        .                   let fld_c = |_, ty| {
        .                       self.next_const_var(
        .                           ty,
        .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
        .                       )
        .                   };
   99,283 ( 0.01%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
   10,284 ( 0.00%)      }
        .           
        .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
      976 ( 0.00%)      pub fn verify_generic_bound(
        .                   &self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   kind: GenericKind<'tcx>,
        .                   a: ty::Region<'tcx>,
        .                   bound: VerifyBound<'tcx>,
        .               ) {
        .                   debug!("verify_generic_bound({:?}, {:?} <: {:?})", kind, a, bound);
        .           
      366 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .unwrap_region_constraints()
    2,074 ( 0.00%)              .verify_generic_bound(origin, kind, a, bound);
      854 ( 0.00%)      }
        .           
        .               /// Obtains the latest type of the given closure; this may be a
        .               /// closure in the current function, in which case its
        .               /// `ClosureKind` may not yet be known.
    1,496 ( 0.00%)      pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
    2,992 ( 0.00%)          let closure_kind_ty = closure_substs.as_closure().kind_ty();
        .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
    2,244 ( 0.00%)          closure_kind_ty.to_opt_closure_kind()
        .               }
        .           
        .               /// Clears the selection, evaluation, and projection caches. This is useful when
        .               /// repeatedly attempting to select an `Obligation` while changing only
        .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
        .               pub fn clear_caches(&self) {
        .                   self.selection_cache.clear();
        .                   self.evaluation_cache.clear();
        .                   self.inner.borrow_mut().projection_cache().clear();
        .               }
        .           
        .               pub fn universe(&self) -> ty::UniverseIndex {
  295,938 ( 0.02%)          self.universe.get()
  111,977 ( 0.01%)      }
        .           
        .               /// Creates and return a fresh universe that extends all previous
        .               /// universes. Updates `self.universe` to that new universe.
      874 ( 0.00%)      pub fn create_next_universe(&self) -> ty::UniverseIndex {
    1,792 ( 0.00%)          let u = self.universe.get().next_universe();
        .                   self.universe.set(u);
        .                   u
      874 ( 0.00%)      }
        .           
        .               /// Resolves and evaluates a constant.
        .               ///
        .               /// The constant can be located on a trait like `<A as B>::C`, in which case the given
        .               /// substitutions and environment are used to resolve the constant. Alternatively if the
        .               /// constant has generic parameters in scope the substitutions are used to evaluate the value of
        .               /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count
        .               /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still
-- line 1576 ----------------------------------------
-- line 1606 ----------------------------------------
        .                   // variables, thus we don't need to substitute back the original values.
        .                   self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
        .               }
        .           
        .               /// If `typ` is a type variable of some kind, resolve it one level
        .               /// (but do not resolve types found in the result). If `typ` is
        .               /// not a type variable, just return it unmodified.
        .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
1,740,992 ( 0.11%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
  908,578 ( 0.06%)          match *typ.kind() {
        .                       ty::Infer(ty::TyVar(v)) => {
        .                           // Not entirely obvious: if `typ` is a type variable,
        .                           // it can be resolved to an int/float variable, which
        .                           // can then be recursively resolved, hence the
        .                           // recursion. Note though that we prevent type
        .                           // variables from unifying to other type variables
        .                           // directly (though they may be embedded
        .                           // structurally), and we prevent cycles in any case,
        .                           // so this recursion should always be of very limited
        .                           // depth.
        .                           //
        .                           // Note: if these two lines are combined into one we get
        .                           // dynamic borrow errors on `self.inner`.
  460,280 ( 0.03%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
        .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
        .                       }
        .           
   16,036 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self
        .                           .inner
        .                           .borrow_mut()
        .                           .int_unification_table()
        .                           .probe_value(v)
    4,494 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
        .                           .unwrap_or(typ),
        .           
        .                       ty::Infer(ty::FloatVar(v)) => self
        .                           .inner
        .                           .borrow_mut()
        .                           .float_unification_table()
        .                           .probe_value(v)
        .                           .map(|v| v.to_type(self.tcx))
        .                           .unwrap_or(typ),
        .           
        .                       _ => typ,
        .                   }
1,958,616 ( 0.12%)      }
        .           
        .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
        .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
        .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
        .               ///
        .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
        .               /// inlined, despite being large, because it has only two call sites that
        .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
        .               #[inline(always)]
        .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
        .                   match infer_var {
        .                       TyOrConstInferVar::Ty(v) => {
        .                           use self::type_variable::TypeVariableValue;
        .           
        .                           // If `inlined_probe` returns a `Known` value, it never equals
        .                           // `ty::Infer(ty::TyVar(v))`.
1,115,154 ( 0.07%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
        .                               TypeVariableValue::Unknown { .. } => false,
        .                               TypeVariableValue::Known { .. } => true,
        .                           }
        .                       }
        .           
        .                       TyOrConstInferVar::TyInt(v) => {
        .                           // If `inlined_probe_value` returns a value it's always a
        .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
        .                           // `ty::Infer(_)`.
   16,904 ( 0.00%)                  self.inner.borrow_mut().int_unification_table().inlined_probe_value(v).is_some()
        .                       }
        .           
        .                       TyOrConstInferVar::TyFloat(v) => {
        .                           // If `probe_value` returns a value it's always a
        .                           // `ty::Float(_)`, which never matches a `ty::Infer(_)`.
        .                           //
        .                           // Not `inlined_probe_value(v)` because this call site is colder.
        .                           self.inner.borrow_mut().float_unification_table().probe_value(v).is_some()
-- line 1688 ----------------------------------------
-- line 1716 ----------------------------------------
        .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
        .               Const(ConstVid<'tcx>),
        .           }
        .           
        .           impl<'tcx> TyOrConstInferVar<'tcx> {
        .               /// Tries to extract an inference variable from a type or a constant, returns `None`
        .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
        .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
    5,700 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
        .                   match arg.unpack() {
        .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
        .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
        .                       GenericArgKind::Lifetime(_) => None,
        .                   }
    5,700 ( 0.00%)      }
        .           
        .               /// Tries to extract an inference variable from a type, returns `None`
        .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
      504 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
   55,507 ( 0.00%)          match *ty.kind() {
   12,104 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
      294 ( 0.00%)              ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
        .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
        .                       _ => None,
        .                   }
      504 ( 0.00%)      }
        .           
        .               /// Tries to extract an inference variable from a constant, returns `None`
        .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
        .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
        .                   match ct.val {
        .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
        .                       _ => None,
        .                   }
-- line 1749 ----------------------------------------
-- line 1755 ----------------------------------------
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
        .                   self.infcx.tcx
        .               }
        .           
        .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
  335,157 ( 0.02%)          self.infcx.shallow_resolve_ty(ty)
        .               }
        .           
    2,748 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
    1,794 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
    1,050 ( 0.00%)              self.infcx
        .                           .inner
        .                           .borrow_mut()
        .                           .const_unification_table()
      630 ( 0.00%)                  .probe_value(*vid)
        .                           .val
        .                           .known()
        .                           .unwrap_or(ct)
        .                   } else {
        .                       ct
        .                   }
    3,435 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeTrace<'tcx> {
        .               pub fn span(&self) -> Span {
      320 ( 0.00%)          self.cause.span
        .               }
        .           
        .               pub fn types(
        .                   cause: &ObligationCause<'tcx>,
        .                   a_is_expected: bool,
        .                   a: Ty<'tcx>,
        .                   b: Ty<'tcx>,
        .               ) -> TypeTrace<'tcx> {
-- line 1792 ----------------------------------------
-- line 1800 ----------------------------------------
        .                   b: &'tcx ty::Const<'tcx>,
        .               ) -> TypeTrace<'tcx> {
        .                   TypeTrace { cause: cause.clone(), values: Consts(ExpectedFound::new(a_is_expected, a, b)) }
        .               }
        .           }
        .           
        .           impl<'tcx> SubregionOrigin<'tcx> {
        .               pub fn span(&self) -> Span {
      800 ( 0.00%)          match *self {
      160 ( 0.00%)              Subtype(ref a) => a.span(),
        .                       RelateObjectBound(a) => a,
        .                       RelateParamBound(a, ..) => a,
        .                       RelateRegionParamBound(a) => a,
        .                       Reborrow(a) => a,
        .                       ReborrowUpvar(a, _) => a,
        .                       DataBorrowed(_, a) => a,
        .                       ReferenceOutlivesReferent(_, a) => a,
        .                       CompareImplMethodObligation { span, .. } => span,
-- line 1817 ----------------------------------------
-- line 1818 ----------------------------------------
        .                       CompareImplTypeObligation { span, .. } => span,
        .                   }
        .               }
        .           
        .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
        .               where
        .                   F: FnOnce() -> Self,
        .               {
   17,570 ( 0.00%)          match *cause.code() {
    3,682 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
   18,410 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
        .                       }
        .           
        .                       traits::ObligationCauseCode::CompareImplMethodObligation {
        .                           impl_item_def_id,
        .                           trait_item_def_id,
        .                       } => SubregionOrigin::CompareImplMethodObligation {
        .                           span: cause.span,
        .                           impl_item_def_id,
-- line 1836 ----------------------------------------

1,961,577 ( 0.12%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 38 ----------------------------------------
      .           #[derive(Debug)]
      .           pub struct Token {
      .               pub kind: TokenKind,
      .               pub len: usize,
      .           }
      .           
      .           impl Token {
      .               fn new(kind: TokenKind, len: usize) -> Token {
363,798 ( 0.02%)          Token { kind, len }
      .               }
      .           }
      .           
      .           /// Enum representing common lexeme types.
      .           // perf note: Changing all `usize` to `u32` doesn't change performance. See #77629
 99,060 ( 0.01%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
      .           pub enum TokenKind {
      .               // Multi-char tokens:
      .               /// "// comment"
      .               LineComment { doc_style: Option<DocStyle> },
      .               /// `/* block comment */`
      .               ///
      .               /// Block comments can be recursive, so the sequence like `/* /* */`
      .               /// will not be considered terminated and will result in a parsing error.
-- line 60 ----------------------------------------
-- line 192 ----------------------------------------
      .               /// Literal starts with "0x".
      .               Hexadecimal,
      .               /// Literal doesn't contain a prefix.
      .               Decimal,
      .           }
      .           
      .           /// `rustc` allows files to have a shebang, e.g. "#!/usr/bin/rustrun",
      .           /// but shebang isn't a part of rust syntax.
     49 ( 0.00%)  pub fn strip_shebang(input: &str) -> Option<usize> {
      .               // Shebang must start with `#!` literally, without any preceding whitespace.
      .               // For simplicity we consider any line starting with `#!` a shebang,
      .               // regardless of restrictions put on shebangs by specific platforms.
      .               if let Some(input_tail) = input.strip_prefix("#!") {
      .                   // Ok, this is a shebang but if the next non-whitespace token is `[`,
      .                   // then it may be valid Rust code, so consider it Rust code.
      .                   let next_non_whitespace_token = tokenize(input_tail).map(|tok| tok.kind).find(|tok| {
      .                       !matches!(
-- line 208 ----------------------------------------
-- line 213 ----------------------------------------
      .                       )
      .                   });
      .                   if next_non_whitespace_token != Some(TokenKind::OpenBracket) {
      .                       // No other choice than to consider this a shebang.
      .                       return Some(2 + input_tail.lines().next().unwrap_or_default().len());
      .                   }
      .               }
      .               None
     56 ( 0.00%)  }
      .           
      .           /// Parses the first token from the provided input string.
121,266 ( 0.01%)  pub fn first_token(input: &str) -> Token {
      .               debug_assert!(!input.is_empty());
 40,422 ( 0.00%)      Cursor::new(input).advance_token()
161,688 ( 0.01%)  }
      .           
      .           /// Creates an iterator that produces tokens from the input string.
      .           pub fn tokenize(input: &str) -> impl Iterator<Item = Token> + '_ {
      .               let mut cursor = Cursor::new(input);
      .               std::iter::from_fn(move || {
      .                   if cursor.is_eof() {
      .                       None
      .                   } else {
-- line 235 ----------------------------------------
-- line 243 ----------------------------------------
      .           /// See [Rust language reference](https://doc.rust-lang.org/reference/whitespace.html)
      .           /// for definitions of these classes.
      .           pub fn is_whitespace(c: char) -> bool {
      .               // This is Pattern_White_Space.
      .               //
      .               // Note that this set is stable (ie, it doesn't change with different
      .               // Unicode versions), so it's ok to just hard-code the values.
      .           
135,510 ( 0.01%)      matches!(
      .                   c,
      .                   // Usual ASCII suspects
      .                   '\u{0009}'   // \t
      .                   | '\u{000A}' // \n
      .                   | '\u{000B}' // vertical tab
      .                   | '\u{000C}' // form feed
      .                   | '\u{000D}' // \r
      .                   | '\u{0020}' // space
-- line 259 ----------------------------------------
-- line 269 ----------------------------------------
      .                   | '\u{2028}' // LINE SEPARATOR
      .                   | '\u{2029}' // PARAGRAPH SEPARATOR
      .               )
      .           }
      .           
      .           /// True if `c` is valid as a first character of an identifier.
      .           /// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for
      .           /// a formal definition of valid identifier name.
    268 ( 0.00%)  pub fn is_id_start(c: char) -> bool {
      .               // This is XID_Start OR '_' (which formally is not a XID_Start).
  2,578 ( 0.00%)      c == '_' || unicode_xid::UnicodeXID::is_xid_start(c)
    268 ( 0.00%)  }
      .           
      .           /// True if `c` is valid as a non-first character of an identifier.
      .           /// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for
      .           /// a formal definition of valid identifier name.
      .           pub fn is_id_continue(c: char) -> bool {
      .               unicode_xid::UnicodeXID::is_xid_continue(c)
      1 ( 0.00%)  }
      .           
      .           /// The passed string is lexically an identifier.
     20 ( 0.00%)  pub fn is_ident(string: &str) -> bool {
      .               let mut chars = string.chars();
      .               if let Some(start) = chars.next() {
      .                   is_id_start(start) && chars.all(is_id_continue)
      .               } else {
      .                   false
      .               }
     28 ( 0.00%)  }
      .           
      .           impl Cursor<'_> {
      .               /// Parses a token from the input string.
323,376 ( 0.02%)      fn advance_token(&mut self) -> Token {
      .                   let first_char = self.bump().unwrap();
149,034 ( 0.01%)          let token_kind = match first_char {
      .                       // Slash, comment or block comment.
  7,122 ( 0.00%)              '/' => match self.first() {
      .                           '/' => self.line_comment(),
      .                           '*' => self.block_comment(),
      .                           _ => Slash,
      .                       },
      .           
      .                       // Whitespace sequence.
      .                       c if is_whitespace(c) => self.whitespace(),
      .           
      .                       // Raw identifier, raw string literal or identifier.
  1,262 ( 0.00%)              'r' => match (self.first(), self.second()) {
      .                           ('#', c1) if is_id_start(c1) => self.raw_ident(),
      .                           ('#', _) | ('"', _) => {
     11 ( 0.00%)                      let (n_hashes, err) = self.raw_double_quoted_string(1);
      .                               let suffix_start = self.len_consumed();
      1 ( 0.00%)                      if err.is_none() {
      .                                   self.eat_literal_suffix();
      .                               }
      .                               let kind = RawStr { n_hashes, err };
      7 ( 0.00%)                      Literal { kind, suffix_start }
      .                           }
      .                           _ => self.ident_or_unknown_prefix(),
      .                       },
      .           
      .                       // Byte literal, byte string literal, raw byte string literal or identifier.
  2,751 ( 0.00%)              'b' => match (self.first(), self.second()) {
      .                           ('\'', _) => {
      .                               self.bump();
    300 ( 0.00%)                      let terminated = self.single_quoted_string();
      .                               let suffix_start = self.len_consumed();
    200 ( 0.00%)                      if terminated {
      .                                   self.eat_literal_suffix();
      .                               }
      .                               let kind = Byte { terminated };
    200 ( 0.00%)                      Literal { kind, suffix_start }
      .                           }
      .                           ('"', _) => {
      .                               self.bump();
      3 ( 0.00%)                      let terminated = self.double_quoted_string();
      .                               let suffix_start = self.len_consumed();
      2 ( 0.00%)                      if terminated {
      .                                   self.eat_literal_suffix();
      .                               }
      .                               let kind = ByteStr { terminated };
      2 ( 0.00%)                      Literal { kind, suffix_start }
      .                           }
      .                           ('r', '"') | ('r', '#') => {
      .                               self.bump();
      .                               let (n_hashes, err) = self.raw_double_quoted_string(2);
      .                               let suffix_start = self.len_consumed();
      .                               if err.is_none() {
      .                                   self.eat_literal_suffix();
      .                               }
-- line 357 ----------------------------------------
-- line 361 ----------------------------------------
      .                           _ => self.ident_or_unknown_prefix(),
      .                       },
      .           
      .                       // Identifier (this should be checked after other variant that can
      .                       // start as identifier).
      .                       c if is_id_start(c) => self.ident_or_unknown_prefix(),
      .           
      .                       // Numeric literal.
 49,611 ( 0.00%)              c @ '0'..='9' => {
      .                           let literal_kind = self.number(c);
      .                           let suffix_start = self.len_consumed();
      .                           self.eat_literal_suffix();
    955 ( 0.00%)                  TokenKind::Literal { kind: literal_kind, suffix_start }
      .                       }
      .           
      .                       // One-symbol tokens.
  1,736 ( 0.00%)              ';' => Semi,
  2,380 ( 0.00%)              ',' => Comma,
  3,562 ( 0.00%)              '.' => Dot,
  4,612 ( 0.00%)              '(' => OpenParen,
  4,612 ( 0.00%)              ')' => CloseParen,
  1,734 ( 0.00%)              '{' => OpenBrace,
  1,734 ( 0.00%)              '}' => CloseBrace,
    374 ( 0.00%)              '[' => OpenBracket,
    374 ( 0.00%)              ']' => CloseBracket,
      2 ( 0.00%)              '@' => At,
    212 ( 0.00%)              '#' => Pound,
      .                       '~' => Tilde,
    110 ( 0.00%)              '?' => Question,
  2,698 ( 0.00%)              ':' => Colon,
     54 ( 0.00%)              '$' => Dollar,
  2,200 ( 0.00%)              '=' => Eq,
    448 ( 0.00%)              '!' => Bang,
    606 ( 0.00%)              '<' => Lt,
  1,492 ( 0.00%)              '>' => Gt,
    464 ( 0.00%)              '-' => Minus,
  1,078 ( 0.00%)              '&' => And,
    670 ( 0.00%)              '|' => Or,
    162 ( 0.00%)              '+' => Plus,
    112 ( 0.00%)              '*' => Star,
      .                       '^' => Caret,
      .                       '%' => Percent,
      .           
      .                       // Lifetime or character literal.
  1,332 ( 0.00%)              '\'' => self.lifetime_or_char(),
      .           
      .                       // String literal.
      .                       '"' => {
    567 ( 0.00%)                  let terminated = self.double_quoted_string();
      .                           let suffix_start = self.len_consumed();
    378 ( 0.00%)                  if terminated {
      .                               self.eat_literal_suffix();
      .                           }
      .                           let kind = Str { terminated };
    378 ( 0.00%)                  Literal { kind, suffix_start }
      .                       }
      .                       // Identifier starting with an emoji. Only lexed for graceful error recovery.
      .                       c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {
      .                           self.fake_ident_or_unknown_prefix()
      .                       }
      .                       _ => Unknown,
      .                   };
      .                   Token::new(token_kind, self.len_consumed())
363,798 ( 0.02%)      }
      .           
      .               fn line_comment(&mut self) -> TokenKind {
      .                   debug_assert!(self.prev() == '/' && self.first() == '/');
      .                   self.bump();
      .           
  4,052 ( 0.00%)          let doc_style = match self.first() {
      .                       // `//!` is an inner line doc comment.
      .                       '!' => Some(DocStyle::Inner),
      .                       // `////` (more than 3 slashes) is not considered a doc comment.
  4,602 ( 0.00%)              '/' if self.second() != '/' => Some(DocStyle::Outer),
      .                       _ => None,
      .                   };
      .           
 57,614 ( 0.00%)          self.eat_while(|c| c != '\n');
  5,340 ( 0.00%)          LineComment { doc_style }
      .               }
      .           
      .               fn block_comment(&mut self) -> TokenKind {
      .                   debug_assert!(self.prev() == '/' && self.first() == '*');
      .                   self.bump();
      .           
      4 ( 0.00%)          let doc_style = match self.first() {
      .                       // `/*!` is an inner block doc comment.
      .                       '!' => Some(DocStyle::Inner),
      .                       // `/***` (more than 2 stars) is not considered a doc comment.
      .                       // `/**/` is not considered a doc comment.
      .                       '*' if !matches!(self.second(), '*' | '/') => Some(DocStyle::Outer),
      .                       _ => None,
      .                   };
      .           
      .                   let mut depth = 1usize;
 19,354 ( 0.00%)          while let Some(c) = self.bump() {
      .                       match c {
     94 ( 0.00%)                  '/' if self.first() == '*' => {
      .                               self.bump();
      .                               depth += 1;
      .                           }
     14 ( 0.00%)                  '*' if self.first() == '/' => {
      .                               self.bump();
      2 ( 0.00%)                      depth -= 1;
      2 ( 0.00%)                      if depth == 0 {
      .                                   // This block comment is closed, so for a construction like "/* */ */"
      .                                   // there will be a successfully parsed block comment "/* */"
      .                                   // and " */" will be processed separately.
      .                                   break;
      .                               }
      .                           }
      .                           _ => (),
      .                       }
      .                   }
      .           
      5 ( 0.00%)          BlockComment { doc_style, terminated: depth == 0 }
      .               }
      .           
      .               fn whitespace(&mut self) -> TokenKind {
      .                   debug_assert!(is_whitespace(self.prev()));
      .                   self.eat_while(is_whitespace);
 12,096 ( 0.00%)          Whitespace
      .               }
      .           
      .               fn raw_ident(&mut self) -> TokenKind {
      .                   debug_assert!(self.prev() == 'r' && self.first() == '#' && is_id_start(self.second()));
      .                   // Eat "#" symbol.
      .                   self.bump();
      .                   // Eat the identifier part of RawIdent.
      .                   self.eat_identifier();
      .                   RawIdent
      .               }
      .           
 49,530 ( 0.00%)      fn ident_or_unknown_prefix(&mut self) -> TokenKind {
      .                   debug_assert!(is_id_start(self.prev()));
      .                   // Start is already eaten, eat the rest of identifier.
 19,812 ( 0.00%)          self.eat_while(is_id_continue);
      .                   // Known prefixes must have been handled earlier. So if
      .                   // we see a prefix here, it is definitely an unknown prefix.
 19,812 ( 0.00%)          match self.first() {
      .                       '#' | '"' | '\'' => UnknownPrefix,
  9,906 ( 0.00%)              c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {
      .                           self.fake_ident_or_unknown_prefix()
      .                       }
  9,906 ( 0.00%)              _ => Ident,
      .                   }
 39,624 ( 0.00%)      }
      .           
      .               fn fake_ident_or_unknown_prefix(&mut self) -> TokenKind {
      .                   // Start is already eaten, eat the rest of identifier.
      .                   self.eat_while(|c| {
      .                       unicode_xid::UnicodeXID::is_xid_continue(c)
      .                           || (!c.is_ascii() && unic_emoji_char::is_emoji(c))
      .                           || c == '\u{200d}'
      .                   });
-- line 515 ----------------------------------------
-- line 519 ----------------------------------------
      .                       '#' | '"' | '\'' => UnknownPrefix,
      .                       _ => InvalidIdent,
      .                   }
      .               }
      .           
      .               fn number(&mut self, first_digit: char) -> LiteralKind {
      .                   debug_assert!('0' <= self.prev() && self.prev() <= '9');
      .                   let mut base = Base::Decimal;
    382 ( 0.00%)          if first_digit == '0' {
      .                       // Attempt to parse encoding base.
    211 ( 0.00%)              let has_digits = match self.first() {
      .                           'b' => {
      .                               base = Base::Binary;
      .                               self.bump();
      .                               self.eat_decimal_digits()
      .                           }
      .                           'o' => {
      .                               base = Base::Octal;
      .                               self.bump();
-- line 537 ----------------------------------------
-- line 538 ----------------------------------------
      .                               self.eat_decimal_digits()
      .                           }
      .                           'x' => {
      .                               base = Base::Hexadecimal;
      .                               self.bump();
      .                               self.eat_hexadecimal_digits()
      .                           }
      .                           // Not a base prefix.
    129 ( 0.00%)                  '0'..='9' | '_' | '.' | 'e' | 'E' => {
      .                               self.eat_decimal_digits();
      .                               true
      .                           }
      .                           // Just a 0.
      .                           _ => return Int { base, empty_int: false },
      .                       };
      .                       // Base prefix was provided, but there were no digits
      .                       // after it, e.g. "0x".
-- line 554 ----------------------------------------
-- line 555 ----------------------------------------
      .                       if !has_digits {
      .                           return Int { base, empty_int: true };
      .                       }
      .                   } else {
      .                       // No base prefix, parse number in the usual way.
      .                       self.eat_decimal_digits();
      .                   };
      .           
    812 ( 0.00%)          match self.first() {
      .                       // Don't be greedy if this is actually an
      .                       // integer literal followed by field/method access or a range pattern
      .                       // (`0..2` and `12.foo()`)
     44 ( 0.00%)              '.' if self.second() != '.' && !is_id_start(self.second()) => {
      .                           // might have stuff after the ., and if it does, it needs to start
      .                           // with a number
      .                           self.bump();
      .                           let mut empty_exponent = false;
      .                           if self.first().is_digit(10) {
      .                               self.eat_decimal_digits();
      .                               match self.first() {
      .                                   'e' | 'E' => {
-- line 575 ----------------------------------------
-- line 585 ----------------------------------------
      .                           self.bump();
      .                           let empty_exponent = !self.eat_float_exponent();
      .                           Float { base, empty_exponent }
      .                       }
      .                       _ => Int { base, empty_int: false },
      .                   }
      .               }
      .           
  3,108 ( 0.00%)      fn lifetime_or_char(&mut self) -> TokenKind {
      .                   debug_assert!(self.prev() == '\'');
      .           
    888 ( 0.00%)          let can_be_a_lifetime = if self.second() == '\'' {
      .                       // It's surely not a lifetime.
      .                       false
      .                   } else {
      .                       // If the first symbol is valid for identifier, it can be a lifetime.
      .                       // Also check if it's a number for a better error reporting (so '0 will
      .                       // be reported as invalid lifetime and not as unterminated char literal).
      .                       is_id_start(self.first()) || self.first().is_digit(10)
      .                   };
      .           
     91 ( 0.00%)          if !can_be_a_lifetime {
    957 ( 0.00%)              let terminated = self.single_quoted_string();
      .                       let suffix_start = self.len_consumed();
    638 ( 0.00%)              if terminated {
      .                           self.eat_literal_suffix();
      .                       }
      .                       let kind = Char { terminated };
  1,276 ( 0.00%)              return Literal { kind, suffix_start };
      .                   }
      .           
      .                   // Either a lifetime or a character literal with
      .                   // length greater than 1.
      .           
      .                   let starts_with_number = self.first().is_digit(10);
      .           
      .                   // Skip the literal contents.
      .                   // First symbol can be a number (which isn't a valid identifier start),
      .                   // so skip it without any checks.
      .                   self.bump();
    250 ( 0.00%)          self.eat_while(is_id_continue);
      .           
      .                   // Check if after skipping literal contents we've met a closing
      .                   // single quote (which means that user attempted to create a
      .                   // string with single quotes).
    250 ( 0.00%)          if self.first() == '\'' {
      .                       self.bump();
      .                       let kind = Char { terminated: true };
      .                       Literal { kind, suffix_start: self.len_consumed() }
      .                   } else {
    250 ( 0.00%)              Lifetime { starts_with_number }
      .                   }
  2,664 ( 0.00%)      }
      .           
      .               fn single_quoted_string(&mut self) -> bool {
      .                   debug_assert!(self.prev() == '\'');
      .                   // Check if it's a one-symbol literal.
  1,486 ( 0.00%)          if self.second() == '\'' && self.first() != '\\' {
      .                       self.bump();
      .                       self.bump();
      .                       return true;
      .                   }
      .           
      .                   // Literal has more than one symbol.
      .           
      .                   // Parse until either quotes are terminated or error is detected.
      .                   loop {
  2,627 ( 0.00%)              match self.first() {
      .                           // Quotes are terminated, finish parsing.
      .                           '\'' => {
      .                               self.bump();
      .                               return true;
      .                           }
      .                           // Probably beginning of the comment, which we don't want to include
      .                           // to the error report.
      .                           '/' => break,
-- line 660 ----------------------------------------
-- line 670 ----------------------------------------
      .                           // Skip the character.
      .                           _ => {
      .                               self.bump();
      .                           }
      .                       }
      .                   }
      .                   // String was not terminated.
      .                   false
    419 ( 0.00%)      }
      .           
      .               /// Eats double-quoted string and returns true
      .               /// if string is terminated.
      .               fn double_quoted_string(&mut self) -> bool {
      .                   debug_assert!(self.prev() == '"');
      .                   while let Some(c) = self.bump() {
  7,585 ( 0.00%)              match c {
      .                           '"' => {
      .                               return true;
      .                           }
      4 ( 0.00%)                  '\\' if self.first() == '\\' || self.first() == '"' => {
      .                               // Bump again to skip escaped character.
      .                               self.bump();
      .                           }
      .                           _ => (),
      .                       }
      .                   }
      .                   // End of file reached.
      .                   false
    190 ( 0.00%)      }
      .           
      .               /// Eats the double-quoted string and returns `n_hashes` and an error if encountered.
      7 ( 0.00%)      fn raw_double_quoted_string(&mut self, prefix_len: usize) -> (u16, Option<RawStrError>) {
      .                   // Wrap the actual function to handle the error with too many hashes.
      .                   // This way, it eats the whole raw string.
      .                   let (n_hashes, err) = self.raw_string_unvalidated(prefix_len);
      .                   // Only up to 65535 `#`s are allowed in raw strings
      1 ( 0.00%)          match u16::try_from(n_hashes) {
      7 ( 0.00%)              Ok(num) => (num, err),
      .                       // We lie about the number of hashes here :P
      .                       Err(_) => (0, Some(RawStrError::TooManyDelimiters { found: n_hashes })),
      .                   }
      8 ( 0.00%)      }
      .           
      .               fn raw_string_unvalidated(&mut self, prefix_len: usize) -> (usize, Option<RawStrError>) {
      .                   debug_assert!(self.prev() == 'r');
      .                   let start_pos = self.len_consumed();
      .                   let mut possible_terminator_offset = None;
      .                   let mut max_hashes = 0;
      .           
      .                   // Count opening '#' symbols.
      .                   let mut eaten = 0;
      2 ( 0.00%)          while self.first() == '#' {
      .                       eaten += 1;
      .                       self.bump();
      .                   }
      .                   let n_start_hashes = eaten;
      .           
      .                   // Check that string is started.
      4 ( 0.00%)          match self.bump() {
      .                       Some('"') => (),
      .                       c => {
      .                           let c = c.unwrap_or(EOF_CHAR);
      .                           return (n_start_hashes, Some(RawStrError::InvalidStarter { bad_char: c }));
      .                       }
      .                   }
      .           
      .                   // Skip the string contents and on each '#' character met, check if this is
      .                   // a raw string termination.
      .                   loop {
      3 ( 0.00%)              self.eat_while(|c| c != '"');
      .           
      1 ( 0.00%)              if self.is_eof() {
      .                           return (
      .                               n_start_hashes,
      .                               Some(RawStrError::NoTerminator {
      .                                   expected: n_start_hashes,
      .                                   found: max_hashes,
      .                                   possible_terminator_offset,
      .                               }),
      .                           );
-- line 749 ----------------------------------------
-- line 753 ----------------------------------------
      .                       self.bump();
      .           
      .                       // Check that amount of closing '#' symbols
      .                       // is equal to the amount of opening ones.
      .                       // Note that this will not consume extra trailing `#` characters:
      .                       // `r###"abcde"####` is lexed as a `RawStr { n_hashes: 3 }`
      .                       // followed by a `#` token.
      .                       let mut n_end_hashes = 0;
      4 ( 0.00%)              while self.first() == '#' && n_end_hashes < n_start_hashes {
      .                           n_end_hashes += 1;
      .                           self.bump();
      .                       }
      .           
      2 ( 0.00%)              if n_end_hashes == n_start_hashes {
      .                           return (n_start_hashes, None);
      .                       } else if n_end_hashes > max_hashes {
      .                           // Keep track of possible terminators to give a hint about
      .                           // where there might be a missing terminator
      .                           possible_terminator_offset =
      .                               Some(self.len_consumed() - start_pos - n_end_hashes + prefix_len);
      .                           max_hashes = n_end_hashes;
      .                       }
      .                   }
      .               }
      .           
      .               fn eat_decimal_digits(&mut self) -> bool {
      .                   let mut has_digits = false;
      .                   loop {
    328 ( 0.00%)              match self.first() {
      .                           '_' => {
      .                               self.bump();
      .                           }
    492 ( 0.00%)                  '0'..='9' => {
      .                               has_digits = true;
      .                               self.bump();
      .                           }
      .                           _ => break,
      .                       }
      .                   }
      .                   has_digits
    296 ( 0.00%)      }
      .           
      .               fn eat_hexadecimal_digits(&mut self) -> bool {
      .                   let mut has_digits = false;
      .                   loop {
     14 ( 0.00%)              match self.first() {
      .                           '_' => {
      .                               self.bump();
      .                           }
     27 ( 0.00%)                  '0'..='9' | 'a'..='f' | 'A'..='F' => {
      .                               has_digits = true;
      .                               self.bump();
      .                           }
      .                           _ => break,
      .                       }
      .                   }
      .                   has_digits
      4 ( 0.00%)      }
      .           
      .               /// Eats the float exponent. Returns true if at least one digit was met,
      .               /// and returns false otherwise.
      .               fn eat_float_exponent(&mut self) -> bool {
      .                   debug_assert!(self.prev() == 'e' || self.prev() == 'E');
      .                   if self.first() == '-' || self.first() == '+' {
      .                       self.bump();
      .                   }
      .                   self.eat_decimal_digits()
      .               }
      .           
      .               // Eats the suffix of the literal, e.g. "_u8".
      .               fn eat_literal_suffix(&mut self) {
  1,602 ( 0.00%)          self.eat_identifier();
      .               }
      .           
      .               // Eats the identifier.
  2,403 ( 0.00%)      fn eat_identifier(&mut self) {
      .                   if !is_id_start(self.first()) {
      .                       return;
      .                   }
      .                   self.bump();
      .           
      5 ( 0.00%)          self.eat_while(is_id_continue);
  3,200 ( 0.00%)      }
      .           }

615,123 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/cx/expr.rs
--------------------------------------------------------------------------------
Ir               

-- line 18 ----------------------------------------
      .           use rustc_middle::ty::{self, AdtKind, Ty, UpvarSubsts, UserType};
      .           use rustc_span::def_id::DefId;
      .           use rustc_span::Span;
      .           use rustc_target::abi::VariantIdx;
      .           
      .           impl<'tcx> Cx<'tcx> {
      .               crate fn mirror_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) -> ExprId {
      .                   // `mirror_expr` is recursing very deep. Make sure the stack doesn't overflow.
 46,843 ( 0.00%)          ensure_sufficient_stack(|| self.mirror_expr_inner(expr))
      .               }
      .           
  1,636 ( 0.00%)      crate fn mirror_exprs(&mut self, exprs: &'tcx [hir::Expr<'tcx>]) -> Box<[ExprId]> {
  9,732 ( 0.00%)          exprs.iter().map(|expr| self.mirror_expr_inner(expr)).collect()
  3,272 ( 0.00%)      }
      .           
107,694 ( 0.01%)      pub(super) fn mirror_expr_inner(&mut self, hir_expr: &'tcx hir::Expr<'tcx>) -> ExprId {
 83,762 ( 0.01%)          let temp_lifetime = self.region_scope_tree.temporary_scope(hir_expr.hir_id.local_id);
      .                   let expr_scope =
      .                       region::Scope { id: hir_expr.hir_id.local_id, data: region::ScopeData::Node };
      .           
      .                   debug!("Expr::make_mirror(): id={}, span={:?}", hir_expr.hir_id, hir_expr.span);
      .           
 47,864 ( 0.00%)          let mut expr = self.make_mirror_unadjusted(hir_expr);
      .           
 71,796 ( 0.00%)          let adjustment_span = match self.adjustment_span {
 12,561 ( 0.00%)              Some((hir_id, span)) if hir_id == hir_expr.hir_id => Some(span),
      .                       _ => None,
      .                   };
      .           
      .                   // Now apply adjustments, if any.
 47,864 ( 0.00%)          for adjustment in self.typeck_results.expr_adjustments(hir_expr) {
      .                       debug!("make_mirror: expr={:?} applying adjustment={:?}", expr, adjustment);
 11,992 ( 0.00%)              let span = expr.span;
 31,801 ( 0.00%)              expr =
 81,774 ( 0.01%)                  self.apply_adjustment(hir_expr, expr, adjustment, adjustment_span.unwrap_or(span));
      .                   }
      .           
      .                   // Next, wrap this up in the expr's scope.
155,558 ( 0.01%)          expr = Expr {
      .                       temp_lifetime,
  8,968 ( 0.00%)              ty: expr.ty,
 11,966 ( 0.00%)              span: hir_expr.span,
      .                       kind: ExprKind::Scope {
      .                           region_scope: expr_scope,
215,388 ( 0.01%)                  value: self.thir.exprs.push(expr),
 23,932 ( 0.00%)                  lint_level: LintLevel::Explicit(hir_expr.hir_id),
      .                       },
      .                   };
      .           
      .                   // Finally, create a destruction scope, if any.
 35,898 ( 0.00%)          if let Some(region_scope) =
 23,932 ( 0.00%)              self.region_scope_tree.opt_destruction_scope(hir_expr.hir_id.local_id)
      .                   {
 21,924 ( 0.00%)              expr = Expr {
      .                           temp_lifetime,
      .                           ty: expr.ty,
  1,827 ( 0.00%)                  span: hir_expr.span,
      .                           kind: ExprKind::Scope {
      .                               region_scope,
 25,578 ( 0.00%)                      value: self.thir.exprs.push(expr),
      .                               lint_level: LintLevel::Inherited,
      .                           },
      .                       };
      .                   }
      .           
      .                   // OK, all done!
263,252 ( 0.02%)          self.thir.exprs.push(expr)
107,694 ( 0.01%)      }
      .           
      .               fn apply_adjustment(
      .                   &mut self,
      .                   hir_expr: &'tcx hir::Expr<'tcx>,
      .                   mut expr: Expr<'tcx>,
      .                   adjustment: &Adjustment<'tcx>,
      .                   mut span: Span,
      .               ) -> Expr<'tcx> {
  9,086 ( 0.00%)          let Expr { temp_lifetime, .. } = expr;
      .           
      .                   // Adjust the span from the block, to the last expression of the
      .                   // block. This is a better span when returning a mutable reference
      .                   // with too short a lifetime. The error message will use the span
      .                   // from the assignment to the return place, which should only point
      .                   // at the returned value, not the entire function body.
      .                   //
      .                   // fn return_short_lived<'a>(x: &'a mut i32) -> &'static mut i32 {
      .                   //      x
      .                   //   // ^ error message points at this expression.
      .                   // }
      .                   let mut adjust_span = |expr: &mut Expr<'tcx>| {
  4,068 ( 0.00%)              if let ExprKind::Block { body } = &expr.kind {
     18 ( 0.00%)                  if let Some(last_expr) = body.expr {
     18 ( 0.00%)                      span = self.thir[last_expr].span;
     12 ( 0.00%)                      expr.span = span;
      .                           }
      .                       }
      .                   };
      .           
 40,586 ( 0.00%)          let kind = match adjustment.kind {
      .                       Adjust::Pointer(PointerCast::Unsize) => {
      .                           adjust_span(&mut expr);
  2,295 ( 0.00%)                  ExprKind::Pointer { cast: PointerCast::Unsize, source: self.thir.exprs.push(expr) }
      .                       }
  2,992 ( 0.00%)              Adjust::Pointer(cast) => ExprKind::Pointer { cast, source: self.thir.exprs.push(expr) },
  5,202 ( 0.00%)              Adjust::NeverToAny => ExprKind::NeverToAny { source: self.thir.exprs.push(expr) },
      .                       Adjust::Deref(None) => {
      .                           adjust_span(&mut expr);
 32,283 ( 0.00%)                  ExprKind::Deref { arg: self.thir.exprs.push(expr) }
      .                       }
    168 ( 0.00%)              Adjust::Deref(Some(deref)) => {
      .                           // We don't need to do call adjust_span here since
      .                           // deref coercions always start with a built-in deref.
    210 ( 0.00%)                  let call = deref.method_call(self.tcx(), expr.ty);
      .           
    252 ( 0.00%)                  expr = Expr {
      .                               temp_lifetime,
     42 ( 0.00%)                      ty: self
      .                                   .tcx
     84 ( 0.00%)                          .mk_ref(deref.region, ty::TypeAndMut { ty: expr.ty, mutbl: deref.mutbl }),
      .                               span,
      .                               kind: ExprKind::Borrow {
      .                                   borrow_kind: deref.mutbl.to_borrow_kind(),
    630 ( 0.00%)                          arg: self.thir.exprs.push(expr),
      .                               },
      .                           };
      .           
    882 ( 0.00%)                  let expr = Box::new([self.thir.exprs.push(expr)]);
      .           
    546 ( 0.00%)                  self.overloaded_place(hir_expr, adjustment.target, Some(call), expr, deref.span)
      .                       }
  7,940 ( 0.00%)              Adjust::Borrow(AutoBorrow::Ref(_, m)) => ExprKind::Borrow {
      .                           borrow_kind: m.to_borrow_kind(),
 27,790 ( 0.00%)                  arg: self.thir.exprs.push(expr),
      .                       },
      .                       Adjust::Borrow(AutoBorrow::RawPtr(mutability)) => {
      .                           ExprKind::AddressOf { mutability, arg: self.thir.exprs.push(expr) }
      .                       }
      .                   };
      .           
 86,317 ( 0.01%)          Expr { temp_lifetime, ty: adjustment.target, span, kind }
      .               }
      .           
119,660 ( 0.01%)      fn make_mirror_unadjusted(&mut self, expr: &'tcx hir::Expr<'tcx>) -> Expr<'tcx> {
 47,864 ( 0.00%)          let expr_ty = self.typeck_results().expr_ty(expr);
 11,966 ( 0.00%)          let expr_span = expr.span;
 59,830 ( 0.00%)          let temp_lifetime = self.region_scope_tree.temporary_scope(expr.hir_id.local_id);
      .           
 74,104 ( 0.00%)          let kind = match expr.kind {
      .                       // Here comes the interesting stuff:
  2,877 ( 0.00%)              hir::ExprKind::MethodCall(segment, ref args, fn_span) => {
      .                           // Rewrite a.b(c) into UFCS form like Trait::b(a, c)
  6,713 ( 0.00%)                  let expr = self.method_callee(expr, segment.ident.span, None);
      .                           // When we apply adjustments to the receiver, use the span of
      .                           // the overall method call for better diagnostics. args[0]
      .                           // is guaranteed to exist, since a method call always has a receiver.
  3,836 ( 0.00%)                  let old_adjustment_span = self.adjustment_span.replace((args[0].hir_id, expr_span));
      .                           tracing::info!("Using method span: {:?}", expr.span);
    959 ( 0.00%)                  let args = self.mirror_exprs(args);
  1,918 ( 0.00%)                  self.adjustment_span = old_adjustment_span;
  6,713 ( 0.00%)                  ExprKind::Call {
    959 ( 0.00%)                      ty: expr.ty,
 13,426 ( 0.00%)                      fun: self.thir.exprs.push(expr),
      .                               args,
      .                               from_hir_call: true,
      .                               fn_span,
      .                           }
      .                       }
      .           
      .                       hir::ExprKind::Call(ref fun, ref args) => {
  4,356 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
      .                               // The callee is something implementing Fn, FnMut, or FnOnce.
      .                               // Find the actual method implementation being called and
      .                               // build the appropriate UFCS call expression with the
      .                               // callee-object as expr parameter.
      .           
      .                               // rewrite f(u, v) into FnOnce::call_once(f, (u, v))
      .           
    280 ( 0.00%)                      let method = self.method_callee(expr, fun.span, None);
      .           
    134 ( 0.00%)                      let arg_tys = args.iter().map(|e| self.typeck_results().expr_ty_adjusted(e));
      .                               let tupled_args = Expr {
     70 ( 0.00%)                          ty: self.tcx.mk_tup(arg_tys),
      .                                   temp_lifetime,
     35 ( 0.00%)                          span: expr.span,
    140 ( 0.00%)                          kind: ExprKind::Tuple { fields: self.mirror_exprs(args) },
      .                               };
    455 ( 0.00%)                      let tupled_args = self.thir.exprs.push(tupled_args);
      .           
    175 ( 0.00%)                      ExprKind::Call {
     70 ( 0.00%)                          ty: method.ty,
    665 ( 0.00%)                          fun: self.thir.exprs.push(method),
    140 ( 0.00%)                          args: Box::new([self.mirror_expr(fun), tupled_args]),
      .                                   from_hir_call: true,
     70 ( 0.00%)                          fn_span: expr.span,
      .                               }
      .                           } else {
      .                               let adt_data =
  5,270 ( 0.00%)                          if let hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) = fun.kind {
      .                                       // Tuple-like ADTs are represented as ExprKind::Call. We convert them here.
  4,396 ( 0.00%)                              expr_ty.ty_adt_def().and_then(|adt_def| match path.res {
    542 ( 0.00%)                                  Res::Def(DefKind::Ctor(_, CtorKind::Fn), ctor_id) => {
  1,084 ( 0.00%)                                      Some((adt_def, adt_def.variant_index_with_ctor_id(ctor_id)))
      .                                           }
      .                                           Res::SelfCtor(..) => Some((adt_def, VariantIdx::new(0))),
      .                                           _ => None,
      .                                       })
      .                                   } else {
      .                                       None
      .                                   };
  1,040 ( 0.00%)                      if let Some((adt_def, index)) = adt_data {
  1,355 ( 0.00%)                          let substs = self.typeck_results().node_substs(fun.hir_id);
    813 ( 0.00%)                          let user_provided_types = self.typeck_results().user_provided_types();
      .                                   let user_ty =
  1,355 ( 0.00%)                              user_provided_types.get(fun.hir_id).copied().map(|mut u_ty| {
      .                                           if let UserType::TypeOf(ref mut did, _) = &mut u_ty.value {
      .                                               *did = adt_def.did;
      .                                           }
      .                                           u_ty
      .                                       });
      .                                   debug!("make_mirror_unadjusted: (call) user_ty={:?}", user_ty);
      .           
    271 ( 0.00%)                          let field_refs = args
      .                                       .iter()
      .                                       .enumerate()
      .                                       .map(|(idx, e)| FieldExpr {
      .                                           name: Field::new(idx),
      .                                           expr: self.mirror_expr(e),
      .                                       })
      .                                       .collect();
      .                                   ExprKind::Adt(Box::new(Adt {
-- line 246 ----------------------------------------
-- line 247 ----------------------------------------
      .                                       adt_def,
      .                                       substs,
      .                                       variant_index: index,
      .                                       fields: field_refs,
      .                                       user_ty,
      .                                       base: None,
      .                                   }))
      .                               } else {
  3,132 ( 0.00%)                          ExprKind::Call {
  4,164 ( 0.00%)                              ty: self.typeck_results().node_type(fun.hir_id),
    783 ( 0.00%)                              fun: self.mirror_expr(fun),
  3,132 ( 0.00%)                              args: self.mirror_exprs(args),
      .                                       from_hir_call: true,
    783 ( 0.00%)                              fn_span: expr.span,
      .                                   }
      .                               }
      .                           }
      .                       }
      .           
      .                       hir::ExprKind::AddrOf(hir::BorrowKind::Ref, mutbl, ref arg) => {
  2,920 ( 0.00%)                  ExprKind::Borrow { borrow_kind: mutbl.to_borrow_kind(), arg: self.mirror_expr(arg) }
      .                       }
      .           
      .                       hir::ExprKind::AddrOf(hir::BorrowKind::Raw, mutability, ref arg) => {
      .                           ExprKind::AddressOf { mutability, arg: self.mirror_expr(arg) }
      .                       }
      .           
 14,070 ( 0.00%)              hir::ExprKind::Block(ref blk, _) => ExprKind::Block { body: self.mirror_block(blk) },
      .           
      .                       hir::ExprKind::Assign(ref lhs, ref rhs, _) => {
    588 ( 0.00%)                  ExprKind::Assign { lhs: self.mirror_expr(lhs), rhs: self.mirror_expr(rhs) }
      .                       }
      .           
     47 ( 0.00%)              hir::ExprKind::AssignOp(op, ref lhs, ref rhs) => {
    188 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
      .                               let lhs = self.mirror_expr(lhs);
      .                               let rhs = self.mirror_expr(rhs);
      .                               self.overloaded_operator(expr, Box::new([lhs, rhs]))
      .                           } else {
    235 ( 0.00%)                      ExprKind::AssignOp {
    141 ( 0.00%)                          op: bin_op(op.node),
     47 ( 0.00%)                          lhs: self.mirror_expr(lhs),
     47 ( 0.00%)                          rhs: self.mirror_expr(rhs),
      .                               }
      .                           }
      .                       }
      .           
    998 ( 0.00%)              hir::ExprKind::Lit(ref lit) => ExprKind::Literal {
  3,992 ( 0.00%)                  literal: self.const_eval_literal(&lit.node, expr_ty, lit.span, false),
      .                           user_ty: None,
      .                           const_id: None,
      .                       },
      .           
    424 ( 0.00%)              hir::ExprKind::Binary(op, ref lhs, ref rhs) => {
  1,696 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
     85 ( 0.00%)                      let lhs = self.mirror_expr(lhs);
     85 ( 0.00%)                      let rhs = self.mirror_expr(rhs);
      .                               self.overloaded_operator(expr, Box::new([lhs, rhs]))
      .                           } else {
      .                               // FIXME overflow
  1,232 ( 0.00%)                      match op.node {
    248 ( 0.00%)                          hir::BinOpKind::And => ExprKind::LogicalOp {
      .                                       op: LogicalOp::And,
     62 ( 0.00%)                              lhs: self.mirror_expr(lhs),
     62 ( 0.00%)                              rhs: self.mirror_expr(rhs),
      .                                   },
    176 ( 0.00%)                          hir::BinOpKind::Or => ExprKind::LogicalOp {
      .                                       op: LogicalOp::Or,
     44 ( 0.00%)                              lhs: self.mirror_expr(lhs),
     44 ( 0.00%)                              rhs: self.mirror_expr(rhs),
      .                                   },
      .                                   _ => {
    932 ( 0.00%)                              let op = bin_op(op.node);
  1,165 ( 0.00%)                              ExprKind::Binary {
      .                                           op,
    233 ( 0.00%)                                  lhs: self.mirror_expr(lhs),
    233 ( 0.00%)                                  rhs: self.mirror_expr(rhs),
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
      .           
      .                       hir::ExprKind::Index(ref lhs, ref index) => {
    385 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
      .                               let lhs = self.mirror_expr(lhs);
      .                               let index = self.mirror_expr(index);
    598 ( 0.00%)                      self.overloaded_place(expr, expr_ty, None, Box::new([lhs, index]), expr.span)
      .                           } else {
    124 ( 0.00%)                      ExprKind::Index { lhs: self.mirror_expr(lhs), index: self.mirror_expr(index) }
      .                           }
      .                       }
      .           
      .                       hir::ExprKind::Unary(hir::UnOp::Deref, ref arg) => {
  1,000 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
      .                               let arg = self.mirror_expr(arg);
     81 ( 0.00%)                      self.overloaded_place(expr, expr_ty, None, Box::new([arg]), expr.span)
      .                           } else {
    573 ( 0.00%)                      ExprKind::Deref { arg: self.mirror_expr(arg) }
      .                           }
      .                       }
      .           
      .                       hir::ExprKind::Unary(hir::UnOp::Not, ref arg) => {
    510 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
      .                               let arg = self.mirror_expr(arg);
      .                               self.overloaded_operator(expr, Box::new([arg]))
      .                           } else {
    306 ( 0.00%)                      ExprKind::Unary { op: UnOp::Not, arg: self.mirror_expr(arg) }
      .                           }
      .                       }
      .           
      .                       hir::ExprKind::Unary(hir::UnOp::Neg, ref arg) => {
     24 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
      .                               let arg = self.mirror_expr(arg);
      .                               self.overloaded_operator(expr, Box::new([arg]))
     24 ( 0.00%)                  } else if let hir::ExprKind::Lit(ref lit) = arg.kind {
      .                               ExprKind::Literal {
     30 ( 0.00%)                          literal: self.const_eval_literal(&lit.node, expr_ty, lit.span, true),
      .                                   user_ty: None,
      .                                   const_id: None,
      .                               }
      .                           } else {
      .                               ExprKind::Unary { op: UnOp::Neg, arg: self.mirror_expr(arg) }
      .                           }
      .                       }
      .           
    208 ( 0.00%)              hir::ExprKind::Struct(ref qpath, ref fields, ref base) => match expr_ty.kind() {
    208 ( 0.00%)                  ty::Adt(adt, substs) => match adt.adt_kind() {
      .                               AdtKind::Struct | AdtKind::Union => {
    312 ( 0.00%)                          let user_provided_types = self.typeck_results().user_provided_types();
    416 ( 0.00%)                          let user_ty = user_provided_types.get(expr.hir_id).copied();
      .                                   debug!("make_mirror_unadjusted: (struct/union) user_ty={:?}", user_ty);
    416 ( 0.00%)                          ExprKind::Adt(Box::new(Adt {
    208 ( 0.00%)                              adt_def: adt,
      .                                       variant_index: VariantIdx::new(0),
    208 ( 0.00%)                              substs,
      .                                       user_ty,
    208 ( 0.00%)                              fields: self.field_refs(fields),
    416 ( 0.00%)                              base: base.as_ref().map(|base| FruInfo {
      .                                           base: self.mirror_expr(base),
     30 ( 0.00%)                                  field_types: self.typeck_results().fru_field_types()[expr.hir_id]
      .                                               .iter()
      .                                               .copied()
      .                                               .collect(),
      .                                       }),
      .                                   }))
      .                               }
      .                               AdtKind::Enum => {
      .                                   let res = self.typeck_results().qpath_res(qpath, expr.hir_id);
-- line 395 ----------------------------------------
-- line 418 ----------------------------------------
      .                               }
      .                           },
      .                           _ => {
      .                               span_bug!(expr.span, "unexpected type for struct literal: {:?}", expr_ty);
      .                           }
      .                       },
      .           
      .                       hir::ExprKind::Closure(..) => {
    117 ( 0.00%)                  let closure_ty = self.typeck_results().expr_ty(expr);
    117 ( 0.00%)                  let (def_id, substs, movability) = match *closure_ty.kind() {
      .                               ty::Closure(def_id, substs) => (def_id, UpvarSubsts::Closure(substs), None),
      .                               ty::Generator(def_id, substs, movability) => {
      .                                   (def_id, UpvarSubsts::Generator(substs), Some(movability))
      .                               }
      .                               _ => {
      .                                   span_bug!(expr.span, "closure expr w/o closure type: {:?}", closure_ty);
      .                               }
      .                           };
      .           
    234 ( 0.00%)                  let upvars = self
      .                               .typeck_results
      .                               .closure_min_captures_flattened(def_id)
      .                               .zip(substs.upvar_tys())
      .                               .map(|(captured_place, ty)| {
    175 ( 0.00%)                          let upvars = self.capture_upvar(expr, captured_place, ty);
    490 ( 0.00%)                          self.thir.exprs.push(upvars)
      .                               })
      .                               .collect();
      .           
      .                           // Convert the closure fake reads, if any, from hir `Place` to ExprRef
     39 ( 0.00%)                  let fake_reads = match self.typeck_results.closure_fake_reads.get(&def_id) {
      .                               Some(fake_reads) => fake_reads
      .                                   .iter()
      .                                   .map(|(place, cause, hir_id)| {
      .                                       let expr = self.convert_captured_hir_place(expr, place.clone());
      .                                       (self.thir.exprs.push(expr), *cause, *hir_id)
      .                                   })
      .                                   .collect(),
      .                               None => Vec::new(),
      .                           };
      .           
    741 ( 0.00%)                  ExprKind::Closure { closure_id: def_id, substs, upvars, movability, fake_reads }
      .                       }
      .           
  3,975 ( 0.00%)              hir::ExprKind::Path(ref qpath) => {
 15,900 ( 0.00%)                  let res = self.typeck_results().qpath_res(qpath, expr.hir_id);
 15,900 ( 0.00%)                  self.convert_path_expr(expr, res)
      .                       }
      .           
      .                       hir::ExprKind::InlineAsm(ref asm) => ExprKind::InlineAsm {
      .                           template: asm.template,
      .                           operands: asm
      .                               .operands
      .                               .iter()
      .                               .map(|(op, _op_sp)| {
-- line 472 ----------------------------------------
-- line 581 ----------------------------------------
      .                           let count = match ty.kind() {
      .                               ty::Array(_, ct) => ct,
      .                               _ => span_bug!(expr.span, "unexpected repeat expr ty: {:?}", ty),
      .                           };
      .           
      .                           ExprKind::Repeat { value: self.mirror_expr(v), count }
      .                       }
      .                       hir::ExprKind::Ret(ref v) => {
    588 ( 0.00%)                  ExprKind::Return { value: v.as_ref().map(|v| self.mirror_expr(v)) }
      .                       }
    138 ( 0.00%)              hir::ExprKind::Break(dest, ref value) => match dest.target_id {
    230 ( 0.00%)                  Ok(target_id) => ExprKind::Break {
      .                               label: region::Scope { id: target_id.local_id, data: region::ScopeData::Node },
      .                               value: value.as_ref().map(|value| self.mirror_expr(value)),
      .                           },
      .                           Err(err) => bug!("invalid loop id for break: {}", err),
      .                       },
      9 ( 0.00%)              hir::ExprKind::Continue(dest) => match dest.target_id {
     12 ( 0.00%)                  Ok(loop_id) => ExprKind::Continue {
      .                               label: region::Scope { id: loop_id.local_id, data: region::ScopeData::Node },
      .                           },
      .                           Err(err) => bug!("invalid loop id for continue: {}", err),
      .                       },
    616 ( 0.00%)              hir::ExprKind::Let(let_expr) => ExprKind::Let {
     77 ( 0.00%)                  expr: self.mirror_expr(let_expr.init),
    231 ( 0.00%)                  pat: self.pattern_from_hir(let_expr.pat),
      .                       },
  4,477 ( 0.00%)              hir::ExprKind::If(cond, then, else_opt) => ExprKind::If {
      .                           if_then_scope: region::Scope {
    407 ( 0.00%)                      id: then.hir_id.local_id,
      .                               data: region::ScopeData::IfThen,
      .                           },
      .                           cond: self.mirror_expr(cond),
      .                           then: self.mirror_expr(then),
      .                           else_opt: else_opt.map(|el| self.mirror_expr(el)),
      .                       },
  1,145 ( 0.00%)              hir::ExprKind::Match(ref discr, ref arms, _) => ExprKind::Match {
    229 ( 0.00%)                  scrutinee: self.mirror_expr(discr),
  1,921 ( 0.00%)                  arms: arms.iter().map(|a| self.convert_arm(a)).collect(),
      .                       },
      .                       hir::ExprKind::Loop(ref body, ..) => {
    165 ( 0.00%)                  let block_ty = self.typeck_results().node_type(body.hir_id);
    198 ( 0.00%)                  let temp_lifetime = self.region_scope_tree.temporary_scope(body.hir_id.local_id);
    132 ( 0.00%)                  let block = self.mirror_block(body);
    495 ( 0.00%)                  let body = self.thir.exprs.push(Expr {
      .                               ty: block_ty,
      .                               temp_lifetime,
     33 ( 0.00%)                      span: block.span,
    264 ( 0.00%)                      kind: ExprKind::Block { body: block },
      .                           });
     99 ( 0.00%)                  ExprKind::Loop { body }
      .                       }
  2,404 ( 0.00%)              hir::ExprKind::Field(ref source, ..) => ExprKind::Field {
    601 ( 0.00%)                  lhs: self.mirror_expr(source),
  3,606 ( 0.00%)                  name: Field::new(self.tcx.field_index(expr.hir_id, self.typeck_results)),
      .                       },
      .                       hir::ExprKind::Cast(ref source, ref cast_ty) => {
      .                           // Check for a user-given type annotation on this `cast`
    368 ( 0.00%)                  let user_provided_types = self.typeck_results.user_provided_types();
    552 ( 0.00%)                  let user_ty = user_provided_types.get(cast_ty.hir_id);
      .           
      .                           debug!(
      .                               "cast({:?}) has ty w/ hir_id {:?} and user provided ty {:?}",
      .                               expr, cast_ty.hir_id, user_ty,
      .                           );
      .           
      .                           // Check to see if this cast is a "coercion cast", where the cast is actually done
      .                           // using a coercion (or is a no-op).
    552 ( 0.00%)                  let cast = if self.typeck_results().is_coercion_cast(source.hir_id) {
      .                               // Convert the lexpr to a vexpr.
      .                               ExprKind::Use { source: self.mirror_expr(source) }
    276 ( 0.00%)                  } else if self.typeck_results().expr_ty(source).is_region_ptr() {
      .                               // Special cased so that we can type check that the element
      .                               // type of the source matches the pointed to type of the
      .                               // destination.
      .                               ExprKind::Pointer {
      .                                   source: self.mirror_expr(source),
      .                                   cast: PointerCast::ArrayToPointer,
      .                               }
      .                           } else {
-- line 660 ----------------------------------------
-- line 664 ----------------------------------------
      .                               // enum's layout (or its tag type) to compute it during const eval
      .                               // Example:
      .                               // enum Foo {
      .                               //     A,
      .                               //     B = A as isize + 4,
      .                               // }
      .                               // The correct solution would be to add symbolic computations to miri,
      .                               // so we wouldn't have to compute and store the actual value
    315 ( 0.00%)                      let var = if let hir::ExprKind::Path(ref qpath) = source.kind {
    234 ( 0.00%)                          let res = self.typeck_results().qpath_res(qpath, source.hir_id);
    273 ( 0.00%)                          self.typeck_results().node_type(source.hir_id).ty_adt_def().and_then(
      .                                       |adt_def| match res {
      .                                           Res::Def(
      .                                               DefKind::Ctor(CtorOf::Variant, CtorKind::Const),
      .                                               variant_ctor_id,
      .                                           ) => {
      .                                               let idx = adt_def.variant_index_with_ctor_id(variant_ctor_id);
      .                                               let (d, o) = adt_def.discriminant_def_for_variant(idx);
      .                                               use rustc_middle::ty::util::IntTypeExt;
-- line 682 ----------------------------------------
-- line 683 ----------------------------------------
      .                                               let ty = adt_def.repr.discr_type();
      .                                               let ty = ty.to_ty(self.tcx());
      .                                               Some((d, o, ty))
      .                                           }
      .                                           _ => None,
      .                                       },
      .                                   )
      .                               } else {
    106 ( 0.00%)                          None
      .                               };
      .           
    117 ( 0.00%)                      let source = if let Some((did, offset, var_ty)) = var {
      .                                   let mk_const = |literal| Expr {
      .                                       temp_lifetime,
      .                                       ty: var_ty,
      .                                       span: expr.span,
      .                                       kind: ExprKind::Literal { literal, user_ty: None, const_id: None },
      .                                   };
      .                                   let offset = self.thir.exprs.push(mk_const(ty::Const::from_bits(
      .                                       self.tcx,
-- line 702 ----------------------------------------
-- line 723 ----------------------------------------
      .                                               ty: var_ty,
      .                                               span: expr.span,
      .                                               kind: bin,
      .                                           })
      .                                       }
      .                                       None => offset,
      .                                   }
      .                               } else {
     39 ( 0.00%)                          self.mirror_expr(source)
      .                               };
      .           
      .                               ExprKind::Cast { source: source }
      .                           };
      .           
    184 ( 0.00%)                  if let Some(user_ty) = user_ty {
      .                               // NOTE: Creating a new Expr and wrapping a Cast inside of it may be
      .                               //       inefficient, revisit this when performance becomes an issue.
      .                               let cast_expr = self.thir.exprs.push(Expr {
      .                                   temp_lifetime,
      .                                   ty: expr_ty,
      .                                   span: expr.span,
      .                                   kind: cast,
      .                               });
      .                               debug!("make_mirror_unadjusted: (cast) user_ty={:?}", user_ty);
      .           
      .                               ExprKind::ValueTypeAscription { source: cast_expr, user_ty: Some(*user_ty) }
      .                           } else {
    368 ( 0.00%)                      cast
      .                           }
      .                       }
      .                       hir::ExprKind::Type(ref source, ref ty) => {
      .                           let user_provided_types = self.typeck_results.user_provided_types();
      .                           let user_ty = user_provided_types.get(ty.hir_id).copied();
      .                           debug!("make_mirror_unadjusted: (type) user_ty={:?}", user_ty);
      .                           let mirrored = self.mirror_expr(source);
      .                           if source.is_syntactic_place_expr() {
      .                               ExprKind::PlaceTypeAscription { source: mirrored, user_ty }
      .                           } else {
      .                               ExprKind::ValueTypeAscription { source: mirrored, user_ty }
      .                           }
      .                       }
      .                       hir::ExprKind::DropTemps(ref source) => {
  1,380 ( 0.00%)                  ExprKind::Use { source: self.mirror_expr(source) }
      .                       }
      8 ( 0.00%)              hir::ExprKind::Box(ref value) => ExprKind::Box { value: self.mirror_expr(value) },
      .                       hir::ExprKind::Array(ref fields) => {
    545 ( 0.00%)                  ExprKind::Array { fields: self.mirror_exprs(fields) }
      .                       }
    595 ( 0.00%)              hir::ExprKind::Tup(ref fields) => ExprKind::Tuple { fields: self.mirror_exprs(fields) },
      .           
      .                       hir::ExprKind::Yield(ref v, _) => ExprKind::Yield { value: self.mirror_expr(v) },
      .                       hir::ExprKind::Err => unreachable!(),
      .                   };
      .           
406,844 ( 0.03%)          Expr { temp_lifetime, ty: expr_ty, span: expr.span, kind }
 95,728 ( 0.01%)      }
      .           
 19,107 ( 0.00%)      fn user_substs_applied_to_res(
      .                   &mut self,
      .                   hir_id: hir::HirId,
      .                   res: Res,
      .               ) -> Option<ty::CanonicalUserType<'tcx>> {
      .                   debug!("user_substs_applied_to_res: res={:?}", res);
 12,744 ( 0.00%)          let user_provided_type = match res {
      .                       // A reference to something callable -- e.g., a fn, method, or
      .                       // a tuple-struct or tuple-variant. This has the type of a
      .                       // `Fn` but with the user-given substitutions.
      .                       Res::Def(DefKind::Fn, _)
      .                       | Res::Def(DefKind::AssocFn, _)
      .                       | Res::Def(DefKind::Ctor(_, CtorKind::Fn), _)
      .                       | Res::Def(DefKind::Const, _)
      .                       | Res::Def(DefKind::AssocConst, _) => {
 14,861 ( 0.00%)                  self.typeck_results().user_provided_types().get(hir_id).copied()
      .                       }
      .           
      .                       // A unit struct/variant which is used as a value (e.g.,
      .                       // `None`). This has the type of the enum/struct that defines
      .                       // this variant -- but with the substitutions given by the
      .                       // user.
      .                       Res::Def(DefKind::Ctor(_, CtorKind::Const), _) => {
      .                           self.user_substs_applied_to_ty_of_hir_id(hir_id)
-- line 803 ----------------------------------------
-- line 805 ----------------------------------------
      .           
      .                       // `Self` is used in expression as a tuple struct constructor or a unit struct constructor
      .                       Res::SelfCtor(_) => self.user_substs_applied_to_ty_of_hir_id(hir_id),
      .           
      .                       _ => bug!("user_substs_applied_to_res: unexpected res {:?} at {:?}", res, hir_id),
      .                   };
      .                   debug!("user_substs_applied_to_res: user_provided_type={:?}", user_provided_type);
      .                   user_provided_type
 12,738 ( 0.00%)      }
      .           
 15,288 ( 0.00%)      fn method_callee(
      .                   &mut self,
      .                   expr: &hir::Expr<'_>,
      .                   span: Span,
      .                   overloaded_callee: Option<(DefId, SubstsRef<'tcx>)>,
      .               ) -> Expr<'tcx> {
  7,056 ( 0.00%)          let temp_lifetime = self.region_scope_tree.temporary_scope(expr.hir_id.local_id);
  9,408 ( 0.00%)          let (def_id, substs, user_ty) = match overloaded_callee {
      .                       Some((def_id, substs)) => (def_id, substs, None),
      .                       None => {
      .                           let (kind, def_id) =
 10,206 ( 0.00%)                      self.typeck_results().type_dependent_def(expr.hir_id).unwrap_or_else(|| {
      .                                   span_bug!(expr.span, "no type-dependent def for method callee")
      .                               });
 17,010 ( 0.00%)                  let user_ty = self.user_substs_applied_to_res(expr.hir_id, Res::Def(kind, def_id));
      .                           debug!("method_callee: user_ty={:?}", user_ty);
 17,010 ( 0.00%)                  (def_id, self.typeck_results().node_substs(expr.hir_id), user_ty)
      .                       }
      .                   };
      .                   let ty = self.tcx().mk_fn_def(def_id, substs);
 15,288 ( 0.00%)          Expr {
      .                       temp_lifetime,
      .                       ty,
      .                       span,
      .                       kind: ExprKind::Literal {
      .                           literal: ty::Const::zero_sized(self.tcx(), ty),
  7,056 ( 0.00%)                  user_ty,
      .                           const_id: None,
      .                       },
      .                   }
  9,408 ( 0.00%)      }
      .           
  5,076 ( 0.00%)      fn convert_arm(&mut self, arm: &'tcx hir::Arm<'tcx>) -> ArmId {
  4,512 ( 0.00%)          let arm = Arm {
  1,692 ( 0.00%)              pattern: self.pattern_from_hir(&arm.pat),
     36 ( 0.00%)              guard: arm.guard.as_ref().map(|g| match g {
     18 ( 0.00%)                  hir::Guard::If(ref e) => Guard::If(self.mirror_expr(e)),
      .                           hir::Guard::IfLet(ref pat, ref e) => {
      .                               Guard::IfLet(self.pattern_from_hir(pat), self.mirror_expr(e))
      .                           }
      .                       }),
    564 ( 0.00%)              body: self.mirror_expr(arm.body),
  1,128 ( 0.00%)              lint_level: LintLevel::Explicit(arm.hir_id),
      .                       scope: region::Scope { id: arm.hir_id.local_id, data: region::ScopeData::Node },
    564 ( 0.00%)              span: arm.span,
      .                   };
  8,460 ( 0.00%)          self.thir.arms.push(arm)
  5,076 ( 0.00%)      }
      .           
      .               fn convert_path_expr(&mut self, expr: &'tcx hir::Expr<'tcx>, res: Res) -> ExprKind<'tcx> {
 27,825 ( 0.00%)          let substs = self.typeck_results().node_substs(expr.hir_id);
 28,736 ( 0.00%)          match res {
      .                       // A regular function, constructor function or a constant.
      .                       Res::Def(DefKind::Fn, _)
      .                       | Res::Def(DefKind::AssocFn, _)
      .                       | Res::Def(DefKind::Ctor(_, CtorKind::Fn), _)
      .                       | Res::SelfCtor(..) => {
  9,660 ( 0.00%)                  let user_ty = self.user_substs_applied_to_res(expr.hir_id, res);
      .                           debug!("convert_path_expr: user_ty={:?}", user_ty);
    966 ( 0.00%)                  ExprKind::Literal {
      .                               literal: ty::Const::zero_sized(
  1,932 ( 0.00%)                          self.tcx,
  2,898 ( 0.00%)                          self.typeck_results().node_type(expr.hir_id),
      .                               ),
  7,728 ( 0.00%)                      user_ty,
      .                               const_id: None,
      .                           }
      .                       }
      .           
      .                       Res::Def(DefKind::ConstParam, def_id) => {
      .                           let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id.expect_local());
      .                           let item_id = self.tcx.hir().get_parent_node(hir_id);
      .                           let item_def_id = self.tcx.hir().local_def_id(item_id);
-- line 887 ----------------------------------------
-- line 895 ----------------------------------------
      .                                   ty: self.typeck_results().node_type(expr.hir_id),
      .                               }),
      .                               user_ty: None,
      .                               const_id: Some(def_id),
      .                           }
      .                       }
      .           
      .                       Res::Def(DefKind::Const, def_id) | Res::Def(DefKind::AssocConst, def_id) => {
    207 ( 0.00%)                  let user_ty = self.user_substs_applied_to_res(expr.hir_id, res);
      .                           debug!("convert_path_expr: (const) user_ty={:?}", user_ty);
    115 ( 0.00%)                  ExprKind::Literal {
    276 ( 0.00%)                      literal: self.tcx.mk_const(ty::Const {
      .                                   val: ty::ConstKind::Unevaluated(ty::Unevaluated::new(
      .                                       ty::WithOptConstParam::unknown(def_id),
      .                                       substs,
      .                                   )),
     69 ( 0.00%)                          ty: self.typeck_results().node_type(expr.hir_id),
      .                               }),
    184 ( 0.00%)                      user_ty,
      .                               const_id: Some(def_id),
      .                           }
      .                       }
      .           
    905 ( 0.00%)              Res::Def(DefKind::Ctor(_, CtorKind::Const), def_id) => {
    905 ( 0.00%)                  let user_provided_types = self.typeck_results.user_provided_types();
    724 ( 0.00%)                  let user_provided_type = user_provided_types.get(expr.hir_id).copied();
      .                           debug!("convert_path_expr: user_provided_type={:?}", user_provided_type);
    724 ( 0.00%)                  let ty = self.typeck_results().node_type(expr.hir_id);
    362 ( 0.00%)                  match ty.kind() {
      .                               // A unit struct/variant which is used as a value.
      .                               // We return a completely different ExprKind here to account for this special case.
      .                               ty::Adt(adt_def, substs) => ExprKind::Adt(Box::new(Adt {
    181 ( 0.00%)                          adt_def,
    905 ( 0.00%)                          variant_index: adt_def.variant_index_with_ctor_id(def_id),
    181 ( 0.00%)                          substs,
      .                                   user_ty: user_provided_type,
      .                                   fields: Box::new([]),
      .                                   base: None,
      .                               })),
      .                               _ => bug!("unexpected ty: {:?}", ty),
      .                           }
      .                       }
      .           
      .                       // We encode uses of statics as a `*&STATIC` where the `&STATIC` part is
      .                       // a constant reference (or constant raw pointer for `static mut`) in MIR
      2 ( 0.00%)              Res::Def(DefKind::Static, id) => {
      6 ( 0.00%)                  let ty = self.tcx.static_ptr_ty(id);
      6 ( 0.00%)                  let temp_lifetime = self.region_scope_tree.temporary_scope(expr.hir_id.local_id);
      6 ( 0.00%)                  let kind = if self.tcx.is_thread_local_static(id) {
      .                               ExprKind::ThreadLocalRef(id)
      .                           } else {
      4 ( 0.00%)                      let ptr = self.tcx.create_static_alloc(id);
      .                               ExprKind::StaticRef {
      .                                   literal: ty::Const::from_scalar(
      .                                       self.tcx,
      .                                       Scalar::from_pointer(ptr.into(), &self.tcx),
      .                                       ty,
      .                                   ),
      .                                   def_id: id,
      .                               }
      .                           };
      3 ( 0.00%)                  ExprKind::Deref {
     11 ( 0.00%)                      arg: self.thir.exprs.push(Expr { ty, temp_lifetime, span: expr.span, kind }),
      .                           }
      .                       }
      .           
 22,432 ( 0.00%)              Res::Local(var_hir_id) => self.convert_var(var_hir_id),
      .           
      .                       _ => span_bug!(expr.span, "res `{:?}` not yet implemented", res),
      .                   }
      .               }
      .           
 28,390 ( 0.00%)      fn convert_var(&mut self, var_hir_id: hir::HirId) -> ExprKind<'tcx> {
      .                   // We want upvars here not captures.
      .                   // Captures will be handled in MIR.
      .                   let is_upvar = self
      .                       .tcx
      .                       .upvars_mentioned(self.body_owner)
      .                       .map_or(false, |upvars| upvars.contains_key(&var_hir_id));
      .           
      .                   debug!(
      .                       "convert_var({:?}): is_upvar={}, body_owner={:?}",
      .                       var_hir_id, is_upvar, self.body_owner
      .                   );
      .           
     80 ( 0.00%)          if is_upvar {
    308 ( 0.00%)              ExprKind::UpvarRef { closure_def_id: self.body_owner, var_hir_id }
      .                   } else {
  8,385 ( 0.00%)              ExprKind::VarRef { id: var_hir_id }
      .                   }
 22,712 ( 0.00%)      }
      .           
    935 ( 0.00%)      fn overloaded_operator(
      .                   &mut self,
      .                   expr: &'tcx hir::Expr<'tcx>,
      .                   args: Box<[ExprId]>,
      .               ) -> ExprKind<'tcx> {
    595 ( 0.00%)          let fun = self.method_callee(expr, expr.span, None);
  1,275 ( 0.00%)          let fun = self.thir.exprs.push(fun);
    595 ( 0.00%)          ExprKind::Call {
    425 ( 0.00%)              ty: self.thir[fun].ty,
      .                       fun,
      .                       args,
      .                       from_hir_call: false,
      .                       fn_span: expr.span,
      .                   }
    680 ( 0.00%)      }
      .           
  1,358 ( 0.00%)      fn overloaded_place(
      .                   &mut self,
      .                   expr: &'tcx hir::Expr<'tcx>,
      .                   place_ty: Ty<'tcx>,
      .                   overloaded_callee: Option<(DefId, SubstsRef<'tcx>)>,
      .                   args: Box<[ExprId]>,
      .                   span: Span,
      .               ) -> ExprKind<'tcx> {
      .                   // For an overloaded *x or x[y] expression of type T, the method
      .                   // call returns an &T and we must add the deref so that the types
      .                   // line up (this is because `*x` and `x[y]` represent places):
      .           
      .                   // Reconstruct the output assuming it's a reference with the
      .                   // same region and mutability as the receiver. This holds for
      .                   // `Deref(Mut)::Deref(_mut)` and `Index(Mut)::index(_mut)`.
    776 ( 0.00%)          let (region, mutbl) = match *self.thir[args[0]].ty.kind() {
    194 ( 0.00%)              ty::Ref(region, _, mutbl) => (region, mutbl),
      .                       _ => span_bug!(span, "overloaded_place: receiver is not a reference"),
      .                   };
     97 ( 0.00%)          let ref_ty = self.tcx.mk_ref(region, ty::TypeAndMut { ty: place_ty, mutbl });
      .           
      .                   // construct the complete expression `foo()` for the overloaded call,
      .                   // which will yield the &T type
    388 ( 0.00%)          let temp_lifetime = self.region_scope_tree.temporary_scope(expr.hir_id.local_id);
    582 ( 0.00%)          let fun = self.method_callee(expr, span, overloaded_callee);
  1,358 ( 0.00%)          let fun = self.thir.exprs.push(fun);
    582 ( 0.00%)          let fun_ty = self.thir[fun].ty;
  1,358 ( 0.00%)          let ref_expr = self.thir.exprs.push(Expr {
      .                       temp_lifetime,
      .                       ty: ref_ty,
      .                       span,
      .                       kind: ExprKind::Call { ty: fun_ty, fun, args, from_hir_call: false, fn_span: span },
      .                   });
      .           
      .                   // construct and return a deref wrapper `*foo()`
    194 ( 0.00%)          ExprKind::Deref { arg: ref_expr }
    776 ( 0.00%)      }
      .           
    385 ( 0.00%)      fn convert_captured_hir_place(
      .                   &mut self,
      .                   closure_expr: &'tcx hir::Expr<'tcx>,
      .                   place: HirPlace<'tcx>,
      .               ) -> Expr<'tcx> {
    140 ( 0.00%)          let temp_lifetime = self.region_scope_tree.temporary_scope(closure_expr.hir_id.local_id);
      .                   let var_ty = place.base_ty;
      .           
      .                   // The result of capture analysis in `rustc_typeck/check/upvar.rs`represents a captured path
      .                   // as it's seen for use within the closure and not at the time of closure creation.
      .                   //
      .                   // That is we see expect to see it start from a captured upvar and not something that is local
      .                   // to the closure's parent.
     70 ( 0.00%)          let var_hir_id = match place.base {
     70 ( 0.00%)              HirPlaceBase::Upvar(upvar_id) => upvar_id.var_path.hir_id,
      .                       base => bug!("Expected an upvar, found {:?}", base),
      .                   };
      .           
    595 ( 0.00%)          let mut captured_place_expr = Expr {
      .                       temp_lifetime,
      .                       ty: var_ty,
     35 ( 0.00%)              span: closure_expr.span,
    175 ( 0.00%)              kind: self.convert_var(var_hir_id),
      .                   };
      .           
      .                   for proj in place.projections.iter() {
      .                       let kind = match proj.kind {
      .                           HirProjectionKind::Deref => {
      .                               ExprKind::Deref { arg: self.thir.exprs.push(captured_place_expr) }
      .                           }
      .                           HirProjectionKind::Field(field, ..) => {
-- line 1071 ----------------------------------------
-- line 1082 ----------------------------------------
      .                           }
      .                       };
      .           
      .                       captured_place_expr =
      .                           Expr { temp_lifetime, ty: proj.ty, span: closure_expr.span, kind };
      .                   }
      .           
      .                   captured_place_expr
    315 ( 0.00%)      }
      .           
    350 ( 0.00%)      fn capture_upvar(
      .                   &mut self,
      .                   closure_expr: &'tcx hir::Expr<'tcx>,
      .                   captured_place: &'tcx ty::CapturedPlace<'tcx>,
      .                   upvar_ty: Ty<'tcx>,
      .               ) -> Expr<'tcx> {
      .                   let upvar_capture = captured_place.info.capture_kind;
      .                   let captured_place_expr =
    245 ( 0.00%)              self.convert_captured_hir_place(closure_expr, captured_place.place.clone());
    105 ( 0.00%)          let temp_lifetime = self.region_scope_tree.temporary_scope(closure_expr.hir_id.local_id);
      .           
     70 ( 0.00%)          match upvar_capture {
     15 ( 0.00%)              ty::UpvarCapture::ByValue => captured_place_expr,
      .                       ty::UpvarCapture::ByRef(upvar_borrow) => {
    170 ( 0.00%)                  let borrow_kind = match upvar_borrow {
      .                               ty::BorrowKind::ImmBorrow => BorrowKind::Shared,
      .                               ty::BorrowKind::UniqueImmBorrow => BorrowKind::Unique,
      .                               ty::BorrowKind::MutBorrow => BorrowKind::Mut { allow_two_phase_borrow: false },
      .                           };
    238 ( 0.00%)                  Expr {
      .                               temp_lifetime,
      .                               ty: upvar_ty,
     34 ( 0.00%)                      span: closure_expr.span,
      .                               kind: ExprKind::Borrow {
      .                                   borrow_kind,
    510 ( 0.00%)                          arg: self.thir.exprs.push(captured_place_expr),
      .                               },
      .                           }
      .                       }
      .                   }
    315 ( 0.00%)      }
      .           
      .               /// Converts a list of named fields (i.e., for struct-like struct/enum ADTs) into FieldExpr.
      .               fn field_refs(&mut self, fields: &'tcx [hir::ExprField<'tcx>]) -> Box<[FieldExpr]> {
      .                   fields
      .                       .iter()
      .                       .map(|field| FieldExpr {
    651 ( 0.00%)                  name: Field::new(self.tcx.field_index(field.hir_id, self.typeck_results)),
      .                           expr: self.mirror_expr(field.expr),
      .                       })
      .                       .collect()
      .               }
      .           }
      .           
      .           trait ToBorrowKind {
      .               fn to_borrow_kind(&self) -> BorrowKind;
      .           }
      .           
      .           impl ToBorrowKind for AutoBorrowMutability {
      .               fn to_borrow_kind(&self) -> BorrowKind {
      .                   use rustc_middle::ty::adjustment::AllowTwoPhase;
 13,895 ( 0.00%)          match *self {
      .                       AutoBorrowMutability::Mut { allow_two_phase_borrow } => BorrowKind::Mut {
      .                           allow_two_phase_borrow: match allow_two_phase_borrow {
      .                               AllowTwoPhase::Yes => true,
      .                               AllowTwoPhase::No => false,
      .                           },
      .                       },
      .                       AutoBorrowMutability::Not => BorrowKind::Shared,
      .                   }
      .               }
      .           }
      .           
      .           impl ToBorrowKind for hir::Mutability {
      .               fn to_borrow_kind(&self) -> BorrowKind {
     84 ( 0.00%)          match *self {
      .                       hir::Mutability::Mut => BorrowKind::Mut { allow_two_phase_borrow: false },
      .                       hir::Mutability::Not => BorrowKind::Shared,
      .                   }
      .               }
      .           }
      .           
    560 ( 0.00%)  fn bin_op(op: hir::BinOpKind) -> BinOp {
  2,520 ( 0.00%)      match op {
      .                   hir::BinOpKind::Add => BinOp::Add,
      .                   hir::BinOpKind::Sub => BinOp::Sub,
      .                   hir::BinOpKind::Mul => BinOp::Mul,
      .                   hir::BinOpKind::Div => BinOp::Div,
      .                   hir::BinOpKind::Rem => BinOp::Rem,
      .                   hir::BinOpKind::BitXor => BinOp::BitXor,
      .                   hir::BinOpKind::BitAnd => BinOp::BitAnd,
      .                   hir::BinOpKind::BitOr => BinOp::BitOr,
-- line 1173 ----------------------------------------
-- line 1176 ----------------------------------------
      .                   hir::BinOpKind::Eq => BinOp::Eq,
      .                   hir::BinOpKind::Lt => BinOp::Lt,
      .                   hir::BinOpKind::Le => BinOp::Le,
      .                   hir::BinOpKind::Ne => BinOp::Ne,
      .                   hir::BinOpKind::Ge => BinOp::Ge,
      .                   hir::BinOpKind::Gt => BinOp::Gt,
      .                   _ => bug!("no equivalent for ast binop {:?}", op),
      .               }
    560 ( 0.00%)  }

147,442 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/cx/expr.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 36 ----------------------------------------
      .           use rustc_session::parse::ParseSess;
      .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
      .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
      .           use tracing::debug;
      .           
      .           use std::ops::Range;
      .           use std::{cmp, mem, slice};
      .           
 16,187 ( 0.00%)  bitflags::bitflags! {
      .               struct Restrictions: u8 {
      .                   const STMT_EXPR         = 1 << 0;
      .                   const NO_STRUCT_LITERAL = 1 << 1;
      .                   const CONST_EXPR        = 1 << 2;
      .               }
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
      .                               $self.bump();
      .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
      .                           }
      .                       }
      .                   }
      .               };
      .           }
      .           
 29,593 ( 0.00%)  #[derive(Clone)]
      .           pub struct Parser<'a> {
  1,063 ( 0.00%)      pub sess: &'a ParseSess,
      .               /// The current token.
    782 ( 0.00%)      pub token: Token,
      .               /// The spacing for the current token
    494 ( 0.00%)      pub token_spacing: Spacing,
      .               /// The previous token.
  1,173 ( 0.00%)      pub prev_token: Token,
    597 ( 0.00%)      pub capture_cfg: bool,
  1,297 ( 0.00%)      restrictions: Restrictions,
    988 ( 0.00%)      expected_tokens: Vec<TokenType>,
      .               // Important: This must only be advanced from `next_tok`
      .               // to ensure that `token_cursor.num_next_calls` is updated properly
      .               token_cursor: TokenCursor,
    988 ( 0.00%)      desugar_doc_comments: bool,
      .               /// This field is used to keep track of how many left angle brackets we have seen. This is
      .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
      .               /// appropriately.
      .               ///
      .               /// See the comments in the `parse_path_segment` function for more details.
    988 ( 0.00%)      unmatched_angle_bracket_count: u32,
  1,482 ( 0.00%)      max_angle_bracket_count: u32,
      .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
      .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
      .               /// error.
    494 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
      .               last_unexpected_token_span: Option<Span>,
      .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
      .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
      .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
      .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
      .               subparser_name: Option<&'static str>,
      .               capture_state: CaptureState,
      .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
      .           /// the first macro inner attribute to invoke a proc-macro).
      .           /// When create a `TokenStream`, the inner attributes get inserted
      .           /// into the proper place in the token stream.
      .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
      .           
      .           /// Controls how we capture tokens. Capturing can be expensive,
      .           /// so we try to avoid performing capturing in cases where
      .           /// we will never need an `AttrAnnotatedTokenStream`
    494 ( 0.00%)  #[derive(Copy, Clone)]
      .           pub enum Capturing {
      .               /// We aren't performing any capturing - this is the default mode.
      .               No,
      .               /// We are capturing tokens
      .               Yes,
      .           }
      .           
  2,154 ( 0.00%)  #[derive(Clone)]
      .           struct CaptureState {
  1,976 ( 0.00%)      capturing: Capturing,
    494 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
      .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
      .           }
      .           
      .           impl<'a> Drop for Parser<'a> {
      .               fn drop(&mut self) {
  3,488 ( 0.00%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
      .               }
      .           }
      .           
 59,664 ( 0.00%)  #[derive(Clone)]
      .           struct TokenCursor {
      .               frame: TokenCursorFrame,
 14,114 ( 0.00%)      stack: Vec<TokenCursorFrame>,
      .               desugar_doc_comments: bool,
      .               // Counts the number of calls to `next` or `next_desugared`,
      .               // depending on whether `desugar_doc_comments` is set.
  4,329 ( 0.00%)      num_next_calls: usize,
      .               // During parsing, we may sometimes need to 'unglue' a
      .               // glued token into two component tokens
      .               // (e.g. '>>' into '>' and '>), so that the parser
      .               // can consume them one at a time. This process
      .               // bypasses the normal capturing mechanism
      .               // (e.g. `num_next_calls` will not be incremented),
      .               // since the 'unglued' tokens due not exist in
      .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
      .               // in `Option<Vec<u8>>` requires us to unglue
      .               // the trailing `>>` token. The `break_last_token`
      .               // field is used to track this token - it gets
      .               // appended to the captured stream when
      .               // we evaluate a `LazyTokenStream`
      .               break_last_token: bool,
      .           }
      .           
 26,960 ( 0.00%)  #[derive(Clone)]
      .           struct TokenCursorFrame {
  9,617 ( 0.00%)      delim: token::DelimToken,
      .               span: DelimSpan,
      .               open_delim: bool,
 19,234 ( 0.00%)      tree_cursor: tokenstream::Cursor,
      .               close_delim: bool,
      .           }
      .           
      .           impl TokenCursorFrame {
      .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
  3,030 ( 0.00%)          TokenCursorFrame {
      .                       delim,
      .                       span,
      .                       open_delim: false,
  5,919 ( 0.00%)              tree_cursor: tts.into_trees(),
      .                       close_delim: false,
      .                   }
      .               }
      .           }
      .           
      .           impl TokenCursor {
473,676 ( 0.03%)      fn next(&mut self) -> (Token, Spacing) {
      .                   loop {
229,908 ( 0.01%)              let (tree, spacing) = if !self.frame.open_delim {
  4,697 ( 0.00%)                  self.frame.open_delim = true;
 23,485 ( 0.00%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
459,268 ( 0.03%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
      .                           tree
 19,696 ( 0.00%)              } else if !self.frame.close_delim {
  4,558 ( 0.00%)                  self.frame.close_delim = true;
 22,790 ( 0.00%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
  9,108 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
 59,202 ( 0.00%)                  self.frame = frame;
      .                           continue;
      .                       } else {
 13,248 ( 0.00%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
      .                       };
      .           
 88,320 ( 0.01%)              match tree {
      .                           TokenTree::Token(token) => {
315,784 ( 0.02%)                      return (token, spacing);
      .                           }
      .                           TokenTree::Delimited(sp, delim, tts) => {
      .                               let frame = TokenCursorFrame::new(sp, delim, tts);
      .                               self.stack.push(mem::replace(&mut self.frame, frame));
      .                           }
      .                       }
      .                   }
315,784 ( 0.02%)      }
      .           
 36,970 ( 0.00%)      fn next_desugared(&mut self) -> (Token, Spacing) {
 11,111 ( 0.00%)          let (data, attr_style, sp) = match self.next() {
     30 ( 0.00%)              (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
      .                           (data, attr_style, span)
      .                       }
 18,435 ( 0.00%)              tok => return tok,
      .                   };
      .           
      .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
      .                   // required to wrap the text.
      .                   let mut num_of_hashes = 0;
      .                   let mut count = 0;
  2,308 ( 0.00%)          for ch in data.as_str().chars() {
      .                       count = match ch {
      .                           '"' => 1,
      .                           '#' if count > 0 => count + 1,
      .                           _ => 0,
      .                       };
      .                       num_of_hashes = cmp::max(num_of_hashes, count);
      .                   }
      .           
     40 ( 0.00%)          let delim_span = DelimSpan::from_single(sp);
     50 ( 0.00%)          let body = TokenTree::Delimited(
      .                       delim_span,
      .                       token::Bracket,
    120 ( 0.00%)              [
     70 ( 0.00%)                  TokenTree::token(token::Ident(sym::doc, false), sp),
     40 ( 0.00%)                  TokenTree::token(token::Eq, sp),
     80 ( 0.00%)                  TokenTree::token(TokenKind::lit(token::StrRaw(num_of_hashes), data, None), sp),
      .                       ]
      .                       .iter()
      .                       .cloned()
      .                       .collect::<TokenStream>(),
     10 ( 0.00%)          );
      .           
      .                   self.stack.push(mem::replace(
      .                       &mut self.frame,
      .                       TokenCursorFrame::new(
      .                           delim_span,
      .                           token::NoDelim,
     10 ( 0.00%)                  if attr_style == AttrStyle::Inner {
      .                               [TokenTree::token(token::Pound, sp), TokenTree::token(token::Not, sp), body]
      .                                   .iter()
      .                                   .cloned()
      .                                   .collect::<TokenStream>()
      .                           } else {
    120 ( 0.00%)                      [TokenTree::token(token::Pound, sp), body]
      .                                   .iter()
      .                                   .cloned()
      .                                   .collect::<TokenStream>()
      .                           },
      .                       ),
      .                   ));
      .           
     30 ( 0.00%)          self.next()
 33,273 ( 0.00%)      }
      .           }
      .           
  9,310 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
      .           enum TokenType {
  7,448 ( 0.00%)      Token(TokenKind),
      .               Keyword(Symbol),
      .               Operator,
      .               Lifetime,
      .               Ident,
      .               Path,
      .               Type,
      .               Const,
      .           }
-- line 353 ----------------------------------------
-- line 378 ----------------------------------------
      .               /// The separator token.
      .               sep: Option<TokenKind>,
      .               /// `true` if a trailing separator is allowed.
      .               trailing_sep_allowed: bool,
      .           }
      .           
      .           impl SeqSep {
      .               fn trailing_allowed(t: TokenKind) -> SeqSep {
     93 ( 0.00%)          SeqSep { sep: Some(t), trailing_sep_allowed: true }
      .               }
      .           
      .               fn none() -> SeqSep {
      .                   SeqSep { sep: None, trailing_sep_allowed: false }
      .               }
      .           }
      .           
      .           pub enum FollowedByType {
      .               Yes,
      .               No,
      .           }
      .           
      .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
    352 ( 0.00%)      Some(match token.kind {
    704 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
    704 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
    704 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
      .                   token::DocComment(..) => "doc comment",
      .                   _ => return None,
      .               })
      .           }
      .           
  1,232 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
    352 ( 0.00%)      let token_str = pprust::token_to_string(token);
      .               match token_descr_opt(token) {
      .                   Some(prefix) => format!("{} `{}`", prefix, token_str),
  1,232 ( 0.00%)          _ => format!("`{}`", token_str),
      .               }
    880 ( 0.00%)  }
      .           
      .           impl<'a> Parser<'a> {
  8,484 ( 0.00%)      pub fn new(
      .                   sess: &'a ParseSess,
      .                   tokens: TokenStream,
      .                   desugar_doc_comments: bool,
      .                   subparser_name: Option<&'static str>,
      .               ) -> Self {
    606 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
  1,212 ( 0.00%)          start_frame.open_delim = true;
      .                   start_frame.close_delim = true;
      .           
 18,786 ( 0.00%)          let mut parser = Parser {
      .                       sess,
    606 ( 0.00%)              token: Token::dummy(),
      .                       token_spacing: Spacing::Alone,
    606 ( 0.00%)              prev_token: Token::dummy(),
      .                       capture_cfg: false,
      .                       restrictions: Restrictions::empty(),
      .                       expected_tokens: Vec::new(),
      .                       token_cursor: TokenCursor {
  3,636 ( 0.00%)                  frame: start_frame,
      .                           stack: Vec::new(),
      .                           num_next_calls: 0,
      .                           desugar_doc_comments,
      .                           break_last_token: false,
      .                       },
      .                       desugar_doc_comments,
      .                       unmatched_angle_bracket_count: 0,
      .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
      .                           capturing: Capturing::No,
      .                           replace_ranges: Vec::new(),
      .                           inner_attr_ranges: Default::default(),
      .                       },
      .                       current_closure: None,
      .                   };
      .           
      .                   // Make parser point to the first token.
  1,212 ( 0.00%)          parser.bump();
      .           
      .                   parser
  5,454 ( 0.00%)      }
      .           
      .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
      .                   loop {
227,604 ( 0.01%)              let (mut next, spacing) = if self.desugar_doc_comments {
 14,788 ( 0.00%)                  self.token_cursor.next_desugared()
      .                       } else {
102,711 ( 0.01%)                  self.token_cursor.next()
      .                       };
151,736 ( 0.01%)              self.token_cursor.num_next_calls += 1;
      .                       // We've retrieved an token from the underlying
      .                       // cursor, so we no longer need to worry about
      .                       // an unglued token. See `break_and_eat` for more details
 37,934 ( 0.00%)              self.token_cursor.break_last_token = false;
151,736 ( 0.01%)              if next.span.is_dummy() {
      .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
  2,608 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
      .                       }
127,444 ( 0.01%)              if matches!(
 75,868 ( 0.00%)                  next.kind,
      .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
      .                       ) {
      .                           continue;
      .                       }
151,656 ( 0.01%)              return (next, spacing);
      .                   }
      .               }
      .           
      .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
      .                   match self.expect_one_of(&[], &[]) {
      .                       Err(e) => Err(e),
      .                       // We can get `Ok(true)` from `recover_closing_delimiter`
      .                       // which is called in `expected_one_of_not_found`.
      .                       Ok(_) => FatalError.raise(),
      .                   }
      .               }
      .           
      .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
 35,010 ( 0.00%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
  3,890 ( 0.00%)          if self.expected_tokens.is_empty() {
  1,020 ( 0.00%)              if self.token == *t {
    850 ( 0.00%)                  self.bump();
      .                           Ok(false)
      .                       } else {
      .                           self.unexpected_try_recover(t)
      .                       }
      .                   } else {
 44,640 ( 0.00%)              self.expect_one_of(slice::from_ref(t), &[])
      .                   }
 58,350 ( 0.00%)      }
      .           
      .               /// Expect next token to be edible or inedible token.  If edible,
      .               /// then consume it; if inedible, then return without consuming
      .               /// anything.  Signal a fatal error if next token is unexpected.
 57,936 ( 0.00%)      pub fn expect_one_of(
      .                   &mut self,
      .                   edible: &[TokenKind],
      .                   inedible: &[TokenKind],
      .               ) -> PResult<'a, bool /* recovered */> {
  9,656 ( 0.00%)          if edible.contains(&self.token.kind) {
 12,051 ( 0.00%)              self.bump();
      .                       Ok(false)
      .                   } else if inedible.contains(&self.token.kind) {
      .                       // leave it in the input
      .                       Ok(false)
      .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
      .                       FatalError.raise();
      .                   } else {
      .                       self.expected_one_of_not_found(edible, inedible)
      .                   }
 72,420 ( 0.00%)      }
      .           
      .               // Public for rustfmt usage.
      .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
 31,228 ( 0.00%)          self.parse_ident_common(true)
      .               }
      .           
      .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
 23,475 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
      .                       TokenKind::DocComment(..) => {
      .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
      .                       }
      .                       _ => self.expected_ident_found(),
      .                   })
      .               }
      .           
 54,222 ( 0.00%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
  7,746 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
 46,476 ( 0.00%)          if !is_raw && ident.is_reserved() {
      .                       let mut err = self.expected_ident_found();
      .                       if recover {
      .                           err.emit();
      .                       } else {
      .                           return Err(err);
      .                       }
      .                   }
 30,984 ( 0.00%)          self.bump();
      .                   Ok(ident)
 77,460 ( 0.00%)      }
      .           
      .               /// Checks if the next token is `tok`, and returns `true` if so.
      .               ///
      .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
      .               /// encountered.
831,530 ( 0.05%)      fn check(&mut self, tok: &TokenKind) -> bool {
363,141 ( 0.02%)          let is_present = self.token == *tok;
245,896 ( 0.02%)          if !is_present {
531,243 ( 0.03%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
      .                   }
      .                   is_present
831,530 ( 0.05%)      }
      .           
      .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
  1,160 ( 0.00%)      pub fn eat(&mut self, tok: &TokenKind) -> bool {
170,580 ( 0.01%)          let is_present = self.check(tok);
108,772 ( 0.01%)          if is_present {
 20,226 ( 0.00%)              self.bump()
      .                   }
      .                   is_present
  1,450 ( 0.00%)      }
      .           
      .               /// If the next token is the given keyword, returns `true` without eating it.
      .               /// An expectation is also added for diagnostics purposes.
 32,730 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
  5,369 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
190,546 ( 0.01%)          self.token.is_keyword(kw)
      .               }
      .           
      .               /// If the next token is the given keyword, eats it and returns `true`.
      .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
      .               // Public for rustfmt usage.
 72,365 ( 0.00%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
 46,822 ( 0.00%)          if self.check_keyword(kw) {
  4,438 ( 0.00%)              self.bump();
      .                       true
      .                   } else {
      .                       false
      .                   }
 72,365 ( 0.00%)      }
      .           
      .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
  3,776 ( 0.00%)          if self.token.is_keyword(kw) {
    857 ( 0.00%)              self.bump();
      .                       true
      .                   } else {
      .                       false
      .                   }
      .               }
      .           
      .               /// If the given word is not a keyword, signals an error.
      .               /// If the next token is not the given word, signals an error.
      .               /// Otherwise, eats it.
    295 ( 0.00%)      fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
      .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
    236 ( 0.00%)      }
      .           
      .               /// Is the given keyword `kw` followed by a non-reserved identifier?
 43,664 ( 0.00%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
 21,832 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
 49,122 ( 0.00%)      }
      .           
 44,730 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
 17,638 ( 0.00%)          if ok {
      .                       true
      .                   } else {
  8,680 ( 0.00%)              self.expected_tokens.push(typ);
      .                       false
      .                   }
 44,730 ( 0.00%)      }
      .           
      .               fn check_ident(&mut self) -> bool {
 12,530 ( 0.00%)          self.check_or_expected(self.token.is_ident(), TokenType::Ident)
      .               }
      .           
 17,904 ( 0.00%)      fn check_path(&mut self) -> bool {
 42,726 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
 22,380 ( 0.00%)      }
      .           
      .               fn check_type(&mut self) -> bool {
  1,820 ( 0.00%)          self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
      .               }
      .           
      .               fn check_const_arg(&mut self) -> bool {
  1,664 ( 0.00%)          self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
      .               }
      .           
 16,299 ( 0.00%)      fn check_inline_const(&self, dist: usize) -> bool {
  9,055 ( 0.00%)          self.is_keyword_ahead(dist, &[kw::Const])
      .                       && self.look_ahead(dist + 1, |t| match t.kind {
      .                           token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),
      .                           token::OpenDelim(DelimToken::Brace) => true,
      .                           _ => false,
      .                       })
 16,299 ( 0.00%)      }
      .           
      .               /// Checks to see if the next token is either `+` or `+=`.
      .               /// Otherwise returns `false`.
      .               fn check_plus(&mut self) -> bool {
  2,292 ( 0.00%)          self.check_or_expected(
  1,146 ( 0.00%)              self.token.is_like_plus(),
  1,146 ( 0.00%)              TokenType::Token(token::BinOp(token::Plus)),
      .                   )
      .               }
      .           
      .               /// Eats the expected token if it's present possibly breaking
      .               /// compound tokens like multi-character operators in process.
      .               /// Returns `true` if the token was eaten.
 60,432 ( 0.00%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
 35,252 ( 0.00%)          if self.token.kind == expected {
  1,836 ( 0.00%)              self.bump();
      .                       return true;
      .                   }
 20,590 ( 0.00%)          match self.token.kind.break_two_token_op() {
    117 ( 0.00%)              Some((first, second)) if first == expected => {
     60 ( 0.00%)                  let first_span = self.sess.source_map().start_point(self.token.span);
     75 ( 0.00%)                  let second_span = self.token.span.with_lo(first_span.hi());
    135 ( 0.00%)                  self.token = Token::new(first, first_span);
      .                           // Keep track of this token - if we end token capturing now,
      .                           // we'll want to append this token to the captured stream.
      .                           //
      .                           // If we consume any additional tokens, then this token
      .                           // is not needed (we'll capture the entire 'glued' token),
      .                           // and `next_tok` will set this field to `None`
     15 ( 0.00%)                  self.token_cursor.break_last_token = true;
      .                           // Use the spacing of the glued token as the spacing
      .                           // of the unglued second token.
    210 ( 0.00%)                  self.bump_with((Token::new(second, second_span), self.token_spacing));
      .                           true
      .                       }
      .                       _ => {
 12,309 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
      .                           false
      .                       }
      .                   }
 61,740 ( 0.00%)      }
      .           
      .               /// Eats `+` possibly breaking tokens like `+=` in process.
      .               fn eat_plus(&mut self) -> bool {
    120 ( 0.00%)          self.break_and_eat(token::BinOp(token::Plus))
      .               }
      .           
      .               /// Eats `&` possibly breaking tokens like `&&` in process.
      .               /// Signals an error if `&` is not eaten.
      .               fn expect_and(&mut self) -> PResult<'a, ()> {
  2,016 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `|` possibly breaking tokens like `||` in process.
      .               /// Signals an error if `|` was not eaten.
      .               fn expect_or(&mut self) -> PResult<'a, ()> {
    186 ( 0.00%)          if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `<` possibly breaking tokens like `<<` in process.
  2,200 ( 0.00%)      fn eat_lt(&mut self) -> bool {
 13,554 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
  8,954 ( 0.00%)          if ate {
      .                       // See doc comment for `unmatched_angle_bracket_count`.
  1,136 ( 0.00%)              self.unmatched_angle_bracket_count += 1;
  1,191 ( 0.00%)              self.max_angle_bracket_count += 1;
      .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
      .                   }
      .                   ate
  2,200 ( 0.00%)      }
      .           
      .               /// Eats `<` possibly breaking tokens like `<<` in process.
      .               /// Signals an error if `<` was not eaten.
      .               fn expect_lt(&mut self) -> PResult<'a, ()> {
      .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `>` possibly breaking tokens like `>>` in process.
      .               /// Signals an error if `>` was not eaten.
      .               fn expect_gt(&mut self) -> PResult<'a, ()> {
  1,692 ( 0.00%)          if self.break_and_eat(token::Gt) {
      .                       // See doc comment for `unmatched_angle_bracket_count`.
    846 ( 0.00%)              if self.unmatched_angle_bracket_count > 0 {
    564 ( 0.00%)                  self.unmatched_angle_bracket_count -= 1;
      .                           debug!("expect_gt: (decrement) count={:?}", self.unmatched_angle_bracket_count);
      .                       }
      .                       Ok(())
      .                   } else {
      .                       self.unexpected()
      .                   }
      .               }
      .           
      .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
      .                   kets.iter().any(|k| match expect {
 12,423 ( 0.00%)              TokenExpectType::Expect => self.check(k),
    465 ( 0.00%)              TokenExpectType::NoExpect => self.token == **k,
      .                   })
      .               }
      .           
      .               fn parse_seq_to_before_tokens<T>(
      .                   &mut self,
      .                   kets: &[&TokenKind],
      .                   sep: SeqSep,
      .                   expect: TokenExpectType,
-- line 759 ----------------------------------------
-- line 761 ----------------------------------------
      .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
      .                   let mut first = true;
      .                   let mut recovered = false;
      .                   let mut trailing = false;
      .                   let mut v = vec![];
      .                   let unclosed_delims = !self.unclosed_delims.is_empty();
      .           
      .                   while !self.expect_any_with_type(kets, expect) {
 13,422 ( 0.00%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
      .                           break;
      .                       }
 10,208 ( 0.00%)              if let Some(ref t) = sep.sep {
 11,857 ( 0.00%)                  if first {
      .                               first = false;
      .                           } else {
  4,969 ( 0.00%)                      match self.expect(t) {
      .                                   Ok(false) => {
      .                                       self.current_closure.take();
      .                                   }
      .                                   Ok(true) => {
      .                                       self.current_closure.take();
      .                                       recovered = true;
      .                                       break;
      .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
      .                                               e.cancel();
      .                                               break;
      .                                           }
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
  4,728 ( 0.00%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
      .                           trailing = true;
      .                           break;
      .                       }
      .           
  3,485 ( 0.00%)              let t = f(self)?;
  2,318 ( 0.00%)              v.push(t);
      .                   }
      .           
  9,076 ( 0.00%)          Ok((v, trailing, recovered))
      .               }
      .           
      .               fn recover_missing_braces_around_closure_body(
      .                   &mut self,
      .                   closure_spans: ClosureSpans,
      .                   mut expect_err: DiagnosticBuilder<'_>,
      .               ) -> PResult<'a, ()> {
      .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
      .               fn parse_seq_to_before_end<T>(
      .                   &mut self,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
  9,019 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
      .               }
      .           
      .               /// Parses a sequence, including the closing delimiter. The function
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
 15,090 ( 0.00%)      fn parse_seq_to_end<T>(
      .                   &mut self,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
  6,018 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
  2,934 ( 0.00%)          if !recovered {
      .                       self.eat(ket);
      .                   }
 15,889 ( 0.00%)          Ok((val, trailing))
 12,072 ( 0.00%)      }
      .           
      .               /// Parses a sequence, including the closing delimiter. The function
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
      .               fn parse_unspanned_seq<T>(
      .                   &mut self,
      .                   bra: &TokenKind,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
  5,540 ( 0.00%)          self.expect(bra)?;
 12,072 ( 0.00%)          self.parse_seq_to_end(ket, sep, f)
      .               }
      .           
      .               fn parse_delim_comma_seq<T>(
      .                   &mut self,
      .                   delim: DelimToken,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
      .                   self.parse_unspanned_seq(
  2,115 ( 0.00%)              &token::OpenDelim(delim),
  2,729 ( 0.00%)              &token::CloseDelim(delim),
      .                       SeqSep::trailing_allowed(token::Comma),
      .                       f,
      .                   )
      .               }
      .           
      .               fn parse_paren_comma_seq<T>(
      .                   &mut self,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
      .                   self.parse_delim_comma_seq(token::Paren, f)
      .               }
      .           
      .               /// Advance the parser by one token using provided token as the next one.
493,077 ( 0.03%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
      .                   // Bumping after EOF is a bad sign, usually an infinite loop.
227,574 ( 0.01%)          if self.prev_token.kind == TokenKind::Eof {
      .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
      .                       self.span_bug(self.token.span, msg);
      .                   }
      .           
      .                   // Update the current and previous tokens.
151,716 ( 0.01%)          self.prev_token = mem::replace(&mut self.token, next_token);
 37,929 ( 0.00%)          self.token_spacing = next_spacing;
      .           
      .                   // Diagnostics.
 37,929 ( 0.00%)          self.expected_tokens.clear();
      .               }
      .           
      .               /// Advance the parser by one token.
303,312 ( 0.02%)      pub fn bump(&mut self) {
151,656 ( 0.01%)          let next_token = self.next_tok(self.token.span);
227,484 ( 0.01%)          self.bump_with(next_token);
303,312 ( 0.02%)      }
      .           
      .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
      .               /// When `dist == 0` then the current token is looked at.
  1,392 ( 0.00%)      pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
  5,012 ( 0.00%)          if dist == 0 {
  2,136 ( 0.00%)              return looker(&self.token);
      .                   }
      .           
 14,580 ( 0.00%)          let frame = &self.token_cursor.frame;
 15,919 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
      .                       let all_normal = (0..dist).all(|i| {
 44,859 ( 0.00%)                  let token = frame.tree_cursor.look_ahead(i);
 59,511 ( 0.00%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
      .                       });
      .                       if all_normal {
 72,208 ( 0.00%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
 25,456 ( 0.00%)                      Some(tree) => match tree {
 11,899 ( 0.00%)                          TokenTree::Token(token) => looker(token),
      .                                   TokenTree::Delimited(dspan, delim, _) => {
  9,533 ( 0.00%)                              looker(&Token::new(token::OpenDelim(*delim), dspan.open))
      .                                   }
      .                               },
 12,937 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
      .                           };
      .                       }
      .                   }
      .           
      .                   let mut cursor = self.token_cursor.clone();
      .                   let mut i = 0;
  1,484 ( 0.00%)          let mut token = Token::dummy();
  2,658 ( 0.00%)          while i < dist {
 11,413 ( 0.00%)              token = cursor.next().0;
  5,002 ( 0.00%)              if matches!(
  2,990 ( 0.00%)                  token.kind,
      .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
      .                       ) {
      .                           continue;
      .                       }
  1,170 ( 0.00%)              i += 1;
      .                   }
     56 ( 0.00%)          return looker(&token);
  1,566 ( 0.00%)      }
      .           
      .               /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.
 20,313 ( 0.00%)      fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {
  5,189 ( 0.00%)          self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))
 20,313 ( 0.00%)      }
      .           
      .               /// Parses asyncness: `async` or nothing.
      .               fn parse_asyncness(&mut self) -> Async {
      .                   if self.eat_keyword(kw::Async) {
      .                       let span = self.prev_token.uninterpolated_span();
      .                       Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }
      .                   } else {
      .                       Async::No
      .                   }
      .               }
      .           
      .               /// Parses unsafety: `unsafe` or nothing.
    506 ( 0.00%)      fn parse_unsafety(&mut self) -> Unsafe {
      .                   if self.eat_keyword(kw::Unsafe) {
      .                       Unsafe::Yes(self.prev_token.uninterpolated_span())
      .                   } else {
      .                       Unsafe::No
      .                   }
  2,024 ( 0.00%)      }
      .           
      .               /// Parses constness: `const` or nothing.
  7,776 ( 0.00%)      fn parse_constness(&mut self) -> Const {
      .                   // Avoid const blocks to be parsed as const items
  2,175 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
      .                       && self.eat_keyword(kw::Const)
      .                   {
     35 ( 0.00%)              Const::Yes(self.prev_token.uninterpolated_span())
      .                   } else {
      .                       Const::No
      .                   }
 13,608 ( 0.00%)      }
      .           
      .               /// Parses inline const expressions.
      .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
      .                   if pat {
      .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
      .                   } else {
      .                       self.sess.gated_spans.gate(sym::inline_const, span);
      .                   }
-- line 1104 ----------------------------------------
-- line 1108 ----------------------------------------
      .                       id: DUMMY_NODE_ID,
      .                       value: self.mk_expr(blk.span, ExprKind::Block(blk, None), AttrVec::new()),
      .                   };
      .                   let blk_span = anon_const.value.span;
      .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
      .               }
      .           
      .               /// Parses mutability (`mut` or nothing).
    140 ( 0.00%)      fn parse_mutability(&mut self) -> Mutability {
      .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
    877 ( 0.00%)      }
      .           
      .               /// Possibly parses mutability (`const` or `mut`).
      .               fn parse_const_or_mut(&mut self) -> Option<Mutability> {
      .                   if self.eat_keyword(kw::Mut) {
      .                       Some(Mutability::Mut)
      .                   } else if self.eat_keyword(kw::Const) {
      .                       Some(Mutability::Not)
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
      .               fn parse_field_name(&mut self) -> PResult<'a, Ident> {
    124 ( 0.00%)          if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) = self.token.kind
      .                   {
      .                       self.expect_no_suffix(self.token.span, "a tuple index", suffix);
      .                       self.bump();
      .                       Ok(Ident::new(symbol, self.prev_token.span))
      .                   } else {
    186 ( 0.00%)              self.parse_ident_common(true)
      .                   }
      .               }
      .           
      .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
    993 ( 0.00%)          self.parse_mac_args_common(true).map(P)
      .               }
      .           
      .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
    330 ( 0.00%)          self.parse_mac_args_common(false)
      .               }
      .           
  4,374 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
  3,888 ( 0.00%)          Ok(
  2,650 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
    168 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Bracket))
    162 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Brace))
      .                       {
  1,752 ( 0.00%)                  match self.parse_token_tree() {
  2,190 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
      .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
      .                               {
    876 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
      .                               }
      .                               _ => unreachable!(),
      .                           }
     96 ( 0.00%)              } else if !delimited_only {
      .                           if self.eat(&token::Eq) {
      .                               let eq_span = self.prev_token.span;
      .           
      .                               // Collect tokens because they are used during lowering to HIR.
      .                               let expr = self.parse_expr_force_collect()?;
      .                               let span = expr.span;
      .           
      .                               let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));
-- line 1172 ----------------------------------------
-- line 1173 ----------------------------------------
      .                               MacArgs::Eq(eq_span, Token::new(token_kind, span))
      .                           } else {
      .                               MacArgs::Empty
      .                           }
      .                       } else {
      .                           return self.unexpected();
      .                       },
      .                   )
  3,402 ( 0.00%)      }
      .           
      .               fn parse_or_use_outer_attributes(
      .                   &mut self,
      .                   already_parsed_attrs: Option<AttrWrapper>,
      .               ) -> PResult<'a, AttrWrapper> {
 16,589 ( 0.00%)          if let Some(attrs) = already_parsed_attrs {
      .                       Ok(attrs)
      .                   } else {
  8,534 ( 0.00%)              self.parse_outer_attributes()
      .                   }
      .               }
      .           
      .               /// Parses a single token tree from the input.
 13,920 ( 0.00%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
  9,640 ( 0.00%)          match self.token.kind {
      .                       token::OpenDelim(..) => {
      .                           let depth = self.token_cursor.stack.len();
      .           
      .                           // We keep advancing the token cursor until we hit
      .                           // the matching `CloseDelim` token.
 20,412 ( 0.00%)                  while !(depth == self.token_cursor.stack.len()
      .                               && matches!(self.token.kind, token::CloseDelim(_)))
      .                           {
      .                               // Advance one token at a time, so `TokenCursor::next()`
      .                               // can capture these tokens if necessary.
 11,716 ( 0.00%)                      self.bump();
      .                           }
      .                           // We are still inside the frame corresponding
      .                           // to the delimited stream we captured, so grab
      .                           // the tokens from this frame.
      .                           let frame = &self.token_cursor.frame;
  1,270 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
  1,270 ( 0.00%)                  let span = frame.span;
    635 ( 0.00%)                  let delim = frame.delim;
      .                           // Consume close delimiter
  1,270 ( 0.00%)                  self.bump();
  3,175 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
      .                       }
      .                       token::CloseDelim(_) | token::Eof => unreachable!(),
      .                       _ => {
  2,210 ( 0.00%)                  self.bump();
  5,525 ( 0.00%)                  TokenTree::Token(self.prev_token.clone())
      .                       }
      .                   }
 12,180 ( 0.00%)      }
      .           
      .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
      .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
      .                   let mut tts = Vec::new();
      .                   while self.token != token::Eof {
      .                       tts.push(self.parse_token_tree());
      .                   }
      .                   Ok(tts)
      .               }
      .           
     16 ( 0.00%)      pub fn parse_tokens(&mut self) -> TokenStream {
      .                   let mut result = Vec::new();
      .                   loop {
     24 ( 0.00%)              match self.token.kind {
      .                           token::Eof | token::CloseDelim(..) => break,
      6 ( 0.00%)                  _ => result.push(self.parse_token_tree().into()),
      .                       }
      .                   }
     12 ( 0.00%)          TokenStream::new(result)
     16 ( 0.00%)      }
      .           
      .               /// Evaluates the closure with restrictions in place.
      .               ///
      .               /// Afters the closure is evaluated, restrictions are reset.
      .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
  5,646 ( 0.00%)          let old = self.restrictions;
  7,507 ( 0.00%)          self.restrictions = res;
      .                   let res = f(self);
  7,636 ( 0.00%)          self.restrictions = old;
      .                   res
      .               }
      .           
 14,392 ( 0.00%)      fn is_crate_vis(&self) -> bool {
  8,995 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
 16,191 ( 0.00%)      }
      .           
      .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
      .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
      .               /// If the following element can't be a tuple (i.e., it's a function definition), then
      .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
      .               /// so emit a proper diagnostic.
      .               // Public for rustfmt usage.
 10,730 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
  2,209 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
      .           
  1,073 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
  4,292 ( 0.00%)          if self.is_crate_vis() {
      .                       self.bump(); // `crate`
      .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
      .                       return Ok(Visibility {
      .                           span: self.prev_token.span,
      .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
      .                           tokens: None,
      .                       });
      .                   }
      .           
      .                   if !self.eat_keyword(kw::Pub) {
      .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
      .                       // keyword to grab a span from for inherited visibility; an empty span at the
      .                       // beginning of the current token would seem to be the "Schelling span".
    932 ( 0.00%)              return Ok(Visibility {
  2,796 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
      .                           kind: VisibilityKind::Inherited,
      .                           tokens: None,
      .                       });
      .                   }
    141 ( 0.00%)          let lo = self.prev_token.span;
      .           
    705 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
      .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
      .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
      .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
      .                       // by the following tokens.
     36 ( 0.00%)              if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
      .                       // account for `pub(crate::foo)`
      .                       {
      .                           // Parse `pub(crate)`.
     12 ( 0.00%)                  self.bump(); // `(`
      8 ( 0.00%)                  self.bump(); // `crate`
     12 ( 0.00%)                  self.expect(&token::CloseDelim(token::Paren))?; // `)`
      4 ( 0.00%)                  let vis = VisibilityKind::Crate(CrateSugar::PubCrate);
      .                           return Ok(Visibility {
     12 ( 0.00%)                      span: lo.to(self.prev_token.span),
      .                               kind: vis,
      .                               tokens: None,
      .                           });
      .                       } else if self.is_keyword_ahead(1, &[kw::In]) {
      .                           // Parse `pub(in path)`.
      .                           self.bump(); // `(`
      .                           self.bump(); // `in`
      .                           let path = self.parse_path(PathStyle::Mod)?; // `path`
-- line 1317 ----------------------------------------
-- line 1338 ----------------------------------------
      .                       } else if let FollowedByType::No = fbt {
      .                           // Provide this diagnostic if a type cannot follow;
      .                           // in particular, if this is not a tuple struct.
      .                           self.recover_incorrect_vis_restriction()?;
      .                           // Emit diagnostic, but continue with public visibility.
      .                       }
      .                   }
      .           
    411 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
  9,657 ( 0.00%)      }
      .           
      .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
      .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
      .                   self.bump(); // `(`
      .                   let path = self.parse_path(PathStyle::Mod)?;
      .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
      .           
      .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1370 ----------------------------------------
      .                       )
      .                       .emit();
      .           
      .                   Ok(())
      .               }
      .           
      .               /// Parses `extern string_literal?`.
      .               fn parse_extern(&mut self) -> Extern {
    199 ( 0.00%)          if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }
      .               }
      .           
      .               /// Parses a string literal as an ABI spec.
      .               fn parse_abi(&mut self) -> Option<StrLit> {
      .                   match self.parse_str_lit() {
      .                       Ok(str_lit) => Some(str_lit),
      .                       Err(Some(lit)) => match lit.kind {
      .                           ast::LitKind::Err(_) => None,
-- line 1386 ----------------------------------------
-- line 1395 ----------------------------------------
      .                                   .emit();
      .                               None
      .                           }
      .                       },
      .                       Err(None) => None,
      .                   }
      .               }
      .           
  1,470 ( 0.00%)      pub fn collect_tokens_no_attrs<R: AstLike>(
      .                   &mut self,
      .                   f: impl FnOnce(&mut Self) -> PResult<'a, R>,
      .               ) -> PResult<'a, R> {
      .                   // The only reason to call `collect_tokens_no_attrs` is if you want tokens, so use
      .                   // `ForceCollect::Yes`
      .                   self.collect_tokens_trailing_token(
      .                       AttrWrapper::empty(),
      .                       ForceCollect::Yes,
    147 ( 0.00%)              |this, _attrs| Ok((f(this)?, TrailingToken::None)),
      .                   )
  1,470 ( 0.00%)      }
      .           
      .               /// `::{` or `::*`
 47,760 ( 0.00%)      fn is_import_coupler(&mut self) -> bool {
 23,880 ( 0.00%)          self.check(&token::ModSep)
      .                       && self.look_ahead(1, |t| {
 11,277 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
      .                       })
 48,024 ( 0.00%)      }
      .           
      .               pub fn clear_expected_tokens(&mut self) {
      .                   self.expected_tokens.clear();
      .               }
      .           }
      .           
      .           crate fn make_unclosed_delims_error(
      .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
      .                   err.span_label(sp, "closing delimiter possibly meant for this");
      .               }
      .               if let Some(sp) = unmatched.unclosed_span {
      .                   err.span_label(sp, "unclosed delimiter");
      .               }
      .               Some(err)
      .           }
      .           
  8,800 ( 0.00%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
  4,400 ( 0.00%)      *sess.reached_eof.borrow_mut() |=
      .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
  4,400 ( 0.00%)      for unmatched in unclosed_delims.drain(..) {
      .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
      .                       e.emit();
      .                   }
      .               }
  8,800 ( 0.00%)  }
      .           
      .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
      .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
      .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
      .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
      .           /// `AttrAnnotatedTokenTree::Delimited` tokens
      .           #[derive(Debug, Clone)]
      .           pub enum FlatToken {
-- line 1474 ----------------------------------------

240,540 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
  582,755 ( 0.04%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
       25 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    1,126 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
        .               LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
-- line 173 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    2,954 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
       14 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
       56 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 213 ----------------------------------------
        .               }
        .           }
        .           
        .           impl RealFileName {
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path(&self) -> Option<&Path> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => {
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    2,340 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
        7 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
        .               pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
        7 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
    6,059 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    6,882 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        .               QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
-- line 281 ----------------------------------------
-- line 288 ----------------------------------------
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
       49 ( 0.00%)      fn from(p: PathBuf) -> Self {
       14 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
       42 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
       49 ( 0.00%)      }
        .           }
        .           
        2 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
       28 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
       42 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
       42 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
       35 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
        .               pub fn to_string_lossy(&self) -> Cow<'_, str> {
        .                   match self.inner {
        .                       FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
        .               }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
    1,140 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
-- line 353 ----------------------------------------
-- line 357 ----------------------------------------
        .               }
        .           
        .               pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
        .               }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
        7 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
       14 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
       13 ( 0.00%)      pub lo: BytePos,
       13 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
       36 ( 0.00%)      pub ctxt: SyntaxContext,
       12 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
  190,947 ( 0.01%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
    1,383 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
   55,736 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
   41,802 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
   55,736 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
   86,211 ( 0.01%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
   57,474 ( 0.00%)      }
        .               #[inline]
    3,280 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
    3,280 ( 0.00%)      }
        .               #[inline]
   13,761 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
    9,174 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
    5,105 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
    3,063 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
        .               pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
        .               }
-- line 566 ----------------------------------------
-- line 568 ----------------------------------------
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
        .                   self.data_untracked().is_dummy()
        .               }
        .           
        .               /// Returns `true` if this span comes from a macro or desugaring.
        .               #[inline]
       15 ( 0.00%)      pub fn from_expansion(self) -> bool {
        .                   self.ctxt() != SyntaxContext::root()
       10 ( 0.00%)      }
        .           
        .               /// Returns `true` if `span` originates in a derive-macro's expansion.
        .               pub fn in_derive_expansion(self) -> bool {
        .                   matches!(self.ctxt().outer_expn_data().kind, ExpnKind::Macro(MacroKind::Derive, _))
        .               }
        .           
        .               /// Gate suggestions that would not be appropriate in a context the user didn't write.
        .               pub fn can_be_used_for_suggestions(self) -> bool {
-- line 586 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// Returns a new span representing an empty span at the beginning of this span.
        .               #[inline]
        .               pub fn shrink_to_lo(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_hi(span.lo)
        .               }
        .               /// Returns a new span representing an empty span at the end of this span.
        .               #[inline]
      900 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_lo(span.hi)
      600 ( 0.00%)      }
        .           
        .               #[inline]
        .               /// Returns `true` if `hi == lo`.
        .               pub fn is_empty(self) -> bool {
        .                   let span = self.data_untracked();
        .                   span.hi == span.lo
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
    4,149 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
    2,766 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
-- line 638 ----------------------------------------
-- line 663 ----------------------------------------
        .               /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,
        .               /// if any.
        .               pub fn parent_callsite(self) -> Option<Span> {
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(expn_data.call_site) } else { None }
        .               }
        .           
        .               /// Walk down the expansion ancestors to find a span that's contained within `outer`.
    3,580 ( 0.00%)      pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
    1,790 ( 0.00%)          while !outer.contains(self) {
        .                       self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
    3,938 ( 0.00%)      }
        .           
        .               /// Edition of the crate from which this span came.
   19,191 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
   12,794 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
    3,132 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
    3,474 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
    3,702 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
    3,790 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
      758 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
    3,032 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
   15,589 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
   13,362 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
   11,135 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
      535 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
      642 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
      428 ( 0.00%)      }
        .           
        .               /// Checks if a span is "internal" to a macro in which `unsafe`
        .               /// can be used without triggering the `unsafe_code` lint.
        .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
        .               pub fn allows_unsafe(self) -> bool {
        .                   self.ctxt().outer_expn_data().allow_internal_unsafe
        .               }
        .           
-- line 745 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
  366,113 ( 0.02%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
   65,479 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
    1,087 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
      966 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
  225,715 ( 0.01%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
  299,547 ( 0.02%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
      506 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
      322 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
      368 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
    2,343 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
      426 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
    1,491 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
    1,917 ( 0.00%)      }
        .           
    1,914 ( 0.00%)      pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
    1,218 ( 0.00%)      }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
    4,224 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
       84 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
        .                   self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
   25,848 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
   15,078 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
   37,152 ( 0.00%)          span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
        .               pub fn remove_mark(&mut self) -> ExpnId {
      288 ( 0.00%)          let mut span = self.data();
      288 ( 0.00%)          let mark = span.ctxt.remove_mark();
    1,152 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
   59,139 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
   39,426 ( 0.00%)          let mut span = self.data();
   32,691 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
   59,139 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
   65,546 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
-- line 922 ----------------------------------------
-- line 929 ----------------------------------------
        .               ) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
   51,856 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
   45,374 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1048 ----------------------------------------
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_span(primary_span: Span) -> MultiSpan {
    1,425 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
       80 ( 0.00%)          MultiSpan { primary_spans: vec, span_labels: vec![] }
        .               }
        .           
        .               pub fn push_span_label(&mut self, span: Span, label: String) {
        .                   self.span_labels.push((span, label));
        .               }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
      176 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
        .               }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
-- line 1079 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
    1,425 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
    1,425 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
       80 ( 0.00%)      fn from(spans: Vec<Span>) -> MultiSpan {
       64 ( 0.00%)          MultiSpan::from_spans(spans)
       80 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
      803 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      308 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      154 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      462 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
       21 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1257 ----------------------------------------
        .               AbsentOk,
        .               /// A failed attempt has been made to load the external source.
        .               AbsentErr,
        .               Unneeded,
        .           }
        .           
        .           impl ExternalSource {
        .               pub fn get_source(&self) -> Option<&Lrc<String>> {
    1,514 ( 0.00%)          match self {
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::Present(ref src), .. } => Some(src),
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
    1,140 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
       42 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    2,280 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        1 ( 0.00%)          let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
       24 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
        .                   hash
        .               }
        .           
        .               /// Check if the stored hash matches the hash of the string.
        .               pub fn matches(&self, src: &str) -> bool {
        1 ( 0.00%)          Self::new(self.kind, src) == *self
        .               }
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
        .                   let len = self.hash_len();
        .                   &self.value[..len]
        .               }
        .           
        .               fn hash_len(&self) -> usize {
       23 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
      406 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
        7 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
        7 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
        7 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
       28 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
       14 ( 0.00%)                          0..=0xFF => 1,
        .                                   0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
       14 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
       21 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
       77 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    5,130 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      570 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
  940,908 ( 0.06%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    1,140 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    6,270 ( 0.00%)              SourceFile {
    4,560 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    2,280 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    2,280 ( 0.00%)                  lines,
    2,280 ( 0.00%)                  multibyte_chars,
    2,280 ( 0.00%)                  non_narrow_chars,
    2,280 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    5,130 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
       77 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
       21 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
       14 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
       14 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
       21 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
       84 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
       14 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
      119 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
       77 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
       28 ( 0.00%)              lines,
       28 ( 0.00%)              multibyte_chars,
       28 ( 0.00%)              non_narrow_chars,
       28 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
       63 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
        .               pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
        .                   self.lines[line_index]
        .               }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
    2,198 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
      318 ( 0.00%)          if matches!(
      628 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        1 ( 0.00%)              let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        3 ( 0.00%)              if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
        .                       {
        5 ( 0.00%)                  if let Some(mut src) = src {
        .                               // The src_hash needs to be computed on the pre-normalized src.
        1 ( 0.00%)                      if self.src_hash.matches(&src) {
        3 ( 0.00%)                          normalize_src(&mut src, BytePos::from_usize(0));
        8 ( 0.00%)                          *src_kind = ExternalSourceKind::Present(Lrc::new(src));
        .                                   return true;
        .                               }
        .                           } else {
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
      313 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
    2,826 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
        .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
        .                   fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
      570 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
    6,213 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
   13,886 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
   28,728 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
   18,915 ( 0.00%)          assert!(line_index < self.lines.len());
   27,021 ( 0.00%)          if line_index == (self.lines.len() - 1) {
       82 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
   17,944 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
        2 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
        6 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
        4 ( 0.00%)              if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
        .                           total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
        .                           assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
       12 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
       10 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
        4 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
        7 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
        2 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
        .                   match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
        1 ( 0.00%)                  let linebpos = self.lines[a];
        2 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
        1 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
        8 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
        3 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
        2 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
        1 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
        5 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
        7 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
       80 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
       72 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        8 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        8 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
   63,546 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
    4,860 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
   87,547 ( 0.01%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
1,888,852 ( 0.12%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
1,626,338 ( 0.10%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
        .               }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
  208,668 ( 0.01%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2042 ----------------------------------------
        .           /// Range inside of a `Span` used for diagnostics when we only have access to relative positions.
        .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           pub struct InnerSpan {
        .               pub start: usize,
        .               pub end: usize,
        .           }
        .           
        .           impl InnerSpan {
      802 ( 0.00%)      pub fn new(start: usize, end: usize) -> InnerSpan {
        .                   InnerSpan { start, end }
      401 ( 0.00%)      }
        .           }
        .           
        .           /// Requirements for a `StableHashingContext` to be used in this crate.
        .           ///
        .           /// This is a hack to allow using the [`HashStable_Generic`] derive macro
        .           /// instead of implementing everything in rustc_middle.
        .           pub trait HashStableContext {
        .               fn def_path_hash(&self, def_id: DefId) -> DefPathHash;
-- line 2060 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
  406,994 ( 0.03%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
   68,728 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
  338,266 ( 0.02%)          let span = self.data_untracked();
  142,684 ( 0.01%)          span.ctxt.hash_stable(ctx, hasher);
  174,426 ( 0.01%)          span.parent.hash_stable(ctx, hasher);
        .           
  117,491 ( 0.01%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
  113,870 ( 0.01%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
  227,740 ( 0.01%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
  113,870 ( 0.01%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
   56,935 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
   56,935 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
  465,136 ( 0.03%)      }
        .           }

2,197,829 ( 0.14%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sharded.rs
--------------------------------------------------------------------------------
Ir                 

-- line 31 ----------------------------------------
        .               fn default() -> Self {
        .                   Self::new(T::default)
        .               }
        .           }
        .           
        .           impl<T> Sharded<T> {
        .               #[inline]
        .               pub fn new(mut value: impl FnMut() -> T) -> Self {
        2 ( 0.00%)          Sharded { shards: [(); SHARDS].map(|()| CacheAligned(Lock::new(value()))) }
        .               }
        .           
        .               /// The shard is selected by hashing `val` with `FxHasher`.
        .               #[inline]
        .               pub fn get_shard_by_value<K: Hash + ?Sized>(&self, val: &K) -> &Lock<T> {
        .                   if SHARDS == 1 { &self.shards[0].0 } else { self.get_shard_by_hash(make_hash(val)) }
        .               }
        .           
        .               #[inline]
        .               pub fn get_shard_by_hash(&self, hash: u64) -> &Lock<T> {
        .                   &self.shards[get_shard_index_by_hash(hash)].0
        .               }
        .           
        .               #[inline]
        .               pub fn get_shard_by_index(&self, i: usize) -> &Lock<T> {
  116,640 ( 0.01%)          &self.shards[i].0
        .               }
        .           
        .               pub fn lock_shards(&self) -> Vec<LockGuard<'_, T>> {
        .                   (0..SHARDS).map(|i| self.shards[i].0.lock()).collect()
        .               }
        .           
        .               pub fn try_lock_shards(&self) -> Option<Vec<LockGuard<'_, T>>> {
        .                   (0..SHARDS).map(|i| self.shards[i].0.try_lock()).collect()
-- line 63 ----------------------------------------
-- line 79 ----------------------------------------
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   let hash = make_hash(value);
        .                   let mut shard = self.get_shard_by_hash(hash).lock();
        .                   let entry = shard.raw_entry_mut().from_key_hashed_nocheck(hash, value);
        .           
        .                   match entry {
  192,614 ( 0.01%)              RawEntryMut::Occupied(e) => *e.key(),
        .                       RawEntryMut::Vacant(e) => {
        .                           let v = make();
        .                           e.insert_hashed_nocheck(hash, v, ());
        .                           v
        .                       }
        .                   }
        .               }
        .           
-- line 95 ----------------------------------------
-- line 99 ----------------------------------------
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   let hash = make_hash(&value);
        .                   let mut shard = self.get_shard_by_hash(hash).lock();
        .                   let entry = shard.raw_entry_mut().from_key_hashed_nocheck(hash, &value);
        .           
        .                   match entry {
  332,301 ( 0.02%)              RawEntryMut::Occupied(e) => *e.key(),
        .                       RawEntryMut::Vacant(e) => {
  463,184 ( 0.03%)                  let v = make(value);
        .                           e.insert_hashed_nocheck(hash, v, ());
        .                           v
        .                       }
        .                   }
       30 ( 0.00%)      }
        .           }
        .           
        .           pub trait IntoPointer {
        .               /// Returns a pointer which outlives `self`.
        .               fn into_pointer(&self) -> *const ();
        .           }
        .           
        .           impl<K: Eq + Hash + Copy + IntoPointer> ShardedHashMap<K, ()> {
-- line 122 ----------------------------------------
-- line 125 ----------------------------------------
        .                   let shard = self.get_shard_by_hash(hash).lock();
        .                   let value = value.into_pointer();
        .                   shard.raw_entry().from_hash(hash, |entry| entry.into_pointer() == value).is_some()
        .               }
        .           }
        .           
        .           #[inline]
        .           fn make_hash<K: Hash + ?Sized>(val: &K) -> u64 {
1,262,800 ( 0.08%)      let mut state = FxHasher::default();
  343,028 ( 0.02%)      val.hash(&mut state);
        .               state.finish()
        .           }
        .           
        .           /// Get a shard with a pre-computed hash value. If `get_shard_by_value` is
        .           /// ever used in combination with `get_shard_by_hash` on a single `Sharded`
        .           /// instance, then `hash` must be computed with `FxHasher`. Otherwise,
        .           /// `hash` can be computed with any hasher, so long as that hasher is used
        .           /// consistently for each `Sharded` instance.
-- line 142 ----------------------------------------

  688,294 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sharded.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir                 

-- line 118 ----------------------------------------
        .               stability: InternedSet<'tcx, attr::Stability>,
        .           
        .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
        .               const_stability: InternedSet<'tcx, attr::ConstStability>,
        .           }
        .           
        .           impl<'tcx> CtxtInterners<'tcx> {
        .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
       17 ( 0.00%)          CtxtInterners {
        .                       arena,
        .                       type_: Default::default(),
        .                       type_list: Default::default(),
        .                       substs: Default::default(),
        .                       region: Default::default(),
        .                       poly_existential_predicates: Default::default(),
        .                       canonical_var_infos: Default::default(),
        .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
        .                       stability: Default::default(),
        .                       const_stability: Default::default(),
        .                   }
        .               }
        .           
        .               /// Interns a type.
        .               #[allow(rustc::usage_of_ty_tykind)]
        .               #[inline(never)]
2,006,728 ( 0.12%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
        .                   self.type_
1,254,205 ( 0.08%)              .intern(kind, |kind| {
   92,820 ( 0.01%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
        .           
        .                           let ty_struct = TyS {
  185,640 ( 0.01%)                      kind,
        .                               flags: flags.flags,
        .                               outer_exclusive_binder: flags.outer_exclusive_binder,
        .                           };
        .           
        .                           Interned(self.arena.alloc(ty_struct))
        .                       })
        .                       .0
2,257,569 ( 0.14%)      }
        .           
        .               #[inline(never)]
  623,048 ( 0.04%)      fn intern_predicate(
        .                   &self,
        .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
        .               ) -> &'tcx PredicateInner<'tcx> {
        .                   self.predicate
  545,167 ( 0.03%)              .intern(kind, |kind| {
  172,470 ( 0.01%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
        .           
        .                           let predicate_struct = PredicateInner {
        .                               kind,
        .                               flags: flags.flags,
        .                               outer_exclusive_binder: flags.outer_exclusive_binder,
        .                           };
        .           
        .                           Interned(self.arena.alloc(predicate_struct))
        .                       })
        .                       .0
  700,929 ( 0.04%)      }
        .           }
        .           
        .           pub struct CommonTypes<'tcx> {
        .               pub unit: Ty<'tcx>,
        .               pub bool: Ty<'tcx>,
        .               pub char: Ty<'tcx>,
        .               pub isize: Ty<'tcx>,
        .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
        .           /// safely used as a key in the maps of a TypeckResults. For that to be
        .           /// the case, the HirId must have the same `owner` as all the other IDs in
        .           /// this table (signified by `hir_owner`). Otherwise the HirId
        .           /// would be in a different frame of reference and using its `local_id`
        .           /// would result in lookup errors, or worse, in silently wrong data being
        .           /// stored/returned.
        .           #[inline]
        .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
  315,778 ( 0.02%)      if hir_id.owner != hir_owner {
        .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
        .               }
        .           }
        .           
        .           #[cold]
        .           #[inline(never)]
        .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
        .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
        .           }
        .           
        .           impl<'a, V> LocalTableInContext<'a, V> {
        .               pub fn contains_key(&self, id: hir::HirId) -> bool {
        .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.data.contains_key(&id.local_id)
        .               }
        .           
  234,045 ( 0.01%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
   46,750 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
   46,750 ( 0.00%)          self.data.get(&id.local_id)
  187,566 ( 0.01%)      }
        .           
        .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
        .                   self.data.iter()
        .               }
        .           }
        .           
        .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
        .               type Output = V;
        .           
    1,626 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
        5 ( 0.00%)          self.get(key).expect("LocalTableInContext: key not found")
    1,084 ( 0.00%)      }
        .           }
        .           
        .           pub struct LocalTableInContextMut<'a, V> {
        .               hir_owner: LocalDefId,
        .               data: &'a mut ItemLocalMap<V>,
        .           }
        .           
        .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
        .               pub treat_byte_string_as_slice: ItemLocalSet,
        .           
        .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
        .               /// on closure size.
        .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
        .           }
        .           
        .           impl<'tcx> TypeckResults<'tcx> {
    5,118 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
   60,563 ( 0.00%)          TypeckResults {
        .                       hir_owner,
        .                       type_dependent_defs: Default::default(),
        .                       field_indices: Default::default(),
        .                       user_provided_types: Default::default(),
        .                       user_provided_sigs: Default::default(),
        .                       node_types: Default::default(),
        .                       node_substs: Default::default(),
        .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
        .                       tainted_by_errors: None,
        .                       concrete_opaque_types: Default::default(),
        .                       closure_min_captures: Default::default(),
        .                       closure_fake_reads: Default::default(),
        .                       generator_interior_types: ty::Binder::dummy(Default::default()),
        .                       treat_byte_string_as_slice: Default::default(),
        .                       closure_size_eval: Default::default(),
        .                   }
    5,118 ( 0.00%)      }
        .           
        .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
   48,810 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
   32,540 ( 0.00%)          match *qpath {
   80,856 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
        .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
        .                           .type_dependent_def(id)
   16,764 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
        .                   }
   81,350 ( 0.00%)      }
        .           
      393 ( 0.00%)      pub fn type_dependent_defs(
        .                   &self,
        .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
    2,978 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
      393 ( 0.00%)      }
        .           
    5,118 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
   10,959 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
   10,236 ( 0.00%)      }
        .           
   12,188 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
        .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
   12,188 ( 0.00%)      }
        .           
   21,198 ( 0.00%)      pub fn type_dependent_defs_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
   21,198 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
   21,198 ( 0.00%)      }
        .           
        .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
    4,016 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
      874 ( 0.00%)      }
        .           
        .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
    5,736 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
    2,868 ( 0.00%)      }
        .           
        .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
    8,228 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    4,114 ( 0.00%)      }
        .           
        .               pub fn user_provided_types_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
    1,508 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
      754 ( 0.00%)      }
        .           
        .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
   43,494 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
   21,747 ( 0.00%)      }
        .           
        .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
   75,754 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
   37,877 ( 0.00%)      }
        .           
  338,058 ( 0.02%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
   56,343 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
        .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
        .                   })
  281,715 ( 0.02%)      }
        .           
   73,012 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
   73,012 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_types.get(&id.local_id).cloned()
  146,024 ( 0.01%)      }
        .           
        .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
    9,172 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
    4,586 ( 0.00%)      }
        .           
   25,268 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
   25,268 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
   50,536 ( 0.00%)      }
        .           
   16,478 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
   16,478 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_substs.get(&id.local_id).cloned()
   32,956 ( 0.00%)      }
        .           
        .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
        .               // doesn't provide type parameter substitutions.
        .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
    5,192 ( 0.00%)          self.node_type(pat.hir_id)
        .               }
        .           
        .               // Returns the type of an expression as a monotype.
        .               //
        .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
        .               // some cases, we insert `Adjustment` annotations such as auto-deref or
        .               // auto-ref.  The type returned by this function does not consider such
        .               // adjustments.  See `expr_ty_adjusted()` instead.
        .               //
        .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
        .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
        .               // instead of "fn(ty) -> T with T = isize".
        .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
   66,739 ( 0.00%)          self.node_type(expr.hir_id)
        .               }
        .           
        .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
   62,999 ( 0.00%)          self.node_type_opt(expr.hir_id)
        .               }
        .           
        .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
   32,404 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
   16,202 ( 0.00%)      }
        .           
        .               pub fn adjustments_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
   50,006 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
   25,003 ( 0.00%)      }
        .           
   28,685 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
   57,370 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
        .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
   57,370 ( 0.00%)      }
        .           
        .               /// Returns the type of `expr`, considering any `Adjustment`
        .               /// entry recorded for that expression.
    4,325 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
      865 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
    2,144 ( 0.00%)      }
        .           
    1,485 ( 0.00%)      pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
      297 ( 0.00%)          self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
      880 ( 0.00%)      }
        .           
    2,585 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
        .                   // Only paths and method calls/overloaded operators have
        .                   // entries in type_dependent_defs, ignore the former here.
    5,170 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
        .                       return false;
        .                   }
        .           
    6,498 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
    5,170 ( 0.00%)      }
        .           
   11,151 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
        .                   self.pat_binding_modes().get(id).copied().or_else(|| {
        .                       s.delay_span_bug(sp, "missing binding mode");
        .                       None
        .                   })
   14,868 ( 0.00%)      }
        .           
        .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
    9,613 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
    2,948 ( 0.00%)      }
        .           
        .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
    5,032 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
    2,516 ( 0.00%)      }
        .           
        .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
   16,204 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
    8,102 ( 0.00%)      }
        .           
        .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
    5,030 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
    2,515 ( 0.00%)      }
        .           
        .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
        .               /// by the closure.
    1,920 ( 0.00%)      pub fn closure_min_captures_flattened(
        .                   &self,
        .                   closure_def_id: DefId,
        .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
        .                   self.closure_min_captures
        .                       .get(&closure_def_id)
        .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
        .                       .into_iter()
        .                       .flatten()
    2,400 ( 0.00%)      }
        .           
        .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
      482 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
      241 ( 0.00%)      }
        .           
        .               pub fn closure_kind_origins_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
        .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
        .               }
        .           
        .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
    1,566 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
      783 ( 0.00%)      }
        .           
        .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
    1,084 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
      542 ( 0.00%)      }
        .           
        .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
      492 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
      246 ( 0.00%)      }
        .           
        .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
       20 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
       10 ( 0.00%)      }
        .           
      276 ( 0.00%)      pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
       92 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
        .                   self.coercion_casts.contains(&hir_id.local_id)
      184 ( 0.00%)      }
        .           
        .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
        .                   self.coercion_casts.insert(id);
        .               }
        .           
        .               pub fn coercion_casts(&self) -> &ItemLocalSet {
      241 ( 0.00%)          &self.coercion_casts
      241 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
        .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
        .                   let ty::TypeckResults {
        .                       hir_owner,
        .                       ref type_dependent_defs,
        .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
        .                   const START_INDEX = 0,
        .               }
        .           }
        .           
        .           /// Mapping of type annotation indices to canonical user type annotations.
        .           pub type CanonicalUserTypeAnnotations<'tcx> =
        .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
        .           
      750 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
        .           pub struct CanonicalUserTypeAnnotation<'tcx> {
        .               pub user_ty: CanonicalUserType<'tcx>,
        .               pub span: Span,
      399 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
        .           }
        .           
        .           /// Canonicalized user type annotation.
        .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
        .           
        .           impl<'tcx> CanonicalUserType<'tcx> {
        .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
        .               /// i.e., each thing is mapped to a canonical variable with the same index.
    1,580 ( 0.00%)      pub fn is_identity(&self) -> bool {
    3,160 ( 0.00%)          match self.value {
        .                       UserType::Ty(_) => false,
        .                       UserType::TypeOf(_, user_substs) => {
    1,580 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
        .                               return false;
        .                           }
        .           
        .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
        .                               match kind.unpack() {
    3,220 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
        .                                       ty::Bound(debruijn, b) => {
        .                                           // We only allow a `ty::INNERMOST` index in substitutions.
    1,603 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
        .                                           cvar == b.var
        .                                       }
        .                                       _ => false,
        .                                   },
        .           
      156 ( 0.00%)                          GenericArgKind::Lifetime(r) => match r {
        .                                       ty::ReLateBound(debruijn, br) => {
        .                                           // We only allow a `ty::INNERMOST` index in substitutions.
        .                                           assert_eq!(*debruijn, ty::INNERMOST);
        .                                           cvar == br.var
        .                                       }
        .                                       _ => false,
        .                                   },
        .           
-- line 867 ----------------------------------------
-- line 872 ----------------------------------------
        .                                           cvar == b
        .                                       }
        .                                       _ => false,
        .                                   },
        .                               }
        .                           })
        .                       }
        .                   }
    3,160 ( 0.00%)      }
        .           }
        .           
        .           /// A user-given type annotation attached to a constant. These arise
        .           /// from constants that are named via paths, like `Foo::<A>::new` and
        .           /// so forth.
    2,394 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
   18,674 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
        .           pub enum UserType<'tcx> {
        .               Ty(Ty<'tcx>),
        .           
        .               /// The canonical type is the result of `type_of(def_id)` with the
        .               /// given substitutions applied.
        .               TypeOf(DefId, UserSubsts<'tcx>),
        .           }
        .           
        .           impl<'tcx> CommonTypes<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
      111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
        .           
        .                   CommonTypes {
        .                       unit: mk(Tuple(List::empty())),
        .                       bool: mk(Bool),
        .                       char: mk(Char),
        .                       never: mk(Never),
        .                       isize: mk(Int(ty::IntTy::Isize)),
        .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
        .           
        .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> CommonLifetimes<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
       67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
        .           
        .                   CommonLifetimes {
        5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
        5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
        5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> CommonConsts<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
        6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
        .           
        .                   CommonConsts {
        .                       unit: mk_const(ty::Const {
        .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
        .                           ty: types.unit,
        .                       }),
        .                   }
        .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
        .           
        .               /// Stores memory for globals (statics/consts).
        .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
        .           
        .               output_filenames: Arc<OutputFilenames>,
        .           }
        .           
        .           impl<'tcx> TyCtxt<'tcx> {
   11,500 ( 0.00%)      pub fn typeck_opt_const_arg(
        .                   self,
        .                   def: ty::WithOptConstParam<LocalDefId>,
        .               ) -> &'tcx TypeckResults<'tcx> {
    4,600 ( 0.00%)          if let Some(param_did) = def.const_param_did {
        .                       self.typeck_const_arg((def.did, param_did))
        .                   } else {
        .                       self.typeck(def.did)
        .                   }
    9,200 ( 0.00%)      }
        .           
      840 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
      280 ( 0.00%)          self.arena.alloc(Steal::new(thir))
    1,120 ( 0.00%)      }
        .           
    4,245 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
      849 ( 0.00%)          self.arena.alloc(Steal::new(mir))
    5,943 ( 0.00%)      }
        .           
    1,120 ( 0.00%)      pub fn alloc_steal_promoted(
        .                   self,
        .                   promoted: IndexVec<Promoted, Body<'tcx>>,
        .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
      280 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
    1,400 ( 0.00%)      }
        .           
      774 ( 0.00%)      pub fn alloc_adt_def(
        .                   self,
        .                   did: DefId,
        .                   kind: AdtKind,
        .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
        .                   repr: ReprOptions,
        .               ) -> &'tcx ty::AdtDef {
    1,376 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
      344 ( 0.00%)      }
        .           
        .               /// Allocates a read-only byte or string literal for `mir::interpret`.
        5 ( 0.00%)      pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
        .                   // Create an allocation that just contains these bytes.
        1 ( 0.00%)          let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
       13 ( 0.00%)          let alloc = self.intern_const_alloc(alloc);
        .                   self.create_memory_alloc(alloc)
        5 ( 0.00%)      }
        .           
        .               /// Returns a range of the start/end indices specified with the
        .               /// `rustc_layout_scalar_valid_range` attribute.
        .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
    8,392 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
    4,196 ( 0.00%)          let attrs = self.get_attrs(def_id);
   17,833 ( 0.00%)          let get = |name| {
    4,196 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
        .                           Some(attr) => attr,
        .                           None => return Bound::Unbounded,
        .                       };
        .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
        8 ( 0.00%)              if let Some(
        .                           &[
        .                               ast::NestedMetaItem::Literal(ast::Lit {
        4 ( 0.00%)                          kind: ast::LitKind::Int(a, _), ..
        .                               }),
        .                           ],
        2 ( 0.00%)              ) = attr.meta_item_list().as_deref()
        .                       {
        .                           Bound::Included(a)
        .                       } else {
        .                           self.sess
        .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
        .                           Bound::Unbounded
        .                       }
   20,980 ( 0.00%)          };
    6,294 ( 0.00%)          (
    6,294 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
    3,147 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
        .                   )
    8,392 ( 0.00%)      }
        .           
        .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
        .                   value.lift_to_tcx(self)
        .               }
        .           
        .               /// Creates a type context and call the closure with a `TyCtxt` reference
        .               /// to the context. The closure enforces that the type context and any interned
        .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
        .               /// reference to the context, to allow formatting values that need it.
       23 ( 0.00%)      pub fn create_global_ctxt(
        .                   s: &'tcx Session,
        .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
        .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
        .                   resolutions: ty::ResolverOutputs,
        .                   krate: &'tcx hir::Crate<'tcx>,
        .                   dep_graph: DepGraph,
        .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
        .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
        .                   query_kinds: &'tcx [DepKindStruct],
        .                   crate_name: &str,
        .                   output_filenames: OutputFilenames,
        .               ) -> GlobalCtxt<'tcx> {
        1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
        .                       s.fatal(&err);
        .                   });
        .                   let interners = CtxtInterners::new(arena);
        .                   let common_types = CommonTypes::new(&interners);
        .                   let common_lifetimes = CommonLifetimes::new(&interners);
        .                   let common_consts = CommonConsts::new(&interners, &common_types);
        .           
      127 ( 0.00%)          GlobalCtxt {
        .                       sess: s,
        6 ( 0.00%)              lint_store,
        .                       arena,
        2 ( 0.00%)              interners,
        5 ( 0.00%)              dep_graph,
        4 ( 0.00%)              untracked_resolutions: resolutions,
        2 ( 0.00%)              prof: s.prof.clone(),
        .                       types: common_types,
        .                       lifetimes: common_lifetimes,
        .                       consts: common_consts,
        .                       untracked_crate: krate,
        .                       on_disk_cache,
        .                       queries,
        .                       query_caches: query::QueryCaches::default(),
        .                       query_kinds,
        .                       ty_rcache: Default::default(),
        .                       pred_rcache: Default::default(),
        .                       selection_cache: Default::default(),
        .                       evaluation_cache: Default::default(),
        1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
        .                       data_layout,
        .                       alloc_map: Lock::new(interpret::AllocMap::new()),
        .                       output_filenames: Arc::new(output_filenames),
        .                   }
        9 ( 0.00%)      }
        .           
        .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
        .                   &self.query_kinds[k as usize]
        .               }
        .           
        .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
        .               #[track_caller]
        .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   ty: Ty<'tcx>,
        .                   span: S,
        .                   msg: &str,
        .               ) -> &'tcx Const<'tcx> {
        .                   self.sess.delay_span_bug(span, msg);
        .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
        .               }
        .           
      105 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
       15 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
      120 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
      120 ( 0.00%)      }
        .           
        .               /// Obtain all lang items of this crate and all dependencies (recursively)
  599,739 ( 0.04%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
        .                   self.get_lang_items(())
  771,093 ( 0.05%)      }
        .           
        .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
        .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
       70 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
        .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
       80 ( 0.00%)      }
        .           
        .               /// Obtain the diagnostic item's name
   23,422 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
        .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
   26,768 ( 0.00%)      }
        .           
        .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
   30,240 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
        .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
   34,560 ( 0.00%)      }
        .           
    3,948 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
        .                   self.stability_index(())
    5,076 ( 0.00%)      }
        .           
  274,799 ( 0.02%)      pub fn features(self) -> &'tcx rustc_feature::Features {
        .                   self.features_query(())
  314,056 ( 0.02%)      }
        .           
        .               pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
        .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
   15,848 ( 0.00%)          if let Some(id) = id.as_local() {
        .                       self.untracked_resolutions.definitions.def_key(id)
        .                   } else {
   11,707 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
        .                   }
        .               }
        .           
        .               /// Converts a `DefId` into its fully expanded `DefPath` (every
        .               /// `DefId` is really just an interned `DefPath`).
        .               ///
        .               /// Note that if `id` is not local to this crate, the result will
        .               ///  be a non-local `DefPath`.
-- line 1272 ----------------------------------------
-- line 1277 ----------------------------------------
        .                   } else {
        .                       self.untracked_resolutions.cstore.def_path(id)
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
        .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
    2,343 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
        .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
        .                   } else {
      240 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
        .                   if crate_num == LOCAL_CRATE {
        .                       self.sess.local_stable_crate_id()
        .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
        .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
        .                       self.def_path(def_id).to_string_no_crate_verbose()
        .                   )
        .               }
        .           
        .               /// Note that this is *untracked* and should only be used within the query
        .               /// system if the result is otherwise tracked through queries
        .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
   57,890 ( 0.00%)          &*self.untracked_resolutions.cstore
   28,945 ( 0.00%)      }
        .           
        .               /// Note that this is *untracked* and should only be used within the query
        .               /// system if the result is otherwise tracked through queries
        .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
        .                   &self.untracked_resolutions.definitions
        .               }
        .           
        .               #[inline(always)]
        .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
       10 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
       49 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
        .               }
        .           
        .               #[inline(always)]
        .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
        .                   let resolutions = &self.gcx.untracked_resolutions;
        .                   StableHashingContext::ignore_spans(
        .                       self.sess,
        .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
        .               /// If `true`, we should use the MIR-based borrowck, but also
        .               /// fall back on the AST borrowck if the MIR-based one errors.
        .               pub fn migrate_borrowck(self) -> bool {
        .                   self.borrowck_mode().migrate()
        .               }
        .           
        .               /// What mode(s) of borrowck should we run? AST? MIR? both?
        .               /// (Also considers the `#![feature(nll)]` setting.)
      482 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
        .                   // Here are the main constraints we need to deal with:
        .                   //
        .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
        .                   //    synonymous with no `-Z borrowck=...` flag at all.
        .                   //
        .                   // 2. We want to allow developers on the Nightly channel
        .                   //    to opt back into the "hard error" mode for NLL,
        .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
        .                   //   errors. (To simplify the code here, it now even overrides
        .                   //   a user's attempt to specify `-Z borrowck=compare`, which
        .                   //   we arguably do not need anymore and should remove.)
        .                   //
        .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
        .                   //
        .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
        .           
      723 ( 0.00%)          if self.features().nll {
        .                       return BorrowckMode::Mir;
        .                   }
        .           
      241 ( 0.00%)          self.sess.opts.borrowck_mode
      964 ( 0.00%)      }
        .           
        .               /// If `true`, we should use lazy normalization for constants, otherwise
        .               /// we still evaluate them eagerly.
        .               #[inline]
        .               pub fn lazy_normalization(self) -> bool {
       12 ( 0.00%)          let features = self.features();
        .                   // Note: We only use lazy normalization for generic const expressions.
        4 ( 0.00%)          features.generic_const_exprs
        .               }
        .           
        .               #[inline]
        .               pub fn local_crate_exports_generics(self) -> bool {
        .                   debug_assert!(self.sess.opts.share_generics());
        .           
        .                   self.sess.crate_types().iter().any(|crate_type| {
        .                       match crate_type {
-- line 1442 ----------------------------------------
-- line 1554 ----------------------------------------
        .                   self.mk_imm_ref(
        .                       self.lifetimes.re_static,
        .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
        .                           .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
        .                   )
        .               }
        .           
        .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
    2,145 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
    1,560 ( 0.00%)          match self.def_kind(def_id) {
        .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
        .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
        .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
        .                       },
    3,510 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
        .                   }
    1,755 ( 0.00%)      }
        .           
        .               pub fn type_length_limit(self) -> Limit {
        .                   self.limits(()).type_length_limit
        .               }
        .           
  179,123 ( 0.01%)      pub fn recursion_limit(self) -> Limit {
        .                   self.limits(()).recursion_limit
  204,712 ( 0.01%)      }
        .           
        .               pub fn move_size_limit(self) -> Limit {
        .                   self.limits(()).move_size_limit
        .               }
        .           
      315 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
        .                   self.limits(()).const_eval_limit
      360 ( 0.00%)      }
        .           
        .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
        .                   iter::once(LOCAL_CRATE)
        .                       .chain(self.crates(()).iter().copied())
        .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
        .               }
        .           }
        .           
-- line 1594 ----------------------------------------
-- line 1684 ----------------------------------------
        .               /// This is the implicit state of rustc. It contains the current
        .               /// `TyCtxt` and query. It is updated when creating a local interner or
        .               /// executing a new query. Whenever there's a `TyCtxt` value available
        .               /// you should also have access to an `ImplicitCtxt` through the functions
        .               /// in this module.
        .               #[derive(Clone)]
        .               pub struct ImplicitCtxt<'a, 'tcx> {
        .                   /// The current `TyCtxt`.
        1 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
        .           
        .                   /// The current query job, if any. This is updated by `JobOwner::start` in
        .                   /// `ty::query::plumbing` when executing a query.
        .                   pub query: Option<query::QueryJobId<DepKind>>,
        .           
        .                   /// Where to store diagnostics for the current query job, if any.
        .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
        .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
        .                   pub layout_depth: usize,
        .           
        .                   /// The current dep graph task. This is used to add dependencies to queries
        .                   /// when executing them.
        .                   pub task_deps: TaskDepsRef<'a>,
        .               }
        .           
        .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
        5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
        .                       let tcx = TyCtxt { gcx };
       25 ( 0.00%)              ImplicitCtxt {
        .                           tcx,
        .                           query: None,
        .                           diagnostics: None,
        .                           layout_depth: 0,
        .                           task_deps: TaskDepsRef::Ignore,
        .                       }
        5 ( 0.00%)          }
        .               }
        .           
        .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
        .               /// to `value` during the call to `f`. It is restored to its previous value after.
        .               /// This is used to set the pointer to the new `ImplicitCtxt`.
        .               #[cfg(parallel_compiler)]
        .               #[inline]
        .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
        .           
        .               /// Sets TLV to `value` during the call to `f`.
        .               /// It is restored to its previous value after.
        .               /// This is used to set the pointer to the new `ImplicitCtxt`.
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
        .                   let old = get_tlv();
   60,471 ( 0.00%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
        .                   TLV.with(|tlv| tlv.set(value));
        .                   f()
        .               }
        .           
        .               /// Gets the pointer to the current `ImplicitCtxt`.
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
        .               }
        .           
        .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
        .               #[inline]
        .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
        .               where
        .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
        .               {
        1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
        .               }
        .           
        .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
        .               #[inline]
        .               pub fn with_context_opt<F, R>(f: F) -> R
        .               where
        .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
        .               {
        .                   let context = get_tlv();
  235,897 ( 0.01%)          if context == 0 {
        .                       f(None)
        .                   } else {
        .                       // We could get an `ImplicitCtxt` pointer from another thread.
        .                       // Ensure that `ImplicitCtxt` is `Sync`.
        .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
        .           
        .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
        .                   }
-- line 1789 ----------------------------------------
-- line 1805 ----------------------------------------
        .               /// This will panic if you pass it a `TyCtxt` which is different from the current
        .               /// `ImplicitCtxt`'s `tcx` field.
        .               #[inline]
        .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
        .               where
        .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
        .               {
        .                   with_context(|context| unsafe {
  116,704 ( 0.01%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
        .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
  116,640 ( 0.01%)              f(context)
        .                   })
        .               }
        .           
        .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
        .               /// Panics if there is no `ImplicitCtxt` available.
        .               #[inline]
        .               pub fn with<F, R>(f: F) -> R
        .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
        .               fn into_pointer(&self) -> *const () {
        .                   self.0 as *const _ as *const ()
        .               }
        .           }
        .           
        .           #[allow(rustc::usage_of_ty_tykind)]
        .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
        .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
  210,261 ( 0.01%)          &self.0.kind()
        .               }
        .           }
        .           
        .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
        .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
        .           
        .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  172,020 ( 0.01%)          self.0.kind().hash(s)
        .               }
        .           }
        .           
        .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
   52,536 ( 0.00%)          &self.0.kind
        .               }
        .           }
        .           
        .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
        .           
        .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   57,340 ( 0.00%)          self.0.kind.hash(s)
        .               }
        .           }
        .           
        .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
        .               fn borrow<'a>(&'a self) -> &'a [T] {
  199,191 ( 0.01%)          &self.0[..]
        .               }
        .           }
        .           
        .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
        .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
        .           
        .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   72,884 ( 0.00%)          self.0[..].hash(s)
        .               }
        .           }
        .           
        .           macro_rules! direct_interners {
        .               ($($name:ident: $method:ident($ty:ty),)+) => {
        .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
        .                       fn borrow<'a>(&'a self) -> &'a $ty {
   80,369 ( 0.00%)                  &self.0
        .                       }
        .                   }
        .           
        .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
        .                       fn eq(&self, other: &Self) -> bool {
        .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
        .                           // equals `x == y`.
        .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
        .                   }
        .           
        .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
        .           
        .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
        .                       fn hash<H: Hasher>(&self, s: &mut H) {
        .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
        .                           // x.hash(s)`.
   55,467 ( 0.00%)                  self.0.hash(s)
        .                       }
        .                   }
        .           
        .                   impl<'tcx> TyCtxt<'tcx> {
  740,631 ( 0.05%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
  382,220 ( 0.02%)                  self.interners.$name.intern(v, |v| {
   13,728 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
        .                           }).0
  832,158 ( 0.05%)              }
        .                   })+
        .               }
        .           }
        .           
        .           direct_interners! {
        .               region: mk_region(RegionKind),
        .               const_: mk_const(Const<'tcx>),
        .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
        .               adt_def: intern_adt_def(AdtDef),
        .               stability: intern_stability(attr::Stability),
        .               const_stability: intern_const_stability(attr::ConstStability),
        .           }
        .           
        .           macro_rules! slice_interners {
        .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
        .                   impl<'tcx> TyCtxt<'tcx> {
2,387,869 ( 0.15%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
        .                           self.interners.$field.intern_ref(v, || {
        .                               Interned(List::from_arena(&*self.arena, v))
        .                           }).0
2,133,306 ( 0.13%)              })+
        .                   }
        .               );
        .           }
        .           
        .           slice_interners!(
        .               type_list: _intern_type_list(Ty<'tcx>),
        .               substs: _intern_substs(GenericArg<'tcx>),
        .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2129 ----------------------------------------
        .               /// unsafe.
        .               pub fn safe_to_unsafe_fn_ty(self, sig: PolyFnSig<'tcx>) -> Ty<'tcx> {
        .                   assert_eq!(sig.unsafety(), hir::Unsafety::Normal);
        .                   self.mk_fn_ptr(sig.map_bound(|sig| ty::FnSig { unsafety: hir::Unsafety::Unsafe, ..sig }))
        .               }
        .           
        .               /// Given the def_id of a Trait `trait_def_id` and the name of an associated item `assoc_name`
        .               /// returns true if the `trait_def_id` defines an associated item of name `assoc_name`.
       72 ( 0.00%)      pub fn trait_may_define_assoc_type(self, trait_def_id: DefId, assoc_name: Ident) -> bool {
        .                   self.super_traits_of(trait_def_id).any(|trait_did| {
        .                       self.associated_items(trait_did)
        .                           .find_by_name_and_kind(self, assoc_name, ty::AssocKind::Type, trait_did)
        .                           .is_some()
        .                   })
       54 ( 0.00%)      }
        .           
        .               /// Computes the def-ids of the transitive supertraits of `trait_def_id`. This (intentionally)
        .               /// does not compute the full elaborated super-predicates but just the set of def-ids. It is used
        .               /// to identify which traits may define a given associated type to help avoid cycle errors.
        .               /// Returns a `DefId` iterator.
        .               fn super_traits_of(self, trait_def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {
        .                   let mut set = FxHashSet::default();
       12 ( 0.00%)          let mut stack = vec![trait_def_id];
        .           
        .                   set.insert(trait_def_id);
        .           
       54 ( 0.00%)          iter::from_fn(move || -> Option<DefId> {
       12 ( 0.00%)              let trait_did = stack.pop()?;
        6 ( 0.00%)              let generic_predicates = self.super_predicates_of(trait_did);
        .           
        .                       for (predicate, _) in generic_predicates.predicates {
        .                           if let ty::PredicateKind::Trait(data) = predicate.kind().skip_binder() {
        .                               if set.insert(data.def_id()) {
        .                                   stack.push(data.def_id());
        .                               }
        .                           }
        .                       }
-- line 2165 ----------------------------------------
-- line 2188 ----------------------------------------
        .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
        .                   })
        .               }
        .           
        .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
        .               /// `*r == kind`.
        .               #[inline]
        .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
   77,672 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
        .               }
        .           
        .               #[allow(rustc::usage_of_ty_tykind)]
        .               #[inline]
        .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
1,759,895 ( 0.11%)          self.interners.intern_ty(st)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
  853,563 ( 0.05%)          let inner = self.interners.intern_predicate(binder);
        .                   Predicate { inner }
        .               }
        .           
        .               #[inline]
  604,648 ( 0.04%)      pub fn reuse_or_mk_predicate(
        .                   self,
        .                   pred: Predicate<'tcx>,
        .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
        .               ) -> Predicate<'tcx> {
   40,693 ( 0.00%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
  604,648 ( 0.04%)      }
        .           
        .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
      359 ( 0.00%)          match tm {
        .                       IntTy::Isize => self.types.isize,
        .                       IntTy::I8 => self.types.i8,
        .                       IntTy::I16 => self.types.i16,
        .                       IntTy::I32 => self.types.i32,
        .                       IntTy::I64 => self.types.i64,
        .                       IntTy::I128 => self.types.i128,
        .                   }
      359 ( 0.00%)      }
        .           
        .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
      702 ( 0.00%)          match tm {
        .                       UintTy::Usize => self.types.usize,
        .                       UintTy::U8 => self.types.u8,
        .                       UintTy::U16 => self.types.u16,
        .                       UintTy::U32 => self.types.u32,
        .                       UintTy::U64 => self.types.u64,
        .                       UintTy::U128 => self.types.u128,
        .                   }
      702 ( 0.00%)      }
        .           
        .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
        .                   match tm {
        .                       FloatTy::F32 => self.types.f32,
        .                       FloatTy::F64 => self.types.f64,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn mk_static_str(self) -> Ty<'tcx> {
      976 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   // Take a copy of substs so that we own the vectors inside.
        .                   self.mk_ty(Adt(def, substs))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_foreign(self, def_id: DefId) -> Ty<'tcx> {
        .                   self.mk_ty(Foreign(def_id))
        .               }
        .           
       48 ( 0.00%)      fn mk_generic_adt(self, wrapper_def_id: DefId, ty_param: Ty<'tcx>) -> Ty<'tcx> {
        .                   let adt_def = self.adt_def(wrapper_def_id);
        .                   let substs =
       90 ( 0.00%)              InternalSubsts::for_item(self, wrapper_def_id, |param, substs| match param.kind {
        .                           GenericParamDefKind::Lifetime | GenericParamDefKind::Const { .. } => bug!(),
        6 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
       24 ( 0.00%)                      if param.index == 0 {
        .                                   ty_param.into()
        .                               } else {
        6 ( 0.00%)                          assert!(has_default);
       18 ( 0.00%)                          self.type_of(param.def_id).subst(self, substs).into()
        .                               }
        .                           }
        .                       });
        6 ( 0.00%)          self.mk_ty(Adt(adt_def, substs))
       48 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_box(self, ty: Ty<'tcx>) -> Ty<'tcx> {
       30 ( 0.00%)          let def_id = self.require_lang_item(LangItem::OwnedBox, None);
       66 ( 0.00%)          self.mk_generic_adt(def_id, ty)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_lang_item(self, ty: Ty<'tcx>, item: LangItem) -> Option<Ty<'tcx>> {
        .                   let def_id = self.lang_items().require(item).ok()?;
        .                   Some(self.mk_generic_adt(def_id, ty))
        .               }
        .           
-- line 2293 ----------------------------------------
-- line 2329 ----------------------------------------
        .               }
        .           
        .               #[inline]
        .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
        .               }
        .           
        .               #[inline]
    2,514 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
        .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
    2,624 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(Slice(ty))
        .               }
        .           
        .               #[inline]
        .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
      968 ( 0.00%)          let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
    1,750 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
        .               }
        .           
        .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
   16,180 ( 0.00%)          iter.intern_with(|ts| {
    5,964 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
   24,337 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
   14,373 ( 0.00%)          })
        .               }
        .           
        .               #[inline]
        .               pub fn mk_unit(self) -> Ty<'tcx> {
      736 ( 0.00%)          self.types.unit
        .               }
        .           
        .               #[inline]
        .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
       16 ( 0.00%)          if self.features().never_type_fallback { self.types.never } else { self.types.unit }
        .               }
        .           
        .               #[inline]
        .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(FnDef(def_id, substs))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
    3,596 ( 0.00%)          self.mk_ty(FnPtr(fty))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_dynamic(
        .                   self,
        .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
        .                   reg: ty::Region<'tcx>,
        .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
        .                   self.mk_ty_infer(TyVar(v))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
      882 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
        .               }
        .           
        .               #[inline]
        .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
        .                   self.mk_ty_infer(IntVar(v))
        .               }
        .           
        .               #[inline]
-- line 2428 ----------------------------------------
-- line 2445 ----------------------------------------
        .                   self.mk_ty(Param(ParamTy { index, name }))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
        .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
        .               }
        .           
    4,711 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
    2,847 ( 0.00%)          match param.kind {
        .                       GenericParamDefKind::Lifetime => {
    1,554 ( 0.00%)                  self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
        .                       }
      828 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
        .                       GenericParamDefKind::Const { .. } => {
        .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
        .                       }
        .                   }
    4,711 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(Opaque(def_id, substs))
        .               }
        .           
      252 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
      252 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
      504 ( 0.00%)      }
        .           
        4 ( 0.00%)      pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
       12 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Deref)
        8 ( 0.00%)      }
        .           
        7 ( 0.00%)      pub fn mk_place_downcast(
        .                   self,
        .                   place: Place<'tcx>,
        .                   adt_def: &'tcx AdtDef,
        .                   variant_index: VariantIdx,
        .               ) -> Place<'tcx> {
        7 ( 0.00%)          self.mk_place_elem(
        .                       place,
       14 ( 0.00%)              PlaceElem::Downcast(Some(adt_def.variants[variant_index].name), variant_index),
        .                   )
       14 ( 0.00%)      }
        .           
        .               pub fn mk_place_downcast_unnamed(
        .                   self,
        .                   place: Place<'tcx>,
        .                   variant_index: VariantIdx,
        .               ) -> Place<'tcx> {
        .                   self.mk_place_elem(place, PlaceElem::Downcast(None, variant_index))
        .               }
-- line 2496 ----------------------------------------
-- line 2497 ----------------------------------------
        .           
        .               pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
        .                   self.mk_place_elem(place, PlaceElem::Index(index))
        .               }
        .           
        .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
        .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
        .               /// flight.
    2,367 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
        .                   let mut projection = place.projection.to_vec();
        .                   projection.push(elem);
        .           
        .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
    2,630 ( 0.00%)      }
        .           
    2,891 ( 0.00%)      pub fn intern_poly_existential_predicates(
        .                   self,
        .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
        .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
      413 ( 0.00%)          assert!(!eps.is_empty());
        .                   assert!(
        .                       eps.array_windows()
    1,325 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
        .                               != Ordering::Greater)
        .                   );
    1,652 ( 0.00%)          self._intern_poly_existential_predicates(eps)
    3,304 ( 0.00%)      }
        .           
        .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
        .                   // FIXME consider asking the input slice to be sorted to avoid
        .                   // re-interning permutations, in which case that would be asserted
        .                   // here.
    4,191 ( 0.00%)          if preds.is_empty() {
        .                       // The macro-generated method below asserts we don't intern an empty slice.
        .                       List::empty()
        .                   } else {
      687 ( 0.00%)              self._intern_predicates(preds)
        .                   }
    7,008 ( 0.00%)      }
        .           
        .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
   40,701 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
      254 ( 0.00%)      }
        .           
        .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
  387,120 ( 0.02%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
   31,854 ( 0.00%)      }
        .           
        .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
        .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
        .               }
        .           
        .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
   11,706 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
    5,784 ( 0.00%)      }
        .           
        .               pub fn intern_canonical_var_infos(
        .                   self,
        .                   ts: &[CanonicalVarInfo<'tcx>],
        .               ) -> CanonicalVarInfos<'tcx> {
   25,584 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
      332 ( 0.00%)      }
        .           
        .               pub fn intern_bound_variable_kinds(
        .                   self,
        .                   ts: &[ty::BoundVariableKind],
        .               ) -> &'tcx List<ty::BoundVariableKind> {
    4,704 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
    6,228 ( 0.00%)      }
        .           
        .               pub fn mk_fn_sig<I>(
        .                   self,
        .                   inputs: I,
        .                   output: I::Item,
        .                   c_variadic: bool,
        .                   unsafety: hir::Unsafety,
        .                   abi: abi::Abi,
        .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
        .               where
        .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
        .               {
        .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
    2,181 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
      417 ( 0.00%)              c_variadic,
      565 ( 0.00%)              unsafety,
      538 ( 0.00%)              abi,
      300 ( 0.00%)          })
        .               }
        .           
        .               pub fn mk_poly_existential_predicates<
        .                   I: InternAs<
        .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
        .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
        .                   >,
        .               >(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
    1,809 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
        .               }
        .           
        .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
        8 ( 0.00%)          iter.intern_with(|xs| self.intern_predicates(xs))
        .               }
        .           
        .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
    4,313 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
        .               }
        .           
        .               pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
  275,512 ( 0.02%)          iter.intern_with(|xs| self.intern_substs(xs))
        .               }
        .           
        .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
    1,570 ( 0.00%)          iter.intern_with(|xs| self.intern_place_elems(xs))
        .               }
        .           
   21,526 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
        .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
   43,052 ( 0.00%)      }
        .           
        .               pub fn mk_bound_variable_kinds<
        .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
        .               >(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
   22,846 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
        .               }
        .           
        .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
        .               /// It stops at `bound` and just returns it if reached.
  187,544 ( 0.01%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
  187,544 ( 0.01%)          let hir = self.hir();
        .                   loop {
  497,145 ( 0.03%)              if id == bound {
        .                           return bound;
        .                       }
        .           
  698,007 ( 0.04%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
        .                           return id;
        .                       }
        .                       let next = hir.get_parent_node(id);
  416,769 ( 0.03%)              if next == id {
        .                           bug!("lint traversal reached the root of the crate");
        .                       }
        .                       id = next;
        .                   }
  267,920 ( 0.02%)      }
        .           
    4,648 ( 0.00%)      pub fn lint_level_at_node(
        .                   self,
        .                   lint: &'static Lint,
        .                   mut id: hir::HirId,
        .               ) -> (Level, LintLevelSource) {
        .                   let sets = self.lint_levels(());
        .                   loop {
   24,181 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
        .                           return pair;
        .                       }
    1,783 ( 0.00%)              let next = self.hir().get_parent_node(id);
    5,349 ( 0.00%)              if next == id {
        .                           bug!("lint traversal reached the root of the crate");
        .                       }
        .                       id = next;
        .                   }
    4,648 ( 0.00%)      }
        .           
      224 ( 0.00%)      pub fn struct_span_lint_hir(
        .                   self,
        .                   lint: &'static Lint,
        .                   hir_id: HirId,
        .                   span: impl Into<MultiSpan>,
        .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
        .               ) {
      961 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
      310 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
      128 ( 0.00%)      }
        .           
        .               pub fn struct_lint_node(
        .                   self,
        .                   lint: &'static Lint,
        .                   id: HirId,
        .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
        .               ) {
        .                   let (level, src) = self.lint_level_at_node(lint, id);
        .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
        .               }
        .           
    9,464 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
    2,704 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
        .                   let candidates = map.get(&id.local_id)?;
    2,704 ( 0.00%)          Some(&*candidates)
   10,816 ( 0.00%)      }
        .           
   10,829 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
        .                   debug!(?id, "named_region");
        .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
   13,923 ( 0.00%)      }
        .           
      729 ( 0.00%)      pub fn is_late_bound(self, id: HirId) -> bool {
        .                   self.is_late_bound_map(id.owner)
       58 ( 0.00%)              .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
      648 ( 0.00%)      }
        .           
    6,027 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
        .                   self.object_lifetime_defaults_map(id.owner)
    7,749 ( 0.00%)      }
        .           
    4,212 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
        .                   self.mk_bound_variable_kinds(
        .                       self.late_bound_vars_map(id.owner)
        .                           .and_then(|map| map.get(&id.local_id).cloned())
        .                           .unwrap_or_else(|| {
        .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
        .                           })
        .                           .iter(),
        .                   )
    4,212 ( 0.00%)      }
        .           
        .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
        .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
        .               }
        .           
        .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
        .               /// feature gates
      580 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
       58 ( 0.00%)          if self.is_const_fn_raw(def_id) {
       17 ( 0.00%)              match self.lookup_const_stability(def_id) {
       24 ( 0.00%)                  Some(stability) if stability.level.is_unstable() => {
        .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
        .                               // corresponding feature gate.
        6 ( 0.00%)                      self.features()
        .                                   .declared_lib_features
        .                                   .iter()
        .                                   .any(|&(sym, _)| sym == stability.feature)
        .                           }
        .                           // functions without const stability are either stable user written
        .                           // const fn or the user is using feature gates and we thus don't
        .                           // care what they do
        .                           _ => true,
        .                       }
        .                   } else {
        .                       false
        .                   }
      522 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TyCtxtAt<'tcx> {
        .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
        .               #[track_caller]
        .               pub fn ty_error(self) -> Ty<'tcx> {
        .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
        .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
        .           }
        .           
        .           impl<I, T, R, E> InternAs<[T], R> for I
        .           where
        .               E: InternIteratorElement<T, R>,
        .               I: Iterator<Item = E>,
        .           {
        .               type Output = E::Output;
   97,144 ( 0.01%)      fn intern_with<F>(self, f: F) -> Self::Output
        .               where
        .                   F: FnOnce(&[T]) -> R,
        .               {
  924,591 ( 0.06%)          E::intern_with(self, f)
  100,287 ( 0.01%)      }
        .           }
        .           
        .           pub trait InternIteratorElement<T, R>: Sized {
        .               type Output;
        .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
        .           }
        .           
        .           impl<T, R> InternIteratorElement<T, R> for T {
        .               type Output = R;
  119,667 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
        .                   mut iter: I,
        .                   f: F,
        .               ) -> Self::Output {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
        .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
        .                   // `assert`.
  184,267 ( 0.01%)          match iter.size_hint() {
        .                       (0, Some(0)) => {
        3 ( 0.00%)                  assert!(iter.next().is_none());
        .                           f(&[])
        .                       }
        .                       (1, Some(1)) => {
        .                           let t0 = iter.next().unwrap();
       12 ( 0.00%)                  assert!(iter.next().is_none());
   26,151 ( 0.00%)                  f(&[t0])
        .                       }
        .                       (2, Some(2)) => {
        .                           let t0 = iter.next().unwrap();
        .                           let t1 = iter.next().unwrap();
      197 ( 0.00%)                  assert!(iter.next().is_none());
   23,036 ( 0.00%)                  f(&[t0, t1])
        .                       }
      956 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
        .                   }
  126,432 ( 0.01%)      }
        .           }
        .           
        .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
        .           where
        .               T: Clone + 'a,
        .           {
        .               type Output = R;
    2,903 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
        .                   // This code isn't hot.
      120 ( 0.00%)          f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
    2,434 ( 0.00%)      }
        .           }
        .           
        .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
        .               type Output = Result<R, E>;
  310,194 ( 0.02%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
        .                   mut iter: I,
        .                   f: F,
        .               ) -> Self::Output {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
        .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
        .                   // `assert`, unless a failure happens first, in which case the result
        .                   // will be an error anyway.
  241,516 ( 0.01%)          Ok(match iter.size_hint() {
        .                       (0, Some(0)) => {
        .                           assert!(iter.next().is_none());
        .                           f(&[])
        .                       }
        .                       (1, Some(1)) => {
      489 ( 0.00%)                  let t0 = iter.next().unwrap()?;
        .                           assert!(iter.next().is_none());
   17,903 ( 0.00%)                  f(&[t0])
        .                       }
        .                       (2, Some(2)) => {
      826 ( 0.00%)                  let t0 = iter.next().unwrap()?;
      826 ( 0.00%)                  let t1 = iter.next().unwrap()?;
      393 ( 0.00%)                  assert!(iter.next().is_none());
   21,896 ( 0.00%)                  f(&[t0, t1])
        .                       }
    7,962 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
        .                   })
  350,451 ( 0.02%)      }
        .           }
        .           
        .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
        .           // won't work for us.
        .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
  116,704 ( 0.01%)      t as *const () == u as *const ()
        .           }
        .           
        .           pub fn provide(providers: &mut ty::query::Providers) {
        2 ( 0.00%)      providers.in_scope_traits_map =
        .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
        3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
        2 ( 0.00%)      providers.module_reexports =
        .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
        2 ( 0.00%)      providers.crate_name = |tcx, id| {
        1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
        1 ( 0.00%)          tcx.crate_name
        .               };
        2 ( 0.00%)      providers.maybe_unused_trait_import =
        .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
        2 ( 0.00%)      providers.maybe_unused_extern_crates =
        .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
        2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
        .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
        .               };
        .           
       11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
        2 ( 0.00%)      providers.lookup_const_stability =
        9 ( 0.00%)          |tcx, id| tcx.stability().local_const_stability(id.expect_local());
        2 ( 0.00%)      providers.lookup_deprecation_entry =
    4,488 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
        2 ( 0.00%)      providers.extern_mod_stmt_cnum =
        .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
        3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
        3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
        2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
        .                   assert_eq!(cnum, LOCAL_CRATE);
        .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
        .               };
        2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
        .                   assert_eq!(cnum, LOCAL_CRATE);
        .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
        .               };
        2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
        1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
        .                   // We want to check if the panic handler was defined in this crate
        3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
        .               };
        .           }

  936,274 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs
--------------------------------------------------------------------------------
Ir               

-- line 8 ----------------------------------------
      .           };
      .           use rustc_ast_pretty::pprust::token_to_string;
      .           use rustc_data_structures::fx::FxHashMap;
      .           use rustc_errors::PResult;
      .           use rustc_span::Span;
      .           
      .           impl<'a> StringReader<'a> {
      .               pub(super) fn into_token_trees(self) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
    133 ( 0.00%)          let mut tt_reader = TokenTreesReader {
      .                       string_reader: self,
      7 ( 0.00%)              token: Token::dummy(),
      .                       open_braces: Vec::new(),
      .                       unmatched_braces: Vec::new(),
      .                       matching_delim_spans: Vec::new(),
      .                       last_unclosed_found_span: None,
      .                       last_delim_empty_block_spans: FxHashMap::default(),
      .                       matching_block_spans: Vec::new(),
      .                   };
      7 ( 0.00%)          let res = tt_reader.parse_all_token_trees();
     42 ( 0.00%)          (res, tt_reader.unmatched_braces)
      .               }
      .           }
      .           
      .           struct TokenTreesReader<'a> {
      .               string_reader: StringReader<'a>,
      .               token: Token,
      .               /// Stack of open delimiters and their spans. Used for error message.
      .               open_braces: Vec<(token::DelimToken, Span)>,
-- line 35 ----------------------------------------
-- line 43 ----------------------------------------
      .               last_delim_empty_block_spans: FxHashMap<token::DelimToken, Span>,
      .               /// Collect the spans of braces (Open, Close). Used only
      .               /// for detecting if blocks are empty and only braces.
      .               matching_block_spans: Vec<(Span, Span)>,
      .           }
      .           
      .           impl<'a> TokenTreesReader<'a> {
      .               // Parse a stream of tokens into a list of `TokenTree`s, up to an `Eof`.
     56 ( 0.00%)      fn parse_all_token_trees(&mut self) -> PResult<'a, TokenStream> {
      .                   let mut buf = TokenStreamBuilder::default();
      .           
      .                   self.bump();
  3,504 ( 0.00%)          while self.token != token::Eof {
 13,960 ( 0.00%)              buf.push(self.parse_token_tree()?);
      .                   }
      .           
      .                   Ok(buf.into_token_stream())
     63 ( 0.00%)      }
      .           
      .               // Parse a stream of tokens into a list of `TokenTree`s, up to a `CloseDelim`.
      .               fn parse_token_trees_until_close_delim(&mut self) -> TokenStream {
      .                   let mut buf = TokenStreamBuilder::default();
      .                   loop {
 52,678 ( 0.00%)              if let token::CloseDelim(..) = self.token.kind {
      .                           return buf.into_token_stream();
      .                       }
      .           
114,895 ( 0.01%)              match self.parse_token_tree() {
206,811 ( 0.01%)                  Ok(tree) => buf.push(tree),
      .                           Err(mut e) => {
      .                               e.emit();
      .                               return buf.into_token_stream();
      .                           }
      .                       }
      .                   }
      .               }
      .           
222,516 ( 0.01%)      fn parse_token_tree(&mut self) -> PResult<'a, TreeAndSpacing> {
 49,448 ( 0.00%)          let sm = self.string_reader.sess.source_map();
      .           
209,076 ( 0.01%)          match self.token.kind {
      .                       token::Eof => {
      .                           let msg = "this file contains an unclosed delimiter";
      .                           let mut err =
      .                               self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, msg);
      .                           for &(_, sp) in &self.open_braces {
      .                               err.span_label(sp, "unclosed delimiter");
      .                               self.unmatched_braces.push(UnmatchedBrace {
      .                                   expected_delim: token::DelimToken::Brace,
-- line 91 ----------------------------------------
-- line 113 ----------------------------------------
      .                                   err.span_label(
      .                                       *close_sp,
      .                                       "...as it matches this but it has different indentation",
      .                                   );
      .                               }
      .                           }
      .                           Err(err)
      .                       }
  3,360 ( 0.00%)              token::OpenDelim(delim) => {
      .                           // The span for beginning of the delimited section
  3,360 ( 0.00%)                  let pre_span = self.token.span;
      .           
      .                           // Parse the open delimiter.
 23,520 ( 0.00%)                  self.open_braces.push((delim, self.token.span));
      .                           self.bump();
      .           
      .                           // Parse the token trees within the delimiters.
      .                           // We stop at any delimiter so we can try to recover if the user
      .                           // uses an incorrect delimiter.
  3,360 ( 0.00%)                  let tts = self.parse_token_trees_until_close_delim();
      .           
      .                           // Expand to cover the entire delimited token tree
 16,800 ( 0.00%)                  let delim_span = DelimSpan::from_pair(pre_span, self.token.span);
      .           
  6,720 ( 0.00%)                  match self.token.kind {
      .                               // Correct delimiter.
  6,720 ( 0.00%)                      token::CloseDelim(d) if d == delim => {
      .                                   let (open_brace, open_brace_span) = self.open_braces.pop().unwrap();
  6,720 ( 0.00%)                          let close_brace_span = self.token.span;
      .           
 10,080 ( 0.00%)                          if tts.is_empty() {
  1,860 ( 0.00%)                              let empty_block_span = open_brace_span.to(close_brace_span);
  2,480 ( 0.00%)                              if !sm.is_multiline(empty_block_span) {
      .                                           // Only track if the block is in the form of `{}`, otherwise it is
      .                                           // likely that it was written on purpose.
      .                                           self.last_delim_empty_block_spans.insert(delim, empty_block_span);
      .                                       }
      .                                   }
      .           
      .                                   //only add braces
 13,440 ( 0.00%)                          if let (DelimToken::Brace, DelimToken::Brace) = (open_brace, delim) {
      .                                       self.matching_block_spans.push((open_brace_span, close_brace_span));
      .                                   }
      .           
  3,360 ( 0.00%)                          if self.open_braces.is_empty() {
      .                                       // Clear up these spans to avoid suggesting them as we've found
      .                                       // properly matched delimiters so far for an entire block.
      .                                       self.matching_delim_spans.clear();
      .                                   } else {
      .                                       self.matching_delim_spans.push((
      .                                           open_brace,
      .                                           open_brace_span,
      .                                           close_brace_span,
-- line 165 ----------------------------------------
-- line 218 ----------------------------------------
      .                               token::Eof => {
      .                                   // Silently recover, the EOF token will be seen again
      .                                   // and an error emitted then. Thus we don't pop from
      .                                   // self.open_braces here.
      .                               }
      .                               _ => {}
      .                           }
      .           
 23,520 ( 0.00%)                  Ok(TokenTree::Delimited(delim_span, delim, tts).into())
      .                       }
      .                       token::CloseDelim(delim) => {
      .                           // An unexpected closing delimiter (i.e., there is no
      .                           // matching opening delimiter).
      .                           let token_str = token_to_string(&self.token);
      .                           let msg = format!("unexpected closing delimiter: `{}`", token_str);
      .                           let mut err =
      .                               self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, &msg);
-- line 234 ----------------------------------------
-- line 253 ----------------------------------------
      .                                   err.span_label(parent.1, "...matches this closing brace");
      .                               }
      .                           }
      .           
      .                           err.span_label(self.token.span, "unexpected closing delimiter");
      .                           Err(err)
      .                       }
      .                       _ => {
106,820 ( 0.01%)                  let tt = TokenTree::Token(self.token.take());
      .                           let mut spacing = self.bump();
 42,728 ( 0.00%)                  if !self.token.is_op() {
      .                               spacing = Alone;
      .                           }
128,184 ( 0.01%)                  Ok((tt, spacing))
      .                       }
      .                   }
197,792 ( 0.01%)      }
      .           
      .               fn bump(&mut self) -> Spacing {
235,998 ( 0.01%)          let (spacing, token) = self.string_reader.next_token();
123,683 ( 0.01%)          self.token = token;
      .                   spacing
      .               }
      .           }
      .           
  3,360 ( 0.00%)  #[derive(Default)]
      .           struct TokenStreamBuilder {
      .               buf: Vec<TreeAndSpacing>,
      .           }
      .           
      .           impl TokenStreamBuilder {
321,412 ( 0.02%)      fn push(&mut self, (tree, joint): TreeAndSpacing) {
152,531 ( 0.01%)          if let Some((TokenTree::Token(prev_token), Joint)) = self.buf.last() {
 11,460 ( 0.00%)              if let TokenTree::Token(token) = &tree {
 22,914 ( 0.00%)                  if let Some(glued) = prev_token.glue(token) {
      .                               self.buf.pop();
 17,172 ( 0.00%)                      self.buf.push((TokenTree::Token(glued), joint));
      .                               return;
      .                           }
      .                       }
      .                   }
116,465 ( 0.01%)          self.buf.push((tree, joint))
197,792 ( 0.01%)      }
      .           
      .               fn into_token_stream(self) -> TokenStream {
 33,663 ( 0.00%)          TokenStream::new(self.buf)
      .               }
      .           }

 86,254 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 97 ----------------------------------------
      .           
      .               /// If true, the capture is behind a reference.
      .               by_ref: bool,
      .           }
      .           
      .           const DEREF_PROJECTION: &[PlaceElem<'_>; 1] = &[ProjectionElem::Deref];
      .           
      .           pub fn provide(providers: &mut Providers) {
      4 ( 0.00%)      *providers = Providers {
      .                   mir_borrowck: |tcx, did| {
    280 ( 0.00%)              if let Some(def) = ty::WithOptConstParam::try_lookup(did, tcx) {
      .                           tcx.mir_borrowck_const_arg(def)
      .                       } else {
  1,120 ( 0.00%)                  mir_borrowck(tcx, ty::WithOptConstParam::unknown(did))
      .                       }
      .                   },
      .                   mir_borrowck_const_arg: |tcx, (did, param_did)| {
      .                       mir_borrowck(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })
      .                   },
      .                   ..*providers
      .               };
      1 ( 0.00%)  }
      .           
  2,800 ( 0.00%)  fn mir_borrowck<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               def: ty::WithOptConstParam<LocalDefId>,
      .           ) -> &'tcx BorrowCheckResult<'tcx> {
      .               let (input_body, promoted) = tcx.mir_promoted(def);
      .               debug!("run query mir_borrowck: {}", tcx.def_path_str(def.did.to_def_id()));
      .           
  3,640 ( 0.00%)      let opt_closure_req = tcx.infer_ctxt().with_opaque_type_inference(def.did).enter(|infcx| {
      .                   let input_body: &Body<'_> = &input_body.borrow();
      .                   let promoted: &IndexVec<_, _> = &promoted.borrow();
  3,920 ( 0.00%)          do_mir_borrowck(&infcx, input_body, promoted, false).0
  1,120 ( 0.00%)      });
      .               debug!("mir_borrowck done");
      .           
    280 ( 0.00%)      tcx.arena.alloc(opt_closure_req)
  2,240 ( 0.00%)  }
      .           
      .           /// Perform the actual borrow checking.
      .           ///
      .           /// If `return_body_with_facts` is true, then return the body with non-erased
      .           /// region ids on which the borrow checking was performed together with Polonius
      .           /// facts.
  6,160 ( 0.00%)  #[instrument(skip(infcx, input_body, input_promoted), level = "debug")]
      .           fn do_mir_borrowck<'a, 'tcx>(
      .               infcx: &InferCtxt<'a, 'tcx>,
      .               input_body: &Body<'tcx>,
      .               input_promoted: &IndexVec<Promoted, Body<'tcx>>,
      .               return_body_with_facts: bool,
      .           ) -> (BorrowCheckResult<'tcx>, Option<Box<BodyWithBorrowckFacts<'tcx>>>) {
  2,800 ( 0.00%)      let def = input_body.source.with_opt_param().as_local().unwrap();
      .           
      .               debug!(?def);
      .           
    560 ( 0.00%)      let tcx = infcx.tcx;
      .               let param_env = tcx.param_env(def.did);
    280 ( 0.00%)      let id = tcx.hir().local_def_id_to_hir_id(def.did);
      .           
    560 ( 0.00%)      let mut local_names = IndexVec::from_elem(None, &input_body.local_decls);
      .               for var_debug_info in &input_body.var_debug_info {
  4,692 ( 0.00%)          if let VarDebugInfoContents::Place(place) = var_debug_info.value {
  2,559 ( 0.00%)              if let Some(local) = place.as_local() {
  3,786 ( 0.00%)                  if let Some(prev_name) = local_names[local] {
      .                               if var_debug_info.name != prev_name {
      .                                   span_bug!(
      .                                       var_debug_info.source_info.span,
      .                                       "local {:?} has many names (`{}` vs `{}`)",
      .                                       local,
      .                                       prev_name,
      .                                       var_debug_info.name
      .                                   );
      .                               }
      .                           }
  3,786 ( 0.00%)                  local_names[local] = Some(var_debug_info.name);
      .                       }
      .                   }
      .               }
      .           
      .               // Gather the upvars of a closure, if any.
  1,120 ( 0.00%)      let tables = tcx.typeck_opt_const_arg(def);
    560 ( 0.00%)      if let Some(ErrorReported) = tables.tainted_by_errors {
      .                   infcx.set_tainted_by_errors();
      .               }
  1,120 ( 0.00%)      let upvars: Vec<_> = tables
      .                   .closure_min_captures_flattened(def.did.to_def_id())
      .                   .map(|captured_place| {
      .                       let capture = captured_place.info.capture_kind;
     35 ( 0.00%)              let by_ref = match capture {
      .                           ty::UpvarCapture::ByValue => false,
      .                           ty::UpvarCapture::ByRef(..) => true,
      .                       };
      .                       Upvar { place: captured_place.clone(), by_ref }
      .                   })
      .                   .collect();
      .           
      .               // Replace all regions with fresh inference variables. This
      .               // requires first making our own copy of the MIR. This copy will
      .               // be modified (in place) to contain non-lexical lifetimes. It
      .               // will have a lifetime tied to the inference context.
    560 ( 0.00%)      let mut body_owned = input_body.clone();
      .               let mut promoted = input_promoted.clone();
      .               let free_regions =
    840 ( 0.00%)          nll::replace_regions_in_mir(infcx, param_env, &mut body_owned, &mut promoted);
      .               let body = &body_owned; // no further changes
      .           
    280 ( 0.00%)      let location_table_owned = LocationTable::new(body);
      .               let location_table = &location_table_owned;
      .           
      .               let mut errors_buffer = Vec::new();
    840 ( 0.00%)      let (move_data, move_errors): (MoveData<'tcx>, Vec<(Place<'tcx>, MoveError<'tcx>)>) =
  1,960 ( 0.00%)          match MoveData::gather_moves(&body, tcx, param_env) {
  1,680 ( 0.00%)              Ok(move_data) => (move_data, Vec::new()),
      .                       Err((move_data, move_errors)) => (move_data, move_errors),
      .                   };
      .               let promoted_errors = promoted
      .                   .iter_enumerated()
  1,770 ( 0.00%)          .map(|(idx, body)| (idx, MoveData::gather_moves(&body, tcx, param_env)));
      .           
  1,680 ( 0.00%)      let mdpe = MoveDataParamEnv { move_data, param_env };
      .           
  2,240 ( 0.00%)      let mut flow_inits = MaybeInitializedPlaces::new(tcx, &body, &mdpe)
    280 ( 0.00%)          .into_engine(tcx, &body)
      .                   .pass_name("borrowck")
      .                   .iterate_to_fixpoint()
      .                   .into_results_cursor(&body);
      .           
  3,360 ( 0.00%)      let locals_are_invalidated_at_exit = tcx.hir().body_owner_kind(id).is_fn_or_closure();
      .               let borrow_set =
  2,800 ( 0.00%)          Rc::new(BorrowSet::build(tcx, body, locals_are_invalidated_at_exit, &mdpe.move_data));
      .           
  1,400 ( 0.00%)      let use_polonius = return_body_with_facts || infcx.tcx.sess.opts.debugging_opts.polonius;
      .           
      .               // Compute non-lexical lifetimes.
      .               let nll::NllOutput {
    840 ( 0.00%)          regioncx,
  1,120 ( 0.00%)          opaque_type_values,
    560 ( 0.00%)          polonius_input,
    840 ( 0.00%)          polonius_output,
  1,120 ( 0.00%)          opt_closure_req,
  2,800 ( 0.00%)          nll_errors,
  5,040 ( 0.00%)      } = nll::compute_regions(
      .                   infcx,
  4,480 ( 0.00%)          free_regions,
      .                   body,
      .                   &promoted,
      .                   location_table,
      .                   param_env,
      .                   &mut flow_inits,
      .                   &mdpe.move_data,
      .                   &borrow_set,
      .                   &upvars,
      .                   use_polonius,
      .               );
      .           
      .               // Dump MIR results into a file, if that is enabled. This let us
      .               // write unit-tests, as well as helping with debugging.
    840 ( 0.00%)      nll::dump_mir_results(infcx, &body, &regioncx, &opt_closure_req);
      .           
      .               // We also have a `#[rustc_regions]` annotation that causes us to dump
      .               // information.
    560 ( 0.00%)      nll::dump_annotation(
      .                   infcx,
      .                   &body,
      .                   &regioncx,
      .                   &opt_closure_req,
      .                   &opaque_type_values,
      .                   &mut errors_buffer,
      .               );
      .           
      .               // The various `flow_*` structures can be large. We drop `flow_inits` here
      .               // so it doesn't overlap with the others below. This reduces peak memory
      .               // usage significantly on some benchmarks.
  4,480 ( 0.00%)      drop(flow_inits);
      .           
    280 ( 0.00%)      let regioncx = Rc::new(regioncx);
      .           
  1,680 ( 0.00%)      let flow_borrows = Borrows::new(tcx, body, &regioncx, &borrow_set)
    280 ( 0.00%)          .into_engine(tcx, body)
      .                   .pass_name("borrowck")
      .                   .iterate_to_fixpoint();
  1,680 ( 0.00%)      let flow_uninits = MaybeUninitializedPlaces::new(tcx, body, &mdpe)
    280 ( 0.00%)          .into_engine(tcx, body)
      .                   .pass_name("borrowck")
      .                   .iterate_to_fixpoint();
  1,680 ( 0.00%)      let flow_ever_inits = EverInitializedPlaces::new(tcx, body, &mdpe)
    280 ( 0.00%)          .into_engine(tcx, body)
      .                   .pass_name("borrowck")
      .                   .iterate_to_fixpoint();
      .           
    716 ( 0.00%)      let movable_generator = !matches!(
  1,836 ( 0.00%)          tcx.hir().get(id),
      .                   Node::Expr(&hir::Expr {
      .                       kind: hir::ExprKind::Closure(.., Some(hir::Movability::Static)),
      .                       ..
      .                   })
      .               );
      .           
  1,239 ( 0.00%)      for (idx, move_data_results) in promoted_errors {
      .                   let promoted_body = &promoted[idx];
      .           
    354 ( 0.00%)          if let Err((move_data, move_errors)) = move_data_results {
      .                       let mut promoted_mbcx = MirBorrowckCtxt {
      .                           infcx,
      .                           param_env,
      .                           body: promoted_body,
      .                           move_data: &move_data,
      .                           location_table, // no need to create a real one for the promoted, it is not used
      .                           movable_generator,
      .                           fn_self_span_reported: Default::default(),
-- line 307 ----------------------------------------
-- line 325 ----------------------------------------
      .                       };
      .                       promoted_mbcx.report_move_errors(move_errors);
      .                       errors_buffer = promoted_mbcx.errors_buffer;
      .                   };
      .               }
      .           
      .               let dominators = body.dominators();
      .           
 12,600 ( 0.00%)      let mut mbcx = MirBorrowckCtxt {
      .                   infcx,
      .                   param_env,
      .                   body,
      .                   move_data: &mdpe.move_data,
      .                   location_table,
      .                   movable_generator,
      .                   locals_are_invalidated_at_exit,
      .                   fn_self_span_reported: Default::default(),
      .                   access_place_error_reported: Default::default(),
      .                   reservation_error_reported: Default::default(),
      .                   reservation_warnings: Default::default(),
      .                   move_error_reported: BTreeMap::new(),
      .                   uninitialized_error_reported: Default::default(),
  1,120 ( 0.00%)          errors_buffer,
    280 ( 0.00%)          regioncx: Rc::clone(&regioncx),
      .                   used_mut: Default::default(),
      .                   used_mut_upvars: SmallVec::new(),
    280 ( 0.00%)          borrow_set: Rc::clone(&borrow_set),
  1,680 ( 0.00%)          dominators,
  1,120 ( 0.00%)          upvars,
  1,120 ( 0.00%)          local_names,
      .                   region_names: RefCell::default(),
      .                   next_region_name: RefCell::new(1),
      .                   polonius_output,
      .               };
      .           
      .               // Compute and report region errors, if any.
    840 ( 0.00%)      mbcx.report_region_errors(nll_errors);
      .           
      .               let results = BorrowckResults {
  1,680 ( 0.00%)          ever_inits: flow_ever_inits,
  2,240 ( 0.00%)          uninits: flow_uninits,
  3,080 ( 0.00%)          borrows: flow_borrows,
      .               };
      .           
  1,680 ( 0.00%)      mbcx.report_move_errors(move_errors);
      .           
    280 ( 0.00%)      rustc_mir_dataflow::visit_results(
      .                   body,
    280 ( 0.00%)          traversal::reverse_postorder(body).map(|(bb, _)| bb),
      .                   &results,
      .                   &mut mbcx,
      .               );
      .           
      .               // Convert any reservation warnings into lints.
      .               let reservation_warnings = mem::take(&mut mbcx.reservation_warnings);
      .               for (_, (place, span, location, bk, borrow)) in reservation_warnings {
      .                   let mut initial_diag = mbcx.report_conflicting_borrow(location, (place, span), bk, &borrow);
-- line 381 ----------------------------------------
-- line 406 ----------------------------------------
      .               // For each non-user used mutable variable, check if it's been assigned from
      .               // a user-declared local. If so, then put that local into the used_mut set.
      .               // Note that this set is expected to be small - only upvars from closures
      .               // would have a chance of erroneously adding non-user-defined mutable vars
      .               // to the set.
      .               let temporary_used_locals: FxHashSet<Local> = mbcx
      .                   .used_mut
      .                   .iter()
    280 ( 0.00%)          .filter(|&local| !mbcx.body.local_decls[*local].is_user_variable())
      .                   .cloned()
      .                   .collect();
      .               // For the remaining unused locals that are marked as mutable, we avoid linting any that
      .               // were never initialized. These locals may have been removed as unreachable code; or will be
      .               // linted as unused variables.
      .               let unused_mut_locals =
    280 ( 0.00%)          mbcx.body.mut_vars_iter().filter(|local| !mbcx.used_mut.contains(local)).collect();
  1,120 ( 0.00%)      mbcx.gather_used_muts(temporary_used_locals, unused_mut_locals);
      .           
      .               debug!("mbcx.used_mut: {:?}", mbcx.used_mut);
  1,120 ( 0.00%)      let used_mut = mbcx.used_mut;
    280 ( 0.00%)      for local in mbcx.body.mut_vars_and_args_iter().filter(|local| !used_mut.contains(local)) {
     46 ( 0.00%)          let local_decl = &mbcx.body.local_decls[local];
    276 ( 0.00%)          let lint_root = match &mbcx.body.source_scopes[local_decl.source_info.scope].local_data {
      .                       ClearCrossCrate::Set(data) => data.lint_root,
      .                       _ => continue,
      .                   };
      .           
      .                   // Skip over locals that begin with an underscore or have no name
    138 ( 0.00%)          match mbcx.local_names[local] {
      .                       Some(name) => {
      .                           if name.as_str().starts_with('_') {
      .                               continue;
      .                           }
      .                       }
      .                       None => continue,
      .                   }
      .           
-- line 442 ----------------------------------------
-- line 455 ----------------------------------------
      .                               String::new(),
      .                               Applicability::MachineApplicable,
      .                           )
      .                           .emit();
      .                   })
      .               }
      .           
      .               // Buffer any move errors that we collected and de-duplicated.
  2,520 ( 0.00%)      for (_, (_, diag)) in mbcx.move_error_reported {
      .                   diag.buffer(&mut mbcx.errors_buffer);
      .               }
      .           
    280 ( 0.00%)      if !mbcx.errors_buffer.is_empty() {
      .                   mbcx.errors_buffer.sort_by_key(|diag| diag.sort_span);
      .           
      .                   for diag in mbcx.errors_buffer.drain(..) {
      .                       mbcx.infcx.tcx.sess.diagnostic().emit_diagnostic(&diag);
      .                   }
      .               }
      .           
      .               let result = BorrowCheckResult {
  1,120 ( 0.00%)          concrete_opaque_types: opaque_type_values,
  1,400 ( 0.00%)          closure_requirements: opt_closure_req,
  1,680 ( 0.00%)          used_mut_upvars: mbcx.used_mut_upvars,
      .               };
      .           
    560 ( 0.00%)      let body_with_facts = if return_body_with_facts {
      .                   let output_facts = mbcx.polonius_output.expect("Polonius output was not computed");
      .                   Some(Box::new(BodyWithBorrowckFacts {
      .                       body: body_owned,
      .                       input_facts: *polonius_input.expect("Polonius input facts were not generated"),
      .                       output_facts,
      .                       location_table: location_table_owned,
      .                   }))
      .               } else {
      .                   None
      .               };
      .           
      .               debug!("do_mir_borrowck: result = {:#?}", result);
      .           
  3,920 ( 0.00%)      (result, body_with_facts)
  3,360 ( 0.00%)  }
      .           
      .           /// A `Body` with information computed by the borrow checker. This struct is
      .           /// intended to be consumed by compiler consumers.
      .           ///
      .           /// We need to include the MIR body here because the region identifiers must
      .           /// match the ones in the Polonius facts.
      .           pub struct BodyWithBorrowckFacts<'tcx> {
      .               /// A mir body that contains region identifiers.
-- line 504 ----------------------------------------
-- line 608 ----------------------------------------
      .           // Check that:
      .           // 1. assignments are always made to mutable locations (FIXME: does that still really go here?)
      .           // 2. loans made in overlapping scopes do not conflict
      .           // 3. assignments do not affect things loaned out as immutable
      .           // 4. moves do not affect things loaned out in any way
      .           impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx> {
      .               type FlowState = Flows<'cx, 'tcx>;
      .           
222,021 ( 0.01%)      fn visit_statement_before_primary_effect(
      .                   &mut self,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .                   stmt: &'cx Statement<'tcx>,
      .                   location: Location,
      .               ) {
      .                   debug!("MirBorrowckCtxt::process_statement({:?}, {:?}): {:?}", location, stmt, flow_state);
      .                   let span = stmt.source_info.span;
      .           
      .                   self.check_activations(location, span, flow_state);
      .           
123,345 ( 0.01%)          match &stmt.kind {
 15,432 ( 0.00%)              StatementKind::Assign(box (lhs, ref rhs)) => {
      .                           self.consume_rvalue(location, (rhs, span), flow_state);
      .           
 30,864 ( 0.00%)                  self.mutate_place(location, (*lhs, span), Shallow(None), flow_state);
      .                       }
    718 ( 0.00%)              StatementKind::FakeRead(box (_, ref place)) => {
      .                           // Read for match doesn't access any memory and is used to
      .                           // assert that a place is safe and live. So we don't have to
      .                           // do any checks here.
      .                           //
      .                           // FIXME: Remove check that the place is initialized. This is
      .                           // needed for now because matches don't have never patterns yet.
      .                           // So this is the only place we prevent
      .                           //      let x: !;
      .                           //      match x {};
      .                           // from compiling.
  2,872 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
      .                               location,
      .                               InitializationRequiringAction::Use,
  6,462 ( 0.00%)                      (place.as_ref(), span),
      .                               flow_state,
      .                           );
      .                       }
      .                       StatementKind::SetDiscriminant { place, variant_index: _ } => {
      .                           self.mutate_place(location, (**place, span), Shallow(None), flow_state);
      .                       }
      .                       StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {
      .                           ..
-- line 655 ----------------------------------------
-- line 663 ----------------------------------------
      .                       | StatementKind::Coverage(..)
      .                       | StatementKind::AscribeUserType(..)
      .                       | StatementKind::Retag { .. }
      .                       | StatementKind::StorageLive(..) => {
      .                           // `Nop`, `AscribeUserType`, `Retag`, and `StorageLive` are irrelevant
      .                           // to borrow check.
      .                       }
      .                       StatementKind::StorageDead(local) => {
 51,120 ( 0.00%)                  self.access_place(
      .                               location,
 93,720 ( 0.01%)                      (Place::from(*local), span),
      .                               (Shallow(None), Write(WriteKind::StorageDeadOrDrop)),
      .                               LocalMutationIsAllowed::Yes,
      .                               flow_state,
      .                           );
      .                       }
      .                   }
197,352 ( 0.01%)      }
      .           
 50,224 ( 0.00%)      fn visit_terminator_before_primary_effect(
      .                   &mut self,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .                   term: &'cx Terminator<'tcx>,
      .                   loc: Location,
      .               ) {
      .                   debug!("MirBorrowckCtxt::process_terminator({:?}, {:?}): {:?}", loc, term, flow_state);
      .                   let span = term.source_info.span;
      .           
      .                   self.check_activations(loc, span, flow_state);
      .           
 31,390 ( 0.00%)          match term.kind {
  3,572 ( 0.00%)              TerminatorKind::SwitchInt { ref discr, switch_ty: _, targets: _ } => {
  3,572 ( 0.00%)                  self.consume_operand(loc, (discr, span), flow_state);
      .                       }
  1,182 ( 0.00%)              TerminatorKind::Drop { place, target: _, unwind: _ } => {
      .                           debug!(
      .                               "visit_terminator_drop \
      .                                loc: {:?} term: {:?} place: {:?} span: {:?}",
      .                               loc, term, place, span
      .                           );
      .           
  3,546 ( 0.00%)                  self.access_place(
      .                               loc,
  5,319 ( 0.00%)                      (place, span),
      .                               (AccessDepth::Drop, Write(WriteKind::StorageDeadOrDrop)),
      .                               LocalMutationIsAllowed::Yes,
      .                               flow_state,
      .                           );
      .                       }
      .                       TerminatorKind::DropAndReplace {
     12 ( 0.00%)                  place: drop_place,
      6 ( 0.00%)                  value: ref new_value,
      .                           target: _,
      .                           unwind: _,
      .                       } => {
     96 ( 0.00%)                  self.mutate_place(loc, (drop_place, span), Deep, flow_state);
      .                           self.consume_operand(loc, (new_value, span), flow_state);
      .                       }
      .                       TerminatorKind::Call {
  5,907 ( 0.00%)                  ref func,
      .                           ref args,
      .                           ref destination,
      .                           cleanup: _,
      .                           from_hir_call: _,
      .                           fn_span: _,
      .                       } => {
 15,752 ( 0.00%)                  self.consume_operand(loc, (func, span), flow_state);
      .                           for arg in args {
 18,756 ( 0.00%)                      self.consume_operand(loc, (arg, span), flow_state);
      .                           }
  7,833 ( 0.00%)                  if let Some((dest, _ /*bb*/)) = *destination {
 23,112 ( 0.00%)                      self.mutate_place(loc, (dest, span), Deep, flow_state);
      .                           }
      .                       }
    912 ( 0.00%)              TerminatorKind::Assert { ref cond, expected: _, ref msg, target: _, cleanup: _ } => {
    152 ( 0.00%)                  self.consume_operand(loc, (cond, span), flow_state);
      .                           use rustc_middle::mir::AssertKind;
    397 ( 0.00%)                  if let AssertKind::BoundsCheck { ref len, ref index } = *msg {
    310 ( 0.00%)                      self.consume_operand(loc, (len, span), flow_state);
      .                               self.consume_operand(loc, (index, span), flow_state);
      .                           }
      .                       }
      .           
      .                       TerminatorKind::Yield { ref value, resume: _, resume_arg, drop: _ } => {
      .                           self.consume_operand(loc, (value, span), flow_state);
      .                           self.mutate_place(loc, (resume_arg, span), Deep, flow_state);
      .                       }
-- line 749 ----------------------------------------
-- line 790 ----------------------------------------
      .                       | TerminatorKind::Resume
      .                       | TerminatorKind::Return
      .                       | TerminatorKind::GeneratorDrop
      .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
      .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ } => {
      .                           // no data used, thus irrelevant to borrowck
      .                       }
      .                   }
 42,784 ( 0.00%)      }
      .           
 43,946 ( 0.00%)      fn visit_terminator_after_primary_effect(
      .                   &mut self,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .                   term: &'cx Terminator<'tcx>,
      .                   loc: Location,
      .               ) {
  6,278 ( 0.00%)          let span = term.source_info.span;
      .           
 25,112 ( 0.00%)          match term.kind {
      .                       TerminatorKind::Yield { value: _, resume: _, resume_arg: _, drop: _ } => {
      .                           if self.movable_generator {
      .                               // Look for any active borrows to locals
      .                               let borrow_set = self.borrow_set.clone();
      .                               for i in flow_state.borrows.iter() {
      .                                   let borrow = &borrow_set[i];
      .                                   self.check_for_local_borrow(borrow, span);
      .                               }
-- line 816 ----------------------------------------
-- line 817 ----------------------------------------
      .                           }
      .                       }
      .           
      .                       TerminatorKind::Resume | TerminatorKind::Return | TerminatorKind::GeneratorDrop => {
      .                           // Returning from the function implicitly kills storage for all locals and statics.
      .                           // Often, the storage will already have been killed by an explicit
      .                           // StorageDead, but we don't always emit those (notably on unwind paths),
      .                           // so this "extra check" serves as a kind of backup.
  1,014 ( 0.00%)                  let borrow_set = self.borrow_set.clone();
      .                           for i in flow_state.borrows.iter() {
      .                               let borrow = &borrow_set[i];
      .                               self.check_for_invalidation_at_exit(loc, borrow, span);
      .                           }
      .                       }
      .           
      .                       TerminatorKind::Abort
      .                       | TerminatorKind::Assert { .. }
-- line 833 ----------------------------------------
-- line 836 ----------------------------------------
      .                       | TerminatorKind::DropAndReplace { .. }
      .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
      .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ }
      .                       | TerminatorKind::Goto { .. }
      .                       | TerminatorKind::SwitchInt { .. }
      .                       | TerminatorKind::Unreachable
      .                       | TerminatorKind::InlineAsm { .. } => {}
      .                   }
 50,224 ( 0.00%)      }
      .           }
      .           
      .           use self::AccessDepth::{Deep, Shallow};
      .           use self::ReadOrWrite::{Activation, Read, Reservation, Write};
      .           
      .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
      .           enum ArtificialField {
      .               ArrayLength,
-- line 852 ----------------------------------------
-- line 913 ----------------------------------------
      .           /// When checking permissions for a place access, this flag is used to indicate that an immutable
      .           /// local place can be mutated.
      .           //
      .           // FIXME: @nikomatsakis suggested that this flag could be removed with the following modifications:
      .           // - Merge `check_access_permissions()` and `check_if_reassignment_to_immutable_state()`.
      .           // - Split `is_mutable()` into `is_assignable()` (can be directly assigned) and
      .           //   `is_declared_mutable()`.
      .           // - Take flow state into consideration in `is_assignable()` for local variables.
  7,747 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
      .           enum LocalMutationIsAllowed {
      .               Yes,
      .               /// We want use of immutable upvars to cause a "write to immutable upvar"
      .               /// error, not an "reassignment" error.
      .               ExceptUpvars,
      .               No,
      .           }
      .           
-- line 929 ----------------------------------------
-- line 970 ----------------------------------------
      .               }
      .           
      .               /// Checks an access to the given place to see if it is allowed. Examines the set of borrows
      .               /// that are in scope, as well as which paths have been initialized, to ensure that (a) the
      .               /// place is initialized and (b) it is not borrowed in some way that would prevent this
      .               /// access.
      .               ///
      .               /// Returns `true` if an error is reported.
438,128 ( 0.03%)      fn access_place(
      .                   &mut self,
      .                   location: Location,
      .                   place_span: (Place<'tcx>, Span),
      .                   kind: (AccessDepth, ReadOrWrite),
      .                   is_local_mutation_allowed: LocalMutationIsAllowed,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
      .                   let (sd, rw) = kind;
      .           
109,532 ( 0.01%)          if let Activation(_, borrow_index) = rw {
    888 ( 0.00%)              if self.reservation_error_reported.contains(&place_span.0) {
      .                           debug!(
      .                               "skipping access_place for activation of invalid reservation \
      .                                place: {:?} borrow_index: {:?}",
      .                               place_span.0, borrow_index
      .                           );
      .                           return;
      .                       }
      .                   }
      .           
      .                   // Check is_empty() first because it's the common case, and doing that
      .                   // way we avoid the clone() call.
 27,383 ( 0.00%)          if !self.access_place_error_reported.is_empty()
      .                       && self.access_place_error_reported.contains(&(place_span.0, place_span.1))
      .                   {
      .                       debug!(
      .                           "access_place: suppressing error place_span=`{:?}` kind=`{:?}`",
      .                           place_span, kind
      .                       );
      .                       return;
      .                   }
      .           
164,298 ( 0.01%)          let mutability_error = self.check_access_permissions(
109,532 ( 0.01%)              place_span,
      .                       rw,
      .                       is_local_mutation_allowed,
      .                       flow_state,
      .                       location,
      .                   );
      .                   let conflict_error =
301,213 ( 0.02%)              self.check_access_for_conflict(location, place_span, sd, rw, flow_state);
      .           
 82,149 ( 0.01%)          if let (Activation(_, borrow_idx), true) = (kind.1, conflict_error) {
      .                       // Suppress this warning when there's an error being emitted for the
      .                       // same borrow: fixing the error is likely to fix the warning.
      .                       self.reservation_warnings.remove(&borrow_idx);
      .                   }
      .           
 82,149 ( 0.01%)          if conflict_error || mutability_error {
      .                       debug!("access_place: logging error place_span=`{:?}` kind=`{:?}`", place_span, kind);
      .           
      .                       self.access_place_error_reported.insert((place_span.0, place_span.1));
      .                   }
219,064 ( 0.01%)      }
      .           
      .               fn check_access_for_conflict(
      .                   &mut self,
      .                   location: Location,
      .                   place_span: (Place<'tcx>, Span),
      .                   sd: AccessDepth,
      .                   rw: ReadOrWrite,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) -> bool {
      .                   debug!(
      .                       "check_access_for_conflict(location={:?}, place_span={:?}, sd={:?}, rw={:?})",
      .                       location, place_span, sd, rw,
      .                   );
      .           
 27,383 ( 0.00%)          let mut error_reported = false;
 82,149 ( 0.01%)          let tcx = self.infcx.tcx;
      .                   let body = self.body;
 54,766 ( 0.00%)          let borrow_set = self.borrow_set.clone();
      .           
      .                   // Use polonius output if it has been enabled.
 54,766 ( 0.00%)          let polonius_output = self.polonius_output.clone();
      .                   let borrows_in_scope = if let Some(polonius) = &polonius_output {
      .                       let location = self.location_table.start_index(location);
      .                       Either::Left(polonius.errors_at(location).iter().copied())
      .                   } else {
      .                       Either::Right(flow_state.borrows.iter())
      .                   };
      .           
355,979 ( 0.02%)          each_borrow_involving_path(
      .                       self,
      .                       tcx,
      .                       body,
      .                       location,
164,298 ( 0.01%)              (sd, place_span.0),
      .                       &borrow_set,
164,298 ( 0.01%)              borrows_in_scope,
307,403 ( 0.02%)              |this, borrow_index, borrow| match (rw, borrow.kind) {
      .                           // Obviously an activation is compatible with its own
      .                           // reservation (or even prior activating uses of same
      .                           // borrow); so don't check if they interfere.
      .                           //
      .                           // NOTE: *reservations* do conflict with themselves;
      .                           // thus aren't injecting unsoundenss w/ this check.)
    444 ( 0.00%)                  (Activation(_, activating), _) if activating == borrow_index => {
      .                               debug!(
      .                                   "check_access_for_conflict place_span: {:?} sd: {:?} rw: {:?} \
      .                                    skipping {:?} b/c activation of same borrow_index",
      .                                   place_span,
      .                                   sd,
      .                                   rw,
      .                                   (borrow_index, borrow),
      .                               );
-- line 1084 ----------------------------------------
-- line 1179 ----------------------------------------
      .                                   }
      .                               }
      .                               Control::Break
      .                           }
      .                       },
      .                   );
      .           
      .                   error_reported
 82,149 ( 0.01%)      }
      .           
 96,480 ( 0.01%)      fn mutate_place(
      .                   &mut self,
      .                   location: Location,
      .                   place_span: (Place<'tcx>, Span),
      .                   kind: AccessDepth,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
      .                   // Write of P[i] or *P requires P init'd.
 86,832 ( 0.01%)          self.check_if_assigned_path_is_moved(location, place_span, flow_state);
      .           
      .                   // Special case: you can assign an immutable local variable
      .                   // (e.g., `x = ...`) so long as it has never been initialized
      .                   // before (at this point in the flow).
  9,648 ( 0.00%)          if let Some(local) = place_span.0.as_local() {
 38,368 ( 0.00%)              if let Mutability::Not = self.body.local_decls[local].mutability {
      .                           // check for reassignments to immutable local variables
      .                           self.check_if_reassignment_to_immutable_state(
      .                               location, local, place_span, flow_state,
      .                           );
      .                           return;
      .                       }
      .                   }
      .           
      .                   // Otherwise, use the normal access permission rules.
 86,496 ( 0.01%)          self.access_place(
      .                       location,
 28,832 ( 0.00%)              place_span,
      .                       (kind, Write(WriteKind::Mutate)),
      .                       LocalMutationIsAllowed::No,
      .                       flow_state,
      .                   );
 77,184 ( 0.00%)      }
      .           
      .               fn consume_rvalue(
      .                   &mut self,
      .                   location: Location,
      .                   (rvalue, span): (&'cx Rvalue<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
 46,296 ( 0.00%)          match *rvalue {
  8,349 ( 0.00%)              Rvalue::Ref(_ /*rgn*/, bk, place) => {
 32,314 ( 0.00%)                  let access_kind = match bk {
      .                               BorrowKind::Shallow => {
      .                                   (Shallow(Some(ArtificialField::ShallowBorrow)), Read(ReadKind::Borrow(bk)))
      .                               }
      .                               BorrowKind::Shared => (Deep, Read(ReadKind::Borrow(bk))),
      .                               BorrowKind::Unique | BorrowKind::Mut { .. } => {
      .                                   let wk = WriteKind::MutableBorrow(bk);
  1,082 ( 0.00%)                          if allow_two_phase_borrow(bk) {
      .                                       (Deep, Reservation(wk))
      .                                   } else {
      .                                       (Deep, Write(wk))
      .                                   }
      .                               }
      .                           };
      .           
 58,443 ( 0.00%)                  self.access_place(
      .                               location,
 11,132 ( 0.00%)                      (place, span),
      .                               access_kind,
      .                               LocalMutationIsAllowed::No,
      .                               flow_state,
      .                           );
      .           
      .                           let action = if bk == BorrowKind::Shallow {
      .                               InitializationRequiringAction::MatchOn
      .                           } else {
      .                               InitializationRequiringAction::Borrow
      .                           };
      .           
 19,481 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
      .                               location,
      .                               action,
 19,481 ( 0.00%)                      (place.as_ref(), span),
      .                               flow_state,
      .                           );
      .                       }
      .           
      .                       Rvalue::AddressOf(mutability, place) => {
      .                           let access_kind = match mutability {
      .                               Mutability::Mut => (
      .                                   Deep,
-- line 1270 ----------------------------------------
-- line 1302 ----------------------------------------
      .                       }
      .           
      .                       Rvalue::Len(place) | Rvalue::Discriminant(place) => {
      .                           let af = match *rvalue {
      .                               Rvalue::Len(..) => Some(ArtificialField::ArrayLength),
      .                               Rvalue::Discriminant(..) => None,
      .                               _ => unreachable!(),
      .                           };
  4,912 ( 0.00%)                  self.access_place(
      .                               location,
  1,228 ( 0.00%)                      (place, span),
      .                               (Shallow(af), Read(ReadKind::Copy)),
      .                               LocalMutationIsAllowed::No,
      .                               flow_state,
      .                           );
  2,149 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
      .                               location,
      .                               InitializationRequiringAction::Use,
  2,149 ( 0.00%)                      (place.as_ref(), span),
      .                               flow_state,
      .                           );
      .                       }
      .           
      .                       Rvalue::BinaryOp(_bin_op, box (ref operand1, ref operand2))
      .                       | Rvalue::CheckedBinaryOp(_bin_op, box (ref operand1, ref operand2)) => {
  3,870 ( 0.00%)                  self.consume_operand(location, (operand1, span), flow_state);
  2,709 ( 0.00%)                  self.consume_operand(location, (operand2, span), flow_state);
      .                       }
      .           
      .                       Rvalue::NullaryOp(_op, _ty) => {
      .                           // nullary ops take no dynamic input; no borrowck effect.
      .                       }
      .           
      .                       Rvalue::Aggregate(ref aggregate_kind, ref operands) => {
      .                           // We need to report back the list of mutable upvars that were
      .                           // moved into the closure and subsequently used by the closure,
      .                           // in order to populate our used_mut set.
  2,307 ( 0.00%)                  match **aggregate_kind {
      .                               AggregateKind::Closure(def_id, _) | AggregateKind::Generator(def_id, _, _) => {
      .                                   let BorrowCheckResult { used_mut_upvars, .. } =
    156 ( 0.00%)                              self.infcx.tcx.mir_borrowck(def_id.expect_local());
      .                                   debug!("{:?} used_mut_upvars={:?}", def_id, used_mut_upvars);
      .                                   for field in used_mut_upvars {
      1 ( 0.00%)                              self.propagate_closure_used_mut_upvar(&operands[field.index()]);
      .                                   }
      .                               }
      .                               AggregateKind::Adt(..)
      .                               | AggregateKind::Array(..)
      .                               | AggregateKind::Tuple { .. } => (),
      .                           }
      .           
      .                           for operand in operands {
-- line 1353 ----------------------------------------
-- line 1391 ----------------------------------------
      .           
      .                       // Handle(b)
      .                       this.used_mut.insert(place.local);
      .                   };
      .           
      .                   // This relies on the current way that by-value
      .                   // captures of a closure are copied/moved directly
      .                   // when generating MIR.
      3 ( 0.00%)          match *operand {
      .                       Operand::Move(place) | Operand::Copy(place) => {
      1 ( 0.00%)                  match place.as_local() {
      1 ( 0.00%)                      Some(local) if !self.body.local_decls[local].is_user_variable() => {
      1 ( 0.00%)                          if self.body.local_decls[local].ty.is_mutable_ptr() {
      .                                       // The variable will be marked as mutable by the borrow.
      .                                       return;
      .                                   }
      .                                   // This is an edge case where we have a `move` closure
      .                                   // inside a non-move closure, and the inner closure
      .                                   // contains a mutation:
      .                                   //
      .                                   // let mut i = 0;
-- line 1411 ----------------------------------------
-- line 1448 ----------------------------------------
      .                               }
      .                               _ => propagate_closure_used_mut_place(self, place),
      .                           }
      .                       }
      .                       Operand::Constant(..) => {}
      .                   }
      .               }
      .           
125,376 ( 0.01%)      fn consume_operand(
      .                   &mut self,
      .                   location: Location,
      .                   (operand, span): (&'cx Operand<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
 56,621 ( 0.00%)          match *operand {
  4,875 ( 0.00%)              Operand::Copy(place) => {
      .                           // copy of place: check if this is "copy of frozen path"
      .                           // (FIXME: see check_loans.rs)
 10,016 ( 0.00%)                  self.access_place(
      .                               location,
  8,125 ( 0.00%)                      (place, span),
      .                               (Deep, Read(ReadKind::Copy)),
      .                               LocalMutationIsAllowed::No,
      .                               flow_state,
      .                           );
      .           
      .                           // Finally, check if path was already moved.
    266 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
      .                               location,
      .                               InitializationRequiringAction::Use,
    228 ( 0.00%)                      (place.as_ref(), span),
      .                               flow_state,
      .                           );
      .                       }
 17,715 ( 0.00%)              Operand::Move(place) => {
      .                           // move of place: check if this is move of already borrowed path
 46,243 ( 0.00%)                  self.access_place(
      .                               location,
 29,525 ( 0.00%)                      (place, span),
      .                               (Deep, Write(WriteKind::Move)),
      .                               LocalMutationIsAllowed::Yes,
      .                               flow_state,
      .                           );
      .           
      .                           // Finally, check if path was already moved.
  6,544 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
      .                               location,
      .                               InitializationRequiringAction::Use,
  4,908 ( 0.00%)                      (place.as_ref(), span),
      .                               flow_state,
      .                           );
      .                       }
      .                       Operand::Constant(_) => {}
      .                   }
 83,584 ( 0.01%)      }
      .           
      .               /// Checks whether a borrow of this place is invalidated when the function
      .               /// exits
      .               fn check_for_invalidation_at_exit(
      .                   &mut self,
      .                   location: Location,
      .                   borrow: &BorrowData<'tcx>,
      .                   span: Span,
      .               ) {
      .                   debug!("check_for_invalidation_at_exit({:?})", borrow);
     17 ( 0.00%)          let place = borrow.borrowed_place;
      .                   let mut root_place = PlaceRef { local: place.local, projection: &[] };
      .           
      .                   // FIXME(nll-rfc#40): do more precise destructor tracking here. For now
      .                   // we just know that all locals are dropped at function exit (otherwise
      .                   // we'll have a memory leak) and assume that all statics have a destructor.
      .                   //
      .                   // FIXME: allow thread-locals to borrow other thread locals?
      .           
      .                   let (might_be_alive, will_be_dropped) =
    119 ( 0.00%)              if self.body.local_decls[root_place.local].is_ref_to_thread_local() {
      .                           // Thread-locals might be dropped after the function exits
      .                           // We have to dereference the outer reference because
      .                           // borrows don't conflict behind shared references.
      .                           root_place.projection = DEREF_PROJECTION;
      .                           (true, true)
      .                       } else {
      .                           (false, self.locals_are_invalidated_at_exit)
      .                       };
      .           
     85 ( 0.00%)          if !will_be_dropped {
      .                       debug!("place_is_invalidated_at_exit({:?}) - won't be dropped", place);
      .                       return;
      .                   }
      .           
      .                   let sd = if might_be_alive { Deep } else { Shallow(None) };
      .           
    204 ( 0.00%)          if places_conflict::borrow_conflicts_with_place(
     34 ( 0.00%)              self.infcx.tcx,
      .                       &self.body,
      .                       place,
      .                       borrow.kind,
     68 ( 0.00%)              root_place,
      .                       sd,
      .                       places_conflict::PlaceConflictBias::Overlap,
      .                   ) {
      .                       debug!("check_for_invalidation_at_exit({:?}): INVALID", place);
      .                       // FIXME: should be talking about the region lifetime instead
      .                       // of just a span here.
      .                       let span = self.infcx.tcx.sess.source_map().end_point(span);
      .                       self.report_borrowed_value_does_not_live_long_enough(
-- line 1553 ----------------------------------------
-- line 1573 ----------------------------------------
      .                       err.buffer(&mut self.errors_buffer);
      .                   }
      .               }
      .           
      .               fn check_activations(&mut self, location: Location, span: Span, flow_state: &Flows<'cx, 'tcx>) {
      .                   // Two-phase borrow support: For each activation that is newly
      .                   // generated at this statement, check if it interferes with
      .                   // another borrow.
 61,894 ( 0.00%)          let borrow_set = self.borrow_set.clone();
117,954 ( 0.01%)          for &borrow_index in borrow_set.activations_at_location(location) {
      .                       let borrow = &borrow_set[borrow_index];
      .           
      .                       // only mutable borrows should be 2-phase
  2,220 ( 0.00%)              assert!(match borrow.kind {
      .                           BorrowKind::Shared | BorrowKind::Shallow => false,
      .                           BorrowKind::Unique | BorrowKind::Mut { .. } => true,
      .                       });
      .           
  5,328 ( 0.00%)              self.access_place(
      .                           location,
  2,664 ( 0.00%)                  (borrow.borrowed_place, span),
  3,996 ( 0.00%)                  (Deep, Activation(WriteKind::MutableBorrow(borrow.kind), borrow_index)),
      .                           LocalMutationIsAllowed::No,
      .                           flow_state,
      .                       );
      .                       // We do not need to call `check_if_path_or_subpath_is_moved`
      .                       // again, as we already called it when we made the
      .                       // initial reservation.
      .                   }
      .               }
-- line 1602 ----------------------------------------
-- line 1606 ----------------------------------------
      .                   location: Location,
      .                   local: Local,
      .                   place_span: (Place<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
      .                   debug!("check_if_reassignment_to_immutable_state({:?})", local);
      .           
      .                   // Check if any of the initializiations of `local` have happened yet:
 14,640 ( 0.00%)          if let Some(init_index) = self.is_local_ever_initialized(local, flow_state) {
      .                       // And, if so, report an error.
      .                       let init = &self.move_data.inits[init_index];
      .                       let span = init.span(&self.body);
      .                       self.report_illegal_reassignment(location, place_span, span, place_span.0);
      .                   }
      .               }
      .           
148,057 ( 0.01%)      fn check_if_full_path_is_moved(
      .                   &mut self,
      .                   location: Location,
      .                   desired_action: InitializationRequiringAction,
      .                   place_span: (PlaceRef<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
      .                   let maybe_uninits = &flow_state.uninits;
      .           
-- line 1630 ----------------------------------------
-- line 1660 ----------------------------------------
      .                   // Therefore, if we seek out the *closest* prefix for which we
      .                   // have a MovePath, that should capture the initialization
      .                   // state for the place scenario.
      .                   //
      .                   // This code covers scenarios 1, 2, and 3.
      .           
      .                   debug!("check_if_full_path_is_moved place: {:?}", place_span.0);
      .                   let (prefix, mpi) = self.move_path_closest_to(place_span.0);
 11,389 ( 0.00%)          if maybe_uninits.contains(mpi) {
      .                       self.report_use_of_moved_or_uninitialized(
      .                           location,
      .                           desired_action,
      .                           (prefix, place_span.0, place_span.1),
      .                           mpi,
      .                       );
      .                   } // Only query longest prefix with a MovePath, not further
      .                   // ancestors; dataflow recurs on children when parents
      .                   // move (to support partial (re)inits).
      .                   //
      .                   // (I.e., querying parents breaks scenario 7; but may want
      .                   // to do such a query based on partial-init feature-gate.)
 91,112 ( 0.01%)      }
      .           
      .               /// Subslices correspond to multiple move paths, so we iterate through the
      .               /// elements of the base array. For each element we check
      .               ///
      .               /// * Does this element overlap with our slice.
      .               /// * Is any part of it uninitialized.
      .               fn check_if_subslice_element_is_moved(
      .                   &mut self,
-- line 1689 ----------------------------------------
-- line 1719 ----------------------------------------
      .                                       return; // don't bother finding other problems.
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   }
      .               }
      .           
124,718 ( 0.01%)      fn check_if_path_or_subpath_is_moved(
      .                   &mut self,
      .                   location: Location,
      .                   desired_action: InitializationRequiringAction,
      .                   place_span: (PlaceRef<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
 22,676 ( 0.00%)          let maybe_uninits = &flow_state.uninits;
      .           
      .                   // Bad scenarios:
      .                   //
      .                   // 1. Move of `a.b.c`, use of `a` or `a.b`
      .                   //    partial initialization support, one might have `a.x`
      .                   //    initialized but not `a.b`.
      .                   // 2. All bad scenarios from `check_if_full_path_is_moved`
      .                   //
-- line 1742 ----------------------------------------
-- line 1743 ----------------------------------------
      .                   // OK scenarios:
      .                   //
      .                   // 3. Move of `a.b.c`, use of `a.b.d`
      .                   // 4. Uninitialized `a.x`, initialized `a.b`, use of `a.b`
      .                   // 5. Copied `(a.b: &_)`, use of `*(a.b).c`; note that `a.b`
      .                   //    must have been initialized for the use to be sound.
      .                   // 6. Move of `a.b.c` then reinit of `a.b.c.d`, use of `a.b.c.d`
      .           
 79,366 ( 0.00%)          self.check_if_full_path_is_moved(location, desired_action, place_span, flow_state);
      .           
 13,484 ( 0.00%)          if let Some((place_base, ProjectionElem::Subslice { from, to, from_end: false })) =
 11,338 ( 0.00%)              place_span.0.last_projection()
      .                   {
      .                       let place_ty = place_base.ty(self.body(), self.infcx.tcx);
      .                       if let ty::Array(..) = place_ty.ty.kind() {
      .                           self.check_if_subslice_element_is_moved(
      .                               location,
      .                               desired_action,
      .                               (place_base, place_span.1),
      .                               maybe_uninits,
-- line 1762 ----------------------------------------
-- line 1772 ----------------------------------------
      .                   //
      .                   // (Distinct from handling of scenarios 1+2+4 above because
      .                   // `place` does not interfere with suffixes of its prefixes,
      .                   // e.g., `a.b.c` does not interfere with `a.b.d`)
      .                   //
      .                   // This code covers scenario 1.
      .           
      .                   debug!("check_if_path_or_subpath_is_moved place: {:?}", place_span.0);
 45,352 ( 0.00%)          if let Some(mpi) = self.move_path_for_place(place_span.0) {
 33,312 ( 0.00%)              let uninit_mpi = self
      .                           .move_data
      .                           .find_in_move_path_or_its_descendants(mpi, |mpi| maybe_uninits.contains(mpi));
      .           
 16,656 ( 0.00%)              if let Some(uninit_mpi) = uninit_mpi {
      .                           self.report_use_of_moved_or_uninitialized(
      .                               location,
      .                               desired_action,
      .                               (place_span.0, place_span.0, place_span.1),
      .                               uninit_mpi,
      .                           );
      .                           return; // don't bother finding other problems.
      .                       }
      .                   }
 90,704 ( 0.01%)      }
      .           
      .               /// Currently MoveData does not store entries for all places in
      .               /// the input MIR. For example it will currently filter out
      .               /// places that are Copy; thus we do not track places of shared
      .               /// reference type. This routine will walk up a place along its
      .               /// prefixes, searching for a foundational place that *is*
      .               /// tracked in the MoveData.
      .               ///
      .               /// An Err result includes a tag indicated why the search failed.
      .               /// Currently this can only occur if the place is built off of a
      .               /// static variable, as we do not track those in the MoveData.
      .               fn move_path_closest_to(&mut self, place: PlaceRef<'tcx>) -> (PlaceRef<'tcx>, MovePathIndex) {
148,057 ( 0.01%)          match self.move_data.rev_lookup.find(place) {
      .                       LookupResult::Parent(Some(mpi)) | LookupResult::Exact(mpi) => {
      .                           (self.move_data.move_paths[mpi].place.as_ref(), mpi)
      .                       }
      .                       LookupResult::Parent(None) => panic!("should have move path for every Local"),
      .                   }
      .               }
      .           
      .               fn move_path_for_place(&mut self, place: PlaceRef<'tcx>) -> Option<MovePathIndex> {
      .                   // If returns None, then there is no move path corresponding
      .                   // to a direct owner of `place` (which means there is nothing
      .                   // that borrowck tracks for its analysis).
      .           
102,282 ( 0.01%)          match self.move_data.rev_lookup.find(place) {
      .                       LookupResult::Parent(_) => None,
      .                       LookupResult::Exact(mpi) => Some(mpi),
      .                   }
      .               }
      .           
      .               fn check_if_assigned_path_is_moved(
      .                   &mut self,
      .                   location: Location,
      .                   (place, span): (Place<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
      .                   debug!("check_if_assigned_path_is_moved place: {:?}", place);
      .           
      .                   // None case => assigning to `x` does not require `x` be initialized.
     56 ( 0.00%)          for (place_base, elem) in place.iter_projections().rev() {
    332 ( 0.00%)              match elem {
      .                           ProjectionElem::Index(_/*operand*/) |
      .                           ProjectionElem::ConstantIndex { .. } |
      .                           // assigning to P[i] requires P to be valid.
      .                           ProjectionElem::Downcast(_/*adt_def*/, _/*variant_idx*/) =>
      .                           // assigning to (P->variant) is okay if assigning to `P` is okay
      .                           //
      .                           // FIXME: is this true even if P is an adt with a dtor?
      .                           { }
      .           
      .                           // assigning to (*P) requires P to be initialized
      .                           ProjectionElem::Deref => {
    357 ( 0.00%)                      self.check_if_full_path_is_moved(
      .                                   location, InitializationRequiringAction::Use,
    306 ( 0.00%)                          (place_base, span), flow_state);
      .                               // (base initialized; no need to
      .                               // recur further)
      .                               break;
      .                           }
      .           
      .                           ProjectionElem::Subslice { .. } => {
      .                               panic!("we don't allow assignments to subslices, location: {:?}",
      .                                      location);
      .                           }
      .           
      .                           ProjectionElem::Field(..) => {
      .                               // if type of `P` has a dtor, then
      .                               // assigning to `P.f` requires `P` itself
      .                               // be already initialized
      .                               let tcx = self.infcx.tcx;
     30 ( 0.00%)                      let base_ty = place_base.ty(self.body(), tcx).ty;
     90 ( 0.00%)                      match base_ty.kind() {
    180 ( 0.00%)                          ty::Adt(def, _) if def.has_dtor(tcx) => {
      .                                       self.check_if_path_or_subpath_is_moved(
      .                                           location, InitializationRequiringAction::Assignment,
      .                                           (place_base, span), flow_state);
      .           
      .                                       // (base initialized; no need to
      .                                       // recur further)
      .                                       break;
      .                                   }
-- line 1877 ----------------------------------------
-- line 1931 ----------------------------------------
      .           
      .                       // Shallow so that we'll stop at any dereference; we'll
      .                       // report errors about issues with such bases elsewhere.
      .                       let maybe_uninits = &flow_state.uninits;
      .           
      .                       // Find the shortest uninitialized prefix you can reach
      .                       // without going over a Deref.
      .                       let mut shortest_uninit_seen = None;
    663 ( 0.00%)              for prefix in this.prefixes(base, PrefixSet::Shallow) {
     36 ( 0.00%)                  let mpi = match this.move_path_for_place(prefix) {
      .                               Some(mpi) => mpi,
      .                               None => continue,
      .                           };
      .           
      3 ( 0.00%)                  if maybe_uninits.contains(mpi) {
      .                               debug!(
      .                                   "check_parent_of_field updating shortest_uninit_seen from {:?} to {:?}",
      .                                   shortest_uninit_seen,
      .                                   Some((prefix, mpi))
      .                               );
      .                               shortest_uninit_seen = Some((prefix, mpi));
      .                           } else {
      .                               debug!("check_parent_of_field {:?} is definitely initialized", (prefix, mpi));
      .                           }
      .                       }
      .           
     90 ( 0.00%)              if let Some((prefix, mpi)) = shortest_uninit_seen {
      .                           // Check for a reassignment into an uninitialized field of a union (for example,
      .                           // after a move out). In this case, do not report an error here. There is an
      .                           // exception, if this is the first assignment into the union (that is, there is
      .                           // no move out from an earlier location) then this is an attempt at initialization
      .                           // of the union - we should error in that case.
      .                           let tcx = this.infcx.tcx;
      .                           if base.ty(this.body(), tcx).ty.is_union() {
      .                               if this.move_data.path_map[mpi].iter().any(|moi| {
-- line 1965 ----------------------------------------
-- line 1979 ----------------------------------------
      .                   }
      .               }
      .           
      .               /// Checks the permissions for the given place and read or write kind
      .               ///
      .               /// Returns `true` if an error is reported.
      .               fn check_access_permissions(
      .                   &mut self,
 54,766 ( 0.00%)          (place, span): (Place<'tcx>, Span),
      .                   kind: ReadOrWrite,
      .                   is_local_mutation_allowed: LocalMutationIsAllowed,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .                   location: Location,
      .               ) -> bool {
      .                   debug!(
      .                       "check_access_permissions({:?}, {:?}, is_local_mutation_allowed: {:?})",
      .                       place, kind, is_local_mutation_allowed
      .                   );
      .           
      .                   let error_access;
      .                   let the_place_err;
      .           
421,495 ( 0.03%)          match kind {
      .                       Reservation(WriteKind::MutableBorrow(
      .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
      .                       ))
      .                       | Write(WriteKind::MutableBorrow(
      .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
      .                       )) => {
  5,408 ( 0.00%)                  let is_local_mutation_allowed = match borrow_kind {
      .                               BorrowKind::Unique => LocalMutationIsAllowed::Yes,
      .                               BorrowKind::Mut { .. } => is_local_mutation_allowed,
      .                               BorrowKind::Shared | BorrowKind::Shallow => unreachable!(),
      .                           };
  3,787 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
      .                               Ok(root_place) => {
      .                                   self.add_used_mut(root_place, flow_state);
      .                                   return false;
      .                               }
      .                               Err(place_err) => {
      .                                   error_access = AccessKind::MutableBorrow;
      .                                   the_place_err = place_err;
      .                               }
      .                           }
      .                       }
      .                       Reservation(WriteKind::Mutate) | Write(WriteKind::Mutate) => {
 50,456 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
      .                               Ok(root_place) => {
      .                                   self.add_used_mut(root_place, flow_state);
      .                                   return false;
      .                               }
      .                               Err(place_err) => {
      .                                   error_access = AccessKind::Mutate;
      .                                   the_place_err = place_err;
      .                               }
-- line 2033 ----------------------------------------
-- line 2041 ----------------------------------------
      .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
      .                       )
      .                       | Write(
      .                           WriteKind::Move
      .                           | WriteKind::StorageDeadOrDrop
      .                           | WriteKind::MutableBorrow(BorrowKind::Shared)
      .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
      .                       ) => {
 30,032 ( 0.00%)                  if let (Err(_), true) = (
105,112 ( 0.01%)                      self.is_mutable(place.as_ref(), is_local_mutation_allowed),
      .                               self.errors_buffer.is_empty(),
      .                           ) {
      .                               // rust-lang/rust#46908: In pure NLL mode this code path should be
      .                               // unreachable, but we use `delay_span_bug` because we can hit this when
      .                               // dereferencing a non-Copy raw pointer *and* have `-Ztreat-err-as-bug`
      .                               // enabled. We don't want to ICE for that case, as other errors will have
      .                               // been emitted (#52262).
      .                               self.infcx.tcx.sess.delay_span_bug(
-- line 2058 ----------------------------------------
-- line 2094 ----------------------------------------
      .                   if previously_initialized {
      .                       self.report_mutability_error(place, span, the_place_err, error_access, location);
      .                       true
      .                   } else {
      .                       false
      .                   }
      .               }
      .           
 48,815 ( 0.00%)      fn is_local_ever_initialized(
      .                   &self,
      .                   local: Local,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) -> Option<InitIndex> {
 29,289 ( 0.00%)          let mpi = self.move_data.rev_lookup.find_local(local);
  9,763 ( 0.00%)          let ii = &self.move_data.init_path_map[mpi];
 44,577 ( 0.00%)          for &index in ii {
 30,576 ( 0.00%)              if flow_state.ever_inits.contains(index) {
      .                           return Some(index);
      .                       }
      .                   }
      .                   None
 39,052 ( 0.00%)      }
      .           
      .               /// Adds the place into the used mutable variables set
 30,996 ( 0.00%)      fn add_used_mut(&mut self, root_place: RootPlace<'tcx>, flow_state: &Flows<'cx, 'tcx>) {
      4 ( 0.00%)          match root_place {
 23,247 ( 0.00%)              RootPlace { place_local: local, place_projection: [], is_local_mutation_allowed } => {
      .                           // If the local may have been initialized, and it is now currently being
      .                           // mutated, then it is justified to be annotated with the `mut`
      .                           // keyword, since the mutation may be a possible reassignment.
 15,070 ( 0.00%)                  if is_local_mutation_allowed != LocalMutationIsAllowed::Yes
 21,969 ( 0.00%)                      && self.is_local_ever_initialized(local, flow_state).is_some()
      .                           {
      .                               self.used_mut.insert(local);
      .                           }
      .                       }
      .                       RootPlace {
      .                           place_local: _,
      .                           place_projection: _,
      .                           is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
      .                       } => {}
      .                       RootPlace {
      1 ( 0.00%)                  place_local,
      1 ( 0.00%)                  place_projection: place_projection @ [.., _],
      .                           is_local_mutation_allowed: _,
      .                       } => {
      2 ( 0.00%)                  if let Some(field) = self.is_upvar_field_projection(PlaceRef {
      .                               local: place_local,
      .                               projection: place_projection,
      .                           }) {
      1 ( 0.00%)                      self.used_mut_upvars.push(field);
      .                           }
      .                       }
      .                   }
 29,280 ( 0.00%)      }
      .           
      .               /// Whether this value can be written or borrowed mutably.
      .               /// Returns the root place if the place passed in is a projection.
261,745 ( 0.02%)      fn is_mutable(
      .                   &self,
      .                   place: PlaceRef<'tcx>,
      .                   is_local_mutation_allowed: LocalMutationIsAllowed,
      .               ) -> Result<RootPlace<'tcx>, PlaceRef<'tcx>> {
      .                   debug!("is_mutable: place={:?}, is_local...={:?}", place, is_local_mutation_allowed);
 73,445 ( 0.00%)          match place.last_projection() {
      .                       None => {
 22,765 ( 0.00%)                  let local = &self.body.local_decls[place.local];
 68,295 ( 0.00%)                  match local.mutability {
  6,806 ( 0.00%)                      Mutability::Not => match is_local_mutation_allowed {
 20,418 ( 0.00%)                          LocalMutationIsAllowed::Yes => Ok(RootPlace {
      .                                       place_local: place.local,
      .                                       place_projection: place.projection,
      .                                       is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
      .                                   }),
      .                                   LocalMutationIsAllowed::ExceptUpvars => Ok(RootPlace {
      .                                       place_local: place.local,
      .                                       place_projection: place.projection,
      .                                       is_local_mutation_allowed: LocalMutationIsAllowed::ExceptUpvars,
      .                                   }),
      .                                   LocalMutationIsAllowed::No => Err(place),
      .                               },
 38,724 ( 0.00%)                      Mutability::Mut => Ok(RootPlace {
      .                                   place_local: place.local,
      .                                   place_projection: place.projection,
      .                                   is_local_mutation_allowed,
      .                               }),
      .                           }
      .                       }
      .                       Some((place_base, elem)) => {
  3,090 ( 0.00%)                  match elem {
      .                               ProjectionElem::Deref => {
    868 ( 0.00%)                          let base_ty = place_base.ty(self.body(), self.infcx.tcx).ty;
      .           
      .                                   // Check the kind of deref to decide
  2,604 ( 0.00%)                          match base_ty.kind() {
      .                                       ty::Ref(_, _, mutbl) => {
    864 ( 0.00%)                                  match mutbl {
      .                                               // Shared borrowed data is never mutable
      .                                               hir::Mutability::Not => Err(place),
      .                                               // Mutably borrowed data is mutable, but only if we have a
      .                                               // unique path to the `&mut`
      .                                               hir::Mutability::Mut => {
    864 ( 0.00%)                                          let mode = match self.is_upvar_field_projection(place) {
     10 ( 0.00%)                                              Some(field) if self.upvars[field.index()].by_ref => {
      .                                                           is_local_mutation_allowed
      .                                                       }
      .                                                       _ => LocalMutationIsAllowed::Yes,
      .                                                   };
      .           
  2,592 ( 0.00%)                                          self.is_mutable(place_base, mode)
      .                                               }
      .                                           }
      .                                       }
      .                                       ty::RawPtr(tnm) => {
      .                                           match tnm.mutbl {
      .                                               // `*const` raw pointers are not mutable
      .                                               hir::Mutability::Not => Err(place),
      .                                               // `*mut` raw pointers are always mutable, regardless of
-- line 2211 ----------------------------------------
-- line 2213 ----------------------------------------
      .                                               hir::Mutability::Mut => Ok(RootPlace {
      .                                                   place_local: place.local,
      .                                                   place_projection: place.projection,
      .                                                   is_local_mutation_allowed,
      .                                               }),
      .                                           }
      .                                       }
      .                                       // `Box<T>` owns its content, so mutable if its location is mutable
      2 ( 0.00%)                              _ if base_ty.is_box() => {
      .                                           self.is_mutable(place_base, is_local_mutation_allowed)
      .                                       }
      .                                       // Deref should only be for reference, pointers or boxes
      .                                       _ => bug!("Deref of unexpected type: {:?}", base_ty),
      .                                   }
      .                               }
      .                               // All other projections are owned by their base path, so mutable if
      .                               // base path is mutable
      .                               ProjectionElem::Field(..)
      .                               | ProjectionElem::Index(..)
      .                               | ProjectionElem::ConstantIndex { .. }
      .                               | ProjectionElem::Subslice { .. }
      .                               | ProjectionElem::Downcast(..) => {
      .                                   let upvar_field_projection = self.is_upvar_field_projection(place);
  1,192 ( 0.00%)                          if let Some(field) = upvar_field_projection {
      .                                       let upvar = &self.upvars[field.index()];
      .                                       debug!(
      .                                           "is_mutable: upvar.mutability={:?} local_mutation_is_allowed={:?} \
      .                                            place={:?}, place_base={:?}",
      .                                           upvar, is_local_mutation_allowed, place, place_base
      .                                       );
     15 ( 0.00%)                              match (upvar.place.mutability, is_local_mutation_allowed) {
      .                                           (
      .                                               Mutability::Not,
      .                                               LocalMutationIsAllowed::No
      .                                               | LocalMutationIsAllowed::ExceptUpvars,
      .                                           ) => Err(place),
      .                                           (Mutability::Not, LocalMutationIsAllowed::Yes)
      .                                           | (Mutability::Mut, _) => {
      .                                               // Subtle: this is an upvar
-- line 2251 ----------------------------------------
-- line 2270 ----------------------------------------
      .                                               // fn main() {
      .                                               //     let var = Vec::new();
      .                                               //     foo(move || {
      .                                               //         var.push(1);
      .                                               //     });
      .                                               // }
      .                                               // ```
      .                                               let _ =
     27 ( 0.00%)                                          self.is_mutable(place_base, is_local_mutation_allowed)?;
      .                                               Ok(RootPlace {
      .                                                   place_local: place.local,
      .                                                   place_projection: place.projection,
      .                                                   is_local_mutation_allowed,
      .                                               })
      .                                           }
      .                                       }
      .                                   } else {
      .                                       self.is_mutable(place_base, is_local_mutation_allowed)
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   }
190,360 ( 0.01%)      }
      .           
      .               /// If `place` is a field projection, and the field is being projected from a closure type,
      .               /// then returns the index of the field being projected. Note that this closure will always
      .               /// be `self` in the current MIR, because that is the only time we directly access the fields
      .               /// of a closure type.
      .               fn is_upvar_field_projection(&self, place_ref: PlaceRef<'tcx>) -> Option<Field> {
  9,260 ( 0.00%)          path_utils::is_upvar_field_projection(self.infcx.tcx, &self.upvars, place_ref, self.body())
      .               }
      .           }
      .           
      .           /// The degree of overlap between 2 places for borrow-checking.
      .           enum Overlap {
      .               /// The places might partially overlap - in this case, we give
      .               /// up and say that they might conflict. This occurs when
      .               /// different fields of a union are borrowed. For example,
-- line 2308 ----------------------------------------

863,689 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs
--------------------------------------------------------------------------------
Ir                  

-- line 17 ----------------------------------------
         .           pub struct BitMask(pub BitMaskWord);
         .           
         .           #[allow(clippy::use_self)]
         .           impl BitMask {
         .               /// Returns a new `BitMask` with all bits inverted.
         .               #[inline]
         .               #[must_use]
         .               pub fn invert(self) -> Self {
    97,788 ( 0.01%)          BitMask(self.0 ^ BITMASK_MASK)
         .               }
         .           
         .               /// Flip the bit in the mask for the entry at the given index.
         .               ///
         .               /// Returns the bit's previous state.
         .               #[inline]
         .               #[allow(clippy::cast_ptr_alignment)]
         .               #[cfg(feature = "raw")]
-- line 33 ----------------------------------------
-- line 38 ----------------------------------------
         .                   // The bit was set if the bit is now 0.
         .                   self.0 & mask == 0
         .               }
         .           
         .               /// Returns a new `BitMask` with the lowest bit removed.
         .               #[inline]
         .               #[must_use]
         .               pub fn remove_lowest_bit(self) -> Self {
    91,060 ( 0.01%)          BitMask(self.0 & (self.0 - 1))
         .               }
         .               /// Returns whether the `BitMask` has at least one set bit.
         .               #[inline]
         .               pub fn any_bit_set(self) -> bool {
 1,256,153 ( 0.08%)          self.0 != 0
         .               }
         .           
         .               /// Returns the first set bit in the `BitMask`, if there is one.
         .               #[inline]
         .               pub fn lowest_set_bit(self) -> Option<usize> {
14,214,136 ( 0.87%)          if self.0 == 0 {
         .                       None
         .                   } else {
         .                       Some(unsafe { self.lowest_set_bit_nonzero() })
         .                   }
         .               }
         .           
         .               /// Returns the first set bit in the `BitMask`, if there is one. The
         .               /// bitmask must not be empty.
         .               #[inline]
         .               #[cfg(feature = "nightly")]
         .               pub unsafe fn lowest_set_bit_nonzero(self) -> usize {
    19,740 ( 0.00%)          intrinsics::cttz_nonzero(self.0) as usize / BITMASK_STRIDE
         .               }
         .               #[inline]
         .               #[cfg(not(feature = "nightly"))]
         .               pub unsafe fn lowest_set_bit_nonzero(self) -> usize {
         .                   self.trailing_zeros()
         .               }
         .           
         .               /// Returns the number of trailing zeroes in the `BitMask`.
-- line 77 ----------------------------------------
-- line 110 ----------------------------------------
         .           /// bits.
         .           pub struct BitMaskIter(BitMask);
         .           
         .           impl Iterator for BitMaskIter {
         .               type Item = usize;
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<usize> {
 2,486,496 ( 0.15%)          let bit = self.0.lowest_set_bit()?;
         .                   self.0 = self.0.remove_lowest_bit();
         .                   Some(bit)
         .               }
         .           }

    50,142 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 57 ----------------------------------------
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
      386 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
      193 ( 0.00%)              from_str_radix(src, radix)
      579 ( 0.00%)          }
        .           
        .                   /// Returns the number of ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[doc(alias = "popcount")]
        .                   #[doc(alias = "popcnt")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn count_ones(self) -> u32 {
   73,905 ( 0.00%)              intrinsics::ctpop(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of zeros in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
        .                   /// assert_eq!(n.leading_zeros(), 2);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn leading_zeros(self) -> u32 {
  374,606 ( 0.02%)              intrinsics::ctlz(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of trailing zeros in the binary representation
        .                   /// of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
        .                   /// assert_eq!(n.trailing_zeros(), 3);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn trailing_zeros(self) -> u32 {
  327,789 ( 0.02%)              intrinsics::cttz(self) as u32
        .                   }
        .           
        .                   /// Returns the number of leading ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn rotate_left(self, n: u32) -> Self {
8,741,889 ( 0.54%)              intrinsics::rotate_left(self, n as $SelfT)
        .                   }
        .           
        .                   /// Shifts the bits to the right by a specified amount, `n`,
        .                   /// wrapping the truncated bits to the beginning of the resulting
        .                   /// integer.
        .                   ///
        .                   /// Please note this isn't the same operation as the `>>` shifting operator!
        .                   ///
-- line 220 ----------------------------------------
-- line 430 ----------------------------------------
        .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
        .                   pub const fn checked_add(self, rhs: Self) -> Option<Self> {
        6 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
        .                       if unlikely!(b) {None} else {Some(a)}
        .                   }
        .           
        .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
        .                   /// cannot occur.
        .                   ///
        .                   /// # Safety
        .                   ///
-- line 446 ----------------------------------------
-- line 456 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_add`.
1,022,773 ( 0.06%)              unsafe { intrinsics::unchecked_add(self, rhs) }
        .                   }
        .           
        .                   /// Checked addition with a signed integer. Computes `self + rhs`,
        .                   /// returning `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_sub`.
   66,113 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
        .                   }
        .           
        .                   /// Checked integer multiplication. Computes `self * rhs`, returning
        .                   /// `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 1035 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_add(self, rhs: Self) -> Self {
  138,838 ( 0.01%)              intrinsics::saturating_add(self, rhs)
        .                   }
        .           
        .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
    3,790 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
        .                   }
        .           
        .                   /// Saturating integer multiplication. Computes `self * rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
4,465,557 ( 0.27%)              intrinsics::wrapping_add(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) addition with a signed integer. Computes
        .                   /// `self + rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
1,726,890 ( 0.11%)              intrinsics::wrapping_sub(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) multiplication. Computes `self *
        .                   /// rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
        .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
6,582,320 ( 0.40%)              intrinsics::wrapping_mul(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) division. Computes `self / rhs`.
        .                   /// Wrapped division on unsigned types is just normal division.
        .                   /// There's no way wrapping could ever happen.
        .                   /// This function exists, so that all operations
        .                   /// are accounted for in the wrapping operations.
        .                   ///
-- line 1256 ----------------------------------------
-- line 1397 ----------------------------------------
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_shl(self, rhs: u32) -> Self {
        .                       // SAFETY: the masking by the bitsize of the type ensures that we do not shift
        .                       // out of bounds
        .                       unsafe {
      270 ( 0.00%)                  intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)
        .                       }
        .                   }
        .           
        .                   /// Panic-free bitwise shift-right; yields `self >> mask(rhs)`,
        .                   /// where `mask` removes any high-order bits of `rhs` that
        .                   /// would cause the shift to exceed the bitwidth of the type.
        .                   ///
        .                   /// Note that this is *not* the same as a rotate-right; the
-- line 1413 ----------------------------------------
-- line 1492 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
  670,294 ( 0.04%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates `self + rhs + carry` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
        .                   /// additional bit of overflow. This allows for chaining together multiple additions
        .                   /// to create "big integers" which represent larger values.
-- line 1508 ----------------------------------------
-- line 1588 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
  317,214 ( 0.02%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
        .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
        .                   /// to create "big integers" which represent larger values.
-- line 1604 ----------------------------------------
-- line 1673 ----------------------------------------
        .                   /// assert_eq!(5u32.overflowing_mul(2), (10, false));
        .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                     without modifying the original"]
        .                   #[inline(always)]
        2 ( 0.00%)          pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
1,231,515 ( 0.08%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        1 ( 0.00%)          }
        .           
        .                   /// Calculates the divisor when `self` is divided by `rhs`.
        .                   ///
        .                   /// Returns a tuple of the divisor along with a boolean indicating
        .                   /// whether an arithmetic overflow would occur. Note that for unsigned
        .                   /// integers overflow never occurs, so the second value is always
        .                   /// `false`.
        .                   ///
-- line 1692 ----------------------------------------
-- line 1701 ----------------------------------------
        .                   /// ```
        .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_div(2), (2, false));")]
        .                   /// ```
        .                   #[inline(always)]
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_overflowing_int_methods", since = "1.52.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
       29 ( 0.00%)          pub const fn overflowing_div(self, rhs: Self) -> (Self, bool) {
      116 ( 0.00%)              (self / rhs, false)
       87 ( 0.00%)          }
        .           
        .                   /// Calculates the quotient of Euclidean division `self.div_euclid(rhs)`.
        .                   ///
        .                   /// Returns a tuple of the divisor along with a boolean indicating
        .                   /// whether an arithmetic overflow would occur. Note that for unsigned
        .                   /// integers overflow never occurs, so the second value is always
        .                   /// `false`.
        .                   /// Since, for the positive integers, all common
-- line 1719 ----------------------------------------
-- line 1758 ----------------------------------------
        .                   /// ```
        .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_rem(2), (1, false));")]
        .                   /// ```
        .                   #[inline(always)]
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_overflowing_int_methods", since = "1.52.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
       30 ( 0.00%)          pub const fn overflowing_rem(self, rhs: Self) -> (Self, bool) {
      120 ( 0.00%)              (self % rhs, false)
       90 ( 0.00%)          }
        .           
        .                   /// Calculates the remainder `self.rem_euclid(rhs)` as if by Euclidean division.
        .                   ///
        .                   /// Returns a tuple of the modulo after dividing along with a boolean
        .                   /// indicating whether an arithmetic overflow would occur. Note that for
        .                   /// unsigned integers overflow never occurs, so the second value is
        .                   /// always `false`.
        .                   /// Since, for the positive integers, all common
-- line 1776 ----------------------------------------
-- line 1838 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(0x1", stringify!($SelfT), ".overflowing_shl(132), (0x10, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_shl(self, rhs: u32) -> (Self, bool) {
       90 ( 0.00%)              (self.wrapping_shl(rhs), (rhs > ($BITS - 1)))
        .                   }
        .           
        .                   /// Shifts self right by `rhs` bits.
        .                   ///
        .                   /// Returns a tuple of the shifted version of self along with a boolean
        .                   /// indicating whether the shift value was larger than or equal to the
        .                   /// number of bits. If the shift value is too large, then value is
        .                   /// masked (N-1) where N is the number of bits, and this value is then
-- line 1854 ----------------------------------------
-- line 2132 ----------------------------------------
        .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
        .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
        .                   /// ```
        .                   #[must_use]
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
        .                   #[inline(always)]
        .                   pub const fn is_power_of_two(self) -> bool {
      210 ( 0.00%)              self.count_ones() == 1
        .                   }
        .           
        .                   // Returns one less than next power of two.
        .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
        .                   //
        .                   // 8u8.one_less_than_next_power_of_two() == 7
        .                   // 6u8.one_less_than_next_power_of_two() == 7
        .                   //
        .                   // This method cannot overflow, as in the `next_power_of_two`
        .                   // overflow cases it instead ends up returning the maximum value
        .                   // of the type, and can return 0 for 0.
        .                   #[inline]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   const fn one_less_than_next_power_of_two(self) -> Self {
   12,166 ( 0.00%)              if self <= 1 { return 0; }
        .           
   17,854 ( 0.00%)              let p = self - 1;
        .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
        .                       // That means the shift is always in-bounds, and some processors
        .                       // (such as intel pre-haswell) have more efficient ctlz
        .                       // intrinsics when the argument is non-zero.
   53,443 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
   17,909 ( 0.00%)              <$SelfT>::MAX >> z
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `self`.
        .                   ///
        .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
        .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
        .                   /// release mode (the only situation in which method can return 0).
        .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
        .                   #[rustc_inherit_overflow_checks]
        .                   pub const fn next_power_of_two(self) -> Self {
   23,510 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `n`. If
        .                   /// the next power of two is greater than the type's maximum value,
        .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 2195 ----------------------------------------

  102,447 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs
--------------------------------------------------------------------------------
Ir                 

-- line 28 ----------------------------------------
        .               PushRegionObligation,
        .           }
        .           
        .           macro_rules! impl_from {
        .               ($($ctor: ident ($ty: ty),)*) => {
        .                   $(
        .                   impl<'tcx> From<$ty> for UndoLog<'tcx> {
        .                       fn from(x: $ty) -> Self {
    1,001 ( 0.00%)                  UndoLog::$ctor(x.into())
        .                       }
        .                   }
        .                   )*
        .               }
        .           }
        .           
        .           // Upcast from a single kind of "undoable action" to the general enum
        .           impl_from! {
-- line 44 ----------------------------------------
-- line 57 ----------------------------------------
        .               ConstUnificationTable(sv::UndoLog<ut::Delegate<ty::ConstVid<'tcx>>>),
        .           
        .               RegionUnificationTable(sv::UndoLog<ut::Delegate<RegionVidKey<'tcx>>>),
        .               ProjectionCache(traits::UndoLog<'tcx>),
        .           }
        .           
        .           /// The Rollback trait defines how to rollback a particular action.
        .           impl<'tcx> Rollback<UndoLog<'tcx>> for InferCtxtInner<'tcx> {
  271,035 ( 0.02%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
  451,725 ( 0.03%)          match undo {
  567,110 ( 0.03%)              UndoLog::TypeVariables(undo) => self.type_variable_storage.reverse(undo),
      260 ( 0.00%)              UndoLog::ConstUnificationTable(undo) => self.const_unification_storage.reverse(undo),
    1,360 ( 0.00%)              UndoLog::IntUnificationTable(undo) => self.int_unification_storage.reverse(undo),
        .                       UndoLog::FloatUnificationTable(undo) => self.float_unification_storage.reverse(undo),
        .                       UndoLog::RegionConstraintCollector(undo) => {
  129,514 ( 0.01%)                  self.region_constraint_storage.as_mut().unwrap().reverse(undo)
        .                       }
        .                       UndoLog::RegionUnificationTable(undo) => {
   28,330 ( 0.00%)                  self.region_constraint_storage.as_mut().unwrap().unification_table.reverse(undo)
        .                       }
        .                       UndoLog::ProjectionCache(undo) => self.projection_cache.reverse(undo),
        .                       UndoLog::PushRegionObligation => {
        .                           self.region_obligations.pop();
        .                       }
        .                   }
  361,380 ( 0.02%)      }
        .           }
        .           
        .           /// The combined undo log for all the various unification tables. For each change to the storage
        .           /// for any kind of inference variable, we record an UndoLog entry in the vector here.
        .           pub(crate) struct InferCtxtUndoLogs<'tcx> {
        .               logs: Vec<UndoLog<'tcx>>,
        .               num_open_snapshots: usize,
        .           }
        .           
        .           impl Default for InferCtxtUndoLogs<'_> {
        .               fn default() -> Self {
   16,930 ( 0.00%)          Self { logs: Default::default(), num_open_snapshots: Default::default() }
        .               }
        .           }
        .           
        .           /// The UndoLogs trait defines how we undo a particular kind of action (of type T). We can undo any
        .           /// action that is convertable into an UndoLog (per the From impls above).
        .           impl<'tcx, T> UndoLogs<T> for InferCtxtUndoLogs<'tcx>
        .           where
        .               UndoLog<'tcx>: From<T>,
-- line 102 ----------------------------------------
-- line 103 ----------------------------------------
        .           {
        .               #[inline]
        .               fn num_open_snapshots(&self) -> usize {
        .                   self.num_open_snapshots
        .               }
        .           
        .               #[inline]
        .               fn push(&mut self, undo: T) {
   90,590 ( 0.01%)          if self.in_snapshot() {
    8,008 ( 0.00%)              self.logs.push(undo.into())
        .                   }
        .               }
        .           
        .               fn clear(&mut self) {
        .                   self.logs.clear();
        .                   self.num_open_snapshots = 0;
        .               }
        .           
-- line 120 ----------------------------------------
-- line 125 ----------------------------------------
        .               {
        .                   if self.in_snapshot() {
        .                       self.logs.extend(undos.into_iter().map(UndoLog::from))
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> InferCtxtInner<'tcx> {
  181,734 ( 0.01%)      pub fn rollback_to(&mut self, snapshot: Snapshot<'tcx>) {
        .                   debug!("rollback_to({})", snapshot.undo_len);
        .                   self.undo_log.assert_open_snapshot(&snapshot);
        .           
  331,613 ( 0.02%)          while self.undo_log.logs.len() > snapshot.undo_len {
        .                       let undo = self.undo_log.logs.pop().unwrap();
1,084,140 ( 0.07%)              self.reverse(undo);
        .                   }
        .           
   73,036 ( 0.00%)          if self.undo_log.num_open_snapshots == 1 {
        .                       // The root snapshot. It's safe to clear the undo log because
        .                       // there's no snapshot further out that we might need to roll back
        .                       // to.
   19,420 ( 0.00%)              assert!(snapshot.undo_len == 0);
        .                       self.undo_log.logs.clear();
        .                   }
        .           
  100,577 ( 0.01%)          self.undo_log.num_open_snapshots -= 1;
  212,023 ( 0.01%)      }
        .           
        .               pub fn commit(&mut self, snapshot: Snapshot<'tcx>) {
        .                   debug!("commit({})", snapshot.undo_len);
        .           
  187,401 ( 0.01%)          if self.undo_log.num_open_snapshots == 1 {
        .                       // The root snapshot. It's safe to clear the undo log because
        .                       // there's no snapshot further out that we might need to roll back
        .                       // to.
   47,242 ( 0.00%)              assert!(snapshot.undo_len == 0);
        .                       self.undo_log.logs.clear();
        .                   }
        .           
  211,022 ( 0.01%)          self.undo_log.num_open_snapshots -= 1;
        .               }
        .           }
        .           
        .           impl<'tcx> InferCtxtUndoLogs<'tcx> {
        .               pub fn start_snapshot(&mut self) -> Snapshot<'tcx> {
  371,024 ( 0.02%)          self.num_open_snapshots += 1;
        .                   Snapshot { undo_len: self.logs.len(), _marker: PhantomData }
        .               }
        .           
        .               pub(crate) fn region_constraints_in_snapshot(
        .                   &self,
        .                   s: &Snapshot<'tcx>,
        .               ) -> impl Iterator<Item = &'_ region_constraints::UndoLog<'tcx>> + Clone {
   11,977 ( 0.00%)          self.logs[s.undo_len..].iter().filter_map(|log| match log {
        .                       UndoLog::RegionConstraintCollector(log) => Some(log),
        .                       _ => None,
        .                   })
        .               }
        .           
        .               pub(crate) fn region_constraints(
        .                   &self,
        .               ) -> impl Iterator<Item = &'_ region_constraints::UndoLog<'tcx>> + Clone {
      130 ( 0.00%)          self.logs.iter().filter_map(|log| match log {
        .                       UndoLog::RegionConstraintCollector(log) => Some(log),
        .                       _ => None,
        .                   })
        .               }
        .           
        .               fn assert_open_snapshot(&self, snapshot: &Snapshot<'tcx>) {
        .                   // Failures here may indicate a failure to follow a stack discipline.
   90,867 ( 0.01%)          assert!(self.logs.len() >= snapshot.undo_len);
   90,867 ( 0.01%)          assert!(self.num_open_snapshots > 0);
        .               }
        .           }
        .           
        .           impl<'tcx> std::ops::Index<usize> for InferCtxtUndoLogs<'tcx> {
        .               type Output = UndoLog<'tcx>;
        .           
        .               fn index(&self, key: usize) -> &Self::Output {
        .                   &self.logs[key]
-- line 204 ----------------------------------------

  142,400 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/graph/scc/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 35 ----------------------------------------
      .           
      .               /// Contains the successors for all the Sccs, concatenated. The
      .               /// range of indices corresponding to a given SCC is found in its
      .               /// SccData.
      .               all_successors: Vec<S>,
      .           }
      .           
      .           impl<N: Idx, S: Idx + Ord> Sccs<N, S> {
  2,548 ( 0.00%)      pub fn new(graph: &(impl DirectedGraph<Node = N> + WithNumNodes + WithSuccessors)) -> Self {
      .                   SccsConstruction::construct(graph)
  2,556 ( 0.00%)      }
      .           
      .               /// Returns the number of SCCs in the graph.
      .               pub fn num_sccs(&self) -> usize {
      .                   self.scc_data.len()
      .               }
      .           
      .               /// Returns an iterator over the SCCs in the graph.
      .               ///
-- line 53 ----------------------------------------
-- line 56 ----------------------------------------
      .               /// This is convenient when the edges represent dependencies: when you visit
      .               /// `S1`, the value for `S2` will already have been computed.
      .               pub fn all_sccs(&self) -> impl Iterator<Item = S> {
      .                   (0..self.scc_data.len()).map(S::new)
      .               }
      .           
      .               /// Returns the SCC to which a node `r` belongs.
      .               pub fn scc(&self, r: N) -> S {
 42,505 ( 0.00%)          self.scc_indices[r]
      .               }
      .           
      .               /// Returns the successors of the given SCC.
      .               pub fn successors(&self, scc: S) -> &[S] {
      .                   self.scc_data.successors(scc)
      .               }
      .           
      .               /// Construct the reverse graph of the SCC graph.
-- line 72 ----------------------------------------
-- line 116 ----------------------------------------
      .                   self.ranges.len()
      .               }
      .           
      .               /// Returns the successors of the given SCC.
      .               fn successors(&self, scc: S) -> &[S] {
      .                   // Annoyingly, `range` does not implement `Copy`, so we have
      .                   // to do `range.start..range.end`:
      .                   let range = &self.ranges[scc];
118,596 ( 0.01%)          &self.all_successors[range.start..range.end]
      .               }
      .           
      .               /// Creates a new SCC with `successors` as its successors and
      .               /// returns the resulting index.
      .               fn create_scc(&mut self, successors: impl IntoIterator<Item = S>) -> S {
      .                   // Store the successors on `scc_successors_vec`, remembering
      .                   // the range of indices.
 14,832 ( 0.00%)          let all_successors_start = self.all_successors.len();
      .                   self.all_successors.extend(successors);
      .                   let all_successors_end = self.all_successors.len();
      .           
      .                   debug!(
      .                       "create_scc({:?}) successors={:?}",
      .                       self.ranges.len(),
      .                       &self.all_successors[all_successors_start..all_successors_end],
      .                   );
-- line 140 ----------------------------------------
-- line 164 ----------------------------------------
      .               /// into the successors_stack, we sometimes get duplicate entries.
      .               /// We use this set to remove those -- we also keep its storage
      .               /// around between successors to amortize memory allocation costs.
      .               duplicate_set: FxHashSet<S>,
      .           
      .               scc_data: SccData<S>,
      .           }
      .           
  1,420 ( 0.00%)  #[derive(Copy, Clone, Debug)]
      .           enum NodeState<N, S> {
      .               /// This node has not yet been visited as part of the DFS.
      .               ///
      .               /// After SCC construction is complete, this state ought to be
      .               /// impossible.
      .               NotVisited,
      .           
      .               /// This node is currently being walk as part of our DFS. It is on
-- line 180 ----------------------------------------
-- line 216 ----------------------------------------
      .               /// N with depth D can reach some other node N' with lower depth
      .               /// D' (i.e., D' < D), we know that N, N', and all nodes in
      .               /// between them on the stack are part of an SCC.
      .               ///
      .               /// [wikipedia]: https://bit.ly/2EZIx84
      .               fn construct(graph: &'c G) -> Sccs<G::Node, S> {
      .                   let num_nodes = graph.num_nodes();
      .           
  3,124 ( 0.00%)          let mut this = Self {
      .                       graph,
      .                       node_states: IndexVec::from_elem_n(NodeState::NotVisited, num_nodes),
      .                       node_stack: Vec::with_capacity(num_nodes),
      .                       successors_stack: Vec::new(),
      .                       scc_data: SccData { ranges: IndexVec::new(), all_successors: Vec::new() },
      .                       duplicate_set: FxHashSet::default(),
      .                   };
      .           
      .                   let scc_indices = (0..num_nodes)
      .                       .map(G::Node::new)
121,122 ( 0.01%)              .map(|node| match this.start_walk_from(node) {
      .                           WalkReturn::Complete { scc_index } => scc_index,
      .                           WalkReturn::Cycle { min_depth } => panic!(
      .                               "`start_walk_node({:?})` returned cycle with depth {:?}",
      .                               node, min_depth
      .                           ),
      .                       })
      .                       .collect();
      .           
  1,704 ( 0.00%)          Sccs { scc_indices, scc_data: this.scc_data }
      .               }
      .           
181,683 ( 0.01%)      fn start_walk_from(&mut self, node: G::Node) -> WalkReturn<S> {
 80,748 ( 0.00%)          if let Some(result) = self.inspect_node(node) {
      .                       result
      .                   } else {
      .                       self.walk_unvisited_node(node)
      .                   }
201,870 ( 0.01%)      }
      .           
      .               /// Inspect a node during the DFS. We first examine its current
      .               /// state -- if it is not yet visited (`NotVisited`), return `None` so
      .               /// that the caller might push it onto the stack and start walking its
      .               /// successors.
      .               ///
      .               /// If it is already on the DFS stack it will be in the state
      .               /// `BeingVisited`. In that case, we have found a cycle and we
      .               /// return the depth from the stack.
      .               ///
      .               /// Otherwise, we are looking at a node that has already been
      .               /// completely visited. We therefore return `WalkReturn::Complete`
      .               /// with its associated SCC index.
246,268 ( 0.02%)      fn inspect_node(&mut self, node: G::Node) -> Option<WalkReturn<S>> {
492,536 ( 0.03%)          Some(match self.find_state(node) {
107,922 ( 0.01%)              NodeState::InCycle { scc_index } => WalkReturn::Complete { scc_index },
      .           
 16,218 ( 0.00%)              NodeState::BeingVisited { depth: min_depth } => WalkReturn::Cycle { min_depth },
      .           
      .                       NodeState::NotVisited => return None,
      .           
      .                       NodeState::InCycleWith { parent } => panic!(
      .                           "`find_state` returned `InCycleWith({:?})`, which ought to be impossible",
      .                           parent
      .                       ),
      .                   })
430,969 ( 0.03%)      }
      .           
      .               /// Fetches the state of the node `r`. If `r` is recorded as being
      .               /// in a cycle with some other node `r2`, then fetches the state
      .               /// of `r2` (and updates `r` to reflect current result). This is
      .               /// basically the "find" part of a standard union-find algorithm
      .               /// (with path compression).
      .               fn find_state(&mut self, mut node: G::Node) -> NodeState<G::Node, S> {
      .                   // To avoid recursion we temporarily reuse the `parent` of each
-- line 288 ----------------------------------------
-- line 299 ----------------------------------------
      .                   // following links downwards is then simply as soon as we have
      .                   // found the initial self-loop.
      .                   let mut previous_node = node;
      .           
      .                   // Ultimately assigned by the parent when following
      .                   // `InCycleWith` upwards.
      .                   let node_state = loop {
      .                       debug!("find_state(r = {:?} in state {:?})", node, self.node_states[node]);
478,714 ( 0.03%)              match self.node_states[node] {
143,896 ( 0.01%)                  NodeState::InCycle { scc_index } => break NodeState::InCycle { scc_index },
 21,624 ( 0.00%)                  NodeState::BeingVisited { depth } => break NodeState::BeingVisited { depth },
 20,187 ( 0.00%)                  NodeState::NotVisited => break NodeState::NotVisited,
  6,638 ( 0.00%)                  NodeState::InCycleWith { parent } => {
      .                               // We test this, to be extremely sure that we never
      .                               // ever break our termination condition for the
      .                               // reverse iteration loop.
  6,638 ( 0.00%)                      assert!(node != parent, "Node can not be in cycle with itself");
      .                               // Store the previous node as an inverted list link
 33,190 ( 0.00%)                      self.node_states[node] = NodeState::InCycleWith { parent: previous_node };
      .                               // Update to parent node.
      .                               previous_node = node;
      .                               node = parent;
      .                           }
      .                       }
      .                   };
      .           
      .                   // The states form a graph where up to one outgoing link is stored at
-- line 325 ----------------------------------------
-- line 355 ----------------------------------------
      .                   // We can then walk backwards, starting from `previous_node`, and assign
      .                   // each node in the list with the updated state. The loop terminates
      .                   // when we reach the self-cycle.
      .           
      .                   // Move backwards until we found the node where we started. We
      .                   // will know when we hit the state where previous_node == node.
      .                   loop {
      .                       // Back at the beginning, we can return.
 92,999 ( 0.01%)              if previous_node == node {
      .                           return node_state;
      .                       }
      .                       // Update to previous node in the link.
 13,276 ( 0.00%)              match self.node_states[previous_node] {
  6,638 ( 0.00%)                  NodeState::InCycleWith { parent: previous } => {
      .                               node = previous_node;
      .                               previous_node = previous;
      .                           }
      .                           // Only InCycleWith nodes were added to the reverse linked list.
      .                           other => panic!("Invalid previous link while compressing cycle: {:?}", other),
      .                       }
      .           
      .                       debug!("find_state: parent_state = {:?}", node_state);
      .           
      .                       // Update the node state from the parent state. The assigned
      .                       // state is actually a loop invariant but it will only be
      .                       // evaluated if there is at least one backlink to follow.
      .                       // Fully trusting llvm here to find this loop optimization.
 26,552 ( 0.00%)              match node_state {
      .                           // Path compression, make current node point to the same root.
      .                           NodeState::InCycle { .. } => {
 10,710 ( 0.00%)                      self.node_states[node] = node_state;
      .                           }
      .                           // Still visiting nodes, compress to cycle to the node
      .                           // at that depth.
  1,283 ( 0.00%)                  NodeState::BeingVisited { depth } => {
  2,566 ( 0.00%)                      self.node_states[node] =
  1,283 ( 0.00%)                          NodeState::InCycleWith { parent: self.node_stack[depth] };
      .                           }
      .                           // These are never allowed as parent nodes. InCycleWith
      .                           // should have been followed to a real parent and
      .                           // NotVisited can not be part of a cycle since it should
      .                           // have instead gotten explored.
      .                           NodeState::NotVisited | NodeState::InCycleWith { .. } => {
      .                               panic!("invalid parent state: {:?}", node_state)
      .                           }
      .                       }
      .                   }
123,134 ( 0.01%)      }
      .           
      .               /// Walks a node that has never been visited before.
      .               ///
      .               /// Call this method when `inspect_node` has returned `None`. Having the
      .               /// caller decide avoids mutual recursion between the two methods and allows
      .               /// us to maintain an allocated stack for nodes on the path between calls.
      .               #[instrument(skip(self, initial), level = "debug")]
      .               fn walk_unvisited_node(&mut self, initial: G::Node) -> WalkReturn<S> {
-- line 410 ----------------------------------------
-- line 418 ----------------------------------------
      .                       successor_node: G::Node,
      .                   }
      .           
      .                   // Move the stack to a local variable. We want to utilize the existing allocation and
      .                   // mutably borrow it without borrowing self at the same time.
      .                   let mut successors_stack = core::mem::take(&mut self.successors_stack);
      .                   debug_assert_eq!(successors_stack.len(), 0);
      .           
  2,030 ( 0.00%)          let mut stack: Vec<VisitingNodeFrame<G, _>> = vec![VisitingNodeFrame {
      .                       node: initial,
      .                       depth: 0,
      .                       min_depth: 0,
      .                       iter: None,
      .                       successors_len: 0,
      .                       min_cycle_root: initial,
      .                       successor_node: initial,
      .                   }];
      .           
      .                   let mut return_value = None;
      .           
 20,187 ( 0.00%)          'recurse: while let Some(frame) = stack.last_mut() {
      .                       let VisitingNodeFrame {
 80,130 ( 0.00%)                  node,
      .                           depth,
      .                           iter,
 80,168 ( 0.00%)                  successors_len,
      .                           min_depth,
      .                           min_cycle_root,
      .                           successor_node,
      .                       } = frame;
      .           
 40,084 ( 0.00%)              let node = *node;
 80,206 ( 0.00%)              let depth = *depth;
      .           
120,252 ( 0.01%)              let successors = match iter {
      .                           Some(iter) => iter,
      .                           None => {
      .                               // This None marks that we still have the initialize this node's frame.
      .                               debug!(?depth, ?node);
      .           
      .                               debug_assert!(matches!(self.node_states[node], NodeState::NotVisited));
      .           
      .                               // Push `node` onto the stack.
 80,748 ( 0.00%)                      self.node_states[node] = NodeState::BeingVisited { depth };
      .                               self.node_stack.push(node);
      .           
      .                               // Walk each successor of the node, looking to see if any of
      .                               // them can reach a node that is presently on the stack. If
      .                               // so, that means they can also reach us.
 40,374 ( 0.00%)                      *successors_len = successors_stack.len();
      .                               // Set and return a reference, this is currently empty.
 80,724 ( 0.00%)                      iter.get_or_insert(self.graph.successors(node))
      .                           }
      .                       };
      .           
      .                       // Now that iter is initialized, this is a constant for this frame.
 80,168 ( 0.00%)              let successors_len = *successors_len;
      .           
      .                       // Construct iterators for the nodes and walk results. There are two cases:
      .                       // * The walk of a successor node returned.
      .                       // * The remaining successor nodes.
      .                       let returned_walk =
      .                           return_value.take().into_iter().map(|walk| (*successor_node, Some(walk)));
      .           
      .                       let successor_walk = successors.by_ref().map(|successor_node| {
      .                           debug!(?node, ?successor_node);
124,140 ( 0.01%)                  (successor_node, self.inspect_node(successor_node))
      .                       });
      .           
162,966 ( 0.01%)              for (successor_node, walk) in returned_walk.chain(successor_walk) {
223,586 ( 0.01%)                  match walk {
      .                               Some(WalkReturn::Cycle { min_depth: successor_min_depth }) => {
      .                                   // Track the minimum depth we can reach.
 21,522 ( 0.00%)                          assert!(successor_min_depth <= depth);
 26,973 ( 0.00%)                          if successor_min_depth < *min_depth {
      .                                       debug!(?node, ?successor_min_depth);
 16,339 ( 0.00%)                              *min_depth = successor_min_depth;
  5,451 ( 0.00%)                              *min_cycle_root = successor_node;
      .                                   }
      .                               }
      .           
      .                               Some(WalkReturn::Complete { scc_index: successor_scc_index }) => {
      .                                   // Push the completed SCC indices onto
      .                                   // the `successors_stack` for later.
      .                                   debug!(?node, ?successor_scc_index);
      .                                   successors_stack.push(successor_scc_index);
      .                               }
      .           
      .                               None => {
 39,794 ( 0.00%)                          let depth = depth + 1;
      .                                   debug!(?depth, ?successor_node);
      .                                   // Remember which node the return value will come from.
 19,897 ( 0.00%)                          frame.successor_node = successor_node;
      .                                   // Start a new stack frame the step into it.
      .                                   stack.push(VisitingNodeFrame {
      .                                       node: successor_node,
      .                                       depth,
      .                                       iter: None,
      .                                       successors_len: 0,
      .                                       min_depth: depth,
      .                                       min_cycle_root: successor_node,
-- line 518 ----------------------------------------
-- line 531 ----------------------------------------
      .                       let frame = stack.pop().unwrap();
      .           
      .                       // If `min_depth == depth`, then we are the root of the
      .                       // cycle: we can't reach anyone further down the stack.
      .           
      .                       // Pass the 'return value' down the stack.
      .                       // We return one frame at a time so there can't be another return value.
      .                       debug_assert!(return_value.is_none());
 40,374 ( 0.00%)              return_value = Some(if frame.min_depth == depth {
      .                           // Note that successor stack may have duplicates, so we
      .                           // want to remove those:
      .                           let deduplicated_successors = {
      .                               let duplicate_set = &mut self.duplicate_set;
      .                               duplicate_set.clear();
      .                               successors_stack
      .                                   .drain(successors_len..)
 30,619 ( 0.00%)                          .filter(move |&i| duplicate_set.insert(i))
      .                           };
      .                           let scc_index = self.scc_data.create_scc(deduplicated_successors);
 88,992 ( 0.01%)                  self.node_states[node] = NodeState::InCycle { scc_index };
      .                           WalkReturn::Complete { scc_index }
      .                       } else {
      .                           // We are not the head of the cycle. Return back to our
      .                           // caller. They will take ownership of the
      .                           // `self.successors` data that we pushed.
 32,130 ( 0.00%)                  self.node_states[node] = NodeState::InCycleWith { parent: frame.min_cycle_root };
      .                           WalkReturn::Cycle { min_depth: frame.min_depth }
      .                       });
      .                   }
      .           
      .                   // Keep the allocation we used for successors_stack.
  2,610 ( 0.00%)          self.successors_stack = successors_stack;
      .                   debug_assert_eq!(self.successors_stack.len(), 0);
      .           
      .                   return_value.unwrap()
      .               }
      .           }

871,193 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/graph/scc/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs
--------------------------------------------------------------------------------
Ir                 

-- line 46 ----------------------------------------
        .           ///
        .           /// To implement this conveniently, use the derive macro located in `rustc_macros`.
        .           pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {
        .               /// Consumers may find this more convenient to use with infallible folders than
        .               /// [`try_super_fold_with`][`TypeFoldable::try_super_fold_with`], to which the
        .               /// provided default definition delegates.  Implementors **should not** override
        .               /// this provided default definition, to ensure that the two methods are coherent
        .               /// (provide a definition of `try_super_fold_with` instead).
2,518,962 ( 0.15%)      fn super_fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {
   62,284 ( 0.00%)          self.try_super_fold_with(folder).into_ok()
2,569,244 ( 0.16%)      }
        .               /// Consumers may find this more convenient to use with infallible folders than
        .               /// [`try_fold_with`][`TypeFoldable::try_fold_with`], to which the provided
        .               /// default definition delegates.  Implementors **should not** override this
        .               /// provided default definition, to ensure that the two methods are coherent
        .               /// (provide a definition of `try_fold_with` instead).
  234,983 ( 0.01%)      fn fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {
   81,981 ( 0.01%)          self.try_fold_with(folder).into_ok()
  216,538 ( 0.01%)      }
        .           
        .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error>;
        .           
2,573,531 ( 0.16%)      fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {
  634,070 ( 0.04%)          self.try_super_fold_with(folder)
2,596,470 ( 0.16%)      }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;
  332,326 ( 0.02%)      fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
  240,366 ( 0.01%)          self.super_visit_with(visitor)
  213,138 ( 0.01%)      }
        .           
        .               /// Returns `true` if `self` has any late-bound regions that are either
        .               /// bound by `binder` or bound by some binder outside of `binder`.
        .               /// If `binder` is `ty::INNERMOST`, this indicates whether
        .               /// there are any late-bound regions that appear free.
        .               fn has_vars_bound_at_or_above(&self, binder: ty::DebruijnIndex) -> bool {
  160,466 ( 0.01%)          self.visit_with(&mut HasEscapingVarsVisitor { outer_index: binder }).is_break()
        .               }
        .           
        .               /// Returns `true` if this `self` has any regions that escape `binder` (and
        .               /// hence are not bound by it).
        .               fn has_vars_bound_above(&self, binder: ty::DebruijnIndex) -> bool {
       90 ( 0.00%)          self.has_vars_bound_at_or_above(binder.shifted_in(1))
        .               }
        .           
  510,246 ( 0.03%)      fn has_escaping_bound_vars(&self) -> bool {
   47,808 ( 0.00%)          self.has_vars_bound_at_or_above(ty::INNERMOST)
  511,874 ( 0.03%)      }
        .           
   32,456 ( 0.00%)      #[instrument(level = "trace")]
        .               fn has_type_flags(&self, flags: TypeFlags) -> bool {
   25,679 ( 0.00%)          self.visit_with(&mut HasTypeFlagsVisitor { flags }).break_value() == Some(FoundFlags)
        .               }
        .               fn has_projections(&self) -> bool {
    4,566 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_PROJECTION)
        .               }
        .               fn has_opaque_types(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_TY_OPAQUE)
        .               }
   16,272 ( 0.00%)      fn references_error(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_ERROR)
   16,272 ( 0.00%)      }
        .               fn has_param_types_or_consts(&self) -> bool {
      213 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_TY_PARAM | TypeFlags::HAS_CT_PARAM)
        .               }
        .               fn has_infer_regions(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_RE_INFER)
        .               }
        .               fn has_infer_types(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_TY_INFER)
        .               }
        .               fn has_infer_types_or_consts(&self) -> bool {
  116,368 ( 0.01%)          self.has_type_flags(TypeFlags::HAS_TY_INFER | TypeFlags::HAS_CT_INFER)
        .               }
   23,224 ( 0.00%)      fn needs_infer(&self) -> bool {
   60,182 ( 0.00%)          self.has_type_flags(TypeFlags::NEEDS_INFER)
   23,600 ( 0.00%)      }
        .               fn has_placeholders(&self) -> bool {
        .                   self.has_type_flags(
        .                       TypeFlags::HAS_RE_PLACEHOLDER
        .                           | TypeFlags::HAS_TY_PLACEHOLDER
        .                           | TypeFlags::HAS_CT_PLACEHOLDER,
        .                   )
        .               }
        .               fn needs_subst(&self) -> bool {
-- line 133 ----------------------------------------
-- line 147 ----------------------------------------
        .               fn has_erasable_regions(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_FREE_REGIONS)
        .               }
        .           
        .               /// Indicates whether this value references only 'global'
        .               /// generic parameters that are the same regardless of what fn we are
        .               /// in. This is used for caching.
        .               fn is_global(&self) -> bool {
   28,811 ( 0.00%)          !self.has_type_flags(TypeFlags::HAS_FREE_LOCAL_NAMES)
        .               }
        .           
        .               /// True if there are any late-bound regions
        .               fn has_late_bound_regions(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_RE_LATE_BOUND)
        .               }
        .           
        .               /// Indicates whether this value still has parameters/placeholders/inference variables
-- line 163 ----------------------------------------
-- line 194 ----------------------------------------
        .           
        .               fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;
        .           
        .               fn fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Binder<'tcx, T>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
  503,570 ( 0.03%)          t.super_fold_with(self)
        .               }
        .           
        .               fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
  109,311 ( 0.01%)          t.super_fold_with(self)
        .               }
        .           
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
        .                   r.super_fold_with(self)
        .               }
        .           
        .               fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
    9,772 ( 0.00%)          c.super_fold_with(self)
        .               }
        .           
        .               fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
      705 ( 0.00%)          p.super_fold_with(self)
        .               }
        .           
        .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
        .                   bug!("most type folders should not be folding MIR datastructures: {:?}", c)
        .               }
-- line 238 ----------------------------------------
-- line 247 ----------------------------------------
        .           /// A blanket implementation of this trait (that defers to the relevant
        .           /// method of [`TypeFolder`]) is provided for all infallible folders in
        .           /// order to ensure the two APIs are coherent.
        .           pub trait FallibleTypeFolder<'tcx>: TypeFolder<'tcx> {
        .               fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
    7,639 ( 0.00%)          t.try_super_fold_with(self)
        .               }
        .           
        .               fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {
        .                   t.try_super_fold_with(self)
        .               }
        .           
        .               fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {
        .                   r.try_super_fold_with(self)
-- line 263 ----------------------------------------
-- line 269 ----------------------------------------
        .               ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {
        .                   c.try_super_fold_with(self)
        .               }
        .           
        .               fn try_fold_predicate(
        .                   &mut self,
        .                   p: ty::Predicate<'tcx>,
        .               ) -> Result<ty::Predicate<'tcx>, Self::Error> {
    1,635 ( 0.00%)          p.try_super_fold_with(self)
        .               }
        .           
        .               fn try_fold_mir_const(
        .                   &mut self,
        .                   c: mir::ConstantKind<'tcx>,
        .               ) -> Result<mir::ConstantKind<'tcx>, Self::Error> {
        .                   bug!("most type folders should not be folding MIR datastructures: {:?}", c)
        .               }
-- line 285 ----------------------------------------
-- line 286 ----------------------------------------
        .           }
        .           
        .           // Blanket implementation of fallible trait for infallible folders
        .           // delegates to infallible methods to prevent incoherence
        .           impl<'tcx, F> FallibleTypeFolder<'tcx> for F
        .           where
        .               F: TypeFolder<'tcx, Error = !>,
        .           {
   65,754 ( 0.00%)      fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  117,025 ( 0.01%)          Ok(self.fold_binder(t))
   97,319 ( 0.01%)      }
        .           
   29,516 ( 0.00%)      fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {
1,249,071 ( 0.08%)          Ok(self.fold_ty(t))
   20,597 ( 0.00%)      }
        .           
   21,864 ( 0.00%)      fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {
  226,437 ( 0.01%)          Ok(self.fold_region(r))
   21,864 ( 0.00%)      }
        .           
    1,408 ( 0.00%)      fn try_fold_const(
        .                   &mut self,
        .                   c: &'tcx ty::Const<'tcx>,
        .               ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {
    9,108 ( 0.00%)          Ok(self.fold_const(c))
    1,013 ( 0.00%)      }
        .           
        .               fn try_fold_predicate(
        .                   &mut self,
        .                   p: ty::Predicate<'tcx>,
        .               ) -> Result<ty::Predicate<'tcx>, Self::Error> {
        .                   Ok(self.fold_predicate(p))
        .               }
        .           
-- line 322 ----------------------------------------
-- line 330 ----------------------------------------
        .           
        .           pub trait TypeVisitor<'tcx>: Sized {
        .               type BreakTy = !;
        .           
        .               fn visit_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: &Binder<'tcx, T>,
        .               ) -> ControlFlow<Self::BreakTy> {
      954 ( 0.00%)          t.super_visit_with(self)
        .               }
        .           
        .               fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
   10,644 ( 0.00%)          t.super_visit_with(self)
        .               }
        .           
        .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   r.super_visit_with(self)
        .               }
        .           
        .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   c.super_visit_with(self)
-- line 350 ----------------------------------------
-- line 380 ----------------------------------------
        .               G: FnMut(ty::Region<'tcx>) -> ty::Region<'tcx>,
        .               H: FnMut(&'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>,
        .           {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
        .                   self.tcx
        .               }
        .           
        .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
    1,525 ( 0.00%)          let t = ty.super_fold_with(self);
        .                   (self.ty_op)(t)
        .               }
        .           
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
        .                   let r = r.super_fold_with(self);
        .                   (self.lt_op)(r)
        .               }
        .           
        .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
       37 ( 0.00%)          let ct = ct.super_fold_with(self);
        .                   (self.ct_op)(ct)
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Region folder
        .           
        .           impl<'tcx> TyCtxt<'tcx> {
-- line 406 ----------------------------------------
-- line 415 ----------------------------------------
        .               ) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   value.fold_with(&mut RegionFolder::new(self, skipped_regions, &mut f))
        .               }
        .           
        .               /// Invoke `callback` on every region appearing free in `value`.
    4,648 ( 0.00%)      pub fn for_each_free_region(
        .                   self,
        .                   value: &impl TypeFoldable<'tcx>,
        .                   mut callback: impl FnMut(ty::Region<'tcx>),
        .               ) {
        .                   self.any_free_region_meets(value, |r| {
   31,277 ( 0.00%)              callback(r);
        .                       false
        .                   });
    4,032 ( 0.00%)      }
        .           
        .               /// Returns `true` if `callback` returns true for every region appearing free in `value`.
        .               pub fn all_free_regions_meet(
        .                   self,
        .                   value: &impl TypeFoldable<'tcx>,
        .                   mut callback: impl FnMut(ty::Region<'tcx>) -> bool,
        .               ) -> bool {
    5,164 ( 0.00%)          !self.any_free_region_meets(value, |r| !callback(r))
        .               }
        .           
        .               /// Returns `true` if `callback` returns true for some region appearing free in `value`.
        .               pub fn any_free_region_meets(
        .                   self,
        .                   value: &impl TypeFoldable<'tcx>,
        .                   callback: impl FnMut(ty::Region<'tcx>) -> bool,
        .               ) -> bool {
-- line 448 ----------------------------------------
-- line 473 ----------------------------------------
        .                       F: FnMut(ty::Region<'tcx>) -> bool,
        .                   {
        .                       type BreakTy = ();
        .           
        .                       fn visit_binder<T: TypeFoldable<'tcx>>(
        .                           &mut self,
        .                           t: &Binder<'tcx, T>,
        .                       ) -> ControlFlow<Self::BreakTy> {
    1,629 ( 0.00%)                  self.outer_index.shift_in(1);
      764 ( 0.00%)                  let result = t.as_ref().skip_binder().visit_with(self);
      573 ( 0.00%)                  self.outer_index.shift_out(1);
        .                           result
        .                       }
        .           
   27,330 ( 0.00%)              fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
   46,562 ( 0.00%)                  match *r {
      632 ( 0.00%)                      ty::ReLateBound(debruijn, _) if debruijn < self.outer_index => {
        .                                   ControlFlow::CONTINUE
        .                               }
        .                               _ => {
        .                                   if (self.callback)(r) {
        .                                       ControlFlow::BREAK
        .                                   } else {
        .                                       ControlFlow::CONTINUE
        .                                   }
        .                               }
        .                           }
   38,262 ( 0.00%)              }
        .           
        .                       fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                           // We're only interested in types involving regions
   34,308 ( 0.00%)                  if ty.flags().intersects(TypeFlags::HAS_FREE_REGIONS) {
   37,705 ( 0.00%)                      ty.super_visit_with(self)
        .                           } else {
        .                               ControlFlow::CONTINUE
        .                           }
        .                       }
        .                   }
        .           
   73,007 ( 0.00%)          value.visit_with(&mut RegionVisitor { outer_index: ty::INNERMOST, callback }).is_break()
        .               }
        .           }
        .           
        .           /// Folds over the substructure of a type, visiting its component
        .           /// types and all regions that occur *free* within it.
        .           ///
        .           /// That is, `Ty` can contain function or method types that bind
        .           /// regions at the call site (`ReLateBound`), and occurrences of
-- line 520 ----------------------------------------
-- line 540 ----------------------------------------
        .           
        .           impl<'a, 'tcx> RegionFolder<'a, 'tcx> {
        .               #[inline]
        .               pub fn new(
        .                   tcx: TyCtxt<'tcx>,
        .                   skipped_regions: &'a mut bool,
        .                   fold_region_fn: &'a mut dyn FnMut(ty::Region<'tcx>, ty::DebruijnIndex) -> ty::Region<'tcx>,
        .               ) -> RegionFolder<'a, 'tcx> {
  184,690 ( 0.01%)          RegionFolder { tcx, skipped_regions, current_index: ty::INNERMOST, fold_region_fn }
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
   37,474 ( 0.00%)          self.tcx
   37,474 ( 0.00%)      }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: ty::Binder<'tcx, T>,
        .               ) -> ty::Binder<'tcx, T> {
    3,696 ( 0.00%)          self.current_index.shift_in(1);
    2,652 ( 0.00%)          let t = t.super_fold_with(self);
    3,099 ( 0.00%)          self.current_index.shift_out(1);
        .                   t
        .               }
        .           
    3,218 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
   32,038 ( 0.00%)          match *r {
    3,218 ( 0.00%)              ty::ReLateBound(debruijn, _) if debruijn < self.current_index => {
        .                           debug!(?self.current_index, "skipped bound region");
    3,218 ( 0.00%)                  *self.skipped_regions = true;
        .                           r
        .                       }
        .                       _ => {
        .                           debug!(?self.current_index, "folding free region");
   86,460 ( 0.01%)                  (self.fold_region_fn)(r, self.current_index)
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Bound vars replacer
        .           
-- line 585 ----------------------------------------
-- line 592 ----------------------------------------
        .               current_index: ty::DebruijnIndex,
        .           
        .               fld_r: Option<&'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a)>,
        .               fld_t: Option<&'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a)>,
        .               fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx> + 'a)>,
        .           }
        .           
        .           impl<'a, 'tcx> BoundVarReplacer<'a, 'tcx> {
   62,262 ( 0.00%)      fn new(
        .                   tcx: TyCtxt<'tcx>,
        .                   fld_r: Option<&'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a)>,
        .                   fld_t: Option<&'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a)>,
        .                   fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx> + 'a)>,
        .               ) -> Self {
  219,467 ( 0.01%)          BoundVarReplacer { tcx, current_index: ty::INNERMOST, fld_r, fld_t, fld_c }
   31,131 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for BoundVarReplacer<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
   37,475 ( 0.00%)          self.tcx
   10,104 ( 0.00%)      }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: ty::Binder<'tcx, T>,
        .               ) -> ty::Binder<'tcx, T> {
   39,396 ( 0.00%)          self.current_index.shift_in(1);
   10,680 ( 0.00%)          let t = t.super_fold_with(self);
   30,630 ( 0.00%)          self.current_index.shift_out(1);
        .                   t
        .               }
        .           
  142,295 ( 0.01%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
   92,598 ( 0.01%)          match *t.kind() {
    2,535 ( 0.00%)              ty::Bound(debruijn, bound_ty) if debruijn == self.current_index => {
      509 ( 0.00%)                  if let Some(fld_t) = self.fld_t.as_mut() {
        .                               let ty = fld_t(bound_ty);
      509 ( 0.00%)                      return ty::fold::shift_vars(self.tcx, &ty, self.current_index.as_u32());
        .                           }
        .                       }
   91,580 ( 0.01%)              _ if t.has_vars_bound_at_or_above(self.current_index) => {
  137,966 ( 0.01%)                  return t.super_fold_with(self);
        .                       }
        .                       _ => {}
        .                   }
        .                   t
   74,268 ( 0.00%)      }
        .           
  103,496 ( 0.01%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
   89,268 ( 0.01%)          match *r {
   89,102 ( 0.01%)              ty::ReLateBound(debruijn, br) if debruijn == self.current_index => {
   44,542 ( 0.00%)                  if let Some(fld_r) = self.fld_r.as_mut() {
        .                               let region = fld_r(br);
   90,086 ( 0.01%)                      return if let ty::ReLateBound(debruijn1, br) = *region {
        .                                   // If the callback returns a late-bound region,
        .                                   // that region should always use the INNERMOST
        .                                   // debruijn index. Then we adjust it to the
        .                                   // correct depth.
      501 ( 0.00%)                          assert_eq!(debruijn1, ty::INNERMOST);
    4,856 ( 0.00%)                          self.tcx.mk_region(ty::ReLateBound(debruijn, br))
        .                               } else {
        .                                   region
        .                               };
        .                           }
        .                       }
        .                       _ => {}
        .                   }
        .                   r
  103,496 ( 0.01%)      }
        .           
        .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
       42 ( 0.00%)          match *ct {
        .                       ty::Const { val: ty::ConstKind::Bound(debruijn, bound_const), ty }
        .                           if debruijn == self.current_index =>
        .                       {
        .                           if let Some(fld_c) = self.fld_c.as_mut() {
        .                               let ct = fld_c(bound_const, ty);
        .                               return ty::fold::shift_vars(self.tcx, &ct, self.current_index.as_u32());
        .                           }
        .                       }
       14 ( 0.00%)              _ if ct.has_vars_bound_at_or_above(self.current_index) => {
        .                           return ct.super_fold_with(self);
        .                       }
        .                       _ => {}
        .                   }
        .                   ct
        .               }
        .           }
        .           
-- line 681 ----------------------------------------
-- line 697 ----------------------------------------
        .                   mut fld_r: F,
        .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
        .               where
        .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   let mut region_map = BTreeMap::new();
        .                   let mut real_fld_r =
   82,805 ( 0.01%)              |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));
    2,225 ( 0.00%)          let value = value.skip_binder();
    9,741 ( 0.00%)          let value = if !value.has_escaping_bound_vars() {
   15,492 ( 0.00%)              value
        .                   } else {
   15,630 ( 0.00%)              let mut replacer = BoundVarReplacer::new(self, Some(&mut real_fld_r), None, None);
      880 ( 0.00%)              value.fold_with(&mut replacer)
        .                   };
   46,710 ( 0.00%)          (value, region_map)
        .               }
        .           
        .               /// Replaces all escaping bound vars. The `fld_r` closure replaces escaping
        .               /// bound regions; the `fld_t` closure replaces escaping bound types and the `fld_c`
        .               /// closure replaces escaping bound consts.
  226,901 ( 0.01%)      pub fn replace_escaping_bound_vars<T, F, G, H>(
        .                   self,
        .                   value: T,
        .                   mut fld_r: F,
        .                   mut fld_t: G,
        .                   mut fld_c: H,
        .               ) -> T
        .               where
        .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
        .                   G: FnMut(ty::BoundTy) -> Ty<'tcx>,
        .                   H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,
        .                   T: TypeFoldable<'tcx>,
        .               {
   33,625 ( 0.00%)          if !value.has_escaping_bound_vars() {
   48,554 ( 0.00%)              value
        .                   } else {
        .                       let mut replacer =
  350,510 ( 0.02%)                  BoundVarReplacer::new(self, Some(&mut fld_r), Some(&mut fld_t), Some(&mut fld_c));
   12,296 ( 0.00%)              value.fold_with(&mut replacer)
        .                   }
  155,861 ( 0.01%)      }
        .           
        .               /// Replaces all types or regions bound by the given `Binder`. The `fld_r`
        .               /// closure replaces bound regions while the `fld_t` closure replaces bound
        .               /// types.
  178,807 ( 0.01%)      pub fn replace_bound_vars<T, F, G, H>(
        .                   self,
        .                   value: Binder<'tcx, T>,
        .                   mut fld_r: F,
        .                   fld_t: G,
        .                   fld_c: H,
        .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
        .               where
        .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
        .                   G: FnMut(ty::BoundTy) -> Ty<'tcx>,
        .                   H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   let mut region_map = BTreeMap::new();
  203,226 ( 0.01%)          let real_fld_r = |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));
  179,980 ( 0.01%)          let value = self.replace_escaping_bound_vars(value.skip_binder(), real_fld_r, fld_t, fld_c);
  205,255 ( 0.01%)          (value, region_map)
  124,561 ( 0.01%)      }
        .           
        .               /// Replaces any late-bound regions bound in `value` with
        .               /// free variants attached to `all_outlive_scope`.
    8,140 ( 0.00%)      pub fn liberate_late_bound_regions<T>(
        .                   self,
        .                   all_outlive_scope: DefId,
        .                   value: ty::Binder<'tcx, T>,
        .               ) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   self.replace_late_bound_regions(value, |br| {
   13,091 ( 0.00%)              self.mk_region(ty::ReFree(ty::FreeRegion {
    2,014 ( 0.00%)                  scope: all_outlive_scope,
        .                           bound_region: br.kind,
        .                       }))
        .                   })
        .                   .0
    4,440 ( 0.00%)      }
        .           
        .               pub fn shift_bound_var_indices<T>(self, bound_vars: usize, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   self.replace_escaping_bound_vars(
   11,145 ( 0.00%)              value,
        .                       |r| {
        .                           self.mk_region(ty::ReLateBound(
        .                               ty::INNERMOST,
        .                               ty::BoundRegion {
        .                                   var: ty::BoundVar::from_usize(r.var.as_usize() + bound_vars),
        .                                   kind: r.kind,
        .                               },
        .                           ))
-- line 795 ----------------------------------------
-- line 843 ----------------------------------------
        .               fn collect_late_bound_regions<T>(
        .                   self,
        .                   value: &Binder<'tcx, T>,
        .                   just_constraint: bool,
        .               ) -> FxHashSet<ty::BoundRegionKind>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
    1,098 ( 0.00%)          let mut collector = LateBoundRegionsCollector::new(just_constraint);
        .                   let result = value.as_ref().skip_binder().visit_with(&mut collector);
        .                   assert!(result.is_continue()); // should never have stopped early
    2,088 ( 0.00%)          collector.regions
        .               }
        .           
        .               /// Replaces any late-bound regions bound in `value` with `'erased`. Useful in codegen but also
        .               /// method lookup and a few other places where precise region relationships are not required.
        .               pub fn erase_late_bound_regions<T>(self, value: Binder<'tcx, T>) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
    5,260 ( 0.00%)          self.replace_late_bound_regions(value, |_| self.lifetimes.re_erased).0
        .               }
        .           
        .               /// Rewrite any late-bound regions so that they are anonymous. Region numbers are
        .               /// assigned starting at 0 and increasing monotonically in the order traversed
        .               /// by the fold operation.
        .               ///
        .               /// The chief purpose of this function is to canonicalize regions so that two
        .               /// `FnSig`s or `TraitRef`s which are equivalent up to region naming will become
        .               /// structurally identical. For example, `for<'a, 'b> fn(&'a isize, &'b isize)` and
        .               /// `for<'a, 'b> fn(&'b isize, &'a isize)` will become identical after anonymization.
   21,003 ( 0.00%)      pub fn anonymize_late_bound_regions<T>(self, sig: Binder<'tcx, T>) -> Binder<'tcx, T>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
   15,055 ( 0.00%)          let mut counter = 0;
    1,059 ( 0.00%)          let inner = self
        .                       .replace_late_bound_regions(sig, |_| {
        .                           let br = ty::BoundRegion {
      922 ( 0.00%)                      var: ty::BoundVar::from_u32(counter),
        .                               kind: ty::BrAnon(counter),
        .                           };
    3,688 ( 0.00%)                  let r = self.mk_region(ty::ReLateBound(ty::INNERMOST, br));
    2,305 ( 0.00%)                  counter += 1;
        .                           r
        .                       })
        .                       .0;
    3,011 ( 0.00%)          let bound_vars = self.mk_bound_variable_kinds(
    9,033 ( 0.00%)              (0..counter).map(|i| ty::BoundVariableKind::Region(ty::BrAnon(i))),
        .                   );
   16,452 ( 0.00%)          Binder::bind_with_vars(inner, bound_vars)
   18,124 ( 0.00%)      }
        .           }
        .           
        .           pub struct ValidateBoundVars<'tcx> {
        .               bound_vars: &'tcx ty::List<ty::BoundVariableKind>,
        .               binder_index: ty::DebruijnIndex,
        .               // We may encounter the same variable at different levels of binding, so
        .               // this can't just be `Ty`
        .               visited: SsoHashSet<(ty::DebruijnIndex, Ty<'tcx>)>,
-- line 902 ----------------------------------------
-- line 1004 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               current_index: ty::DebruijnIndex,
        .               amount: u32,
        .           }
        .           
        .           impl<'tcx> Shifter<'tcx> {
        .               pub fn new(tcx: TyCtxt<'tcx>, amount: u32) -> Self {
        .                   Shifter { tcx, current_index: ty::INNERMOST, amount }
    1,026 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeFolder<'tcx> for Shifter<'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
       20 ( 0.00%)          self.tcx
        .               }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: ty::Binder<'tcx, T>,
        .               ) -> ty::Binder<'tcx, T> {
        .                   self.current_index.shift_in(1);
        .                   let t = t.super_fold_with(self);
        .                   self.current_index.shift_out(1);
        .                   t
        .               }
        .           
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
       16 ( 0.00%)          match *r {
        .                       ty::ReLateBound(debruijn, br) => {
       32 ( 0.00%)                  if self.amount == 0 || debruijn < self.current_index {
        .                               r
        .                           } else {
        8 ( 0.00%)                      let debruijn = debruijn.shifted_in(self.amount);
        .                               let shifted = ty::ReLateBound(debruijn, br);
       80 ( 0.00%)                      self.tcx.mk_region(shifted)
        .                           }
        .                       }
        .                       _ => r,
        .                   }
        .               }
        .           
        .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
    1,042 ( 0.00%)          match *ty.kind() {
        .                       ty::Bound(debruijn, bound_ty) => {
        .                           if self.amount == 0 || debruijn < self.current_index {
        .                               ty
        .                           } else {
        .                               let debruijn = debruijn.shifted_in(self.amount);
        .                               self.tcx.mk_ty(ty::Bound(debruijn, bound_ty))
        .                           }
        .                       }
        .           
    1,593 ( 0.00%)              _ => ty.super_fold_with(self),
        .                   }
        .               }
        .           
        .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
        .                   if let ty::Const { val: ty::ConstKind::Bound(debruijn, bound_ct), ty } = *ct {
        .                       if self.amount == 0 || debruijn < self.current_index {
        .                           ct
        .                       } else {
-- line 1064 ----------------------------------------
-- line 1073 ----------------------------------------
        .           
        .           pub fn shift_region<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               region: ty::Region<'tcx>,
        .               amount: u32,
        .           ) -> ty::Region<'tcx> {
        .               match region {
        .                   ty::ReLateBound(debruijn, br) if amount > 0 => {
    5,148 ( 0.00%)              tcx.mk_region(ty::ReLateBound(debruijn.shifted_in(amount), *br))
        .                   }
        .                   _ => region,
        .               }
        .           }
        .           
        .           pub fn shift_vars<'tcx, T>(tcx: TyCtxt<'tcx>, value: T, amount: u32) -> T
        .           where
        .               T: TypeFoldable<'tcx>,
        .           {
        .               debug!("shift_vars(value={:?}, amount={})", value, amount);
        .           
    1,066 ( 0.00%)      value.fold_with(&mut Shifter::new(tcx, amount))
        .           }
        .           
        .           #[derive(Debug, PartialEq, Eq, Copy, Clone)]
        .           struct FoundEscapingVars;
        .           
        .           /// An "escaping var" is a bound var whose binder is not part of `t`. A bound var can be a
        .           /// bound region or a bound type.
        .           ///
-- line 1101 ----------------------------------------
-- line 1128 ----------------------------------------
        .           
        .           impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {
        .               type BreakTy = FoundEscapingVars;
        .           
        .               fn visit_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: &Binder<'tcx, T>,
        .               ) -> ControlFlow<Self::BreakTy> {
   17,864 ( 0.00%)          self.outer_index.shift_in(1);
        .                   let result = t.super_visit_with(self);
   23,785 ( 0.00%)          self.outer_index.shift_out(1);
        .                   result
        .               }
        .           
        .               #[inline]
        .               fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   // If the outer-exclusive-binder is *strictly greater* than
        .                   // `outer_index`, that means that `t` contains some content
        .                   // bound at `outer_index` or above (because
-- line 1146 ----------------------------------------
-- line 1160 ----------------------------------------
        .                   // visited.
        .                   if r.bound_at_or_above_binder(self.outer_index) {
        .                       ControlFlow::Break(FoundEscapingVars)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
       30 ( 0.00%)      fn visit_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   // we don't have a `visit_infer_const` callback, so we have to
        .                   // hook in here to catch this case (annoying...), but
        .                   // otherwise we do want to remember to visit the rest of the
        .                   // const, as it has types/regions embedded in a lot of other
        .                   // places.
       45 ( 0.00%)          match ct.val {
        .                       ty::ConstKind::Bound(debruijn, _) if debruijn >= self.outer_index => {
        .                           ControlFlow::Break(FoundEscapingVars)
        .                       }
        .                       _ => ct.super_visit_with(self),
        .                   }
       30 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   if predicate.inner.outer_exclusive_binder > self.outer_index {
        .                       ControlFlow::Break(FoundEscapingVars)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
-- line 1188 ----------------------------------------
-- line 1210 ----------------------------------------
        .               #[instrument(level = "trace")]
        .               fn visit_ty(&mut self, t: Ty<'_>) -> ControlFlow<Self::BreakTy> {
        .                   debug!(
        .                       "HasTypeFlagsVisitor: t={:?} t.flags={:?} self.flags={:?}",
        .                       t,
        .                       t.flags(),
        .                       self.flags
        .                   );
  177,167 ( 0.01%)          if t.flags().intersects(self.flags) {
        .                       ControlFlow::Break(FoundFlags)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
        .               #[inline]
        .               #[instrument(skip(self), level = "trace")]
        .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
   10,683 ( 0.00%)          let flags = r.type_flags();
        .                   trace!(r.flags=?flags);
        .                   if flags.intersects(self.flags) {
        .                       ControlFlow::Break(FoundFlags)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
        .               #[inline]
        .               #[instrument(level = "trace")]
        .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
    2,953 ( 0.00%)          let flags = FlagComputation::for_const(c);
        .                   trace!(r.flags=?flags);
    3,848 ( 0.00%)          if flags.intersects(self.flags) {
        .                       ControlFlow::Break(FoundFlags)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
        .               #[inline]
        .               #[instrument(level = "trace")]
        .               fn visit_unevaluated_const(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {
      686 ( 0.00%)          let flags = FlagComputation::for_unevaluated_const(uv);
        .                   trace!(r.flags=?flags);
        .                   if flags.intersects(self.flags) {
        .                       ControlFlow::Break(FoundFlags)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
-- line 1260 ----------------------------------------
-- line 1285 ----------------------------------------
        .               /// them constraints `'a == 'b`. But if you have `<&'a u32 as
        .               /// Trait>::Foo` and `<&'b u32 as Trait>::Foo`, normalizing those
        .               /// types may mean that `'a` and `'b` don't appear in the results,
        .               /// so they are not considered *constrained*.
        .               just_constrained: bool,
        .           }
        .           
        .           impl LateBoundRegionsCollector {
      522 ( 0.00%)      fn new(just_constrained: bool) -> Self {
    3,654 ( 0.00%)          LateBoundRegionsCollector {
        .                       current_index: ty::INNERMOST,
        .                       regions: Default::default(),
        .                       just_constrained,
        .                   }
      522 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {
        .               fn visit_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: &Binder<'tcx, T>,
        .               ) -> ControlFlow<Self::BreakTy> {
       24 ( 0.00%)          self.current_index.shift_in(1);
       24 ( 0.00%)          let result = t.super_visit_with(self);
       24 ( 0.00%)          self.current_index.shift_out(1);
        .                   result
        .               }
        .           
    2,109 ( 0.00%)      fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   // if we are only looking for "constrained" region, we have to
        .                   // ignore the inputs to a projection, as they may not appear
        .                   // in the normalized form
    2,002 ( 0.00%)          if self.just_constrained {
    2,120 ( 0.00%)              if let ty::Projection(..) | ty::Opaque(..) = t.kind() {
        .                           return ControlFlow::CONTINUE;
        .                       }
        .                   }
        .           
    2,286 ( 0.00%)          t.super_visit_with(self)
    1,408 ( 0.00%)      }
        .           
        .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   // if we are only looking for "constrained" region, we have to
        .                   // ignore the inputs of an unevaluated const, as they may not appear
        .                   // in the normalized form
        2 ( 0.00%)          if self.just_constrained {
        2 ( 0.00%)              if let ty::ConstKind::Unevaluated(..) = c.val {
        .                           return ControlFlow::CONTINUE;
        .                       }
        .                   }
        .           
        .                   c.super_visit_with(self)
        .               }
        .           
        .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
    2,043 ( 0.00%)          if let ty::ReLateBound(debruijn, br) = *r {
      377 ( 0.00%)              if debruijn == self.current_index {
        .                           self.regions.insert(br.kind);
        .                       }
        .                   }
        .                   ControlFlow::CONTINUE
        .               }
        .           }

  196,226 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs
--------------------------------------------------------------------------------
Ir                 

-- line 346 ----------------------------------------
        .               ///
        .               /// let c = Cell::new(5);
        .               ///
        .               /// c.set(10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn set(&self, val: T) {
    2,459 ( 0.00%)          let old = self.replace(val);
    1,128 ( 0.00%)          drop(old);
        .               }
        .           
        .               /// Swaps the values of two `Cell`s.
        .               /// Difference with `std::mem::swap` is that this function doesn't require `&mut` reference.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 363 ----------------------------------------
-- line 434 ----------------------------------------
        .               ///
        .               /// let five = c.get();
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn get(&self) -> T {
        .                   // SAFETY: This can cause data races if called from a separate thread,
        .                   // but `Cell` is `!Sync` so this won't happen.
  182,173 ( 0.01%)          unsafe { *self.value.get() }
        .               }
        .           
        .               /// Updates the contained value using a function and returns the new value.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// #![feature(cell_update)]
-- line 450 ----------------------------------------
-- line 689 ----------------------------------------
        .           
        .           #[inline(always)]
        .           fn is_writing(x: BorrowFlag) -> bool {
        .               x < UNUSED
        .           }
        .           
        .           #[inline(always)]
        .           fn is_reading(x: BorrowFlag) -> bool {
  382,012 ( 0.02%)      x > UNUSED
        .           }
        .           
        .           impl<T> RefCell<T> {
        .               /// Creates a new `RefCell` containing `value`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 705 ----------------------------------------
-- line 706 ----------------------------------------
        .               /// use std::cell::RefCell;
        .               ///
        .               /// let c = RefCell::new(5);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_refcell_new", since = "1.24.0")]
        .               #[inline]
        .               pub const fn new(value: T) -> RefCell<T> {
   42,548 ( 0.00%)          RefCell {
   35,468 ( 0.00%)              value: UnsafeCell::new(value),
        .                       borrow: Cell::new(UNUSED),
        .                       #[cfg(feature = "debug_refcell")]
        .                       borrowed_at: Cell::new(None),
        .                   }
        .               }
        .           
        .               /// Consumes the `RefCell`, returning the wrapped value.
        .               ///
-- line 723 ----------------------------------------
-- line 731 ----------------------------------------
        .               /// let five = c.into_inner();
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_cell_into_inner", issue = "78729")]
        .               #[inline]
        .               pub const fn into_inner(self) -> T {
        .                   // Since this function takes `self` (the `RefCell`) by value, the
        .                   // compiler statically verifies that it is not currently borrowed.
    2,172 ( 0.00%)          self.value.into_inner()
        .               }
        .           
        .               /// Replaces the wrapped value with a new one, returning the old value,
        .               /// without deinitializing either one.
        .               ///
        .               /// This function corresponds to [`std::mem::replace`](../mem/fn.replace.html).
        .               ///
        .               /// # Panics
-- line 747 ----------------------------------------
-- line 845 ----------------------------------------
        .               /// let c = RefCell::new(5);
        .               ///
        .               /// let m = c.borrow_mut();
        .               /// let b = c.borrow(); // this causes a panic
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               #[track_caller]
    4,470 ( 0.00%)      pub fn borrow(&self) -> Ref<'_, T> {
        .                   self.try_borrow().expect("already mutably borrowed")
   13,410 ( 0.00%)      }
        .           
        .               /// Immutably borrows the wrapped value, returning an error if the value is currently mutably
        .               /// borrowed.
        .               ///
        .               /// The borrow lasts until the returned `Ref` exits scope. Multiple immutable borrows can be
        .               /// taken out at the same time.
        .               ///
        .               /// This is the non-panicking variant of [`borrow`](#method.borrow).
-- line 863 ----------------------------------------
-- line 937 ----------------------------------------
        .               /// let c = RefCell::new(5);
        .               /// let m = c.borrow();
        .               ///
        .               /// let b = c.borrow_mut(); // this causes a panic
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               #[track_caller]
   21,237 ( 0.00%)      pub fn borrow_mut(&self) -> RefMut<'_, T> {
        .                   self.try_borrow_mut().expect("already borrowed")
   63,711 ( 0.00%)      }
        .           
        .               /// Mutably borrows the wrapped value, returning an error if the value is currently borrowed.
        .               ///
        .               /// The borrow lasts until the returned `RefMut` or all `RefMut`s derived
        .               /// from it exit scope. The value cannot be borrowed while this borrow is
        .               /// active.
        .               ///
        .               /// This is the non-panicking variant of [`borrow_mut`](#method.borrow_mut).
-- line 955 ----------------------------------------
-- line 975 ----------------------------------------
        .                   match BorrowRefMut::new(&self.borrow) {
        .                       Some(b) => {
        .                           #[cfg(feature = "debug_refcell")]
        .                           {
        .                               self.borrowed_at.set(Some(crate::panic::Location::caller()));
        .                           }
        .           
        .                           // SAFETY: `BorrowRef` guarantees unique access.
       22 ( 0.00%)                  Ok(RefMut { value: unsafe { &mut *self.value.get() }, borrow: b })
        .                       }
        .                       None => Err(BorrowMutError {
        .                           // If a borrow occurred, then we must already have an outstanding borrow,
        .                           // so `borrowed_at` will be `Some`
        .                           #[cfg(feature = "debug_refcell")]
        .                           location: self.borrowed_at.get().unwrap(),
        .                       }),
        .                   }
-- line 991 ----------------------------------------
-- line 1254 ----------------------------------------
        .           
        .           struct BorrowRef<'b> {
        .               borrow: &'b Cell<BorrowFlag>,
        .           }
        .           
        .           impl<'b> BorrowRef<'b> {
        .               #[inline]
        .               fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRef<'b>> {
  472,125 ( 0.03%)          let b = borrow.get().wrapping_add(1);
  297,651 ( 0.02%)          if !is_reading(b) {
        .                       // Incrementing borrow can result in a non-reading value (<= 0) in these cases:
        .                       // 1. It was < 0, i.e. there are writing borrows, so we can't allow a read borrow
        .                       //    due to Rust's reference aliasing rules
        .                       // 2. It was isize::MAX (the max amount of reading borrows) and it overflowed
        .                       //    into isize::MIN (the max amount of writing borrows) so we can't allow
        .                       //    an additional read borrow because isize can't represent so many read borrows
        .                       //    (this can only happen if you mem::forget more than a small constant amount of
        .                       //    `Ref`s, which is not good practice)
-- line 1271 ----------------------------------------
-- line 1279 ----------------------------------------
        .                       Some(BorrowRef { borrow })
        .                   }
        .               }
        .           }
        .           
        .           impl Drop for BorrowRef<'_> {
        .               #[inline]
        .               fn drop(&mut self) {
  195,482 ( 0.01%)          let borrow = self.borrow.get();
        .                   debug_assert!(is_reading(borrow));
  388,035 ( 0.02%)          self.borrow.set(borrow - 1);
        .               }
        .           }
        .           
        .           impl Clone for BorrowRef<'_> {
        .               #[inline]
        .               fn clone(&self) -> Self {
        .                   // Since this Ref exists, we know the borrow flag
        .                   // is a reading borrow.
-- line 1297 ----------------------------------------
-- line 1645 ----------------------------------------
        .           
        .           struct BorrowRefMut<'b> {
        .               borrow: &'b Cell<BorrowFlag>,
        .           }
        .           
        .           impl Drop for BorrowRefMut<'_> {
        .               #[inline]
        .               fn drop(&mut self) {
3,147,110 ( 0.19%)          let borrow = self.borrow.get();
        .                   debug_assert!(is_writing(borrow));
6,194,235 ( 0.38%)          self.borrow.set(borrow + 1);
        .               }
        .           }
        .           
        .           impl<'b> BorrowRefMut<'b> {
        .               #[inline]
        .               fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRefMut<'b>> {
        .                   // NOTE: Unlike BorrowRefMut::clone, new is called to create the initial
        .                   // mutable reference, and so there must currently be no existing
        .                   // references. Thus, while clone increments the mutable refcount, here
        .                   // we explicitly only allow going from UNUSED to UNUSED - 1.
6,455,766 ( 0.40%)          match borrow.get() {
        .                       UNUSED => {
        .                           borrow.set(UNUSED - 1);
        .                           Some(BorrowRefMut { borrow })
        .                       }
        .                       _ => None,
        .                   }
        .               }
        .           
-- line 1674 ----------------------------------------
-- line 1711 ----------------------------------------
        .                   self.value
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: ?Sized> DerefMut for RefMut<'_, T> {
        .               #[inline]
        .               fn deref_mut(&mut self) -> &mut T {
      610 ( 0.00%)          self.value
        .               }
        .           }
        .           
        .           #[unstable(feature = "coerce_unsized", issue = "27732")]
        .           impl<'b, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<RefMut<'b, U>> for RefMut<'b, T> {}
        .           
        .           #[stable(feature = "std_guard_impls", since = "1.20.0")]
        .           impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {
-- line 1727 ----------------------------------------
-- line 1909 ----------------------------------------
        .               /// ```
        .               #[inline(always)]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_unsafecell_get", since = "1.32.0")]
        .               pub const fn get(&self) -> *mut T {
        .                   // We can just cast the pointer from `UnsafeCell<T>` to `T` because of
        .                   // #[repr(transparent)]. This exploits libstd's special status, there is
        .                   // no guarantee for user code that this will work in future versions of the compiler!
2,054,605 ( 0.13%)          self as *const UnsafeCell<T> as *const T as *mut T
        .               }
        .           
        .               /// Returns a mutable reference to the underlying data.
        .               ///
        .               /// This call borrows the `UnsafeCell` mutably (at compile-time) which
        .               /// guarantees that we possess the only reference.
        .               ///
        .               /// # Examples
-- line 1925 ----------------------------------------

4,616,046 ( 0.28%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 111 ----------------------------------------
         .           const EMPTY: u8 = 0b1111_1111;
         .           
         .           /// Control byte value for a deleted bucket.
         .           const DELETED: u8 = 0b1000_0000;
         .           
         .           /// Checks whether a control byte represents a full bucket (top bit is clear).
         .           #[inline]
         .           fn is_full(ctrl: u8) -> bool {
 1,944,018 ( 0.12%)      ctrl & 0x80 == 0
         .           }
         .           
         .           /// Checks whether a control byte represents a special value (top bit is set).
         .           #[inline]
         .           fn is_special(ctrl: u8) -> bool {
         .               ctrl & 0x80 != 0
         .           }
         .           
         .           /// Checks whether a special control value is EMPTY (just check 1 bit).
         .           #[inline]
         .           fn special_is_empty(ctrl: u8) -> bool {
         .               debug_assert!(is_special(ctrl));
   111,037 ( 0.01%)      ctrl & 0x01 != 0
         .           }
         .           
         .           /// Primary hash function, used to select the initial bucket to probe from.
         .           #[inline]
         .           #[allow(clippy::cast_possible_truncation)]
         .           fn h1(hash: u64) -> usize {
         .               // On 32-bit platforms we simply ignore the higher hash bits.
         .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
         .           /// Secondary hash function, saved in the low 7 bits of the control byte.
         .           #[inline]
         .           #[allow(clippy::cast_possible_truncation)]
         .           fn h2(hash: u64) -> u8 {
         .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
         .               // value, some hash functions (such as FxHash) produce a usize result
         .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
         .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
32,212,082 ( 1.98%)      let top7 = hash >> (hash_len * 8 - 7);
         .               (top7 & 0x7f) as u8 // truncation
         .           }
         .           
         .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
         .           /// table size is a power of two) to visit every group of elements exactly once.
         .           ///
         .           /// A triangular probe has us jump by 1 more group every time. So first we
         .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
         .               #[inline]
         .               fn move_next(&mut self, bucket_mask: usize) {
         .                   // We should have found an empty bucket by now and ended the probe.
         .                   debug_assert!(
         .                       self.stride <= bucket_mask,
         .                       "Went past end of probe sequence"
         .                   );
         .           
   223,516 ( 0.01%)          self.stride += Group::WIDTH;
   223,516 ( 0.01%)          self.pos += self.stride;
   184,628 ( 0.01%)          self.pos &= bucket_mask;
         .               }
         .           }
         .           
         .           /// Returns the number of buckets needed to hold the given number of items,
         .           /// taking the maximum load factor into account.
         .           ///
         .           /// Returns `None` if an overflow occurs.
         .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
         .           #[cfg_attr(target_os = "emscripten", inline(never))]
         .           #[cfg_attr(not(target_os = "emscripten"), inline)]
         .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
         .               debug_assert_ne!(cap, 0);
         .           
         .               // For small tables we require at least 1 empty bucket so that lookups are
         .               // guaranteed to terminate if an element doesn't exist in the table.
   109,822 ( 0.01%)      if cap < 8 {
         .                   // We don't bother with a table size of 2 buckets since that can only
         .                   // hold a single element. Instead we skip directly to a 4 bucket table
         .                   // which can hold 3 elements.
   227,385 ( 0.01%)          return Some(if cap < 4 { 4 } else { 8 });
         .               }
         .           
         .               // Otherwise require 1/8 buckets to be empty (87.5% load)
         .               //
         .               // Be careful when modifying this, calculate_layout relies on the
         .               // overflow check here.
    56,604 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
         .           
         .               // Any overflows will have been caught by the checked_mul. Also, any
         .               // rounding errors from the division above will be cleaned up by
         .               // next_power_of_two (which can't overflow because of the previous division).
         .               Some(adjusted_cap.next_power_of_two())
         .           }
         .           
         .           /// Returns the maximum effective capacity for the given bucket mask, taking
         .           /// the maximum load factor into account.
         .           #[inline]
         .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
   297,142 ( 0.02%)      if bucket_mask < 8 {
         .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
         .                   // Keep in mind that the bucket mask is one less than the bucket count.
         .                   bucket_mask
         .               } else {
         .                   // For larger tables we reserve 12.5% of the slots as empty.
    96,498 ( 0.01%)          ((bucket_mask + 1) / 8) * 7
         .               }
         .           }
         .           
         .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
         .           /// while keeping the rest of `calculate_layout_for` independent of `T`
         .           #[derive(Copy, Clone)]
         .           struct TableLayout {
         .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
         .           
         .               #[inline]
         .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   let TableLayout { size, ctrl_align } = self;
         .                   // Manual layout calculation since Layout methods are not yet stable.
         .                   let ctrl_offset =
   230,482 ( 0.01%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
   302,579 ( 0.02%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
         .           
         .                   Some((
         .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
         .                       ctrl_offset,
         .                   ))
         .               }
         .           }
         .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
         .                   }
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub unsafe fn drop(&self) {
         .                   self.as_ptr().drop_in_place();
         .               }
         .               #[inline]
         .               pub unsafe fn read(&self) -> T {
     1,912 ( 0.00%)          self.as_ptr().read()
         .               }
         .               #[inline]
         .               pub unsafe fn write(&self, val: T) {
         .                   self.as_ptr().write(val);
         .               }
         .               #[inline]
         .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
         .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
         .               /// Creates a new empty hash table without allocating any memory, using the
         .               /// given allocator.
         .               ///
         .               /// In effect this returns a table with exactly 1 bucket. However we can
         .               /// leave the data pointer dangling since that bucket is never written to
         .               /// due to our load factor forcing us to always have at least 1 free bucket.
         .               #[inline]
         .               pub fn new_in(alloc: A) -> Self {
     1,482 ( 0.00%)          Self {
         .                       table: RawTableInner::new_in(alloc),
         .                       marker: PhantomData,
         .                   }
         .               }
         .           
         .               /// Allocates a new hash table with the given number of buckets.
         .               ///
         .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
         .               unsafe fn new_uninitialized(
         .                   alloc: A,
         .                   buckets: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   Ok(Self {
       310 ( 0.00%)              table: RawTableInner::new_uninitialized(
         .                           alloc,
         .                           TableLayout::new::<T>(),
         .                           buckets,
         .                           fallibility,
         .                       )?,
         .                       marker: PhantomData,
         .                   })
         .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
         .               /// Attempts to allocate a new hash table with at least enough capacity
         .               /// for inserting the given number of elements without reallocating.
         .               fn fallible_with_capacity(
         .                   alloc: A,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   Ok(Self {
    14,007 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
         .                           alloc,
         .                           TableLayout::new::<T>(),
         .                           capacity,
         .                           fallibility,
         .                       )?,
         .                       marker: PhantomData,
         .                   })
         .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
         .                   debug_assert_ne!(self.table.bucket_mask, 0);
         .                   debug_assert!(index < self.buckets());
         .                   Bucket::from_base_index(self.data_end(), index)
         .               }
         .           
         .               /// Erases an element from the table without dropping it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    22,811 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    22,811 ( 0.00%)          let index = self.bucket_index(item);
         .                   self.table.erase(index);
    45,622 ( 0.00%)      }
         .           
         .               /// Erases an element from the table, dropping it in place.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::needless_pass_by_value)]
         .               #[allow(deprecated)]
         .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
         .                   // Erase the element from the table first since drop might panic.
    13,516 ( 0.00%)          self.erase_no_drop(&item);
         .                   item.drop();
         .               }
         .           
         .               /// Finds and erases an element from the table, dropping it in place.
         .               /// Returns true if an element was found.
         .               #[cfg(feature = "raw")]
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// Removes an element from the table, returning it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::needless_pass_by_value)]
         .               #[allow(deprecated)]
         .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    32,106 ( 0.00%)          self.erase_no_drop(&item);
       173 ( 0.00%)          item.read()
         .               }
         .           
         .               /// Finds and removes an element from the table, returning it.
         .               #[cfg_attr(feature = "inline-more", inline)]
   636,926 ( 0.04%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
       530 ( 0.00%)          match self.find(hash, eq) {
    12,756 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
   167,414 ( 0.01%)              None => None,
         .                   }
   891,731 ( 0.05%)      }
         .           
         .               /// Marks all table buckets as empty without dropping their contents.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn clear_no_drop(&mut self) {
         .                   self.table.clear_no_drop();
         .               }
         .           
         .               /// Removes all elements from the table without freeing the backing memory.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn clear(&mut self) {
         .                   // Ensure that the table is reset even if one of the drops panic
         .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
         .                   unsafe {
         1 ( 0.00%)              self_.drop_elements();
         .                   }
         .               }
         .           
         7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
     8,860 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
         .                       for item in self.iter() {
         .                           item.drop();
         .                       }
         .                   }
         8 ( 0.00%)      }
         .           
         .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
         .                   // Calculate the minimal number of elements that we need to reserve
         .                   // space for.
         .                   let min_size = usize::max(self.table.items, min_size);
         .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
         .                       }
         .                   }
         .               }
         .           
         .               /// Ensures that at least `additional` items can be inserted into the table
         .               /// without reallocation.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
   314,338 ( 0.02%)          if additional > self.table.growth_left {
         .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
   193,550 ( 0.01%)              if self
         .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
         .                           .is_err()
         .                       {
         .                           unsafe { hint::unreachable_unchecked() }
         .                       }
         .                   }
         .               }
         .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
         .                   } else {
         .                       Ok(())
         .                   }
         .               }
         .           
         .               /// Out-of-line slow path for `reserve` and `try_reserve`.
         .               #[cold]
         .               #[inline(never)]
   430,712 ( 0.03%)      fn reserve_rehash(
         .                   &mut self,
         .                   additional: usize,
         .                   hasher: impl Fn(&T) -> u64,
         .                   fallibility: Fallibility,
         .               ) -> Result<(), TryReserveError> {
         .                   unsafe {
         .                       self.table.reserve_rehash_inner(
         .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
         .                           TableLayout::new::<T>(),
         .                           if mem::needs_drop::<T>() {
         .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
         .                           } else {
         .                               None
         .                           },
         .                       )
         .                   }
   300,952 ( 0.02%)      }
         .           
         .               /// Allocates a new table of a different size and moves the contents of the
         .               /// current table into it.
         .               fn resize(
         .                   &mut self,
         .                   capacity: usize,
         .                   hasher: impl Fn(&T) -> u64,
         .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
         .                       )
         .                   }
         .               }
         .           
         .               /// Inserts a new element into the table, and returns its raw bucket.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
 2,243,188 ( 0.14%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
         .                   unsafe {
         .                       let mut index = self.table.find_insert_slot(hash);
         .           
         .                       // We can avoid growing the table once we have reached our load
         .                       // factor if we are replacing a tombstone. This works since the
         .                       // number of EMPTY slots does not change in this case.
     4,859 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
 1,849,293 ( 0.11%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
         .                           self.reserve(1, hasher);
         .                           index = self.table.find_insert_slot(hash);
         .                       }
         .           
         .                       self.table.record_item_insert_at(index, old_ctrl, hash);
         .           
         .                       let bucket = self.bucket(index);
         2 ( 0.00%)              bucket.write(value);
         .                       bucket
         .                   }
 1,652,603 ( 0.10%)      }
         .           
         .               /// Attempts to insert a new element without growing the table and return its raw bucket.
         .               ///
         .               /// Returns an `Err` containing the given element if inserting it would require growing the
         .               /// table.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
         .                       }
         .                   }
         .               }
         .           
         .               /// Inserts a new element into the table, and returns a mutable reference to it.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
 1,066,608 ( 0.07%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
       160 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
   799,956 ( 0.05%)      }
         .           
         .               /// Inserts a new element into the table, without growing the table.
         .               ///
         .               /// There must be enough space in the table to insert the new element.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
     2,830 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
   303,399 ( 0.02%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
    12,255 ( 0.00%)          let bucket = self.table.bucket(index);
         .           
         .                   // If we are replacing a DELETED entry then we don't need to update
         .                   // the load counter.
   636,463 ( 0.04%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
         .           
         .                   bucket.write(value);
   514,878 ( 0.03%)          self.table.items += 1;
         .                   bucket
     5,627 ( 0.00%)      }
         .           
         .               /// Temporary removes a bucket, applying the given function to the removed
         .               /// element and optionally put back the returned value in the same bucket.
         .               ///
         .               /// Returns `true` if the bucket still contains an element
         .               ///
         .               /// This does not check if the given bucket is actually occupied.
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
         .                       true
         .                   } else {
         .                       false
         .                   }
         .               }
         .           
         .               /// Searches for an element in the table.
         .               #[inline]
     3,224 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
    10,931 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    20,432 ( 0.00%)              eq(self.bucket(index).as_ref())
     5,343 ( 0.00%)          });
         .           
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match result {
     1,656 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
         .                       None => None,
         .                   }
     3,224 ( 0.00%)      }
         .           
         .               /// Gets a reference to an element in the table.
         .               #[inline]
         .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
    17,721 ( 0.00%)          match self.find(hash, eq) {
         .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Gets a mutable reference to an element in the table.
         .               #[inline]
         .               pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
     2,164 ( 0.00%)          match self.find(hash, eq) {
         .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Attempts to get mutable references to `N` entries in the table at once.
         .               ///
         .               /// Returns an array of length `N` with the results of each query.
-- line 855 ----------------------------------------
-- line 920 ----------------------------------------
         .               #[inline]
         .               pub fn len(&self) -> usize {
         .                   self.table.items
         .               }
         .           
         .               /// Returns `true` if the table contains no elements.
         .               #[inline]
         .               pub fn is_empty(&self) -> bool {
   918,995 ( 0.06%)          self.len() == 0
         .               }
         .           
         .               /// Returns the number of buckets in the table.
         .               #[inline]
         .               pub fn buckets(&self) -> usize {
         .                   self.table.bucket_mask + 1
         .               }
         .           
         .               /// Returns an iterator over every element in the table. It is up to
         .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
         .               /// Because we cannot make the `next` method unsafe on the `RawIter`
         .               /// struct, we have to make the `iter` method unsafe.
         .               #[inline]
         .               pub unsafe fn iter(&self) -> RawIter<T> {
        55 ( 0.00%)          let data = Bucket::from_base_index(self.data_end(), 0);
         .                   RawIter {
         .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
   117,265 ( 0.01%)              items: self.table.items,
         .                   }
         .               }
         .           
         .               /// Returns an iterator over occupied buckets that could match a given hash.
         .               ///
         .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
         .               /// return items that have a hash value different than the one provided. You
         .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
         .               /// Iteration starts at the provided iterator's current location.
         .               ///
         .               /// It is up to the caller to ensure that the iterator is valid for this
         .               /// `RawTable` and covers all items that remain in the table.
         .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
         .                   debug_assert_eq!(iter.len(), self.len());
         .           
         .                   let alloc = self.table.alloc.clone();
     5,828 ( 0.00%)          let allocation = self.into_allocation();
     4,371 ( 0.00%)          RawIntoIter {
     7,285 ( 0.00%)              iter,
         .                       allocation,
         .                       marker: PhantomData,
         .                       alloc,
         .                   }
         .               }
         .           
         .               /// Converts the table into a raw allocation. The contents of the table
         .               /// should be dropped using a `RawIter` before freeing the allocation.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
     2,413 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
         .                       None
         .                   } else {
         .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
         .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
         .                           Some(lco) => lco,
         .                           None => unsafe { hint::unreachable_unchecked() },
         .                       };
         .                       Some((
       406 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
         .                           layout,
         .                       ))
         .                   };
         .                   mem::forget(self);
         .                   alloc
         .               }
         .           }
         .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           impl<A> RawTableInner<A> {
         .               #[inline]
         .               const fn new_in(alloc: A) -> Self {
   657,588 ( 0.04%)          Self {
         .                       // Be careful to cast the entire slice to a raw pointer.
         .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
         .                       bucket_mask: 0,
         .                       items: 0,
         .                       growth_left: 0,
         .                       alloc,
         .                   }
         .               }
         .           }
         .           
         .           impl<A: Allocator + Clone> RawTableInner<A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
   416,211 ( 0.03%)      unsafe fn new_uninitialized(
         .                   alloc: A,
         .                   table_layout: TableLayout,
         .                   buckets: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
         .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
         .                   // such allocations will never succeed anyways.
         .                   //
         .                   // This mirrors what Vec does in the standard library.
         .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
         .                       return Err(fallibility.capacity_overflow());
         .                   }
         .           
    95,812 ( 0.01%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
         .                       Ok(block) => block.cast(),
         .                       Err(_) => return Err(fallibility.alloc_err(layout)),
         .                   };
         .           
         .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
   229,824 ( 0.01%)          Ok(Self {
         .                       ctrl,
    93,277 ( 0.01%)              bucket_mask: buckets - 1,
         .                       items: 0,
         .                       growth_left: bucket_mask_to_capacity(buckets - 1),
         .                       alloc,
         .                   })
   303,010 ( 0.02%)      }
         .           
         .               #[inline]
    31,821 ( 0.00%)      fn fallible_with_capacity(
         .                   alloc: A,
         .                   table_layout: TableLayout,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
     8,136 ( 0.00%)          if capacity == 0 {
     6,564 ( 0.00%)              Ok(Self::new_in(alloc))
         .                   } else {
         .                       unsafe {
         .                           let buckets =
         .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
         .           
   188,857 ( 0.01%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
         .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
         .           
    16,246 ( 0.00%)                  Ok(result)
         .                       }
         .                   }
    31,821 ( 0.00%)      }
         .           
         .               /// Searches for an empty or deleted bucket which is suitable for inserting
         .               /// a new element and sets the hash for that slot.
         .               ///
         .               /// There must be at least 1 empty bucket in the table.
         .               #[inline]
   108,233 ( 0.01%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
         .                   let index = self.find_insert_slot(hash);
   108,233 ( 0.01%)          let old_ctrl = *self.ctrl(index);
         .                   self.set_ctrl_h2(index, hash);
         .                   (index, old_ctrl)
   216,466 ( 0.01%)      }
         .           
         .               /// Searches for an empty or deleted bucket which is suitable for inserting
         .               /// a new element.
         .               ///
         .               /// There must be at least 1 empty bucket in the table.
         .               #[inline]
         .               fn find_insert_slot(&self, hash: u64) -> usize {
         .                   let mut probe_seq = self.probe_seq(hash);
         .                   loop {
         .                       unsafe {
         .                           let group = Group::load(self.ctrl(probe_seq.pos));
 1,246,235 ( 0.08%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
 3,634,211 ( 0.22%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
         .           
         .                               // In tables smaller than the group width, trailing control
         .                               // bytes outside the range of the table are filled with
         .                               // EMPTY entries. These will unfortunately trigger a
         .                               // match, but once masked may point to a full bucket that
         .                               // is already occupied. We detect this situation here and
         .                               // perform a second scan starting at the beginning of the
         .                               // table. This second scan is guaranteed to find an empty
         .                               // slot (due to the load factor) before hitting the trailing
         .                               // control bytes (containing EMPTY).
 1,672,963 ( 0.10%)                      if unlikely(is_full(*self.ctrl(result))) {
         .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
         .                                   debug_assert_ne!(probe_seq.pos, 0);
         .                                   return Group::load_aligned(self.ctrl(0))
         .                                       .match_empty_or_deleted()
         .                                       .lowest_set_bit_nonzero();
         .                               }
         .           
         .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
         .           
         .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
         .               /// code generated, but it is eliminated by LLVM optimizations.
         .               #[inline]
         .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
         .                   let h2_hash = h2(hash);
         .                   let mut probe_seq = self.probe_seq(hash);
         .           
    83,896 ( 0.01%)          loop {
         .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
         .           
 3,457,388 ( 0.21%)              for bit in group.match_byte(h2_hash) {
 6,324,283 ( 0.39%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
         .           
 3,960,610 ( 0.24%)                  if likely(eq(index)) {
         .                               return Some(index);
         .                           }
         .                       }
         .           
 1,196,490 ( 0.07%)              if likely(group.match_empty().any_bit_set()) {
         .                           return None;
         .                       }
         .           
         .                       probe_seq.move_next(self.bucket_mask);
         .                   }
         .               }
         .           
         .               #[allow(clippy::mut_mut)]
         .               #[inline]
         .               unsafe fn prepare_rehash_in_place(&mut self) {
         .                   // Bulk convert all full control bytes to DELETED, and all DELETED
         .                   // control bytes to EMPTY. This effectively frees up all buckets
         .                   // containing a DELETED entry.
         6 ( 0.00%)          for i in (0..self.buckets()).step_by(Group::WIDTH) {
         .                       let group = Group::load_aligned(self.ctrl(i));
         .                       let group = group.convert_special_to_empty_and_full_to_deleted();
         .                       group.store_aligned(self.ctrl(i));
         .                   }
         .           
         .                   // Fix up the trailing control bytes. See the comments in set_ctrl
         .                   // for the handling of tables smaller than the group width.
         6 ( 0.00%)          if self.buckets() < Group::WIDTH {
         .                       self.ctrl(0)
         .                           .copy_to(self.ctrl(Group::WIDTH), self.buckets());
         .                   } else {
         .                       self.ctrl(0)
         .                           .copy_to(self.ctrl(self.buckets()), Group::WIDTH);
         .                   }
         .               }
         .           
-- line 1220 ----------------------------------------
-- line 1225 ----------------------------------------
         .                   Bucket::from_base_index(self.data_end(), index)
         .               }
         .           
         .               #[inline]
         .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
         .                   debug_assert_ne!(self.bucket_mask, 0);
         .                   debug_assert!(index < self.buckets());
         .                   let base: *mut u8 = self.data_end().as_ptr();
 4,843,112 ( 0.30%)          base.sub((index + 1) * size_of)
         .               }
         .           
         .               #[inline]
         .               unsafe fn data_end<T>(&self) -> NonNull<T> {
         .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
         .               }
         .           
         .               /// Returns an iterator-like object for a probe sequence on the table.
         .               ///
         .               /// This iterator never terminates, but is guaranteed to visit each bucket
         .               /// group exactly once. The loop using `probe_seq` must terminate upon
         .               /// reaching a group containing an empty bucket.
         .               #[inline]
         .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
         .                   ProbeSeq {
19,304,503 ( 1.19%)              pos: h1(hash) & self.bucket_mask,
         .                       stride: 0,
         .                   }
         .               }
         .           
         .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
         .               /// in the table, otherwise returns error
         .               #[cfg(feature = "raw")]
         .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
         .                   } else {
         .                       self.record_item_insert_at(index, old_ctrl, hash);
         .                       Ok(index)
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
 2,310,810 ( 0.14%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
         .                   self.set_ctrl_h2(index, hash);
 1,848,648 ( 0.11%)          self.items += 1;
         .               }
         .           
         .               #[inline]
         .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
         .                   let probe_seq_pos = self.probe_seq(hash).pos;
         .                   let probe_index =
         .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
        72 ( 0.00%)          probe_index(i) == probe_index(new_i)
         .               }
         .           
         .               /// Sets a control byte to the hash, and possibly also the replicated control byte at
         .               /// the end of the array.
         .               #[inline]
         .               unsafe fn set_ctrl_h2(&self, index: usize, hash: u64) {
         .                   self.set_ctrl(index, h2(hash));
         .               }
-- line 1289 ----------------------------------------
-- line 1312 ----------------------------------------
         .                   // replicate the buckets at the end of the trailing group. For example
         .                   // with 2 buckets and a group size of 4, the control bytes will look
         .                   // like this:
         .                   //
         .                   //     Real    |             Replicated
         .                   // ---------------------------------------------
         .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
         .                   // ---------------------------------------------
 3,535,764 ( 0.22%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
         .           
 1,178,588 ( 0.07%)          *self.ctrl(index) = ctrl;
 1,179,077 ( 0.07%)          *self.ctrl(index2) = ctrl;
         .               }
         .           
         .               /// Returns a pointer to a control byte.
         .               #[inline]
         .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
         .                   debug_assert!(index < self.num_ctrl_bytes());
         .                   self.ctrl.as_ptr().add(index)
         .               }
         .           
         .               #[inline]
         .               fn buckets(&self) -> usize {
   315,886 ( 0.02%)          self.bucket_mask + 1
         .               }
         .           
         .               #[inline]
         .               fn num_ctrl_bytes(&self) -> usize {
   285,523 ( 0.02%)          self.bucket_mask + 1 + Group::WIDTH
         .               }
         .           
         .               #[inline]
         .               fn is_empty_singleton(&self) -> bool {
 1,174,880 ( 0.07%)          self.bucket_mask == 0
         .               }
         .           
         .               #[allow(clippy::mut_mut)]
         .               #[inline]
         .               unsafe fn prepare_resize(
         .                   &self,
         .                   table_layout: TableLayout,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
         .                   debug_assert!(self.items <= capacity);
         .           
         .                   // Allocate and initialize the new table.
     1,518 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
         .                       self.alloc.clone(),
         .                       table_layout,
         .                       capacity,
         .                       fallibility,
         .                   )?;
   118,523 ( 0.01%)          new_table.growth_left -= self.items;
         .                   new_table.items = self.items;
         .           
         .                   // The hash function may panic, in which case we simply free the new
         .                   // table without dropping any elements that may have been copied into
         .                   // it.
         .                   //
         .                   // This guard is also used to free the old table on success, see
         .                   // the comment at the bottom of this function.
         .                   Ok(guard(new_table, move |self_| {
    52,706 ( 0.00%)              if !self_.is_empty_singleton() {
         .                           self_.free_buckets(table_layout);
         .                       }
         .                   }))
         .               }
         .           
         .               /// Reserves or rehashes to make room for `additional` more elements.
         .               ///
         .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
         .                   &mut self,
         .                   additional: usize,
         .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
         .                   fallibility: Fallibility,
         .                   layout: TableLayout,
         .                   drop: Option<fn(*mut u8)>,
         .               ) -> Result<(), TryReserveError> {
         .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
   105,418 ( 0.01%)          let new_items = match self.items.checked_add(additional) {
         .                       Some(new_items) => new_items,
         .                       None => return Err(fallibility.capacity_overflow()),
         .                   };
   105,416 ( 0.01%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
   224,973 ( 0.01%)          if new_items <= full_capacity / 2 {
         .                       // Rehash in-place without re-allocating if we have plenty of spare
         .                       // capacity that is locked up due to DELETED entries.
         .                       self.rehash_in_place(hasher, layout.size, drop);
         4 ( 0.00%)              Ok(())
         .                   } else {
         .                       // Otherwise, conservatively resize to at least the next size up
         .                       // to avoid churning deletes into frequent rehashes.
         .                       self.resize_inner(
    52,706 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
         .                           hasher,
         .                           fallibility,
         .                           layout,
         .                       )
         .                   }
         .               }
         .           
         .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
         .               #[inline(always)]
         .               unsafe fn resize_inner(
         .                   &mut self,
         .                   capacity: usize,
         .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
         .                   fallibility: Fallibility,
         .                   layout: TableLayout,
         .               ) -> Result<(), TryReserveError> {
     3,667 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
         .           
         .                   // Copy all elements to the new table.
         .                   for i in 0..self.buckets() {
   733,217 ( 0.05%)              if !is_full(*self.ctrl(i)) {
         .                           continue;
         .                       }
         .           
         .                       // This may panic.
         .                       let hash = hasher(self, i);
         .           
         .                       // We can use a simpler version of insert() here since:
         .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
         .                   }
         .           
         .                   // We successfully copied all elements without panicking. Now replace
         .                   // self with the new table. The old table will have its memory freed but
         .                   // the items will not be dropped (since they have been moved into the
         .                   // new table).
         .                   mem::swap(self, &mut new_table);
         .           
    52,706 ( 0.00%)          Ok(())
         .               }
         .           
         .               /// Rehashes the contents of the table in place (i.e. without changing the
         .               /// allocation).
         .               ///
         .               /// If `hasher` panics then some the table's contents may be lost.
         .               ///
         .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1496 ----------------------------------------
         .                       }
         .                       self_.growth_left = bucket_mask_to_capacity(self_.bucket_mask) - self_.items;
         .                   });
         .           
         .                   // At this point, DELETED elements are elements that we haven't
         .                   // rehashed yet. Find them and re-insert them at their ideal
         .                   // position.
         .                   'outer: for i in 0..guard.buckets() {
       128 ( 0.00%)              if *guard.ctrl(i) != DELETED {
         .                           continue;
         .                       }
         .           
         .                       let i_p = guard.bucket_ptr(i, size_of);
         .           
         .                       'inner: loop {
         .                           // Hash the current item
         .                           let hash = hasher(*guard, i);
-- line 1512 ----------------------------------------
-- line 1515 ----------------------------------------
         .                           let new_i = guard.find_insert_slot(hash);
         .                           let new_i_p = guard.bucket_ptr(new_i, size_of);
         .           
         .                           // Probing works by scanning through all of the control
         .                           // bytes in groups, which may not be aligned to the group
         .                           // size. If both the new and old position fall within the
         .                           // same unaligned group, then there is no benefit in moving
         .                           // it and we can just continue to the next item.
        24 ( 0.00%)                  if likely(guard.is_in_same_group(i, new_i, hash)) {
         .                               guard.set_ctrl_h2(i, hash);
         .                               continue 'outer;
         .                           }
         .           
         .                           // We are moving the current item to a new position. Write
         .                           // our H2 to the control byte of the new position.
         .                           let prev_ctrl = guard.replace_ctrl_h2(new_i, hash);
         .                           if prev_ctrl == EMPTY {
-- line 1531 ----------------------------------------
-- line 1541 ----------------------------------------
         .                               // swapped into the old slot.
         .                               debug_assert_eq!(prev_ctrl, DELETED);
         .                               ptr::swap_nonoverlapping(i_p, new_i_p, size_of);
         .                               continue 'inner;
         .                           }
         .                       }
         .                   }
         .           
         6 ( 0.00%)          guard.growth_left = bucket_mask_to_capacity(guard.bucket_mask) - guard.items;
         .           
         .                   mem::forget(guard);
         .               }
         .           
         .               #[inline]
         .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
         .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
         .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
         .                       Some(lco) => lco,
         .                       None => hint::unreachable_unchecked(),
         .                   };
         .                   self.alloc.deallocate(
    36,515 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
         .                       layout,
         .                   );
         .               }
         .           
         .               /// Marks all table buckets as empty without dropping their contents.
         .               #[inline]
         .               fn clear_no_drop(&mut self) {
    15,012 ( 0.00%)          if !self.is_empty_singleton() {
         .                       unsafe {
         .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
         .                       }
         .                   }
    16,073 ( 0.00%)          self.items = 0;
    15,012 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
         .               }
         .           
         .               #[inline]
         .               unsafe fn erase(&mut self, index: usize) {
         .                   debug_assert!(is_full(*self.ctrl(index)));
    93,178 ( 0.01%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
         .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
         .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
         .           
         .                   // If we are inside a continuous block of Group::WIDTH full or deleted
         .                   // cells then a probe window may have seen a full block when trying to
         .                   // insert. We therefore need to keep that block non-empty so that
         .                   // lookups will continue searching to the next probe window.
         .                   //
         .                   // Note that in this context `leading_zeros` refers to the bytes at the
         .                   // end of a group, while `trailing_zeros` refers to the bytes at the
         .                   // beginning of a group.
   372,712 ( 0.02%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
         .                       DELETED
         .                   } else {
   455,765 ( 0.03%)              self.growth_left += 1;
         .                       EMPTY
         .                   };
         .                   self.set_ctrl(index, ctrl);
   372,712 ( 0.02%)          self.items -= 1;
         .               }
         .           }
         .           
         .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
     3,968 ( 0.00%)      fn clone(&self) -> Self {
       568 ( 0.00%)          if self.table.is_empty_singleton() {
         .                       Self::new_in(self.table.alloc.clone())
         .                   } else {
         .                       unsafe {
         .                           let mut new_table = ManuallyDrop::new(
         .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
         .                               match Self::new_uninitialized(
         .                                   self.table.alloc.clone(),
         .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
         .                               // We need to free the memory allocated for the new table.
         .                               new_table.free_buckets();
         .                           });
         .           
         .                           // Return the newly created table.
         .                           ManuallyDrop::into_inner(new_table)
         .                       }
         .                   }
     4,464 ( 0.00%)      }
         .           
         .               fn clone_from(&mut self, source: &Self) {
         .                   if source.table.is_empty_singleton() {
         .                       *self = Self::new_in(self.table.alloc.clone());
         .                   } else {
         .                       unsafe {
         .                           // First, drop all our elements without clearing the control bytes.
         .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
         .                       .table
         .                       .ctrl(0)
         .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
         .                   source
         .                       .data_start()
         .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
         .           
         .                   self.table.items = source.table.items;
       124 ( 0.00%)          self.table.growth_left = source.table.growth_left;
         .               }
         .           }
         .           
         .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
         .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
         .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
         .               fn default() -> Self {
         .                   Self::new_in(Default::default())
         .               }
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
   482,811 ( 0.03%)      fn drop(&mut self) {
   497,014 ( 0.03%)          if !self.table.is_empty_singleton() {
         .                       unsafe {
         .                           self.drop_elements();
         .                           self.free_buckets();
         .                       }
         .                   }
   524,930 ( 0.03%)      }
         .           }
         .           #[cfg(not(feature = "nightly"))]
         .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn drop(&mut self) {
         .                   if !self.table.is_empty_singleton() {
         .                       unsafe {
         .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
         .               type Item = T;
         .               type IntoIter = RawIntoIter<T, A>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
     5,828 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
         .                   unsafe {
         .                       let iter = self.iter();
         .                       self.into_iter_from(iter)
         .                   }
     7,285 ( 0.00%)      }
         .           }
         .           
         .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
         .           /// not track an item count.
         .           pub(crate) struct RawIterRange<T> {
         .               // Mask of full buckets in the current group. Bits are cleared from this
         .               // mask as each element is processed.
         .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
         .           
         .           impl<T> Iterator for RawIterRange<T> {
         .               type Item = Bucket<T>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<Bucket<T>> {
         .                   unsafe {
         .                       loop {
   249,033 ( 0.02%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    36,887 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    59,341 ( 0.00%)                      return Some(self.data.next_n(index));
         .                           }
         .           
   236,371 ( 0.01%)                  if self.next_ctrl >= self.end {
         .                               return None;
         .                           }
         .           
         .                           // We might read past self.end up to the next group boundary,
         .                           // but this is fine because it only occurs on tables smaller
         .                           // than the group size where the trailing control bytes are all
         .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
         .                           // to the group size (since tables are power-of-two sized).
     4,715 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
     5,772 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
     7,554 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
         .                       }
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   // We don't have an item count, so just guess based on the range size.
         .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
         .                           }
         .                       } else {
         .                           // We must have already iterated past the removed item.
         .                       }
         .                   }
         .               }
         .           
         .               unsafe fn drop_elements(&mut self) {
     1,338 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
         .                       for item in self {
         .                           item.drop();
         .                       }
         .                   }
         .               }
         .           }
         .           
         .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<T> Iterator for RawIter<T> {
         .               type Item = Bucket<T>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
    40,599 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
   121,100 ( 0.01%)          if let Some(b) = self.iter.next() {
   447,526 ( 0.03%)              self.items -= 1;
         .                       Some(b)
         .                   } else {
         .                       // We don't check against items == 0 here to allow the
         .                       // compiler to optimize away the item count entirely if the
         .                       // iterator length is never queried.
         .                       debug_assert_eq!(self.items, 0);
         .                       None
         .                   }
    81,198 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   (self.items, Some(self.items))
         .               }
         .           }
         .           
         .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
     1,910 ( 0.00%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements
         .                       self.iter.drop_elements();
         .           
         .                       // Free the table
    10,981 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
         .                           self.alloc.deallocate(ptr, layout);
         .                       }
         .                   }
       254 ( 0.00%)      }
         .           }
         .           #[cfg(not(feature = "nightly"))]
         .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements
         .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
         .               type Item = T;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
       623 ( 0.00%)      fn next(&mut self) -> Option<T> {
       153 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
     1,246 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         3 ( 0.00%)          self.iter.size_hint()
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
         .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
         .           
         .           /// Iterator which consumes elements without freeing the table storage.
         .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
         .           where
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
     1,432 ( 0.00%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements. Note that this may panic.
         .                       self.iter.drop_elements();
         .           
         .                       // Reset the contents of the table now that all elements have been
         .                       // dropped.
         .                       self.table.clear_no_drop();
         .           
         .                       // Move the now empty table back to its original location.
       179 ( 0.00%)              self.orig_table
         .                           .as_ptr()
         .                           .copy_from_nonoverlapping(&*self.table, 1);
         .                   }
     1,432 ( 0.00%)      }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
         .               type Item = T;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<T> {
         .                   unsafe {
-- line 2289 ----------------------------------------

11,126,827 ( 0.68%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/bit.rs
--------------------------------------------------------------------------------
Ir                 

-- line 267 ----------------------------------------
        .           macro_rules! bitor_impl {
        .               ($($t:ty)*) => ($(
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_unstable(feature = "const_ops", issue = "90080")]
        .                   impl const BitOr for $t {
        .                       type Output = $t;
        .           
        .                       #[inline]
    8,349 ( 0.00%)              fn bitor(self, rhs: $t) -> $t { self | rhs }
        .                   }
        .           
        .                   forward_ref_binop! { impl const BitOr, bitor for $t, $t }
        .               )*)
        .           }
        .           
        .           bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }
        .           
-- line 283 ----------------------------------------
-- line 368 ----------------------------------------
        .           macro_rules! bitxor_impl {
        .               ($($t:ty)*) => ($(
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_unstable(feature = "const_ops", issue = "90080")]
        .                   impl const BitXor for $t {
        .                       type Output = $t;
        .           
        .                       #[inline]
3,713,557 ( 0.23%)              fn bitxor(self, other: $t) -> $t { self ^ other }
        .                   }
        .           
        .                   forward_ref_binop! { impl const BitXor, bitxor for $t, $t }
        .               )*)
        .           }
        .           
        .           bitxor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }
        .           
-- line 384 ----------------------------------------
-- line 468 ----------------------------------------
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_unstable(feature = "const_ops", issue = "90080")]
        .                   impl const Shl<$f> for $t {
        .                       type Output = $t;
        .           
        .                       #[inline]
        .                       #[rustc_inherit_overflow_checks]
        .                       fn shl(self, other: $f) -> $t {
      204 ( 0.00%)                  self << other
        .                       }
        .                   }
        .           
        .                   forward_ref_binop! { impl const Shl, shl for $t, $f }
        .               };
        .           }
        .           
        .           macro_rules! shl_impl_all {
-- line 484 ----------------------------------------

  809,101 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/bit.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs
--------------------------------------------------------------------------------
Ir                 

-- line 223 ----------------------------------------
        .               fn eq(&self, other: &Rhs) -> bool;
        .           
        .               /// This method tests for `!=`.
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[default_method_body_is_const]
        .               fn ne(&self, other: &Rhs) -> bool {
   26,938 ( 0.00%)          !self.eq(other)
        .               }
        .           }
        .           
        .           /// Derive macro generating an impl of the trait `PartialEq`.
        .           #[rustc_builtin_macro]
        .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
        .           #[allow_internal_unstable(core_intrinsics, structural_match)]
        .           pub macro PartialEq($item:item) {
-- line 239 ----------------------------------------
-- line 328 ----------------------------------------
        .           /// assert_eq!(Ordering::Less, result);
        .           ///
        .           /// let result = 1.cmp(&1);
        .           /// assert_eq!(Ordering::Equal, result);
        .           ///
        .           /// let result = 2.cmp(&1);
        .           /// assert_eq!(Ordering::Greater, result);
        .           /// ```
    1,512 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Debug, Hash)]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[repr(i8)]
        .           pub enum Ordering {
        .               /// An ordering where a compared value is less than another.
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               Less = -1,
        .               /// An ordering where a compared value is equal to another.
        .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 344 ----------------------------------------
-- line 569 ----------------------------------------
        .               /// let result = x.0.cmp(&y.0).then_with(|| x.1.cmp(&y.1)).then_with(|| x.2.cmp(&y.2));
        .               ///
        .               /// assert_eq!(result, Ordering::Less);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "ordering_chaining", since = "1.17.0")]
        .               pub fn then_with<F: FnOnce() -> Ordering>(self, f: F) -> Ordering {
      771 ( 0.00%)          match self {
        .                       Equal => f(),
        .                       _ => self,
        .                   }
        .               }
        .           }
        .           
        .           /// A helper struct for reverse ordering.
        .           ///
-- line 585 ----------------------------------------
-- line 792 ----------------------------------------
        .               /// ```
        .               #[stable(feature = "ord_max_min", since = "1.21.0")]
        .               #[inline]
        .               #[must_use]
        .               fn max(self, other: Self) -> Self
        .               where
        .                   Self: Sized,
        .               {
  119,830 ( 0.01%)          max_by(self, other, Ord::cmp)
        .               }
        .           
        .               /// Compares and returns the minimum of two values.
        .               ///
        .               /// Returns the first argument if the comparison determines them to be equal.
        .               ///
        .               /// # Examples
        .               ///
-- line 808 ----------------------------------------
-- line 812 ----------------------------------------
        .               /// ```
        .               #[stable(feature = "ord_max_min", since = "1.21.0")]
        .               #[inline]
        .               #[must_use]
        .               fn min(self, other: Self) -> Self
        .               where
        .                   Self: Sized,
        .               {
    8,752 ( 0.00%)          min_by(self, other, Ord::cmp)
        .               }
        .           
        .               /// Restrict a value to a certain interval.
        .               ///
        .               /// Returns `max` if `self` is greater than `max`, and `min` if `self` is
        .               /// less than `min`. Otherwise this returns `self`.
        .               ///
        .               /// # Panics
-- line 828 ----------------------------------------
-- line 1097 ----------------------------------------
        .               /// let result = 2.0 < 1.0;
        .               /// assert_eq!(result, false);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[default_method_body_is_const]
        .               fn lt(&self, other: &Rhs) -> bool {
   44,779 ( 0.00%)          matches!(self.partial_cmp(other), Some(Less))
        .               }
        .           
        .               /// This method tests less than or equal to (for `self` and `other`) and is used by the `<=`
        .               /// operator.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1113 ----------------------------------------
-- line 1121 ----------------------------------------
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[default_method_body_is_const]
        .               fn le(&self, other: &Rhs) -> bool {
        .                   // Pattern `Some(Less | Eq)` optimizes worse than negating `None | Some(Greater)`.
        .                   // FIXME: The root cause was fixed upstream in LLVM with:
        .                   // https://github.com/llvm/llvm-project/commit/9bad7de9a3fb844f1ca2965f35d0c2a3d1e11775
        .                   // Revert this workaround once support for LLVM 12 gets dropped.
  396,793 ( 0.02%)          !matches!(self.partial_cmp(other), None | Some(Greater))
        .               }
        .           
        .               /// This method tests greater than (for `self` and `other`) and is used by the `>` operator.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let result = 1.0 > 2.0;
-- line 1137 ----------------------------------------
-- line 1140 ----------------------------------------
        .               /// let result = 2.0 > 2.0;
        .               /// assert_eq!(result, false);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[default_method_body_is_const]
        .               fn gt(&self, other: &Rhs) -> bool {
  750,492 ( 0.05%)          matches!(self.partial_cmp(other), Some(Greater))
        .               }
        .           
        .               /// This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`
        .               /// operator.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1156 ----------------------------------------
-- line 1160 ----------------------------------------
        .               /// let result = 2.0 >= 2.0;
        .               /// assert_eq!(result, true);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[default_method_body_is_const]
        .               fn ge(&self, other: &Rhs) -> bool {
      223 ( 0.00%)          matches!(self.partial_cmp(other), Some(Greater | Equal))
        .               }
        .           }
        .           
        .           /// Derive macro generating an impl of the trait `PartialOrd`.
        .           #[rustc_builtin_macro]
        .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
        .           #[allow_internal_unstable(core_intrinsics)]
        .           pub macro PartialOrd($item:item) {
-- line 1176 ----------------------------------------
-- line 1210 ----------------------------------------
        .           ///
        .           /// assert_eq!(cmp::min_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 1);
        .           /// assert_eq!(cmp::min_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
        .           /// ```
        .           #[inline]
        .           #[must_use]
        .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
        .           pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
  178,363 ( 0.01%)      match compare(&v1, &v2) {
        .                   Ordering::Less | Ordering::Equal => v1,
        .                   Ordering::Greater => v2,
        .               }
        .           }
        .           
        .           /// Returns the element that gives the minimum value from the specified function.
        .           ///
        .           /// Returns the first argument if the comparison determines them to be equal.
-- line 1226 ----------------------------------------
-- line 1273 ----------------------------------------
        .           ///
        .           /// assert_eq!(cmp::max_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
        .           /// assert_eq!(cmp::max_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 2);
        .           /// ```
        .           #[inline]
        .           #[must_use]
        .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
        .           pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
  427,624 ( 0.03%)      match compare(&v1, &v2) {
    1,060 ( 0.00%)          Ordering::Less | Ordering::Equal => v2,
        .                   Ordering::Greater => v1,
        .               }
        .           }
        .           
        .           /// Returns the element that gives the maximum value from the specified function.
        .           ///
        .           /// Returns the second argument if the comparison determines them to be equal.
        .           ///
-- line 1290 ----------------------------------------
-- line 1308 ----------------------------------------
        .               use crate::cmp::Ordering::{self, Equal, Greater, Less};
        .               use crate::hint::unreachable_unchecked;
        .           
        .               macro_rules! partial_eq_impl {
        .                   ($($t:ty)*) => ($(
        .                       #[stable(feature = "rust1", since = "1.0.0")]
        .                       impl PartialEq for $t {
        .                           #[inline]
    8,274 ( 0.00%)                  fn eq(&self, other: &$t) -> bool { (*self) == (*other) }
        .                           #[inline]
   71,362 ( 0.00%)                  fn ne(&self, other: &$t) -> bool { (*self) != (*other) }
        .                       }
        .                   )*)
        .               }
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl PartialEq for () {
        .                   #[inline]
        .                   fn eq(&self, _other: &()) -> bool {
-- line 1326 ----------------------------------------
-- line 1392 ----------------------------------------
        .                   ($($t:ty)*) => ($(
        .                       #[stable(feature = "rust1", since = "1.0.0")]
        .                       impl PartialOrd for $t {
        .                           #[inline]
        .                           fn partial_cmp(&self, other: &$t) -> Option<Ordering> {
        .                               Some(self.cmp(other))
        .                           }
        .                           #[inline]
4,299,467 ( 0.26%)                  fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
        .                           #[inline]
   48,456 ( 0.00%)                  fn le(&self, other: &$t) -> bool { (*self) <= (*other) }
        .                           #[inline]
       16 ( 0.00%)                  fn ge(&self, other: &$t) -> bool { (*self) >= (*other) }
        .                           #[inline]
        .                           fn gt(&self, other: &$t) -> bool { (*self) > (*other) }
        .                       }
        .           
        .                       #[stable(feature = "rust1", since = "1.0.0")]
        .                       impl Ord for $t {
        .                           #[inline]
        .                           fn cmp(&self, other: &$t) -> Ordering {
        .                               // The order here is important to generate more optimal assembly.
        .                               // See <https://github.com/rust-lang/rust/issues/63758> for more info.
2,734,581 ( 0.17%)                      if *self < *other { Less }
        .                               else if *self == *other { Equal }
        .                               else { Greater }
        .                           }
        .                       }
        .                   )*)
        .               }
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 1423 ----------------------------------------
-- line 1430 ----------------------------------------
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl Ord for bool {
        .                   #[inline]
        .                   fn cmp(&self, other: &bool) -> Ordering {
        .                       // Casting to i8's and converting the difference to an Ordering generates
        .                       // more optimal assembly.
        .                       // See <https://github.com/rust-lang/rust/issues/66780> for more info.
    1,708 ( 0.00%)              match (*self as i8) - (*other as i8) {
        .                           -1 => Less,
        .                           0 => Equal,
        .                           1 => Greater,
        .                           // SAFETY: bool as i8 returns 0 or 1, so the difference can't be anything else
        .                           _ => unsafe { unreachable_unchecked() },
        .                       }
        .                   }
        .               }
-- line 1446 ----------------------------------------
-- line 1474 ----------------------------------------
        .               // & pointers
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized, B: ?Sized> PartialEq<&B> for &A
        .               where
        .                   A: PartialEq<B>,
        .               {
        .                   #[inline]
    4,986 ( 0.00%)          fn eq(&self, other: &&B) -> bool {
  966,513 ( 0.06%)              PartialEq::eq(*self, *other)
  111,088 ( 0.01%)          }
        .                   #[inline]
        .                   fn ne(&self, other: &&B) -> bool {
       81 ( 0.00%)              PartialEq::ne(*self, *other)
   27,893 ( 0.00%)          }
        .               }
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized, B: ?Sized> PartialOrd<&B> for &A
        .               where
        .                   A: PartialOrd<B>,
        .               {
        .                   #[inline]
        .                   fn partial_cmp(&self, other: &&B) -> Option<Ordering> {
       20 ( 0.00%)              PartialOrd::partial_cmp(*self, *other)
        .                   }
        .                   #[inline]
        .                   fn lt(&self, other: &&B) -> bool {
        .                       PartialOrd::lt(*self, *other)
        .                   }
        .                   #[inline]
        .                   fn le(&self, other: &&B) -> bool {
        .                       PartialOrd::le(*self, *other)
-- line 1505 ----------------------------------------
-- line 1516 ----------------------------------------
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized> Ord for &A
        .               where
        .                   A: Ord,
        .               {
        .                   #[inline]
        .                   fn cmp(&self, other: &Self) -> Ordering {
        .                       Ord::cmp(*self, *other)
   20,969 ( 0.00%)          }
        .               }
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized> Eq for &A where A: Eq {}
        .           
        .               // &mut pointers
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized, B: ?Sized> PartialEq<&mut B> for &mut A
-- line 1532 ----------------------------------------

1,548,765 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/into_iter.rs
--------------------------------------------------------------------------------
Ir                 

-- line 51 ----------------------------------------
        .               /// let vec = vec!['a', 'b', 'c'];
        .               /// let mut into_iter = vec.into_iter();
        .               /// assert_eq!(into_iter.as_slice(), &['a', 'b', 'c']);
        .               /// let _ = into_iter.next().unwrap();
        .               /// assert_eq!(into_iter.as_slice(), &['b', 'c']);
        .               /// ```
        .               #[stable(feature = "vec_into_iter_as_slice", since = "1.15.0")]
        .               pub fn as_slice(&self) -> &[T] {
   17,940 ( 0.00%)          unsafe { slice::from_raw_parts(self.ptr, self.len()) }
        .               }
        .           
        .               /// Returns the remaining items of this iterator as a mutable slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let vec = vec!['a', 'b', 'c'];
-- line 67 ----------------------------------------
-- line 80 ----------------------------------------
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               #[inline]
        .               pub fn allocator(&self) -> &A {
        .                   &self.alloc
        .               }
        .           
        .               fn as_raw_mut_slice(&mut self) -> *mut [T] {
  492,341 ( 0.03%)          ptr::slice_from_raw_parts_mut(self.ptr as *mut T, self.len())
        .               }
        .           
        .               /// Drops remaining elements and relinquishes the backing allocation.
        .               ///
        .               /// This is roughly equivalent to the following, but more efficient
        .               ///
        .               /// ```
        .               /// # let mut into_iter = Vec::<u8>::with_capacity(10).into_iter();
-- line 96 ----------------------------------------
-- line 99 ----------------------------------------
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               pub(super) fn forget_allocation_drop_remaining(&mut self) {
        .                   let remaining = self.as_raw_mut_slice();
        .           
        .                   // overwrite the individual fields instead of creating a new
        .                   // struct and then overwriting &mut self.
        .                   // this creates less assembly
    1,145 ( 0.00%)          self.cap = 0;
    2,290 ( 0.00%)          self.buf = unsafe { NonNull::new_unchecked(RawVec::NEW.ptr()) };
    1,537 ( 0.00%)          self.ptr = self.buf.as_ptr();
    1,425 ( 0.00%)          self.end = self.buf.as_ptr();
        .           
        .                   unsafe {
        .                       ptr::drop_in_place(remaining);
        .                   }
        .               }
        .           }
        .           
        .           #[stable(feature = "vec_intoiter_as_ref", since = "1.46.0")]
-- line 118 ----------------------------------------
-- line 128 ----------------------------------------
        .           unsafe impl<T: Sync, A: Allocator + Sync> Sync for IntoIter<T, A> {}
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Iterator for IntoIter<T, A> {
        .               type Item = T;
        .           
        .               #[inline]
        .               fn next(&mut self) -> Option<T> {
1,142,167 ( 0.07%)          if self.ptr as *const _ == self.end {
   71,725 ( 0.00%)              None
       96 ( 0.00%)          } else if mem::size_of::<T>() == 0 {
        .                       // purposefully don't use 'ptr.offset' because for
        .                       // vectors with 0-size elements this would return the
        .                       // same pointer.
        .                       self.ptr = unsafe { arith_offset(self.ptr as *const i8, 1) as *mut T };
        .           
        .                       // Make up a value of this ZST.
        .                       Some(unsafe { mem::zeroed() })
        .                   } else {
        .                       let old = self.ptr;
  101,338 ( 0.01%)              self.ptr = unsafe { self.ptr.offset(1) };
        .           
   79,763 ( 0.00%)              Some(unsafe { ptr::read(old) })
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   let exact = if mem::size_of::<T>() == 0 {
        .                       (self.end as usize).wrapping_sub(self.ptr as usize)
        .                   } else {
        .                       unsafe { self.end.offset_from(self.ptr) as usize }
        .                   };
        3 ( 0.00%)          (exact, Some(exact))
        .               }
        .           
        .               #[inline]
        .               fn advance_by(&mut self, n: usize) -> Result<(), usize> {
        .                   let step_size = self.len().min(n);
        .                   let to_drop = ptr::slice_from_raw_parts_mut(self.ptr as *mut T, step_size);
        .                   if mem::size_of::<T>() == 0 {
        .                       // SAFETY: due to unchecked casts of unsigned amounts to signed offsets the wraparound
-- line 169 ----------------------------------------
-- line 181 ----------------------------------------
        .                   if step_size < n {
        .                       return Err(step_size);
        .                   }
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn count(self) -> usize {
        2 ( 0.00%)          self.len()
        .               }
        .           
        .               #[doc(hidden)]
        .               unsafe fn __iterator_get_unchecked(&mut self, i: usize) -> Self::Item
        .               where
        .                   Self: TrustedRandomAccessNoCoerce,
        .               {
        .                   // SAFETY: the caller must guarantee that `i` is in bounds of the
-- line 197 ----------------------------------------
-- line 207 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> DoubleEndedIterator for IntoIter<T, A> {
        .               #[inline]
        .               fn next_back(&mut self) -> Option<T> {
   27,898 ( 0.00%)          if self.end == self.ptr {
        .                       None
        .                   } else if mem::size_of::<T>() == 0 {
        .                       // See above for why 'ptr.offset' isn't used
        .                       self.end = unsafe { arith_offset(self.end as *const i8, -1) as *mut T };
        .           
        .                       // Make up a value of this ZST.
        .                       Some(unsafe { mem::zeroed() })
        .                   } else {
    5,947 ( 0.00%)              self.end = unsafe { self.end.offset(-1) };
        .           
    1,570 ( 0.00%)              Some(unsafe { ptr::read(self.end) })
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {
        .                   let step_size = self.len().min(n);
        .                   if mem::size_of::<T>() == 0 {
        .                       // SAFETY: same as for advance_by()
-- line 234 ----------------------------------------
-- line 295 ----------------------------------------
        .               #[cfg(test)]
        .               fn clone(&self) -> Self {
        .                   crate::slice::to_vec(self.as_slice(), self.alloc.clone()).into_iter()
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for IntoIter<T, A> {
1,544,511 ( 0.09%)      fn drop(&mut self) {
        .                   struct DropGuard<'a, T, A: Allocator>(&'a mut IntoIter<T, A>);
        .           
        .                   impl<T, A: Allocator> Drop for DropGuard<'_, T, A> {
        .                       fn drop(&mut self) {
        .                           unsafe {
        .                               // `IntoIter::alloc` is not used anymore after this
        .                               let alloc = ptr::read(&self.0.alloc);
        .                               // RawVec handles deallocation
  294,375 ( 0.02%)                      let _ = RawVec::from_raw_parts_in(self.0.buf.as_ptr(), self.0.cap, alloc);
        .                           }
        .                       }
        .                   }
        .           
        .                   let guard = DropGuard(self);
        .                   // destroy the remaining elements
        .                   unsafe {
       47 ( 0.00%)              ptr::drop_in_place(guard.0.as_raw_mut_slice());
        .                   }
        .                   // now `guard` will be dropped and do the rest
1,364,636 ( 0.08%)      }
        .           }
        .           
        .           #[unstable(issue = "none", feature = "inplace_iteration")]
        .           #[doc(hidden)]
        .           unsafe impl<T, A: Allocator> InPlaceIterable for IntoIter<T, A> {}
        .           
        .           #[unstable(issue = "none", feature = "inplace_iteration")]
        .           #[doc(hidden)]
-- line 331 ----------------------------------------

  393,973 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/into_iter.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/region_constraints/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 23 ----------------------------------------
        .           use std::collections::BTreeMap;
        .           use std::ops::Range;
        .           use std::{cmp, fmt, mem};
        .           
        .           mod leak_check;
        .           
        .           pub use rustc_middle::infer::MemberConstraint;
        .           
   93,115 ( 0.01%)  #[derive(Default)]
        .           pub struct RegionConstraintStorage<'tcx> {
        .               /// For each `RegionVid`, the corresponding `RegionVariableOrigin`.
        .               var_infos: IndexVec<RegionVid, RegionVariableInfo>,
        .           
        .               data: RegionConstraintData<'tcx>,
        .           
        .               /// For a given pair of regions (R1, R2), maps to a region R3 that
        .               /// is designated as their LUB (edges R1 <= R3 and R2 <= R3
-- line 39 ----------------------------------------
-- line 64 ----------------------------------------
        .               storage: &'a mut RegionConstraintStorage<'tcx>,
        .               undo_log: &'a mut InferCtxtUndoLogs<'tcx>,
        .           }
        .           
        .           impl<'tcx> std::ops::Deref for RegionConstraintCollector<'_, 'tcx> {
        .               type Target = RegionConstraintStorage<'tcx>;
        .               #[inline]
        .               fn deref(&self) -> &RegionConstraintStorage<'tcx> {
    3,687 ( 0.00%)          self.storage
        .               }
        .           }
        .           
        .           impl<'tcx> std::ops::DerefMut for RegionConstraintCollector<'_, 'tcx> {
        .               #[inline]
        .               fn deref_mut(&mut self) -> &mut RegionConstraintStorage<'tcx> {
   40,490 ( 0.00%)          self.storage
        .               }
        .           }
        .           
        .           pub type VarInfos = IndexVec<RegionVid, RegionVariableInfo>;
        .           
        .           /// The full set of region constraints gathered up by the collector.
        .           /// Describes constraints between the region variables and other
        .           /// regions, as well as other conditions that must be verified, or
        .           /// assumptions that can be made.
   46,044 ( 0.00%)  #[derive(Debug, Default, Clone)]
        .           pub struct RegionConstraintData<'tcx> {
        .               /// Constraints of the form `A <= B`, where either `A` or `B` can
        .               /// be a region variable (or neither, as it happens).
        .               pub constraints: BTreeMap<Constraint<'tcx>, SubregionOrigin<'tcx>>,
        .           
        .               /// Constraints of the form `R0 member of [R1, ..., Rn]`, meaning that
        .               /// `R0` must be equal to one of the regions `R1..Rn`. These occur
        .               /// with `impl Trait` quite frequently.
-- line 97 ----------------------------------------
-- line 122 ----------------------------------------
        .               /// This hashmap is used to avoid that naive scenario. Basically
        .               /// we record the fact that `'a <= 'b` is implied by the fn
        .               /// signature, and then ignore the constraint when solving
        .               /// equations. This is a bit of a hack but seems to work.
        .               pub givens: FxHashSet<(Region<'tcx>, ty::RegionVid)>,
        .           }
        .           
        .           /// Represents a constraint that influences the inference process.
2,256,240 ( 0.14%)  #[derive(Clone, Copy, PartialEq, Eq, Debug, PartialOrd, Ord)]
        .           pub enum Constraint<'tcx> {
        .               /// A region variable is a subregion of another.
  491,290 ( 0.03%)      VarSubVar(RegionVid, RegionVid),
        .           
        .               /// A concrete region is a subregion of region variable.
   87,400 ( 0.01%)      RegSubVar(Region<'tcx>, RegionVid),
        .           
        .               /// A region variable is a subregion of a concrete region. This does not
        .               /// directly affect inference, but instead is checked after
        .               /// inference is complete.
   79,820 ( 0.00%)      VarSubReg(RegionVid, Region<'tcx>),
        .           
        .               /// A constraint where neither side is a variable. This does not
        .               /// directly affect inference, but instead is checked after
        .               /// inference is complete.
    7,510 ( 0.00%)      RegSubReg(Region<'tcx>, Region<'tcx>),
        .           }
        .           
        .           impl Constraint<'_> {
        .               pub fn involves_placeholders(&self) -> bool {
    2,010 ( 0.00%)          match self {
        .                       Constraint::VarSubVar(_, _) => false,
        .                       Constraint::VarSubReg(_, r) | Constraint::RegSubVar(r, _) => r.is_placeholder(),
        .                       Constraint::RegSubReg(r, s) => r.is_placeholder() || s.is_placeholder(),
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug, Clone)]
-- line 159 ----------------------------------------
-- line 263 ----------------------------------------
        .               /// In other words, if we meet *all* bounds in `B`, that suffices.
        .               /// This is used when *some* bound in `B` is known to suffice, but
        .               /// we don't know which.
        .               AllBounds(Vec<VerifyBound<'tcx>>),
        .           }
        .           
        .           #[derive(Copy, Clone, PartialEq, Eq, Hash)]
        .           pub(crate) struct TwoRegions<'tcx> {
      253 ( 0.00%)      a: Region<'tcx>,
      262 ( 0.00%)      b: Region<'tcx>,
        .           }
        .           
        .           #[derive(Copy, Clone, PartialEq)]
        .           pub(crate) enum UndoLog<'tcx> {
        .               /// We added `RegionVid`.
        .               AddVar(RegionVid),
        .           
        .               /// We added the given `constraint`.
-- line 280 ----------------------------------------
-- line 304 ----------------------------------------
        .               pub universe: ty::UniverseIndex,
        .           }
        .           
        .           pub struct RegionSnapshot {
        .               any_unifications: bool,
        .           }
        .           
        .           impl<'tcx> RegionConstraintStorage<'tcx> {
   16,930 ( 0.00%)      pub fn new() -> Self {
        .                   Self::default()
   16,930 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub(crate) fn with_log<'a>(
        .                   &'a mut self,
        .                   undo_log: &'a mut InferCtxtUndoLogs<'tcx>,
        .               ) -> RegionConstraintCollector<'a, 'tcx> {
        .                   RegionConstraintCollector { storage: self, undo_log }
        .               }
        .           
        .               fn rollback_undo_entry(&mut self, undo_entry: UndoLog<'tcx>) {
   92,510 ( 0.01%)          match undo_entry {
        .                       AddVar(vid) => {
        .                           self.var_infos.pop().unwrap();
   32,588 ( 0.00%)                  assert_eq!(self.var_infos.len(), vid.index() as usize);
        .                       }
   10,355 ( 0.00%)              AddConstraint(ref constraint) => {
   41,420 ( 0.00%)                  self.data.constraints.remove(constraint);
        .                       }
        .                       AddVerify(index) => {
        .                           self.data.verifys.pop();
        .                           assert_eq!(self.data.verifys.len(), index);
        .                       }
        .                       AddGiven(sub, sup) => {
        .                           self.data.givens.remove(&(sub, sup));
        .                       }
-- line 339 ----------------------------------------
-- line 348 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> RegionConstraintCollector<'_, 'tcx> {
        .               pub fn num_region_vars(&self) -> usize {
        .                   self.var_infos.len()
        .               }
        .           
        .               pub fn region_constraint_data(&self) -> &RegionConstraintData<'tcx> {
    1,779 ( 0.00%)          &self.data
    1,779 ( 0.00%)      }
        .           
        .               /// Once all the constraints have been gathered, extract out the final data.
        .               ///
        .               /// Not legal during a snapshot.
        .               pub fn into_infos_and_data(self) -> (VarInfos, RegionConstraintData<'tcx>) {
    3,046 ( 0.00%)          assert!(!UndoLogs::<super::UndoLog<'_>>::in_snapshot(&self.undo_log));
        .                   (mem::take(&mut self.storage.var_infos), mem::take(&mut self.storage.data))
        .               }
        .           
        .               /// Takes (and clears) the current set of constraints. Note that
        .               /// the set of variables remains intact, but all relationships
        .               /// between them are reset. This is used during NLL checking to
        .               /// grab the set of constraints that arose from a particular
        .               /// operation.
-- line 371 ----------------------------------------
-- line 418 ----------------------------------------
        .           
        .               pub fn start_snapshot(&mut self) -> RegionSnapshot {
        .                   debug!("RegionConstraintCollector: start_snapshot");
        .                   RegionSnapshot { any_unifications: self.any_unifications }
        .               }
        .           
        .               pub fn rollback_to(&mut self, snapshot: RegionSnapshot) {
        .                   debug!("RegionConstraintCollector: rollback_to({:?})", snapshot);
   30,289 ( 0.00%)          self.any_unifications = snapshot.any_unifications;
        .               }
        .           
  242,940 ( 0.01%)      pub fn new_region_var(
        .                   &mut self,
        .                   universe: ty::UniverseIndex,
        .                   origin: RegionVariableOrigin,
        .               ) -> RegionVid {
   40,490 ( 0.00%)          let vid = self.var_infos.push(RegionVariableInfo { origin, universe });
        .           
  121,470 ( 0.01%)          let u_vid = self.unification_table().new_key(UnifiedRegion(None));
   40,490 ( 0.00%)          assert_eq!(vid, u_vid.vid);
        .                   self.undo_log.push(AddVar(vid));
        .                   debug!("created new region variable {:?} in {:?} with origin {:?}", vid, universe, origin);
        .                   vid
  323,920 ( 0.02%)      }
        .           
        .               /// Returns the universe for the given variable.
        .               pub fn var_universe(&self, vid: RegionVid) -> ty::UniverseIndex {
   18,769 ( 0.00%)          self.var_infos[vid].universe
        .               }
        .           
        .               /// Returns the origin for the given variable.
        .               pub fn var_origin(&self, vid: RegionVid) -> RegionVariableOrigin {
        .                   self.var_infos[vid].origin
        .               }
        .           
        .               fn add_constraint(&mut self, constraint: Constraint<'tcx>, origin: SubregionOrigin<'tcx>) {
        .                   // cannot add constraints once regions are resolved
        .                   debug!("RegionConstraintCollector: add_constraint({:?})", constraint);
        .           
        .                   // never overwrite an existing (constraint, origin) - only insert one if it isn't
        .                   // present in the map yet. This prevents origins from outside the snapshot being
        .                   // replaced with "less informative" origins e.g., during calls to `can_eq`
        .                   let undo_log = &mut self.undo_log;
  240,150 ( 0.01%)          self.storage.data.constraints.entry(constraint).or_insert_with(|| {
  136,998 ( 0.01%)              undo_log.push(AddConstraint(constraint));
   91,332 ( 0.01%)              origin
        .                   });
        .               }
        .           
        .               fn add_verify(&mut self, verify: Verify<'tcx>) {
        .                   // cannot add verifys once regions are resolved
        .                   debug!("RegionConstraintCollector: add_verify({:?})", verify);
        .           
        .                   // skip no-op cases known to be satisfied
      244 ( 0.00%)          if let VerifyBound::AllBounds(ref bs) = verify.bound {
        .                       if bs.is_empty() {
        .                           return;
        .                       }
        .                   }
        .           
      122 ( 0.00%)          let index = self.data.verifys.len();
    1,830 ( 0.00%)          self.data.verifys.push(verify);
      122 ( 0.00%)          self.undo_log.push(AddVerify(index));
        .               }
        .           
        .               pub fn add_given(&mut self, sub: Region<'tcx>, sup: ty::RegionVid) {
        .                   // cannot add givens once regions are resolved
        .                   if self.data.givens.insert((sub, sup)) {
        .                       debug!("add_given({:?} <= {:?})", sub, sup);
        .           
        .                       self.undo_log.push(AddGiven(sub, sup));
        .                   }
        .               }
        .           
   93,930 ( 0.01%)      pub fn make_eqregion(
        .                   &mut self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   sub: Region<'tcx>,
        .                   sup: Region<'tcx>,
        .               ) {
   46,965 ( 0.00%)          if sub != sup {
        .                       // Eventually, it would be nice to add direct support for
        .                       // equating regions.
   45,672 ( 0.00%)              self.make_subregion(origin.clone(), sub, sup);
   51,381 ( 0.00%)              self.make_subregion(origin, sup, sub);
        .           
   28,605 ( 0.00%)              match (sub, sup) {
   13,656 ( 0.00%)                  (&ty::ReVar(sub), &ty::ReVar(sup)) => {
        .                               debug!("make_eqregion: unifying {:?} with {:?}", sub, sup);
   22,760 ( 0.00%)                      self.unification_table().union(sub, sup);
        .                               self.any_unifications = true;
        .                           }
        .                           (&ty::ReVar(vid), value) | (value, &ty::ReVar(vid)) => {
        .                               debug!("make_eqregion: unifying {:?} with {:?}", vid, value);
    4,388 ( 0.00%)                      self.unification_table().union_value(vid, UnifiedRegion(Some(value)));
        .                               self.any_unifications = true;
        .                           }
        .                           (_, _) => {}
        .                       }
        .                   }
   39,963 ( 0.00%)      }
        .           
        .               pub fn member_constraint(
        .                   &mut self,
        .                   opaque_type_def_id: DefId,
        .                   definition_span: Span,
        .                   hidden_ty: Ty<'tcx>,
        .                   member_region: ty::Region<'tcx>,
        .                   choice_regions: &Lrc<Vec<ty::Region<'tcx>>>,
-- line 526 ----------------------------------------
-- line 535 ----------------------------------------
        .                       opaque_type_def_id,
        .                       definition_span,
        .                       hidden_ty,
        .                       member_region,
        .                       choice_regions: choice_regions.clone(),
        .                   });
        .               }
        .           
  332,290 ( 0.02%)      #[instrument(skip(self, origin), level = "debug")]
        .               pub fn make_subregion(
        .                   &mut self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   sub: Region<'tcx>,
        .                   sup: Region<'tcx>,
        .               ) {
        .                   // cannot add constraints once regions are resolved
        .                   debug!("origin = {:#?}", origin);
        .           
  244,660 ( 0.02%)          match (sub, sup) {
        .                       (&ReLateBound(..), _) | (_, &ReLateBound(..)) => {
        .                           span_bug!(origin.span(), "cannot relate bound region: {:?} <= {:?}", sub, sup);
        .                       }
        .                       (_, &ReStatic) => {
        .                           // all regions are subregions of static, so we can ignore this
        .                       }
   16,577 ( 0.00%)              (&ReVar(sub_id), &ReVar(sup_id)) => {
  116,039 ( 0.01%)                  self.add_constraint(Constraint::VarSubVar(sub_id, sup_id), origin);
        .                       }
        .                       (_, &ReVar(sup_id)) => {
   14,294 ( 0.00%)                  self.add_constraint(Constraint::RegSubVar(sub, sup_id), origin);
        .                       }
    3,233 ( 0.00%)              (&ReVar(sub_id), _) => {
   22,631 ( 0.00%)                  self.add_constraint(Constraint::VarSubReg(sub_id, sup), origin);
        .                       }
        .                       _ => {
    9,037 ( 0.00%)                  self.add_constraint(Constraint::RegSubReg(sub, sup), origin);
        .                       }
        .                   }
        .               }
        .           
      610 ( 0.00%)      pub fn verify_generic_bound(
        .                   &mut self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   kind: GenericKind<'tcx>,
        .                   sub: Region<'tcx>,
        .                   bound: VerifyBound<'tcx>,
        .               ) {
    1,586 ( 0.00%)          self.add_verify(Verify { kind, origin, region: sub, bound });
      610 ( 0.00%)      }
        .           
        .               pub fn lub_regions(
        .                   &mut self,
        .                   tcx: TyCtxt<'tcx>,
        .                   origin: SubregionOrigin<'tcx>,
        .                   a: Region<'tcx>,
        .                   b: Region<'tcx>,
        .               ) -> Region<'tcx> {
-- line 591 ----------------------------------------
-- line 599 ----------------------------------------
        .                       _ if a == b => {
        .                           a // LUB(a,a) = a
        .                       }
        .           
        .                       _ => self.combine_vars(tcx, Lub, a, b, origin),
        .                   }
        .               }
        .           
    1,280 ( 0.00%)      pub fn glb_regions(
        .                   &mut self,
        .                   tcx: TyCtxt<'tcx>,
        .                   origin: SubregionOrigin<'tcx>,
        .                   a: Region<'tcx>,
        .                   b: Region<'tcx>,
        .               ) -> Region<'tcx> {
        .                   // cannot add constraints once regions are resolved
        .                   debug!("RegionConstraintCollector: glb_regions({:?}, {:?})", a, b);
      640 ( 0.00%)          match (a, b) {
        .                       (&ReStatic, r) | (r, &ReStatic) => {
        .                           r // static lives longer than everything else
        .                       }
        .           
      320 ( 0.00%)              _ if a == b => {
        .                           a // GLB(a,a) = a
        .                       }
        .           
    1,920 ( 0.00%)              _ => self.combine_vars(tcx, Glb, a, b, origin),
        .                   }
    1,280 ( 0.00%)      }
        .           
        .               /// Resolves the passed RegionVid to the root RegionVid in the unification table
        .               pub fn opportunistic_resolve_var(&mut self, rid: ty::RegionVid) -> ty::RegionVid {
   32,844 ( 0.00%)          self.unification_table().find(rid).vid
        .               }
        .           
        .               /// If the Region is a `ReVar`, then resolves it either to the root value in
        .               /// the unification table, if it exists, or to the root `ReVar` in the table.
        .               /// If the Region is not a `ReVar`, just returns the Region itself.
        .               pub fn opportunistic_resolve_region(
        .                   &mut self,
        .                   tcx: TyCtxt<'tcx>,
-- line 639 ----------------------------------------
-- line 647 ----------------------------------------
        .                               tcx.reuse_or_mk_region(region, ty::ReVar(root))
        .                           })
        .                       }
        .                       _ => region,
        .                   }
        .               }
        .           
        .               fn combine_map(&mut self, t: CombineMapType) -> &mut CombineMap<'tcx> {
    1,280 ( 0.00%)          match t {
        .                       Glb => &mut self.glbs,
        .                       Lub => &mut self.lubs,
        .                   }
        .               }
        .           
    1,920 ( 0.00%)      fn combine_vars(
        .                   &mut self,
        .                   tcx: TyCtxt<'tcx>,
        .                   t: CombineMapType,
        .                   a: Region<'tcx>,
        .                   b: Region<'tcx>,
        .                   origin: SubregionOrigin<'tcx>,
        .               ) -> Region<'tcx> {
        .                   let vars = TwoRegions { a, b };
        .                   if let Some(&c) = self.combine_map(t).get(&vars) {
        .                       return tcx.mk_region(ReVar(c));
        .                   }
        .                   let a_universe = self.universe(a);
        .                   let b_universe = self.universe(b);
        .                   let c_universe = cmp::max(a_universe, b_universe);
      800 ( 0.00%)          let c = self.new_region_var(c_universe, MiscVariable(origin.span()));
        .                   self.combine_map(t).insert(vars, c);
      160 ( 0.00%)          self.undo_log.push(AddCombination(t, vars));
      800 ( 0.00%)          let new_r = tcx.mk_region(ReVar(c));
    1,280 ( 0.00%)          for old_r in [a, b] {
      320 ( 0.00%)              match t {
    2,720 ( 0.00%)                  Glb => self.make_subregion(origin.clone(), new_r, old_r),
        .                           Lub => self.make_subregion(origin.clone(), old_r, new_r),
        .                       }
        .                   }
        .                   debug!("combine_vars() c={:?}", c);
        .                   new_r
    1,440 ( 0.00%)      }
        .           
        .               pub fn universe(&self, region: Region<'tcx>) -> ty::UniverseIndex {
   21,014 ( 0.00%)          match *region {
        .                       ty::ReStatic | ty::ReErased | ty::ReFree(..) | ty::ReEarlyBound(..) => {
        .                           ty::UniverseIndex::ROOT
        .                       }
        .                       ty::ReEmpty(ui) => ui,
        .                       ty::RePlaceholder(placeholder) => placeholder.universe,
    2,675 ( 0.00%)              ty::ReVar(vid) => self.var_universe(vid),
        .                       ty::ReLateBound(..) => bug!("universe(): encountered bound region {:?}", region),
        .                   }
        .               }
        .           
    7,845 ( 0.00%)      pub fn vars_since_snapshot(
        .                   &self,
        .                   value_count: usize,
        .               ) -> (Range<RegionVid>, Vec<RegionVariableOrigin>) {
        .                   let range = RegionVid::from(value_count)..RegionVid::from(self.unification_table.len());
    9,414 ( 0.00%)          (
        .                       range.clone(),
        .                       (range.start.index()..range.end.index())
        .                           .map(|index| self.var_infos[ty::RegionVid::from(index)].origin)
        .                           .collect(),
        .                   )
    9,414 ( 0.00%)      }
        .           
        .               /// See `InferCtxt::region_constraints_added_in_snapshot`.
    9,636 ( 0.00%)      pub fn region_constraints_added_in_snapshot(&self, mark: &Snapshot<'tcx>) -> Option<bool> {
    3,212 ( 0.00%)          self.undo_log
        .                       .region_constraints_in_snapshot(mark)
    2,724 ( 0.00%)              .map(|&elt| match elt {
      716 ( 0.00%)                  AddConstraint(constraint) => Some(constraint.involves_placeholders()),
        .                           _ => None,
        .                       })
        .                       .max()
        .                       .unwrap_or(None)
   12,848 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn unification_table(&mut self) -> super::UnificationTable<'_, 'tcx, RegionVidKey<'tcx>> {
  108,700 ( 0.01%)          ut::UnificationTable::with_log(&mut self.storage.unification_table, self.undo_log)
        .               }
        .           }
        .           
        .           impl fmt::Debug for RegionSnapshot {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(f, "RegionSnapshot")
        .               }
        .           }
-- line 737 ----------------------------------------
-- line 750 ----------------------------------------
        .                   match *self {
        .                       GenericKind::Param(ref p) => write!(f, "{}", p),
        .                       GenericKind::Projection(ref p) => write!(f, "{}", p),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> GenericKind<'tcx> {
       78 ( 0.00%)      pub fn to_ty(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
    2,198 ( 0.00%)          match *self {
      154 ( 0.00%)              GenericKind::Param(ref p) => p.to_ty(tcx),
        7 ( 0.00%)              GenericKind::Projection(ref p) => tcx.mk_projection(p.item_def_id, p.substs),
        .                   }
       78 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> VerifyBound<'tcx> {
      126 ( 0.00%)      pub fn must_hold(&self) -> bool {
      154 ( 0.00%)          match self {
        .                       VerifyBound::IfEq(..) => false,
        .                       VerifyBound::OutlivedBy(ty::ReStatic) => true,
        .                       VerifyBound::OutlivedBy(_) => false,
        .                       VerifyBound::IsEmpty => false,
       28 ( 0.00%)              VerifyBound::AnyBound(bs) => bs.iter().any(|b| b.must_hold()),
        .                       VerifyBound::AllBounds(bs) => bs.iter().all(|b| b.must_hold()),
        .                   }
      147 ( 0.00%)      }
        .           
      105 ( 0.00%)      pub fn cannot_hold(&self) -> bool {
      154 ( 0.00%)          match self {
        .                       VerifyBound::IfEq(_, b) => b.cannot_hold(),
        .                       VerifyBound::IsEmpty => false,
        .                       VerifyBound::OutlivedBy(_) => false,
       14 ( 0.00%)              VerifyBound::AnyBound(bs) => bs.iter().all(|b| b.cannot_hold()),
        .                       VerifyBound::AllBounds(bs) => bs.iter().any(|b| b.cannot_hold()),
        .                   }
      147 ( 0.00%)      }
        .           
       42 ( 0.00%)      pub fn or(self, vb: VerifyBound<'tcx>) -> VerifyBound<'tcx> {
       56 ( 0.00%)          if self.must_hold() || vb.cannot_hold() {
        .                       self
       28 ( 0.00%)          } else if self.cannot_hold() || vb.must_hold() {
       28 ( 0.00%)              vb
        .                   } else {
        .                       VerifyBound::AnyBound(vec![self, vb])
        .                   }
       56 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> RegionConstraintData<'tcx> {
        .               /// Returns `true` if this region constraint data contains no constraints, and `false`
        .               /// otherwise.
        .               pub fn is_empty(&self) -> bool {
        .                   let RegionConstraintData { constraints, member_constraints, verifys, givens } = self;
      840 ( 0.00%)          constraints.is_empty()
        .                       && member_constraints.is_empty()
        .                       && verifys.is_empty()
        .                       && givens.is_empty()
        .               }
        .           }
        .           
        .           impl<'tcx> Rollback<UndoLog<'tcx>> for RegionConstraintStorage<'tcx> {
   92,510 ( 0.01%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
   74,008 ( 0.00%)          self.rollback_undo_entry(undo)
   92,510 ( 0.01%)      }
        .           }

  917,146 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/region_constraints/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/fulfill.rs
--------------------------------------------------------------------------------
Ir                 

-- line 33 ----------------------------------------
        .           
        .           impl<'tcx> ForestObligation for PendingPredicateObligation<'tcx> {
        .               /// Note that we include both the `ParamEnv` and the `Predicate`,
        .               /// as the `ParamEnv` can influence whether fulfillment succeeds
        .               /// or fails.
        .               type CacheKey = ty::ParamEnvAnd<'tcx, ty::Predicate<'tcx>>;
        .           
        .               fn as_cache_key(&self) -> Self::CacheKey {
  182,184 ( 0.01%)          self.obligation.param_env.and(self.obligation.predicate)
        .               }
        .           }
        .           
        .           /// The fulfillment context is used to drive trait resolution. It
        .           /// consists of a list of obligations that must be (eventually)
        .           /// satisfied. The job is to track which are satisfied, which yielded
        .           /// errors, and which are still pending. At any point, users can call
        .           /// `select_where_possible`, and the fulfillment context will try to do
-- line 49 ----------------------------------------
-- line 79 ----------------------------------------
        .               // outside of any snapshot, so any use of it inside a snapshot
        .               // will lead to trouble and therefore is checked against, but
        .               // other fulfillment contexts sometimes do live inside of
        .               // a snapshot (they don't *straddle* a snapshot, so there
        .               // is no trouble there).
        .               usable_in_snapshot: bool,
        .           }
        .           
       40 ( 0.00%)  #[derive(Clone, Debug)]
        .           pub struct PendingPredicateObligation<'tcx> {
        .               pub obligation: PredicateObligation<'tcx>,
        .               // This is far more often read than modified, meaning that we
        .               // should mostly optimize for reading speed, while modifying is not as relevant.
        .               //
        .               // For whatever reason using a boxed slice is slower than using a `Vec` here.
        .               pub stalled_on: Vec<TyOrConstInferVar<'tcx>>,
        .           }
        .           
        .           // `PendingPredicateObligation` is used a lot. Make sure it doesn't unintentionally get bigger.
        .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
        .           static_assert_size!(PendingPredicateObligation<'_>, 72);
        .           
        .           impl<'a, 'tcx> FulfillmentContext<'tcx> {
        .               /// Creates a new fulfillment context.
    2,583 ( 0.00%)      pub fn new() -> FulfillmentContext<'tcx> {
   33,334 ( 0.00%)          FulfillmentContext {
    4,639 ( 0.00%)              predicates: ObligationForest::new(),
        .                       relationships: FxHashMap::default(),
        .                       register_region_obligations: true,
        .                       usable_in_snapshot: false,
        .                   }
    2,583 ( 0.00%)      }
        .           
        .               pub fn new_in_snapshot() -> FulfillmentContext<'tcx> {
      153 ( 0.00%)          FulfillmentContext {
       51 ( 0.00%)              predicates: ObligationForest::new(),
        .                       relationships: FxHashMap::default(),
        .                       register_region_obligations: true,
        .                       usable_in_snapshot: true,
        .                   }
        .               }
        .           
        .               pub fn new_ignoring_regions() -> FulfillmentContext<'tcx> {
    8,284 ( 0.00%)          FulfillmentContext {
    2,071 ( 0.00%)              predicates: ObligationForest::new(),
        .                       relationships: FxHashMap::default(),
        .                       register_region_obligations: false,
        .                       usable_in_snapshot: false,
        .                   }
        .               }
        .           
        .               /// Attempts to select obligations using `selcx`.
        .               fn select(&mut self, selcx: &mut SelectionContext<'a, 'tcx>) -> Vec<FulfillmentError<'tcx>> {
   41,408 ( 0.00%)          let span = debug_span!("select", obligation_forest_size = ?self.predicates.len());
        .                   let _enter = span.enter();
        .           
        .                   let mut errors = Vec::new();
        .           
        .                   loop {
        .                       debug!("select: starting another iteration");
        .           
        .                       // Process pending obligations.
        .                       let outcome: Outcome<_, _> =
  189,294 ( 0.01%)                  self.predicates.process_obligations(&mut FulfillProcessor {
        .                               selcx,
   27,042 ( 0.00%)                      register_region_obligations: self.register_region_obligations,
        .                           });
        .                       debug!("select: outcome={:#?}", outcome);
        .           
        .                       // FIXME: if we kept the original cache key, we could mark projection
        .                       // obligations as complete for the projection cache here.
        .           
        .                       errors.extend(outcome.errors.into_iter().map(to_fulfillment_error));
        .           
        .                       // If nothing new was added, no need to keep looping.
   54,084 ( 0.00%)              if outcome.stalled {
        .                           break;
        .                       }
        .                   }
        .           
        .                   debug!(
        .                       "select({} predicates remaining, {} errors) done",
        .                       self.predicates.len(),
        .                       errors.len()
-- line 162 ----------------------------------------
-- line 169 ----------------------------------------
        .           impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {
        .               /// "Normalize" a projection type `<SomeType as SomeTrait>::X` by
        .               /// creating a fresh type variable `$0` as well as a projection
        .               /// predicate `<SomeType as SomeTrait>::X == $0`. When the
        .               /// inference engine runs, it will attempt to find an impl of
        .               /// `SomeTrait` or a where-clause that lets us unify `$0` with
        .               /// something concrete. If this fails, we'll unify `$0` with
        .               /// `projection_ty` again.
    1,122 ( 0.00%)      #[tracing::instrument(level = "debug", skip(self, infcx, param_env, cause))]
        .               fn normalize_projection_type(
        .                   &mut self,
        .                   infcx: &InferCtxt<'_, 'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   projection_ty: ty::ProjectionTy<'tcx>,
        .                   cause: ObligationCause<'tcx>,
        .               ) -> Ty<'tcx> {
        .                   debug_assert!(!projection_ty.has_escaping_bound_vars());
        .           
        .                   // FIXME(#20304) -- cache
        .           
        .                   let mut selcx = SelectionContext::new(infcx);
        .                   let mut obligations = vec![];
      459 ( 0.00%)          let normalized_ty = project::normalize_projection_type(
        .                       &mut selcx,
        .                       param_env,
        .                       projection_ty,
      255 ( 0.00%)              cause,
        .                       0,
        .                       &mut obligations,
        .                   );
        .                   self.register_predicate_obligations(infcx, obligations);
        .           
        .                   debug!(?normalized_ty);
        .           
        .                   normalized_ty
        .               }
        .           
  115,404 ( 0.01%)      fn register_predicate_obligation(
        .                   &mut self,
        .                   infcx: &InferCtxt<'_, 'tcx>,
        .                   obligation: PredicateObligation<'tcx>,
        .               ) {
        .                   // this helps to reduce duplicate errors, as well as making
        .                   // debug output much nicer to read and so on.
   57,702 ( 0.00%)          let obligation = infcx.resolve_vars_if_possible(obligation);
        .           
        .                   debug!(?obligation, "register_predicate_obligation");
        .           
  115,404 ( 0.01%)          assert!(!infcx.is_in_snapshot() || self.usable_in_snapshot);
        .           
   57,702 ( 0.00%)          super::relationships::update(self, infcx, &obligation);
        .           
        .                   self.predicates
        .                       .register_obligation(PendingPredicateObligation { obligation, stalled_on: vec![] });
   96,170 ( 0.01%)      }
        .           
   70,464 ( 0.00%)      fn select_all_or_error(&mut self, infcx: &InferCtxt<'_, 'tcx>) -> Vec<FulfillmentError<'tcx>> {
        .                   {
    8,808 ( 0.00%)              let errors = self.select_where_possible(infcx);
    8,808 ( 0.00%)              if !errors.is_empty() {
       10 ( 0.00%)                  return errors;
        .                       }
        .                   }
        .           
   44,030 ( 0.00%)          self.predicates.to_errors(CodeAmbiguity).into_iter().map(to_fulfillment_error).collect()
   61,656 ( 0.00%)      }
        .           
  207,040 ( 0.01%)      fn select_where_possible(
        .                   &mut self,
        .                   infcx: &InferCtxt<'_, 'tcx>,
        .               ) -> Vec<FulfillmentError<'tcx>> {
        .                   let mut selcx = SelectionContext::new(infcx);
        .                   self.select(&mut selcx)
  186,336 ( 0.01%)      }
        .           
      450 ( 0.00%)      fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>> {
        .                   self.predicates.map_pending_obligations(|o| o.obligation.clone())
      600 ( 0.00%)      }
        .           
        .               fn relationships(&mut self) -> &mut FxHashMap<ty::TyVid, ty::FoundRelationships> {
       72 ( 0.00%)          &mut self.relationships
       72 ( 0.00%)      }
        .           }
        .           
        .           struct FulfillProcessor<'a, 'b, 'tcx> {
        .               selcx: &'a mut SelectionContext<'b, 'tcx>,
        .               register_region_obligations: bool,
        .           }
        .           
        .           fn mk_pending(os: Vec<PredicateObligation<'_>>) -> Vec<PendingPredicateObligation<'_>> {
-- line 258 ----------------------------------------
-- line 275 ----------------------------------------
        .               #[inline(always)]
        .               fn process_obligation(
        .                   &mut self,
        .                   pending_obligation: &mut Self::Obligation,
        .               ) -> ProcessResult<Self::Obligation, Self::Error> {
        .                   // If we were stalled on some unresolved variables, first check whether
        .                   // any of them have been resolved; if not, don't bother doing more work
        .                   // yet.
1,422,093 ( 0.09%)          let change = match pending_obligation.stalled_on.len() {
        .                       // Match arms are in order of frequency, which matters because this
        .                       // code is so hot. 1 and 0 dominate; 2+ is fairly rare.
        .                       1 => {
  660,507 ( 0.04%)                  let infer_var = pending_obligation.stalled_on[0];
  220,169 ( 0.01%)                  self.selcx.infcx().ty_or_const_infer_var_changed(infer_var)
        .                       }
        .                       0 => {
        .                           // In this case we haven't changed, but wish to make a change.
        .                           true
        .                       }
        .                       _ => {
        .                           // This `for` loop was once a call to `all()`, but this lower-level
        .                           // form was a perf win. See #64545 for details.
   15,522 ( 0.00%)                  (|| {
   30,672 ( 0.00%)                      for &infer_var in &pending_obligation.stalled_on {
    7,348 ( 0.00%)                          if self.selcx.infcx().ty_or_const_infer_var_changed(infer_var) {
        .                                       return true;
        .                                   }
        .                               }
        .                               false
        .                           })()
        .                       }
        .                   };
        .           
    1,113 ( 0.00%)          if !change {
        .                       debug!(
        .                           "process_predicate: pending obligation {:?} still stalled on {:?}",
        .                           self.selcx.infcx().resolve_vars_if_possible(pending_obligation.obligation.clone()),
        .                           pending_obligation.stalled_on
        .                       );
        .                       return ProcessResult::Unchanged;
        .                   }
        .           
   86,565 ( 0.01%)          self.progress_changed_obligations(pending_obligation)
        .               }
        .           
        .               fn process_backedge<'c, I>(
        .                   &mut self,
        .                   cycle: I,
        .                   _marker: PhantomData<&'c PendingPredicateObligation<'tcx>>,
        .               ) where
        .                   I: Clone + Iterator<Item = &'c PendingPredicateObligation<'tcx>>,
-- line 325 ----------------------------------------
-- line 333 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {
        .               // The code calling this method is extremely hot and only rarely
        .               // actually uses this, so move this part of the code
        .               // out of that loop.
        .               #[inline(never)]
  288,550 ( 0.02%)      fn progress_changed_obligations(
        .                   &mut self,
        .                   pending_obligation: &mut PendingPredicateObligation<'tcx>,
        .               ) -> ProcessResult<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>> {
        .                   pending_obligation.stalled_on.truncate(0);
        .           
        .                   let obligation = &mut pending_obligation.obligation;
        .           
   86,565 ( 0.01%)          if obligation.predicate.has_infer_types_or_consts() {
   14,639 ( 0.00%)              obligation.predicate =
   43,917 ( 0.00%)                  self.selcx.infcx().resolve_vars_if_possible(obligation.predicate);
        .                   }
        .           
        .                   debug!(?obligation, ?obligation.cause, "process_obligation");
        .           
        .                   let infcx = self.selcx.infcx();
        .           
   28,432 ( 0.00%)          let binder = obligation.predicate.kind();
  201,985 ( 0.01%)          match binder.no_bound_vars() {
      506 ( 0.00%)              None => match binder.skip_binder() {
        .                           // Evaluation will discard candidates using the leak check.
        .                           // This means we need to pass it the bound version of our
        .                           // predicate.
        .                           ty::PredicateKind::Trait(trait_ref) => {
        .                               let trait_obligation = obligation.with(binder.rebind(trait_ref));
        .           
       92 ( 0.00%)                      self.process_trait_obligation(
        .                                   obligation,
      276 ( 0.00%)                          trait_obligation,
        .                                   &mut pending_obligation.stalled_on,
        .                               )
        .                           }
        .                           ty::PredicateKind::Projection(data) => {
        .                               let project_obligation = obligation.with(binder.rebind(data));
        .           
       92 ( 0.00%)                      self.process_projection_obligation(
        .                                   obligation,
      276 ( 0.00%)                          project_obligation,
        .                                   &mut pending_obligation.stalled_on,
        .                               )
        .                           }
        .                           ty::PredicateKind::RegionOutlives(_)
        .                           | ty::PredicateKind::TypeOutlives(_)
        .                           | ty::PredicateKind::WellFormed(_)
        .                           | ty::PredicateKind::ObjectSafe(_)
        .                           | ty::PredicateKind::ClosureKind(..)
-- line 386 ----------------------------------------
-- line 397 ----------------------------------------
        .                           ty::PredicateKind::TypeWellFormedFromEnv(..) => {
        .                               bug!("TypeWellFormedFromEnv is only used for Chalk")
        .                           }
        .                       },
        .                       Some(pred) => match pred {
        .                           ty::PredicateKind::Trait(data) => {
        .                               let trait_obligation = obligation.with(Binder::dummy(data));
        .           
   66,640 ( 0.00%)                      self.process_trait_obligation(
        .                                   obligation,
  293,216 ( 0.02%)                          trait_obligation,
        .                                   &mut pending_obligation.stalled_on,
        .                               )
        .                           }
        .           
        .                           ty::PredicateKind::RegionOutlives(data) => {
    5,196 ( 0.00%)                      match infcx.region_outlives_predicate(&obligation.cause, Binder::dummy(data)) {
    3,464 ( 0.00%)                          Ok(()) => ProcessResult::Changed(vec![]),
        .                                   Err(_) => ProcessResult::Error(CodeSelectionError(Unimplemented)),
        .                               }
        .                           }
        .           
        .                           ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(t_a, r_b)) => {
    7,496 ( 0.00%)                      if self.register_region_obligations {
   18,740 ( 0.00%)                          self.selcx.infcx().register_region_obligation_with_cause(
        .                                       t_a,
        .                                       r_b,
        .                                       &obligation.cause,
        .                                   );
        .                               }
        .                               ProcessResult::Changed(vec![])
        .                           }
        .           
        .                           ty::PredicateKind::Projection(ref data) => {
        .                               let project_obligation = obligation.with(Binder::dummy(*data));
        .           
    4,520 ( 0.00%)                      self.process_projection_obligation(
        .                                   obligation,
   13,560 ( 0.00%)                          project_obligation,
        .                                   &mut pending_obligation.stalled_on,
        .                               )
        .                           }
        .           
        .                           ty::PredicateKind::ObjectSafe(trait_def_id) => {
      132 ( 0.00%)                      if !self.selcx.tcx().is_object_safe(trait_def_id) {
        .                                   ProcessResult::Error(CodeSelectionError(Unimplemented))
        .                               } else {
        .                                   ProcessResult::Changed(vec![])
        .                               }
        .                           }
        .           
        .                           ty::PredicateKind::ClosureKind(_, closure_substs, kind) => {
    1,368 ( 0.00%)                      match self.selcx.infcx().closure_kind(closure_substs) {
        .                                   Some(closure_kind) => {
      852 ( 0.00%)                              if closure_kind.extends(kind) {
        .                                           ProcessResult::Changed(vec![])
        .                                       } else {
        .                                           ProcessResult::Error(CodeSelectionError(Unimplemented))
        .                                       }
        .                                   }
        .                                   None => ProcessResult::Unchanged,
        .                               }
        .                           }
        .           
        .                           ty::PredicateKind::WellFormed(arg) => {
   63,875 ( 0.00%)                      match wf::obligations(
        .                                   self.selcx.infcx(),
   18,250 ( 0.00%)                          obligation.param_env,
   18,250 ( 0.00%)                          obligation.cause.body_id,
   27,375 ( 0.00%)                          obligation.recursion_depth + 1,
        .                                   arg,
        .                                   obligation.cause.span,
        .                               ) {
        .                                   None => {
    7,160 ( 0.00%)                              pending_obligation.stalled_on =
   12,530 ( 0.00%)                                  vec![TyOrConstInferVar::maybe_from_generic_arg(arg).unwrap()];
    3,580 ( 0.00%)                              ProcessResult::Unchanged
        .                                   }
   22,005 ( 0.00%)                          Some(os) => ProcessResult::Changed(mk_pending(os)),
        .                               }
        .                           }
        .           
        .                           ty::PredicateKind::Subtype(subtype) => {
    2,232 ( 0.00%)                      match self.selcx.infcx().subtype_predicate(
        .                                   &obligation.cause,
        .                                   obligation.param_env,
        .                                   Binder::dummy(subtype),
        .                               ) {
        .                                   None => {
        .                                       // None means that both are unresolved.
    1,230 ( 0.00%)                              pending_obligation.stalled_on = vec![
      246 ( 0.00%)                                  TyOrConstInferVar::maybe_from_ty(subtype.a).unwrap(),
      492 ( 0.00%)                                  TyOrConstInferVar::maybe_from_ty(subtype.b).unwrap(),
        .                                       ];
        .                                       ProcessResult::Unchanged
        .                                   }
        .                                   Some(Ok(ok)) => ProcessResult::Changed(mk_pending(ok.obligations)),
        .                                   Some(Err(err)) => {
        .                                       let expected_found =
        .                                           ExpectedFound::new(subtype.a_is_expected, subtype.a, subtype.b);
        .                                       ProcessResult::Error(FulfillmentErrorCode::CodeSubtypeError(
-- line 497 ----------------------------------------
-- line 498 ----------------------------------------
        .                                           expected_found,
        .                                           err,
        .                                       ))
        .                                   }
        .                               }
        .                           }
        .           
        .                           ty::PredicateKind::Coerce(coerce) => {
      560 ( 0.00%)                      match self.selcx.infcx().coerce_predicate(
        .                                   &obligation.cause,
        .                                   obligation.param_env,
        .                                   Binder::dummy(coerce),
        .                               ) {
        .                                   None => {
        .                                       // None means that both are unresolved.
       30 ( 0.00%)                              pending_obligation.stalled_on = vec![
        6 ( 0.00%)                                  TyOrConstInferVar::maybe_from_ty(coerce.a).unwrap(),
       12 ( 0.00%)                                  TyOrConstInferVar::maybe_from_ty(coerce.b).unwrap(),
        .                                       ];
        .                                       ProcessResult::Unchanged
        .                                   }
        .                                   Some(Ok(ok)) => ProcessResult::Changed(mk_pending(ok.obligations)),
        .                                   Some(Err(err)) => {
        .                                       let expected_found = ExpectedFound::new(false, coerce.a, coerce.b);
        .                                       ProcessResult::Error(FulfillmentErrorCode::CodeSubtypeError(
        .                                           expected_found,
-- line 523 ----------------------------------------
-- line 639 ----------------------------------------
        .                                   }
        .                               }
        .                           }
        .                           ty::PredicateKind::TypeWellFormedFromEnv(..) => {
        .                               bug!("TypeWellFormedFromEnv is only used for Chalk")
        .                           }
        .                       },
        .                   }
  259,695 ( 0.02%)      }
        .           
  253,669 ( 0.02%)      #[instrument(level = "debug", skip(self, obligation, stalled_on))]
        .               fn process_trait_obligation(
        .                   &mut self,
        .                   obligation: &PredicateObligation<'tcx>,
        .                   trait_obligation: TraitObligation<'tcx>,
        .                   stalled_on: &mut Vec<TyOrConstInferVar<'tcx>>,
        .               ) -> ProcessResult<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>> {
   13,351 ( 0.00%)          let infcx = self.selcx.infcx();
   40,053 ( 0.00%)          if obligation.predicate.is_global() {
        .                       // no type variables present, can use evaluation for better caching.
        .                       // FIXME: consider caching errors too.
    9,882 ( 0.00%)              if infcx.predicate_must_hold_considering_regions(obligation) {
        .                           debug!(
        .                               "selecting trait at depth {} evaluated to holds",
        .                               obligation.recursion_depth
        .                           );
    9,846 ( 0.00%)                  return ProcessResult::Changed(vec![]);
        .                       }
        .                   }
        .           
   58,988 ( 0.00%)          match self.selcx.select(&trait_obligation) {
        .                       Ok(Some(impl_source)) => {
        .                           debug!("selecting trait at depth {} yielded Ok(Some)", obligation.recursion_depth);
   93,132 ( 0.01%)                  ProcessResult::Changed(mk_pending(impl_source.nested_obligations()))
        .                       }
        .                       Ok(None) => {
        .                           debug!("selecting trait at depth {} yielded Ok(None)", obligation.recursion_depth);
        .           
        .                           // This is a bit subtle: for the most part, the
        .                           // only reason we can fail to make progress on
        .                           // trait selection is because we don't have enough
        .                           // information about the types in the trait.
        .                           stalled_on.clear();
        .                           stalled_on.extend(substs_infer_vars(
        .                               self.selcx,
    3,250 ( 0.00%)                      trait_obligation.predicate.map_bound(|pred| pred.trait_ref.substs),
        .                           ));
        .           
        .                           debug!(
        .                               "process_predicate: pending obligation {:?} now stalled on {:?}",
        .                               infcx.resolve_vars_if_possible(obligation.clone()),
        .                               stalled_on
        .                           );
        .           
    3,250 ( 0.00%)                  ProcessResult::Unchanged
        .                       }
        .                       Err(selection_err) => {
        .                           debug!("selecting trait at depth {} yielded Err", obligation.recursion_depth);
        .           
       56 ( 0.00%)                  ProcessResult::Error(CodeSelectionError(selection_err))
        .                       }
        .                   }
        .               }
        .           
   10,197 ( 0.00%)      fn process_projection_obligation(
        .                   &mut self,
        .                   obligation: &PredicateObligation<'tcx>,
        .                   project_obligation: PolyProjectionObligation<'tcx>,
        .                   stalled_on: &mut Vec<TyOrConstInferVar<'tcx>>,
        .               ) -> ProcessResult<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>> {
      927 ( 0.00%)          let tcx = self.selcx.tcx();
        .           
    2,781 ( 0.00%)          if obligation.predicate.is_global() {
        .                       // no type variables present, can use evaluation for better caching.
        .                       // FIXME: consider caching errors too.
      104 ( 0.00%)              if self.selcx.infcx().predicate_must_hold_considering_regions(obligation) {
      312 ( 0.00%)                  if let Some(key) = ProjectionCacheKey::from_poly_projection_predicate(
        .                               &mut self.selcx,
      364 ( 0.00%)                      project_obligation.predicate,
        .                           ) {
        .                               // If `predicate_must_hold_considering_regions` succeeds, then we've
        .                               // evaluated all sub-obligations. We can therefore mark the 'root'
        .                               // obligation as complete, and skip evaluating sub-obligations.
      312 ( 0.00%)                      self.selcx
        .                                   .infcx()
        .                                   .inner
        .                                   .borrow_mut()
        .                                   .projection_cache()
        .                                   .complete(key, EvaluationResult::EvaluatedToOk);
        .                           }
      104 ( 0.00%)                  return ProcessResult::Changed(vec![]);
        .                       } else {
        .                           tracing::debug!("Does NOT hold: {:?}", obligation);
        .                       }
        .                   }
        .           
    6,125 ( 0.00%)          match project::poly_project_and_unify_type(self.selcx, &project_obligation) {
        .                       Ok(Ok(Some(os))) => ProcessResult::Changed(mk_pending(os)),
        .                       Ok(Ok(None)) => {
        .                           stalled_on.clear();
        .                           stalled_on.extend(substs_infer_vars(
        .                               self.selcx,
      438 ( 0.00%)                      project_obligation.predicate.map_bound(|pred| pred.projection_ty.substs),
        .                           ));
      438 ( 0.00%)                  ProcessResult::Unchanged
        .                       }
        .                       // Let the caller handle the recursion
        .                       Ok(Err(project::InProgress)) => ProcessResult::Changed(mk_pending(vec![
        .                           project_obligation.with(project_obligation.predicate.to_predicate(tcx)),
        .                       ])),
        .                       Err(e) => ProcessResult::Error(CodeProjectionError(e)),
        .                   }
    7,416 ( 0.00%)      }
        .           }
        .           
        .           /// Returns the set of inference variables contained in `substs`.
        .           fn substs_infer_vars<'a, 'tcx>(
        .               selcx: &mut SelectionContext<'a, 'tcx>,
        .               substs: ty::Binder<'tcx, SubstsRef<'tcx>>,
        .           ) -> impl Iterator<Item = TyOrConstInferVar<'tcx>> {
        .               selcx
        .                   .infcx()
        .                   .resolve_vars_if_possible(substs)
        .                   .skip_binder() // ok because this check doesn't care about regions
        .                   .iter()
        .                   .filter(|arg| arg.has_infer_types_or_consts())
        .                   .flat_map(|arg| {
   19,520 ( 0.00%)              let mut walker = arg.walk();
   35,166 ( 0.00%)              while let Some(c) = walker.next() {
    3,910 ( 0.00%)                  if !c.has_infer_types_or_consts() {
        .                               walker.visited.remove(&c);
        .                               walker.skip_current_subtree();
        .                           }
        .                       }
        .                       walker.visited.into_iter()
        .                   })
        .                   .filter_map(TyOrConstInferVar::maybe_from_generic_arg)
        .           }
        .           
        .           fn to_fulfillment_error<'tcx>(
        .               error: Error<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>>,
        .           ) -> FulfillmentError<'tcx> {
        .               let mut iter = error.backtrace.into_iter();
        4 ( 0.00%)      let obligation = iter.next().unwrap().obligation;
        .               // The root obligation is the last item in the backtrace - if there's only
        .               // one item, then it's the same as the main obligation
        .               let root_obligation = iter.next_back().map_or_else(|| obligation.clone(), |e| e.obligation);
      120 ( 0.00%)      FulfillmentError::new(obligation, error.error, root_obligation)
        .           }

1,224,414 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/fulfill.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/interval.rs
--------------------------------------------------------------------------------
Ir               

-- line 25 ----------------------------------------
      .                   Bound::Included(start) => start.index() as u32,
      .                   Bound::Excluded(start) => start.index() as u32 + 1,
      .                   Bound::Unbounded => 0,
      .               }
      .           }
      .           
      .           #[inline]
      .           fn inclusive_end<T: Idx>(domain: usize, range: impl RangeBounds<T>) -> Option<u32> {
126,530 ( 0.01%)      let end = match range.end_bound() {
      .                   Bound::Included(end) => end.index() as u32,
      .                   Bound::Excluded(end) => end.index().checked_sub(1)? as u32,
      .                   Bound::Unbounded => domain.checked_sub(1)? as u32,
      .               };
      .               Some(end)
      .           }
      .           
      .           impl<I: Idx> IntervalSet<I> {
-- line 41 ----------------------------------------
-- line 54 ----------------------------------------
      .                   self.iter_intervals().flatten()
      .               }
      .           
      .               /// Iterates through intervals stored in the set, in order.
      .               pub fn iter_intervals(&self) -> impl Iterator<Item = std::ops::Range<I>> + '_
      .               where
      .                   I: Step,
      .               {
    297 ( 0.00%)          self.map.iter().map(|&(start, end)| I::new(start as usize)..I::new(end as usize + 1))
      .               }
      .           
      .               /// Returns true if we increased the number of elements present.
      .               pub fn insert(&mut self, point: I) -> bool {
 54,316 ( 0.00%)          self.insert_range(point..=point)
      .               }
      .           
      .               /// Returns true if we increased the number of elements present.
152,433 ( 0.01%)      pub fn insert_range(&mut self, range: impl RangeBounds<I> + Clone) -> bool {
      .                   let start = inclusive_start(range.clone());
      .                   let Some(mut end) = inclusive_end(self.domain, range) else {
      .                       // empty range
      .                       return false;
      .                   };
124,722 ( 0.01%)          if start > end {
      .                       return false;
      .                   }
      .           
      .                   loop {
      .                       // This condition looks a bit weird, but actually makes sense.
      .                       //
      .                       // if r.0 == end + 1, then we're actually adjacent, so we want to
      .                       // continue to the next range. We're looking here for the first
      .                       // range which starts *non-adjacently* to our end.
 79,290 ( 0.00%)              let next = self.map.partition_point(|r| r.0 <= end + 1);
 34,724 ( 0.00%)              if let Some(last) = next.checked_sub(1) {
      .                           let (prev_start, prev_end) = &mut self.map[last];
204,150 ( 0.01%)                  if *prev_end + 1 >= start {
      .                               // If the start for the inserted range is adjacent to the
      .                               // end of the previous, we can extend the previous range.
 58,946 ( 0.00%)                      if start < *prev_start {
      .                                   // Our range starts before the one we found. We'll need
      .                                   // to *remove* it, and then try again.
      .                                   //
      .                                   // FIXME: This is not so efficient; we may need to
      .                                   // recurse a bunch of times here. Instead, it's probably
      .                                   // better to do something like drain_filter(...) on the
      .                                   // map to be able to delete or modify all the ranges in
      .                                   // start..=end and then potentially re-insert a new
-- line 101 ----------------------------------------
-- line 104 ----------------------------------------
      .                                   self.map.remove(last);
      .                               } else {
      .                                   // We overlap with the previous range, increase it to
      .                                   // include us.
      .                                   //
      .                                   // Make sure we're actually going to *increase* it though --
      .                                   // it may be that end is just inside the previously existing
      .                                   // set.
 25,929 ( 0.00%)                          return if end > *prev_end {
 15,756 ( 0.00%)                              *prev_end = end;
      .                                       true
      .                                   } else {
      .                                       false
      .                                   };
      .                               }
      .                           } else {
      .                               // Otherwise, we don't overlap, so just insert
 13,656 ( 0.00%)                      self.map.insert(last + 1, (start, end));
      .                               return true;
      .                           }
      .                       } else {
      .                           if self.map.is_empty() {
      .                               // Quite common in practice, and expensive to call memcpy
      .                               // with length zero.
      .                               self.map.push((start, end));
      .                           } else {
  2,097 ( 0.00%)                      self.map.insert(next, (start, end));
      .                           }
      .                           return true;
      .                       }
      .                   }
135,496 ( 0.01%)      }
      .           
      .               pub fn contains(&self, needle: I) -> bool {
      .                   let needle = needle.index() as u32;
 19,194 ( 0.00%)          let last = match self.map.partition_point(|r| r.0 <= needle).checked_sub(1) {
      .                       Some(idx) => idx,
      .                       None => {
      .                           // All ranges in the map start after the new range's end
      .                           return false;
      .                       }
      .                   };
      .                   let (_, prev_end) = &self.map[last];
 17,284 ( 0.00%)          needle <= *prev_end
      .               }
      .           
      .               pub fn superset(&self, other: &IntervalSet<I>) -> bool
      .               where
      .                   I: Step,
      .               {
      .                   // FIXME: Performance here is probably not great. We will be doing a lot
      .                   // of pointless tree traversals.
      .                   other.iter().all(|elem| self.contains(elem))
      .               }
      .           
      .               pub fn is_empty(&self) -> bool {
  8,528 ( 0.00%)          self.map.is_empty()
      .               }
      .           
      .               /// Returns the maximum (last) element present in the set from `range`.
  8,369 ( 0.00%)      pub fn last_set_in(&self, range: impl RangeBounds<I> + Clone) -> Option<I> {
      .                   let start = inclusive_start(range.clone());
      .                   let Some(end) = inclusive_end(self.domain, range) else {
      .                       // empty range
      .                       return None;
      .                   };
 16,738 ( 0.00%)          if start > end {
      .                       return None;
      .                   }
 15,972 ( 0.00%)          let last = match self.map.partition_point(|r| r.0 <= end).checked_sub(1) {
      .                       Some(idx) => idx,
      .                       None => {
      .                           // All ranges in the map start after the new range's end
      .                           return None;
      .                       }
      .                   };
      .                   let (_, prev_end) = &self.map[last];
  7,839 ( 0.00%)          if start <= *prev_end { Some(I::new(std::cmp::min(*prev_end, end) as usize)) } else { None }
 16,738 ( 0.00%)      }
      .           
 15,600 ( 0.00%)      pub fn insert_all(&mut self) {
      .                   self.clear();
  3,120 ( 0.00%)          self.map.push((0, self.domain.try_into().unwrap()));
 15,600 ( 0.00%)      }
      .           
400,208 ( 0.02%)      pub fn union(&mut self, other: &IntervalSet<I>) -> bool
      .               where
      .                   I: Step,
      .               {
150,078 ( 0.01%)          assert_eq!(self.domain, other.domain);
      .                   let mut did_insert = false;
      .                   for range in other.iter_intervals() {
136,272 ( 0.01%)              did_insert |= self.insert_range(range);
      .                   }
      .                   did_insert
450,234 ( 0.03%)      }
      .           }
      .           
      .           /// This data structure optimizes for cases where the stored bits in each row
      .           /// are expected to be highly contiguous (long ranges of 1s or 0s), in contrast
      .           /// to BitMatrix and SparseBitMatrix which are optimized for
      .           /// "random"/non-contiguous bits and cheap(er) point queries at the expense of
      .           /// memory usage.
      .           #[derive(Clone)]
-- line 207 ----------------------------------------
-- line 215 ----------------------------------------
      .           }
      .           
      .           impl<R: Idx, C: Step + Idx> SparseIntervalMatrix<R, C> {
      .               pub fn new(column_size: usize) -> SparseIntervalMatrix<R, C> {
      .                   SparseIntervalMatrix { rows: IndexVec::new(), column_size }
      .               }
      .           
      .               pub fn rows(&self) -> impl Iterator<Item = R> {
    914 ( 0.00%)          self.rows.indices()
      .               }
      .           
      .               pub fn row(&self, row: R) -> Option<&IntervalSet<C>> {
      .                   self.rows.get(row)
      .               }
      .           
      .               fn ensure_row(&mut self, row: R) -> &mut IntervalSet<C> {
  3,999 ( 0.00%)          self.rows.ensure_contains_elem(row, || IntervalSet::new(self.column_size));
      .                   &mut self.rows[row]
      .               }
      .           
      .               pub fn union_row(&mut self, row: R, from: &IntervalSet<C>) -> bool
      .               where
      .                   C: Step,
      .               {
 70,102 ( 0.00%)          self.ensure_row(row).union(from)
      .               }
      .           
      .               pub fn union_rows(&mut self, read: R, write: R) -> bool
      .               where
      .                   C: Step,
      .               {
 49,726 ( 0.00%)          if read == write || self.rows.get(read).is_none() {
      .                       return false;
      .                   }
      .                   self.ensure_row(write);
124,315 ( 0.01%)          let (read_row, write_row) = self.rows.pick2_mut(read, write);
 99,452 ( 0.01%)          write_row.union(read_row)
      .               }
      .           
      .               pub fn insert_all_into_row(&mut self, row: R) {
  4,160 ( 0.00%)          self.ensure_row(row).insert_all();
      .               }
      .           
      .               pub fn insert_range(&mut self, row: R, range: impl RangeBounds<C> + Clone) {
      .                   self.ensure_row(row).insert_range(range);
      .               }
      .           
      .               pub fn insert(&mut self, row: R, point: C) -> bool {
      .                   self.ensure_row(row).insert(point)
-- line 263 ----------------------------------------

528,164 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/interval.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/type_check/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 118 ----------------------------------------
      .           /// - `promoted` -- map of promoted constants within `body`
      .           /// - `universal_regions` -- the universal regions from `body`s function signature
      .           /// - `location_table` -- MIR location map of `body`
      .           /// - `borrow_set` -- information about borrows occurring in `body`
      .           /// - `all_facts` -- when using Polonius, this is the generated set of Polonius facts
      .           /// - `flow_inits` -- results of a maybe-init dataflow analysis
      .           /// - `move_data` -- move-data constructed when performing the maybe-init dataflow analysis
      .           /// - `elements` -- MIR region map
  3,360 ( 0.00%)  pub(crate) fn type_check<'mir, 'tcx>(
      .               infcx: &InferCtxt<'_, 'tcx>,
      .               param_env: ty::ParamEnv<'tcx>,
      .               body: &Body<'tcx>,
      .               promoted: &IndexVec<Promoted, Body<'tcx>>,
      .               universal_regions: &Rc<UniversalRegions<'tcx>>,
      .               location_table: &LocationTable,
      .               borrow_set: &BorrowSet<'tcx>,
      .               all_facts: &mut Option<AllFacts>,
      .               flow_inits: &mut ResultsCursor<'mir, 'tcx, MaybeInitializedPlaces<'mir, 'tcx>>,
      .               move_data: &MoveData<'tcx>,
      .               elements: &Rc<RegionValueElements>,
      .               upvars: &[Upvar<'tcx>],
      .           ) -> MirTypeckResults<'tcx> {
  2,520 ( 0.00%)      let implicit_region_bound = infcx.tcx.mk_region(ty::ReVar(universal_regions.fr_fn_body));
      .               let mut universe_causes = FxHashMap::default();
      .               universe_causes.insert(ty::UniverseIndex::from_u32(0), UniverseInfo::other());
  6,160 ( 0.00%)      let mut constraints = MirTypeckRegionConstraints {
      .                   placeholder_indices: PlaceholderIndices::default(),
      .                   placeholder_index_to_region: IndexVec::default(),
    280 ( 0.00%)          liveness_constraints: LivenessValues::new(elements.clone()),
      .                   outlives_constraints: OutlivesConstraintSet::default(),
      .                   member_constraints: MemberConstraintSet::default(),
      .                   closure_bounds_mapping: Default::default(),
      .                   type_tests: Vec::default(),
  1,120 ( 0.00%)          universe_causes,
      .               };
      .           
      .               let CreateResult {
    560 ( 0.00%)          universal_region_relations,
  1,120 ( 0.00%)          region_bound_pairs,
  1,120 ( 0.00%)          normalized_inputs_and_output,
  1,400 ( 0.00%)      } = free_region_relations::create(
      .                   infcx,
      .                   param_env,
      .                   Some(implicit_region_bound),
      .                   universal_regions,
      .                   &mut constraints,
      .               );
      .           
    560 ( 0.00%)      for u in ty::UniverseIndex::ROOT..infcx.universe() {
      .                   let info = UniverseInfo::other();
      .                   constraints.universe_causes.insert(u, info);
      .               }
      .           
  2,520 ( 0.00%)      let mut borrowck_context = BorrowCheckContext {
    280 ( 0.00%)          universal_regions,
      .                   location_table,
      .                   borrow_set,
      .                   all_facts,
      .                   constraints: &mut constraints,
      .                   upvars,
      .               };
      .           
      .               let opaque_type_values = type_check_internal(
-- line 180 ----------------------------------------
-- line 243 ----------------------------------------
      .                               } else {
      .                                   Some((opaque_type_key, decl))
      .                               }
      .                           })
      .                           .collect()
      .                   },
      .               );
      .           
  3,360 ( 0.00%)      MirTypeckResults { constraints, universal_region_relations, opaque_type_values }
  2,240 ( 0.00%)  }
      .           
      .           #[instrument(
      .               skip(infcx, body, promoted, region_bound_pairs, borrowck_context, extra),
      .               level = "debug"
      .           )]
      .           fn type_check_internal<'a, 'tcx, R>(
      .               infcx: &'a InferCtxt<'a, 'tcx>,
      .               param_env: ty::ParamEnv<'tcx>,
-- line 260 ----------------------------------------
-- line 270 ----------------------------------------
      .                   body,
      .                   param_env,
      .                   region_bound_pairs,
      .                   implicit_region_bound,
      .                   borrowck_context,
      .               );
      .               let errors_reported = {
      .                   let mut verifier = TypeVerifier::new(&mut checker, body, promoted);
    280 ( 0.00%)          verifier.visit_body(&body);
    280 ( 0.00%)          verifier.errors_reported
      .               };
      .           
    280 ( 0.00%)      if !errors_reported {
      .                   // if verifier failed, don't do further checks to avoid ICEs
    280 ( 0.00%)          checker.typeck_mir(body);
      .               }
      .           
  3,640 ( 0.00%)      extra(checker)
      .           }
      .           
      .           fn translate_outlives_facts(typeck: &mut TypeChecker<'_, '_>) {
      .               let cx = &mut typeck.borrowck_context;
  1,120 ( 0.00%)      if let Some(facts) = cx.all_facts {
      .                   let _prof_timer = typeck.infcx.tcx.prof.generic_activity("polonius_fact_generation");
      .                   let location_table = cx.location_table;
      .                   facts.subset_base.extend(cx.constraints.outlives_constraints.outlives().iter().flat_map(
      .                       |constraint: &OutlivesConstraint<'_>| {
      .                           if let Some(from_location) = constraint.locations.from_location() {
      .                               Either::Left(iter::once((
      .                                   constraint.sup,
      .                                   constraint.sub,
-- line 300 ----------------------------------------
-- line 334 ----------------------------------------
      .               body: &'b Body<'tcx>,
      .               promoted: &'b IndexVec<Promoted, Body<'tcx>>,
      .               last_span: Span,
      .               errors_reported: bool,
      .           }
      .           
      .           impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {
      .               fn visit_span(&mut self, span: &Span) {
197,787 ( 0.01%)          if !span.is_dummy() {
 49,184 ( 0.00%)              self.last_span = *span;
      .                   }
      .               }
      .           
261,074 ( 0.02%)      fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext, location: Location) {
      .                   self.sanitize_place(place, location, context);
189,872 ( 0.01%)      }
      .           
 50,964 ( 0.00%)      fn visit_constant(&mut self, constant: &Constant<'tcx>, location: Location) {
      .                   self.super_constant(constant, location);
 33,976 ( 0.00%)          let ty = self.sanitize_type(constant, constant.literal.ty());
      .           
 38,223 ( 0.00%)          self.cx.infcx.tcx.for_each_free_region(&ty, |live_region| {
      .                       let live_region_vid =
      .                           self.cx.borrowck_context.universal_regions.to_region_vid(live_region);
  3,958 ( 0.00%)              self.cx
      .                           .borrowck_context
      .                           .constraints
      .                           .liveness_constraints
  3,958 ( 0.00%)                  .add_element(live_region_vid, location);
      .                   });
      .           
 16,988 ( 0.00%)          if let Some(annotation_index) = constant.user_ty {
  3,195 ( 0.00%)              if let Err(terr) = self.cx.relate_type_and_user_type(
    710 ( 0.00%)                  constant.literal.ty(),
      .                           ty::Variance::Invariant,
    710 ( 0.00%)                  &UserTypeProjection { base: annotation_index, projs: vec![] },
    710 ( 0.00%)                  location.to_locations(),
      .                           ConstraintCategory::Boring,
      .                       ) {
      .                           let annotation = &self.cx.user_type_annotations[annotation_index];
      .                           span_mirbug!(
      .                               self,
      .                               constant,
      .                               "bad constant user type {:?} vs {:?}: {:?}",
      .                               annotation,
      .                               constant.literal.ty(),
      .                               terr,
      .                           );
      .                       }
      .                   } else {
      .                       let tcx = self.tcx();
 11,676 ( 0.00%)              let maybe_uneval = match constant.literal {
 11,676 ( 0.00%)                  ConstantKind::Ty(ct) => match ct.val {
    223 ( 0.00%)                      ty::ConstKind::Unevaluated(uv) => Some(uv),
      .                               _ => None,
      .                           },
      .                           _ => None,
      .                       };
    446 ( 0.00%)              if let Some(uv) = maybe_uneval {
    446 ( 0.00%)                  if let Some(promoted) = uv.promoted {
      .                               let check_err = |verifier: &mut TypeVerifier<'a, 'b, 'tcx>,
      .                                                promoted: &Body<'tcx>,
      .                                                ty,
      .                                                san_ty| {
    531 ( 0.00%)                          if let Err(terr) = verifier.cx.eq_types(
      .                                       ty,
      .                                       san_ty,
    354 ( 0.00%)                              location.to_locations(),
      .                                       ConstraintCategory::Boring,
      .                                   ) {
      .                                       span_mirbug!(
      .                                           verifier,
      .                                           promoted,
      .                                           "bad promoted type ({:?}: {:?}): {:?}",
      .                                           ty,
      .                                           san_ty,
      .                                           terr
      .                                       );
      .                                   };
      .                               };
      .           
    354 ( 0.00%)                      if !self.errors_reported {
    177 ( 0.00%)                          let promoted_body = &self.promoted[promoted];
    708 ( 0.00%)                          self.sanitize_promoted(promoted_body, location);
      .           
      .                                   let promoted_ty = promoted_body.return_ty();
      .                                   check_err(self, promoted_body, ty, promoted_ty);
      .                               }
      .                           } else {
    322 ( 0.00%)                      if let Err(terr) = self.cx.fully_perform_op(
     92 ( 0.00%)                          location.to_locations(),
      .                                   ConstraintCategory::Boring,
    322 ( 0.00%)                          self.cx.param_env.and(type_op::ascribe_user_type::AscribeUserType::new(
     92 ( 0.00%)                              constant.literal.ty(),
      .                                       uv.def.did,
    184 ( 0.00%)                              UserSubsts { substs: uv.substs, user_self_ty: None },
      .                                   )),
      .                               ) {
      .                                   span_mirbug!(
      .                                       self,
      .                                       constant,
      .                                       "bad constant type {:?} ({:?})",
      .                                       constant,
      .                                       terr
      .                                   );
      .                               }
      .                           }
 14,676 ( 0.00%)              } else if let Some(static_def_id) = constant.check_static_ptr(tcx) {
      .                           let unnormalized_ty = tcx.type_of(static_def_id);
      2 ( 0.00%)                  let locations = location.to_locations();
      7 ( 0.00%)                  let normalized_ty = self.cx.normalize(unnormalized_ty, locations);
      5 ( 0.00%)                  let literal_ty = constant.literal.ty().builtin_deref(true).unwrap().ty;
      .           
      3 ( 0.00%)                  if let Err(terr) = self.cx.eq_types(
      .                               literal_ty,
      .                               normalized_ty,
      .                               locations,
      .                               ConstraintCategory::Boring,
      .                           ) {
      .                               span_mirbug!(self, constant, "bad static type {:?} ({:?})", constant, terr);
      .                           }
      .                       }
      .           
 21,058 ( 0.00%)              if let ty::FnDef(def_id, substs) = *constant.literal.ty().kind() {
  3,660 ( 0.00%)                  let instantiated_predicates = tcx.predicates_of(def_id).instantiate(tcx, substs);
  3,660 ( 0.00%)                  self.cx.normalize_and_prove_instantiated_predicates(
      .                               def_id,
 10,980 ( 0.00%)                      instantiated_predicates,
  3,660 ( 0.00%)                      location.to_locations(),
      .                           );
      .                       }
      .                   }
 33,976 ( 0.00%)      }
      .           
 89,232 ( 0.01%)      fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, location: Location) {
      .                   self.super_rvalue(rvalue, location);
 24,336 ( 0.00%)          let rval_ty = rvalue.ty(self.body, self.tcx());
 97,344 ( 0.01%)          self.sanitize_type(rvalue, rval_ty);
      .               }
      .           
101,740 ( 0.01%)      fn visit_local_decl(&mut self, local: Local, local_decl: &LocalDecl<'tcx>) {
      .                   self.super_local_decl(local, local_decl);
 50,870 ( 0.00%)          self.sanitize_type(local_decl, local_decl.ty);
      .           
 30,522 ( 0.00%)          if let Some(user_ty) = &local_decl.user_ty {
      7 ( 0.00%)              for (user_ty, span) in user_ty.projections_and_spans() {
     35 ( 0.00%)                  let ty = if !local_decl.is_nonref_binding() {
      .                               // If we have a binding of the form `let ref x: T = ..`
      .                               // then remove the outermost reference so we can check the
      .                               // type annotation for the remaining type.
      .                               if let ty::Ref(_, rty, _) = local_decl.ty.kind() {
      .                                   rty
      .                               } else {
      .                                   bug!("{:?} with ref binding has wrong type {}", local, local_decl.ty);
      .                               }
      .                           } else {
      .                               local_decl.ty
      .                           };
      .           
     56 ( 0.00%)                  if let Err(terr) = self.cx.relate_type_and_user_type(
      .                               ty,
      .                               ty::Variance::Invariant,
      .                               user_ty,
     21 ( 0.00%)                      Locations::All(*span),
      .                               ConstraintCategory::TypeAnnotation,
      .                           ) {
      .                               span_mirbug!(
      .                                   self,
      .                                   local,
      .                                   "bad user type on variable {:?}: {:?} != {:?} ({:?})",
      .                                   local,
      .                                   local_decl.ty,
      .                                   local_decl.user_ty,
      .                                   terr,
      .                               );
      .                           }
      .                       }
      .                   }
 81,392 ( 0.01%)      }
      .           
  3,199 ( 0.00%)      fn visit_body(&mut self, body: &Body<'tcx>) {
  1,371 ( 0.00%)          self.sanitize_type(&"return type", body.return_ty());
      .                   for local_decl in &body.local_decls {
 50,870 ( 0.00%)              self.sanitize_type(local_decl, local_decl.ty);
      .                   }
    914 ( 0.00%)          if self.errors_reported {
      .                       return;
      .                   }
      .                   self.super_body(body);
  3,656 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {
      .               fn new(
      .                   cx: &'a mut TypeChecker<'b, 'tcx>,
      .                   body: &'b Body<'tcx>,
      .                   promoted: &'b IndexVec<Promoted, Body<'tcx>>,
      .               ) -> Self {
  2,520 ( 0.00%)          TypeVerifier { body, promoted, cx, last_span: body.span, errors_reported: false }
      .               }
      .           
      .               fn tcx(&self) -> TyCtxt<'tcx> {
 66,218 ( 0.00%)          self.cx.infcx.tcx
      .               }
      .           
349,020 ( 0.02%)      fn sanitize_type(&mut self, parent: &dyn fmt::Debug, ty: Ty<'tcx>) -> Ty<'tcx> {
 69,804 ( 0.00%)          if ty.has_escaping_bound_vars() || ty.references_error() {
      .                       span_mirbug_and_err!(self, parent, "bad type {:?}", ty)
      .                   } else {
      .                       ty
      .                   }
244,314 ( 0.02%)      }
      .           
      .               /// Checks that the types internal to the `place` match up with
      .               /// what would be expected.
      .               fn sanitize_place(
      .                   &mut self,
      .                   place: &Place<'tcx>,
      .                   location: Location,
      .                   context: PlaceContext,
      .               ) -> PlaceTy<'tcx> {
      .                   debug!("sanitize_place: {:?}", place);
      .           
 94,936 ( 0.01%)          let mut place_ty = PlaceTy::from_ty(self.body.local_decls[place.local].ty);
      .           
 33,722 ( 0.00%)          for elem in place.projection.iter() {
  4,994 ( 0.00%)              if place_ty.variant_index.is_none() {
  4,600 ( 0.00%)                  if place_ty.ty.references_error() {
      .                               assert!(self.errors_reported);
      .                               return PlaceTy::from_ty(self.tcx().ty_error());
      .                           }
      .                       }
      .                       place_ty = self.sanitize_projection(place_ty, elem, place, location);
      .                   }
      .           
 69,916 ( 0.00%)          if let PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy) = context {
      .                       let tcx = self.tcx();
      .                       let trait_ref = ty::TraitRef {
 16,720 ( 0.00%)                  def_id: tcx.require_lang_item(LangItem::Copy, Some(self.last_span)),
  8,360 ( 0.00%)                  substs: tcx.mk_substs_trait(place_ty.ty, &[]),
      .                       };
      .           
      .                       // To have a `Copy` operand, the type `T` of the
      .                       // value must be `Copy`. Note that we prove that `T: Copy`,
      .                       // rather than using the `is_copy_modulo_regions`
      .                       // test. This is important because
      .                       // `is_copy_modulo_regions` ignores the resulting region
      .                       // obligations and assumes they pass. This can result in
      .                       // bounds from `Copy` impls being unsoundly ignored (e.g.,
      .                       // #29149). Note that we decide to use `Copy` before knowing
      .                       // whether the bounds fully apply: in effect, the rule is
      .                       // that if a value of some type could implement `Copy`, then
      .                       // it must.
  5,016 ( 0.00%)              self.cx.prove_trait_ref(
      .                           trait_ref,
      .                           location.to_locations(),
      .                           ConstraintCategory::CopyBound,
      .                       );
      .                   }
      .           
      .                   place_ty
      .               }
-- line 595 ----------------------------------------
-- line 598 ----------------------------------------
      .                   // Determine the constraints from the promoted MIR by running the type
      .                   // checker on the promoted MIR, then transfer the constraints back to
      .                   // the main MIR, changing the locations to the provided location.
      .           
      .                   let parent_body = mem::replace(&mut self.body, promoted_body);
      .           
      .                   // Use new sets of constraints and closure bounds so that we can
      .                   // modify their locations.
    177 ( 0.00%)          let all_facts = &mut None;
      .                   let mut constraints = Default::default();
      .                   let mut closure_bounds = Default::default();
      .                   let mut liveness_constraints =
    354 ( 0.00%)              LivenessValues::new(Rc::new(RegionValueElements::new(&promoted_body)));
      .                   // Don't try to add borrow_region facts for the promoted MIR
      .           
      .                   let mut swap_constraints = |this: &mut Self| {
    708 ( 0.00%)              mem::swap(this.cx.borrowck_context.all_facts, all_facts);
      .                       mem::swap(
    708 ( 0.00%)                  &mut this.cx.borrowck_context.constraints.outlives_constraints,
      .                           &mut constraints,
      .                       );
      .                       mem::swap(
    708 ( 0.00%)                  &mut this.cx.borrowck_context.constraints.closure_bounds_mapping,
      .                           &mut closure_bounds,
      .                       );
      .                       mem::swap(
    708 ( 0.00%)                  &mut this.cx.borrowck_context.constraints.liveness_constraints,
      .                           &mut liveness_constraints,
      .                       );
      .                   };
      .           
    177 ( 0.00%)          swap_constraints(self);
      .           
    531 ( 0.00%)          self.visit_body(&promoted_body);
      .           
    354 ( 0.00%)          if !self.errors_reported {
      .                       // if verifier failed, don't do further checks to avoid ICEs
    531 ( 0.00%)              self.cx.typeck_mir(promoted_body);
      .                   }
      .           
    177 ( 0.00%)          self.body = parent_body;
      .                   // Merge the outlives constraints back in, at the given location.
    177 ( 0.00%)          swap_constraints(self);
      .           
      .                   let locations = location.to_locations();
      .                   for constraint in constraints.outlives().iter() {
      .                       let mut constraint = constraint.clone();
      .                       constraint.locations = locations;
  2,566 ( 0.00%)              if let ConstraintCategory::Return(_)
      .                       | ConstraintCategory::UseAsConst
      .                       | ConstraintCategory::UseAsStatic = constraint.category
      .                       {
      .                           // "Returning" from a promoted is an assignment to a
      .                           // temporary from the user's point of view.
      .                           constraint.category = ConstraintCategory::Boring;
      .                       }
      .                       self.cx.borrowck_context.constraints.outlives_constraints.push(constraint)
      .                   }
      .                   for region in liveness_constraints.rows() {
      .                       // If the region is live at at least one location in the promoted MIR,
      .                       // then add a liveness constraint to the main MIR for this region
      .                       // at the location provided as an argument to this method
145,791 ( 0.01%)              if liveness_constraints.get_elements(region).next().is_some() {
    891 ( 0.00%)                  self.cx
      .                               .borrowck_context
      .                               .constraints
      .                               .liveness_constraints
      .                               .add_element(region, location);
      .                       }
      .                   }
      .           
    177 ( 0.00%)          if !closure_bounds.is_empty() {
      .                       let combined_bounds_mapping =
      .                           closure_bounds.into_iter().flat_map(|(_, value)| value).collect();
      .                       let existing = self
      .                           .cx
      .                           .borrowck_context
      .                           .constraints
      .                           .closure_bounds_mapping
      .                           .insert(location, combined_bounds_mapping);
      .                       assert!(existing.is_none(), "Multiple promoteds/closures at the same location.");
      .                   }
    708 ( 0.00%)      }
      .           
      .               fn sanitize_projection(
      .                   &mut self,
      .                   base: PlaceTy<'tcx>,
      .                   pi: PlaceElem<'tcx>,
      .                   place: &Place<'tcx>,
      .                   location: Location,
      .               ) -> PlaceTy<'tcx> {
      .                   debug!("sanitize_projection: {:?} {:?} {:?}", base, pi, place);
      .                   let tcx = self.tcx();
  4,994 ( 0.00%)          let base_ty = base.ty;
 24,970 ( 0.00%)          match pi {
      .                       ProjectionElem::Deref => {
  8,475 ( 0.00%)                  let deref_ty = base_ty.builtin_deref(true);
      .                           PlaceTy::from_ty(deref_ty.map(|t| t.ty).unwrap_or_else(|| {
      .                               span_mirbug_and_err!(self, place, "deref of non-pointer {:?}", base_ty)
      .                           }))
      .                       }
     37 ( 0.00%)              ProjectionElem::Index(i) => {
    148 ( 0.00%)                  let index_ty = Place::from(i).ty(self.body, tcx).ty;
     37 ( 0.00%)                  if index_ty != tcx.types.usize {
      .                               PlaceTy::from_ty(span_mirbug_and_err!(self, i, "index by non-usize {:?}", i))
      .                           } else {
     37 ( 0.00%)                      PlaceTy::from_ty(base_ty.builtin_index().unwrap_or_else(|| {
      .                                   span_mirbug_and_err!(self, place, "index of non-array {:?}", base_ty)
      .                               }))
      .                           }
      .                       }
      .                       ProjectionElem::ConstantIndex { .. } => {
      .                           // consider verifying in-bounds
      .                           PlaceTy::from_ty(base_ty.builtin_index().unwrap_or_else(|| {
      .                               span_mirbug_and_err!(self, place, "index of non-array {:?}", base_ty)
-- line 712 ----------------------------------------
-- line 720 ----------------------------------------
      .                               }
      .                               ty::Slice(..) => {
      .                                   assert!(from_end, "slice subslices should use from_end");
      .                                   base_ty
      .                               }
      .                               _ => span_mirbug_and_err!(self, place, "slice of non-array {:?}", base_ty),
      .                           })
      .                       }
  1,182 ( 0.00%)              ProjectionElem::Downcast(maybe_name, index) => match base_ty.kind() {
  1,182 ( 0.00%)                  ty::Adt(adt_def, _substs) if adt_def.is_enum() => {
  1,182 ( 0.00%)                      if index.as_usize() >= adt_def.variants.len() {
      .                                   PlaceTy::from_ty(span_mirbug_and_err!(
      .                                       self,
      .                                       place,
      .                                       "cast to variant #{:?} but enum only has {:?}",
      .                                       index,
      .                                       adt_def.variants.len()
      .                                   ))
      .                               } else {
-- line 738 ----------------------------------------
-- line 752 ----------------------------------------
      .                                   )
      .                               } else {
      .                                   span_mirbug_and_err!(self, place, "can't downcast {:?}", base_ty)
      .                               };
      .                               PlaceTy::from_ty(ty)
      .                           }
      .                       },
      .                       ProjectionElem::Field(field, fty) => {
  8,690 ( 0.00%)                  let fty = self.sanitize_type(place, fty);
 24,332 ( 0.00%)                  let fty = self.cx.normalize(fty, location);
      .                           match self.field_ty(place, base, field, location) {
      .                               Ok(ty) => {
 13,904 ( 0.00%)                          let ty = self.cx.normalize(ty, location);
  3,476 ( 0.00%)                          if let Err(terr) = self.cx.eq_types(
      .                                       ty,
      .                                       fty,
      .                                       location.to_locations(),
      .                                       ConstraintCategory::Boring,
      .                                   ) {
      .                                       span_mirbug!(
      .                                           self,
      .                                           place,
-- line 773 ----------------------------------------
-- line 800 ----------------------------------------
      .                   &mut self,
      .                   parent: &dyn fmt::Debug,
      .                   base_ty: PlaceTy<'tcx>,
      .                   field: Field,
      .                   location: Location,
      .               ) -> Result<Ty<'tcx>, FieldAccessError> {
      .                   let tcx = self.tcx();
      .           
  1,738 ( 0.00%)          let (variant, substs) = match base_ty {
  1,576 ( 0.00%)              PlaceTy { ty, variant_index: Some(variant_index) } => match *ty.kind() {
    788 ( 0.00%)                  ty::Adt(adt_def, substs) => (&adt_def.variants[variant_index], substs),
      .                           ty::Generator(def_id, substs, _) => {
      .                               let mut variants = substs.as_generator().state_tys(def_id, tcx);
      .                               let mut variant = match variants.nth(variant_index.into()) {
      .                                   Some(v) => v,
      .                                   None => bug!(
      .                                       "variant_index of generator out of range: {:?}/{:?}",
      .                                       variant_index,
      .                                       substs.as_generator().state_tys(def_id, tcx).count()
-- line 818 ----------------------------------------
-- line 820 ----------------------------------------
      .                               };
      .                               return match variant.nth(field.index()) {
      .                                   Some(ty) => Ok(ty),
      .                                   None => Err(FieldAccessError::OutOfRange { field_count: variant.count() }),
      .                               };
      .                           }
      .                           _ => bug!("can't have downcast of non-adt non-generator type"),
      .                       },
  5,376 ( 0.00%)              PlaceTy { ty, variant_index: None } => match *ty.kind() {
  2,988 ( 0.00%)                  ty::Adt(adt_def, substs) if !adt_def.is_enum() => {
      .                               (&adt_def.variants[VariantIdx::new(0)], substs)
      .                           }
     79 ( 0.00%)                  ty::Closure(_, substs) => {
    711 ( 0.00%)                      return match substs
      .                                   .as_closure()
      .                                   .tupled_upvars_ty()
      .                                   .tuple_element_ty(field.index())
      .                               {
      .                                   Some(ty) => Ok(ty),
      .                                   None => Err(FieldAccessError::OutOfRange {
      .                                       field_count: substs.as_closure().upvar_tys().count(),
      .                                   }),
-- line 841 ----------------------------------------
-- line 846 ----------------------------------------
      .                               // accessible without a variant index.
      .                               return match substs.as_generator().prefix_tys().nth(field.index()) {
      .                                   Some(ty) => Ok(ty),
      .                                   None => Err(FieldAccessError::OutOfRange {
      .                                       field_count: substs.as_generator().prefix_tys().count(),
      .                                   }),
      .                               };
      .                           }
    518 ( 0.00%)                  ty::Tuple(tys) => {
    518 ( 0.00%)                      return match tys.get(field.index()) {
  2,072 ( 0.00%)                          Some(&ty) => Ok(ty.expect_ty()),
      .                                   None => Err(FieldAccessError::OutOfRange { field_count: tys.len() }),
      .                               };
      .                           }
      .                           _ => {
      .                               return Ok(span_mirbug_and_err!(
      .                                   self,
      .                                   parent,
      .                                   "can't project out of {:?}",
      .                                   base_ty
      .                               ));
      .                           }
      .                       },
      .                   };
      .           
  1,141 ( 0.00%)          if let Some(field) = variant.fields.get(field.index()) {
 11,410 ( 0.00%)              Ok(self.cx.normalize(field.ty(tcx, substs), location))
      .                   } else {
      .                       Err(FieldAccessError::OutOfRange { field_count: variant.fields.len() })
      .                   }
      .               }
      .           }
      .           
      .           /// The MIR type checker. Visits the MIR and enforces all the
      .           /// constraints needed for it to be valid and well-typed. Along the
-- line 880 ----------------------------------------
-- line 943 ----------------------------------------
      .                   FxHashMap<Location, FxHashMap<(RegionVid, RegionVid), (ConstraintCategory, Span)>>,
      .           
      .               crate universe_causes: FxHashMap<ty::UniverseIndex, UniverseInfo<'tcx>>,
      .           
      .               crate type_tests: Vec<TypeTest<'tcx>>,
      .           }
      .           
      .           impl<'tcx> MirTypeckRegionConstraints<'tcx> {
 10,920 ( 0.00%)      fn placeholder_region(
      .                   &mut self,
      .                   infcx: &InferCtxt<'_, 'tcx>,
      .                   placeholder: ty::PlaceholderRegion,
      .               ) -> ty::Region<'tcx> {
      .                   let placeholder_index = self.placeholder_indices.insert(placeholder);
  2,184 ( 0.00%)          match self.placeholder_index_to_region.get(placeholder_index) {
    104 ( 0.00%)              Some(&v) => v,
      .                       None => {
  4,160 ( 0.00%)                  let origin = NllRegionVariableOrigin::Placeholder(placeholder);
  9,360 ( 0.00%)                  let region = infcx.next_nll_region_var_in_universe(origin, placeholder.universe);
      .                           self.placeholder_index_to_region.push(region);
      .                           region
      .                       }
      .                   }
  8,736 ( 0.00%)      }
      .           }
      .           
      .           /// The `Locations` type summarizes *where* region constraints are
      .           /// required to hold. Normally, this is at a particular point which
      .           /// created the obligation, but for constraints that the user gave, we
      .           /// want the constraint to hold at all points.
 31,051 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
      .           pub enum Locations {
      .               /// Indicates that a type constraint should always be true. This
      .               /// is particularly important in the new borrowck analysis for
      .               /// things like the type of the return slot. Consider this
      .               /// example:
      .               ///
      .               /// ```
      .               /// fn foo<'a>(x: &'a u32) -> &'a u32 {
-- line 981 ----------------------------------------
-- line 1020 ----------------------------------------
      .                   match self {
      .                       Locations::All(_) => None,
      .                       Locations::Single(from_location) => Some(*from_location),
      .                   }
      .               }
      .           
      .               /// Gets a span representing the location.
      .               pub fn span(&self, body: &Body<'_>) -> Span {
     42 ( 0.00%)          match self {
      6 ( 0.00%)              Locations::All(span) => *span,
     75 ( 0.00%)              Locations::Single(l) => body.source_info(*l).span,
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> TypeChecker<'a, 'tcx> {
      .               fn new(
      .                   infcx: &'a InferCtxt<'a, 'tcx>,
      .                   body: &'a Body<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   region_bound_pairs: &'a RegionBoundPairs<'tcx>,
      .                   implicit_region_bound: ty::Region<'tcx>,
      .                   borrowck_context: &'a mut BorrowCheckContext<'a, 'tcx>,
      .               ) -> Self {
  3,640 ( 0.00%)          let mut checker = Self {
      .                       infcx,
      .                       last_span: DUMMY_SP,
      .                       body,
    280 ( 0.00%)              user_type_annotations: &body.user_type_annotations,
      .                       param_env,
      .                       region_bound_pairs,
      .                       implicit_region_bound,
      .                       borrowck_context,
      .                       reported_errors: Default::default(),
      .                   };
      .                   checker.check_user_type_annotations();
      .                   checker
      .               }
      .           
      .               fn unsized_feature_enabled(&self) -> bool {
 19,336 ( 0.00%)          let features = self.tcx().features();
 38,672 ( 0.00%)          features.unsized_locals || features.unsized_fn_params
      .               }
      .           
      .               /// Equate the inferred type and the annotated type for user type annotations
      .               fn check_user_type_annotations(&mut self) {
      .                   debug!(
      .                       "check_user_type_annotations: user_type_annotations={:?}",
      .                       self.user_type_annotations
      .                   );
    399 ( 0.00%)          for user_annotation in self.user_type_annotations {
    798 ( 0.00%)              let CanonicalUserTypeAnnotation { span, ref user_ty, inferred_ty } = *user_annotation;
  2,394 ( 0.00%)              let inferred_ty = self.normalize(inferred_ty, Locations::All(span));
    798 ( 0.00%)              let annotation = self.instantiate_canonical_with_fresh_inference_vars(span, user_ty);
    798 ( 0.00%)              match annotation {
     88 ( 0.00%)                  UserType::Ty(mut ty) => {
    264 ( 0.00%)                      ty = self.normalize(ty, Locations::All(span));
      .           
     88 ( 0.00%)                      if let Err(terr) = self.eq_types(
      .                                   ty,
     44 ( 0.00%)                          inferred_ty,
      .                                   Locations::All(span),
      .                                   ConstraintCategory::BoringNoLocation,
      .                               ) {
      .                                   span_mirbug!(
      .                                       self,
      .                                       user_annotation,
      .                                       "bad user type ({:?} = {:?}): {:?}",
      .                                       ty,
      .                                       inferred_ty,
      .                                       terr
      .                                   );
      .                               }
      .           
    308 ( 0.00%)                      self.prove_predicate(
    132 ( 0.00%)                          ty::Binder::dummy(ty::PredicateKind::WellFormed(inferred_ty.into()))
      .                                       .to_predicate(self.tcx()),
     88 ( 0.00%)                          Locations::All(span),
      .                                   ConstraintCategory::TypeAnnotation,
      .                               );
      .                           }
  2,840 ( 0.00%)                  UserType::TypeOf(def_id, user_substs) => {
  3,195 ( 0.00%)                      if let Err(terr) = self.fully_perform_op(
    710 ( 0.00%)                          Locations::All(span),
      .                                   ConstraintCategory::BoringNoLocation,
  1,775 ( 0.00%)                          self.param_env.and(type_op::ascribe_user_type::AscribeUserType::new(
    355 ( 0.00%)                              inferred_ty,
      .                                       def_id,
    710 ( 0.00%)                              user_substs,
      .                                   )),
      .                               ) {
      .                                   span_mirbug!(
      .                                       self,
      .                                       user_annotation,
      .                                       "bad user type AscribeUserType({:?}, {:?} {:?}, type_of={:?}): {:?}",
      .                                       inferred_ty,
      .                                       def_id,
-- line 1116 ----------------------------------------
-- line 1128 ----------------------------------------
      .               fn push_region_constraints(
      .                   &mut self,
      .                   locations: Locations,
      .                   category: ConstraintCategory,
      .                   data: &QueryRegionConstraints<'tcx>,
      .               ) {
      .                   debug!("constraints generated: {:#?}", data);
      .           
  3,131 ( 0.00%)          constraint_conversion::ConstraintConversion::new(
      3 ( 0.00%)              self.infcx,
  6,259 ( 0.00%)              self.borrowck_context.universal_regions,
  3,131 ( 0.00%)              self.region_bound_pairs,
      .                       Some(self.implicit_region_bound),
    383 ( 0.00%)              self.param_env,
      .                       locations,
      .                       category,
  3,131 ( 0.00%)              &mut self.borrowck_context.constraints,
      .                   )
      .                   .convert_all(data);
      .               }
      .           
      .               /// Try to relate `sub <: sup`
      .               fn sub_types(
      .                   &mut self,
      .                   sub: Ty<'tcx>,
      .                   sup: Ty<'tcx>,
      .                   locations: Locations,
      .                   category: ConstraintCategory,
      .               ) -> Fallible<()> {
      .                   // Use this order of parameters because the sup type is usually the
      .                   // "expected" type in diagnostics.
187,326 ( 0.01%)          self.relate_types(sup, ty::Variance::Contravariant, sub, locations, category)
      .               }
      .           
      .               #[instrument(skip(self, category), level = "debug")]
      .               fn eq_types(
      .                   &mut self,
      .                   expected: Ty<'tcx>,
      .                   found: Ty<'tcx>,
      .                   locations: Locations,
      .                   category: ConstraintCategory,
      .               ) -> Fallible<()> {
 32,822 ( 0.00%)          self.relate_types(expected, ty::Variance::Invariant, found, locations, category)
      .               }
      .           
  6,154 ( 0.00%)      #[instrument(skip(self), level = "debug")]
      .               fn relate_type_and_user_type(
      .                   &mut self,
      .                   a: Ty<'tcx>,
      .                   v: ty::Variance,
      .                   user_ty: &UserTypeProjection,
      .                   locations: Locations,
      .                   category: ConstraintCategory,
      .               ) -> Fallible<()> {
  1,468 ( 0.00%)          let annotated_type = self.user_type_annotations[user_ty.base].inferred_ty;
      .                   let mut curr_projected_ty = PlaceTy::from_ty(annotated_type);
      .           
  1,101 ( 0.00%)          let tcx = self.infcx.tcx;
      .           
      .                   for proj in &user_ty.projs {
      .                       let projected_ty = curr_projected_ty.projection_ty_core(
      .                           tcx,
      .                           self.param_env,
      .                           proj,
      .                           |this, field, &()| {
      .                               let ty = this.field_ty(tcx, field);
-- line 1193 ----------------------------------------
-- line 1197 ----------------------------------------
      .                       curr_projected_ty = projected_ty;
      .                   }
      .                   debug!(
      .                       "user_ty base: {:?} freshened: {:?} projs: {:?} yields: {:?}",
      .                       user_ty.base, annotated_type, user_ty.projs, curr_projected_ty
      .                   );
      .           
      .                   let ty = curr_projected_ty.ty;
  5,887 ( 0.00%)          self.relate_types(ty, v.xform(ty::Variance::Contravariant), a, locations, category)?;
      .           
      .                   Ok(())
      .               }
      .           
      .               /// Equates a type `anon_ty` that may contain opaque types whose
      .               /// values are to be inferred by the MIR.
      .               ///
      .               /// The type `revealed_ty` contains the same type as `anon_ty`, but with the
-- line 1213 ----------------------------------------
-- line 1231 ----------------------------------------
      .               ///
      .               /// In terms of our function parameters:
      .               ///
      .               /// * `anon_ty` would be `Box<Foo<T>>` where `Foo<T>` is an opaque type
      .               ///   scoped to this function (note that it is parameterized by the
      .               ///   generics of `foo`). Note that `anon_ty` is not just the opaque type,
      .               ///   but the entire return type (which may contain opaque types within it).
      .               /// * `revealed_ty` would be `Box<(T, u32)>`
  6,061 ( 0.00%)      #[instrument(skip(self), level = "debug")]
      .               fn eq_opaque_type_and_type(
      .                   &mut self,
      .                   revealed_ty: Ty<'tcx>,
      .                   anon_ty: Ty<'tcx>,
      .                   locations: Locations,
      .                   category: ConstraintCategory,
      .               ) -> Fallible<()> {
      .                   // Fast path for the common case.
    319 ( 0.00%)          if !anon_ty.has_opaque_types() {
    638 ( 0.00%)              if let Err(terr) = self.eq_types(anon_ty, revealed_ty, locations, category) {
      .                           span_mirbug!(
      .                               self,
      .                               locations,
      .                               "eq_opaque_type_and_type: `{:?}=={:?}` failed with `{:?}`",
      .                               revealed_ty,
      .                               anon_ty,
      .                               terr
      .                           );
-- line 1257 ----------------------------------------
-- line 1328 ----------------------------------------
      .                               || "opaque_type_map".to_string(),
      .                           ),
      .                       )?;
      .                   }
      .                   Ok(())
      .               }
      .           
      .               fn tcx(&self) -> TyCtxt<'tcx> {
159,609 ( 0.01%)          self.infcx.tcx
      .               }
      .           
      .               #[instrument(skip(self, body, location), level = "debug")]
      .               fn check_stmt(&mut self, body: &Body<'tcx>, stmt: &Statement<'tcx>, location: Location) {
      .                   let tcx = self.tcx();
100,260 ( 0.01%)          match stmt.kind {
  8,112 ( 0.00%)              StatementKind::Assign(box (ref place, ref rv)) => {
      .                           // Assignments to temporaries are not "interesting";
      .                           // they are not caused by the user, but rather artifacts
      .                           // of lowering. Assignments to other sorts of places *are* interesting
      .                           // though.
 32,342 ( 0.00%)                  let category = match place.as_local() {
      .                               Some(RETURN_PLACE) => {
  1,288 ( 0.00%)                          let defining_ty = &self.borrowck_context.universal_regions.defining_ty;
    644 ( 0.00%)                          if defining_ty.is_const() {
     60 ( 0.00%)                              if tcx.is_static(defining_ty.def_id()) {
      .                                           ConstraintCategory::UseAsStatic
      .                                       } else {
      .                                           ConstraintCategory::UseAsConst
      .                                       }
      .                                   } else {
      .                                       ConstraintCategory::Return(ReturnConstraint::Normal)
      .                                   }
      .                               }
      .                               Some(l)
 12,139 ( 0.00%)                          if matches!(
 16,011 ( 0.00%)                              body.local_decls[l].local_info,
      .                                       Some(box LocalInfo::AggregateTemp)
      .                                   ) =>
      .                               {
      .                                   ConstraintCategory::Usage
      .                               }
      .                               Some(l) if !body.local_decls[l].is_user_variable() => {
      .                                   ConstraintCategory::Boring
      .                               }
-- line 1371 ----------------------------------------
-- line 1373 ----------------------------------------
      .                           };
      .                           debug!(
      .                               "assignment category: {:?} {:?}",
      .                               category,
      .                               place.as_local().map(|l| &body.local_decls[l])
      .                           );
      .           
      .                           let place_ty = place.ty(body, tcx).ty;
 97,344 ( 0.01%)                  let place_ty = self.normalize(place_ty, location);
  8,112 ( 0.00%)                  let rv_ty = rv.ty(body, tcx);
 48,672 ( 0.00%)                  let rv_ty = self.normalize(rv_ty, location);
 16,224 ( 0.00%)                  if let Err(terr) =
      .                               self.sub_types(rv_ty, place_ty, location.to_locations(), category)
      .                           {
      .                               span_mirbug!(
      .                                   self,
      .                                   stmt,
      .                                   "bad assignment ({:?} = {:?}): {:?}",
      .                                   place_ty,
      .                                   rv_ty,
      .                                   terr
      .                               );
      .                           }
      .           
    558 ( 0.00%)                  if let Some(annotation_index) = self.rvalue_user_ty(rv) {
      .                               if let Err(terr) = self.relate_type_and_user_type(
      .                                   rv_ty,
      .                                   ty::Variance::Invariant,
      .                                   &UserTypeProjection { base: annotation_index, projs: vec![] },
      .                                   location.to_locations(),
      .                                   ConstraintCategory::Boring,
      .                               ) {
      .                                   let annotation = &self.user_type_annotations[annotation_index];
-- line 1405 ----------------------------------------
-- line 1409 ----------------------------------------
      .                                       "bad user type on rvalue ({:?} = {:?}): {:?}",
      .                                       annotation,
      .                                       rv_ty,
      .                                       terr
      .                                   );
      .                               }
      .                           }
      .           
 56,784 ( 0.00%)                  self.check_rvalue(body, rv, location);
  8,112 ( 0.00%)                  if !self.unsized_feature_enabled() {
      .                               let trait_ref = ty::TraitRef {
 89,232 ( 0.01%)                          def_id: tcx.require_lang_item(LangItem::Sized, Some(self.last_span)),
 40,560 ( 0.00%)                          substs: tcx.mk_substs_trait(place_ty, &[]),
      .                               };
 24,336 ( 0.00%)                      self.prove_trait_ref(
      .                                   trait_ref,
      .                                   location.to_locations(),
      .                                   ConstraintCategory::SizedBound,
      .                               );
      .                           }
      .                       }
      .                       StatementKind::SetDiscriminant { ref place, variant_index } => {
      .                           let place_type = place.ty(body, tcx).ty;
-- line 1431 ----------------------------------------
-- line 1444 ----------------------------------------
      .                               span_bug!(
      .                                   stmt.source_info.span,
      .                                   "bad set discriminant ({:?} = {:?}): value of of range",
      .                                   place,
      .                                   variant_index
      .                               );
      .                           };
      .                       }
      5 ( 0.00%)              StatementKind::AscribeUserType(box (ref place, ref projection), variance) => {
      5 ( 0.00%)                  let place_ty = place.ty(body, tcx).ty;
      .                           if let Err(terr) = self.relate_type_and_user_type(
      .                               place_ty,
      .                               variance,
      .                               projection,
     20 ( 0.00%)                      Locations::All(stmt.source_info.span),
      .                               ConstraintCategory::TypeAnnotation,
      .                           ) {
      .                               let annotation = &self.user_type_annotations[projection.base];
      .                               span_mirbug!(
      .                                   self,
      .                                   stmt,
      .                                   "bad type assert ({:?} <: {:?} with projections {:?}): {:?}",
      .                                   place_ty,
-- line 1466 ----------------------------------------
-- line 1488 ----------------------------------------
      .               #[instrument(skip(self, body, term_location), level = "debug")]
      .               fn check_terminator(
      .                   &mut self,
      .                   body: &Body<'tcx>,
      .                   term: &Terminator<'tcx>,
      .                   term_location: Location,
      .               ) {
      .                   let tcx = self.tcx();
 32,440 ( 0.00%)          match term.kind {
      .                       TerminatorKind::Goto { .. }
      .                       | TerminatorKind::Resume
      .                       | TerminatorKind::Abort
      .                       | TerminatorKind::Return
      .                       | TerminatorKind::GeneratorDrop
      .                       | TerminatorKind::Unreachable
      .                       | TerminatorKind::Drop { .. }
      .                       | TerminatorKind::FalseEdge { .. }
      .                       | TerminatorKind::FalseUnwind { .. }
      .                       | TerminatorKind::InlineAsm { .. } => {
      .                           // no checks needed for these
      .                       }
      .           
      .                       TerminatorKind::DropAndReplace { ref place, ref value, target: _, unwind: _ } => {
      6 ( 0.00%)                  let place_ty = place.ty(body, tcx).ty;
      6 ( 0.00%)                  let rv_ty = value.ty(body, tcx);
      .           
      .                           let locations = term_location.to_locations();
     12 ( 0.00%)                  if let Err(terr) =
      .                               self.sub_types(rv_ty, place_ty, locations, ConstraintCategory::Assignment)
      .                           {
      .                               span_mirbug!(
      .                                   self,
      .                                   term,
      .                                   "bad DropAndReplace ({:?} = {:?}): {:?}",
      .                                   place_ty,
      .                                   rv_ty,
      .                                   terr
      .                               );
      .                           }
      .                       }
  3,572 ( 0.00%)              TerminatorKind::SwitchInt { ref discr, switch_ty, .. } => {
  2,679 ( 0.00%)                  self.check_operand(discr, term_location);
      .           
    893 ( 0.00%)                  let discr_ty = discr.ty(body, tcx);
  1,786 ( 0.00%)                  if let Err(terr) = self.sub_types(
      .                               discr_ty,
      .                               switch_ty,
      .                               term_location.to_locations(),
      .                               ConstraintCategory::Assignment,
      .                           ) {
      .                               span_mirbug!(
      .                                   self,
      .                                   term,
      .                                   "bad SwitchInt ({:?} on {:?}): {:?}",
      .                                   switch_ty,
      .                                   discr_ty,
      .                                   terr
      .                               );
      .                           }
  1,210 ( 0.00%)                  if !switch_ty.is_integral() && !switch_ty.is_char() && !switch_ty.is_bool() {
      .                               span_mirbug!(self, term, "bad SwitchInt discr ty {:?}", switch_ty);
      .                           }
      .                           // FIXME: check the values
      .                       }
 12,012 ( 0.00%)              TerminatorKind::Call { ref func, ref args, ref destination, from_hir_call, .. } => {
 10,010 ( 0.00%)                  self.check_operand(func, term_location);
      .                           for arg in args {
 15,960 ( 0.00%)                      self.check_operand(arg, term_location);
      .                           }
      .           
  2,002 ( 0.00%)                  let func_ty = func.ty(body, tcx);
      .                           debug!("check_terminator: call, func_ty={:?}", func_ty);
  8,008 ( 0.00%)                  let sig = match func_ty.kind() {
  8,008 ( 0.00%)                      ty::FnDef(..) | ty::FnPtr(_) => func_ty.fn_sig(tcx),
      .                               _ => {
      .                                   span_mirbug!(self, term, "call to non-function {:?}", func_ty);
      .                                   return;
      .                               }
      .                           };
 20,020 ( 0.00%)                  let (sig, map) = self.infcx.replace_bound_vars_with_fresh_vars(
  6,006 ( 0.00%)                      term.source_info.span,
      .                               LateBoundRegionConversionTime::FnCall,
      .                               sig,
      .                           );
  4,004 ( 0.00%)                  let sig = self.normalize(sig, term_location);
  8,008 ( 0.00%)                  self.check_call_dest(body, term, &sig, destination, term_location);
      .           
      .                           self.prove_predicates(
  2,002 ( 0.00%)                      sig.inputs_and_output
      .                                   .iter()
 10,388 ( 0.00%)                          .map(|ty| ty::Binder::dummy(ty::PredicateKind::WellFormed(ty.into()))),
      .                               term_location.to_locations(),
      .                               ConstraintCategory::Boring,
      .                           );
      .           
      .                           // The ordinary liveness rules will ensure that all
      .                           // regions in the type of the callee are live here. We
      .                           // then further constrain the late-bound regions that
      .                           // were instantiated at the call site to be live as
      .                           // well. The resulting is that all the input (and
      .                           // output) types in the signature must be live, since
      .                           // all the inputs that fed into it were live.
 15,942 ( 0.00%)                  for &late_bound_region in map.values() {
      .                               let region_vid =
  3,930 ( 0.00%)                          self.borrowck_context.universal_regions.to_region_vid(late_bound_region);
  3,930 ( 0.00%)                      self.borrowck_context
      .                                   .constraints
      .                                   .liveness_constraints
      .                                   .add_element(region_vid, term_location);
      .                           }
      .           
  4,004 ( 0.00%)                  self.check_call_inputs(body, term, &sig, args, term_location, from_hir_call);
      .                       }
    304 ( 0.00%)              TerminatorKind::Assert { ref cond, ref msg, .. } => {
    456 ( 0.00%)                  self.check_operand(cond, term_location);
      .           
    304 ( 0.00%)                  let cond_ty = cond.ty(body, tcx);
    152 ( 0.00%)                  if cond_ty != tcx.types.bool {
      .                               span_mirbug!(self, term, "bad Assert ({:?}, not bool", cond_ty);
      .                           }
      .           
    428 ( 0.00%)                  if let AssertKind::BoundsCheck { ref len, ref index } = *msg {
     31 ( 0.00%)                      if len.ty(body, tcx) != tcx.types.usize {
      .                                   span_mirbug!(self, len, "bounds-check length non-usize {:?}", len)
      .                               }
     31 ( 0.00%)                      if index.ty(body, tcx) != tcx.types.usize {
      .                                   span_mirbug!(self, index, "bounds-check index non-usize {:?}", index)
      .                               }
      .                           }
      .                       }
      .                       TerminatorKind::Yield { ref value, .. } => {
      .                           self.check_operand(value, term_location);
      .           
      .                           let value_ty = value.ty(body, tcx);
-- line 1621 ----------------------------------------
-- line 1647 ----------------------------------------
      .                   &mut self,
      .                   body: &Body<'tcx>,
      .                   term: &Terminator<'tcx>,
      .                   sig: &ty::FnSig<'tcx>,
      .                   destination: &Option<(Place<'tcx>, BasicBlock)>,
      .                   term_location: Location,
      .               ) {
      .                   let tcx = self.tcx();
  8,008 ( 0.00%)          match *destination {
      .                       Some((ref dest, _target_block)) => {
      .                           let dest_ty = dest.ty(body, tcx).ty;
 11,754 ( 0.00%)                  let dest_ty = self.normalize(dest_ty, term_location);
  9,795 ( 0.00%)                  let category = match dest.as_local() {
      .                               Some(RETURN_PLACE) => {
  1,624 ( 0.00%)                          if let BorrowCheckContext {
      .                                       universal_regions:
      .                                           UniversalRegions {
      .                                               defining_ty:
      .                                                   DefiningTy::Const(def_id, _)
      .                                                   | DefiningTy::InlineConst(def_id, _),
      .                                               ..
      .                                           },
      .                                       ..
      .                                   } = self.borrowck_context
      .                                   {
      8 ( 0.00%)                              if tcx.is_static(*def_id) {
      .                                           ConstraintCategory::UseAsStatic
      .                                       } else {
      .                                           ConstraintCategory::UseAsConst
      .                                       }
      .                                   } else {
      .                                       ConstraintCategory::Return(ReturnConstraint::Normal)
      .                                   }
      .                               }
    741 ( 0.00%)                      Some(l) if !body.local_decls[l].is_user_variable() => {
      .                                   ConstraintCategory::Boring
      .                               }
      .                               _ => ConstraintCategory::Assignment,
      .                           };
      .           
      .                           let locations = term_location.to_locations();
      .           
 13,713 ( 0.00%)                  if let Err(terr) = self.sub_types(sig.output(), dest_ty, locations, category) {
      .                               span_mirbug!(
      .                                   self,
      .                                   term,
      .                                   "call dest mismatch ({:?} <- {:?}): {:?}",
      .                                   dest_ty,
      .                                   sig.output(),
      .                                   terr
      .                               );
      .                           }
      .           
      .                           // When `unsized_fn_params` and `unsized_locals` are both not enabled,
      .                           // this check is done at `check_local`.
  1,959 ( 0.00%)                  if self.unsized_feature_enabled() {
      .                               let span = term.source_info.span;
      .                               self.ensure_place_sized(dest_ty, span);
      .                           }
      .                       }
      .                       None => {
     43 ( 0.00%)                  if !self
      .                               .tcx()
    129 ( 0.00%)                      .conservative_is_privately_uninhabited(self.param_env.and(sig.output()))
      .                           {
      .                               span_mirbug!(self, term, "call to converging function {:?} w/o dest", sig);
      .                           }
      .                       }
      .                   }
      .               }
      .           
      .               fn check_call_inputs(
-- line 1718 ----------------------------------------
-- line 1720 ----------------------------------------
      .                   body: &Body<'tcx>,
      .                   term: &Terminator<'tcx>,
      .                   sig: &ty::FnSig<'tcx>,
      .                   args: &[Operand<'tcx>],
      .                   term_location: Location,
      .                   from_hir_call: bool,
      .               ) {
      .                   debug!("check_call_inputs({:?}, {:?})", sig, args);
 14,014 ( 0.00%)          if args.len() < sig.inputs().len() || (args.len() > sig.inputs().len() && !sig.c_variadic) {
      .                       span_mirbug!(self, term, "call to {:?} with wrong # of args", sig);
      .                   }
 10,388 ( 0.00%)          for (n, (fn_arg, op_arg)) in iter::zip(sig.inputs(), args).enumerate() {
      .                       let op_arg_ty = op_arg.ty(body, self.tcx());
 12,768 ( 0.00%)              let op_arg_ty = self.normalize(op_arg_ty, term_location);
      .                       let category = if from_hir_call {
      .                           ConstraintCategory::CallArgument
      .                       } else {
      .                           ConstraintCategory::Boring
      .                       };
  6,384 ( 0.00%)              if let Err(terr) =
  6,384 ( 0.00%)                  self.sub_types(op_arg_ty, fn_arg, term_location.to_locations(), category)
      .                       {
      .                           span_mirbug!(
      .                               self,
      .                               term,
      .                               "bad arg #{:?} ({:?} <- {:?}): {:?}",
      .                               n,
      .                               fn_arg,
      .                               op_arg_ty,
      .                               terr
      .                           );
      .                       }
      .                   }
      .               }
      .           
      .               fn check_iscleanup(&mut self, body: &Body<'tcx>, block_data: &BasicBlockData<'tcx>) {
  3,198 ( 0.00%)          let is_cleanup = block_data.is_cleanup;
 19,464 ( 0.00%)          self.last_span = block_data.terminator().source_info.span;
 38,928 ( 0.00%)          match block_data.terminator().kind {
  1,416 ( 0.00%)              TerminatorKind::Goto { target } => {
  5,664 ( 0.00%)                  self.assert_iscleanup(body, block_data, target, is_cleanup)
      .                       }
    893 ( 0.00%)              TerminatorKind::SwitchInt { ref targets, .. } => {
    893 ( 0.00%)                  for target in targets.all_targets() {
 12,798 ( 0.00%)                      self.assert_iscleanup(body, block_data, *target, is_cleanup);
      .                           }
      .                       }
      .                       TerminatorKind::Resume => {
    227 ( 0.00%)                  if !is_cleanup {
      .                               span_mirbug!(self, block_data, "resume on non-cleanup block!")
      .                           }
      .                       }
      .                       TerminatorKind::Abort => {
      .                           if !is_cleanup {
      .                               span_mirbug!(self, block_data, "abort on non-cleanup block!")
      .                           }
      .                       }
      .                       TerminatorKind::Return => {
    457 ( 0.00%)                  if is_cleanup {
      .                               span_mirbug!(self, block_data, "return on cleanup block")
      .                           }
      .                       }
      .                       TerminatorKind::GeneratorDrop { .. } => {
      .                           if is_cleanup {
      .                               span_mirbug!(self, block_data, "generator_drop in cleanup block")
      .                           }
      .                       }
-- line 1786 ----------------------------------------
-- line 1792 ----------------------------------------
      .                           if let Some(drop) = drop {
      .                               self.assert_iscleanup(body, block_data, drop, is_cleanup);
      .                           }
      .                       }
      .                       TerminatorKind::Unreachable => {}
      .                       TerminatorKind::Drop { target, unwind, .. }
      .                       | TerminatorKind::DropAndReplace { target, unwind, .. }
      .                       | TerminatorKind::Assert { target, cleanup: unwind, .. } => {
  3,745 ( 0.00%)                  self.assert_iscleanup(body, block_data, target, is_cleanup);
  1,498 ( 0.00%)                  if let Some(unwind) = unwind {
    512 ( 0.00%)                      if is_cleanup {
      .                                   span_mirbug!(self, block_data, "unwind on cleanup block")
      .                               }
      .                               self.assert_iscleanup(body, block_data, unwind, true);
      .                           }
      .                       }
  2,002 ( 0.00%)              TerminatorKind::Call { ref destination, cleanup, .. } => {
  9,881 ( 0.00%)                  if let &Some((_, target)) = destination {
  3,918 ( 0.00%)                      self.assert_iscleanup(body, block_data, target, is_cleanup);
      .                           }
  6,006 ( 0.00%)                  if let Some(cleanup) = cleanup {
  1,969 ( 0.00%)                      if is_cleanup {
      .                                   span_mirbug!(self, block_data, "cleanup on cleanup block")
      .                               }
      .                               self.assert_iscleanup(body, block_data, cleanup, true);
      .                           }
      .                       }
  1,188 ( 0.00%)              TerminatorKind::FalseEdge { real_target, imaginary_target } => {
  3,564 ( 0.00%)                  self.assert_iscleanup(body, block_data, real_target, is_cleanup);
  2,970 ( 0.00%)                  self.assert_iscleanup(body, block_data, imaginary_target, is_cleanup);
      .                       }
     66 ( 0.00%)              TerminatorKind::FalseUnwind { real_target, unwind } => {
    165 ( 0.00%)                  self.assert_iscleanup(body, block_data, real_target, is_cleanup);
     66 ( 0.00%)                  if let Some(unwind) = unwind {
     33 ( 0.00%)                      if is_cleanup {
      .                                   span_mirbug!(self, block_data, "cleanup in cleanup block via false unwind");
      .                               }
      .                               self.assert_iscleanup(body, block_data, unwind, true);
      .                           }
      .                       }
      .                       TerminatorKind::InlineAsm { destination, cleanup, .. } => {
      .                           if let Some(target) = destination {
      .                               self.assert_iscleanup(body, block_data, target, is_cleanup);
-- line 1834 ----------------------------------------
-- line 1838 ----------------------------------------
      .                                   span_mirbug!(self, block_data, "cleanup on cleanup block")
      .                               }
      .                               self.assert_iscleanup(body, block_data, cleanup, true);
      .                           }
      .                       }
      .                   }
      .               }
      .           
 89,928 ( 0.01%)      fn assert_iscleanup(
      .                   &mut self,
      .                   body: &Body<'tcx>,
      .                   ctxt: &dyn fmt::Debug,
      .                   bb: BasicBlock,
      .                   iscleanuppad: bool,
      .               ) {
 59,952 ( 0.00%)          if body[bb].is_cleanup != iscleanuppad {
      .                       span_mirbug!(self, ctxt, "cleanuppad mismatch: {:?} should be {:?}", bb, iscleanuppad);
      .                   }
 49,960 ( 0.00%)      }
      .           
      .               fn check_local(&mut self, body: &Body<'tcx>, local: Local, local_decl: &LocalDecl<'tcx>) {
      .                   match body.local_kind(local) {
      .                       LocalKind::ReturnPointer | LocalKind::Arg => {
      .                           // return values of normal functions are required to be
      .                           // sized by typeck, but return values of ADT constructors are
      .                           // not because we don't include a `Self: Sized` bounds on them.
      .                           //
-- line 1864 ----------------------------------------
-- line 1866 ----------------------------------------
      .                           // - maybe we should make that a warning.
      .                           return;
      .                       }
      .                       LocalKind::Var | LocalKind::Temp => {}
      .                   }
      .           
      .                   // When `unsized_fn_params` or `unsized_locals` is enabled, only function calls
      .                   // and nullary ops are checked in `check_call_dest`.
  9,265 ( 0.00%)          if !self.unsized_feature_enabled() {
 18,530 ( 0.00%)              let span = local_decl.source_info.span;
  9,265 ( 0.00%)              let ty = local_decl.ty;
 18,530 ( 0.00%)              self.ensure_place_sized(ty, span);
      .                   }
      .               }
      .           
 83,385 ( 0.01%)      fn ensure_place_sized(&mut self, ty: Ty<'tcx>, span: Span) {
      .                   let tcx = self.tcx();
      .           
      .                   // Erase the regions from `ty` to get a global type.  The
      .                   // `Sized` bound in no way depends on precise regions, so this
      .                   // shouldn't affect `is_sized`.
      .                   let erased_ty = tcx.erase_regions(ty);
 55,590 ( 0.00%)          if !erased_ty.is_sized(tcx.at(span), self.param_env) {
      .                       // in current MIR construction, all non-control-flow rvalue
      .                       // expressions evaluate through `as_temp` or `into` a return
      .                       // slot or local, so to find all unsized rvalues it is enough
      .                       // to check all temps, return slots and locals.
      .                       if self.reported_errors.replace((ty, span)).is_none() {
      .                           let mut diag = struct_span_err!(
      .                               self.tcx().sess,
      .                               span,
-- line 1896 ----------------------------------------
-- line 1901 ----------------------------------------
      .                           );
      .           
      .                           // While this is located in `nll::typeck` this error is not
      .                           // an NLL error, it's a required check to prevent creation
      .                           // of unsized rvalues in a call expression.
      .                           diag.emit();
      .                       }
      .                   }
 55,590 ( 0.00%)      }
      .           
      .               fn aggregate_field_ty(
      .                   &mut self,
      .                   ak: &AggregateKind<'tcx>,
      .                   field_index: usize,
      .                   location: Location,
      .               ) -> Result<Ty<'tcx>, FieldAccessError> {
      .                   let tcx = self.tcx();
      .           
  4,635 ( 0.00%)          match *ak {
  4,770 ( 0.00%)              AggregateKind::Adt(adt_did, variant_index, substs, _, active_field_index) => {
      .                           let def = tcx.adt_def(adt_did);
      .                           let variant = &def.variants[variant_index];
      .                           let adj_field_index = active_field_index.unwrap_or(field_index);
    530 ( 0.00%)                  if let Some(field) = variant.fields.get(adj_field_index) {
  4,770 ( 0.00%)                      Ok(self.normalize(field.ty(tcx, substs), location))
      .                           } else {
      .                               Err(FieldAccessError::OutOfRange { field_count: variant.fields.len() })
      .                           }
      .                       }
     35 ( 0.00%)              AggregateKind::Closure(_, substs) => {
    420 ( 0.00%)                  match substs.as_closure().upvar_tys().nth(field_index) {
      .                               Some(ty) => Ok(ty),
      .                               None => Err(FieldAccessError::OutOfRange {
      .                                   field_count: substs.as_closure().upvar_tys().count(),
      .                               }),
      .                           }
      .                       }
      .                       AggregateKind::Generator(_, substs, _) => {
      .                           // It doesn't make sense to look at a field beyond the prefix;
-- line 1939 ----------------------------------------
-- line 1941 ----------------------------------------
      .                           // aggregate rvalues.
      .                           match substs.as_generator().prefix_tys().nth(field_index) {
      .                               Some(ty) => Ok(ty),
      .                               None => Err(FieldAccessError::OutOfRange {
      .                                   field_count: substs.as_generator().prefix_tys().count(),
      .                               }),
      .                           }
      .                       }
    362 ( 0.00%)              AggregateKind::Array(ty) => Ok(ty),
      .                       AggregateKind::Tuple => {
      .                           unreachable!("This should have been covered in check_rvalues");
      .                       }
      .                   }
      .               }
      .           
 81,606 ( 0.01%)      fn check_operand(&mut self, op: &Operand<'tcx>, location: Location) {
 23,316 ( 0.00%)          if let Operand::Constant(constant) = op {
 12,468 ( 0.00%)              let maybe_uneval = match constant.literal {
 12,468 ( 0.00%)                  ConstantKind::Ty(ct) => match ct.val {
    200 ( 0.00%)                      ty::ConstKind::Unevaluated(uv) => Some(uv),
      .                               _ => None,
      .                           },
      .                           _ => None,
      .                       };
    400 ( 0.00%)              if let Some(uv) = maybe_uneval {
    200 ( 0.00%)                  if uv.promoted.is_none() {
      .                               let tcx = self.tcx();
    161 ( 0.00%)                      let def_id = uv.def.def_id_for_type_of();
     92 ( 0.00%)                      if tcx.def_kind(def_id) == DefKind::InlineConst {
      .                                   let predicates = self.prove_closure_bounds(
      .                                       tcx,
      .                                       def_id.expect_local(),
      .                                       uv.substs,
      .                                       location,
      .                                   );
      .                                   self.normalize_and_prove_instantiated_predicates(
      .                                       def_id,
      .                                       predicates,
      .                                       location.to_locations(),
      .                                   );
      .                               }
      .                           }
      .                       }
      .                   }
 93,264 ( 0.01%)      }
      .           
105,456 ( 0.01%)      fn check_rvalue(&mut self, body: &Body<'tcx>, rvalue: &Rvalue<'tcx>, location: Location) {
      .                   let tcx = self.tcx();
      .           
 41,624 ( 0.00%)          match rvalue {
      .                       Rvalue::Aggregate(ak, ops) => {
      .                           for op in ops {
  5,430 ( 0.00%)                      self.check_operand(op, location);
      .                           }
  1,720 ( 0.00%)                  self.check_aggregate_rvalue(&body, rvalue, ak, ops, location)
      .                       }
      .           
      .                       Rvalue::Repeat(operand, len) => {
      .                           self.check_operand(operand, location);
      .           
      .                           // If the length cannot be evaluated we must assume that the length can be larger
      .                           // than 1.
      .                           // If the length is larger than 1, the repeat expression will need to copy the
-- line 2003 ----------------------------------------
-- line 2045 ----------------------------------------
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
      .           
      .                       Rvalue::NullaryOp(_, ty) => {
      .                           let trait_ref = ty::TraitRef {
     40 ( 0.00%)                      def_id: tcx.require_lang_item(LangItem::Sized, Some(self.last_span)),
      8 ( 0.00%)                      substs: tcx.mk_substs_trait(ty, &[]),
      .                           };
      .           
      .                           self.prove_trait_ref(
      .                               trait_ref,
      .                               location.to_locations(),
      .                               ConstraintCategory::SizedBound,
      .                           );
      .                       }
      .           
      4 ( 0.00%)              Rvalue::ShallowInitBox(operand, ty) => {
      8 ( 0.00%)                  self.check_operand(operand, location);
      .           
      .                           let trait_ref = ty::TraitRef {
     20 ( 0.00%)                      def_id: tcx.require_lang_item(LangItem::Sized, Some(self.last_span)),
      2 ( 0.00%)                      substs: tcx.mk_substs_trait(ty, &[]),
      .                           };
      .           
      .                           self.prove_trait_ref(
      .                               trait_ref,
      .                               location.to_locations(),
      .                               ConstraintCategory::SizedBound,
      .                           );
      .                       }
      .           
  1,612 ( 0.00%)              Rvalue::Cast(cast_kind, op, ty) => {
  1,612 ( 0.00%)                  self.check_operand(op, location);
      .           
  4,319 ( 0.00%)                  match cast_kind {
      .                               CastKind::Pointer(PointerCast::ReifyFnPointer) => {
  1,408 ( 0.00%)                          let fn_sig = op.ty(body, tcx).fn_sig(tcx);
      .           
      .                                   // The type that we see in the fcx is like
      .                                   // `foo::<'a, 'b>`, where `foo` is the path to a
      .                                   // function definition. When we extract the
      .                                   // signature, it comes from the `fn_sig` query,
      .                                   // and hence may contain unnormalized results.
  1,936 ( 0.00%)                          let fn_sig = self.normalize(fn_sig, location);
      .           
    176 ( 0.00%)                          let ty_fn_ptr_from = tcx.mk_fn_ptr(fn_sig);
      .           
    352 ( 0.00%)                          if let Err(terr) = self.eq_types(
    176 ( 0.00%)                              ty,
      .                                       ty_fn_ptr_from,
      .                                       location.to_locations(),
      .                                       ConstraintCategory::Cast,
      .                                   ) {
      .                                       span_mirbug!(
      .                                           self,
      .                                           rvalue,
      .                                           "equating {:?} with {:?} yields {:?}",
-- line 2104 ----------------------------------------
-- line 2158 ----------------------------------------
      .                                           ty_fn_ptr_from,
      .                                           ty,
      .                                           terr
      .                                       );
      .                                   }
      .                               }
      .           
      .                               CastKind::Pointer(PointerCast::Unsize) => {
    405 ( 0.00%)                          let &ty = ty;
      .                                   let trait_ref = ty::TraitRef {
  1,485 ( 0.00%)                              def_id: tcx
    135 ( 0.00%)                                  .require_lang_item(LangItem::CoerceUnsized, Some(self.last_span)),
  1,620 ( 0.00%)                              substs: tcx.mk_substs_trait(op.ty(body, tcx), &[ty.into()]),
      .                                   };
      .           
  1,215 ( 0.00%)                          self.prove_trait_ref(
      .                                       trait_ref,
      .                                       location.to_locations(),
      .                                       ConstraintCategory::Cast,
      .                                   );
      .                               }
      .           
      .                               CastKind::Pointer(PointerCast::MutToConstPointer) => {
      .                                   let ty_from = match op.ty(body, tcx).kind() {
-- line 2181 ----------------------------------------
-- line 2290 ----------------------------------------
      .                                           ty_elem,
      .                                           ty_to,
      .                                           terr
      .                                       )
      .                                   }
      .                               }
      .           
      .                               CastKind::Misc => {
     92 ( 0.00%)                          let ty_from = op.ty(body, tcx);
    368 ( 0.00%)                          let cast_ty_from = CastTy::from_ty(ty_from);
    276 ( 0.00%)                          let cast_ty_to = CastTy::from_ty(ty);
  1,196 ( 0.00%)                          match (cast_ty_from, cast_ty_to) {
      .                                       (None, _)
      .                                       | (_, None | Some(CastTy::FnPtr))
      .                                       | (Some(CastTy::Float), Some(CastTy::Ptr(_)))
      .                                       | (Some(CastTy::Ptr(_) | CastTy::FnPtr), Some(CastTy::Float)) => {
      .                                           span_mirbug!(self, rvalue, "Invalid cast {:?} -> {:?}", ty_from, ty,)
      .                                       }
      .                                       (
      .                                           Some(CastTy::Int(_)),
-- line 2309 ----------------------------------------
-- line 2312 ----------------------------------------
      .                                       | (Some(CastTy::Float), Some(CastTy::Int(_) | CastTy::Float))
      .                                       | (Some(CastTy::Ptr(_)), Some(CastTy::Int(_) | CastTy::Ptr(_)))
      .                                       | (Some(CastTy::FnPtr), Some(CastTy::Int(_) | CastTy::Ptr(_))) => (),
      .                                   }
      .                               }
      .                           }
      .                       }
      .           
  2,995 ( 0.00%)              Rvalue::Ref(region, _borrow_kind, borrowed_place) => {
 17,970 ( 0.00%)                  self.add_reborrow_constraint(&body, location, region, borrowed_place);
      .                       }
      .           
      .                       Rvalue::BinaryOp(
      .                           BinOp::Eq | BinOp::Ne | BinOp::Lt | BinOp::Le | BinOp::Gt | BinOp::Ge,
    798 ( 0.00%)                  box (left, right),
      .                       ) => {
  1,330 ( 0.00%)                  self.check_operand(left, location);
  1,330 ( 0.00%)                  self.check_operand(right, location);
      .           
    266 ( 0.00%)                  let ty_left = left.ty(body, tcx);
    798 ( 0.00%)                  match ty_left.kind() {
      .                               // Types with regions are comparable if they have a common super-type.
      .                               ty::RawPtr(_) | ty::FnPtr(_) => {
      .                                   let ty_right = right.ty(body, tcx);
      .                                   let common_ty = self.infcx.next_ty_var(TypeVariableOrigin {
      .                                       kind: TypeVariableOriginKind::MiscVariable,
      .                                       span: body.source_info(location).span,
      .                                   });
      .                                   self.sub_types(
-- line 2340 ----------------------------------------
-- line 2360 ----------------------------------------
      .                                           ty_right,
      .                                           terr
      .                                       )
      .                                   }
      .                               }
      .                               // For types with no regions we can just check that the
      .                               // both operands have the same type.
      .                               ty::Int(_) | ty::Uint(_) | ty::Bool | ty::Char | ty::Float(_)
  1,330 ( 0.00%)                          if ty_left == right.ty(body, tcx) => {}
      .                               // Other types are compared by trait methods, not by
      .                               // `Rvalue::BinaryOp`.
      .                               _ => span_mirbug!(
      .                                   self,
      .                                   rvalue,
      .                                   "unexpected comparison types {:?} and {:?}",
      .                                   ty_left,
      .                                   right.ty(body, tcx)
      .                               ),
      .                           }
      .                       }
      .           
      .                       Rvalue::Use(operand) | Rvalue::UnaryOp(_, operand) => {
  6,308 ( 0.00%)                  self.check_operand(operand, location);
      .                       }
      .           
      .                       Rvalue::BinaryOp(_, box (left, right))
      .                       | Rvalue::CheckedBinaryOp(_, box (left, right)) => {
    484 ( 0.00%)                  self.check_operand(left, location);
    242 ( 0.00%)                  self.check_operand(right, location);
      .                       }
      .           
      .                       Rvalue::AddressOf(..)
      .                       | Rvalue::ThreadLocalRef(..)
      .                       | Rvalue::Len(..)
      .                       | Rvalue::Discriminant(..) => {}
      .                   }
 38,696 ( 0.00%)      }
      .           
      .               /// If this rvalue supports a user-given type annotation, then
      .               /// extract and return it. This represents the final type of the
      .               /// rvalue and will be unified with the inferred type.
      .               fn rvalue_user_ty(&self, rvalue: &Rvalue<'tcx>) -> Option<UserTypeAnnotationIndex> {
 32,448 ( 0.00%)          match rvalue {
      .                       Rvalue::Use(_)
      .                       | Rvalue::ThreadLocalRef(_)
      .                       | Rvalue::Repeat(..)
      .                       | Rvalue::Ref(..)
      .                       | Rvalue::AddressOf(..)
      .                       | Rvalue::Len(..)
      .                       | Rvalue::Cast(..)
      .                       | Rvalue::ShallowInitBox(..)
      .                       | Rvalue::BinaryOp(..)
      .                       | Rvalue::CheckedBinaryOp(..)
      .                       | Rvalue::NullaryOp(..)
      .                       | Rvalue::UnaryOp(..)
      .                       | Rvalue::Discriminant(..) => None,
      .           
  2,580 ( 0.00%)              Rvalue::Aggregate(aggregate, _) => match **aggregate {
  1,674 ( 0.00%)                  AggregateKind::Adt(_, _, _, user_ty, _) => user_ty,
      .                           AggregateKind::Array(_) => None,
      .                           AggregateKind::Tuple => None,
      .                           AggregateKind::Closure(_, _) => None,
      .                           AggregateKind::Generator(_, _, _) => None,
      .                       },
      .                   }
      .               }
      .           
-- line 2426 ----------------------------------------
-- line 2431 ----------------------------------------
      .                   aggregate_kind: &AggregateKind<'tcx>,
      .                   operands: &[Operand<'tcx>],
      .                   location: Location,
      .               ) {
      .                   let tcx = self.tcx();
      .           
      .                   self.prove_aggregate_predicates(aggregate_kind, location);
      .           
    860 ( 0.00%)          if *aggregate_kind == AggregateKind::Tuple {
      .                       // tuple rvalue field type is always the type of the op. Nothing to check here.
      .                       return;
      .                   }
      .           
    927 ( 0.00%)          for (i, operand) in operands.iter().enumerate() {
    105 ( 0.00%)              let field_ty = match self.aggregate_field_ty(aggregate_kind, i, location) {
  1,854 ( 0.00%)                  Ok(field_ty) => field_ty,
      .                           Err(FieldAccessError::OutOfRange { field_count }) => {
      .                               span_mirbug!(
      .                                   self,
      .                                   rvalue,
      .                                   "accessed field #{} but variant only has {}",
      .                                   i,
      .                                   field_count
      .                               );
      .                               continue;
      .                           }
      .                       };
      .                       let operand_ty = operand.ty(body, tcx);
  5,562 ( 0.00%)              let operand_ty = self.normalize(operand_ty, location);
      .           
  1,854 ( 0.00%)              if let Err(terr) = self.sub_types(
      .                           operand_ty,
    927 ( 0.00%)                  field_ty,
      .                           location.to_locations(),
      .                           ConstraintCategory::Boring,
      .                       ) {
      .                           span_mirbug!(
      .                               self,
      .                               rvalue,
      .                               "{:?} is not a subtype of {:?}: {:?}",
      .                               operand_ty,
-- line 2471 ----------------------------------------
-- line 2486 ----------------------------------------
      .               fn add_reborrow_constraint(
      .                   &mut self,
      .                   body: &Body<'tcx>,
      .                   location: Location,
      .                   borrow_region: ty::Region<'tcx>,
      .                   borrowed_place: &Place<'tcx>,
      .               ) {
      .                   // These constraints are only meaningful during borrowck:
  2,995 ( 0.00%)          let BorrowCheckContext { borrow_set, location_table, all_facts, constraints, .. } =
      .                       self.borrowck_context;
      .           
      .                   // In Polonius mode, we also push a `loan_issued_at` fact
      .                   // linking the loan to the region (in some cases, though,
      .                   // there is no loan associated with this borrow expression --
      .                   // that occurs when we are borrowing an unsafe place, for
      .                   // example).
 17,970 ( 0.00%)          if let Some(all_facts) = all_facts {
      .                       let _prof_timer = self.infcx.tcx.prof.generic_activity("polonius_fact_generation");
      .                       if let Some(borrow_index) = borrow_set.get_index_of(&location) {
      .                           let region_vid = borrow_region.to_region_vid();
      .                           all_facts.loan_issued_at.push((
      .                               region_vid,
      .                               borrow_index,
      .                               location_table.mid_index(location),
      .                           ));
-- line 2510 ----------------------------------------
-- line 2516 ----------------------------------------
      .                   // *p`, where the `p` has type `&'b mut Foo`, for example, we
      .                   // need to ensure that `'b: 'a`.
      .           
      .                   debug!(
      .                       "add_reborrow_constraint({:?}, {:?}, {:?})",
      .                       location, borrow_region, borrowed_place
      .                   );
      .           
  2,995 ( 0.00%)          let mut cursor = borrowed_place.projection.as_ref();
  2,995 ( 0.00%)          let tcx = self.infcx.tcx;
  5,990 ( 0.00%)          let field = path_utils::is_upvar_field_projection(
      .                       tcx,
  5,990 ( 0.00%)              &self.borrowck_context.upvars,
      .                       borrowed_place.as_ref(),
      .                       body,
      .                   );
  5,990 ( 0.00%)          let category = if let Some(field) = field {
     45 ( 0.00%)              let var_hir_id = self.borrowck_context.upvars[field.index()].place.get_root_variable();
      .                       // FIXME(project-rfc-2229#8): Use Place for better diagnostics
      .                       ConstraintCategory::ClosureUpvar(var_hir_id)
      .                   } else {
      .                       ConstraintCategory::Boring
      .                   };
      .           
 17,828 ( 0.00%)          while let [proj_base @ .., elem] = cursor {
      .                       cursor = proj_base;
      .           
      .                       debug!("add_reborrow_constraint - iteration {:?}", elem);
      .           
 16,487 ( 0.00%)              match elem {
      .                           ProjectionElem::Deref => {
  4,264 ( 0.00%)                      let base_ty = Place::ty_from(borrowed_place.local, proj_base, body, tcx).ty;
      .           
      .                               debug!("add_reborrow_constraint - base_ty = {:?}", base_ty);
 10,660 ( 0.00%)                      match base_ty.kind() {
      .                                   ty::Ref(ref_region, _, mutbl) => {
  2,132 ( 0.00%)                              constraints.outlives_constraints.push(OutlivesConstraint {
  4,264 ( 0.00%)                                  sup: ref_region.to_region_vid(),
      .                                           sub: borrow_region.to_region_vid(),
      .                                           locations: location.to_locations(),
      .                                           category,
      .                                           variance_info: ty::VarianceDiagInfo::default(),
      .                                       });
      .           
  5,868 ( 0.00%)                              match mutbl {
      .                                           hir::Mutability::Not => {
      .                                               // Immutable reference. We don't need the base
      .                                               // to be valid for the entire lifetime of
      .                                               // the borrow.
      .                                               break;
      .                                           }
      .                                           hir::Mutability::Mut => {
      .                                               // Mutable reference. We *do* need the base
-- line 2568 ----------------------------------------
-- line 2617 ----------------------------------------
      .               ) {
      .                   let tcx = self.tcx();
      .           
      .                   debug!(
      .                       "prove_aggregate_predicates(aggregate_kind={:?}, location={:?})",
      .                       aggregate_kind, location
      .                   );
      .           
 11,251 ( 0.00%)          let (def_id, instantiated_predicates) = match aggregate_kind {
      .                       AggregateKind::Adt(adt_did, _, substs, _, _) => {
  4,464 ( 0.00%)                  (*adt_did, tcx.predicates_of(*adt_did).instantiate(tcx, substs))
      .                       }
      .           
      .                       // For closures, we have some **extra requirements** we
      .                       //
      .                       // have to check. In particular, in their upvars and
      .                       // signatures, closures often reference various regions
      .                       // from the surrounding function -- we call those the
      .                       // closure's free regions. When we borrow-check (and hence
-- line 2635 ----------------------------------------
-- line 2644 ----------------------------------------
      .                       //
      .                       // Despite the opacity of the previous parapgrah, this is
      .                       // actually relatively easy to understand in terms of the
      .                       // desugaring. A closure gets desugared to a struct, and
      .                       // these extra requirements are basically like where
      .                       // clauses on the struct.
      .                       AggregateKind::Closure(def_id, substs)
      .                       | AggregateKind::Generator(def_id, substs, _) => {
    468 ( 0.00%)                  (*def_id, self.prove_closure_bounds(tcx, def_id.expect_local(), substs, location))
      .                       }
      .           
      .                       AggregateKind::Array(_) | AggregateKind::Tuple => {
    526 ( 0.00%)                  (CRATE_DEF_ID.to_def_id(), ty::InstantiatedPredicates::empty())
      .                       }
      .                   };
      .           
    860 ( 0.00%)          self.normalize_and_prove_instantiated_predicates(
      .                       def_id,
  2,580 ( 0.00%)              instantiated_predicates,
      .                       location.to_locations(),
      .                   );
      .               }
      .           
    351 ( 0.00%)      fn prove_closure_bounds(
      .                   &mut self,
      .                   tcx: TyCtxt<'tcx>,
      .                   def_id: LocalDefId,
      .                   substs: SubstsRef<'tcx>,
      .                   location: Location,
      .               ) -> ty::InstantiatedPredicates<'tcx> {
    120 ( 0.00%)          if let Some(ref closure_region_requirements) = tcx.mir_borrowck(def_id).closure_requirements
      .                   {
      3 ( 0.00%)              let closure_constraints = QueryRegionConstraints {
     18 ( 0.00%)                  outlives: closure_region_requirements.apply_requirements(
      .                               tcx,
      .                               def_id.to_def_id(),
      .                               substs,
      .                           ),
      .           
      .                           // Presently, closures never propagate member
      .                           // constraints to their parents -- they are enforced
      .                           // locally.  This is largely a non-issue as member
-- line 2685 ----------------------------------------
-- line 2688 ----------------------------------------
      .                           // closures.
      .                           member_constraints: vec![],
      .                       };
      .           
      .                       let bounds_mapping = closure_constraints
      .                           .outlives
      .                           .iter()
      .                           .enumerate()
      9 ( 0.00%)                  .filter_map(|(idx, constraint)| {
      .                               let ty::OutlivesPredicate(k1, r2) =
      6 ( 0.00%)                          constraint.no_bound_vars().unwrap_or_else(|| {
      .                                       bug!("query_constraint {:?} contained bound vars", constraint,);
      .                                   });
      .           
      .                               match k1.unpack() {
      .                                   GenericArgKind::Lifetime(r1) => {
      .                                       // constraint is r1: r2
      .                                       let r1_vid = self.borrowck_context.universal_regions.to_region_vid(r1);
      .                                       let r2_vid = self.borrowck_context.universal_regions.to_region_vid(r2);
      .                                       let outlives_requirements =
      .                                           &closure_region_requirements.outlives_requirements[idx];
      .                                       Some((
      .                                           (r1_vid, r2_vid),
      3 ( 0.00%)                                  (outlives_requirements.category, outlives_requirements.blame_span),
      .                                       ))
      .                                   }
      .                                   GenericArgKind::Type(_) | GenericArgKind::Const(_) => None,
      .                               }
      .                           })
      .                           .collect();
      .           
      .                       let existing = self
      .                           .borrowck_context
      .                           .constraints
      .                           .closure_bounds_mapping
      .                           .insert(location, bounds_mapping);
      3 ( 0.00%)              assert!(existing.is_none(), "Multiple closures at the same location.");
      .           
      .                       self.push_region_constraints(
      .                           location.to_locations(),
      .                           ConstraintCategory::ClosureBounds,
      .                           &closure_constraints,
      .                       );
      .                   }
      .           
    117 ( 0.00%)          tcx.predicates_of(def_id).instantiate(tcx, substs)
    312 ( 0.00%)      }
      .           
  6,855 ( 0.00%)      #[instrument(skip(self, body), level = "debug")]
      .               fn typeck_mir(&mut self, body: &Body<'tcx>) {
  1,828 ( 0.00%)          self.last_span = body.span;
      .                   debug!(?body.span);
      .           
      .                   for (local, local_decl) in body.local_decls.iter_enumerated() {
      .                       self.check_local(&body, local, local_decl);
      .                   }
      .           
      .                   for (block, block_data) in body.basic_blocks().iter_enumerated() {
      .                       let mut location = Location { block, statement_index: 0 };
      .                       for stmt in &block_data.statements {
100,260 ( 0.01%)                  if !stmt.source_info.span.is_dummy() {
100,236 ( 0.01%)                      self.last_span = stmt.source_info.span;
      .                           }
      .                           self.check_stmt(body, stmt, location);
 10,078 ( 0.00%)                  location.statement_index += 1;
      .                       }
      .           
      .                       self.check_terminator(&body, block_data.terminator(), location);
      .                       self.check_iscleanup(&body, block_data);
      .                   }
      .               }
      .           }
      .           
-- line 2760 ----------------------------------------
-- line 2765 ----------------------------------------
      .           impl NormalizeLocation for Locations {
      .               fn to_locations(self) -> Locations {
      .                   self
      .               }
      .           }
      .           
      .           impl NormalizeLocation for Location {
      .               fn to_locations(self) -> Locations {
 98,975 ( 0.01%)          Locations::Single(self)
      .               }
      .           }
      .           
      .           #[derive(Debug, Default)]
      .           struct ObligationAccumulator<'tcx> {
      .               obligations: PredicateObligations<'tcx>,
      .           }
      .           
-- line 2781 ----------------------------------------

289,562 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/type_check/mod.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/dl-lookup.c
  ./elf/do-rel.h
  ./malloc/malloc.c
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
630,770,545 (38.76%)  events annotated

