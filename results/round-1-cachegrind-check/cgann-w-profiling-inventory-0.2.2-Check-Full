--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name inventory --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 -C metadata=36d6c20f9f361c95 -C extra-filename=-36d6c20f9f361c95 --out-dir /usr/home/liquid/tmp/.tmpCvPLmi/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmpCvPLmi/target/debug/deps --extern ctor=/usr/home/liquid/tmp/.tmpCvPLmi/target/debug/deps/libctor-fa7d2fcf478af639.so --extern ghost=/usr/home/liquid/tmp/.tmpCvPLmi/target/debug/deps/libghost-9caced0133fbcf5b.so -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-inventory-0.2.2-Check-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
122,818,585 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   file:function
--------------------------------------------------------------------------------
25,585,806 (20.83%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
19,725,931 (16.06%)  ./elf/dl-lookup.c:do_lookup_x
 5,690,069 ( 4.63%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
 2,606,819 ( 2.12%)  ./elf/do-rel.h:_dl_relocate_object
 2,393,874 ( 1.95%)  ./malloc/malloc.c:_int_malloc
 2,052,699 ( 1.67%)  ./malloc/malloc.c:_int_free
 1,996,792 ( 1.63%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 1,802,620 ( 1.47%)  ./elf/dl-lookup.c:check_match
 1,676,255 ( 1.36%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 1,625,179 ( 1.32%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 1,378,488 ( 1.12%)  ./malloc/malloc.c:malloc
 1,362,217 ( 1.11%)  ???:SetImpliedBits(llvm::FeatureBitset&, llvm::FeatureBitset const&, llvm::ArrayRef<llvm::SubtargetFeatureKV>)
 1,303,649 ( 1.06%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
   725,246 ( 0.59%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   722,847 ( 0.59%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
   721,244 ( 0.59%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
   720,114 ( 0.59%)  ./string/../sysdeps/x86_64/strcmp.S:strcmp
   584,225 ( 0.48%)  ./malloc/malloc.c:free
   583,134 ( 0.47%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
   522,229 ( 0.43%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   481,105 ( 0.39%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   459,321 ( 0.37%)  ???:llvm::StringMapImpl::LookupBucketFor(llvm::StringRef)
   304,425 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
   288,850 ( 0.24%)  ./malloc/malloc.c:malloc_consolidate
   268,283 ( 0.22%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
   253,337 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
   249,461 ( 0.20%)  ./stdlib/cxa_finalize.c:__cxa_finalize
   239,195 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   239,195 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   239,195 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   234,699 ( 0.19%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   232,323 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
   231,656 ( 0.19%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs:<&str as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   220,906 ( 0.18%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/snap-1.0.1/src/decompress.rs:<snap::decompress::Decoder>::decompress
   207,519 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>)>>::remove_entry::<hashbrown::map::equivalent_key<rustc_span::def_id::DefId, rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>>::{closure#0}>
   205,183 ( 0.17%)  ./malloc/malloc.c:unlink_chunk.constprop.0
   198,305 ( 0.16%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(&str, rustc_span::symbol::Symbol)>>::insert::<hashbrown::map::make_hasher<&str, &str, rustc_span::symbol::Symbol, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   197,266 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
   189,572 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   171,292 ( 0.14%)  ./malloc/malloc.c:realloc
   165,920 ( 0.14%)  ???:llvm::StringMapImpl::RehashTable(unsigned int)
   161,967 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   159,376 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
   155,844 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
   152,940 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
   134,743 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   133,503 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   131,691 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::HashMap<&str, rustc_span::symbol::Symbol, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::insert

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir               

-- line 80 ----------------------------------------
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
      .                   #[doc(alias = "popcount")]
      .                   #[doc(alias = "popcnt")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn count_ones(self) -> u32 {
  2,265 ( 0.00%)              intrinsics::ctpop(self as $ActualT) as u32
      .                   }
      .           
      .                   /// Returns the number of zeros in the binary representation of `self`.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
      .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
      .                   /// assert_eq!(n.leading_zeros(), 2);
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn leading_zeros(self) -> u32 {
 23,568 ( 0.02%)              intrinsics::ctlz(self as $ActualT) as u32
      .                   }
      .           
      .                   /// Returns the number of trailing zeros in the binary representation
      .                   /// of `self`.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
      .                   /// assert_eq!(n.trailing_zeros(), 3);
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn trailing_zeros(self) -> u32 {
 19,934 ( 0.02%)              intrinsics::cttz(self) as u32
      .                   }
      .           
      .                   /// Returns the number of leading ones in the binary representation of `self`.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
      .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn rotate_left(self, n: u32) -> Self {
404,937 ( 0.33%)              intrinsics::rotate_left(self, n as $SelfT)
      .                   }
      .           
      .                   /// Shifts the bits to the right by a specified amount, `n`,
      .                   /// wrapping the truncated bits to the beginning of the resulting
      .                   /// integer.
      .                   ///
      .                   /// Please note this isn't the same operation as the `>>` shifting operator!
      .                   ///
-- line 220 ----------------------------------------
-- line 429 ----------------------------------------
      .                   )]
      .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline]
    225 ( 0.00%)          pub const fn checked_add(self, rhs: Self) -> Option<Self> {
    184 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
    450 ( 0.00%)              if unlikely!(b) {None} else {Some(a)}
    180 ( 0.00%)          }
      .           
      .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
      .                   /// cannot occur.
      .                   ///
      .                   /// # Safety
      .                   ///
      .                   /// This results in undefined behavior when
      .                   #[doc = concat!("`self + rhs > ", stringify!($SelfT), "::MAX` or `self + rhs < ", stringify!($SelfT), "::MIN`,")]
-- line 448 ----------------------------------------
-- line 456 ----------------------------------------
      .                   )]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
      .                   #[inline(always)]
      .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
      .                       // SAFETY: the caller must uphold the safety contract for
      .                       // `unchecked_add`.
 45,997 ( 0.04%)              unsafe { intrinsics::unchecked_add(self, rhs) }
      .                   }
      .           
      .                   /// Checked addition with a signed integer. Computes `self + rhs`,
      .                   /// returning `None` if overflow occurred.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
      .                   )]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
      .                   #[inline(always)]
      .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
      .                       // SAFETY: the caller must uphold the safety contract for
      .                       // `unchecked_sub`.
  1,596 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
      .                   }
      .           
      .                   /// Checked integer multiplication. Computes `self * rhs`, returning
      .                   /// `None` if overflow occurred.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 544 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".checked_mul(1), Some(5));")]
      .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.checked_mul(2), None);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline]
    324 ( 0.00%)          pub const fn checked_mul(self, rhs: Self) -> Option<Self> {
    216 ( 0.00%)              let (a, b) = self.overflowing_mul(rhs);
    540 ( 0.00%)              if unlikely!(b) {None} else {Some(a)}
    216 ( 0.00%)          }
      .           
      .                   /// Unchecked integer multiplication. Computes `self * rhs`, assuming overflow
      .                   /// cannot occur.
      .                   ///
      .                   /// # Safety
      .                   ///
      .                   /// This results in undefined behavior when
      .                   #[doc = concat!("`self * rhs > ", stringify!($SelfT), "::MAX` or `self * rhs < ", stringify!($SelfT), "::MIN`,")]
-- line 563 ----------------------------------------
-- line 1035 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
      .                   #[inline(always)]
      .                   pub const fn saturating_add(self, rhs: Self) -> Self {
  2,831 ( 0.00%)              intrinsics::saturating_add(self, rhs)
      .                   }
      .           
      .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
      .                   /// saturating at the numeric bounds instead of overflowing.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
      .                   #[inline(always)]
      .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
    134 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
      .                   }
      .           
      .                   /// Saturating integer multiplication. Computes `self * rhs`,
      .                   /// saturating at the numeric bounds instead of overflowing.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
239,426 ( 0.19%)              intrinsics::wrapping_add(self, rhs)
      .                   }
      .           
      .                   /// Wrapping (modular) addition with a signed integer. Computes
      .                   /// `self + rhs`, wrapping around at the boundary of the type.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
 92,303 ( 0.08%)              intrinsics::wrapping_sub(self, rhs)
      .                   }
      .           
      .                   /// Wrapping (modular) multiplication. Computes `self *
      .                   /// rhs`, wrapping around at the boundary of the type.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
      .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
220,726 ( 0.18%)              intrinsics::wrapping_mul(self, rhs)
      .                   }
      .           
      .                   /// Wrapping (modular) division. Computes `self / rhs`.
      .                   /// Wrapped division on unsigned types is just normal division.
      .                   /// There's no way wrapping could ever happen.
      .                   /// This function exists, so that all operations
      .                   /// are accounted for in the wrapping operations.
      .                   ///
-- line 1256 ----------------------------------------
-- line 1397 ----------------------------------------
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn wrapping_shl(self, rhs: u32) -> Self {
      .                       // SAFETY: the masking by the bitsize of the type ensures that we do not shift
      .                       // out of bounds
      .                       unsafe {
      8 ( 0.00%)                  intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)
      .                       }
      .                   }
      .           
      .                   /// Panic-free bitwise shift-right; yields `self >> mask(rhs)`,
      .                   /// where `mask` removes any high-order bits of `rhs` that
      .                   /// would cause the shift to exceed the bitwidth of the type.
      .                   ///
      .                   /// Note that this is *not* the same as a rotate-right; the
-- line 1413 ----------------------------------------
-- line 1492 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
      .                   /// ```
      .                   #[stable(feature = "wrapping", since = "1.7.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
 35,273 ( 0.03%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
     90 ( 0.00%)              (a as Self, b)
    180 ( 0.00%)          }
      .           
      .                   /// Calculates `self + rhs + carry` without the ability to overflow.
      .                   ///
      .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
      .                   /// additional bit of overflow. This allows for chaining together multiple additions
      .                   /// to create "big integers" which represent larger values.
      .                   ///
      .                   #[doc = concat!("This can be thought of as a ", stringify!($BITS), "-bit \"full adder\", in the electronics sense.")]
-- line 1510 ----------------------------------------
-- line 1588 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
      .                   /// ```
      .                   #[stable(feature = "wrapping", since = "1.7.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
  9,157 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
      .                       (a as Self, b)
      .                   }
      .           
      .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
      .                   ///
      .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
      .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
      .                   /// to create "big integers" which represent larger values.
-- line 1604 ----------------------------------------
-- line 1674 ----------------------------------------
      .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
      .                   /// ```
      .                   #[stable(feature = "wrapping", since = "1.7.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                     without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
 49,728 ( 0.04%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
    108 ( 0.00%)              (a as Self, b)
    216 ( 0.00%)          }
      .           
      .                   /// Calculates the divisor when `self` is divided by `rhs`.
      .                   ///
      .                   /// Returns a tuple of the divisor along with a boolean indicating
      .                   /// whether an arithmetic overflow would occur. Note that for unsigned
      .                   /// integers overflow never occurs, so the second value is always
      .                   /// `false`.
      .                   ///
-- line 1692 ----------------------------------------
-- line 2132 ----------------------------------------
      .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
      .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
      .                   /// ```
      .                   #[must_use]
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
      .                   #[inline(always)]
      .                   pub const fn is_power_of_two(self) -> bool {
     54 ( 0.00%)              self.count_ones() == 1
      .                   }
      .           
      .                   // Returns one less than next power of two.
      .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
      .                   //
      .                   // 8u8.one_less_than_next_power_of_two() == 7
      .                   // 6u8.one_less_than_next_power_of_two() == 7
      .                   //
      .                   // This method cannot overflow, as in the `next_power_of_two`
      .                   // overflow cases it instead ends up returning the maximum value
      .                   // of the type, and can return 0 for 0.
      .                   #[inline]
      .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
      .                   const fn one_less_than_next_power_of_two(self) -> Self {
    310 ( 0.00%)              if self <= 1 { return 0; }
      .           
    910 ( 0.00%)              let p = self - 1;
      .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
      .                       // That means the shift is always in-bounds, and some processors
      .                       // (such as intel pre-haswell) have more efficient ctlz
      .                       // intrinsics when the argument is non-zero.
  2,724 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
    908 ( 0.00%)              <$SelfT>::MAX >> z
      .                   }
      .           
      .                   /// Returns the smallest power of two greater than or equal to `self`.
      .                   ///
      .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
      .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
      .                   /// release mode (the only situation in which method can return 0).
      .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline]
      .                   #[rustc_inherit_overflow_checks]
      .                   pub const fn next_power_of_two(self) -> Self {
  1,506 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
      .                   }
      .           
      .                   /// Returns the smallest power of two greater than or equal to `n`. If
      .                   /// the next power of two is greater than the type's maximum value,
      .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
      .                   ///
      .                   /// # Examples
      .                   ///
-- line 2195 ----------------------------------------
-- line 2264 ----------------------------------------
      .                   #[doc = concat!("let bytes = ", $swap_op, stringify!($SelfT), ".to_le_bytes();")]
      .                   #[doc = concat!("assert_eq!(bytes, ", $le_bytes, ");")]
      .                   /// ```
      .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
      .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline]
      5 ( 0.00%)          pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {
      4 ( 0.00%)              self.to_le().to_ne_bytes()
      3 ( 0.00%)          }
      .           
      .                   /// Return the memory representation of this integer as a byte array in
      .                   /// native byte order.
      .                   ///
      .                   /// As the target platform's native endianness is used, portable code
      .                   /// should use [`to_be_bytes`] or [`to_le_bytes`], as appropriate,
      .                   /// instead.
      .                   ///
-- line 2282 ----------------------------------------
-- line 2300 ----------------------------------------
      .                   /// ```
      .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
      .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   // SAFETY: const sound because integers are plain old datatypes so we can always
      .                   // transmute them to arrays of bytes
      .                   #[inline]
      2 ( 0.00%)          pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {
      .                       // SAFETY: integers are plain old datatypes so we can always transmute them to
      .                       // arrays of bytes
      1 ( 0.00%)              unsafe { mem::transmute(self) }
      3 ( 0.00%)          }
      .           
      .                   /// Create a native endian integer value from its representation
      .                   /// as a byte array in big endian.
      .                   ///
      .                   #[doc = $from_xe_bytes_doc]
      .                   ///
      .                   /// # Examples
      .                   ///
-- line 2320 ----------------------------------------
-- line 2360 ----------------------------------------
      .                   ///     *input = rest;
      .                   #[doc = concat!("    ", stringify!($SelfT), "::from_le_bytes(int_bytes.try_into().unwrap())")]
      .                   /// }
      .                   /// ```
      .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
      .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
      .                   #[must_use]
      .                   #[inline]
      8 ( 0.00%)          pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {
     10 ( 0.00%)              Self::from_le(Self::from_ne_bytes(bytes))
      4 ( 0.00%)          }
      .           
      .                   /// Create a native endian integer value from its memory representation
      .                   /// as a byte array in native endianness.
      .                   ///
      .                   /// As the target platform's native endianness is used, portable code
      .                   /// likely wants to use [`from_be_bytes`] or [`from_le_bytes`], as
      .                   /// appropriate instead.
      .                   ///
-- line 2378 ----------------------------------------
-- line 2402 ----------------------------------------
      .                   /// }
      .                   /// ```
      .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
      .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
      .                   #[must_use]
      .                   // SAFETY: const sound because integers are plain old datatypes so we can always
      .                   // transmute to them
      .                   #[inline]
      8 ( 0.00%)          pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {
      .                       // SAFETY: integers are plain old datatypes so we can always transmute to them
     12 ( 0.00%)              unsafe { mem::transmute(bytes) }
      4 ( 0.00%)          }
      .           
      .                   /// New code should prefer to use
      .                   #[doc = concat!("[`", stringify!($SelfT), "::MIN", "`] instead.")]
      .                   ///
      .                   /// Returns the smallest value that can be represented by this integer type.
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_promotable]
      .                   #[inline(always)]
-- line 2421 ----------------------------------------

  4,263 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs
--------------------------------------------------------------------------------
Ir               

-- line 17 ----------------------------------------
      .                   #[inline]
      .                   pub fn $fn_name(
      .                       out: &mut [::std::mem::MaybeUninit<u8>; max_leb128_len!($int_ty)],
      .                       mut value: $int_ty,
      .                   ) -> &[u8] {
      .                       let mut i = 0;
      .           
      .                       loop {
 14,915 ( 0.01%)                  if value < 0x80 {
      .                               unsafe {
  8,010 ( 0.01%)                          *out.get_unchecked_mut(i).as_mut_ptr() = value as u8;
      .                               }
      .           
 10,931 ( 0.01%)                      i += 1;
      .                               break;
      .                           } else {
      .                               unsafe {
  5,276 ( 0.00%)                          *out.get_unchecked_mut(i).as_mut_ptr() = ((value & 0x7f) | 0x80) as u8;
      .                               }
      .           
  2,962 ( 0.00%)                      value >>= 7;
      .                               i += 1;
      .                           }
      .                       }
      .           
      .                       unsafe { ::std::mem::MaybeUninit::slice_assume_init_ref(&out.get_unchecked(..i)) }
      .                   }
      .               };
      .           }
-- line 45 ----------------------------------------
-- line 53 ----------------------------------------
      .           macro_rules! impl_read_unsigned_leb128 {
      .               ($fn_name:ident, $int_ty:ty) => {
      .                   #[inline]
      .                   pub fn $fn_name(slice: &[u8], position: &mut usize) -> $int_ty {
      .                       // The first iteration of this loop is unpeeled. This is a
      .                       // performance win because this code is hot and integer values less
      .                       // than 128 are very common, typically occurring 50-80% or more of
      .                       // the time, even for u64 and u128.
300,364 ( 0.24%)              let byte = slice[*position];
150,182 ( 0.12%)              *position += 1;
150,182 ( 0.12%)              if (byte & 0x80) == 0 {
      .                           return byte as $int_ty;
      .                       }
    630 ( 0.00%)              let mut result = (byte & 0x7F) as $int_ty;
      .                       let mut shift = 7;
      .                       loop {
133,002 ( 0.11%)                  let byte = slice[*position];
 85,292 ( 0.07%)                  *position += 1;
 88,668 ( 0.07%)                  if (byte & 0x80) == 0 {
 60,354 ( 0.05%)                      result |= (byte as $int_ty) << shift;
      .                               return result;
      .                           } else {
      .                               result |= ((byte & 0x7F) as $int_ty) << shift;
      .                           }
      .                           shift += 7;
      .                       }
      .                   }
      .               };
-- line 80 ----------------------------------------

148,984 ( 0.12%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 416 ----------------------------------------
      .               /// ```
      .               /// # #![allow(unused_mut)]
      .               /// let mut vec: Vec<i32> = Vec::new();
      .               /// ```
      .               #[inline]
      .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[must_use]
     53 ( 0.00%)      pub const fn new() -> Self {
 84,651 ( 0.07%)          Vec { buf: RawVec::NEW, len: 0 }
     71 ( 0.00%)      }
      .           
      .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
      .               ///
      .               /// The vector will be able to hold exactly `capacity` elements without
      .               /// reallocating. If `capacity` is 0, the vector will not allocate.
      .               ///
      .               /// It is important to note that although the returned vector has the
      .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 529 ----------------------------------------
      .               ///
      .               ///     // Put everything back together into a Vec
      .               ///     let rebuilt = Vec::from_raw_parts(p, len, cap);
      .               ///     assert_eq!(rebuilt, [4, 5, 6]);
      .               /// }
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
     18 ( 0.00%)      pub unsafe fn from_raw_parts(ptr: *mut T, length: usize, capacity: usize) -> Self {
      3 ( 0.00%)          unsafe { Self::from_raw_parts_in(ptr, length, capacity, Global) }
      6 ( 0.00%)      }
      .           }
      .           
      .           impl<T, A: Allocator> Vec<T, A> {
      .               /// Constructs a new, empty `Vec<T, A>`.
      .               ///
      .               /// The vector will not allocate until elements are pushed onto it.
      .               ///
      .               /// # Examples
-- line 547 ----------------------------------------
-- line 600 ----------------------------------------
      .               /// // ...but this may make the vector reallocate
      .               /// vec.push(11);
      .               /// assert_eq!(vec.len(), 11);
      .               /// assert!(vec.capacity() >= 11);
      .               /// ```
      .               #[cfg(not(no_global_oom_handling))]
      .               #[inline]
      .               #[unstable(feature = "allocator_api", issue = "32838")]
     63 ( 0.00%)      pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
 30,582 ( 0.02%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
     18 ( 0.00%)      }
      .           
      .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
      .               ///
      .               /// # Safety
      .               ///
      .               /// This is highly unsafe, due to the number of invariants that aren't
      .               /// checked:
      .               ///
-- line 618 ----------------------------------------
-- line 676 ----------------------------------------
      .               ///
      .               ///     // Put everything back together into a Vec
      .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
      .               ///     assert_eq!(rebuilt, [4, 5, 6]);
      .               /// }
      .               /// ```
      .               #[inline]
      .               #[unstable(feature = "allocator_api", issue = "32838")]
     52 ( 0.00%)      pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
  2,117 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
      8 ( 0.00%)      }
      .           
      .               /// Decomposes a `Vec<T>` into its raw components.
      .               ///
      .               /// Returns the raw pointer to the underlying data, the length of
      .               /// the vector (in elements), and the allocated capacity of the
      .               /// data (in elements). These are the same arguments in the same
      .               /// order as the arguments to [`from_raw_parts`].
      .               ///
-- line 694 ----------------------------------------
-- line 777 ----------------------------------------
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let vec: Vec<i32> = Vec::with_capacity(10);
      .               /// assert_eq!(vec.capacity(), 10);
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
     36 ( 0.00%)      pub fn capacity(&self) -> usize {
 10,365 ( 0.01%)          self.buf.capacity()
     18 ( 0.00%)      }
      .           
      .               /// Reserves capacity for at least `additional` more elements to be inserted
      .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
      .               /// frequent reallocations. After calling `reserve`, capacity will be
      .               /// greater than or equal to `self.len() + additional`. Does nothing if
      .               /// capacity is already sufficient.
      .               ///
      .               /// # Panics
-- line 795 ----------------------------------------
-- line 800 ----------------------------------------
      .               ///
      .               /// ```
      .               /// let mut vec = vec![1];
      .               /// vec.reserve(10);
      .               /// assert!(vec.capacity() >= 11);
      .               /// ```
      .               #[cfg(not(no_global_oom_handling))]
      .               #[stable(feature = "rust1", since = "1.0.0")]
     20 ( 0.00%)      pub fn reserve(&mut self, additional: usize) {
  6,311 ( 0.01%)          self.buf.reserve(self.len, additional);
      8 ( 0.00%)      }
      .           
      .               /// Reserves the minimum capacity for exactly `additional` more elements to
      .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
      .               /// capacity will be greater than or equal to `self.len() + additional`.
      .               /// Does nothing if the capacity is already sufficient.
      .               ///
      .               /// Note that the allocator may give the collection more space than it
      .               /// requests. Therefore, capacity can not be relied upon to be precisely
-- line 818 ----------------------------------------
-- line 829 ----------------------------------------
      .               /// ```
      .               /// let mut vec = vec![1];
      .               /// vec.reserve_exact(10);
      .               /// assert!(vec.capacity() >= 11);
      .               /// ```
      .               #[cfg(not(no_global_oom_handling))]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn reserve_exact(&mut self, additional: usize) {
    664 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
      .               }
      .           
      .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
      .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
      .               /// frequent reallocations. After calling `try_reserve`, capacity will be
      .               /// greater than or equal to `self.len() + additional`. Does nothing if
      .               /// capacity is already sufficient.
      .               ///
-- line 845 ----------------------------------------
-- line 926 ----------------------------------------
      .               /// let mut vec = Vec::with_capacity(10);
      .               /// vec.extend([1, 2, 3]);
      .               /// assert_eq!(vec.capacity(), 10);
      .               /// vec.shrink_to_fit();
      .               /// assert!(vec.capacity() >= 3);
      .               /// ```
      .               #[cfg(not(no_global_oom_handling))]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      9 ( 0.00%)      pub fn shrink_to_fit(&mut self) {
      .                   // The capacity is never less than the length, and there's nothing to do when
      .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
      .                   // by only calling it with a greater capacity.
    681 ( 0.00%)          if self.capacity() > self.len {
    177 ( 0.00%)              self.buf.shrink_to_fit(self.len);
      .                   }
      6 ( 0.00%)      }
      .           
      .               /// Shrinks the capacity of the vector with a lower bound.
      .               ///
      .               /// The capacity will remain at least as large as both the length
      .               /// and the supplied value.
      .               ///
      .               /// If the current capacity is less than the lower limit, this is a no-op.
      .               ///
-- line 949 ----------------------------------------
-- line 987 ----------------------------------------
      .               /// vec.extend([1, 2, 3]);
      .               ///
      .               /// assert_eq!(vec.capacity(), 10);
      .               /// let slice = vec.into_boxed_slice();
      .               /// assert_eq!(slice.into_vec().capacity(), 3);
      .               /// ```
      .               #[cfg(not(no_global_oom_handling))]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      6 ( 0.00%)      pub fn into_boxed_slice(mut self) -> Box<[T], A> {
      .                   unsafe {
     18 ( 0.00%)              self.shrink_to_fit();
    198 ( 0.00%)              let me = ManuallyDrop::new(self);
     30 ( 0.00%)              let buf = ptr::read(&me.buf);
     15 ( 0.00%)              let len = me.len();
     39 ( 0.00%)              buf.into_box(len).assume_init()
      3 ( 0.00%)          }
      6 ( 0.00%)      }
      .           
      .               /// Shortens the vector, keeping the first `len` elements and dropping
      .               /// the rest.
      .               ///
      .               /// If `len` is greater than the vector's current length, this has no
      .               /// effect.
      .               ///
      .               /// The [`drain`] method can emulate `truncate`, but causes the excess
-- line 1011 ----------------------------------------
-- line 1040 ----------------------------------------
      .               /// let mut vec = vec![1, 2, 3];
      .               /// vec.truncate(0);
      .               /// assert_eq!(vec, []);
      .               /// ```
      .               ///
      .               /// [`clear`]: Vec::clear
      .               /// [`drain`]: Vec::drain
      .               #[stable(feature = "rust1", since = "1.0.0")]
  8,052 ( 0.01%)      pub fn truncate(&mut self, len: usize) {
      .                   // This is safe because:
      .                   //
      .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
      .                   //   case avoids creating an invalid slice, and
      .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
      .                   //   such that no value will be dropped twice in case `drop_in_place`
      .                   //   were to panic once (if it panics twice, the program aborts).
      .                   unsafe {
      .                       // Note: It's intentional that this is `>` and not `>=`.
      .                       //       Changing it to `>=` has negative performance
      .                       //       implications in some cases. See #78884 for more.
  5,974 ( 0.00%)              if len > self.len {
      .                           return;
      .                       }
      .                       let remaining_len = self.len - len;
      .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
  4,130 ( 0.00%)              self.len = len;
    146 ( 0.00%)              ptr::drop_in_place(s);
      .                   }
  9,662 ( 0.01%)      }
      .           
      .               /// Extracts a slice containing the entire vector.
      .               ///
      .               /// Equivalent to `&s[..]`.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 1076 ----------------------------------------
-- line 1123 ----------------------------------------
      .               ///         assert_eq!(*x_ptr.add(i), 1 << i);
      .               ///     }
      .               /// }
      .               /// ```
      .               ///
      .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
      .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
      .               #[inline]
     62 ( 0.00%)      pub fn as_ptr(&self) -> *const T {
      .                   // We shadow the slice method of the same name to avoid going through
      .                   // `deref`, which creates an intermediate reference.
 70,032 ( 0.06%)          let ptr = self.buf.ptr();
      .                   unsafe {
     31 ( 0.00%)              assume(!ptr.is_null());
      .                   }
      .                   ptr
     62 ( 0.00%)      }
      .           
      .               /// Returns an unsafe mutable pointer to the vector's buffer.
      .               ///
      .               /// The caller must ensure that the vector outlives the pointer this
      .               /// function returns, or else it will end up pointing to garbage.
      .               /// Modifying the vector may cause its buffer to be reallocated,
      .               /// which would also make any pointers to it invalid.
      .               ///
-- line 1147 ----------------------------------------
-- line 1159 ----------------------------------------
      .               ///         *x_ptr.add(i) = i as i32;
      .               ///     }
      .               ///     x.set_len(size);
      .               /// }
      .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
      .               /// ```
      .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
      .               #[inline]
    588 ( 0.00%)      pub fn as_mut_ptr(&mut self) -> *mut T {
      .                   // We shadow the slice method of the same name to avoid going through
      .                   // `deref_mut`, which creates an intermediate reference.
300,131 ( 0.24%)          let ptr = self.buf.ptr();
      .                   unsafe {
    294 ( 0.00%)              assume(!ptr.is_null());
      .                   }
      .                   ptr
    588 ( 0.00%)      }
      .           
      .               /// Returns a reference to the underlying allocator.
      .               #[unstable(feature = "allocator_api", issue = "32838")]
      .               #[inline]
     24 ( 0.00%)      pub fn allocator(&self) -> &A {
     24 ( 0.00%)          self.buf.allocator()
     24 ( 0.00%)      }
      .           
      .               /// Forces the length of the vector to `new_len`.
      .               ///
      .               /// This is a low-level operation that maintains none of the normal
      .               /// invariants of the type. Normally changing the length of a vector
      .               /// is done using one of the safe operations instead, such as
      .               /// [`truncate`], [`resize`], [`extend`], or [`clear`].
      .               ///
-- line 1190 ----------------------------------------
-- line 1256 ----------------------------------------
      .               ///     vec.set_len(0);
      .               /// }
      .               /// ```
      .               ///
      .               /// Normally, here, one would use [`clear`] instead to correctly drop
      .               /// the contents and thus not leak memory.
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
    123 ( 0.00%)      pub unsafe fn set_len(&mut self, new_len: usize) {
      .                   debug_assert!(new_len <= self.capacity());
      .           
 16,152 ( 0.01%)          self.len = new_len;
    206 ( 0.00%)      }
      .           
      .               /// Removes an element from the vector and returns it.
      .               ///
      .               /// The removed element is replaced by the last element of the vector.
      .               ///
      .               /// This does not preserve ordering, but is *O*(1).
      .               /// If you need to preserve the element order, use [`remove`] instead.
      .               ///
-- line 1276 ----------------------------------------
-- line 1329 ----------------------------------------
      .               /// let mut vec = vec![1, 2, 3];
      .               /// vec.insert(1, 4);
      .               /// assert_eq!(vec, [1, 4, 2, 3]);
      .               /// vec.insert(4, 5);
      .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
      .               /// ```
      .               #[cfg(not(no_global_oom_handling))]
      .               #[stable(feature = "rust1", since = "1.0.0")]
     84 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
      .                   #[cold]
      .                   #[inline(never)]
      .                   fn assert_failed(index: usize, len: usize) -> ! {
      .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
      .                   }
      .           
     13 ( 0.00%)          let len = self.len();
     34 ( 0.00%)          if index > len {
      .                       assert_failed(index, len);
      .                   }
      .           
      .                   // space for the new element
     80 ( 0.00%)          if len == self.buf.capacity() {
      .                       self.reserve(1);
      .                   }
      .           
      .                   unsafe {
      .                       // infallible
      .                       // The spot to put the new value
      .                       {
      .                           let p = self.as_mut_ptr().add(index);
      .                           // Shift everything over to make space. (Duplicating the
      .                           // `index`th element into two consecutive places.)
    117 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
      .                           // Write it in, overwriting the first copy of the `index`th
      .                           // element.
      .                           ptr::write(p, element);
      .                       }
     80 ( 0.00%)              self.set_len(len + 1);
      .                   }
     72 ( 0.00%)      }
      .           
      .               /// Removes and returns the element at position `index` within the vector,
      .               /// shifting all elements after it to the left.
      .               ///
      .               /// Note: Because this shifts over the remaining elements, it has a
      .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
      .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
      .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1387 ----------------------------------------
      .               ///
      .               /// ```
      .               /// let mut v = vec![1, 2, 3];
      .               /// assert_eq!(v.remove(1), 2);
      .               /// assert_eq!(v, [1, 3]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[track_caller]
     57 ( 0.00%)      pub fn remove(&mut self, index: usize) -> T {
      .                   #[cold]
      .                   #[inline(never)]
      .                   #[track_caller]
      .                   fn assert_failed(index: usize, len: usize) -> ! {
      .                       panic!("removal index (is {}) should be < len (is {})", index, len);
      .                   }
      .           
     42 ( 0.00%)          let len = self.len();
    147 ( 0.00%)          if index >= len {
      .                       assert_failed(index, len);
      .                   }
      .                   unsafe {
      .                       // infallible
      .                       let ret;
      .                       {
      .                           // the place we are taking from.
      .                           let ptr = self.as_mut_ptr().add(index);
      .                           // copy it out, unsafely having a copy of the value on
      .                           // the stack and in the vector at the same time.
    146 ( 0.00%)                  ret = ptr::read(ptr);
      .           
      .                           // Shift everything down to fill in that spot.
    104 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
      .                       }
     60 ( 0.00%)              self.set_len(len - 1);
      .                       ret
      .                   }
     95 ( 0.00%)      }
      .           
      .               /// Retains only the elements specified by the predicate.
      .               ///
      .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
      .               /// This method operates in place, visiting each element exactly once in the
      .               /// original order, and preserves the order of the retained elements.
      .               ///
      .               /// # Examples
-- line 1431 ----------------------------------------
-- line 1442 ----------------------------------------
      .               /// ```
      .               /// let mut vec = vec![1, 2, 3, 4, 5];
      .               /// let keep = [false, true, true, false, true];
      .               /// let mut iter = keep.iter();
      .               /// vec.retain(|_| *iter.next().unwrap());
      .               /// assert_eq!(vec, [2, 3, 5]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
  3,147 ( 0.00%)      pub fn retain<F>(&mut self, mut f: F)
      .               where
      .                   F: FnMut(&T) -> bool,
      .               {
    176 ( 0.00%)          self.retain_mut(|elem| f(elem));
  3,080 ( 0.00%)      }
      .           
      .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
      .               ///
      .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
      .               /// This method operates in place, visiting each element exactly once in the
      .               /// original order, and preserves the order of the retained elements.
      .               ///
      .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
      .               /// });
      .               /// assert_eq!(vec, [2, 3, 4]);
      .               /// ```
      .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
      .               pub fn retain_mut<F>(&mut self, mut f: F)
      .               where
      .                   F: FnMut(&mut T) -> bool,
      .               {
    398 ( 0.00%)          let original_len = self.len();
      .                   // Avoid double drop if the drop guard is not executed,
      .                   // since we may make some holes during the process.
      .                   unsafe { self.set_len(0) };
      .           
      .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
      .                   //      |<-              processed len   ->| ^- next to check
      .                   //                  |<-  deleted cnt     ->|
      .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
      .                       v: &'a mut Vec<T, A>,
      .                       processed_len: usize,
      .                       deleted_cnt: usize,
      .                       original_len: usize,
      .                   }
      .           
      .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
      .                       fn drop(&mut self) {
    366 ( 0.00%)                  if self.deleted_cnt > 0 {
      .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
      .                               unsafe {
      .                                   ptr::copy(
      .                                       self.v.as_ptr().add(self.processed_len),
    196 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
      .                                       self.original_len - self.processed_len,
      .                                   );
      .                               }
      .                           }
      .                           // SAFETY: After filling holes, all items are in contiguous memory.
      .                           unsafe {
      2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
      .                           }
      .                       }
      .                   }
      .           
      .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
      .           
      .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
      .                       original_len: usize,
      .                       f: &mut F,
      .                       g: &mut BackshiftOnDrop<'_, T, A>,
      .                   ) where
      .                       F: FnMut(&mut T) -> bool,
      .                   {
  4,434 ( 0.00%)              while g.processed_len != original_len {
      .                           // SAFETY: Unchecked element must be valid.
      .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
  1,094 ( 0.00%)                  if !f(cur) {
      .                               // Advance early to avoid double drop if `drop_in_place` panicked.
     32 ( 0.00%)                      g.processed_len += 1;
     16 ( 0.00%)                      g.deleted_cnt += 1;
      .                               // SAFETY: We never touch this element again after dropped.
      5 ( 0.00%)                      unsafe { ptr::drop_in_place(cur) };
      .                               // We already advanced the counter.
      .                               if DELETED {
      .                                   continue;
      .                               } else {
      .                                   break;
      .                               }
      .                           }
      .                           if DELETED {
      .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
      .                               // We use copy for move, and never touch this element again.
      .                               unsafe {
     12 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
      .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
      .                               }
      .                           }
      8 ( 0.00%)                  g.processed_len += 1;
      .                       }
      .                   }
      .           
      .                   // Stage 1: Nothing was deleted.
      .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
      .           
      .                   // Stage 2: Some elements were deleted.
      .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
      .               /// ```
      .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
      .               ///
      .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
      .               ///
      .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
      .               /// ```
      .               #[stable(feature = "dedup_by", since = "1.16.0")]
    301 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
      .               where
      .                   F: FnMut(&mut T, &mut T) -> bool,
      .               {
     43 ( 0.00%)          let len = self.len();
    210 ( 0.00%)          if len <= 1 {
      .                       return;
      .                   }
      .           
      .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
      .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
      .                       /* Offset of the element we want to check if it is duplicate */
      .                       read: usize,
      .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
      .                   let ptr = gap.vec.as_mut_ptr();
      .           
      .                   /* Drop items while going through Vec, it should be more efficient than
      .                    * doing slice partition_dedup + truncate */
      .           
      .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
      .                    * are always in-bounds and read_ptr never aliases prev_ptr */
      .                   unsafe {
     66 ( 0.00%)              while gap.read < len {
      .                           let read_ptr = ptr.add(gap.read);
      .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
      .           
     46 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
      .                               // Increase `gap.read` now since the drop may panic.
      .                               gap.read += 1;
      .                               /* We have found duplicate, drop it in-place */
      .                               ptr::drop_in_place(read_ptr);
      .                           } else {
      .                               let write_ptr = ptr.add(gap.write);
      .           
      .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
      .                                * have to use `copy` or conditional `copy_nonoverlapping`.
      .                                * Looks like the first option is faster. */
      .                               ptr::copy(read_ptr, write_ptr, 1);
      .           
      .                               /* We have filled that place, so go further */
     22 ( 0.00%)                      gap.write += 1;
      .                               gap.read += 1;
      .                           }
      .                       }
      .           
      .                       /* Technically we could let `gap` clean up with its Drop, but
      .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
      .                        * the codegen, so we just do it manually */
      .                       gap.vec.set_len(gap.write);
      .                       mem::forget(gap);
      .                   }
    344 ( 0.00%)      }
      .           
      .               /// Appends an element to the back of a collection.
      .               ///
      .               /// # Panics
      .               ///
      .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
      .               ///
      .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
      .               /// ```
      .               /// let mut vec = vec![1, 2];
      .               /// vec.push(3);
      .               /// assert_eq!(vec, [1, 2, 3]);
      .               /// ```
      .               #[cfg(not(no_global_oom_handling))]
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
  1,056 ( 0.00%)      pub fn push(&mut self, value: T) {
      .                   // This will panic or abort if we would allocate > isize::MAX bytes
      .                   // or if the length increment would overflow for zero-sized types.
822,905 ( 0.67%)          if self.len == self.buf.capacity() {
 14,166 ( 0.01%)              self.buf.reserve_for_push(self.len);
      .                   }
      .                   unsafe {
  7,834 ( 0.01%)              let end = self.as_mut_ptr().add(self.len);
  1,318 ( 0.00%)              ptr::write(end, value);
853,694 ( 0.70%)              self.len += 1;
      .                   }
    368 ( 0.00%)      }
      .           
      .               /// Removes the last element from a vector and returns it, or [`None`] if it
      .               /// is empty.
      .               ///
      .               /// If you'd like to pop the first element, consider using
      .               /// [`VecDeque::pop_front`] instead.
      .               ///
      .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
      .               /// ```
      .               /// let mut vec = vec![1, 2, 3];
      .               /// assert_eq!(vec.pop(), Some(3));
      .               /// assert_eq!(vec, [1, 2]);
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn pop(&mut self) -> Option<T> {
 16,355 ( 0.01%)          if self.len == 0 {
      2 ( 0.00%)              None
      .                   } else {
      .                       unsafe {
 13,040 ( 0.01%)                  self.len -= 1;
  1,498 ( 0.00%)                  Some(ptr::read(self.as_ptr().add(self.len())))
      .                       }
      .                   }
      .               }
      .           
      .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
      .               ///
      .               /// # Panics
      .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
      .               /// let mut vec2 = vec![4, 5, 6];
      .               /// vec.append(&mut vec2);
      .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
      .               /// assert_eq!(vec2, []);
      .               /// ```
      .               #[cfg(not(no_global_oom_handling))]
      .               #[inline]
      .               #[stable(feature = "append", since = "1.4.0")]
     91 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
      .                   unsafe {
      .                       self.append_elements(other.as_slice() as _);
      .                       other.set_len(0);
      .                   }
     78 ( 0.00%)      }
      .           
      .               /// Appends elements to `Self` from other buffer.
      .               #[cfg(not(no_global_oom_handling))]
      .               #[inline]
     40 ( 0.00%)      unsafe fn append_elements(&mut self, other: *const [T]) {
      4 ( 0.00%)          let count = unsafe { (*other).len() };
      4 ( 0.00%)          self.reserve(count);
  1,107 ( 0.00%)          let len = self.len();
     12 ( 0.00%)          unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
 11,447 ( 0.01%)          self.len += count;
      8 ( 0.00%)      }
      .           
      .               /// Creates a draining iterator that removes the specified range in the vector
      .               /// and yields the removed items.
      .               ///
      .               /// When the iterator **is** dropped, all elements in the range are removed
      .               /// from the vector, even if the iterator was not fully consumed. If the
      .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
      .               /// unspecified how many elements are removed.
-- line 1808 ----------------------------------------
-- line 1820 ----------------------------------------
      .               /// assert_eq!(v, &[1]);
      .               /// assert_eq!(u, &[2, 3]);
      .               ///
      .               /// // A full range clears the vector
      .               /// v.drain(..);
      .               /// assert_eq!(v, &[]);
      .               /// ```
      .               #[stable(feature = "drain", since = "1.6.0")]
    224 ( 0.00%)      pub fn drain<R>(&mut self, range: R) -> Drain<'_, T, A>
      .               where
      .                   R: RangeBounds<usize>,
      .               {
      .                   // Memory safety
      .                   //
      .                   // When the Drain is first created, it shortens the length of
      .                   // the source vector to make sure no uninitialized or moved-from elements
      .                   // are accessible at all if the Drain's destructor never gets to run.
      .                   //
      .                   // Drain will ptr::read out the values to remove.
      .                   // When finished, remaining tail of the vec is copied back to cover
      .                   // the hole, and the vector length is restored to the new length.
      .                   //
    521 ( 0.00%)          let len = self.len();
    480 ( 0.00%)          let Range { start, end } = slice::range(range, ..len);
      .           
      .                   unsafe {
      .                       // set self.vec length's to start, to be safe in case Drain is leaked
     96 ( 0.00%)              self.set_len(start);
      .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
      .                       // whole Drain iterator (like &mut T).
    517 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
    217 ( 0.00%)              Drain {
      .                           tail_start: end,
    166 ( 0.00%)                  tail_len: len - end,
    160 ( 0.00%)                  iter: range_slice.iter(),
    127 ( 0.00%)                  vec: NonNull::from(self),
      .                       }
      .                   }
     64 ( 0.00%)      }
      .           
      .               /// Clears the vector, removing all values.
      .               ///
      .               /// Note that this method has no effect on the allocated capacity
      .               /// of the vector.
      .               ///
      .               /// # Examples
      .               ///
-- line 1866 ----------------------------------------
-- line 1869 ----------------------------------------
      .               ///
      .               /// v.clear();
      .               ///
      .               /// assert!(v.is_empty());
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn clear(&mut self) {
 14,327 ( 0.01%)          self.truncate(0)
      .               }
      .           
      .               /// Returns the number of elements in the vector, also referred to
      .               /// as its 'length'.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let a = vec![1, 2, 3];
      .               /// assert_eq!(a.len(), 3);
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
    178 ( 0.00%)      pub fn len(&self) -> usize {
     89 ( 0.00%)          self.len
    178 ( 0.00%)      }
      .           
      .               /// Returns `true` if the vector contains no elements.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let mut v = Vec::new();
      .               /// assert!(v.is_empty());
      .               ///
      .               /// v.push(1);
      .               /// assert!(!v.is_empty());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
     78 ( 0.00%)      pub fn is_empty(&self) -> bool {
  8,371 ( 0.01%)          self.len() == 0
    156 ( 0.00%)      }
      .           
      .               /// Splits the collection into two at the given index.
      .               ///
      .               /// Returns a newly allocated vector containing the elements in the range
      .               /// `[at, len)`. After the call, the original vector will be left containing
      .               /// the elements `[0, at)` with its previous capacity unchanged.
      .               ///
      .               /// # Panics
-- line 1917 ----------------------------------------
-- line 1935 ----------------------------------------
      .                   A: Clone,
      .               {
      .                   #[cold]
      .                   #[inline(never)]
      .                   fn assert_failed(at: usize, len: usize) -> ! {
      .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
      .                   }
      .           
     83 ( 0.00%)          if at > self.len() {
      .                       assert_failed(at, self.len());
      .                   }
      .           
     61 ( 0.00%)          if at == 0 {
      .                       // the new vector can take over the original buffer and avoid the copy
      .                       return mem::replace(
      .                           self,
      .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
      .                       );
      .                   }
      .           
      .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
      .               ///
      .               /// let mut vec = vec![];
      .               /// let mut p = 1;
      .               /// vec.resize_with(4, || { p *= 2; p });
      .               /// assert_eq!(vec, [2, 4, 8, 16]);
      .               /// ```
      .               #[cfg(not(no_global_oom_handling))]
      .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
    434 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
      .               where
      .                   F: FnMut() -> T,
      .               {
     58 ( 0.00%)          let len = self.len();
    116 ( 0.00%)          if new_len > len {
    752 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
      .                   } else {
      .                       self.truncate(new_len);
      .                   }
    376 ( 0.00%)      }
      .           
      .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
      .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
      .               /// `'a`. If the type has only static references, or none at all, then this
      .               /// may be chosen to be `'static`.
      .               ///
      .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
      .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2064 ----------------------------------------
      .               /// unsafe {
      .               ///     v.set_len(3);
      .               /// }
      .               ///
      .               /// assert_eq!(&v, &[0, 1, 2]);
      .               /// ```
      .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
      .               #[inline]
     27 ( 0.00%)      pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
      .                   // Note:
      .                   // This method is not implemented in terms of `split_at_spare_mut`,
      .                   // to prevent invalidation of pointers to the buffer.
      .                   unsafe {
     36 ( 0.00%)              slice::from_raw_parts_mut(
     67 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
    107 ( 0.00%)                  self.buf.capacity() - self.len,
      .                       )
      .                   }
     18 ( 0.00%)      }
      .           
      .               /// Returns vector content as a slice of `T`, along with the remaining spare
      .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
      .               ///
      .               /// The returned spare capacity slice can be used to fill the vector with data
      .               /// (e.g. by reading from a file) before marking the data as initialized using
      .               /// the [`set_len`] method.
      .               ///
-- line 2090 ----------------------------------------
-- line 2189 ----------------------------------------
      .               /// assert_eq!(vec, ["hello", "world", "world"]);
      .               ///
      .               /// let mut vec = vec![1, 2, 3, 4];
      .               /// vec.resize(2, 0);
      .               /// assert_eq!(vec, [1, 2]);
      .               /// ```
      .               #[cfg(not(no_global_oom_handling))]
      .               #[stable(feature = "vec_resize", since = "1.5.0")]
     40 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
      4 ( 0.00%)          let len = self.len();
      .           
     12 ( 0.00%)          if new_len > len {
    324 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
      .                   } else {
      .                       self.truncate(new_len);
      .                   }
      4 ( 0.00%)      }
      .           
      .               /// Clones and appends all elements in a slice to the `Vec`.
      .               ///
      .               /// Iterates over the slice `other`, clones each element, and then appends
      .               /// it to this `Vec`. The `other` slice is traversed in-order.
      .               ///
      .               /// Note that this function is same as [`extend`] except that it is
      .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2220 ----------------------------------------
      .               /// let mut vec = vec![1];
      .               /// vec.extend_from_slice(&[2, 3, 4]);
      .               /// assert_eq!(vec, [1, 2, 3, 4]);
      .               /// ```
      .               ///
      .               /// [`extend`]: Vec::extend
      .               #[cfg(not(no_global_oom_handling))]
      .               #[stable(feature = "vec_extend_from_slice", since = "1.6.0")]
     44 ( 0.00%)      pub fn extend_from_slice(&mut self, other: &[T]) {
     16 ( 0.00%)          self.spec_extend(other.iter())
      8 ( 0.00%)      }
      .           
      .               /// Copies elements from `src` range to the end of the vector.
      .               ///
      .               /// # Panics
      .               ///
      .               /// Panics if the starting point is greater than the end point or if
      .               /// the end point is greater than the length of the vector.
      .               ///
-- line 2238 ----------------------------------------
-- line 2271 ----------------------------------------
      .           trait ExtendWith<T> {
      .               fn next(&mut self) -> T;
      .               fn last(self) -> T;
      .           }
      .           
      .           struct ExtendElement<T>(T);
      .           impl<T: Clone> ExtendWith<T> for ExtendElement<T> {
      .               fn next(&mut self) -> T {
     14 ( 0.00%)          self.0.clone()
      .               }
      .               fn last(self) -> T {
      .                   self.0
      .               }
      .           }
      .           
      .           struct ExtendFunc<F>(F);
      .           impl<T, F: FnMut() -> T> ExtendWith<T> for ExtendFunc<F> {
-- line 2287 ----------------------------------------
-- line 2291 ----------------------------------------
      .               fn last(mut self) -> T {
      .                   (self.0)()
      .               }
      .           }
      .           
      .           impl<T, A: Allocator> Vec<T, A> {
      .               #[cfg(not(no_global_oom_handling))]
      .               /// Extend the vector by `n` values, using the given generator.
  2,298 ( 0.00%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
      .                   self.reserve(n);
      .           
      .                   unsafe {
    309 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
      .                       // Use SetLenOnDrop to work around bug where compiler
      .                       // might not realize the store through `ptr` through self.set_len()
      .                       // don't alias.
      .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
      .           
      .                       // Write all elements except the last one
      .                       for _ in 1..n {
      .                           ptr::write(ptr, value.next());
      .                           ptr = ptr.offset(1);
      .                           // Increment the length in every step in case next() panics
      .                           local_len.increment_len(1);
      .                       }
      .           
  8,149 ( 0.01%)              if n > 0 {
      .                           // We can write the last element directly without cloning needlessly
      .                           ptr::write(ptr, value.last());
      .                           local_len.increment_len(1);
      .                       }
      .           
      .                       // len set by scope guard
      .                   }
  1,801 ( 0.00%)      }
      .           }
      .           
      .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
      .               /// Removes consecutive repeated elements in the vector according to the
      .               /// [`PartialEq`] trait implementation.
      .               ///
      .               /// If the vector is sorted, this removes all duplicates.
      .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
      .               ///
      .               /// vec.dedup();
      .               ///
      .               /// assert_eq!(vec, [1, 2, 3, 2]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               pub fn dedup(&mut self) {
     44 ( 0.00%)          self.dedup_by(|a, b| a == b)
      .               }
      .           }
      .           
      .           ////////////////////////////////////////////////////////////////////////////////
      .           // Internal methods and functions
      .           ////////////////////////////////////////////////////////////////////////////////
      .           
      .           #[doc(hidden)]
      .           #[cfg(not(no_global_oom_handling))]
      .           #[stable(feature = "rust1", since = "1.0.0")]
    907 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
  4,443 ( 0.00%)      <T as SpecFromElem>::from_elem(elem, n, Global)
  1,116 ( 0.00%)  }
      .           
      .           #[doc(hidden)]
      .           #[cfg(not(no_global_oom_handling))]
      .           #[unstable(feature = "allocator_api", issue = "32838")]
      .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
      .               <T as SpecFromElem>::from_elem(elem, n, alloc)
      .           }
      .           
-- line 2367 ----------------------------------------
-- line 2423 ----------------------------------------
      .           ////////////////////////////////////////////////////////////////////////////////
      .           // Common trait implementations for Vec
      .           ////////////////////////////////////////////////////////////////////////////////
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
      .               type Target = [T];
      .           
     93 ( 0.00%)      fn deref(&self) -> &[T] {
 89,184 ( 0.07%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
     62 ( 0.00%)      }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
      3 ( 0.00%)      fn deref_mut(&mut self) -> &mut [T] {
 16,143 ( 0.01%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
      2 ( 0.00%)      }
      .           }
      .           
      .           #[cfg(not(no_global_oom_handling))]
      .           trait SpecCloneFrom {
      .               fn clone_from(this: &mut Self, other: &Self);
      .           }
      .           
      .           #[cfg(not(no_global_oom_handling))]
-- line 2448 ----------------------------------------
-- line 2468 ----------------------------------------
      .                   this.extend_from_slice(other);
      .               }
      .           }
      .           
      .           #[cfg(not(no_global_oom_handling))]
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
      .               #[cfg(not(test))]
  5,397 ( 0.00%)      fn clone(&self) -> Self {
     45 ( 0.00%)          let alloc = self.allocator().clone();
     83 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
  6,758 ( 0.01%)      }
      .           
      .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
      .               // required for this method definition, is not available. Instead use the
      .               // `slice::to_vec`  function which is only available with cfg(test)
      .               // NB see the slice::hack module in slice.rs for more information
      .               #[cfg(test)]
      .               fn clone(&self) -> Self {
      .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
      .               message = "vector indices are of type `usize` or ranges of `usize`",
      .               label = "vector indices are of type `usize` or ranges of `usize`"
      .           )]
      .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
      .               type Output = I::Output;
      .           
      .               #[inline]
      .               fn index(&self, index: I) -> &Self::Output {
  2,079 ( 0.00%)          Index::index(&**self, index)
      .               }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           #[rustc_on_unimplemented(
      .               message = "vector indices are of type `usize` or ranges of `usize`",
      .               label = "vector indices are of type `usize` or ranges of `usize`"
      .           )]
      .           impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {
      .               #[inline]
      .               fn index_mut(&mut self, index: I) -> &mut Self::Output {
      8 ( 0.00%)          IndexMut::index_mut(&mut **self, index)
      .               }
      .           }
      .           
      .           #[cfg(not(no_global_oom_handling))]
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<T> FromIterator<T> for Vec<T> {
      .               #[inline]
      3 ( 0.00%)      fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
 42,094 ( 0.03%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
      2 ( 0.00%)      }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
      .               type Item = T;
      .               type IntoIter = IntoIter<T, A>;
      .           
      .               /// Creates a consuming iterator, that is, one that moves each value out of
-- line 2556 ----------------------------------------
-- line 2562 ----------------------------------------
      .               /// ```
      .               /// let v = vec!["a".to_string(), "b".to_string()];
      .               /// for s in v.into_iter() {
      .               ///     // s has type String, not &String
      .               ///     println!("{}", s);
      .               /// }
      .               /// ```
      .               #[inline]
      9 ( 0.00%)      fn into_iter(self) -> IntoIter<T, A> {
      .                   unsafe {
 16,121 ( 0.01%)              let mut me = ManuallyDrop::new(self);
      6 ( 0.00%)              let alloc = ptr::read(me.allocator());
     15 ( 0.00%)              let begin = me.as_mut_ptr();
      9 ( 0.00%)              let end = if mem::size_of::<T>() == 0 {
      .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
      .                       } else {
     15 ( 0.00%)                  begin.add(me.len()) as *const T
      .                       };
      3 ( 0.00%)              let cap = me.buf.capacity();
  5,480 ( 0.00%)              IntoIter {
     12 ( 0.00%)                  buf: NonNull::new_unchecked(begin),
      .                           phantom: PhantomData,
      .                           cap,
      .                           alloc,
      .                           ptr: begin,
      3 ( 0.00%)                  end,
      .                       }
      .                   }
      6 ( 0.00%)      }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<'a, T, A: Allocator> IntoIterator for &'a Vec<T, A> {
      .               type Item = &'a T;
      .               type IntoIter = slice::Iter<'a, T>;
      .           
      .               fn into_iter(self) -> slice::Iter<'a, T> {
-- line 2598 ----------------------------------------
-- line 2601 ----------------------------------------
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
      .               type Item = &'a mut T;
      .               type IntoIter = slice::IterMut<'a, T>;
      .           
      .               fn into_iter(self) -> slice::IterMut<'a, T> {
    630 ( 0.00%)          self.iter_mut()
      .               }
      .           }
      .           
      .           #[cfg(not(no_global_oom_handling))]
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
      .               #[inline]
     48 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
 17,902 ( 0.01%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
     48 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn extend_one(&mut self, item: T) {
     16 ( 0.00%)          self.push(item);
      .               }
      .           
      .               #[inline]
      .               fn extend_reserve(&mut self, additional: usize) {
      .                   self.reserve(additional);
      .               }
      .           }
      .           
-- line 2631 ----------------------------------------
-- line 2636 ----------------------------------------
      .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
      .                   // This is the case for a general iterator.
      .                   //
      .                   // This function should be the moral equivalent of:
      .                   //
      .                   //      for item in iterator {
      .                   //          self.push(item);
      .                   //      }
  3,737 ( 0.00%)          while let Some(element) = iterator.next() {
    342 ( 0.00%)              let len = self.len();
  4,920 ( 0.00%)              if len == self.capacity() {
    118 ( 0.00%)                  let (lower, _) = iterator.size_hint();
      .                           self.reserve(lower.saturating_add(1));
      .                       }
      .                       unsafe {
      .                           ptr::write(self.as_mut_ptr().add(len), element);
      .                           // Since next() executes user code which can panic we have to bump the length
      .                           // after each step.
      .                           // NB can't overflow since we would have had to alloc the address space
  4,398 ( 0.00%)                  self.set_len(len + 1);
      .                       }
      .                   }
     37 ( 0.00%)      }
      .           
      .               /// Creates a splicing iterator that replaces the specified range in the vector
      .               /// with the given `replace_with` iterator and yields the removed items.
      .               /// `replace_with` does not need to be the same length as `range`.
      .               ///
      .               /// `range` is removed even if the iterator is not consumed until the end.
      .               ///
      .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2745 ----------------------------------------
      .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
      .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
      .               /// ```
      .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
      .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
      .               where
      .                   F: FnMut(&mut T) -> bool,
      .               {
    105 ( 0.00%)          let old_len = self.len();
      .           
      .                   // Guard against us getting leaked (leak amplification)
      .                   unsafe {
      .                       self.set_len(0);
      .                   }
      .           
    216 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
      .               }
      .           }
      .           
      .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
      .           ///
      .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
      .           /// append the entire slice at once.
      .           ///
-- line 2768 ----------------------------------------
-- line 2803 ----------------------------------------
      .               #[inline]
      .               fn cmp(&self, other: &Self) -> Ordering {
      .                   Ord::cmp(&**self, &**other)
      .               }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
 20,205 ( 0.02%)      fn drop(&mut self) {
      .                   unsafe {
      .                       // use drop for [T]
      .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
      .                       // could avoid questions of validity in certain cases
  9,791 ( 0.01%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
      .                   }
      .                   // RawVec handles deallocation
 23,594 ( 0.02%)      }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
      .           impl<T> const Default for Vec<T> {
      .               /// Creates an empty `Vec<T>`.
      .               fn default() -> Vec<T> {
      .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
      .               /// newly-allocated buffer with exactly the right capacity.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
      .               /// ```
      .               fn from(v: Vec<T, A>) -> Self {
      4 ( 0.00%)          v.into_boxed_slice()
      .               }
      .           }
      .           
      .           #[cfg(not(no_global_oom_handling))]
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl From<&str> for Vec<u8> {
      .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
      .               ///
-- line 2992 ----------------------------------------

 40,754 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs
--------------------------------------------------------------------------------
Ir               

-- line 198 ----------------------------------------
      .                   }
      .           
      .                   #[inline]
      .                   #[allow(arithmetic_overflow)]
      .                   #[rustc_inherit_overflow_checks]
      .                   fn forward(start: Self, n: usize) -> Self {
      .                       // In debug builds, trigger a panic on overflow.
      .                       // This should optimize completely out in release builds.
  3,262 ( 0.00%)              if Self::forward_checked(start, n).is_none() {
      .                           let _ = Self::MAX + 1;
      .                       }
      .                       // Do wrapping math to allow e.g. `Step::forward(-128i8, 255)`.
      .                       start.wrapping_add(n as Self)
      .                   }
      .           
      .                   #[inline]
      .                   #[allow(arithmetic_overflow)]
-- line 214 ----------------------------------------
-- line 613 ----------------------------------------
      .           
      .                   if taken < n { Err(taken) } else { Ok(()) }
      .               }
      .           }
      .           
      .           impl<T: TrustedStep> RangeIteratorImpl for ops::Range<T> {
      .               #[inline]
      .               fn spec_next(&mut self) -> Option<T> {
383,583 ( 0.31%)          if self.start < self.end {
      .                       // SAFETY: just checked precondition
      .                       let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
      .                       Some(mem::replace(&mut self.start, n))
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
-- line 629 ----------------------------------------
-- line 657 ----------------------------------------
      .                   // Otherwise 0 is returned which always safe to use.
      .                   self.start = unsafe { Step::forward_unchecked(self.start.clone(), taken) };
      .           
      .                   if taken < n { Err(taken) } else { Ok(()) }
      .               }
      .           
      .               #[inline]
      .               fn spec_next_back(&mut self) -> Option<T> {
  9,359 ( 0.01%)          if self.start < self.end {
      .                       // SAFETY: just checked precondition
      .                       self.end = unsafe { Step::backward_unchecked(self.end.clone(), 1) };
      .                       Some(self.end.clone())
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
-- line 673 ----------------------------------------
-- line 708 ----------------------------------------
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A> {
      .                   self.spec_next()
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
  8,377 ( 0.01%)          if self.start < self.end {
      .                       let hint = Step::steps_between(&self.start, &self.end);
      .                       (hint.unwrap_or(usize::MAX), hint)
      .                   } else {
      .                       (0, Some(0))
      .                   }
      .               }
      .           
      .               #[inline]
-- line 724 ----------------------------------------
-- line 857 ----------------------------------------
      .           impl<A: Step> FusedIterator for ops::Range<A> {}
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<A: Step> Iterator for ops::RangeFrom<A> {
      .               type Item = A;
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A> {
    350 ( 0.00%)          let n = Step::forward(self.start.clone(), 1);
      .                   Some(mem::replace(&mut self.start, n))
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   (usize::MAX, None)
      .               }
      .           
-- line 873 ----------------------------------------
-- line 1025 ----------------------------------------
      .                   R: Try<Output = B>,
      .               {
      .                   if self.is_empty() {
      .                       return try { init };
      .                   }
      .           
      .                   let mut accum = init;
      .           
    266 ( 0.00%)          while self.start < self.end {
      .                       // SAFETY: just checked precondition
      .                       let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
      .                       let n = mem::replace(&mut self.start, n);
      .                       accum = f(accum, n)?;
      .                   }
      .           
      .                   self.exhausted = true;
      .           
     16 ( 0.00%)          if self.start == self.end {
      .                       accum = f(accum, self.start.clone())?;
      .                   }
      .           
      .                   try { accum }
      .               }
      .           
      .               #[inline]
      .               fn spec_next_back(&mut self) -> Option<T> {
-- line 1050 ----------------------------------------
-- line 1098 ----------------------------------------
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A> {
      .                   self.spec_next()
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
    192 ( 0.00%)          if self.is_empty() {
      .                       return (0, Some(0));
      .                   }
      .           
      .                   match Step::steps_between(&self.start, &self.end) {
      .                       Some(hint) => (hint.saturating_add(1), hint.checked_add(1)),
      .                       None => (usize::MAX, None),
      .                   }
      .               }
-- line 1114 ----------------------------------------

 50,790 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir               

-- line 91 ----------------------------------------
      .           // maximum of number bytes needed to fill an 8-byte-sized element on which
      .           // SipHash operates. Note that for variable-sized copies which are known to be
      .           // less than 8 bytes, this function will perform more work than necessary unless
      .           // the compiler is able to optimize the extra work away.
      .           #[inline]
      .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
      .               debug_assert!(count <= 8);
      .           
  5,168 ( 0.00%)      if count == 8 {
      .                   ptr::copy_nonoverlapping(src, dst, 8);
      .                   return;
      .               }
      .           
      .               let mut i = 0;
  8,390 ( 0.01%)      if i + 3 < count {
      .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
      .                   i += 4;
      .               }
      .           
 18,165 ( 0.01%)      if i + 1 < count {
      .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
  2,352 ( 0.00%)          i += 2
      .               }
      .           
  8,390 ( 0.01%)      if i < count {
  3,937 ( 0.00%)          *dst.add(i) = *src.add(i);
      .                   i += 1;
      .               }
      .           
      .               debug_assert_eq!(i, count);
      .           }
      .           
      .           // # Implementation
      .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
      .           
      .                   hasher
      .               }
      .           
      .               // A specialized write function for values with size <= 8.
      .               #[inline]
      .               fn short_write<T>(&mut self, x: T) {
      .                   let size = mem::size_of::<T>();
 18,791 ( 0.02%)          let nbuf = self.nbuf;
      .                   debug_assert!(size <= 8);
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
      .           
123,259 ( 0.10%)          if nbuf + size < BUFFER_SIZE {
      .                       unsafe {
      .                           // The memcpy call is optimized away because the size is known.
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
      .                       }
      .           
 37,540 ( 0.03%)              self.nbuf = nbuf + size;
      .           
      .                       return;
      .                   }
      .           
  5,484 ( 0.00%)          unsafe { self.short_write_process_buffer(x) }
      .               }
      .           
      .               // A specialized write function for values with size <= 8 that should only
      .               // be called when the write would cause the buffer to fill.
      .               //
      .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
      .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
      .               // overflow) if it wasn't already.
      .               #[inline(never)]
  1,752 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
      .                   let size = mem::size_of::<T>();
  1,752 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(size <= 8);
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
      .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
      .           
      .                   // Copy first part of input into end of buffer, possibly into spill
      .                   // element. The memcpy call is optimized away because the size is known.
      .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
      .           
      .                   // Process buffer.
      .                   for i in 0..BUFFER_CAPACITY {
 17,520 ( 0.01%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
 14,016 ( 0.01%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
 15,768 ( 0.01%)              self.state.v0 ^= elem;
      .                   }
      .           
      .                   // Copy remaining input into start of buffer by copying size - 1
      .                   // elements from spill (at most size - 1 bytes could have overflowed
      .                   // into the spill). The memcpy call is optimized away because the size
      .                   // is known. And the whole copy is optimized away for size == 1.
      .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
      .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
      .           
      .                   // This function should only be called when the write fills the buffer.
      .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
      .                   // is statically known, so the branch is optimized away.
  8,128 ( 0.01%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
  7,008 ( 0.01%)          self.processed += BUFFER_SIZE;
  3,504 ( 0.00%)      }
      .           
      .               // A write function for byte slices.
      .               #[inline]
      .               fn slice_write(&mut self, msg: &[u8]) {
      .                   let length = msg.len();
  3,853 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .           
 22,889 ( 0.02%)          if nbuf + length < BUFFER_SIZE {
      .                       unsafe {
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .           
  8,374 ( 0.01%)                  if length <= 8 {
      .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
      .                           } else {
      .                               // This memcpy is *not* optimized away.
      .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
      .                           }
      .                       }
      .           
  4,191 ( 0.00%)              self.nbuf = nbuf + length;
      .           
      .                       return;
      .                   }
      .           
  2,215 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
      .               }
      .           
      .               // A write function for byte slices that should only be called when the
      .               // write would cause the buffer to fill.
      .               //
      .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
      .               // and `msg` must contain enough bytes to initialize the rest of the element
      .               // containing the byte offset `self.nbuf`.
      .               #[inline(never)]
  1,905 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
      .                   let length = msg.len();
    381 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
      .           
      .                   // Always copy first part of input into current element of buffer.
      .                   // This function should only be called when the write fills the buffer,
      .                   // so we know that there is enough input to fill the current element.
  1,143 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
    381 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
      .           
      .                   let src = msg.as_ptr();
      .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
      .           
      .                   // Process buffer.
      .           
      .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
      .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
      .                   // We know that is true, because last step ensured we have a full
      .                   // element in the buffer.
    762 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
      .           
      .                   for i in 0..last {
  2,934 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
  3,315 ( 0.00%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
  5,868 ( 0.00%)              self.state.v0 ^= elem;
      .                   }
      .           
      .                   // Process the remaining element-sized chunks of input.
      .                   let mut processed = needed_in_elem;
    762 ( 0.00%)          let input_left = length - processed;
    273 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
      .                   let extra_bytes_left = input_left % ELEM_SIZE;
      .           
      .                   for _ in 0..elems_left {
    161 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
    161 ( 0.00%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
    161 ( 0.00%)              self.state.v0 ^= elem;
    322 ( 0.00%)              processed += ELEM_SIZE;
      .                   }
      .           
      .                   // Copy remaining input into start of buffer.
      .                   let src = msg.as_ptr().add(processed);
      .                   let dst = self.buf.as_mut_ptr() as *mut u8;
      .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
      .           
    381 ( 0.00%)          self.nbuf = extra_bytes_left;
  1,905 ( 0.00%)          self.processed += nbuf + processed;
  2,286 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn finish128(mut self) -> (u64, u64) {
      .                   debug_assert!(self.nbuf < BUFFER_SIZE);
      .           
      .                   // Process full elements in buffer.
  2,073 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
      .           
      .                   // Since we're consuming self, avoid updating members for a potential
      .                   // performance gain.
  2,764 ( 0.00%)          let mut state = self.state;
      .           
      .                   for i in 0..last {
  2,019 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
  2,019 ( 0.00%)              state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut state);
  2,019 ( 0.00%)              state.v0 ^= elem;
      .                   }
      .           
      .                   // Get remaining partial element.
  1,382 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
      .                       unsafe {
      .                           // Ensure element is initialized by writing zero bytes. At most
      .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
      .                           // to write this many because we have the spill and we maintain
      .                           // `self.nbuf` such that this write will start before the spill.
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
      .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
    593 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
      .                       }
      .                   } else {
      .                       0
      .                   };
      .           
      .                   // Finalize the hash.
  1,975 ( 0.00%)          let length = self.processed + self.nbuf;
  1,380 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
      .           
    690 ( 0.00%)          state.v3 ^= b;
      .                   Sip24Rounds::c_rounds(&mut state);
    690 ( 0.00%)          state.v0 ^= b;
      .           
    690 ( 0.00%)          state.v2 ^= 0xee;
      .                   Sip24Rounds::d_rounds(&mut state);
  1,912 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
      .           
    530 ( 0.00%)          state.v1 ^= 0xdd;
      .                   Sip24Rounds::d_rounds(&mut state);
    530 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
      .           
      .                   (_0, _1)
      .               }
      .           }
      .           
      .           impl Hasher for SipHasher128 {
      .               #[inline]
      .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
      .           }
      .           
      .           #[derive(Debug, Clone, Default)]
      .           struct Sip24Rounds;
      .           
      .           impl Sip24Rounds {
      .               #[inline]
      .               fn c_rounds(state: &mut State) {
 82,175 ( 0.07%)          compress!(state);
 93,338 ( 0.08%)          compress!(state);
      .               }
      .           
      .               #[inline]
      .               fn d_rounds(state: &mut State) {
  3,820 ( 0.00%)          compress!(state);
  3,820 ( 0.00%)          compress!(state);
  3,820 ( 0.00%)          compress!(state);
  3,131 ( 0.00%)          compress!(state);
      .               }
      .           }

 14,937 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs
--------------------------------------------------------------------------------
Ir                 

-- line 14 ----------------------------------------
        .           
        .           pub type EncodeResult = Result<(), !>;
        .           
        .           pub struct Encoder {
        .               pub data: Vec<u8>,
        .           }
        .           
        .           impl Encoder {
        1 ( 0.00%)      pub fn new(data: Vec<u8>) -> Encoder {
        4 ( 0.00%)          Encoder { data }
        1 ( 0.00%)      }
        .           
        1 ( 0.00%)      pub fn into_inner(self) -> Vec<u8> {
        4 ( 0.00%)          self.data
        1 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn position(&self) -> usize {
    1,244 ( 0.00%)          self.data.len()
        .               }
        .           }
        .           
        .           macro_rules! write_leb128 {
        .               ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{
        .                   const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);
        .                   let old_len = $enc.data.len();
        .           
-- line 40 ----------------------------------------
-- line 67 ----------------------------------------
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> EncodeResult {
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn emit_usize(&mut self, v: usize) -> EncodeResult {
   27,254 ( 0.02%)          write_leb128!(self, v, usize, write_usize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u128(&mut self, v: u128) -> EncodeResult {
       28 ( 0.00%)          write_leb128!(self, v, u128, write_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u64(&mut self, v: u64) -> EncodeResult {
      175 ( 0.00%)          write_leb128!(self, v, u64, write_u64_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u32(&mut self, v: u32) -> EncodeResult {
   23,197 ( 0.02%)          write_leb128!(self, v, u32, write_u32_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u16(&mut self, v: u16) -> EncodeResult {
        .                   self.data.extend_from_slice(&v.to_le_bytes());
        .                   Ok(())
        .               }
        .           
-- line 98 ----------------------------------------
-- line 131 ----------------------------------------
        .               #[inline]
        .               fn emit_i8(&mut self, v: i8) -> EncodeResult {
        .                   let as_u8: u8 = unsafe { std::mem::transmute(v) };
        .                   self.emit_u8(as_u8)
        .               }
        .           
        .               #[inline]
        .               fn emit_bool(&mut self, v: bool) -> EncodeResult {
      282 ( 0.00%)          self.emit_u8(if v { 1 } else { 0 })
        .               }
        .           
        .               #[inline]
        .               fn emit_f64(&mut self, v: f64) -> EncodeResult {
        .                   let as_u64: u64 = v.to_bits();
        .                   self.emit_u64(as_u64)
        .               }
        .           
-- line 147 ----------------------------------------
-- line 549 ----------------------------------------
        .               #[inline]
        .               pub fn advance(&mut self, bytes: usize) {
        .                   self.position += bytes;
        .               }
        .           
        .               #[inline]
        .               pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {
        .                   let start = self.position;
        5 ( 0.00%)          self.position += bytes;
        5 ( 0.00%)          &self.data[start..self.position]
        .               }
        .           }
        .           
        .           macro_rules! read_leb128 {
        .               ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};
        .           }
        .           
        .           impl<'a> serialize::Decoder for Decoder<'a> {
        .               #[inline]
        .               fn read_unit(&mut self) -> () {
        .                   ()
        .               }
        .           
        .               #[inline]
        .               fn read_u128(&mut self) -> u128 {
      315 ( 0.00%)          read_leb128!(self, read_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_u64(&mut self) -> u64 {
      608 ( 0.00%)          read_leb128!(self, read_u64_leb128)
        .               }
        .           
        .               #[inline]
    7,768 ( 0.01%)      fn read_u32(&mut self) -> u32 {
   32,671 ( 0.03%)          read_leb128!(self, read_u32_leb128)
   15,536 ( 0.01%)      }
        .           
        .               #[inline]
        .               fn read_u16(&mut self) -> u16 {
  563,696 ( 0.46%)          let bytes = [self.data[self.position], self.data[self.position + 1]];
   80,528 ( 0.07%)          let value = u16::from_le_bytes(bytes);
  161,056 ( 0.13%)          self.position += 2;
        .                   value
        .               }
        .           
        .               #[inline]
        .               fn read_u8(&mut self) -> u8 {
1,017,379 ( 0.83%)          let value = self.data[self.position];
  190,327 ( 0.15%)          self.position += 1;
        .                   value
        .               }
        .           
        .               #[inline]
   41,485 ( 0.03%)      fn read_usize(&mut self) -> usize {
   41,497 ( 0.03%)          read_leb128!(self, read_usize_leb128)
   82,970 ( 0.07%)      }
        .           
        .               #[inline]
        .               fn read_i128(&mut self) -> i128 {
        .                   read_leb128!(self, read_i128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_i64(&mut self) -> i64 {
-- line 613 ----------------------------------------
-- line 637 ----------------------------------------
        .               #[inline]
        .               fn read_isize(&mut self) -> isize {
        .                   read_leb128!(self, read_isize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_bool(&mut self) -> bool {
        .                   let value = self.read_u8();
    2,288 ( 0.00%)          value != 0
        .               }
        .           
        .               #[inline]
        .               fn read_f64(&mut self) -> f64 {
        .                   let bits = self.read_u64();
        .                   f64::from_bits(bits)
        .               }
        .           
-- line 653 ----------------------------------------
-- line 660 ----------------------------------------
        .               #[inline]
        .               fn read_char(&mut self) -> char {
        .                   let bits = self.read_u32();
        .                   std::char::from_u32(bits).unwrap()
        .               }
        .           
        .               #[inline]
        .               fn read_str(&mut self) -> Cow<'_, str> {
    7,179 ( 0.01%)          let len = self.read_usize();
   38,692 ( 0.03%)          let sentinel = self.data[self.position + len];
    9,682 ( 0.01%)          assert!(sentinel == STR_SENTINEL);
        .                   let s = unsafe {
        .                       std::str::from_utf8_unchecked(&self.data[self.position..self.position + len])
        .                   };
   24,205 ( 0.02%)          self.position += len + 1;
    7,050 ( 0.01%)          Cow::Borrowed(s)
        .               }
        .           
        .               #[inline]
        .               fn read_raw_bytes_into(&mut self, s: &mut [u8]) {
       53 ( 0.00%)          let start = self.position;
      284 ( 0.00%)          self.position += s.len();
       53 ( 0.00%)          s.copy_from_slice(&self.data[start..self.position]);
        .               }
        .           }
        .           
        .           // Specializations for contiguous byte sequences follow. The default implementations for slices
        .           // encode and decode each element individually. This isn't necessary for `u8` slices when using
        .           // opaque encoders and decoders, because each `u8` is unchanged by encoding and decoding.
        .           // Therefore, we can use more efficient implementations that process the entire sequence at once.
        .           
-- line 690 ----------------------------------------

  170,107 ( 0.14%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 180 ----------------------------------------
      .           /// assert_eq!(v, &[0.into()]);
      .           ///
      .           /// // Ensure that the last item was dropped.
      .           /// assert!(weak.upgrade().is_none());
      .           /// ```
      .           #[stable(feature = "drop_in_place", since = "1.8.0")]
      .           #[lang = "drop_in_place"]
      .           #[allow(unconditional_recursion)]
525,457 ( 0.43%)  pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
      .               // Code here does not matter - this is replaced by the
      .               // real drop glue by the compiler.
      .           
      .               // SAFETY: see comment above
      .               unsafe { drop_in_place(to_drop) }
      .           }
      .           
      .           /// Creates a null raw pointer.
-- line 196 ----------------------------------------
-- line 251 ----------------------------------------
      .           /// let x = [5, 6, 7];
      .           /// let raw_pointer = x.as_ptr();
      .           /// let slice = ptr::slice_from_raw_parts(raw_pointer, 3);
      .           /// assert_eq!(unsafe { &*slice }[2], 7);
      .           /// ```
      .           #[inline]
      .           #[stable(feature = "slice_from_raw_parts", since = "1.42.0")]
      .           #[rustc_const_unstable(feature = "const_slice_from_raw_parts", issue = "67456")]
    376 ( 0.00%)  pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
    470 ( 0.00%)      from_raw_parts(data.cast(), len)
    188 ( 0.00%)  }
      .           
      .           /// Performs the same functionality as [`slice_from_raw_parts`], except that a
      .           /// raw mutable slice is returned, as opposed to a raw immutable slice.
      .           ///
      .           /// See the documentation of [`slice_from_raw_parts`] for more details.
      .           ///
      .           /// This function is safe, but actually using the return value is unsafe.
      .           /// See the documentation of [`slice::from_raw_parts_mut`] for slice safety requirements.
-- line 269 ----------------------------------------
-- line 283 ----------------------------------------
      .           ///     (*slice)[2] = 99; // assign a value at an index in the slice
      .           /// };
      .           ///
      .           /// assert_eq!(unsafe { &*slice }[2], 99);
      .           /// ```
      .           #[inline]
      .           #[stable(feature = "slice_from_raw_parts", since = "1.42.0")]
      .           #[rustc_const_unstable(feature = "const_slice_from_raw_parts", issue = "67456")]
  1,424 ( 0.00%)  pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
    534 ( 0.00%)      from_raw_parts_mut(data.cast(), len)
    356 ( 0.00%)  }
      .           
      .           /// Swaps the values at two mutable locations of the same type, without
      .           /// deinitializing either.
      .           ///
      .           /// But for the following two exceptions, this function is semantically
      .           /// equivalent to [`mem::swap`]:
      .           ///
      .           /// * It operates on raw pointers instead of references. When references are
-- line 301 ----------------------------------------
-- line 448 ----------------------------------------
      .                       return;
      .                   }
      .               }
      .           
      .               // Direct swapping, for the cases not going through the block optimization.
      .               // SAFETY: the caller must guarantee that `x` and `y` are valid
      .               // for writes, properly aligned, and non-overlapping.
      .               unsafe {
      6 ( 0.00%)          let z = read(x);
      .                   copy_nonoverlapping(y, x, 1);
      .                   write(y, z);
      .               }
      .           }
      .           
      .           #[inline]
      .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
      .           const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {
-- line 464 ----------------------------------------
-- line 677 ----------------------------------------
      .           ///
      .           /// assert_eq!(s, "bar");
      .           /// ```
      .           ///
      .           /// [valid]: self#safety
      .           #[inline]
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           #[rustc_const_unstable(feature = "const_ptr_read", issue = "80377")]
  3,830 ( 0.00%)  pub const unsafe fn read<T>(src: *const T) -> T {
      .               // We are calling the intrinsics directly to avoid function calls in the generated code
      .               // as `intrinsics::copy_nonoverlapping` is a wrapper function.
      .               extern "rust-intrinsic" {
      .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
      .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
      .               }
      .           
  1,105 ( 0.00%)      let mut tmp = MaybeUninit::<T>::uninit();
      .               // SAFETY: the caller must guarantee that `src` is valid for reads.
      .               // `src` cannot overlap `tmp` because `tmp` was just allocated on
      .               // the stack as a separate allocated object.
      .               //
      .               // Also, since we just wrote a valid value into `tmp`, it is guaranteed
      .               // to be properly initialized.
      .               unsafe {
 13,180 ( 0.01%)          copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
120,957 ( 0.10%)          tmp.assume_init()
      .               }
  1,891 ( 0.00%)  }
      .           
      .           /// Reads the value from `src` without moving it. This leaves the
      .           /// memory in `src` unchanged.
      .           ///
      .           /// Unlike [`read`], `read_unaligned` works with unaligned pointers.
      .           ///
      .           /// # Safety
      .           ///
-- line 712 ----------------------------------------
-- line 872 ----------------------------------------
      .           /// swap(&mut foo, &mut bar);
      .           ///
      .           /// assert_eq!(foo, "bar");
      .           /// assert_eq!(bar, "foo");
      .           /// ```
      .           #[inline]
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           #[rustc_const_unstable(feature = "const_ptr_write", issue = "86302")]
  2,603 ( 0.00%)  pub const unsafe fn write<T>(dst: *mut T, src: T) {
      .               // We are calling the intrinsics directly to avoid function calls in the generated code
      .               // as `intrinsics::copy_nonoverlapping` is a wrapper function.
      .               extern "rust-intrinsic" {
      .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
      .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
      .               }
      .           
      .               // SAFETY: the caller must guarantee that `dst` is valid for writes.
      .               // `dst` cannot overlap `src` because the caller has mutable access
      .               // to `dst` while `src` is owned by this function.
      .               unsafe {
992,257 ( 0.81%)          copy_nonoverlapping(&src as *const T, dst, 1);
      .                   intrinsics::forget(src);
      .               }
  1,528 ( 0.00%)  }
      .           
      .           /// Overwrites a memory location with the given value without reading or
      .           /// dropping the old value.
      .           ///
      .           /// Unlike [`write()`], the pointer may be unaligned.
      .           ///
      .           /// `write_unaligned` does not drop the contents of `dst`. This is safe, but it
      .           /// could leak allocations or resources, so care should be taken not to overwrite
-- line 903 ----------------------------------------
-- line 1206 ----------------------------------------
      .               if stride == 1 {
      .                   // `stride == 1` case can be computed more simply through `-p (mod a)`, but doing so
      .                   // inhibits LLVM's ability to select instructions like `lea`. Instead we compute
      .                   //
      .                   //    round_up_to_next_alignment(p, a) - p
      .                   //
      .                   // which distributes operations around the load-bearing, but pessimizing `and` sufficiently
      .                   // for LLVM to be able to utilize the various optimizations it knows about.
     83 ( 0.00%)          return wrapping_sub(
    744 ( 0.00%)              wrapping_add(p as usize, a_minus_one) & wrapping_sub(0, a),
      .                       p as usize,
      .                   );
      .               }
      .           
      .               let pmoda = p as usize & a_minus_one;
      .               if pmoda == 0 {
      .                   // Already aligned. Yay!
      .                   return 0;
-- line 1223 ----------------------------------------
-- line 1348 ----------------------------------------
      .           /// assert!(std::ptr::eq(
      .           ///     &wrapper as &dyn Trait as *const dyn Trait as *const u8,
      .           ///     &wrapper.member as &dyn Trait as *const dyn Trait as *const u8,
      .           /// ));
      .           /// ```
      .           #[stable(feature = "ptr_eq", since = "1.17.0")]
      .           #[inline]
      .           pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {
 20,978 ( 0.02%)      a == b
      .           }
      .           
      .           /// Hash a raw pointer.
      .           ///
      .           /// This can be used to hash a `&T` reference (which coerces to `*const T` implicitly)
      .           /// by its address rather than the value it points to
      .           /// (which is what the `Hash for &T` implementation does).
      .           ///
-- line 1364 ----------------------------------------

 68,573 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs
--------------------------------------------------------------------------------
Ir               

-- line 176 ----------------------------------------
      .               }
      .               fn sess(self) -> Option<&'tcx Session> {
      .                   None
      .               }
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   None
      .               }
      .           
  1,692 ( 0.00%)      fn decoder(self, pos: usize) -> DecodeContext<'a, 'tcx> {
    564 ( 0.00%)          let tcx = self.tcx();
 81,394 ( 0.07%)          DecodeContext {
  8,462 ( 0.01%)              opaque: opaque::Decoder::new(self.blob(), pos),
    564 ( 0.00%)              cdata: self.cdata(),
      .                       blob: self.blob(),
  2,408 ( 0.00%)              sess: self.sess().or(tcx.map(|tcx| tcx.sess)),
      .                       tcx,
      .                       last_source_file_index: 0,
      .                       lazy_state: LazyState::NoNode,
      .                       alloc_decoding_session: self
      .                           .cdata()
  7,158 ( 0.01%)                  .map(|cdata| cdata.cdata.alloc_decoding_state.new_decoding_session()),
      .                   }
  1,692 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Metadata<'a, 'tcx> for &'a MetadataBlob {
      .               #[inline]
      .               fn blob(self) -> &'a MetadataBlob {
      .                   self
      .               }
      .           }
-- line 206 ----------------------------------------
-- line 255 ----------------------------------------
      .               }
      .               #[inline]
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   Some(self.1)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<T> {
  7,726 ( 0.01%)      fn decode<M: Metadata<'a, 'tcx>>(self, metadata: M) -> T {
  5,883 ( 0.00%)          let mut dcx = metadata.decoder(self.position.get());
 23,267 ( 0.02%)          dcx.lazy_state = LazyState::NodeStart(self.position);
  8,816 ( 0.01%)          T::decode(&mut dcx)
  9,871 ( 0.01%)      }
      .           }
      .           
      .           impl<'a: 'x, 'tcx: 'x, 'x, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<[T]> {
      .               fn decode<M: Metadata<'a, 'tcx>>(
      .                   self,
      .                   metadata: M,
      .               ) -> impl ExactSizeIterator<Item = T> + Captures<'a> + Captures<'tcx> + 'x {
     21 ( 0.00%)          let mut dcx = metadata.decoder(self.position.get());
      6 ( 0.00%)          dcx.lazy_state = LazyState::NodeStart(self.position);
  3,957 ( 0.00%)          (0..self.meta).map(move |_| T::decode(&mut dcx))
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> DecodeContext<'a, 'tcx> {
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   debug_assert!(self.tcx.is_some(), "missing TyCtxt in DecodeContext");
      .                   self.tcx.unwrap()
-- line 285 ----------------------------------------
-- line 292 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn cdata(&self) -> CrateMetadataRef<'a> {
      .                   debug_assert!(self.cdata.is_some(), "missing CrateMetadata in DecodeContext");
      .                   self.cdata.unwrap()
      .               }
      .           
      .               fn map_encoded_cnum_to_current(&self, cnum: CrateNum) -> CrateNum {
 19,305 ( 0.02%)          if cnum == LOCAL_CRATE { self.cdata().cnum } else { self.cdata().cnum_map[cnum] }
      .               }
      .           
  9,162 ( 0.01%)      fn read_lazy_with_meta<T: ?Sized + LazyMeta>(&mut self, meta: T::Meta) -> Lazy<T> {
      .                   let distance = self.read_usize();
  8,500 ( 0.01%)          let position = match self.lazy_state {
      .                       LazyState::NoNode => bug!("read_lazy_with_meta: outside of a metadata node"),
  1,450 ( 0.00%)              LazyState::NodeStart(start) => {
      .                           let start = start.get();
  2,900 ( 0.00%)                  assert!(distance <= start);
      .                           start - distance
      .                       }
  2,490 ( 0.00%)              LazyState::Previous(last_pos) => last_pos.get() + distance,
      .                   };
  4,560 ( 0.00%)          self.lazy_state = LazyState::Previous(NonZeroUsize::new(position).unwrap());
      .                   Lazy::from_position_and_meta(NonZeroUsize::new(position).unwrap(), meta)
  9,162 ( 0.01%)      }
      .           
      .               #[inline]
      .               pub fn read_raw_bytes(&mut self, len: usize) -> &'a [u8] {
      .                   self.opaque.read_raw_bytes(len)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> TyDecoder<'tcx> for DecodeContext<'a, 'tcx> {
-- line 324 ----------------------------------------
-- line 326 ----------------------------------------
      .           
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   self.tcx.expect("missing TyCtxt in DecodeContext")
      .               }
      .           
      .               #[inline]
      .               fn peek_byte(&self) -> u8 {
 14,510 ( 0.01%)          self.opaque.data[self.opaque.position()]
      .               }
      .           
      .               #[inline]
      .               fn position(&self) -> usize {
      .                   self.opaque.position()
      .               }
      .           
 14,063 ( 0.01%)      fn cached_ty_for_shorthand<F>(&mut self, shorthand: usize, or_insert_with: F) -> Ty<'tcx>
      .               where
      .                   F: FnOnce(&mut Self) -> Ty<'tcx>,
      .               {
  2,009 ( 0.00%)          let tcx = self.tcx();
      .           
  2,009 ( 0.00%)          let key = ty::CReaderCacheKey { cnum: Some(self.cdata().cnum), pos: shorthand };
      .           
  5,404 ( 0.00%)          if let Some(&ty) = tcx.ty_rcache.borrow().get(&key) {
      .                       return ty;
      .                   }
      .           
    658 ( 0.00%)          let ty = or_insert_with(self);
      .                   tcx.ty_rcache.borrow_mut().insert(key, ty);
      .                   ty
 18,081 ( 0.01%)      }
      .           
      .               fn with_position<F, R>(&mut self, pos: usize, f: F) -> R
      .               where
      .                   F: FnOnce(&mut Self) -> R,
      .               {
      .                   let new_opaque = opaque::Decoder::new(self.opaque.data, pos);
      .                   let old_opaque = mem::replace(&mut self.opaque, new_opaque);
      .                   let old_state = mem::replace(&mut self.lazy_state, LazyState::NoNode);
      .                   let r = f(self);
  3,440 ( 0.00%)          self.opaque = old_opaque;
    688 ( 0.00%)          self.lazy_state = old_state;
      .                   r
      .               }
      .           
      .               fn decode_alloc_id(&mut self) -> rustc_middle::mir::interpret::AllocId {
      .                   if let Some(alloc_decoding_session) = self.alloc_decoding_session {
      .                       alloc_decoding_session.decode_alloc_id(self)
      .                   } else {
      .                       bug!("Attempting to decode interpret::AllocId without CrateMetadata")
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for CrateNum {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> CrateNum {
 10,262 ( 0.01%)          let cnum = CrateNum::from_u32(d.read_u32());
      .                   d.map_encoded_cnum_to_current(cnum)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for DefIndex {
     46 ( 0.00%)      fn decode(d: &mut DecodeContext<'a, 'tcx>) -> DefIndex {
 21,512 ( 0.02%)          DefIndex::from_u32(d.read_u32())
     92 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnIndex {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> ExpnIndex {
      .                   ExpnIndex::from_u32(d.read_u32())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for SyntaxContext {
 13,420 ( 0.01%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> SyntaxContext {
  3,355 ( 0.00%)          let cdata = decoder.cdata();
  3,355 ( 0.00%)          let sess = decoder.sess.unwrap();
  6,710 ( 0.01%)          let cname = cdata.root.name;
      .                   rustc_span::hygiene::decode_syntax_context(decoder, &cdata.hygiene_context, |_, id| {
      .                       debug!("SpecializedDecoder<SyntaxContext>: decoding {}", id);
     64 ( 0.00%)              cdata
      .                           .root
      .                           .syntax_contexts
      .                           .get(cdata, id)
      .                           .unwrap_or_else(|| panic!("Missing SyntaxContext {:?} for crate {:?}", id, cname))
      .                           .decode((cdata, sess))
      .                   })
 16,775 ( 0.01%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnId {
  1,778 ( 0.00%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> ExpnId {
    254 ( 0.00%)          let local_cdata = decoder.cdata();
    254 ( 0.00%)          let sess = decoder.sess.unwrap();
      .           
      .                   let cnum = CrateNum::decode(decoder);
      .                   let index = u32::decode(decoder);
      .           
      .                   let expn_id = rustc_span::hygiene::decode_expn_id(cnum, index, |expn_id| {
      .                       let ExpnId { krate: cnum, local_id: index } = expn_id;
      .                       // Lookup local `ExpnData`s in our own crate data. Foreign `ExpnData`s
      .                       // are stored in the owning crate, to avoid duplication.
      .                       debug_assert_ne!(cnum, LOCAL_CRATE);
     24 ( 0.00%)              let crate_data = if cnum == local_cdata.cnum {
      .                           local_cdata
      .                       } else {
      .                           local_cdata.cstore.get_crate_data(cnum)
      .                       };
    120 ( 0.00%)              let expn_data = crate_data
      .                           .root
      .                           .expn_data
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
    120 ( 0.00%)              let expn_hash = crate_data
      .                           .root
      .                           .expn_hashes
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
    240 ( 0.00%)              (expn_data, expn_hash)
      .                   });
      .                   expn_id
  2,032 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Span {
 26,456 ( 0.02%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Span {
  3,307 ( 0.00%)          let ctxt = SyntaxContext::decode(decoder);
      .                   let tag = u8::decode(decoder);
      .           
  6,614 ( 0.01%)          if tag == TAG_PARTIAL_SPAN {
      .                       return DUMMY_SP.with_ctxt(ctxt);
      .                   }
      .           
      .                   debug_assert!(tag == TAG_VALID_SPAN_LOCAL || tag == TAG_VALID_SPAN_FOREIGN);
      .           
      .                   let lo = BytePos::decode(decoder);
      .                   let len = BytePos::decode(decoder);
      .                   let hi = lo + len;
      .           
  9,909 ( 0.01%)          let Some(sess) = decoder.sess else {
      .                       bug!("Cannot decode Span without Session.")
      .                   };
      .           
      .                   // There are two possibilities here:
      .                   // 1. This is a 'local span', which is located inside a `SourceFile`
      .                   // that came from this crate. In this case, we use the source map data
      .                   // encoded in this crate. This branch should be taken nearly all of the time.
      .                   // 2. This is a 'foreign span', which is located inside a `SourceFile`
-- line 476 ----------------------------------------
-- line 492 ----------------------------------------
      .                   // a transitive dependency.
      .                   //
      .                   // When we encode a foreign span, we adjust its 'lo' and 'high' values
      .                   // to be based on the *foreign* crate (e.g. crate C), not the crate
      .                   // we are writing metadata for (e.g. crate B). This allows us to
      .                   // treat the 'local' and 'foreign' cases almost identically during deserialization:
      .                   // we can call `imported_source_files` for the proper crate, and binary search
      .                   // through the returned slice using our span.
  7,814 ( 0.01%)          let imported_source_files = if tag == TAG_VALID_SPAN_LOCAL {
      .                       decoder.cdata().imported_source_files(sess)
      .                   } else {
      .                       // When we encode a proc-macro crate, all `Span`s should be encoded
      .                       // with `TAG_VALID_SPAN_LOCAL`
      .                       if decoder.cdata().root.is_proc_macro_crate() {
      .                           // Decode `CrateNum` as u32 - using `CrateNum::decode` will ICE
      .                           // since we don't have `cnum_map` populated.
      .                           let cnum = u32::decode(decoder);
-- line 508 ----------------------------------------
-- line 527 ----------------------------------------
      .           
      .                       let foreign_data = decoder.cdata().cstore.get_crate_data(cnum);
      .                       foreign_data.imported_source_files(sess)
      .                   };
      .           
      .                   let source_file = {
      .                       // Optimize for the case that most spans within a translated item
      .                       // originate from the same source_file.
  9,909 ( 0.01%)              let last_source_file = &imported_source_files[decoder.last_source_file_index];
      .           
 13,129 ( 0.01%)              if lo >= last_source_file.original_start_pos && lo <= last_source_file.original_end_pos
      .                       {
      .                           last_source_file
      .                       } else {
      .                           let index = imported_source_files
      .                               .binary_search_by_key(&lo, |source_file| source_file.original_start_pos)
  2,416 ( 0.00%)                      .unwrap_or_else(|index| index - 1);
      .           
      .                           // Don't try to cache the index for foreign spans,
      .                           // as this would require a map from CrateNums to indices
  1,208 ( 0.00%)                  if tag == TAG_VALID_SPAN_LOCAL {
  1,208 ( 0.00%)                      decoder.last_source_file_index = index;
      .                           }
  2,416 ( 0.00%)                  &imported_source_files[index]
      .                       }
      .                   };
      .           
      .                   // Make sure our binary search above is correct.
      .                   debug_assert!(
      .                       lo >= source_file.original_start_pos && lo <= source_file.original_end_pos,
      .                       "Bad binary search: lo={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       lo,
-- line 558 ----------------------------------------
-- line 565 ----------------------------------------
      .                       hi >= source_file.original_start_pos && hi <= source_file.original_end_pos,
      .                       "Bad binary search: hi={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       hi,
      .                       source_file.original_start_pos,
      .                       source_file.original_end_pos
      .                   );
      .           
      .                   let lo =
 13,212 ( 0.01%)              (lo + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .                   let hi =
      .                       (hi + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .           
      .                   // Do not try to decode parent for foreign spans.
      .                   Span::new(lo, hi, ctxt, None)
 29,763 ( 0.02%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for &'tcx [thir::abstract_const::Node<'tcx>] {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
-- line 587 ----------------------------------------
-- line 590 ----------------------------------------
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<T>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
  2,320 ( 0.00%)          decoder.read_lazy_with_meta(())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<[T]>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
  4,473 ( 0.00%)          if len == 0 { Lazy::empty() } else { decoder.read_lazy_with_meta(len) }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, I: Idx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<Table<I, T>>
      .           where
      .               Option<T>: FixedSizeEncoding,
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
  2,873 ( 0.00%)          decoder.read_lazy_with_meta(len)
      .               }
      .           }
      .           
      .           implement_ty_decoder!(DecodeContext<'a, 'tcx>);
      .           
      .           impl<'tcx> MetadataBlob {
      .               crate fn new(metadata_ref: MetadataRef) -> MetadataBlob {
      .                   MetadataBlob(Lrc::new(metadata_ref))
-- line 626 ----------------------------------------
-- line 630 ----------------------------------------
      .                   self.blob().starts_with(METADATA_HEADER)
      .               }
      .           
      .               crate fn get_rustc_version(&self) -> String {
      .                   Lazy::<String>::from_position(NonZeroUsize::new(METADATA_HEADER.len() + 4).unwrap())
      .                       .decode(self)
      .               }
      .           
     51 ( 0.00%)      crate fn get_root(&self) -> CrateRoot<'tcx> {
     17 ( 0.00%)          let slice = &self.blob()[..];
      .                   let offset = METADATA_HEADER.len();
     85 ( 0.00%)          let pos = (((slice[offset + 0] as u32) << 24)
     34 ( 0.00%)              | ((slice[offset + 1] as u32) << 16)
     68 ( 0.00%)              | ((slice[offset + 2] as u32) << 8)
     51 ( 0.00%)              | ((slice[offset + 3] as u32) << 0)) as usize;
      .                   Lazy::<CrateRoot<'tcx>>::from_position(NonZeroUsize::new(pos).unwrap()).decode(self)
     85 ( 0.00%)      }
      .           
      .               crate fn list_crate_metadata(&self, out: &mut dyn io::Write) -> io::Result<()> {
      .                   let root = self.get_root();
      .                   writeln!(out, "Crate info:")?;
      .                   writeln!(out, "name {}{}", root.name, root.extra_filename)?;
      .                   writeln!(out, "hash {} stable_crate_id {:?}", root.hash, root.stable_crate_id)?;
      .                   writeln!(out, "proc_macro {:?}", root.proc_macro_data.is_some())?;
      .                   writeln!(out, "=External Dependencies=")?;
-- line 654 ----------------------------------------
-- line 666 ----------------------------------------
      .                   }
      .                   write!(out, "\n")?;
      .                   Ok(())
      .               }
      .           }
      .           
      .           impl CrateRoot<'_> {
      .               crate fn is_proc_macro_crate(&self) -> bool {
      8 ( 0.00%)          self.proc_macro_data.is_some()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
      8 ( 0.00%)          self.name
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
      5 ( 0.00%)          self.hash
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
     16 ( 0.00%)          self.stable_crate_id
      .               }
      .           
      .               crate fn triple(&self) -> &TargetTriple {
      .                   &self.triple
      .               }
      .           
      .               crate fn decode_crate_deps<'a>(
      .                   &self,
      .                   metadata: &'a MetadataBlob,
      .               ) -> impl ExactSizeIterator<Item = CrateDep> + Captures<'a> {
      6 ( 0.00%)          self.crate_deps.decode(metadata)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> CrateMetadataRef<'a> {
     28 ( 0.00%)      fn raw_proc_macro(self, id: DefIndex) -> &'a ProcMacro {
      .                   // DefIndex's in root.proc_macro_data have a one-to-one correspondence
      .                   // with items in 'raw_proc_macros'.
      8 ( 0.00%)          let pos = self
      .                       .root
      .                       .proc_macro_data
      .                       .as_ref()
      .                       .unwrap()
      .                       .macros
      .                       .decode(self)
      .                       .position(|i| i == id)
      .                       .unwrap();
     16 ( 0.00%)          &self.raw_proc_macros.unwrap()[pos]
     36 ( 0.00%)      }
      .           
 15,015 ( 0.01%)      fn opt_item_ident(self, item_index: DefIndex, sess: &Session) -> Option<Ident> {
 11,060 ( 0.01%)          let name = self.def_key(item_index).disambiguated_data.data.get_opt_name()?;
  4,011 ( 0.00%)          let span = match self.root.tables.ident_span.get(self, item_index) {
      .                       Some(lazy_span) => lazy_span.decode((self, sess)),
      .                       None => {
      .                           // FIXME: this weird case of a name with no span is specific to `extern crate`
      .                           // items, which are supposed to be treated like `use` items and only be encoded
      .                           // to metadata as `Export`s, return `None` because that's what all the callers
      .                           // expect in this case.
     18 ( 0.00%)                  assert_eq!(self.def_kind(item_index), DefKind::ExternCrate);
      .                           return None;
      .                       }
      .                   };
      .                   Some(Ident::new(name, span))
 19,166 ( 0.02%)      }
      .           
     45 ( 0.00%)      fn item_ident(self, item_index: DefIndex, sess: &Session) -> Ident {
  1,050 ( 0.00%)          self.opt_item_ident(item_index, sess).expect("no encoded ident for item")
     90 ( 0.00%)      }
      .           
      .               fn maybe_kind(self, item_id: DefIndex) -> Option<EntryKind> {
  2,528 ( 0.00%)          self.root.tables.kind.get(self, item_id).map(|k| k.decode(self))
      .               }
      .           
 10,112 ( 0.01%)      fn kind(self, item_id: DefIndex) -> EntryKind {
      .                   self.maybe_kind(item_id).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
  7,584 ( 0.01%)      }
      .           
  4,039 ( 0.00%)      fn def_kind(self, item_id: DefIndex) -> DefKind {
  2,713 ( 0.00%)          self.root.tables.def_kind.get(self, item_id).map(|k| k.decode(self)).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::def_kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
  2,308 ( 0.00%)      }
      .           
    405 ( 0.00%)      fn get_span(self, index: DefIndex, sess: &Session) -> Span {
  1,774 ( 0.00%)          self.root
      .                       .tables
      .                       .span
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing span for {:?}", index))
      .                       .decode((self, sess))
    225 ( 0.00%)      }
      .           
      .               fn load_proc_macro(self, id: DefIndex, sess: &Session) -> SyntaxExtension {
     18 ( 0.00%)          let (name, kind, helper_attrs) = match *self.raw_proc_macro(id) {
      .                       ProcMacro::CustomDerive { trait_name, attributes, client } => {
      .                           let helper_attrs =
      .                               attributes.iter().cloned().map(Symbol::intern).collect::<Vec<_>>();
      .                           (
      .                               trait_name,
      .                               SyntaxExtensionKind::Derive(Box::new(ProcMacroDerive { client })),
      .                               helper_attrs,
      .                           )
      .                       }
      4 ( 0.00%)              ProcMacro::Attr { name, client } => {
      4 ( 0.00%)                  (name, SyntaxExtensionKind::Attr(Box::new(AttrProcMacro { client })), Vec::new())
      .                       }
      .                       ProcMacro::Bang { name, client } => {
      .                           (name, SyntaxExtensionKind::Bang(Box::new(BangProcMacro { client })), Vec::new())
      .                       }
      .                   };
      .           
      5 ( 0.00%)          let attrs: Vec<_> = self.get_item_attrs(id, sess).collect();
     12 ( 0.00%)          SyntaxExtension::new(
      .                       sess,
      5 ( 0.00%)              kind,
      .                       self.get_span(id, sess),
      4 ( 0.00%)              helper_attrs,
      3 ( 0.00%)              self.root.edition,
      1 ( 0.00%)              Symbol::intern(name),
      .                       &attrs,
      .                   )
      .               }
      .           
    156 ( 0.00%)      fn get_trait_def(self, item_id: DefIndex, sess: &Session) -> ty::TraitDef {
     48 ( 0.00%)          match self.kind(item_id) {
     12 ( 0.00%)              EntryKind::Trait(data) => {
     72 ( 0.00%)                  let data = data.decode((self, sess));
    192 ( 0.00%)                  ty::TraitDef::new(
      .                               self.local_def_id(item_id),
     24 ( 0.00%)                      data.unsafety,
     24 ( 0.00%)                      data.paren_sugar,
     24 ( 0.00%)                      data.has_auto_impl,
     24 ( 0.00%)                      data.is_marker,
     12 ( 0.00%)                      data.skip_array_during_method_dispatch,
     12 ( 0.00%)                      data.specialization_kind,
     48 ( 0.00%)                      self.def_path_hash(item_id),
     12 ( 0.00%)                      data.must_implement_one_of,
      .                           )
      .                       }
      .                       EntryKind::TraitAlias => ty::TraitDef::new(
      .                           self.local_def_id(item_id),
      .                           hir::Unsafety::Normal,
      .                           false,
      .                           false,
      .                           false,
      .                           false,
      .                           ty::trait_def::TraitSpecializationKind::None,
      .                           self.def_path_hash(item_id),
      .                           None,
      .                       ),
      .                       _ => bug!("def-index does not refer to trait or trait alias"),
      .                   }
    108 ( 0.00%)      }
      .           
    126 ( 0.00%)      fn get_variant(
      .                   self,
      .                   kind: &EntryKind,
      .                   index: DefIndex,
      .                   parent_did: DefId,
      .                   sess: &Session,
      .               ) -> ty::VariantDef {
     56 ( 0.00%)          let data = match kind {
      .                       EntryKind::Variant(data) | EntryKind::Struct(data, _) | EntryKind::Union(data, _) => {
     70 ( 0.00%)                  data.decode(self)
      .                       }
      .                       _ => bug!(),
      .                   };
      .           
     34 ( 0.00%)          let adt_kind = match kind {
      .                       EntryKind::Variant(_) => ty::AdtKind::Enum,
      .                       EntryKind::Struct(..) => ty::AdtKind::Struct,
      .                       EntryKind::Union(..) => ty::AdtKind::Union,
      .                       _ => bug!(),
      .                   };
      .           
      .                   let variant_did =
      .                       if adt_kind == ty::AdtKind::Enum { Some(self.local_def_id(index)) } else { None };
     28 ( 0.00%)          let ctor_did = data.ctor.map(|index| self.local_def_id(index));
      .           
    308 ( 0.00%)          ty::VariantDef::new(
      .                       self.item_ident(index, sess).name,
      .                       variant_did,
      .                       ctor_did,
     56 ( 0.00%)              data.discr,
     84 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, index)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
      .                           .map(|index| ty::FieldDef {
      7 ( 0.00%)                      did: self.local_def_id(index),
     14 ( 0.00%)                      name: self.item_ident(index, sess).name,
     14 ( 0.00%)                      vis: self.get_visibility(index),
      .                           })
      .                           .collect(),
      .                       data.ctor_kind,
      .                       adt_kind,
      .                       parent_did,
      .                       false,
     14 ( 0.00%)              data.is_non_exhaustive,
      .                   )
    126 ( 0.00%)      }
      .           
    120 ( 0.00%)      fn get_adt_def(self, item_id: DefIndex, tcx: TyCtxt<'tcx>) -> &'tcx ty::AdtDef {
     32 ( 0.00%)          let kind = self.kind(item_id);
     16 ( 0.00%)          let did = self.local_def_id(item_id);
      .           
     30 ( 0.00%)          let (adt_kind, repr) = match kind {
      .                       EntryKind::Enum(repr) => (ty::AdtKind::Enum, repr),
      .                       EntryKind::Struct(_, repr) => (ty::AdtKind::Struct, repr),
      .                       EntryKind::Union(_, repr) => (ty::AdtKind::Union, repr),
      .                       _ => bug!("get_adt_def called on a non-ADT {:?}", did),
      .                   };
      .           
      .                   let variants = if let ty::AdtKind::Enum = adt_kind {
     25 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, item_id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
    187 ( 0.00%)                  .map(|index| self.get_variant(&self.kind(index), index, did, tcx.sess))
      .                           .collect()
      .                   } else {
     24 ( 0.00%)              std::iter::once(self.get_variant(&kind, item_id, did, tcx.sess)).collect()
      .                   };
      .           
    137 ( 0.00%)          tcx.alloc_adt_def(did, adt_kind, variants, repr)
     56 ( 0.00%)      }
      .           
      .               fn get_explicit_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
    345 ( 0.00%)          self.root.tables.explicit_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_inferred_outlives(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
    345 ( 0.00%)          self.root
      .                       .tables
      .                       .inferred_outlives
      .                       .get(self, item_id)
      .                       .map(|predicates| tcx.arena.alloc_from_iter(predicates.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_super_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
     35 ( 0.00%)          self.root.tables.super_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_explicit_item_bounds(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
     20 ( 0.00%)          self.root
      .                       .tables
      .                       .explicit_item_bounds
      .                       .get(self, item_id)
     12 ( 0.00%)              .map(|bounds| tcx.arena.alloc_from_iter(bounds.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_generics(self, item_id: DefIndex, sess: &Session) -> ty::Generics {
    451 ( 0.00%)          self.root.tables.generics.get(self, item_id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_type(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
  2,345 ( 0.00%)          self.root
      .                       .tables
      .                       .ty
      .                       .get(self, id)
      .                       .unwrap_or_else(|| panic!("Not a type: {:?}", id))
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_stability(self, id: DefIndex) -> Option<attr::Stability> {
    205 ( 0.00%)          self.root.tables.stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_const_stability(self, id: DefIndex) -> Option<attr::ConstStability> {
     10 ( 0.00%)          self.root.tables.const_stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_deprecation(self, id: DefIndex) -> Option<attr::Deprecation> {
    185 ( 0.00%)          self.root.tables.deprecation.get(self, id).map(|depr| depr.decode(self))
      .               }
      .           
      6 ( 0.00%)      fn get_visibility(self, id: DefIndex) -> ty::Visibility {
  1,688 ( 0.00%)          self.root.tables.visibility.get(self, id).unwrap().decode(self)
      4 ( 0.00%)      }
      .           
      .               fn get_impl_data(self, id: DefIndex) -> ImplData {
  3,930 ( 0.00%)          match self.kind(id) {
  3,275 ( 0.00%)              EntryKind::Impl(data) => data.decode(self),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_parent_impl(self, id: DefIndex) -> Option<DefId> {
  1,890 ( 0.00%)          self.get_impl_data(id).parent_impl
      .               }
      .           
      .               fn get_impl_polarity(self, id: DefIndex) -> ty::ImplPolarity {
     22 ( 0.00%)          self.get_impl_data(id).polarity
      .               }
      .           
      .               fn get_impl_defaultness(self, id: DefIndex) -> hir::Defaultness {
      3 ( 0.00%)          self.get_impl_data(id).defaultness
      .               }
      .           
      .               fn get_impl_constness(self, id: DefIndex) -> hir::Constness {
      .                   self.get_impl_data(id).constness
      .               }
      .           
      .               fn get_trait_item_def_id(self, id: DefIndex) -> Option<DefId> {
    775 ( 0.00%)          self.root.tables.trait_item_def_id.get(self, id).map(|d| d.decode(self))
      .               }
      .           
      .               fn get_coerce_unsized_info(self, id: DefIndex) -> Option<ty::adjustment::CoerceUnsizedInfo> {
      .                   self.get_impl_data(id).coerce_unsized_info
      .               }
      .           
      .               fn get_impl_trait(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Option<ty::TraitRef<'tcx>> {
  7,695 ( 0.01%)          self.root.tables.impl_trait_ref.get(self, id).map(|tr| tr.decode((self, tcx)))
      .               }
      .           
      .               fn get_expn_that_defined(self, id: DefIndex, sess: &Session) -> ExpnId {
  1,070 ( 0.00%)          self.root.tables.expn_that_defined.get(self, id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_const_param_default(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> rustc_middle::ty::Const<'tcx> {
      .                   self.root.tables.const_defaults.get(self, id).unwrap().decode((self, tcx))
-- line 1026 ----------------------------------------
-- line 1028 ----------------------------------------
      .           
      .               /// Iterates over all the stability attributes in the given crate.
      .               fn get_lib_features(self, tcx: TyCtxt<'tcx>) -> &'tcx [(Symbol, Option<Symbol>)] {
      .                   tcx.arena.alloc_from_iter(self.root.lib_features.decode(self))
      .               }
      .           
      .               /// Iterates over the language items in the given crate.
      .               fn get_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [(DefId, usize)] {
     15 ( 0.00%)          tcx.arena.alloc_from_iter(
     10 ( 0.00%)              self.root
      .                           .lang_items
      .                           .decode(self)
    508 ( 0.00%)                  .map(|(def_index, index)| (self.local_def_id(def_index), index)),
      .                   )
      .               }
      .           
      .               /// Iterates over the diagnostic items in the given crate.
      .               fn get_diagnostic_items(self) -> DiagnosticItems {
      .                   let mut id_to_name = FxHashMap::default();
     10 ( 0.00%)          let name_to_id = self
      .                       .root
      .                       .diagnostic_items
      .                       .decode(self)
      .                       .map(|(name, def_index)| {
     91 ( 0.00%)                  let id = self.local_def_id(def_index);
     91 ( 0.00%)                  id_to_name.insert(id, name);
      .                           (name, id)
      .                       })
      .                       .collect();
     45 ( 0.00%)          DiagnosticItems { id_to_name, name_to_id }
      .               }
      .           
      .               /// Iterates over all named children of the given module,
      .               /// including both proper items and reexports.
      .               /// Module here is understood in name resolution sense - it can be a `mod` item,
      .               /// or a crate root, or an enum, or a trait.
      .               fn for_each_module_child(
      .                   self,
      .                   id: DefIndex,
      .                   mut callback: impl FnMut(ModChild),
      .                   sess: &Session,
      .               ) {
    156 ( 0.00%)          if let Some(data) = &self.root.proc_macro_data {
      .                       // If we are loading as a proc macro, we want to return
      .                       // the view of this crate as a proc macro crate.
      2 ( 0.00%)              if id == CRATE_DEF_INDEX {
     30 ( 0.00%)                  for def_index in data.macros.decode(self) {
      9 ( 0.00%)                      let raw_macro = self.raw_proc_macro(def_index);
      .                               let res = Res::Def(
      .                                   DefKind::Macro(macro_kind(raw_macro)),
      .                                   self.local_def_id(def_index),
      .                               );
      .                               let ident = self.item_ident(def_index, sess);
      .                               callback(ModChild {
      .                                   ident,
      .                                   res,
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
      .                                   span: ident.span,
      .                               });
      .                           }
      .                       }
      .                       return;
      .                   }
      .           
      .                   // Iterate over all children.
    296 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
    592 ( 0.00%)              for child_index in children.decode((self, sess)) {
  6,870 ( 0.01%)                  if let Some(ident) = self.opt_item_ident(child_index, sess) {
  1,011 ( 0.00%)                      let kind = self.def_kind(child_index);
    674 ( 0.00%)                      if matches!(kind, DefKind::Macro(..)) {
      .                                   // FIXME: Macros are currently encoded twice, once as items and once as
      .                                   // reexports. We ignore the items here and only use the reexports.
      .                                   continue;
      .                               }
      .                               let def_id = self.local_def_id(child_index);
      .                               let res = Res::Def(kind, def_id);
      .                               let vis = self.get_visibility(child_index);
      .                               let span = self.get_span(child_index, sess);
      .           
      .                               callback(ModChild { ident, res, vis, span });
      .           
      .                               // For non-re-export structs and variants add their constructors to children.
      .                               // Re-export lists automatically contain constructors when necessary.
  1,298 ( 0.00%)                      match kind {
      .                                   DefKind::Struct => {
     25 ( 0.00%)                              if let Some((ctor_def_id, ctor_kind)) =
      .                                           self.get_ctor_def_id_and_kind(child_index)
      .                                       {
      .                                           let ctor_res =
      .                                               Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);
      .                                           let vis = self.get_visibility(ctor_def_id.index);
      .                                           callback(ModChild { ident, res: ctor_res, vis, span });
      .                                       }
      .                                   }
      .                                   DefKind::Variant => {
      .                                       // Braced variants, unlike structs, generate unusable names in
      .                                       // value namespace, they are reserved for possible future use.
      .                                       // It's ok to use the variant's id as a ctor id since an
      .                                       // error will be reported on any use of such resolution anyway.
     15 ( 0.00%)                              let (ctor_def_id, ctor_kind) = self
      .                                           .get_ctor_def_id_and_kind(child_index)
      .                                           .unwrap_or((def_id, CtorKind::Fictive));
      .                                       let ctor_res =
      .                                           Res::Def(DefKind::Ctor(CtorOf::Variant, ctor_kind), ctor_def_id);
      .                                       let mut vis = self.get_visibility(ctor_def_id.index);
      5 ( 0.00%)                              if ctor_def_id == def_id && vis.is_public() {
      .                                           // For non-exhaustive variants lower the constructor visibility to
      .                                           // within the crate. We only need this for fictive constructors,
      .                                           // for other constructors correct visibilities
      .                                           // were already encoded in metadata.
      .                                           let mut attrs = self.get_item_attrs(def_id.index, sess);
      .                                           if attrs.any(|item| item.has_name(sym::non_exhaustive)) {
      .                                               let crate_def_id = self.local_def_id(CRATE_DEF_INDEX);
      .                                               vis = ty::Visibility::Restricted(crate_def_id);
-- line 1141 ----------------------------------------
-- line 1144 ----------------------------------------
      .                                       callback(ModChild { ident, res: ctor_res, vis, span });
      .                                   }
      .                                   _ => {}
      .                               }
      .                           }
      .                       }
      .                   }
      .           
    381 ( 0.00%)          match self.kind(id) {
     22 ( 0.00%)              EntryKind::Mod(exports) => {
    588 ( 0.00%)                  for exp in exports.decode((self, sess)) {
      .                               callback(exp);
      .                           }
      .                       }
      .                       EntryKind::Enum(..) | EntryKind::Trait(..) => {}
      .                       _ => bug!("`for_each_module_child` is called on a non-module: {:?}", self.def_kind(id)),
      .                   }
      .               }
      .           
-- line 1162 ----------------------------------------
-- line 1164 ----------------------------------------
      .                   self.root.tables.mir_for_ctfe.get(self, id).is_some()
      .               }
      .           
      .               fn is_item_mir_available(self, id: DefIndex) -> bool {
      .                   self.root.tables.mir.get(self, id).is_some()
      .               }
      .           
      .               fn module_expansion(self, id: DefIndex, sess: &Session) -> ExpnId {
  1,435 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::Mod(_) | EntryKind::Enum(_) | EntryKind::Trait(_) => {
      .                           self.get_expn_that_defined(id, sess)
      .                       }
      .                       _ => panic!("Expected module, found {:?}", self.local_def_id(id)),
      .                   }
      .               }
      .           
      .               fn get_optimized_mir(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
-- line 1180 ----------------------------------------
-- line 1242 ----------------------------------------
      .                           qualif,
      .                           _,
      .                       ) => qualif,
      .                       _ => bug!("mir_const_qualif: unexpected kind"),
      .                   }
      .               }
      .           
      .               fn get_fn_has_self_parameter(self, id: DefIndex) -> bool {
    540 ( 0.00%)          match self.kind(id) {
    432 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).has_self,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn get_associated_item_def_ids(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [DefId] {
    112 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
     48 ( 0.00%)              tcx.arena.alloc_from_iter(
     16 ( 0.00%)                  children.decode((self, tcx.sess)).map(|child_index| self.local_def_id(child_index)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
      .               }
      .           
  1,776 ( 0.00%)      fn get_associated_item(self, id: DefIndex, sess: &Session) -> ty::AssocItem {
  1,036 ( 0.00%)          let def_key = self.def_key(id);
      .                   let parent = self.local_def_id(def_key.parent.unwrap());
      .                   let ident = self.item_ident(id, sess);
      .           
  1,052 ( 0.00%)          let (kind, container, has_self) = match self.kind(id) {
      .                       EntryKind::AssocConst(container, _, _) => (ty::AssocKind::Const, container, false),
    140 ( 0.00%)              EntryKind::AssocFn(data) => {
      .                           let data = data.decode(self);
    980 ( 0.00%)                  (ty::AssocKind::Fn, data.container, data.has_self)
      .                       }
     16 ( 0.00%)              EntryKind::AssocType(container) => (ty::AssocKind::Type, container, false),
      .                       _ => bug!("cannot get associated-item of `{:?}`", def_key),
      .                   };
      .           
  2,664 ( 0.00%)          ty::AssocItem {
      .                       name: ident.name,
      .                       kind,
      .                       vis: self.get_visibility(id),
      .                       defaultness: container.defaultness(),
      .                       def_id: self.local_def_id(id),
      .                       trait_item_def_id: self.get_trait_item_def_id(id),
      .                       container: container.with_def_id(parent),
      .                       fn_has_self_parameter: has_self,
      .                   }
  1,332 ( 0.00%)      }
      .           
      .               fn get_item_variances(self, id: DefIndex) -> impl Iterator<Item = ty::Variance> + 'a {
     40 ( 0.00%)          self.root.tables.variances.get(self, id).unwrap_or_else(Lazy::empty).decode(self)
      .               }
      .           
      .               fn get_ctor_def_id_and_kind(self, node_id: DefIndex) -> Option<(DefId, CtorKind)> {
    534 ( 0.00%)          match self.kind(node_id) {
      .                       EntryKind::Struct(data, _) | EntryKind::Variant(data) => {
    231 ( 0.00%)                  let vdata = data.decode(self);
    111 ( 0.00%)                  vdata.ctor.map(|index| (self.local_def_id(index), vdata.ctor_kind))
      .                       }
      .                       _ => None,
      .                   }
    215 ( 0.00%)      }
      .           
     72 ( 0.00%)      fn get_item_attrs(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = ast::Attribute> + 'a {
    168 ( 0.00%)          self.root
      .                       .tables
      .                       .attributes
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           // Structure and variant constructors don't have any attributes encoded for them,
      .                           // but we assume that someone passing a constructor ID actually wants to look at
      .                           // the attributes on the corresponding struct or variant.
      .                           let def_key = self.def_key(id);
-- line 1320 ----------------------------------------
-- line 1322 ----------------------------------------
      .                           let parent_id = def_key.parent.expect("no parent for a constructor");
      .                           self.root
      .                               .tables
      .                               .attributes
      .                               .get(self, parent_id)
      .                               .expect("no encoded attributes for a structure or variant")
      .                       })
      .                       .decode((self, sess))
     54 ( 0.00%)      }
      .           
      .               fn get_struct_field_names(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = Spanned<Symbol>> + 'a {
    195 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
    450 ( 0.00%)              .map(move |index| respan(self.get_span(index, sess), self.item_ident(index, sess).name))
      .               }
      .           
      .               fn get_struct_field_visibilities(self, id: DefIndex) -> impl Iterator<Item = Visibility> + 'a {
     20 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
      2 ( 0.00%)              .map(move |field_index| self.get_visibility(field_index))
      .               }
      .           
      .               fn get_inherent_implementations_for_type(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> &'tcx [DefId] {
      8 ( 0.00%)          tcx.arena.alloc_from_iter(
     10 ( 0.00%)              self.root
      .                           .tables
      .                           .inherent_impls
      .                           .get(self, id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
    147 ( 0.00%)                  .map(|index| self.local_def_id(index)),
      .                   )
      .               }
      .           
      .               fn get_traits(self) -> impl Iterator<Item = DefId> + 'a {
      .                   self.root.traits.decode(self).map(move |index| self.local_def_id(index))
      .               }
      .           
      .               fn get_trait_impls(self) -> impl Iterator<Item = (DefId, DefId, Option<SimplifiedType>)> + 'a {
-- line 1376 ----------------------------------------
-- line 1380 ----------------------------------------
      .                           index: *trait_index,
      .                       };
      .                       impls.decode(self).map(move |(impl_index, simplified_self_ty)| {
      .                           (trait_def_id, self.local_def_id(impl_index), simplified_self_ty)
      .                       })
      .                   })
      .               }
      .           
    630 ( 0.00%)      fn get_implementations_of_trait(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_def_id: DefId,
      .               ) -> &'tcx [(DefId, Option<SimplifiedType>)] {
     70 ( 0.00%)          if self.trait_impls.is_empty() {
      .                       return &[];
      .                   }
      .           
      .                   // Do a reverse lookup beforehand to avoid touching the crate_num
      .                   // hash map in the loop below.
     56 ( 0.00%)          let key = match self.reverse_translate_def_id(trait_def_id) {
      .                       Some(def_id) => (def_id.krate.as_u32(), def_id.index),
      .                       None => return &[],
      .                   };
      .           
      .                   if let Some(impls) = self.trait_impls.get(&key) {
     64 ( 0.00%)              tcx.arena.alloc_from_iter(
     32 ( 0.00%)                  impls
      .                               .decode(self)
  1,100 ( 0.00%)                      .map(|(idx, simplified_self_ty)| (self.local_def_id(idx), simplified_self_ty)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
    560 ( 0.00%)      }
      .           
      .               fn get_trait_of_item(self, id: DefIndex) -> Option<DefId> {
     32 ( 0.00%)          let def_key = self.def_key(id);
     40 ( 0.00%)          match def_key.disambiguated_data.data {
      .                       DefPathData::TypeNs(..) | DefPathData::ValueNs(..) => (),
      .                       // Not an associated item
      .                       _ => return None,
      .                   }
     72 ( 0.00%)          def_key.parent.and_then(|parent_index| match self.kind(parent_index) {
      .                       EntryKind::Trait(_) | EntryKind::TraitAlias => Some(self.local_def_id(parent_index)),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               fn get_native_libraries(self, sess: &'a Session) -> impl Iterator<Item = NativeLib> + 'a {
     10 ( 0.00%)          self.root.native_libraries.decode((self, sess))
      .               }
      .           
      .               fn get_proc_macro_quoted_span(self, index: usize, sess: &Session) -> Span {
      .                   self.root
      .                       .tables
      .                       .proc_macro_quoted_spans
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing proc macro quoted span: {:?}", index))
-- line 1437 ----------------------------------------
-- line 1450 ----------------------------------------
      .                       self.root.dylib_dependency_formats.decode(self).enumerate().flat_map(|(i, link)| {
      .                           let cnum = CrateNum::new(i + 1);
      .                           link.map(|link| (self.cnum_map[cnum], link))
      .                       }),
      .                   )
      .               }
      .           
      .               fn get_missing_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [lang_items::LangItem] {
     25 ( 0.00%)          tcx.arena.alloc_from_iter(self.root.lang_items_missing.decode(self))
      .               }
      .           
      .               fn get_fn_param_names(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [Ident] {
      .                   let param_names = match self.kind(id) {
      .                       EntryKind::Fn(data) | EntryKind::ForeignFn(data) => data.decode(self).param_names,
      .                       EntryKind::AssocFn(data) => data.decode(self).fn_data.param_names,
      .                       _ => Lazy::empty(),
      .                   };
-- line 1466 ----------------------------------------
-- line 1479 ----------------------------------------
      .                       EntryKind::AnonConst(_, data)
      .                       | EntryKind::Const(_, data)
      .                       | EntryKind::AssocConst(_, _, data) => data.decode(self).0,
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_macro(self, id: DefIndex, sess: &Session) -> MacroDef {
     18 ( 0.00%)          match self.kind(id) {
      3 ( 0.00%)              EntryKind::MacroDef(macro_def) => macro_def.decode((self, sess)),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               // This replicates some of the logic of the crate-local `is_const_fn_raw` query, because we
      .               // don't serialize constness for tuple variant and tuple struct constructors.
      .               fn is_const_fn_raw(self, id: DefIndex) -> bool {
     18 ( 0.00%)          let constness = match self.kind(id) {
      2 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).fn_data.constness,
      6 ( 0.00%)              EntryKind::Fn(data) => data.decode(self).constness,
      .                       EntryKind::ForeignFn(data) => data.decode(self).constness,
      .                       EntryKind::Variant(..) | EntryKind::Struct(..) => hir::Constness::Const,
      .                       _ => hir::Constness::NotConst,
      .                   };
      .                   constness == hir::Constness::Const
      .               }
      .           
      .               fn asyncness(self, id: DefIndex) -> hir::IsAsync {
-- line 1506 ----------------------------------------
-- line 1532 ----------------------------------------
      .               fn generator_kind(self, id: DefIndex) -> Option<hir::GeneratorKind> {
      .                   match self.kind(id) {
      .                       EntryKind::Generator(data) => Some(data),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               fn fn_sig(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {
     80 ( 0.00%)          self.root.tables.fn_sig.get(self, id).unwrap().decode((self, tcx))
      .               }
      .           
      .               #[inline]
 12,831 ( 0.01%)      fn def_key(self, index: DefIndex) -> DefKey {
  3,666 ( 0.00%)          *self
      .                       .def_key_cache
      .                       .lock()
      .                       .entry(index)
  6,760 ( 0.01%)              .or_insert_with(|| self.root.tables.def_keys.get(self, index).unwrap().decode(self))
 14,664 ( 0.01%)      }
      .           
      .               // Returns the path leading to the thing with this `id`.
      .               fn def_path(self, id: DefIndex) -> DefPath {
      .                   debug!("def_path(cnum={:?}, id={:?})", self.cnum, id);
      .                   DefPath::make(self.cnum, id, |parent| self.def_key(parent))
      .               }
      .           
      .               fn def_path_hash_unlocked(
      .                   self,
      .                   index: DefIndex,
      .                   def_path_hashes: &mut FxHashMap<DefIndex, DefPathHash>,
      .               ) -> DefPathHash {
    548 ( 0.00%)          *def_path_hashes.entry(index).or_insert_with(|| {
    265 ( 0.00%)              self.root.tables.def_path_hashes.get(self, index).unwrap().decode(self)
      .                   })
      .               }
      .           
      .               #[inline]
  1,918 ( 0.00%)      fn def_path_hash(self, index: DefIndex) -> DefPathHash {
      .                   let mut def_path_hashes = self.def_path_hash_cache.lock();
      .                   self.def_path_hash_unlocked(index, &mut def_path_hashes)
  2,192 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn def_path_hash_to_def_index(self, hash: DefPathHash) -> DefIndex {
      .                   self.def_path_hash_map.def_path_hash_to_def_index(&hash)
      .               }
      .           
      .               fn expn_hash_to_expn_id(self, sess: &Session, index_guess: u32, hash: ExpnHash) -> ExpnId {
      .                   debug_assert_eq!(ExpnId::from_hash(hash), None);
-- line 1580 ----------------------------------------
-- line 1635 ----------------------------------------
      .               /// Proc macro crates don't currently export spans, so this function does not have
      .               /// to work for them.
      .               fn imported_source_files(self, sess: &Session) -> &'a [ImportedSourceFile] {
      .                   // Translate the virtual `/rustc/$hash` prefix back to a real directory
      .                   // that should hold actual sources, where possible.
      .                   //
      .                   // NOTE: if you update this, you might need to also update bootstrap's code for generating
      .                   // the `rust-src` component in `Src::run` in `src/bootstrap/dist.rs`.
  6,606 ( 0.01%)          let virtual_rust_source_base_dir = option_env!("CFG_VIRTUAL_RUST_SOURCE_BASE_DIR")
      .                       .map(Path::new)
      .                       .filter(|_| {
      .                           // Only spend time on further checks if we have what to translate *to*.
      .                           sess.opts.real_rust_source_base_dir.is_some()
      .                       })
      .                       .filter(|virtual_dir| {
      .                           // Don't translate away `/rustc/$hash` if we're still remapping to it,
      .                           // since that means we're still building `std`/`rustc` that need it,
      .                           // and we don't want the real path to leak into codegen/debuginfo.
      .                           !sess.opts.remap_path_prefix.iter().any(|(_from, to)| to == virtual_dir)
      .                       });
  6,606 ( 0.01%)          let try_to_translate_virtual_to_real = |name: &mut rustc_span::FileName| {
      .                       debug!(
      .                           "try_to_translate_virtual_to_real(name={:?}): \
      .                            virtual_rust_source_base_dir={:?}, real_rust_source_base_dir={:?}",
      .                           name, virtual_rust_source_base_dir, sess.opts.real_rust_source_base_dir,
      .                       );
      .           
  1,575 ( 0.00%)              if let Some(virtual_dir) = virtual_rust_source_base_dir {
      .                           if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                               if let rustc_span::FileName::Real(old_name) = name {
      .                                   if let rustc_span::RealFileName::Remapped { local_path: _, virtual_name } =
      .                                       old_name
      .                                   {
      .                                       if let Ok(rest) = virtual_name.strip_prefix(virtual_dir) {
      .                                           let virtual_name = virtual_name.clone();
      .           
-- line 1670 ----------------------------------------
-- line 1709 ----------------------------------------
      .                                           *old_name = new_name;
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   };
      .           
  6,606 ( 0.01%)          self.cdata.source_map_import_info.get_or_init(|| {
     15 ( 0.00%)              let external_source_map = self.root.source_map.decode(self);
      .           
      .                       external_source_map
      .                           .map(|source_file_to_import| {
      .                               // We can't reuse an existing SourceFile, so allocate a new one
      .                               // containing the information we need.
      .                               let rustc_span::SourceFile {
  6,615 ( 0.01%)                          mut name,
  1,890 ( 0.00%)                          src_hash,
    315 ( 0.00%)                          start_pos,
    630 ( 0.00%)                          end_pos,
  1,575 ( 0.00%)                          mut lines,
  1,575 ( 0.00%)                          mut multibyte_chars,
  1,890 ( 0.00%)                          mut non_narrow_chars,
  1,575 ( 0.00%)                          mut normalized_pos,
  1,890 ( 0.00%)                          name_hash,
      .                                   ..
      .                               } = source_file_to_import;
      .           
      .                               // If this file is under $sysroot/lib/rustlib/src/ but has not been remapped
      .                               // during rust bootstrapping by `remap-debuginfo = true`, and the user
      .                               // wish to simulate that behaviour by -Z simulate-remapped-rust-src-base,
      .                               // then we change `name` to a similar state as if the rust was bootstrapped
      .                               // with `remap-debuginfo = true`.
      .                               // This is useful for testing so that tests about the effects of
      .                               // `try_to_translate_virtual_to_real` don't have to worry about how the
      .                               // compiler is bootstrapped.
    630 ( 0.00%)                      if let Some(virtual_dir) =
      .                                   &sess.opts.debugging_opts.simulate_remapped_rust_src_base
      .                               {
      .                                   if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                                       if let rustc_span::FileName::Real(ref mut old_name) = name {
      .                                           if let rustc_span::RealFileName::LocalPath(local) = old_name {
      .                                               if let Ok(rest) = local.strip_prefix(real_dir) {
      .                                                   *old_name = rustc_span::RealFileName::Remapped {
      .                                                       local_path: None,
-- line 1753 ----------------------------------------
-- line 1767 ----------------------------------------
      .                               let source_length = (end_pos - start_pos).to_usize();
      .           
      .                               // Translate line-start positions and multibyte character
      .                               // position into frame of reference local to file.
      .                               // `SourceMap::new_imported_source_file()` will then translate those
      .                               // coordinates to their new global frame of reference when the
      .                               // offset of the SourceFile is known.
      .                               for pos in &mut lines {
478,390 ( 0.39%)                          *pos = *pos - start_pos;
      .                               }
      .                               for mbc in &mut multibyte_chars {
  1,140 ( 0.00%)                          mbc.pos = mbc.pos - start_pos;
      .                               }
      .                               for swc in &mut non_narrow_chars {
    804 ( 0.00%)                          *swc = *swc - start_pos;
      .                               }
      .                               for np in &mut normalized_pos {
      .                                   np.pos = np.pos - start_pos;
      .                               }
      .           
  5,670 ( 0.00%)                      let local_version = sess.source_map().new_imported_source_file(
  4,095 ( 0.00%)                          name,
  2,205 ( 0.00%)                          src_hash,
      .                                   name_hash,
      .                                   source_length,
    630 ( 0.00%)                          self.cnum,
  1,575 ( 0.00%)                          lines,
  1,890 ( 0.00%)                          multibyte_chars,
  1,575 ( 0.00%)                          non_narrow_chars,
  1,260 ( 0.00%)                          normalized_pos,
      .                                   start_pos,
      .                                   end_pos,
      .                               );
      .                               debug!(
      .                                   "CrateMetaData::imported_source_files alloc \
      .                                    source_file {:?} original (start_pos {:?} end_pos {:?}) \
      .                                    translated (start_pos {:?} end_pos {:?})",
      .                                   local_version.name,
-- line 1804 ----------------------------------------
-- line 1808 ----------------------------------------
      .                                   local_version.end_pos
      .                               );
      .           
      .                               ImportedSourceFile {
      .                                   original_start_pos: start_pos,
      .                                   original_end_pos: end_pos,
      .                                   translated_source_file: local_version,
      .                               }
    945 ( 0.00%)                  })
      .                           .collect()
      .                   })
      .               }
      .           }
      .           
      .           impl CrateMetadata {
     60 ( 0.00%)      crate fn new(
      .                   sess: &Session,
      .                   blob: MetadataBlob,
      .                   root: CrateRoot<'static>,
      .                   raw_proc_macros: Option<&'static [ProcMacro]>,
      .                   cnum: CrateNum,
      .                   cnum_map: CrateNumMap,
      .                   dep_kind: CrateDepKind,
      .                   source: CrateSource,
      .                   private_dep: bool,
      .                   host_hash: Option<Svh>,
      .               ) -> CrateMetadata {
     15 ( 0.00%)          let trait_impls = root
      .                       .impls
      .                       .decode((&blob, sess))
      .                       .map(|trait_impls| (trait_impls.trait_id, trait_impls.impls))
      .                       .collect();
      .                   let alloc_decoding_state =
     15 ( 0.00%)              AllocDecodingState::new(root.interpret_alloc_index.decode(&blob).collect());
      .                   let dependencies = Lock::new(cnum_map.iter().cloned().collect());
      .           
      .                   // Pre-decode the DefPathHash->DefIndex table. This is a cheap operation
      .                   // that does not copy any data. It just does some data verification.
      5 ( 0.00%)          let def_path_hash_map = root.def_path_hash_map.decode(&blob);
      .           
    115 ( 0.00%)          CrateMetadata {
      5 ( 0.00%)              blob,
     15 ( 0.00%)              root,
     20 ( 0.00%)              trait_impls,
      .                       raw_proc_macros,
      .                       source_map_import_info: OnceCell::new(),
     20 ( 0.00%)              def_path_hash_map,
      .                       expn_hash_map: Default::default(),
     35 ( 0.00%)              alloc_decoding_state,
      .                       cnum,
     20 ( 0.00%)              cnum_map,
     25 ( 0.00%)              dependencies,
      .                       dep_kind: Lock::new(dep_kind),
     60 ( 0.00%)              source,
      .                       private_dep,
      .                       host_hash,
      .                       extern_crate: Lock::new(None),
      .                       hygiene_context: Default::default(),
      .                       def_key_cache: Default::default(),
      .                       def_path_hash_cache: Default::default(),
      .                   }
     45 ( 0.00%)      }
      .           
      .               crate fn dependencies(&self) -> LockGuard<'_, Vec<CrateNum>> {
      .                   self.dependencies.borrow()
      .               }
      .           
      .               crate fn add_dependency(&self, cnum: CrateNum) {
      .                   self.dependencies.borrow_mut().push(cnum);
      .               }
      .           
      .               crate fn update_extern_crate(&self, new_extern_crate: ExternCrate) -> bool {
      .                   let mut extern_crate = self.extern_crate.borrow_mut();
      .                   let update = Some(new_extern_crate.rank()) > extern_crate.as_ref().map(ExternCrate::rank);
      .                   if update {
     25 ( 0.00%)              *extern_crate = Some(new_extern_crate);
      .                   }
      .                   update
      .               }
      .           
      .               crate fn source(&self) -> &CrateSource {
     28 ( 0.00%)          &self.source
      .               }
      .           
      .               crate fn dep_kind(&self) -> CrateDepKind {
      .                   *self.dep_kind.lock()
      .               }
      .           
      .               crate fn update_dep_kind(&self, f: impl FnOnce(CrateDepKind) -> CrateDepKind) {
      9 ( 0.00%)          self.dep_kind.with_lock(|dep_kind| *dep_kind = f(*dep_kind))
      .               }
      .           
      .               crate fn panic_strategy(&self) -> PanicStrategy {
      .                   self.root.panic_strategy
      .               }
      .           
      .               crate fn needs_panic_runtime(&self) -> bool {
      .                   self.root.needs_panic_runtime
-- line 1905 ----------------------------------------
-- line 1909 ----------------------------------------
      .                   self.root.panic_runtime
      .               }
      .           
      .               crate fn is_profiler_runtime(&self) -> bool {
      .                   self.root.profiler_runtime
      .               }
      .           
      .               crate fn needs_allocator(&self) -> bool {
      5 ( 0.00%)          self.root.needs_allocator
      .               }
      .           
      .               crate fn has_global_allocator(&self) -> bool {
      .                   self.root.has_global_allocator
      .               }
      .           
      .               crate fn has_default_lib_allocator(&self) -> bool {
      .                   self.root.has_default_lib_allocator
      .               }
      .           
      .               crate fn is_proc_macro_crate(&self) -> bool {
      .                   self.root.is_proc_macro_crate()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
     36 ( 0.00%)          self.root.name
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
      .                   self.root.stable_crate_id
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
      .                   self.root.hash
      .               }
      .           
      .               fn num_def_ids(&self) -> usize {
      .                   self.root.tables.def_keys.size()
      .               }
      .           
      .               fn local_def_id(&self, index: DefIndex) -> DefId {
  3,672 ( 0.00%)          DefId { krate: self.cnum, index }
      .               }
      .           
      .               // Translate a DefId from the current compilation environment to a DefId
      .               // for an external crate.
      .               fn reverse_translate_def_id(&self, did: DefId) -> Option<DefId> {
      .                   for (local, &global) in self.cnum_map.iter_enumerated() {
     70 ( 0.00%)              if global == did.krate {
      .                           return Some(DefId { krate: local, index: did.index });
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .           }
      .           
      .           // Cannot be implemented on 'ProcMacro', as libproc_macro
      .           // does not depend on librustc_ast
      .           fn macro_kind(raw: &ProcMacro) -> MacroKind {
      9 ( 0.00%)      match raw {
      .                   ProcMacro::CustomDerive { .. } => MacroKind::Derive,
      .                   ProcMacro::Attr { .. } => MacroKind::Attr,
      .                   ProcMacro::Bang { .. } => MacroKind::Bang,
      .               }
      .           }

 85,889 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir              

-- line 27 ----------------------------------------
     .           impl CacheEntry {
     .               #[inline]
     .               fn update(
     .                   &mut self,
     .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
     .                   pos: BytePos,
     .                   time_stamp: usize,
     .               ) {
   366 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
    47 ( 0.00%)              self.file = file;
    28 ( 0.00%)              self.file_index = file_idx;
     .                   }
     .           
   275 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
     .                   let line_bounds = self.file.line_bounds(line_index);
   600 ( 0.00%)          self.line_number = line_index + 1;
   878 ( 0.00%)          self.line = line_bounds;
     .                   self.touch(time_stamp);
     .               }
     .           
     .               #[inline]
     .               fn touch(&mut self, time_stamp: usize) {
 4,074 ( 0.00%)          self.time_stamp = time_stamp;
     .               }
     .           }
     .           
     .           #[derive(Clone)]
     .           pub struct CachingSourceMapView<'sm> {
     .               source_map: &'sm SourceMap,
     .               line_cache: [CacheEntry; 3],
     .               time_stamp: usize,
     .           }
     .           
     .           impl<'sm> CachingSourceMapView<'sm> {
   164 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
     .                   let files = source_map.files();
    82 ( 0.00%)          let first_file = files[0].clone();
     .                   let entry = CacheEntry {
     .                       time_stamp: 0,
     .                       line_number: 0,
     .                       line: BytePos(0)..BytePos(0),
     .                       file: first_file,
     .                       file_index: 0,
     .                   };
     .           
   410 ( 0.00%)          CachingSourceMapView {
     .                       source_map,
   574 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
     .                       time_stamp: 0,
     .                   }
   328 ( 0.00%)      }
     .           
     .               pub fn byte_pos_to_line_and_col(
     .                   &mut self,
     .                   pos: BytePos,
     .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
     .                   self.time_stamp += 1;
     .           
     .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
     .                   };
     .           
     .                   let cache_entry = &mut self.line_cache[oldest];
     .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
     .           
     .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
     .               }
     .           
15,232 ( 0.01%)      pub fn span_data_to_lines_and_cols(
     .                   &mut self,
     .                   span_data: &SpanData,
     .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
 8,704 ( 0.01%)          self.time_stamp += 1;
     .           
     .                   // Check if lo and hi are in the cached lines.
 2,176 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
 2,176 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
     .           
 3,796 ( 0.00%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
     .                       // Cache hit for span lo and hi. Check if they belong to the same file.
     .                       let result = {
 3,796 ( 0.00%)                  let lo = &self.line_cache[lo_cache_idx as usize];
     .                           let hi = &self.line_cache[hi_cache_idx as usize];
     .           
11,388 ( 0.01%)                  if lo.file_index != hi.file_index {
     .                               return None;
     .                           }
     .           
     .                           (
 3,796 ( 0.00%)                      lo.file.clone(),
     .                               lo.line_number,
     .                               span_data.lo - lo.line.start,
 1,898 ( 0.00%)                      hi.line_number,
     .                               span_data.hi - hi.line.start,
     .                           )
     .                       };
     .           
 1,898 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
 1,898 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
     .           
 7,592 ( 0.01%)              return Some(result);
     .                   }
     .           
     .                   // No cache hit or cache hit for only one of span lo and hi.
   556 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
     .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
     .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
     .                   } else {
     .                       self.oldest_cache_entry_index()
     .                   };
     .           
     .                   // If the entry doesn't point to the correct file, get the new file and index.
     .                   // Return early if the file containing beginning of span doesn't contain end of span.
 2,224 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
    15 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
    18 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
     .                           return None;
     .                       }
     .           
    12 ( 0.00%)              Some(new_file_and_idx)
     .                   } else {
     .                       let file = &self.line_cache[oldest].file;
   825 ( 0.00%)              if !file_contains(&file, span_data.hi) {
     .                           return None;
     .                       }
     .           
   825 ( 0.00%)              None
     .                   };
     .           
     .                   // Update the cache entries.
 1,390 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
     .                       // Oldest cache entry is for span_data.lo line.
     .                       (-1, -1) => {
     .                           let lo = &mut self.line_cache[oldest];
     .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
     .           
   702 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
     .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
     .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
     .                               let hi = &mut self.line_cache[next_oldest];
     .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
     .                               (oldest, next_oldest)
     .                           } else {
     .                               (oldest, oldest)
     .                           }
-- line 190 ----------------------------------------
-- line 195 ----------------------------------------
     .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
     .                           let hi = &mut self.line_cache[hi_cache_idx as usize];
     .                           hi.touch(self.time_stamp);
     .                           (oldest, hi_cache_idx as usize)
     .                       }
     .                       // Oldest cache entry is for span_data.hi line.
     .                       (_, -1) => {
     .                           let hi = &mut self.line_cache[oldest];
    44 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
    88 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
   176 ( 0.00%)                  lo.touch(self.time_stamp);
     .                           (lo_cache_idx as usize, oldest)
     .                       }
     .                       _ => {
     .                           panic!();
     .                       }
     .                   };
     .           
     .                   let lo = &self.line_cache[lo_idx];
     .                   let hi = &self.line_cache[hi_idx];
     .           
     .                   // Span lo and hi may equal line end when last line doesn't
     .                   // end in newline, hence the inclusive upper bounds below.
   556 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
   278 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
   556 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
   278 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
 1,390 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
   834 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
   834 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
     .           
   834 ( 0.00%)          Some((
   278 ( 0.00%)              lo.file.clone(),
     .                       lo.line_number,
     .                       span_data.lo - lo.line.start,
   278 ( 0.00%)              hi.line_number,
     .                       span_data.hi - hi.line.start,
     .                   ))
19,584 ( 0.02%)      }
     .           
     .               fn cache_entry_index(&self, pos: BytePos) -> isize {
     .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
20,710 ( 0.02%)              if cache_entry.line.contains(&pos) {
     .                           return idx as isize;
     .                       }
     .                   }
     .           
     .                   -1
     .               }
     .           
     .               fn oldest_cache_entry_index(&self) -> usize {
     .                   let mut oldest = 0;
     .           
     .                   for idx in 1..self.line_cache.len() {
 1,404 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
     .                           oldest = idx;
     .                       }
     .                   }
     .           
     .                   oldest
     .               }
     .           
     .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
     .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
     .           
     .                   for idx in 0..self.line_cache.len() {
   403 ( 0.00%)              if idx != avoid_idx
   211 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
     .                       {
     .                           oldest = idx;
     .                       }
     .                   }
     .           
     .                   oldest
     .               }
     .           
    15 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
     3 ( 0.00%)          if !self.source_map.files().is_empty() {
     6 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
     .                       let file = &self.source_map.files()[file_idx];
     .           
    24 ( 0.00%)              if file_contains(file, pos) {
     .                           return Some((file.clone(), file_idx));
     .                       }
     .                   }
     .           
     .                   None
    15 ( 0.00%)      }
     .           }
     .           
     .           #[inline]
     .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
     .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
     .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
     .               // purposes of converting a byte position to a line and column number, we can't come up with a
     .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

27,025 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir              

-- line 5 ----------------------------------------
     .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
     .           unsafe impl GlobalAlloc for System {
     .               #[inline]
     .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
     .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
     .                   // So only rely on MIN_ALIGN if size >= align.
     .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
     .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
91,072 ( 0.07%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
68,304 ( 0.06%)              libc::malloc(layout.size()) as *mut u8
     .                   } else {
     .                       #[cfg(target_os = "macos")]
     .                       {
     .                           if layout.align() > (1 << 31) {
     .                               return ptr::null_mut();
     .                           }
     .                       }
     .                       aligned_malloc(&layout)
     .                   }
     .               }
     .           
     .               #[inline]
     .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
     .                   // See the comment above in `alloc` for why this check looks the way it does.
 2,092 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
 3,138 ( 0.00%)              libc::calloc(layout.size(), 1) as *mut u8
     .                   } else {
     .                       let ptr = self.alloc(layout);
     .                       if !ptr.is_null() {
     .                           ptr::write_bytes(ptr, 0, layout.size());
     .                       }
     .                       ptr
     .                   }
     .               }
     .           
     .               #[inline]
     .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
23,279 ( 0.02%)          libc::free(ptr as *mut libc::c_void)
     .               }
     .           
     .               #[inline]
     .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
 7,312 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
14,624 ( 0.01%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
     .                   } else {
     .                       realloc_fallback(self, ptr, layout, new_size)
     .                   }
     .               }
     .           }
     .           
     .           cfg_if::cfg_if! {
     .               if #[cfg(any(
-- line 56 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir               

-- line 186 ----------------------------------------
      .           /// // use the values stored in map
      .           /// ```
      .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
      .               pub(crate) hash_builder: S,
      .               pub(crate) table: RawTable<(K, V), A>,
      .           }
      .           
      .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
     24 ( 0.00%)      fn clone(&self) -> Self {
     63 ( 0.00%)          HashMap {
      .                       hash_builder: self.hash_builder.clone(),
     11 ( 0.00%)              table: self.table.clone(),
      .                   }
     27 ( 0.00%)      }
      .           
      .               fn clone_from(&mut self, source: &Self) {
      .                   self.table.clone_from(&source.table);
      .           
      .                   // Update hash_builder only if we successfully cloned all elements.
      .                   self.hash_builder.clone_from(&source.hash_builder);
      .               }
      .           }
-- line 207 ----------------------------------------
-- line 210 ----------------------------------------
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash,
      .               S: BuildHasher,
      .           {
  4,290 ( 0.00%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
      .           }
      .           
      .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: ?Sized + Eq,
      .           {
  7,151 ( 0.01%)      move |x| k.eq(x.0.borrow())
      .           }
      .           
      .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: ?Sized + Eq,
      .           {
  5,719 ( 0.00%)      move |x| k.eq(x.borrow())
      .           }
      .           
      .           #[cfg(not(feature = "nightly"))]
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
      .               use core::hash::Hasher;
      .               let mut state = hash_builder.build_hasher();
      .               val.hash(&mut state);
      .               state.finish()
      .           }
      .           
      .           #[cfg(feature = "nightly")]
      .           #[cfg_attr(feature = "inline-more", inline)]
      6 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash + ?Sized,
      .               S: BuildHasher,
      .           {
     51 ( 0.00%)      hash_builder.hash_one(val)
     12 ( 0.00%)  }
      .           
      .           #[cfg(not(feature = "nightly"))]
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
      .           where
      .               K: Hash,
      .               S: BuildHasher,
      .           {
-- line 274 ----------------------------------------
-- line 280 ----------------------------------------
      .           
      .           #[cfg(feature = "nightly")]
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
      .           where
      .               K: Hash,
      .               S: BuildHasher,
      .           {
  1,059 ( 0.00%)      hash_builder.hash_one(val)
      .           }
      .           
      .           #[cfg(feature = "ahash")]
      .           impl<K, V> HashMap<K, V, DefaultHashBuilder> {
      .               /// Creates an empty `HashMap`.
      .               ///
      .               /// The hash map is initially created with a capacity of 0, so it will not allocate until it
      .               /// is first inserted into.
-- line 296 ----------------------------------------
-- line 367 ----------------------------------------
      .               /// let s = DefaultHashBuilder::default();
      .               /// let mut map = HashMap::with_hasher(s);
      .               /// map.insert(1, 2);
      .               /// ```
      .               ///
      .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub const fn with_hasher(hash_builder: S) -> Self {
  4,339 ( 0.00%)          Self {
      .                       hash_builder,
      .                       table: RawTable::new(),
      .                   }
      .               }
      .           
      .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
      .               /// to hash the keys.
      .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
      .               /// use hashbrown::hash_map::DefaultHashBuilder;
      .               ///
      .               /// let s = DefaultHashBuilder::default();
      .               /// let mut map = HashMap::with_hasher(s);
      .               /// map.insert(1, 2);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
     13 ( 0.00%)          Self {
      .                       hash_builder,
      .                       table: RawTable::new_in(alloc),
      .                   }
      .               }
      .           
      .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
      .               /// to hash the keys. It will be allocated with the given allocator.
      .               ///
-- line 453 ----------------------------------------
-- line 663 ----------------------------------------
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// assert_eq!(a.len(), 0);
      .               /// a.insert(1, "a");
      .               /// assert_eq!(a.len(), 1);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn len(&self) -> usize {
    440 ( 0.00%)          self.table.len()
      .               }
      .           
      .               /// Returns `true` if the map contains no elements.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// assert!(a.is_empty());
      .               /// a.insert(1, "a");
      .               /// assert!(!a.is_empty());
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn is_empty(&self) -> bool {
  1,454 ( 0.00%)          self.len() == 0
      .               }
      .           
      .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
      .               /// allocated memory for reuse.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// a.insert(1, "a");
      .               /// a.clear();
      .               /// assert!(a.is_empty());
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      6 ( 0.00%)      pub fn clear(&mut self) {
      .                   self.table.clear();
      6 ( 0.00%)      }
      .           
      .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
      .               /// The map cannot be used after calling this.
      .               /// The iterator element type is `K`.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
      .               /// }
      .               ///
      .               /// assert_eq!(letters[&'s'], 2);
      .               /// assert_eq!(letters[&'t'], 3);
      .               /// assert_eq!(letters[&'u'], 1);
      .               /// assert_eq!(letters.get(&'y'), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
     44 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
      .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
      .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
      .                       Entry::Occupied(OccupiedEntry {
      .                           hash,
      .                           key: Some(key),
      .                           elem,
      .                           table: self,
      .                       })
      .                   } else {
     55 ( 0.00%)              Entry::Vacant(VacantEntry {
      .                           hash,
      .                           key,
      .                           table: self,
      .                       })
      .                   }
     55 ( 0.00%)      }
      .           
      .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
      .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
      .               /// ```
      .               #[inline]
      .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
 10,314 ( 0.01%)          match self.get_inner(k) {
      .                       Some(&(_, ref v)) => Some(v),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Returns the key-value pair corresponding to the supplied key.
      .               ///
      .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
 22,337 ( 0.02%)          if self.table.is_empty() {
      .                       None
      .                   } else {
      3 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
      .                       self.table.get(hash, equivalent_key(k))
      .                   }
      .               }
      .           
      .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
      .               ///
      .               /// The supplied key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// assert_eq!(map.contains_key(&1), true);
      .               /// assert_eq!(map.contains_key(&2), false);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
  6,314 ( 0.01%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   self.get_inner(k).is_some()
  8,580 ( 0.01%)      }
      .           
      .               /// Returns a mutable reference to the value corresponding to the key.
      .               ///
      .               /// The key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
      .               ///
      .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// if let Some(x) = map.get_mut(&1) {
      .               ///     *x = "b";
      .               /// }
      .               /// assert_eq!(map[&1], "b");
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
     11 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
     33 ( 0.00%)          match self.get_inner_mut(k) {
      .                       Some(&mut (_, ref mut v)) => Some(v),
      .                       None => None,
      .                   }
     22 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
     11 ( 0.00%)          if self.table.is_empty() {
      .                       None
      .                   } else {
      .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
      .                       self.table.get_mut(hash, equivalent_key(k))
      .                   }
      .               }
      .           
      .               /// Attempts to get mutable references to `N` values in the map at once.
-- line 1219 ----------------------------------------
-- line 1495 ----------------------------------------
      .               /// assert_eq!(map.insert(37, "a"), None);
      .               /// assert_eq!(map.is_empty(), false);
      .               ///
      .               /// map.insert(37, "b");
      .               /// assert_eq!(map.insert(37, "c"), Some("b"));
      .               /// assert_eq!(map[&37], "c");
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
146,216 ( 0.12%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
      .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
     13 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
      .                       Some(mem::replace(item, v))
      .                   } else {
 87,219 ( 0.07%)              self.table
 79,905 ( 0.07%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
  6,296 ( 0.01%)              None
      .                   }
132,648 ( 0.11%)      }
      .           
      .               /// Insert a key-value pair into the map without checking
      .               /// if the key already exists in the map.
      .               ///
      .               /// Returns a reference to the key and value just inserted.
      .               ///
      .               /// This operation is safe if a key does not exist in the map.
      .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// assert_eq!(map.remove(&1), Some("a"));
      .               /// assert_eq!(map.remove(&1), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
    882 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
 34,663 ( 0.03%)          match self.remove_entry(k) {
    280 ( 0.00%)              Some((_, v)) => Some(v),
    958 ( 0.00%)              None => None,
      .                   }
  1,962 ( 0.00%)      }
      .           
      .               /// Removes a key from the map, returning the stored key and value if the
      .               /// key was previously in the map.
      .               ///
      .               /// The key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
      .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
  8,401 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
      .               }
      .           }
      .           
      .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
      .               /// Creates a raw entry builder for the HashMap.
      .               ///
      .               /// Raw entries provide the lowest level of control for searching and
      .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2209 ----------------------------------------
      .               /// Creates a `RawEntryMut` from the given key and its hash.
      .               #[inline]
      .               #[allow(clippy::wrong_self_convention)]
      .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Eq,
      .               {
 35,710 ( 0.03%)          self.from_hash(hash, equivalent(k))
      .               }
      .           }
      .           
      .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
      .               /// Creates a `RawEntryMut` from the given hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
 89,286 ( 0.07%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   for<'b> F: FnMut(&'b K) -> bool,
      .               {
      .                   self.search(hash, is_match)
 97,209 ( 0.08%)      }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   for<'b> F: FnMut(&'b K) -> bool,
      .               {
  9,144 ( 0.01%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
 46,264 ( 0.04%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
      .                           elem,
      .                           table: &mut self.map.table,
      .                           hash_builder: &self.map.hash_builder,
      .                       }),
 12,445 ( 0.01%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
      .                           table: &mut self.map.table,
      .                           hash_builder: &self.map.hash_builder,
      .                       }),
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
      .               {
      .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
      .                   self.from_key_hashed_nocheck(hash, k)
      .               }
      .           
      .               /// Access an entry by a key and its hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
 26,112 ( 0.02%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Eq,
      .               {
 36,675 ( 0.03%)          self.from_hash(hash, equivalent(k))
 49,782 ( 0.04%)      }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
      .               where
      .                   F: FnMut(&K) -> bool,
      .               {
 50,993 ( 0.04%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
      .                       Some(&(ref key, ref value)) => Some((key, value)),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Access an entry by hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
      .               /// and returns a mutable reference to it.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::shadow_unrelated)]
      .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
      .               where
      .                   K: Hash,
      .                   S: BuildHasher,
      .               {
 20,021 ( 0.02%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
      .                       hash,
      .                       (key, value),
      .                       make_hasher::<K, _, V, S>(self.hash_builder),
      .                   );
      .                   (k, v)
      .               }
      .           
      .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
      .               /// map.insert("a", 1);
      .               /// map.insert("b", 2);
      .               /// map.insert("c", 3);
      .               ///
      .               /// // Not possible with .iter()
      .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
     70 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
  1,541 ( 0.00%)          IntoIter {
  1,048 ( 0.00%)              inner: self.table.into_iter(),
      .                   }
    210 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
      .               type Item = (&'a K, &'a V);
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
  2,997 ( 0.00%)          match self.inner.next() {
      .                       Some(x) => unsafe {
      .                           let r = x.as_ref();
     31 ( 0.00%)                  Some((&r.0, &r.1))
      .                       },
      .                       None => None,
      .                   }
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
-- line 3006 ----------------------------------------
-- line 3051 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
      .               type Item = (K, V);
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<(K, V)> {
     70 ( 0.00%)          self.inner.next()
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
      .                   f.debug_list().entries(self.iter()).finish()
      .               }
      .           }
      .           
      .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
      .               type Item = &'a K;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      5 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
      .                   match self.inner.next() {
      .                       Some((k, _)) => Some(k),
      .                       None => None,
      .                   }
     10 ( 0.00%)      }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 4557 ----------------------------------------
      .           /// keys with new values returned from the iterator.
      .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
      .           where
      .               K: Eq + Hash,
      .               S: BuildHasher,
      .               A: Allocator + Clone,
      .           {
      .               #[cfg_attr(feature = "inline-more", inline)]
  1,298 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
      .                   // Keys may be already present or show multiple times in the iterator.
      .                   // Reserve the entire hint lower bound if the map is empty.
      .                   // Otherwise reserve half the hint (rounded up), so the map
      .                   // will only resize twice in the worst case.
  1,216 ( 0.00%)          let iter = iter.into_iter();
    407 ( 0.00%)          let reserve = if self.is_empty() {
      .                       iter.size_hint().0
      .                   } else {
      3 ( 0.00%)              (iter.size_hint().0 + 1) / 2
      .                   };
      .                   self.reserve(reserve);
      .                   iter.for_each(move |(k, v)| {
 13,083 ( 0.01%)              self.insert(k, v);
      .                   });
    651 ( 0.00%)      }
      .           
      .               #[inline]
      .               #[cfg(feature = "nightly")]
      .               fn extend_one(&mut self, (k, v): (K, V)) {
      .                   self.insert(k, v);
      .               }
      .           
      .               #[inline]
-- line 4588 ----------------------------------------

 46,046 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 70 ----------------------------------------
        .           
        .                   impl<'a, T> $name<'a, T> {
        .                       // Helper function for creating a slice from the iterator.
        .                       #[inline(always)]
        .                       fn make_slice(&self) -> &'a [T] {
        .                           // SAFETY: the iterator was created from a slice with pointer
        .                           // `self.ptr` and length `len!(self)`. This guarantees that all
        .                           // the prerequisites for `from_raw_parts` are fulfilled.
    2,109 ( 0.00%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
        .                       }
        .           
        .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
        .                       // returning the old start.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
        .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
    1,254 ( 0.00%)                      let old = self.ptr.as_ptr();
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
   18,950 ( 0.02%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
      209 ( 0.00%)                      old
        .                           }
      418 ( 0.00%)              }
        .           
        .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
        .                       // returning the new end.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
        .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
        .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
       33 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
        8 ( 0.00%)                      self.end
        .                           }
        8 ( 0.00%)              }
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<T> ExactSizeIterator for $name<'_, T> {
        .                       #[inline(always)]
        .                       fn len(&self) -> usize {
    8,911 ( 0.01%)                  len!(self)
       64 ( 0.00%)              }
        .           
        .                       #[inline(always)]
        .                       fn is_empty(&self) -> bool {
        .                           is_empty!(self)
        .                       }
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<'a, T> Iterator for $name<'a, T> {
        .                       type Item = $elem;
        .           
        .                       #[inline]
      777 ( 0.00%)              fn next(&mut self) -> Option<$elem> {
        .                           // could be implemented with slices, but this avoids bounds checks
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer
        .                           // must be non-null, and slices over non-ZSTs must also have a
        .                           // non-null end pointer. The call to `next_unchecked!` is safe
        .                           // since we check if the iterator is empty first.
        .                           unsafe {
    5,671 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
    1,295 ( 0.00%)                      if mem::size_of::<T>() != 0 {
    2,608 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
2,103,619 ( 1.71%)                      if is_empty!(self) {
       50 ( 0.00%)                          None
        .                               } else {
      418 ( 0.00%)                          Some(next_unchecked!(self))
        .                               }
        .                           }
      777 ( 0.00%)              }
        .           
        .                       #[inline]
        .                       fn size_hint(&self) -> (usize, Option<usize>) {
   15,647 ( 0.01%)                  let exact = len!(self);
        .                           (exact, Some(exact))
        .                       }
        .           
        .                       #[inline]
        .                       fn count(self) -> usize {
        .                           len!(self)
        .                       }
        .           
        .                       #[inline]
        .                       fn nth(&mut self, n: usize) -> Option<$elem> {
      393 ( 0.00%)                  if n >= len!(self) {
        .                               // This iterator is now empty.
        .                               if mem::size_of::<T>() == 0 {
        .                                   // We have to do it this way as `ptr` may never be 0, but `end`
        .                                   // could be (due to wrapping).
        .                                   self.end = self.ptr.as_ptr();
        .                               } else {
        .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
        .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
        .                       // faster to compile.
        .                       #[inline]
        .                       fn for_each<F>(mut self, mut f: F)
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item),
        .                       {
        .                           while let Some(x) = self.next() {
       55 ( 0.00%)                      f(x);
        .                           }
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn all<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
       18 ( 0.00%)                  while let Some(x) = self.next() {
    1,306 ( 0.00%)                      if !f(x) {
        .                                   return false;
        .                               }
        .                           }
        .                           true
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
       56 ( 0.00%)              fn any<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
    5,161 ( 0.00%)                  while let Some(x) = self.next() {
   23,028 ( 0.02%)                      if f(x) {
        .                                   return true;
        .                               }
        .                           }
        .                           false
       56 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        5 ( 0.00%)              fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
        .                       where
        .                           Self: Sized,
        .                           P: FnMut(&Self::Item) -> bool,
        .                       {
      479 ( 0.00%)                  while let Some(x) = self.next() {
    2,399 ( 0.00%)                      if predicate(&x) {
        .                                   return Some(x);
        .                               }
        .                           }
        1 ( 0.00%)                  None
       99 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> Option<B>,
        .                       {
    1,370 ( 0.00%)                  while let Some(x) = self.next() {
    4,700 ( 0.00%)                      if let Some(y) = f(x) {
      491 ( 0.00%)                          return Some(y);
        .                               }
        .                           }
        .                           None
      315 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       #[rustc_inherit_overflow_checks]
        .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           Self: Sized,
        .                           P: FnMut(Self::Item) -> bool,
        .                       {
        .                           let n = len!(self);
        .                           let mut i = 0;
        .                           while let Some(x) = self.next() {
    8,092 ( 0.01%)                      if predicate(x) {
        .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
        .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                               i += 1;
        .                           }
        .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           P: FnMut(Self::Item) -> bool,
        .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
        .                       {
        .                           let n = len!(self);
        .                           let mut i = n;
      602 ( 0.00%)                  while let Some(x) = self.next_back() {
    9,084 ( 0.01%)                      i -= 1;
    8,458 ( 0.01%)                      if predicate(x) {
        .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
        .                                   // and is only decreasing.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                           }
        .                           None
        .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
        .                           // the returned references is guaranteed to refer to an element
        .                           // of the slice and thus guaranteed to be valid.
        .                           //
        .                           // Also note that the caller also guarantees that we're never
        .                           // called with the same index again, and that no other methods
        .                           // that will access this subslice are called, so it is valid
        .                           // for the returned reference to be mutable in the case of
        .                           // `IterMut`
    1,049 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
        .                       }
        .           
        .                       $($extra)*
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
        .                       #[inline]
       12 ( 0.00%)              fn next_back(&mut self) -> Option<$elem> {
        .                           // could be implemented with slices, but this avoids bounds checks
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
        .                           // and slices over non-ZSTs must also have a non-null end pointer.
        .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
        .                           // empty first.
        .                           unsafe {
       16 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
       20 ( 0.00%)                      if mem::size_of::<T>() != 0 {
       12 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
   14,273 ( 0.01%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
        8 ( 0.00%)                          Some(next_back_unchecked!(self))
        .                               }
        .                           }
       12 ( 0.00%)              }
        .           
        .                       #[inline]
        .                       fn nth_back(&mut self, n: usize) -> Option<$elem> {
        .                           if n >= len!(self) {
        .                               // This iterator is now empty.
        .                               self.end = self.ptr.as_ptr();
        .                               return None;
        .                           }
-- line 375 ----------------------------------------

  156,476 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs
--------------------------------------------------------------------------------
Ir               

-- line 72 ----------------------------------------
      .                   fn deref(&self) -> &Self::Target {
      .                       &self.0
      .                   }
      .               }
      .           
      .               impl<T> !DerefMut for MonotonicVec<T> {}
      .           }
      .           
    854 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, Copy, HashStable_Generic)]
      .           pub struct Spanned<T> {
      .               pub node: T,
      .               pub span: Span,
      .           }
      .           
      .           pub fn respan<T>(sp: Span, t: T) -> Spanned<T> {
    323 ( 0.00%)      Spanned { node: t, span: sp }
    257 ( 0.00%)  }
      .           
      .           pub fn dummy_spanned<T>(t: T) -> Spanned<T> {
      .               respan(DUMMY_SP, t)
      .           }
      .           
      .           // _____________________________________________________________________________
      .           // SourceFile, MultiByteChar, FileName, FileLines
      .           //
-- line 96 ----------------------------------------
-- line 107 ----------------------------------------
      .           /// A FileLoader that uses std::fs to load real files.
      .           pub struct RealFileLoader;
      .           
      .           impl FileLoader for RealFileLoader {
      .               fn file_exists(&self, path: &Path) -> bool {
      .                   path.exists()
      .               }
      .           
      2 ( 0.00%)      fn read_file(&self, path: &Path) -> io::Result<String> {
      .                   fs::read_to_string(path)
      3 ( 0.00%)      }
      .           }
      .           
      .           /// This is a [SourceFile] identifier that is used to correlate source files between
      .           /// subsequent compilation sessions (which is something we need to do during
      .           /// incremental compilation).
      .           ///
      .           /// The [StableSourceFileId] also contains the CrateNum of the crate the source
      .           /// file was originally parsed for. This way we get two separate entries in
-- line 125 ----------------------------------------
-- line 128 ----------------------------------------
      .           /// at the point where we discover that there's a local use of the file in
      .           /// addition to the upstream one, we might already have made decisions based on
      .           /// the assumption that it's an upstream file. Treating the two files as
      .           /// different has no real downsides.
      .           #[derive(Copy, Clone, PartialEq, Eq, Hash, Encodable, Decodable, Debug)]
      .           pub struct StableSourceFileId {
      .               // A hash of the source file's FileName. This is hash so that it's size
      .               // is more predictable than if we included the actual FileName value.
     31 ( 0.00%)      pub file_name_hash: u64,
      .           
      .               // The CrateNum of the crate this source file was originally parsed for.
      .               // We cannot include this information in the hash because at the time
      .               // of hashing we don't have the context to map from the CrateNum's numeric
      .               // value to a StableCrateId.
      .               pub cnum: CrateNum,
      .           }
      .           
      .           // FIXME: we need a more globally consistent approach to the problem solved by
      .           // StableSourceFileId, perhaps built atop source_file.name_hash.
      .           impl StableSourceFileId {
      .               pub fn new(source_file: &SourceFile) -> StableSourceFileId {
    630 ( 0.00%)          StableSourceFileId::new_from_name(&source_file.name, source_file.cnum)
      .               }
      .           
  1,580 ( 0.00%)      fn new_from_name(name: &FileName, cnum: CrateNum) -> StableSourceFileId {
      .                   let mut hasher = StableHasher::new();
    316 ( 0.00%)          name.hash(&mut hasher);
      .                   StableSourceFileId { file_name_hash: hasher.finish(), cnum }
  1,896 ( 0.00%)      }
      .           }
      .           
      .           // _____________________________________________________________________________
      .           // SourceMap
      .           //
      .           
      .           #[derive(Default)]
      .           pub(super) struct SourceMapFiles {
-- line 164 ----------------------------------------
-- line 184 ----------------------------------------
      .               pub fn new(path_mapping: FilePathMapping) -> SourceMap {
      .                   Self::with_file_loader_and_hash_kind(
      .                       Box::new(RealFileLoader),
      .                       path_mapping,
      .                       SourceFileHashAlgorithm::Md5,
      .                   )
      .               }
      .           
      1 ( 0.00%)      pub fn with_file_loader_and_hash_kind(
      .                   file_loader: Box<dyn FileLoader + Sync + Send>,
      .                   path_mapping: FilePathMapping,
      .                   hash_kind: SourceFileHashAlgorithm,
      .               ) -> SourceMap {
      5 ( 0.00%)          SourceMap {
      .                       used_address_space: AtomicU32::new(0),
      .                       files: Default::default(),
      .                       file_loader,
      4 ( 0.00%)              path_mapping,
      .                       hash_kind,
      .                   }
      1 ( 0.00%)      }
      .           
      .               pub fn path_mapping(&self) -> &FilePathMapping {
      3 ( 0.00%)          &self.path_mapping
      3 ( 0.00%)      }
      .           
      .               pub fn file_exists(&self, path: &Path) -> bool {
      .                   self.file_loader.file_exists(path)
      .               }
      .           
     11 ( 0.00%)      pub fn load_file(&self, path: &Path) -> io::Result<Lrc<SourceFile>> {
      4 ( 0.00%)          let src = self.file_loader.read_file(path)?;
      .                   let filename = path.to_owned().into();
     18 ( 0.00%)          Ok(self.new_source_file(filename, src))
      9 ( 0.00%)      }
      .           
      .               /// Loads source file as a binary blob.
      .               ///
      .               /// Unlike `load_file`, guarantees that no normalization like BOM-removal
      .               /// takes place.
      .               pub fn load_binary_file(&self, path: &Path) -> io::Result<Vec<u8>> {
      .                   // Ideally, this should use `self.file_loader`, but it can't
      .                   // deal with binary files yet.
-- line 226 ----------------------------------------
-- line 233 ----------------------------------------
      .                   // empty string.
      .                   let text = std::str::from_utf8(&bytes).unwrap_or("").to_string();
      .                   self.new_source_file(path.to_owned().into(), text);
      .                   Ok(bytes)
      .               }
      .           
      .               // By returning a `MonotonicVec`, we ensure that consumers cannot invalidate
      .               // any existing indices pointing into `files`.
      9 ( 0.00%)      pub fn files(&self) -> MappedReadGuard<'_, monotonic::MonotonicVec<Lrc<SourceFile>>> {
      .                   ReadGuard::map(self.files.borrow(), |files| &files.source_files)
     27 ( 0.00%)      }
      .           
      4 ( 0.00%)      pub fn source_file_by_stable_id(
      .                   &self,
      .                   stable_id: StableSourceFileId,
      .               ) -> Option<Lrc<SourceFile>> {
      .                   self.files.borrow().stable_id_to_source_file.get(&stable_id).cloned()
      5 ( 0.00%)      }
      .           
      .               fn allocate_address_space(&self, size: usize) -> Result<usize, OffsetOverflowError> {
    316 ( 0.00%)          let size = u32::try_from(size).map_err(|_| OffsetOverflowError)?;
      .           
      .                   loop {
    316 ( 0.00%)              let current = self.used_address_space.load(Ordering::Relaxed);
    948 ( 0.00%)              let next = current
      .                           .checked_add(size)
      .                           // Add one so there is some space between files. This lets us distinguish
      .                           // positions in the `SourceMap`, even in the presence of zero-length files.
      .                           .and_then(|next| next.checked_add(1))
      .                           .ok_or(OffsetOverflowError)?;
      .           
      .                       if self
      .                           .used_address_space
-- line 265 ----------------------------------------
-- line 269 ----------------------------------------
      .                           return Ok(usize::try_from(current).unwrap());
      .                       }
      .                   }
      .               }
      .           
      .               /// Creates a new `SourceFile`.
      .               /// If a file already exists in the `SourceMap` with the same ID, that file is returned
      .               /// unmodified.
      8 ( 0.00%)      pub fn new_source_file(&self, filename: FileName, src: String) -> Lrc<SourceFile> {
     12 ( 0.00%)          self.try_new_source_file(filename, src).unwrap_or_else(|OffsetOverflowError| {
      .                       eprintln!("fatal error: rustc does not support files larger than 4GB");
      .                       crate::fatal_error::FatalError.raise()
      .                   })
      9 ( 0.00%)      }
      .           
      .               fn try_new_source_file(
      .                   &self,
      .                   filename: FileName,
      .                   src: String,
      .               ) -> Result<Lrc<SourceFile>, OffsetOverflowError> {
      .                   // Note that filename may not be a valid path, eg it may be `<anon>` etc,
      .                   // but this is okay because the directory determined by `path.pop()` will
      .                   // be empty, so the working directory will be used.
     13 ( 0.00%)          let (filename, _) = self.path_mapping.map_filename_prefix(&filename);
      .           
      2 ( 0.00%)          let file_id = StableSourceFileId::new_from_name(&filename, LOCAL_CRATE);
      .           
      6 ( 0.00%)          let lrc_sf = match self.source_file_by_stable_id(file_id) {
      .                       Some(lrc_sf) => lrc_sf,
      .                       None => {
      .                           let start_pos = self.allocate_address_space(src.len())?;
      .           
      6 ( 0.00%)                  let source_file = Lrc::new(SourceFile::new(
      9 ( 0.00%)                      filename,
      3 ( 0.00%)                      src,
      .                               Pos::from_usize(start_pos),
      .                               self.hash_kind,
      .                           ));
      .           
      .                           // Let's make sure the file_id we generated above actually matches
      .                           // the ID we generate for the SourceFile we just created.
      .                           debug_assert_eq!(StableSourceFileId::new(&source_file), file_id);
      .           
-- line 311 ----------------------------------------
-- line 319 ----------------------------------------
      .                   };
      .                   Ok(lrc_sf)
      .               }
      .           
      .               /// Allocates a new `SourceFile` representing a source file from an external
      .               /// crate. The source code of such an "imported `SourceFile`" is not available,
      .               /// but we still know enough to generate accurate debuginfo location
      .               /// information for things inlined from other crates.
  2,520 ( 0.00%)      pub fn new_imported_source_file(
      .                   &self,
      .                   filename: FileName,
      .                   src_hash: SourceFileHash,
      .                   name_hash: u128,
      .                   source_len: usize,
      .                   cnum: CrateNum,
      .                   mut file_local_lines: Vec<BytePos>,
      .                   mut file_local_multibyte_chars: Vec<MultiByteChar>,
-- line 335 ----------------------------------------
-- line 341 ----------------------------------------
      .                   let start_pos = self
      .                       .allocate_address_space(source_len)
      .                       .expect("not enough address space for imported source file");
      .           
      .                   let end_pos = Pos::from_usize(start_pos + source_len);
      .                   let start_pos = Pos::from_usize(start_pos);
      .           
      .                   for pos in &mut file_local_lines {
239,195 ( 0.19%)              *pos = *pos + start_pos;
      .                   }
      .           
      .                   for mbc in &mut file_local_multibyte_chars {
    570 ( 0.00%)              mbc.pos = mbc.pos + start_pos;
      .                   }
      .           
      .                   for swc in &mut file_local_non_narrow_chars {
    536 ( 0.00%)              *swc = *swc + start_pos;
      .                   }
      .           
      .                   for nc in &mut file_local_normalized_pos {
      .                       nc.pos = nc.pos + start_pos;
      .                   }
      .           
    945 ( 0.00%)          let source_file = Lrc::new(SourceFile {
  2,520 ( 0.00%)              name: filename,
      .                       src: None,
      .                       src_hash,
      .                       external_src: Lock::new(ExternalSource::Foreign {
      .                           kind: ExternalSourceKind::AbsentOk,
      .                           original_start_pos,
      .                           original_end_pos,
      .                       }),
      .                       start_pos,
-- line 373 ----------------------------------------
-- line 383 ----------------------------------------
      .                   let mut files = self.files.borrow_mut();
      .           
      .                   files.source_files.push(source_file.clone());
      .                   files
      .                       .stable_id_to_source_file
      .                       .insert(StableSourceFileId::new(&source_file), source_file.clone());
      .           
      .                   source_file
  2,835 ( 0.00%)      }
      .           
      .               // If there is a doctest offset, applies it to the line.
      .               pub fn doctest_offset_line(&self, file: &FileName, orig: usize) -> usize {
      .                   match file {
      .                       FileName::DocTest(_, offset) => {
      .                           if *offset < 0 {
      .                               orig - (-(*offset)) as usize
      .                           } else {
-- line 399 ----------------------------------------
-- line 400 ----------------------------------------
      .                               orig + *offset as usize
      .                           }
      .                       }
      .                       _ => orig,
      .                   }
      .               }
      .           
      .               /// Return the SourceFile that contains the given `BytePos`
      3 ( 0.00%)      pub fn lookup_source_file(&self, pos: BytePos) -> Lrc<SourceFile> {
      1 ( 0.00%)          let idx = self.lookup_source_file_idx(pos);
      1 ( 0.00%)          (*self.files.borrow().source_files)[idx].clone()
      3 ( 0.00%)      }
      .           
      .               /// Looks up source information about a `BytePos`.
      .               pub fn lookup_char_pos(&self, pos: BytePos) -> Loc {
      5 ( 0.00%)          let sf = self.lookup_source_file(pos);
      6 ( 0.00%)          let (line, col, col_display) = sf.lookup_file_pos_with_col_display(pos);
      3 ( 0.00%)          Loc { file: sf, line, col, col_display }
      .               }
      .           
      .               // If the corresponding `SourceFile` is empty, does not return a line number.
      .               pub fn lookup_line(&self, pos: BytePos) -> Result<SourceFileAndLine, Lrc<SourceFile>> {
      .                   let f = self.lookup_source_file(pos);
      .           
      .                   match f.lookup_line(pos) {
      .                       Some(line) => Ok(SourceFileAndLine { sf: f, line }),
-- line 425 ----------------------------------------
-- line 451 ----------------------------------------
      .           
      .               /// Format the span location to be printed in diagnostics. Must not be emitted
      .               /// to build artifacts as this may leak local file paths. Use span_to_embeddable_string
      .               /// for string suitable for embedding.
      .               pub fn span_to_diagnostic_string(&self, sp: Span) -> String {
      .                   self.span_to_string(sp, self.path_mapping.filename_display_for_diagnostics)
      .               }
      .           
     11 ( 0.00%)      pub fn span_to_filename(&self, sp: Span) -> FileName {
      3 ( 0.00%)          self.lookup_char_pos(sp.lo()).file.name.clone()
      8 ( 0.00%)      }
      .           
      .               pub fn filename_for_diagnostics<'a>(&self, filename: &'a FileName) -> FileNameDisplay<'a> {
      .                   filename.display(self.path_mapping.filename_display_for_diagnostics)
      .               }
      .           
    220 ( 0.00%)      pub fn is_multiline(&self, sp: Span) -> bool {
     80 ( 0.00%)          let lo = self.lookup_source_file_idx(sp.lo());
     80 ( 0.00%)          let hi = self.lookup_source_file_idx(sp.hi());
     40 ( 0.00%)          if lo != hi {
      .                       return true;
      .                   }
     40 ( 0.00%)          let f = (*self.files.borrow().source_files)[lo].clone();
      .                   f.lookup_line(sp.lo()) != f.lookup_line(sp.hi())
    180 ( 0.00%)      }
      .           
      .               #[instrument(skip(self), level = "trace")]
      .               pub fn is_valid_span(&self, sp: Span) -> Result<(Loc, Loc), SpanLinesError> {
      .                   let lo = self.lookup_char_pos(sp.lo());
      .                   trace!(?lo);
      .                   let hi = self.lookup_char_pos(sp.hi());
      .                   trace!(?hi);
      .                   if lo.file.start_pos != hi.file.start_pos {
-- line 483 ----------------------------------------
-- line 533 ----------------------------------------
      .           
      .               /// Extracts the source surrounding the given `Span` using the `extract_source` function. The
      .               /// extract function takes three arguments: a string slice containing the source, an index in
      .               /// the slice for the beginning of the span and an index in the slice for the end of the span.
      .               fn span_to_source<F, T>(&self, sp: Span, extract_source: F) -> Result<T, SpanSnippetError>
      .               where
      .                   F: Fn(&str, usize, usize) -> Result<T, SpanSnippetError>,
      .               {
    119 ( 0.00%)          let local_begin = self.lookup_byte_offset(sp.lo());
    119 ( 0.00%)          let local_end = self.lookup_byte_offset(sp.hi());
      .           
     34 ( 0.00%)          if local_begin.sf.start_pos != local_end.sf.start_pos {
      .                       Err(SpanSnippetError::DistinctSources(DistinctSources {
      .                           begin: (local_begin.sf.name.clone(), local_begin.sf.start_pos),
      .                           end: (local_end.sf.name.clone(), local_end.sf.start_pos),
      .                       }))
      .                   } else {
      .                       self.ensure_source_file_source_present(local_begin.sf.clone());
      .           
      .                       let start_index = local_begin.pos.to_usize();
      .                       let end_index = local_end.pos.to_usize();
     17 ( 0.00%)              let source_len = (local_begin.sf.end_pos - local_begin.sf.start_pos).to_usize();
      .           
     68 ( 0.00%)              if start_index > end_index || end_index > source_len {
      .                           return Err(SpanSnippetError::MalformedForSourcemap(MalformedSourceMapPositions {
      .                               name: local_begin.sf.name.clone(),
      .                               source_len,
      .                               begin_pos: local_begin.pos,
      .                               end_pos: local_end.pos,
      .                           }));
      .                       }
      .           
     51 ( 0.00%)              if let Some(ref src) = local_begin.sf.src {
      .                           extract_source(src, start_index, end_index)
      .                       } else if let Some(src) = local_begin.sf.external_src.borrow().get_source() {
      .                           extract_source(src, start_index, end_index)
      .                       } else {
      .                           Err(SpanSnippetError::SourceNotAvailable { filename: local_begin.sf.name.clone() })
      .                       }
      .                   }
      .               }
-- line 573 ----------------------------------------
-- line 579 ----------------------------------------
      .               pub fn is_local_span(&self, sp: Span) -> bool {
      .                   let local_begin = self.lookup_byte_offset(sp.lo());
      .                   let local_end = self.lookup_byte_offset(sp.hi());
      .                   // This might be a weird span that covers multiple files
      .                   local_begin.sf.src.is_some() && local_end.sf.src.is_some()
      .               }
      .           
      .               /// Returns the source snippet as `String` corresponding to the given `Span`.
    204 ( 0.00%)      pub fn span_to_snippet(&self, sp: Span) -> Result<String, SpanSnippetError> {
      .                   self.span_to_source(sp, |src, start_index, end_index| {
      .                       src.get(start_index..end_index)
      .                           .map(|s| s.to_string())
      .                           .ok_or(SpanSnippetError::IllFormedSpan(sp))
      .                   })
    153 ( 0.00%)      }
      .           
      .               pub fn span_to_margin(&self, sp: Span) -> Option<usize> {
      .                   Some(self.indentation_before(sp)?.len())
      .               }
      .           
      .               pub fn indentation_before(&self, sp: Span) -> Option<String> {
      .                   self.span_to_source(sp, |src, start_index, _| {
      .                       let before = &src[..start_index];
-- line 601 ----------------------------------------
-- line 679 ----------------------------------------
      .                       }
      .                   }
      .           
      .                   sp
      .               }
      .           
      .               /// Given a `Span`, tries to get a shorter span ending before the first occurrence of `char`
      .               /// `c`.
    187 ( 0.00%)      pub fn span_until_char(&self, sp: Span, c: char) -> Span {
     68 ( 0.00%)          match self.span_to_snippet(sp) {
     68 ( 0.00%)              Ok(snippet) => {
      .                           let snippet = snippet.split(c).next().unwrap_or("").trim_end();
     34 ( 0.00%)                  if !snippet.is_empty() && !snippet.contains('\n') {
     85 ( 0.00%)                      sp.with_hi(BytePos(sp.lo().0 + snippet.len() as u32))
      .                           } else {
      .                               sp
      .                           }
      .                       }
      .                       _ => sp,
      .                   }
    153 ( 0.00%)      }
      .           
      .               /// Given a `Span`, tries to get a shorter span ending just after the first occurrence of `char`
      .               /// `c`.
      .               pub fn span_through_char(&self, sp: Span, c: char) -> Span {
      .                   if let Ok(snippet) = self.span_to_snippet(sp) {
      .                       if let Some(offset) = snippet.find(c) {
      .                           return sp.with_hi(BytePos(sp.lo().0 + (offset + c.len_utf8()) as u32));
      .                       }
-- line 707 ----------------------------------------
-- line 750 ----------------------------------------
      .               /// Given a `Span`, return a span ending in the closest `{`. This is useful when you have a
      .               /// `Span` enclosing a whole item but we need to point at only the head (usually the first
      .               /// line) of that item.
      .               ///
      .               /// *Only suitable for diagnostics.*
      .               pub fn guess_head_span(&self, sp: Span) -> Span {
      .                   // FIXME: extend the AST items to have a head span, or replace callers with pointing at
      .                   // the item's ident when appropriate.
     34 ( 0.00%)          self.span_until_char(sp, '{')
      .               }
      .           
      .               /// Returns a new span representing just the first character of the given span.
     12 ( 0.00%)      pub fn start_point(&self, sp: Span) -> Span {
      .                   let width = {
      .                       let sp = sp.data();
      5 ( 0.00%)              let local_begin = self.lookup_byte_offset(sp.lo);
      .                       let start_index = local_begin.pos.to_usize();
      .                       let src = local_begin.sf.external_src.borrow();
      .           
      3 ( 0.00%)              let snippet = if let Some(ref src) = local_begin.sf.src {
      .                           Some(&src[start_index..])
      .                       } else if let Some(src) = src.get_source() {
      .                           Some(&src[start_index..])
      .                       } else {
      .                           None
      .                       };
      .           
      1 ( 0.00%)              match snippet {
      .                           None => 1,
      .                           Some(snippet) => match snippet.chars().next() {
      .                               None => 1,
      .                               Some(c) => c.len_utf8(),
      .                           },
      .                       }
      .                   };
      .           
     12 ( 0.00%)          sp.with_hi(BytePos(sp.lo().0 + width as u32))
      .               }
      .           
      .               /// Returns a new span representing just the last character of this span.
    708 ( 0.00%)      pub fn end_point(&self, sp: Span) -> Span {
      .                   let pos = sp.hi().0;
      .           
    236 ( 0.00%)          let width = self.find_width_of_character_at_span(sp, false);
      .                   let corrected_end_position = pos.checked_sub(width).unwrap_or(pos);
      .           
      .                   let end_point = BytePos(cmp::max(corrected_end_position, sp.lo().0));
    590 ( 0.00%)          sp.with_lo(end_point)
      .               }
      .           
      .               /// Returns a new span representing the next character after the end-point of this span.
    198 ( 0.00%)      pub fn next_point(&self, sp: Span) -> Span {
     18 ( 0.00%)          if sp.is_dummy() {
      .                       return sp;
      .                   }
      .                   let start_of_next_point = sp.hi().0;
      .           
     72 ( 0.00%)          let width = self.find_width_of_character_at_span(sp.shrink_to_hi(), true);
      .                   // If the width is 1, then the next span should point to the same `lo` and `hi`. However,
      .                   // in the case of a multibyte character, where the width != 1, the next span should
      .                   // span multiple bytes to include the whole character.
      .                   let end_of_next_point =
     36 ( 0.00%)              start_of_next_point.checked_add(width - 1).unwrap_or(start_of_next_point);
      .           
     36 ( 0.00%)          let end_of_next_point = BytePos(cmp::max(sp.lo().0 + 1, end_of_next_point));
      .                   Span::new(BytePos(start_of_next_point), end_of_next_point, sp.ctxt(), None)
    162 ( 0.00%)      }
      .           
      .               /// Finds the width of the character, either before or after the end of provided span,
      .               /// depending on the `forwards` parameter.
    924 ( 0.00%)      fn find_width_of_character_at_span(&self, sp: Span, forwards: bool) -> u32 {
      .                   let sp = sp.data();
     77 ( 0.00%)          if sp.lo == sp.hi {
      .                       debug!("find_width_of_character_at_span: early return empty span");
      .                       return 1;
      .                   }
      .           
    413 ( 0.00%)          let local_begin = self.lookup_byte_offset(sp.lo);
    531 ( 0.00%)          let local_end = self.lookup_byte_offset(sp.hi);
      .                   debug!(
      .                       "find_width_of_character_at_span: local_begin=`{:?}`, local_end=`{:?}`",
      .                       local_begin, local_end
      .                   );
      .           
    118 ( 0.00%)          if local_begin.sf.start_pos != local_end.sf.start_pos {
      .                       debug!("find_width_of_character_at_span: begin and end are in different files");
      .                       return 1;
      .                   }
      .           
      .                   let start_index = local_begin.pos.to_usize();
      .                   let end_index = local_end.pos.to_usize();
      .                   debug!(
      .                       "find_width_of_character_at_span: start_index=`{:?}`, end_index=`{:?}`",
      .                       start_index, end_index
      .                   );
      .           
      .                   // Disregard indexes that are at the start or end of their spans, they can't fit bigger
      .                   // characters.
    236 ( 0.00%)          if (!forwards && end_index == usize::MIN) || (forwards && start_index == usize::MAX) {
      .                       debug!("find_width_of_character_at_span: start or end of span, cannot be multibyte");
      .                       return 1;
      .                   }
      .           
     59 ( 0.00%)          let source_len = (local_begin.sf.end_pos - local_begin.sf.start_pos).to_usize();
      .                   debug!("find_width_of_character_at_span: source_len=`{:?}`", source_len);
      .                   // Ensure indexes are also not malformed.
    236 ( 0.00%)          if start_index > end_index || end_index > source_len {
      .                       debug!("find_width_of_character_at_span: source indexes are malformed");
      .                       return 1;
      .                   }
      .           
      .                   let src = local_begin.sf.external_src.borrow();
      .           
      .                   // We need to extend the snippet to the end of the src rather than to end_index so when
      .                   // searching forwards for boundaries we've got somewhere to search.
    177 ( 0.00%)          let snippet = if let Some(ref src) = local_begin.sf.src {
      .                       &src[start_index..]
      .                   } else if let Some(src) = src.get_source() {
      .                       &src[start_index..]
      .                   } else {
      .                       return 1;
      .                   };
      .                   debug!("find_width_of_character_at_span: snippet=`{:?}`", snippet);
      .           
    354 ( 0.00%)          let mut target = if forwards { end_index + 1 } else { end_index - 1 };
      .                   debug!("find_width_of_character_at_span: initial target=`{:?}`", target);
      .           
    236 ( 0.00%)          while !snippet.is_char_boundary(target - start_index) && target < source_len {
      .                       target = if forwards {
      .                           target + 1
      .                       } else {
      .                           match target.checked_sub(1) {
      .                               Some(target) => target,
      .                               None => {
      .                                   break;
      .                               }
      .                           }
      .                       };
      .                       debug!("find_width_of_character_at_span: target=`{:?}`", target);
      .                   }
      .                   debug!("find_width_of_character_at_span: final target=`{:?}`", target);
      .           
    236 ( 0.00%)          if forwards { (target - end_index) as u32 } else { (end_index - target) as u32 }
    693 ( 0.00%)      }
      .           
      .               pub fn get_source_file(&self, filename: &FileName) -> Option<Lrc<SourceFile>> {
      .                   // Remap filename before lookup
      .                   let filename = self.path_mapping().map_filename_prefix(filename).0;
      .                   for sf in self.files.borrow().source_files.iter() {
      .                       if filename == sf.name {
      .                           return Some(sf.clone());
      .                       }
      .                   }
      .                   None
      .               }
      .           
      .               /// For a global `BytePos`, computes the local offset within the containing `SourceFile`.
    765 ( 0.00%)      pub fn lookup_byte_offset(&self, bpos: BytePos) -> SourceFileAndBytePos {
    153 ( 0.00%)          let idx = self.lookup_source_file_idx(bpos);
    306 ( 0.00%)          let sf = (*self.files.borrow().source_files)[idx].clone();
      .                   let offset = bpos - sf.start_pos;
      .                   SourceFileAndBytePos { sf, pos: offset }
    765 ( 0.00%)      }
      .           
      .               // Returns the index of the `SourceFile` (in `self.files`) that contains `pos`.
      .               // This index is guaranteed to be valid for the lifetime of this `SourceMap`,
      .               // since `source_files` is a `MonotonicVec`
    606 ( 0.00%)      pub fn lookup_source_file_idx(&self, pos: BytePos) -> usize {
      .                   self.files
      .                       .borrow()
      .                       .source_files
      .                       .binary_search_by_key(&pos, |key| key.start_pos)
    402 ( 0.00%)              .unwrap_or_else(|p| p - 1)
    808 ( 0.00%)      }
      .           
      .               pub fn count_lines(&self) -> usize {
      .                   self.files().iter().fold(0, |a, f| a + f.count_lines())
      .               }
      .           
      .               pub fn generate_fn_name_span(&self, span: Span) -> Option<Span> {
      .                   let prev_span = self.span_extend_to_prev_str(span, "fn", true);
      .                   if let Ok(snippet) = self.span_to_snippet(prev_span) {
-- line 931 ----------------------------------------
-- line 1010 ----------------------------------------
      .           
      .                           return Some((sugg_span, new_snippet));
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .               pub fn ensure_source_file_source_present(&self, source_file: Lrc<SourceFile>) -> bool {
    119 ( 0.00%)          source_file.add_external_src(|| {
      .                       match source_file.name {
      .                           FileName::Real(ref name) if let Some(local_path) = name.local_path() => {
      .                               self.file_loader.read_file(local_path).ok()
      .                           }
      .                           _ => None,
      .                       }
      .                   })
      .               }
-- line 1026 ----------------------------------------
-- line 1053 ----------------------------------------
      .                   let span = span.shrink_to_hi().with_hi(BytePos(span.hi().0.checked_add(1)?));
      .                   if self.span_to_snippet(span).as_deref() != Ok(";") {
      .                       return None;
      .                   }
      .                   Some(span)
      .               }
      .           }
      .           
      8 ( 0.00%)  #[derive(Clone)]
      .           pub struct FilePathMapping {
      4 ( 0.00%)      mapping: Vec<(PathBuf, PathBuf)>,
      2 ( 0.00%)      filename_display_for_diagnostics: FileNameDisplayPreference,
      .           }
      .           
      .           impl FilePathMapping {
      .               pub fn empty() -> FilePathMapping {
      .                   FilePathMapping::new(Vec::new())
      .               }
      .           
      3 ( 0.00%)      pub fn new(mapping: Vec<(PathBuf, PathBuf)>) -> FilePathMapping {
      .                   let filename_display_for_diagnostics = if mapping.is_empty() {
      .                       FileNameDisplayPreference::Local
      .                   } else {
      .                       FileNameDisplayPreference::Remapped
      .                   };
      .           
     12 ( 0.00%)          FilePathMapping { mapping, filename_display_for_diagnostics }
      3 ( 0.00%)      }
      .           
      .               /// Applies any path prefix substitution as defined by the mapping.
      .               /// The return value is the remapped path and a boolean indicating whether
      .               /// the path was affected by the mapping.
     45 ( 0.00%)      pub fn map_prefix(&self, path: PathBuf) -> (PathBuf, bool) {
      .                   // NOTE: We are iterating over the mapping entries from last to first
      .                   //       because entries specified later on the command line should
      .                   //       take precedence.
      .                   for &(ref from, ref to) in self.mapping.iter().rev() {
      .                       if let Ok(rest) = path.strip_prefix(from) {
      .                           return (to.join(rest), true);
      .                       }
      .                   }
      .           
     25 ( 0.00%)          (path, false)
     45 ( 0.00%)      }
      .           
      8 ( 0.00%)      fn map_filename_prefix(&self, file: &FileName) -> (FileName, bool) {
      2 ( 0.00%)          match file {
      2 ( 0.00%)              FileName::Real(realfile) if let RealFileName::LocalPath(local_path) = realfile => {
     14 ( 0.00%)                  let (mapped_path, mapped) = self.map_prefix(local_path.to_path_buf());
      1 ( 0.00%)                  let realfile = if mapped {
      .                               RealFileName::Remapped {
      .                                   local_path: Some(local_path.clone()),
      .                                   virtual_name: mapped_path,
      .                               }
      .                           } else {
      .                               realfile.clone()
      .                           };
     10 ( 0.00%)                  (FileName::Real(realfile), mapped)
      4 ( 0.00%)              }
      .                       FileName::Real(_) => unreachable!("attempted to remap an already remapped filename"),
      .                       other => (other.clone(), false),
      .                   }
      .               }
      .           }

  3,024 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 84 ----------------------------------------
      .           pub struct SessionGlobals {
      .               symbol_interner: symbol::Interner,
      .               span_interner: Lock<span_encoding::SpanInterner>,
      .               hygiene_data: Lock<hygiene::HygieneData>,
      .               source_map: Lock<Option<Lrc<SourceMap>>>,
      .           }
      .           
      .           impl SessionGlobals {
     12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
     50 ( 0.00%)          SessionGlobals {
      2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
      .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
      6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
      .                       source_map: Lock::new(None),
      .                   }
     10 ( 0.00%)      }
      .           }
      .           
      .           #[inline]
      .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
      1 ( 0.00%)      assert!(
      .                   !SESSION_GLOBALS.is_set(),
      .                   "SESSION_GLOBALS should never be overwritten! \
      .                    Use another thread if you need another SessionGlobals"
      .               );
      3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
      7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
      1 ( 0.00%)  }
      .           
      .           #[inline]
      .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
      .               assert!(
      .                   !SESSION_GLOBALS.is_set(),
      .                   "SESSION_GLOBALS should never be overwritten! \
      .                    Use another thread if you need another SessionGlobals"
      .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
      .               SESSION_GLOBALS.set(session_globals, f)
      .           }
      .           
      .           #[inline]
      .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
      .           where
      .               F: FnOnce(&SessionGlobals) -> R,
      .           {
      4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
      .           }
      .           
      .           #[inline]
      .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
      .           where
      .               F: FnOnce(&SessionGlobals) -> R,
      .           {
      1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
      3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
     11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
      1 ( 0.00%)      } else {
      .                   SESSION_GLOBALS.with(f)
      .               }
      .           }
      .           
      .           #[inline]
      .           pub fn with_session_globals<R, F>(f: F) -> R
      .           where
      .               F: FnOnce(&SessionGlobals) -> R,
      .           {
 18,252 ( 0.01%)      SESSION_GLOBALS.with(f)
      .           }
      .           
      .           #[inline]
      .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
      .               create_session_globals_then(edition::DEFAULT_EDITION, f)
      .           }
      .           
      .           // If this ever becomes non thread-local, `decode_syntax_context`
      .           // and `decode_expn_id` will need to be updated to handle concurrent
      .           // deserialization.
      .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
      .           
      .           // FIXME: We should use this enum or something like it to get rid of the
      .           // use of magic `/rust/1.x/...` paths across the board.
     13 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    624 ( 0.00%)  #[derive(Decodable)]
      .           pub enum RealFileName {
      .               LocalPath(PathBuf),
      .               /// For remapped paths (namely paths into libstd that have been mapped
      .               /// to the appropriate spot on the local host's file system, and local file
      .               /// system paths that have been remapped with `FilePathMapping`),
      .               Remapped {
      .                   /// `local_path` is the (host-dependent) local path to the file. This is
      .                   /// None if the file was imported from another crate
-- line 173 ----------------------------------------
-- line 179 ----------------------------------------
      .           }
      .           
      .           impl Hash for RealFileName {
      .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
      .                   // To prevent #70924 from happening again we should only hash the
      .                   // remapped (virtualized) path if that exists. This is because
      .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
      .                   // remain stable even if the corresponding local_path changes
  1,585 ( 0.00%)          self.remapped_path_if_available().hash(state)
      .               }
      .           }
      .           
      .           // This is functionally identical to #[derive(Encodable)], with the exception of
      .           // an added assert statement
      .           impl<S: Encoder> Encodable<S> for RealFileName {
      .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
      2 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
      .                       RealFileName::LocalPath(ref local_path) => {
      8 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
      .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
      .                               Ok(())
      .                           })
      .                       }
      .           
      .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
      .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
      .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 224 ----------------------------------------
      .                           p.as_ref().map(PathBuf::as_path)
      .                       }
      .                   }
      .               }
      .           
      .               /// Returns the path suitable for reading from the file system on the local host,
      .               /// if this information exists.
      .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
      2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
      2 ( 0.00%)          match self {
      .                       RealFileName::LocalPath(p) => Some(p),
      .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
      .                   }
      3 ( 0.00%)      }
      .           
      .               /// Returns the path suitable for embedding into build artifacts. This would still
      .               /// be a local path if it has not been remapped. A remapped path will not correspond
      .               /// to a valid file system path: see `local_path_if_available()` for something that
      .               /// is more likely to return paths into the local host file system.
      .               pub fn remapped_path_if_available(&self) -> &Path {
  1,264 ( 0.00%)          match self {
      .                       RealFileName::LocalPath(p)
      .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
      .                   }
      2 ( 0.00%)      }
      .           
      .               /// Returns the path suitable for reading from the file system on the local host,
      .               /// if this information exists. Otherwise returns the remapped name.
      .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
      .               pub fn local_path_if_available(&self) -> &Path {
      1 ( 0.00%)          match self {
      .                       RealFileName::LocalPath(path)
      .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
      .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
      .                   }
      .               }
      .           
      .               pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
      1 ( 0.00%)          match display_pref {
      .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
      .                       FileNameDisplayPreference::Remapped => {
      .                           self.remapped_path_if_available().to_string_lossy()
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           /// Differentiates between real files and common virtual files.
  3,235 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
  3,772 ( 0.00%)  #[derive(Decodable, Encodable)]
      .           pub enum FileName {
      .               Real(RealFileName),
      .               /// Call to `quote!`.
      .               QuoteExpansion(u64),
      .               /// Command line.
      .               Anon(u64),
      .               /// Hack in `src/librustc_ast/parse.rs`.
      .               // FIXME(jseyfried)
-- line 281 ----------------------------------------
-- line 288 ----------------------------------------
      .               /// Custom sources for explicit parser calls from plugins and drivers.
      .               Custom(String),
      .               DocTest(PathBuf, isize),
      .               /// Post-substitution inline assembly from LLVM.
      .               InlineAsm(u64),
      .           }
      .           
      .           impl From<PathBuf> for FileName {
      7 ( 0.00%)      fn from(p: PathBuf) -> Self {
      2 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
      6 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
      7 ( 0.00%)      }
      .           }
      .           
      2 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
      .           pub enum FileNameDisplayPreference {
      .               Remapped,
      .               Local,
      .           }
      .           
      .           pub struct FileNameDisplay<'a> {
      .               inner: &'a FileName,
      .               display_pref: FileNameDisplayPreference,
      .           }
      .           
      .           impl fmt::Display for FileNameDisplay<'_> {
      4 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
      .                   use FileName::*;
      6 ( 0.00%)          match *self.inner {
      .                       Real(ref name) => {
      6 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
      .                       }
      .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
      .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
      .                       Anon(_) => write!(fmt, "<anon>"),
      .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
      .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
      .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
      .                       Custom(ref s) => write!(fmt, "<{}>", s),
      .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
      .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
      .                   }
      5 ( 0.00%)      }
      .           }
      .           
      .           impl FileNameDisplay<'_> {
      .               pub fn to_string_lossy(&self) -> Cow<'_, str> {
      .                   match self.inner {
      .                       FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
      .                       _ => Cow::from(format!("{}", self)),
      .                   }
      .               }
      .           }
      .           
      .           impl FileName {
      .               pub fn is_real(&self) -> bool {
      .                   use FileName::*;
    632 ( 0.00%)          match *self {
      .                       Real(_) => true,
      .                       Anon(_)
      .                       | MacroExpansion(_)
      .                       | ProcMacroSourceCode(_)
      .                       | CfgSpec(_)
      .                       | CliCrateAttr(_)
      .                       | Custom(_)
      .                       | QuoteExpansion(_)
-- line 353 ----------------------------------------
-- line 357 ----------------------------------------
      .               }
      .           
      .               pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
      .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
      .               }
      .           
      .               // This may include transient local filesystem information.
      .               // Must not be embedded in build outputs.
      1 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
      .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
      2 ( 0.00%)      }
      .           
      .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
      .                   FileNameDisplay { inner: self, display_pref }
      .               }
      .           
      .               pub fn macro_expansion_source_code(src: &str) -> FileName {
      .                   let mut hasher = StableHasher::new();
      .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 423 ----------------------------------------
      .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
      .           /// [`BytePos`] range between files.
      .           ///
      .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
      .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
      .           /// Using `Span` is generally preferred.
      .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
      .           pub struct SpanData {
      9 ( 0.00%)      pub lo: BytePos,
      9 ( 0.00%)      pub hi: BytePos,
      .               /// Information about where the macro came from, if this piece of
      .               /// code was created by a macro expansion.
     27 ( 0.00%)      pub ctxt: SyntaxContext,
      9 ( 0.00%)      pub parent: Option<LocalDefId>,
      .           }
      .           
      .           // Order spans by position in the file.
      .           impl Ord for SpanData {
      .               fn cmp(&self, other: &Self) -> Ordering {
      .                   let SpanData {
      .                       lo: s_lo,
      .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
      .               }
      .               #[inline]
      .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
      .                   Span::new(self.lo, self.hi, self.ctxt, parent)
      .               }
      .               /// Returns `true` if this is a dummy span with any hygienic context.
      .               #[inline]
      .               pub fn is_dummy(self) -> bool {
  6,327 ( 0.01%)          self.lo.0 == 0 && self.hi.0 == 0
      .               }
      .               /// Returns `true` if `self` fully encloses `other`.
      .               pub fn contains(self, other: Self) -> bool {
      9 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
      .               }
      .           }
      .           
      .           // The interner is pointed to by a thread local value which is only set on the main thread
      .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
      .           // to avoid panics and other errors, even though it would be memory safe to do so.
      .           #[cfg(not(parallel_compiler))]
      .           impl !Send for Span {}
      .           #[cfg(not(parallel_compiler))]
      .           impl !Sync for Span {}
      .           
      .           impl PartialOrd for Span {
  6,000 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
  4,500 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
  6,000 ( 0.00%)      }
      .           }
      .           impl Ord for Span {
      .               fn cmp(&self, rhs: &Self) -> Ordering {
      .                   Ord::cmp(&self.data(), &rhs.data())
      .               }
      .           }
      .           
      .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
      .           }
      .           
      .           impl Span {
      .               #[inline]
      .               pub fn lo(self) -> BytePos {
      .                   self.data().lo
      .               }
      .               #[inline]
    837 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
      .                   self.data().with_lo(lo)
    558 ( 0.00%)      }
      .               #[inline]
    904 ( 0.00%)      pub fn hi(self) -> BytePos {
      .                   self.data().hi
    904 ( 0.00%)      }
      .               #[inline]
  2,223 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
      .                   self.data().with_hi(hi)
  1,482 ( 0.00%)      }
      .               #[inline]
      .               pub fn ctxt(self) -> SyntaxContext {
      .                   self.data_untracked().ctxt
      .               }
      .               #[inline]
    150 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
      .                   self.data_untracked().with_ctxt(ctxt)
     90 ( 0.00%)      }
      .               #[inline]
      .               pub fn parent(self) -> Option<LocalDefId> {
      .                   self.data().parent
      .               }
      .               #[inline]
      .               pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
      .                   self.data().with_parent(ctxt)
      .               }
-- line 566 ----------------------------------------
-- line 618 ----------------------------------------
      .               }
      .           
      .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
      .               pub fn substitute_dummy(self, other: Span) -> Span {
      .                   if self.is_dummy() { other } else { self }
      .               }
      .           
      .               /// Returns `true` if `self` fully encloses `other`.
     27 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
      .                   let span = self.data();
      .                   let other = other.data();
      .                   span.contains(other)
     18 ( 0.00%)      }
      .           
      .               /// Returns `true` if `self` touches `other`.
      .               pub fn overlaps(self, other: Span) -> bool {
      .                   let span = self.data();
      .                   let other = other.data();
      .                   span.lo < other.hi && other.lo < span.hi
      .               }
      .           
-- line 638 ----------------------------------------
-- line 671 ----------------------------------------
      .               pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
      .                   while !outer.contains(self) {
      .                       self = self.parent_callsite()?;
      .                   }
      .                   Some(self)
      .               }
      .           
      .               /// Edition of the crate from which this span came.
    489 ( 0.00%)      pub fn edition(self) -> edition::Edition {
      .                   self.ctxt().edition()
    326 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn rust_2015(self) -> bool {
    147 ( 0.00%)          self.edition() == edition::Edition::Edition2015
      .               }
      .           
      .               #[inline]
      .               pub fn rust_2018(self) -> bool {
     32 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
      .               }
      .           
      .               #[inline]
      .               pub fn rust_2021(self) -> bool {
     30 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
      .               }
      .           
      .               /// Returns the source callee.
      .               ///
      .               /// Returns `None` if the supplied span has no expansion trace,
      .               /// else returns the `ExpnData` for the macro definition
      .               /// corresponding to the source callsite.
      .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
      .                   }
      .                   let expn_data = self.ctxt().outer_expn_data();
      .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
      .               }
      .           
      .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
      .               /// items can be used (that is, a macro marked with
      .               /// `#[allow_internal_unstable]`).
     15 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
      3 ( 0.00%)          self.ctxt()
      .                       .outer_expn_data()
      .                       .allow_internal_unstable
      .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
     12 ( 0.00%)      }
      .           
      .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
    140 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
    120 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
      .                       ExpnKind::Desugaring(k) => k == kind,
      .                       _ => false,
      .                   }
    100 ( 0.00%)      }
      .           
      .               /// Returns the compiler desugaring that created this span, or `None`
      .               /// if this span is not from a desugaring.
      .               pub fn desugaring_kind(self) -> Option<DesugaringKind> {
      .                   match self.ctxt().outer_expn_data().kind {
      .                       ExpnKind::Desugaring(k) => Some(k),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               /// Checks if a span is "internal" to a macro in which `unsafe`
      .               /// can be used without triggering the `unsafe_code` lint.
      .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
     24 ( 0.00%)      pub fn allows_unsafe(self) -> bool {
      6 ( 0.00%)          self.ctxt().outer_expn_data().allow_internal_unsafe
     24 ( 0.00%)      }
      .           
      .               pub fn macro_backtrace(mut self) -> impl Iterator<Item = ExpnData> {
      .                   let mut prev_span = DUMMY_SP;
      .                   std::iter::from_fn(move || {
      .                       loop {
      .                           let expn_data = self.ctxt().outer_expn_data();
      .                           if expn_data.is_root() {
      .                               return None;
-- line 752 ----------------------------------------
-- line 767 ----------------------------------------
      .           
      .               /// Returns a `Span` that would enclose both `self` and `end`.
      .               ///
      .               /// ```text
      .               ///     ____             ___
      .               ///     self lorem ipsum end
      .               ///     ^^^^^^^^^^^^^^^^^^^^
      .               /// ```
 11,198 ( 0.01%)      pub fn to(self, end: Span) -> Span {
      .                   let span_data = self.data();
      .                   let end_data = end.data();
      .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
      .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
      .                   // have an incomplete span than a completely nonsensical one.
  2,011 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
     25 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
      .                           return end;
     10 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
      .                           return self;
      .                       }
      .                       // Both spans fall within a macro.
      .                       // FIXME(estebank): check if it is the *same* macro.
      .                   }
      .                   Span::new(
      .                       cmp::min(span_data.lo, end_data.lo),
      .                       cmp::max(span_data.hi, end_data.hi),
      .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
  6,951 ( 0.01%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
      .                   )
  9,162 ( 0.01%)      }
      .           
      .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
      .               ///
      .               /// ```text
      .               ///     ____             ___
      .               ///     self lorem ipsum end
      .               ///         ^^^^^^^^^^^^^
      .               /// ```
    110 ( 0.00%)      pub fn between(self, end: Span) -> Span {
      .                   let span = self.data();
      .                   let end = end.data();
      .                   Span::new(
      .                       span.hi,
      .                       end.lo,
      .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
     70 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
      .                   )
     80 ( 0.00%)      }
      .           
      .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
      .               ///
      .               /// ```text
      .               ///     ____             ___
      .               ///     self lorem ipsum end
      .               ///     ^^^^^^^^^^^^^^^^^
      .               /// ```
     33 ( 0.00%)      pub fn until(self, end: Span) -> Span {
      .                   // Most of this function's body is copied from `to`.
      .                   // We can't just do `self.to(end.shrink_to_lo())`,
      .                   // because to also does some magic where it uses min/max so
      .                   // it can handle overlapping spans. Some advanced mis-use of
      .                   // `until` with different ctxts makes this visible.
      .                   let span_data = self.data();
      .                   let end_data = end.data();
      .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
      .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
      .                   // have an incomplete span than a completely nonsensical one.
      6 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
      .                       if span_data.ctxt == SyntaxContext::root() {
      .                           return end;
      .                       } else if end_data.ctxt == SyntaxContext::root() {
      .                           return self;
      .                       }
      .                       // Both spans fall within a macro.
      .                       // FIXME(estebank): check if it is the *same* macro.
      .                   }
      .                   Span::new(
      .                       span_data.lo,
      .                       end_data.lo,
      .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
     21 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
      .                   )
     27 ( 0.00%)      }
      .           
      .               pub fn from_inner(self, inner: InnerSpan) -> Span {
      .                   let span = self.data();
      .                   Span::new(
      .                       span.lo + BytePos::from_usize(inner.start),
      .                       span.lo + BytePos::from_usize(inner.end),
      .                       span.ctxt,
      .                       span.parent,
      .                   )
      .               }
      .           
      .               /// Equivalent of `Span::def_site` from the proc macro API,
      .               /// except that the location is taken from the `self` span.
      .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
     10 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
      .               }
      .           
      .               /// Equivalent of `Span::call_site` from the proc macro API,
      .               /// except that the location is taken from the `self` span.
      .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
      4 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
      .               }
      .           
      .               /// Equivalent of `Span::mixed_site` from the proc macro API,
      .               /// except that the location is taken from the `self` span.
      .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
      2 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
      .               }
      .           
      .               /// Produces a span with the same location as `self` and context produced by a macro with the
      .               /// given ID and transparency, assuming that macro was defined directly and not produced by
      .               /// some other macro (which is the case for built-in and procedural macros).
     96 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
      .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
     56 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
      .                   let span = self.data();
      .                   span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
      .               }
      .           
      .               #[inline]
-- line 892 ----------------------------------------
-- line 901 ----------------------------------------
      .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
      .                   let mut span = self.data();
      .                   let mark = span.ctxt.adjust(expn_id);
      .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
      .                   mark
      .               }
      .           
      .               #[inline]
  1,575 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
  1,050 ( 0.00%)          let mut span = self.data();
    853 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
  1,575 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
      .                   mark
  1,728 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
      6 ( 0.00%)          let mut span = self.data();
      9 ( 0.00%)          let mark = span.ctxt.glob_adjust(expn_id, glob_span);
     24 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
      .                   mark
      .               }
      .           
      .               #[inline]
     36 ( 0.00%)      pub fn reverse_glob_adjust(
      .                   &mut self,
      .                   expn_id: ExpnId,
      .                   glob_span: Span,
      .               ) -> Option<Option<ExpnId>> {
     30 ( 0.00%)          let mut span = self.data();
     32 ( 0.00%)          let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
     60 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
      .                   mark
     40 ( 0.00%)      }
      .           
      .               #[inline]
  1,528 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
      .                   let span = self.data();
      .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
  1,337 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn normalize_to_macro_rules(self) -> Span {
      .                   let span = self.data();
      .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
      .               }
      .           }
      .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
      .           
      .               /// What label should we attach to this span (if any)?
      .               pub label: Option<String>,
      .           }
      .           
      .           impl Default for Span {
      .               fn default() -> Self {
      .                   DUMMY_SP
      2 ( 0.00%)      }
      .           }
      .           
      .           impl<E: Encoder> Encodable<E> for Span {
      .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
      .                   let span = self.data();
      .                   s.emit_struct(false, |s| {
      .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
      .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
      .           /// any spans that are debug-printed during the closure's execution.
      .           ///
      .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
      .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
      .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
      .           /// a `TyCtxt` is available. In this case, we fall back to
      .           /// the `SourceMap` provided to this function. If that is not available,
      .           /// we fall back to printing the raw `Span` field values.
      9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
      .               with_session_globals(|session_globals| {
      2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
      .               });
      .               struct ClearSourceMap;
      .               impl Drop for ClearSourceMap {
      .                   fn drop(&mut self) {
      .                       with_session_globals(|session_globals| {
      1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
      .                       });
      .                   }
      .               }
      .           
      .               let _guard = ClearSourceMap;
      4 ( 0.00%)      f()
      8 ( 0.00%)  }
      .           
      .           pub fn debug_with_source_map(
      .               span: Span,
      .               f: &mut fmt::Formatter<'_>,
      .               source_map: &SourceMap,
      .           ) -> fmt::Result {
      .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
      .           }
-- line 1021 ----------------------------------------
-- line 1048 ----------------------------------------
      .           
      .           impl MultiSpan {
      .               #[inline]
      .               pub fn new() -> MultiSpan {
      .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
      .               }
      .           
      .               pub fn from_span(primary_span: Span) -> MultiSpan {
    220 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
      .               }
      .           
      .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
      .                   vec.sort();
      .                   MultiSpan { primary_spans: vec, span_labels: vec![] }
      .               }
      .           
      .               pub fn push_span_label(&mut self, span: Span, label: String) {
      .                   self.span_labels.push((span, label));
      .               }
      .           
      .               /// Selects the first primary span (if any).
      .               pub fn primary_span(&self) -> Option<Span> {
      .                   self.primary_spans.first().cloned()
     19 ( 0.00%)      }
      .           
      .               /// Returns all primary spans.
      .               pub fn primary_spans(&self) -> &[Span] {
      .                   &self.primary_spans
      .               }
      .           
      .               /// Returns `true` if any of the primary spans are displayable.
      .               pub fn has_primary_spans(&self) -> bool {
-- line 1079 ----------------------------------------
-- line 1139 ----------------------------------------
      .           
      .               /// Returns `true` if any of the span labels is displayable.
      .               pub fn has_span_labels(&self) -> bool {
      .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
      .               }
      .           }
      .           
      .           impl From<Span> for MultiSpan {
    220 ( 0.00%)      fn from(span: Span) -> MultiSpan {
      .                   MultiSpan::from_span(span)
    220 ( 0.00%)      }
      .           }
      .           
      .           impl From<Vec<Span>> for MultiSpan {
      .               fn from(spans: Vec<Span>) -> MultiSpan {
      .                   MultiSpan::from_spans(spans)
      .               }
      .           }
      .           
-- line 1157 ----------------------------------------
-- line 1160 ----------------------------------------
      .           pub struct MultiByteChar {
      .               /// The absolute offset of the character in the `SourceMap`.
      .               pub pos: BytePos,
      .               /// The number of bytes, `>= 2`.
      .               pub bytes: u8,
      .           }
      .           
      .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
    268 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
      .           pub enum NonNarrowChar {
      .               /// Represents a zero-width character.
      .               ZeroWidth(BytePos),
      .               /// Represents a wide (full-width) character.
      .               Wide(BytePos),
      .               /// Represents a tab character, represented visually with a width of 4 characters.
      .               Tab(BytePos),
      .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
      .                   }
      .               }
      .           }
      .           
      .           impl Add<BytePos> for NonNarrowChar {
      .               type Output = Self;
      .           
      .               fn add(self, rhs: BytePos) -> Self {
    466 ( 0.00%)          match self {
      .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
      .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
      .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
      .                   }
      .               }
      .           }
      .           
      .           impl Sub<BytePos> for NonNarrowChar {
      .               type Output = Self;
      .           
    134 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
    466 ( 0.00%)          match self {
      .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
      .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
      .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
      .                   }
    402 ( 0.00%)      }
      .           }
      .           
      .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
      .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
      .           pub struct NormalizedPos {
      .               /// The absolute offset of the character in the `SourceMap`.
      .               pub pos: BytePos,
      .               /// The difference between original and normalized string at position.
      .               pub diff: u32,
      .           }
      .           
      3 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
      .           pub enum ExternalSource {
      .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
      .               Unneeded,
      .               Foreign {
      .                   kind: ExternalSourceKind,
      .                   /// This SourceFile's byte-offset within the source_map of its original crate.
      .                   original_start_pos: BytePos,
      .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1267 ----------------------------------------
      .                       _ => None,
      .                   }
      .               }
      .           }
      .           
      .           #[derive(Debug)]
      .           pub struct OffsetOverflowError;
      .           
    630 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
      .           pub enum SourceFileHashAlgorithm {
      .               Md5,
      .               Sha1,
      .               Sha256,
      .           }
      .           
      .           impl FromStr for SourceFileHashAlgorithm {
      .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
      .                       _ => Err(()),
      .                   }
      .               }
      .           }
      .           
      .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
      .           
      .           /// The hash of the on-disk source file used for debug info.
      6 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
  1,260 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
      .           pub struct SourceFileHash {
      .               pub kind: SourceFileHashAlgorithm,
      .               value: [u8; 32],
      .           }
      .           
      .           impl SourceFileHash {
      .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
      .                   let mut hash = SourceFileHash { kind, value: Default::default() };
      .                   let len = hash.hash_len();
      .                   let value = &mut hash.value[..len];
      .                   let data = src.as_bytes();
      .                   match kind {
      .                       SourceFileHashAlgorithm::Md5 => {
      3 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
      .                       }
      .                       SourceFileHashAlgorithm::Sha1 => {
      .                           value.copy_from_slice(&Sha1::digest(data));
      .                       }
      .                       SourceFileHashAlgorithm::Sha256 => {
      .                           value.copy_from_slice(&Sha256::digest(data));
      .                       }
      .                   }
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
      .           
      .               /// The bytes of the hash.
      .               pub fn hash_bytes(&self) -> &[u8] {
      .                   let len = self.hash_len();
      .                   &self.value[..len]
      .               }
      .           
      .               fn hash_len(&self) -> usize {
      3 ( 0.00%)          match self.kind {
      .                       SourceFileHashAlgorithm::Md5 => 16,
      .                       SourceFileHashAlgorithm::Sha1 => 20,
      .                       SourceFileHashAlgorithm::Sha256 => 32,
      .                   }
      .               }
      .           }
      .           
      .           /// A single source in the [`SourceMap`].
     58 ( 0.00%)  #[derive(Clone)]
      .           pub struct SourceFile {
      .               /// The name of the file that the source came from. Source that doesn't
      .               /// originate from files has names between angle brackets by convention
      .               /// (e.g., `<anon>`).
      .               pub name: FileName,
      .               /// The complete source code.
      1 ( 0.00%)      pub src: Option<Lrc<String>>,
      .               /// The source code's hash.
      .               pub src_hash: SourceFileHash,
      .               /// The external source code (used for external crates, which will have a `None`
      .               /// value as `self.src`.
      .               pub external_src: Lock<ExternalSource>,
      .               /// The start position of this source in the `SourceMap`.
      .               pub start_pos: BytePos,
      .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
      .               pub lines: Vec<BytePos>,
      .               /// Locations of multi-byte characters in the source code.
      .               pub multibyte_chars: Vec<MultiByteChar>,
      .               /// Width of characters that are not narrow in the source code.
      .               pub non_narrow_chars: Vec<NonNarrowChar>,
      .               /// Locations of characters removed during normalization.
      .               pub normalized_pos: Vec<NormalizedPos>,
      .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
      1 ( 0.00%)      pub name_hash: u128,
      .               /// Indicates which crate this `SourceFile` was imported from.
      1 ( 0.00%)      pub cnum: CrateNum,
      .           }
      .           
      .           impl<S: Encoder> Encodable<S> for SourceFile {
      .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
      .                   s.emit_struct(false, |s| {
      .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
      .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
      .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
      .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
      .                       s.emit_struct_field("lines", false, |s| {
      .                           let lines = &self.lines[..];
      .                           // Store the length.
      .                           s.emit_u32(lines.len() as u32)?;
      .           
      4 ( 0.00%)                  if !lines.is_empty() {
      .                               // In order to preserve some space, we exploit the fact that
      .                               // the lines list is sorted and individual lines are
      .                               // probably not that long. Because of that we can store lines
      .                               // as a difference list, using as little space as possible
      .                               // for the differences.
      .                               let max_line_length = if lines.len() == 1 {
      .                                   0
      .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
      .                                       .array_windows()
      .                                       .map(|&[fst, snd]| snd - fst)
      .                                       .map(|bp| bp.to_usize())
      .                                       .max()
      .                                       .unwrap()
      .                               };
      .           
      .                               let bytes_per_diff: u8 = match max_line_length {
      2 ( 0.00%)                          0..=0xFF => 1,
      4 ( 0.00%)                          0x100..=0xFFFF => 2,
      .                                   _ => 4,
      .                               };
      .           
      .                               // Encode the number of bytes used per diff.
      .                               bytes_per_diff.encode(s)?;
      .           
      .                               // Encode the first element.
      .                               lines[0].encode(s)?;
      .           
      .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
      .           
      4 ( 0.00%)                      match bytes_per_diff {
      .                                   1 => {
      .                                       for diff in diff_iter {
      .                                           (diff.0 as u8).encode(s)?
      .                                       }
      .                                   }
      .                                   2 => {
      .                                       for diff in diff_iter {
      .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
      .                                   _ => unreachable!(),
      .                               }
      .                           }
      .           
      .                           Ok(())
      .                       })?;
      .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
      .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
      3 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
      .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
     11 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
      .                   })
      .               }
      .           }
      .           
      .           impl<D: Decoder> Decodable<D> for SourceFile {
  2,835 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
      .                   d.read_struct(|d| {
      .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
      .                       let src_hash: SourceFileHash =
      .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
      .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
      .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
      .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
      .                           let num_lines: u32 = Decodable::decode(d);
    315 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
      .           
      .                           if num_lines > 0 {
      .                               // Read the number of bytes used per diff.
      .                               let bytes_per_diff: u8 = Decodable::decode(d);
      .           
      .                               // Read the first element.
      .                               let mut line_start: BytePos = Decodable::decode(d);
      .                               lines.push(line_start);
      .           
      .                               for _ in 1..num_lines {
638,816 ( 0.52%)                          let diff = match bytes_per_diff {
      .                                       1 => d.read_u8() as u32,
      .                                       2 => d.read_u16() as u32,
      .                                       4 => d.read_u32(),
      .                                       _ => unreachable!(),
      .                                   };
      .           
      .                                   line_start = line_start + BytePos(diff);
      .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
      .                           }
      .           
      .                           lines
      .                       });
      .                       let multibyte_chars: Vec<MultiByteChar> =
      .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
      .                       let non_narrow_chars: Vec<NonNarrowChar> =
      .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    630 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
      .                       let normalized_pos: Vec<NormalizedPos> =
      .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
      .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
  3,465 ( 0.00%)              SourceFile {
  2,520 ( 0.00%)                  name,
      .                           start_pos,
      .                           end_pos,
      .                           src: None,
  1,260 ( 0.00%)                  src_hash,
      .                           // Unused - the metadata decoder will construct
      .                           // a new SourceFile, filling in `external_src` properly
      .                           external_src: Lock::new(ExternalSource::Unneeded),
  1,260 ( 0.00%)                  lines,
  1,260 ( 0.00%)                  multibyte_chars,
  1,260 ( 0.00%)                  non_narrow_chars,
  1,260 ( 0.00%)                  normalized_pos,
      .                           name_hash,
      .                           cnum,
      .                       }
      .                   })
  2,835 ( 0.00%)      }
      .           }
      .           
      .           impl fmt::Debug for SourceFile {
      .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   write!(fmt, "SourceFile({:?})", self.name)
      .               }
      .           }
      .           
      .           impl SourceFile {
     11 ( 0.00%)      pub fn new(
      .                   name: FileName,
      .                   mut src: String,
      .                   start_pos: BytePos,
      .                   hash_kind: SourceFileHashAlgorithm,
      .               ) -> Self {
      .                   // Compute the file hash before any normalization.
      .                   let src_hash = SourceFileHash::new(hash_kind, &src);
      3 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
      .           
      .                   let name_hash = {
      .                       let mut hasher: StableHasher = StableHasher::new();
      2 ( 0.00%)              name.hash(&mut hasher);
      .                       hasher.finish::<u128>()
      .                   };
      2 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
      3 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
      .           
     12 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
      2 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
      .           
     17 ( 0.00%)          SourceFile {
      .                       name,
      .                       src: Some(Lrc::new(src)),
     11 ( 0.00%)              src_hash,
      .                       external_src: Lock::new(ExternalSource::Unneeded),
      .                       start_pos,
      .                       end_pos: Pos::from_usize(end_pos),
      4 ( 0.00%)              lines,
      4 ( 0.00%)              multibyte_chars,
      4 ( 0.00%)              non_narrow_chars,
      4 ( 0.00%)              normalized_pos,
      .                       name_hash,
      .                       cnum: LOCAL_CRATE,
      .                   }
      9 ( 0.00%)      }
      .           
      .               /// Returns the `BytePos` of the beginning of the current line.
      .               pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
      .                   let line_index = self.lookup_line(pos).unwrap();
      .                   self.lines[line_index]
      .               }
      .           
      .               /// Add externally loaded source.
      .               /// If the hash of the input doesn't match or no input is supplied via None,
      .               /// it is interpreted as an error and the corresponding enum variant is set.
      .               /// The return value signifies whether some kind of source is present.
    119 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
      .               where
      .                   F: FnOnce() -> Option<String>,
      .               {
     17 ( 0.00%)          if matches!(
     34 ( 0.00%)              *self.external_src.borrow(),
      .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
      .                   ) {
      .                       let src = get_src();
      .                       let mut external_src = self.external_src.borrow_mut();
      .                       // Check that no-one else have provided the source while we were getting it
      .                       if let ExternalSource::Foreign {
      .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
      .                       } = &mut *external_src
-- line 1582 ----------------------------------------
-- line 1592 ----------------------------------------
      .                               *src_kind = ExternalSourceKind::AbsentErr;
      .                           }
      .           
      .                           false
      .                       } else {
      .                           self.src.is_some() || external_src.get_source().is_some()
      .                       }
      .                   } else {
     17 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
      .                   }
    153 ( 0.00%)      }
      .           
      .               /// Gets a line from the list of pre-computed line-beginnings.
      .               /// The line number here is 0-based.
      .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
      .                   fn get_until_newline(src: &str, begin: usize) -> &str {
      .                       // We can't use `lines.get(line_number+1)` because we might
      .                       // be parsing when we call this function and thus the current
      .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
      .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
      .               pub fn is_real_file(&self) -> bool {
      .                   self.name.is_real()
    316 ( 0.00%)      }
      .           
      .               pub fn is_imported(&self) -> bool {
      .                   self.src.is_none()
  1,092 ( 0.00%)      }
      .           
      .               pub fn count_lines(&self) -> usize {
      .                   self.lines.len()
      .               }
      .           
      .               /// Finds the line containing the given position. The return value is the
      .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
      .               /// number. If the source_file is empty or the position is located before the
      .               /// first line, `None` is returned.
      .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
    422 ( 0.00%)          match self.lines.binary_search(&pos) {
      .                       Ok(idx) => Some(idx),
      .                       Err(0) => None,
      .                       Err(idx) => Some(idx - 1),
      .                   }
      .               }
      .           
      .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
    922 ( 0.00%)          if self.is_empty() {
      .                       return self.start_pos..self.end_pos;
      .                   }
      .           
    644 ( 0.00%)          assert!(line_index < self.lines.len());
    900 ( 0.00%)          if line_index == (self.lines.len() - 1) {
      5 ( 0.00%)              self.lines[line_index]..self.end_pos
      .                   } else {
    596 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
      .                   }
      .               }
      .           
      .               /// Returns whether or not the file contains the given `SourceMap` byte
      .               /// position. The position one past the end of the file is considered to be
      .               /// contained by the file. This implies that files for which `is_empty`
      .               /// returns true still contain one byte position according to this function.
      .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
      .                       Err(i) if i == 0 => 0,
      .                       Err(i) => self.normalized_pos[i - 1].diff,
      .                   };
      .           
      .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
      .               }
      .           
      .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
      2 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
      .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
      .                   let mut total_extra_bytes = 0;
      .           
      6 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
      .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
      .                       if mbc.pos < bpos {
      .                           // Every character is at least one byte, so we only
      .                           // count the actual extra bytes.
      .                           total_extra_bytes += mbc.bytes as u32 - 1;
      .                           // We should never see a byte position in the middle of a
      .                           // character.
      .                           assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
      .                       } else {
      .                           break;
      .                       }
      .                   }
      .           
     12 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
     10 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
      4 ( 0.00%)      }
      .           
      .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
      .               /// given `BytePos`.
      7 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
      2 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
      .                   match self.lookup_line(pos) {
      .                       Some(a) => {
      .                           let line = a + 1; // Line numbers start at 1
      1 ( 0.00%)                  let linebpos = self.lines[a];
      2 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
      .                           let col = chpos - linechpos;
      .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
      .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
      .                           debug!("byte is on line: {}", line);
      1 ( 0.00%)                  assert!(chpos >= linechpos);
      .                           (line, col)
      .                       }
      .                       None => (0, chpos),
      .                   }
      8 ( 0.00%)      }
      .           
      .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
      .               /// column offset when displayed, for a given `BytePos`.
      8 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
      3 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
      2 ( 0.00%)          if line > 0 {
      .                       let col = col_or_chpos;
      1 ( 0.00%)              let linebpos = self.lines[line - 1];
      .                       let col_display = {
      .                           let start_width_idx = self
      .                               .non_narrow_chars
      .                               .binary_search_by_key(&linebpos, |x| x.pos())
      .                               .unwrap_or_else(|x| x);
      .                           let end_width_idx = self
      .                               .non_narrow_chars
      .                               .binary_search_by_key(&pos, |x| x.pos())
      .                               .unwrap_or_else(|x| x);
      .                           let special_chars = end_width_idx - start_width_idx;
      .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
      .                               .iter()
      .                               .map(|x| x.width())
      .                               .sum();
      5 ( 0.00%)                  col.0 - special_chars + non_narrow
      .                       };
      .                       (line, col, col_display)
      .                   } else {
      .                       let chpos = col_or_chpos;
      .                       let col_display = {
      .                           let end_width_idx = self
      .                               .non_narrow_chars
      .                               .binary_search_by_key(&pos, |x| x.pos())
      .                               .unwrap_or_else(|x| x);
      .                           let non_narrow: usize =
      .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
      .                           chpos.0 - end_width_idx + non_narrow
      .                       };
      .                       (0, chpos, col_display)
      .                   }
      7 ( 0.00%)      }
      .           }
      .           
      .           /// Normalizes the source code and records the normalizations.
     10 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
      .               let mut normalized_pos = vec![];
      .               remove_bom(src, &mut normalized_pos);
      .               normalize_newlines(src, &mut normalized_pos);
      .           
      .               // Offset all the positions by start_pos to match the final file positions.
      .               for np in &mut normalized_pos {
      .                   np.pos.0 += start_pos.0;
      .               }
      .           
      .               normalized_pos
      9 ( 0.00%)  }
      .           
      .           /// Removes UTF-8 BOM, if any.
      .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
      1 ( 0.00%)      if src.starts_with('\u{feff}') {
      .                   src.drain(..3);
      .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
      .               }
      .           }
      .           
      .           /// Replaces `\r\n` with `\n` in-place in `src`.
      .           ///
      .           /// Returns error if there's a lone `\r` in the string.
      .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
      1 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
      .                   return;
      .               }
      .           
      .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
      .               // While we *can* call `as_mut_vec` and do surgery on the live string
      .               // directly, let's rather steal the contents of `src`. This makes the code
      .               // safe even if a panic occurs.
      .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
      .               (
      .                   $(
      .                       $(#[$attr:meta])*
      .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
      .                   )*
      .               ) => {
      .                   $(
      .                       $(#[$attr])*
  1,884 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
      .           
      .                       impl Pos for $ident {
      .                           #[inline(always)]
      .                           fn from_usize(n: usize) -> $ident {
    297 ( 0.00%)                      $ident(n as $inner_ty)
      .                           }
      .           
      .                           #[inline(always)]
      .                           fn to_usize(&self) -> usize {
  4,149 ( 0.00%)                      self.0 as usize
      .                           }
      .           
      .                           #[inline(always)]
      .                           fn from_u32(n: u32) -> $ident {
      .                               $ident(n as $inner_ty)
      .                           }
      .           
      .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
      .                           }
      .                       }
      .           
      .                       impl Add for $ident {
      .                           type Output = $ident;
      .           
      .                           #[inline(always)]
      .                           fn add(self, rhs: $ident) -> $ident {
984,575 ( 0.80%)                      $ident(self.0 + rhs.0)
      .                           }
      .                       }
      .           
      .                       impl Sub for $ident {
      .                           type Output = $ident;
      .           
      .                           #[inline(always)]
      .                           fn sub(self, rhs: $ident) -> $ident {
523,306 ( 0.43%)                      $ident(self.0 - rhs.0)
      .                           }
      .                       }
      .                   )*
      .               };
      .           }
      .           
      .           impl_pos! {
      .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
      .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
      .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
      .                   s.emit_u32(self.0)
      .               }
      .           }
      .           
      .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
      .               fn decode(d: &mut D) -> BytePos {
 22,848 ( 0.02%)          BytePos(d.read_u32())
      .               }
      .           }
      .           
      .           // _____________________________________________________________________________
      .           // Loc, SourceFileAndLine, SourceFileAndBytePos
      .           //
      .           
      .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2079 ----------------------------------------
      .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
      .               /// triple, which stays the same even if the containing `SourceFile` has moved
      .               /// within the `SourceMap`.
      .               ///
      .               /// Also note that we are hashing byte offsets for the column, not unicode
      .               /// codepoint offsets. For the purpose of the hash that's sufficient.
      .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
      .               /// span starts and ends in the same file, which is almost always the case.
 15,582 ( 0.01%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
      .                   const TAG_VALID_SPAN: u8 = 0;
      .                   const TAG_INVALID_SPAN: u8 = 1;
      .                   const TAG_RELATIVE_SPAN: u8 = 2;
      .           
  3,462 ( 0.00%)          if !ctx.hash_spans() {
      .                       return;
      .                   }
      .           
 12,120 ( 0.01%)          let span = self.data_untracked();
  2,970 ( 0.00%)          span.ctxt.hash_stable(ctx, hasher);
  6,678 ( 0.01%)          span.parent.hash_stable(ctx, hasher);
      .           
  4,502 ( 0.00%)          if span.is_dummy() {
      .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
      .                       return;
      .                   }
      .           
  4,352 ( 0.00%)          if let Some(parent) = span.parent {
      .                       let def_span = ctx.def_span(parent).data_untracked();
      .                       if def_span.contains(span) {
      .                           // This span is enclosed in a definition: only hash the relative position.
      .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
      .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
      .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
      .                           return;
      .                       }
      .                   }
      .           
      .                   // If this is not an empty or invalid span, we want to hash the last
      .                   // position that belongs to it, as opposed to hashing the first
      .                   // position past it.
  8,704 ( 0.01%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
      .                   {
  4,352 ( 0.00%)              Some(pos) => pos,
      .                       None => {
      .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
      .                           return;
      .                       }
      .                   };
      .           
      .                   Hash::hash(&TAG_VALID_SPAN, hasher);
      .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
      .                   // hash only the length, for example, then two otherwise equal spans with
      .                   // different end locations will have the same hash. This can cause a problem
      .                   // during incremental compilation wherein a previous result for a query that
      .                   // depends on the end location of a span will be incorrectly reused when the
      .                   // end location of the span it depends on has changed (see issue #74890). A
      .                   // similar analysis applies if some query depends specifically on the length
      .                   // of the span, but we only hash the end location. So hash both.
      .           
  2,176 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
      .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
      .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
      .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
      .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
  2,176 ( 0.00%)          let len = (span.hi - span.lo).0;
      .                   Hash::hash(&col_line, hasher);
      .                   Hash::hash(&len, hasher);
 17,808 ( 0.01%)      }
      .           }

769,047 ( 0.63%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs
--------------------------------------------------------------------------------
Ir               

-- line 222 ----------------------------------------
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               fn eq(&self, other: &Rhs) -> bool;
      .           
      .               /// This method tests for `!=`.
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
     21 ( 0.00%)      fn ne(&self, other: &Rhs) -> bool {
  1,787 ( 0.00%)          !self.eq(other)
     28 ( 0.00%)      }
      .           }
      .           
      .           /// Derive macro generating an impl of the trait `PartialEq`.
      .           #[rustc_builtin_macro]
      .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
      .           #[allow_internal_unstable(core_intrinsics, structural_match)]
      .           pub macro PartialEq($item:item) {
      .               /* compiler built-in */
-- line 240 ----------------------------------------
-- line 328 ----------------------------------------
      .           /// assert_eq!(Ordering::Less, result);
      .           ///
      .           /// let result = 1.cmp(&1);
      .           /// assert_eq!(Ordering::Equal, result);
      .           ///
      .           /// let result = 2.cmp(&1);
      .           /// assert_eq!(Ordering::Greater, result);
      .           /// ```
      9 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Debug, Hash)]
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           #[repr(i8)]
      .           pub enum Ordering {
      .               /// An ordering where a compared value is less than another.
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               Less = -1,
      .               /// An ordering where a compared value is equal to another.
      .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 344 ----------------------------------------
-- line 569 ----------------------------------------
      .               /// let result = x.0.cmp(&y.0).then_with(|| x.1.cmp(&y.1)).then_with(|| x.2.cmp(&y.2));
      .               ///
      .               /// assert_eq!(result, Ordering::Less);
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "ordering_chaining", since = "1.17.0")]
      .               pub fn then_with<F: FnOnce() -> Ordering>(self, f: F) -> Ordering {
      9 ( 0.00%)          match self {
      .                       Equal => f(),
      .                       _ => self,
      .                   }
      .               }
      .           }
      .           
      .           /// A helper struct for reverse ordering.
      .           ///
-- line 585 ----------------------------------------
-- line 788 ----------------------------------------
      .               ///
      .               /// ```
      .               /// assert_eq!(2, 1.max(2));
      .               /// assert_eq!(2, 2.max(2));
      .               /// ```
      .               #[stable(feature = "ord_max_min", since = "1.21.0")]
      .               #[inline]
      .               #[must_use]
    270 ( 0.00%)      fn max(self, other: Self) -> Self
      .               where
      .                   Self: Sized,
      .               {
  1,490 ( 0.00%)          max_by(self, other, Ord::cmp)
    180 ( 0.00%)      }
      .           
      .               /// Compares and returns the minimum of two values.
      .               ///
      .               /// Returns the first argument if the comparison determines them to be equal.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 809 ----------------------------------------
-- line 812 ----------------------------------------
      .               /// ```
      .               #[stable(feature = "ord_max_min", since = "1.21.0")]
      .               #[inline]
      .               #[must_use]
      .               fn min(self, other: Self) -> Self
      .               where
      .                   Self: Sized,
      .               {
     70 ( 0.00%)          min_by(self, other, Ord::cmp)
      .               }
      .           
      .               /// Restrict a value to a certain interval.
      .               ///
      .               /// Returns `max` if `self` is greater than `max`, and `min` if `self` is
      .               /// less than `min`. Otherwise this returns `self`.
      .               ///
      .               /// # Panics
-- line 828 ----------------------------------------
-- line 1097 ----------------------------------------
      .               /// let result = 2.0 < 1.0;
      .               /// assert_eq!(result, false);
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn lt(&self, other: &Rhs) -> bool {
  4,051 ( 0.00%)          matches!(self.partial_cmp(other), Some(Less))
      .               }
      .           
      .               /// This method tests less than or equal to (for `self` and `other`) and is used by the `<=`
      .               /// operator.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 1113 ----------------------------------------
-- line 1121 ----------------------------------------
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn le(&self, other: &Rhs) -> bool {
      .                   // Pattern `Some(Less | Eq)` optimizes worse than negating `None | Some(Greater)`.
      .                   // FIXME: The root cause was fixed upstream in LLVM with:
      .                   // https://github.com/llvm/llvm-project/commit/9bad7de9a3fb844f1ca2965f35d0c2a3d1e11775
      .                   // Revert this workaround once support for LLVM 12 gets dropped.
 15,859 ( 0.01%)          !matches!(self.partial_cmp(other), None | Some(Greater))
      .               }
      .           
      .               /// This method tests greater than (for `self` and `other`) and is used by the `>` operator.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let result = 1.0 > 2.0;
-- line 1137 ----------------------------------------
-- line 1140 ----------------------------------------
      .               /// let result = 2.0 > 2.0;
      .               /// assert_eq!(result, false);
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn gt(&self, other: &Rhs) -> bool {
 22,457 ( 0.02%)          matches!(self.partial_cmp(other), Some(Greater))
      .               }
      .           
      .               /// This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`
      .               /// operator.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 1156 ----------------------------------------
-- line 1210 ----------------------------------------
      .           ///
      .           /// assert_eq!(cmp::min_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 1);
      .           /// assert_eq!(cmp::min_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
      .           /// ```
      .           #[inline]
      .           #[must_use]
      .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
      .           pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
  6,838 ( 0.01%)      match compare(&v1, &v2) {
      .                   Ordering::Less | Ordering::Equal => v1,
      .                   Ordering::Greater => v2,
      .               }
      .           }
      .           
      .           /// Returns the element that gives the minimum value from the specified function.
      .           ///
      .           /// Returns the first argument if the comparison determines them to be equal.
-- line 1226 ----------------------------------------
-- line 1253 ----------------------------------------
      .           ///
      .           /// assert_eq!(2, cmp::max(1, 2));
      .           /// assert_eq!(2, cmp::max(2, 2));
      .           /// ```
      .           #[inline]
      .           #[must_use]
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           #[cfg_attr(not(test), rustc_diagnostic_item = "cmp_max")]
    270 ( 0.00%)  pub fn max<T: Ord>(v1: T, v2: T) -> T {
    180 ( 0.00%)      v1.max(v2)
    180 ( 0.00%)  }
      .           
      .           /// Returns the maximum of two values with respect to the specified comparison function.
      .           ///
      .           /// Returns the second argument if the comparison determines them to be equal.
      .           ///
      .           /// # Examples
      .           ///
      .           /// ```
-- line 1271 ----------------------------------------
-- line 1272 ----------------------------------------
      .           /// use std::cmp;
      .           ///
      .           /// assert_eq!(cmp::max_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
      .           /// assert_eq!(cmp::max_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 2);
      .           /// ```
      .           #[inline]
      .           #[must_use]
      .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
    270 ( 0.00%)  pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
 17,007 ( 0.01%)      match compare(&v1, &v2) {
    299 ( 0.00%)          Ordering::Less | Ordering::Equal => v2,
    132 ( 0.00%)          Ordering::Greater => v1,
      .               }
    764 ( 0.00%)  }
      .           
      .           /// Returns the element that gives the maximum value from the specified function.
      .           ///
      .           /// Returns the second argument if the comparison determines them to be equal.
      .           ///
      .           /// # Examples
      .           ///
      .           /// ```
-- line 1293 ----------------------------------------
-- line 1308 ----------------------------------------
      .               use crate::cmp::Ordering::{self, Equal, Greater, Less};
      .               use crate::hint::unreachable_unchecked;
      .           
      .               macro_rules! partial_eq_impl {
      .                   ($($t:ty)*) => ($(
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl PartialEq for $t {
      .                           #[inline]
    323 ( 0.00%)                  fn eq(&self, other: &$t) -> bool { (*self) == (*other) }
      .                           #[inline]
  5,312 ( 0.00%)                  fn ne(&self, other: &$t) -> bool { (*self) != (*other) }
      .                       }
      .                   )*)
      .               }
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl PartialEq for () {
      .                   #[inline]
      .                   fn eq(&self, _other: &()) -> bool {
-- line 1326 ----------------------------------------
-- line 1392 ----------------------------------------
      .                   ($($t:ty)*) => ($(
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl PartialOrd for $t {
      .                           #[inline]
      .                           fn partial_cmp(&self, other: &$t) -> Option<Ordering> {
      .                               Some(self.cmp(other))
      .                           }
      .                           #[inline]
483,695 ( 0.39%)                  fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
      .                           #[inline]
  1,530 ( 0.00%)                  fn le(&self, other: &$t) -> bool { (*self) <= (*other) }
      .                           #[inline]
      .                           fn ge(&self, other: &$t) -> bool { (*self) >= (*other) }
      .                           #[inline]
      .                           fn gt(&self, other: &$t) -> bool { (*self) > (*other) }
      .                       }
      .           
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl Ord for $t {
      .                           #[inline]
    450 ( 0.00%)                  fn cmp(&self, other: &$t) -> Ordering {
      .                               // The order here is important to generate more optimal assembly.
      .                               // See <https://github.com/rust-lang/rust/issues/63758> for more info.
 60,120 ( 0.05%)                      if *self < *other { Less }
    220 ( 0.00%)                      else if *self == *other { Equal }
     44 ( 0.00%)                      else { Greater }
    270 ( 0.00%)                  }
      .                       }
      .                   )*)
      .               }
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl Ord for () {
      .                   #[inline]
      .                   fn cmp(&self, _other: &()) -> Ordering {
-- line 1426 ----------------------------------------
-- line 1430 ----------------------------------------
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl Ord for bool {
      .                   #[inline]
      .                   fn cmp(&self, other: &bool) -> Ordering {
      .                       // Casting to i8's and converting the difference to an Ordering generates
      .                       // more optimal assembly.
      .                       // See <https://github.com/rust-lang/rust/issues/66780> for more info.
     28 ( 0.00%)              match (*self as i8) - (*other as i8) {
      .                           -1 => Less,
      .                           0 => Equal,
      .                           1 => Greater,
      .                           // SAFETY: bool as i8 returns 0 or 1, so the difference can't be anything else
      .                           _ => unsafe { unreachable_unchecked() },
      .                       }
      .                   }
      .               }
-- line 1446 ----------------------------------------
-- line 1474 ----------------------------------------
      .               // & pointers
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized, B: ?Sized> PartialEq<&B> for &A
      .               where
      .                   A: PartialEq<B>,
      .               {
      .                   #[inline]
  1,015 ( 0.00%)          fn eq(&self, other: &&B) -> bool {
 12,724 ( 0.01%)              PartialEq::eq(*self, *other)
  2,081 ( 0.00%)          }
      .                   #[inline]
      .                   fn ne(&self, other: &&B) -> bool {
     15 ( 0.00%)              PartialEq::ne(*self, *other)
    858 ( 0.00%)          }
      .               }
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized, B: ?Sized> PartialOrd<&B> for &A
      .               where
      .                   A: PartialOrd<B>,
      .               {
      .                   #[inline]
      .                   fn partial_cmp(&self, other: &&B) -> Option<Ordering> {
-- line 1496 ----------------------------------------
-- line 1516 ----------------------------------------
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized> Ord for &A
      .               where
      .                   A: Ord,
      .               {
      .                   #[inline]
      .                   fn cmp(&self, other: &Self) -> Ordering {
      .                       Ord::cmp(*self, *other)
     64 ( 0.00%)          }
      .               }
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized> Eq for &A where A: Eq {}
      .           
      .               // &mut pointers
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized, B: ?Sized> PartialEq<&mut B> for &mut A
-- line 1532 ----------------------------------------

 61,193 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 71 ----------------------------------------
      .               fn default() -> FxHasher {
      .                   FxHasher { hash: 0 }
      .               }
      .           }
      .           
      .           impl FxHasher {
      .               #[inline]
      .               fn add_to_hash(&mut self, i: usize) {
 36,958 ( 0.03%)          self.hash = self.hash.rotate_left(5).bitxor(i).wrapping_mul(K);
      .               }
      .           }
      .           
      .           impl Hasher for FxHasher {
      .               #[inline]
    553 ( 0.00%)      fn write(&mut self, mut bytes: &[u8]) {
      .                   #[cfg(target_pointer_width = "32")]
      .                   let read_usize = |bytes: &[u8]| u32::from_ne_bytes(bytes[..4].try_into().unwrap());
      .                   #[cfg(target_pointer_width = "64")]
      .                   let read_usize = |bytes: &[u8]| u64::from_ne_bytes(bytes[..8].try_into().unwrap());
      .           
 12,841 ( 0.01%)          let mut hash = FxHasher { hash: self.hash };
      .                   assert!(size_of::<usize>() <= 8);
146,041 ( 0.12%)          while bytes.len() >= size_of::<usize>() {
      .                       hash.add_to_hash(read_usize(bytes) as usize);
      .                       bytes = &bytes[size_of::<usize>()..];
      .                   }
 25,472 ( 0.02%)          if (size_of::<usize>() > 4) && (bytes.len() >= 4) {
      .                       hash.add_to_hash(u32::from_ne_bytes(bytes[..4].try_into().unwrap()) as usize);
      .                       bytes = &bytes[4..];
      .                   }
 25,472 ( 0.02%)          if (size_of::<usize>() > 2) && bytes.len() >= 2 {
      .                       hash.add_to_hash(u16::from_ne_bytes(bytes[..2].try_into().unwrap()) as usize);
      .                       bytes = &bytes[2..];
      .                   }
 28,606 ( 0.02%)          if (size_of::<usize>() > 1) && bytes.len() >= 1 {
  6,712 ( 0.01%)              hash.add_to_hash(bytes[0] as usize);
      .                   }
    668 ( 0.00%)          self.hash = hash.hash;
    553 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn write_u8(&mut self, i: u8) {
      .                   self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u16(&mut self, i: u16) {
     31 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u32(&mut self, i: u32) {
 54,594 ( 0.04%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[cfg(target_pointer_width = "32")]
      .               #[inline]
      .               fn write_u64(&mut self, i: u64) {
      .                   self.add_to_hash(i as usize);
      .                   self.add_to_hash((i >> 32) as usize);
      .               }
-- line 131 ----------------------------------------

      1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir              

-- line 118 ----------------------------------------
     .               /// let a = [1, 2, 3];
     .               /// assert_eq!(a.len(), 3);
     .               /// ```
     .               #[lang = "slice_len_fn"]
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[rustc_const_stable(feature = "const_slice_len", since = "1.39.0")]
     .               #[inline]
     .               // SAFETY: const sound because we transmute out the length field as a usize (which it must be)
    93 ( 0.00%)      pub const fn len(&self) -> usize {
     .                   // FIXME: Replace with `crate::ptr::metadata(self)` when that is const-stable.
     .                   // As of this writing this causes a "Const-stable functions can only call other
     .                   // const-stable functions" error.
     .           
     .                   // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T
     .                   // and PtrComponents<T> have the same memory layouts. Only std can make this
     .                   // guarantee.
    93 ( 0.00%)          unsafe { crate::ptr::PtrRepr { const_ptr: self }.components.metadata }
    62 ( 0.00%)      }
     .           
     .               /// Returns `true` if the slice has a length of 0.
     .               ///
     .               /// # Examples
     .               ///
     .               /// ```
     .               /// let a = [1, 2, 3];
     .               /// assert!(!a.is_empty());
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
     .               #[inline]
     .               pub const fn is_empty(&self) -> bool {
10,742 ( 0.01%)          self.len() == 0
     .               }
     .           
     .               /// Returns the first element of the slice, or `None` if it is empty.
     .               ///
     .               /// # Examples
     .               ///
     .               /// ```
     .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 159 ----------------------------------------
     .               ///
     .               /// let w: &[i32] = &[];
     .               /// assert_eq!(None, w.first());
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
     .               #[inline]
     .               pub const fn first(&self) -> Option<&T> {
   141 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
     .               }
     .           
     .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
     .               ///
     .               /// # Examples
     .               ///
     .               /// ```
     .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 178 ----------------------------------------
     .               ///     *first = 5;
     .               /// }
     .               /// assert_eq!(x, &[5, 1, 2]);
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
     .               #[inline]
     .               pub const fn first_mut(&mut self) -> Option<&mut T> {
    16 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
     .               }
     .           
     .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
     .               ///
     .               /// # Examples
     .               ///
     .               /// ```
     .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 197 ----------------------------------------
     .               ///     assert_eq!(first, &0);
     .               ///     assert_eq!(elements, &[1, 2]);
     .               /// }
     .               /// ```
     .               #[stable(feature = "slice_splits", since = "1.5.0")]
     .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
     .               #[inline]
     .               pub const fn split_first(&self) -> Option<(&T, &[T])> {
    14 ( 0.00%)          if let [first, tail @ ..] = self { Some((first, tail)) } else { None }
     .               }
     .           
     .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
     .               ///
     .               /// # Examples
     .               ///
     .               /// ```
     .               /// let x = &mut [0, 1, 2];
-- line 213 ----------------------------------------
-- line 237 ----------------------------------------
     .               ///     assert_eq!(last, &2);
     .               ///     assert_eq!(elements, &[0, 1]);
     .               /// }
     .               /// ```
     .               #[stable(feature = "slice_splits", since = "1.5.0")]
     .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
     .               #[inline]
     .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
   502 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
     .               }
     .           
     .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
     .               ///
     .               /// # Examples
     .               ///
     .               /// ```
     .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
     .               ///
     .               /// let w: &[i32] = &[];
     .               /// assert_eq!(None, w.last());
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
     .               #[inline]
     .               pub const fn last(&self) -> Option<&T> {
 6,860 ( 0.01%)          if let [.., last] = self { Some(last) } else { None }
     .               }
     .           
     .               /// Returns a mutable pointer to the last item in the slice.
     .               ///
     .               /// # Examples
     .               ///
     .               /// ```
     .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 295 ----------------------------------------
     .               ///     *last = 10;
     .               /// }
     .               /// assert_eq!(x, &[0, 1, 10]);
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
     .               #[inline]
     .               pub const fn last_mut(&mut self) -> Option<&mut T> {
 4,367 ( 0.00%)          if let [.., last] = self { Some(last) } else { None }
     .               }
     .           
     .               /// Returns a reference to an element or subslice depending on the type of
     .               /// index.
     .               ///
     .               /// - If given a position, returns a reference to the element at that
     .               ///   position or `None` if out of bounds.
     .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 447 ----------------------------------------
     .               ///     }
     .               /// }
     .               /// ```
     .               ///
     .               /// [`as_mut_ptr`]: slice::as_mut_ptr
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
     .               #[inline]
 1,000 ( 0.00%)      pub const fn as_ptr(&self) -> *const T {
11,629 ( 0.01%)          self as *const [T] as *const T
   500 ( 0.00%)      }
     .           
     .               /// Returns an unsafe mutable pointer to the slice's buffer.
     .               ///
     .               /// The caller must ensure that the slice outlives the pointer this
     .               /// function returns, or else it will end up pointing to garbage.
     .               ///
     .               /// Modifying the container referenced by this slice may cause its buffer
     .               /// to be reallocated, which would also make any pointers to it invalid.
-- line 465 ----------------------------------------
-- line 475 ----------------------------------------
     .               ///         *x_ptr.add(i) += 2;
     .               ///     }
     .               /// }
     .               /// assert_eq!(x, &[3, 4, 6]);
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
     .               #[inline]
    12 ( 0.00%)      pub const fn as_mut_ptr(&mut self) -> *mut T {
     1 ( 0.00%)          self as *mut [T] as *mut T
     6 ( 0.00%)      }
     .           
     .               /// Returns the two raw pointers spanning the slice.
     .               ///
     .               /// The returned range is half-open, which means that the end pointer
     .               /// points *one past* the last element of the slice. This way, an empty
     .               /// slice is represented by two equal pointers, and the difference between
     .               /// the two pointers represents the size of the slice.
     .               ///
-- line 493 ----------------------------------------
-- line 582 ----------------------------------------
     .               /// v.swap(2, 4);
     .               /// assert!(v == ["a", "b", "e", "d", "c"]);
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
     .               #[inline]
     .               #[track_caller]
     .               pub const fn swap(&mut self, a: usize, b: usize) {
    16 ( 0.00%)          let _ = &self[a];
   301 ( 0.00%)          let _ = &self[b];
     .           
     .                   // SAFETY: we just checked that both `a` and `b` are in bounds
     .                   unsafe { self.swap_unchecked(a, b) }
     .               }
     .           
     .               /// Swaps two elements in the slice, without doing bounds checking.
     .               ///
     .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 677 ----------------------------------------
     .           
     .                       // Because this function is first compiled in isolation,
     .                       // this check tells LLVM that the indexing below is
     .                       // in-bounds.  Then after inlining -- once the actual
     .                       // lengths of the slices are known -- it's removed.
     .                       let (a, b) = (&mut a[..n], &mut b[..n]);
     .           
     .                       for i in 0..n {
    67 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
     .                       }
     .                   }
     .               }
     .           
     .               /// Returns an iterator over the slice.
     .               ///
     .               /// # Examples
     .               ///
-- line 693 ----------------------------------------
-- line 697 ----------------------------------------
     .               ///
     .               /// assert_eq!(iterator.next(), Some(&1));
     .               /// assert_eq!(iterator.next(), Some(&2));
     .               /// assert_eq!(iterator.next(), Some(&4));
     .               /// assert_eq!(iterator.next(), None);
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[inline]
   315 ( 0.00%)      pub fn iter(&self) -> Iter<'_, T> {
   315 ( 0.00%)          Iter::new(self)
   210 ( 0.00%)      }
     .           
     .               /// Returns an iterator that allows modifying each value.
     .               ///
     .               /// # Examples
     .               ///
     .               /// ```
     .               /// let x = &mut [1, 2, 4];
     .               /// for elem in x.iter_mut() {
     .               ///     *elem += 2;
     .               /// }
     .               /// assert_eq!(x, &[3, 4, 6]);
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[inline]
     3 ( 0.00%)      pub fn iter_mut(&mut self) -> IterMut<'_, T> {
     3 ( 0.00%)          IterMut::new(self)
     2 ( 0.00%)      }
     .           
     .               /// Returns an iterator over all contiguous windows of length
     .               /// `size`. The windows overlap. If the slice is shorter than
     .               /// `size`, the iterator returns no values.
     .               ///
     .               /// # Panics
     .               ///
     .               /// Panics if `size` is 0.
-- line 732 ----------------------------------------
-- line 1499 ----------------------------------------
     .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
     .               ///     assert_eq!(right, []);
     .               /// }
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[inline]
     .               #[track_caller]
     .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
    18 ( 0.00%)          assert!(mid <= self.len());
     .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
     .                   // fulfills the requirements of `from_raw_parts_mut`.
     .                   unsafe { self.split_at_unchecked(mid) }
     .               }
     .           
     .               /// Divides one mutable slice into two at an index.
     .               ///
     .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
     .               /// left[1] = 2;
     .               /// right[1] = 4;
     .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[inline]
     .               #[track_caller]
     .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
   858 ( 0.00%)          assert!(mid <= self.len());
     .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
     .                   // fulfills the requirements of `from_raw_parts_mut`.
     .                   unsafe { self.split_at_mut_unchecked(mid) }
     .               }
     .           
     .               /// Divides one slice into two at an index, without doing bounds checking.
     .               ///
     .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
     .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
     .                   let len = self.len();
     .                   let ptr = self.as_mut_ptr();
     .           
     .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
     .                   //
     .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
     .                   // is fine.
   216 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
     .               }
     .           
     .               /// Divides one slice into an array and a remainder slice at an index.
     .               ///
     .               /// The array will contain all indices from `[0, N)` (excluding
     .               /// the index `N` itself) and the slice will contain all
     .               /// indices from `[N, len)` (excluding the index `len` itself).
     .               ///
-- line 1644 ----------------------------------------
-- line 2113 ----------------------------------------
     .               /// assert!(!v.iter().any(|e| e == "hi"));
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[inline]
     .               pub fn contains(&self, x: &T) -> bool
     .               where
     .                   T: PartialEq,
     .               {
     4 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
     .               }
     .           
     .               /// Returns `true` if `needle` is a prefix of the slice.
     .               ///
     .               /// # Examples
     .               ///
     .               /// ```
     .               /// let v = [10, 40, 30];
-- line 2129 ----------------------------------------
-- line 2137 ----------------------------------------
     .               ///
     .               /// ```
     .               /// let v = &[10, 40, 30];
     .               /// assert!(v.starts_with(&[]));
     .               /// let v: &[u8] = &[];
     .               /// assert!(v.starts_with(&[]));
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
   378 ( 0.00%)      pub fn starts_with(&self, needle: &[T]) -> bool
     .               where
     .                   T: PartialEq,
     .               {
   162 ( 0.00%)          let n = needle.len();
 9,019 ( 0.01%)          self.len() >= n && needle == &self[..n]
   270 ( 0.00%)      }
     .           
     .               /// Returns `true` if `needle` is a suffix of the slice.
     .               ///
     .               /// # Examples
     .               ///
     .               /// ```
     .               /// let v = [10, 40, 30];
     .               /// assert!(v.ends_with(&[30]));
-- line 2159 ----------------------------------------
-- line 2171 ----------------------------------------
     .               /// assert!(v.ends_with(&[]));
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               pub fn ends_with(&self, needle: &[T]) -> bool
     .               where
     .                   T: PartialEq,
     .               {
     .                   let (m, n) = (self.len(), needle.len());
   446 ( 0.00%)          m >= n && needle == &self[m - n..]
     .               }
     .           
     .               /// Returns a subslice with the prefix removed.
     .               ///
     .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
     .               /// If `prefix` is empty, simply returns the original slice.
     .               ///
     .               /// If the slice does not start with `prefix`, returns `None`.
-- line 2187 ----------------------------------------
-- line 2293 ----------------------------------------
     .               /// s.insert(idx, num);
     .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
     .               where
     .                   T: Ord,
     .               {
     3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
     .               }
     .           
     .               /// Binary searches this sorted slice with a comparator function.
     .               ///
     .               /// The comparator function should implement an order consistent
     .               /// with the sort order of the underlying slice, returning an
     .               /// order code that indicates whether its argument is `Less`,
     .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
     .               #[inline]
     .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
     .               where
     .                   F: FnMut(&'a T) -> Ordering,
     .               {
     .                   let mut size = self.len();
     .                   let mut left = 0;
     .                   let mut right = size;
39,698 ( 0.03%)          while left < right {
55,594 ( 0.05%)              let mid = left + size / 2;
     .           
     .                       // SAFETY: the call is made safe by the following invariants:
     .                       // - `mid >= 0`
     .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
21,534 ( 0.02%)              let cmp = f(unsafe { self.get_unchecked(mid) });
     .           
     .                       // The reason why we use if/else control flow rather than match
     .                       // is because match reorders comparison operations, which is perf sensitive.
     .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
16,918 ( 0.01%)              if cmp == Less {
19,429 ( 0.02%)                  left = mid + 1;
 9,838 ( 0.01%)              } else if cmp == Greater {
     .                           right = mid;
     .                       } else {
     .                           // SAFETY: same as the `get_unchecked` above
     .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
     .                           return Ok(mid);
     .                       }
     .           
45,814 ( 0.04%)              size = right - left;
     .                   }
     .                   Err(left)
     .               }
     .           
     .               /// Binary searches this sorted slice with a key extraction function.
     .               ///
     .               /// Assumes that the slice is sorted by the key, for instance with
     .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3187 ----------------------------------------
     .               /// assert_eq!(slice, [4, 5, 3, 4, 5]);
     .               /// ```
     .               ///
     .               /// [`clone_from_slice`]: slice::clone_from_slice
     .               /// [`split_at_mut`]: slice::split_at_mut
     .               #[doc(alias = "memcpy")]
     .               #[stable(feature = "copy_from_slice", since = "1.9.0")]
     .               #[track_caller]
    20 ( 0.00%)      pub fn copy_from_slice(&mut self, src: &[T])
     .               where
     .                   T: Copy,
     .               {
     .                   // The panic code path was put into a cold function to not bloat the
     .                   // call site.
     .                   #[inline(never)]
     .                   #[cold]
     .                   #[track_caller]
     .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
     .                       panic!(
     .                           "source slice length ({}) does not match destination slice length ({})",
     .                           src_len, dst_len,
     .                       );
     .                   }
     .           
   938 ( 0.00%)          if self.len() != src.len() {
     .                       len_mismatch_fail(self.len(), src.len());
     .                   }
     .           
     .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
     .                   // checked to have the same length. The slices cannot overlap because
     .                   // mutable references are exclusive.
     .                   unsafe {
    12 ( 0.00%)              ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
     .                   }
     4 ( 0.00%)      }
     .           
     .               /// Copies elements from one part of the slice to another part of itself,
     .               /// using a memmove.
     .               ///
     .               /// `src` is the range within `self` to copy from. `dest` is the starting
     .               /// index of the range within `self` to copy to, which will have the same
     .               /// length as `src`. The two ranges may overlap. The ends of the two ranges
     .               /// must be less than or equal to `self.len()`.
-- line 3229 ----------------------------------------
-- line 3380 ----------------------------------------
     .                       }
     .                       a << k
     .                   }
     .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
     .                   let ts: usize = mem::size_of::<U>() / gcd;
     .                   let us: usize = mem::size_of::<T>() / gcd;
     .           
     .                   // Armed with this knowledge, we can find how many `U`s we can fit!
     4 ( 0.00%)          let us_len = self.len() / ts * us;
     .                   // And how many `T`s will be in the trailing slice!
   166 ( 0.00%)          let ts_len = self.len() % ts;
     .                   (us_len, ts_len)
     .               }
     .           
     .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
     .               /// maintained.
     .               ///
     .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
     .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
     .                       return (self, &[], &[]);
     .                   }
     .           
     .                   // First, find at what point do we split between the first and 2nd slice. Easy with
     .                   // ptr.align_offset.
     .                   let ptr = self.as_ptr();
     .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
     .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
   166 ( 0.00%)          if offset > self.len() {
     .                       (self, &[], &[])
     .                   } else {
     .                       let (left, rest) = self.split_at(offset);
     .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
     .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
     .                       // since the caller guarantees that we can transmute `T` to `U` safely.
     .                       unsafe {
     .                           (
     .                               left,
     .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
   170 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
     .                           )
     .                       }
     .                   }
     .               }
     .           
     .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
     .               /// maintained.
     .               ///
-- line 3456 ----------------------------------------

33,284 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 111 ----------------------------------------
      .           const EMPTY: u8 = 0b1111_1111;
      .           
      .           /// Control byte value for a deleted bucket.
      .           const DELETED: u8 = 0b1000_0000;
      .           
      .           /// Checks whether a control byte represents a full bucket (top bit is clear).
      .           #[inline]
      .           fn is_full(ctrl: u8) -> bool {
 86,513 ( 0.07%)      ctrl & 0x80 == 0
      .           }
      .           
      .           /// Checks whether a control byte represents a special value (top bit is set).
      .           #[inline]
      .           fn is_special(ctrl: u8) -> bool {
      .               ctrl & 0x80 != 0
      .           }
      .           
      .           /// Checks whether a special control value is EMPTY (just check 1 bit).
      .           #[inline]
      .           fn special_is_empty(ctrl: u8) -> bool {
      .               debug_assert!(is_special(ctrl));
  7,619 ( 0.01%)      ctrl & 0x01 != 0
      .           }
      .           
      .           /// Primary hash function, used to select the initial bucket to probe from.
      .           #[inline]
      .           #[allow(clippy::cast_possible_truncation)]
      .           fn h1(hash: u64) -> usize {
      .               // On 32-bit platforms we simply ignore the higher hash bits.
      .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
      .           /// Secondary hash function, saved in the low 7 bits of the control byte.
      .           #[inline]
      .           #[allow(clippy::cast_possible_truncation)]
      .           fn h2(hash: u64) -> u8 {
      .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
      .               // value, some hash functions (such as FxHash) produce a usize result
      .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
      .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
762,499 ( 0.62%)      let top7 = hash >> (hash_len * 8 - 7);
      .               (top7 & 0x7f) as u8 // truncation
      .           }
      .           
      .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
      .           /// table size is a power of two) to visit every group of elements exactly once.
      .           ///
      .           /// A triangular probe has us jump by 1 more group every time. So first we
      .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
      .               #[inline]
      .               fn move_next(&mut self, bucket_mask: usize) {
      .                   // We should have found an empty bucket by now and ended the probe.
      .                   debug_assert!(
      .                       self.stride <= bucket_mask,
      .                       "Went past end of probe sequence"
      .                   );
      .           
  7,612 ( 0.01%)          self.stride += Group::WIDTH;
  7,612 ( 0.01%)          self.pos += self.stride;
  6,416 ( 0.01%)          self.pos &= bucket_mask;
      .               }
      .           }
      .           
      .           /// Returns the number of buckets needed to hold the given number of items,
      .           /// taking the maximum load factor into account.
      .           ///
      .           /// Returns `None` if an overflow occurs.
      .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
      .           #[cfg_attr(target_os = "emscripten", inline(never))]
      .           #[cfg_attr(not(target_os = "emscripten"), inline)]
      .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
      .               debug_assert_ne!(cap, 0);
      .           
      .               // For small tables we require at least 1 empty bucket so that lookups are
      .               // guaranteed to terminate if an element doesn't exist in the table.
  5,896 ( 0.00%)      if cap < 8 {
      .                   // We don't bother with a table size of 2 buckets since that can only
      .                   // hold a single element. Instead we skip directly to a 4 bucket table
      .                   // which can hold 3 elements.
 11,990 ( 0.01%)          return Some(if cap < 4 { 4 } else { 8 });
      .               }
      .           
      .               // Otherwise require 1/8 buckets to be empty (87.5% load)
      .               //
      .               // Be careful when modifying this, calculate_layout relies on the
      .               // overflow check here.
  3,300 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
      .           
      .               // Any overflows will have been caught by the checked_mul. Also, any
      .               // rounding errors from the division above will be cleaned up by
      .               // next_power_of_two (which can't overflow because of the previous division).
      .               Some(adjusted_cap.next_power_of_two())
      .           }
      .           
      .           /// Returns the maximum effective capacity for the given bucket mask, taking
      .           /// the maximum load factor into account.
      .           #[inline]
      .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
 14,337 ( 0.01%)      if bucket_mask < 8 {
      .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
      .                   // Keep in mind that the bucket mask is one less than the bucket count.
      .                   bucket_mask
      .               } else {
      .                   // For larger tables we reserve 12.5% of the slots as empty.
  4,368 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
      .               }
      .           }
      .           
      .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
      .           /// while keeping the rest of `calculate_layout_for` independent of `T`
      .           #[derive(Copy, Clone)]
      .           struct TableLayout {
      .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
      .           
      .               #[inline]
      .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
      .                   debug_assert!(buckets.is_power_of_two());
      .           
      .                   let TableLayout { size, ctrl_align } = self;
      .                   // Manual layout calculation since Layout methods are not yet stable.
      .                   let ctrl_offset =
 12,666 ( 0.01%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
 16,489 ( 0.01%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
      .           
      .                   Some((
      .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
      .                       ctrl_offset,
      .                   ))
      .               }
      .           }
      .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
      .                   }
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub unsafe fn drop(&self) {
      .                   self.as_ptr().drop_in_place();
      .               }
      .               #[inline]
      .               pub unsafe fn read(&self) -> T {
     34 ( 0.00%)          self.as_ptr().read()
      .               }
      .               #[inline]
      .               pub unsafe fn write(&self, val: T) {
      .                   self.as_ptr().write(val);
      .               }
      .               #[inline]
      .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
      .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
      .               /// Creates a new empty hash table without allocating any memory, using the
      .               /// given allocator.
      .               ///
      .               /// In effect this returns a table with exactly 1 bucket. However we can
      .               /// leave the data pointer dangling since that bucket is never written to
      .               /// due to our load factor forcing us to always have at least 1 free bucket.
      .               #[inline]
      .               pub fn new_in(alloc: A) -> Self {
     30 ( 0.00%)          Self {
      .                       table: RawTableInner::new_in(alloc),
      .                       marker: PhantomData,
      .                   }
      .               }
      .           
      .               /// Allocates a new hash table with the given number of buckets.
      .               ///
      .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
      .               unsafe fn new_uninitialized(
      .                   alloc: A,
      .                   buckets: usize,
      .                   fallibility: Fallibility,
      .               ) -> Result<Self, TryReserveError> {
      .                   debug_assert!(buckets.is_power_of_two());
      .           
      .                   Ok(Self {
     15 ( 0.00%)              table: RawTableInner::new_uninitialized(
      .                           alloc,
      .                           TableLayout::new::<T>(),
      .                           buckets,
      .                           fallibility,
      .                       )?,
      .                       marker: PhantomData,
      .                   })
      .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
      .               /// Attempts to allocate a new hash table with at least enough capacity
      .               /// for inserting the given number of elements without reallocating.
      .               fn fallible_with_capacity(
      .                   alloc: A,
      .                   capacity: usize,
      .                   fallibility: Fallibility,
      .               ) -> Result<Self, TryReserveError> {
      .                   Ok(Self {
    416 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
      .                           alloc,
      .                           TableLayout::new::<T>(),
      .                           capacity,
      .                           fallibility,
      .                       )?,
      .                       marker: PhantomData,
      .                   })
      .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
      .                   debug_assert_ne!(self.table.bucket_mask, 0);
      .                   debug_assert!(index < self.buckets());
      .                   Bucket::from_base_index(self.data_end(), index)
      .               }
      .           
      .               /// Erases an element from the table without dropping it.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    465 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    465 ( 0.00%)          let index = self.bucket_index(item);
      .                   self.table.erase(index);
    930 ( 0.00%)      }
      .           
      .               /// Erases an element from the table, dropping it in place.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::needless_pass_by_value)]
      .               #[allow(deprecated)]
      .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
      .                   // Erase the element from the table first since drop might panic.
    138 ( 0.00%)          self.erase_no_drop(&item);
      .                   item.drop();
      .               }
      .           
      .               /// Finds and erases an element from the table, dropping it in place.
      .               /// Returns true if an element was found.
      .               #[cfg(feature = "raw")]
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
      .                   }
      .               }
      .           
      .               /// Removes an element from the table, returning it.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::needless_pass_by_value)]
      .               #[allow(deprecated)]
      .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    792 ( 0.00%)          self.erase_no_drop(&item);
      3 ( 0.00%)          item.read()
      .               }
      .           
      .               /// Finds and removes an element from the table, returning it.
      .               #[cfg_attr(feature = "inline-more", inline)]
 24,588 ( 0.02%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
     42 ( 0.00%)          match self.find(hash, eq) {
    113 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
  3,296 ( 0.00%)              None => None,
      .                   }
 37,454 ( 0.03%)      }
      .           
      .               /// Marks all table buckets as empty without dropping their contents.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn clear_no_drop(&mut self) {
      .                   self.table.clear_no_drop();
      .               }
      .           
      .               /// Removes all elements from the table without freeing the backing memory.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn clear(&mut self) {
      .                   // Ensure that the table is reset even if one of the drops panic
      .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
      .                   unsafe {
      1 ( 0.00%)              self_.drop_elements();
      .                   }
      .               }
      .           
      7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
    526 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
      .                       for item in self.iter() {
      .                           item.drop();
      .                       }
      .                   }
      8 ( 0.00%)      }
      .           
      .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
      .                   // Calculate the minimal number of elements that we need to reserve
      .                   // space for.
      .                   let min_size = usize::max(self.table.items, min_size);
      .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
      .                       }
      .                   }
      .               }
      .           
      .               /// Ensures that at least `additional` items can be inserted into the table
      .               /// without reallocation.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
 17,415 ( 0.01%)          if additional > self.table.growth_left {
      .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
  9,825 ( 0.01%)              if self
      .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
      .                           .is_err()
      .                       {
      .                           unsafe { hint::unreachable_unchecked() }
      .                       }
      .                   }
      .               }
      .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
      .                   } else {
      .                       Ok(())
      .                   }
      .               }
      .           
      .               /// Out-of-line slow path for `reserve` and `try_reserve`.
      .               #[cold]
      .               #[inline(never)]
 23,592 ( 0.02%)      fn reserve_rehash(
      .                   &mut self,
      .                   additional: usize,
      .                   hasher: impl Fn(&T) -> u64,
      .                   fallibility: Fallibility,
      .               ) -> Result<(), TryReserveError> {
      .                   unsafe {
      .                       self.table.reserve_rehash_inner(
      .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
      .                           TableLayout::new::<T>(),
      .                           if mem::needs_drop::<T>() {
      .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
      .                           } else {
      .                               None
      .                           },
      .                       )
      .                   }
 15,248 ( 0.01%)      }
      .           
      .               /// Allocates a new table of a different size and moves the contents of the
      .               /// current table into it.
      .               fn resize(
      .                   &mut self,
      .                   capacity: usize,
      .                   hasher: impl Fn(&T) -> u64,
      .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
      .                       )
      .                   }
      .               }
      .           
      .               /// Inserts a new element into the table, and returns its raw bucket.
      .               ///
      .               /// This does not check if the given element already exists in the table.
      .               #[cfg_attr(feature = "inline-more", inline)]
150,884 ( 0.12%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
      .                   unsafe {
      .                       let mut index = self.table.find_insert_slot(hash);
      .           
      .                       // We can avoid growing the table once we have reached our load
      .                       // factor if we are replacing a tombstone. This works since the
      .                       // number of EMPTY slots does not change in this case.
    230 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
 88,722 ( 0.07%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
      .                           self.reserve(1, hasher);
      .                           index = self.table.find_insert_slot(hash);
      .                       }
      .           
      .                       self.table.record_item_insert_at(index, old_ctrl, hash);
      .           
      .                       let bucket = self.bucket(index);
      2 ( 0.00%)              bucket.write(value);
      .                       bucket
      .                   }
111,137 ( 0.09%)      }
      .           
      .               /// Attempts to insert a new element without growing the table and return its raw bucket.
      .               ///
      .               /// Returns an `Err` containing the given element if inserting it would require growing the
      .               /// table.
      .               ///
      .               /// This does not check if the given element already exists in the table.
      .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
      .                       }
      .                   }
      .               }
      .           
      .               /// Inserts a new element into the table, and returns a mutable reference to it.
      .               ///
      .               /// This does not check if the given element already exists in the table.
      .               #[cfg_attr(feature = "inline-more", inline)]
 28,560 ( 0.02%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
     22 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
 21,420 ( 0.02%)      }
      .           
      .               /// Inserts a new element into the table, without growing the table.
      .               ///
      .               /// There must be enough space in the table to insert the new element.
      .               ///
      .               /// This does not check if the given element already exists in the table.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
     41 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
 22,449 ( 0.02%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
    246 ( 0.00%)          let bucket = self.table.bucket(index);
      .           
      .                   // If we are replacing a DELETED entry then we don't need to update
      .                   // the load counter.
 45,860 ( 0.04%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
      .           
      .                   bucket.write(value);
 36,967 ( 0.03%)          self.table.items += 1;
      .                   bucket
     56 ( 0.00%)      }
      .           
      .               /// Temporary removes a bucket, applying the given function to the removed
      .               /// element and optionally put back the returned value in the same bucket.
      .               ///
      .               /// Returns `true` if the bucket still contains an element
      .               ///
      .               /// This does not check if the given bucket is actually occupied.
      .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
      .                       true
      .                   } else {
      .                       false
      .                   }
      .               }
      .           
      .               /// Searches for an element in the table.
      .               #[inline]
    104 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
     46 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    626 ( 0.00%)              eq(self.bucket(index).as_ref())
      .                   });
      .           
      .                   // Avoid `Option::map` because it bloats LLVM IR.
      .                   match result {
      .                       Some(index) => Some(unsafe { self.bucket(index) }),
      .                       None => None,
      .                   }
    104 ( 0.00%)      }
      .           
      .               /// Gets a reference to an element in the table.
      .               #[inline]
      .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
    405 ( 0.00%)          match self.find(hash, eq) {
      .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Gets a mutable reference to an element in the table.
      .               #[inline]
      .               pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
    143 ( 0.00%)          match self.find(hash, eq) {
      .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Attempts to get mutable references to `N` entries in the table at once.
      .               ///
      .               /// Returns an array of length `N` with the results of each query.
-- line 855 ----------------------------------------
-- line 920 ----------------------------------------
      .               #[inline]
      .               pub fn len(&self) -> usize {
      .                   self.table.items
      .               }
      .           
      .               /// Returns `true` if the table contains no elements.
      .               #[inline]
      .               pub fn is_empty(&self) -> bool {
 22,814 ( 0.02%)          self.len() == 0
      .               }
      .           
      .               /// Returns the number of buckets in the table.
      .               #[inline]
      .               pub fn buckets(&self) -> usize {
      .                   self.table.bucket_mask + 1
      .               }
      .           
-- line 936 ----------------------------------------
-- line 938 ----------------------------------------
      .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
      .               /// Because we cannot make the `next` method unsafe on the `RawIter`
      .               /// struct, we have to make the `iter` method unsafe.
      .               #[inline]
      .               pub unsafe fn iter(&self) -> RawIter<T> {
      .                   let data = Bucket::from_base_index(self.data_end(), 0);
      .                   RawIter {
      .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
  3,074 ( 0.00%)              items: self.table.items,
      .                   }
      .               }
      .           
      .               /// Returns an iterator over occupied buckets that could match a given hash.
      .               ///
      .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
      .               /// return items that have a hash value different than the one provided. You
      .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
      .               /// Iteration starts at the provided iterator's current location.
      .               ///
      .               /// It is up to the caller to ensure that the iterator is valid for this
      .               /// `RawTable` and covers all items that remain in the table.
      .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
      .                   debug_assert_eq!(iter.len(), self.len());
      .           
      .                   let alloc = self.table.alloc.clone();
    488 ( 0.00%)          let allocation = self.into_allocation();
    366 ( 0.00%)          RawIntoIter {
    610 ( 0.00%)              iter,
      .                       allocation,
      .                       marker: PhantomData,
      .                       alloc,
      .                   }
      .               }
      .           
      .               /// Converts the table into a raw allocation. The contents of the table
      .               /// should be dropped using a `RawIter` before freeing the allocation.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
    192 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
      .                       None
      .                   } else {
      .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
      .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
      .                           Some(lco) => lco,
      .                           None => unsafe { hint::unreachable_unchecked() },
      .                       };
      .                       Some((
     51 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
      .                           layout,
      .                       ))
      .                   };
      .                   mem::forget(self);
      .                   alloc
      .               }
      .           }
      .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
      .               T: Sync,
      .               A: Sync,
      .           {
      .           }
      .           
      .           impl<A> RawTableInner<A> {
      .               #[inline]
      .               const fn new_in(alloc: A) -> Self {
 23,025 ( 0.02%)          Self {
      .                       // Be careful to cast the entire slice to a raw pointer.
      .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
      .                       bucket_mask: 0,
      .                       items: 0,
      .                       growth_left: 0,
      .                       alloc,
      .                   }
      .               }
      .           }
      .           
      .           impl<A: Allocator + Clone> RawTableInner<A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
 21,560 ( 0.02%)      unsafe fn new_uninitialized(
      .                   alloc: A,
      .                   table_layout: TableLayout,
      .                   buckets: usize,
      .                   fallibility: Fallibility,
      .               ) -> Result<Self, TryReserveError> {
      .                   debug_assert!(buckets.is_power_of_two());
      .           
      .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
      .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
      .                   // such allocations will never succeed anyways.
      .                   //
      .                   // This mirrors what Vec does in the standard library.
      .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
      .                       return Err(fallibility.capacity_overflow());
      .                   }
      .           
  5,112 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
      .                       Ok(block) => block.cast(),
      .                       Err(_) => return Err(fallibility.alloc_err(layout)),
      .                   };
      .           
      .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
 12,912 ( 0.01%)          Ok(Self {
      .                       ctrl,
  5,103 ( 0.00%)              bucket_mask: buckets - 1,
      .                       items: 0,
      .                       growth_left: bucket_mask_to_capacity(buckets - 1),
      .                       alloc,
      .                   })
 15,808 ( 0.01%)      }
      .           
      .               #[inline]
  1,676 ( 0.00%)      fn fallible_with_capacity(
      .                   alloc: A,
      .                   table_layout: TableLayout,
      .                   capacity: usize,
      .                   fallibility: Fallibility,
      .               ) -> Result<Self, TryReserveError> {
    428 ( 0.00%)          if capacity == 0 {
    193 ( 0.00%)              Ok(Self::new_in(alloc))
      .                   } else {
      .                       unsafe {
      .                           let buckets =
      .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
      .           
  9,999 ( 0.01%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
      .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
      .           
  1,038 ( 0.00%)                  Ok(result)
      .                       }
      .                   }
  1,676 ( 0.00%)      }
      .           
      .               /// Searches for an empty or deleted bucket which is suitable for inserting
      .               /// a new element and sets the hash for that slot.
      .               ///
      .               /// There must be at least 1 empty bucket in the table.
      .               #[inline]
  7,600 ( 0.01%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
      .                   let index = self.find_insert_slot(hash);
  7,600 ( 0.01%)          let old_ctrl = *self.ctrl(index);
      .                   self.set_ctrl_h2(index, hash);
      .                   (index, old_ctrl)
 15,200 ( 0.01%)      }
      .           
      .               /// Searches for an empty or deleted bucket which is suitable for inserting
      .               /// a new element.
      .               ///
      .               /// There must be at least 1 empty bucket in the table.
      .               #[inline]
      .               fn find_insert_slot(&self, hash: u64) -> usize {
      .                   let mut probe_seq = self.probe_seq(hash);
      .                   loop {
      .                       unsafe {
      .                           let group = Group::load(self.ctrl(probe_seq.pos));
 57,489 ( 0.05%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
169,223 ( 0.14%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
      .           
      .                               // In tables smaller than the group width, trailing control
      .                               // bytes outside the range of the table are filled with
      .                               // EMPTY entries. These will unfortunately trigger a
      .                               // match, but once masked may point to a full bucket that
      .                               // is already occupied. We detect this situation here and
      .                               // perform a second scan starting at the beginning of the
      .                               // table. This second scan is guaranteed to find an empty
      .                               // slot (due to the load factor) before hitting the trailing
      .                               // control bytes (containing EMPTY).
 78,578 ( 0.06%)                      if unlikely(is_full(*self.ctrl(result))) {
      .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
      .                                   debug_assert_ne!(probe_seq.pos, 0);
      .                                   return Group::load_aligned(self.ctrl(0))
      .                                       .match_empty_or_deleted()
      .                                       .lowest_set_bit_nonzero();
      .                               }
      .           
      .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
      .           
      .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
      .               /// code generated, but it is eliminated by LLVM optimizations.
      .               #[inline]
      .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
      .                   let h2_hash = h2(hash);
      .                   let mut probe_seq = self.probe_seq(hash);
      .           
  2,448 ( 0.00%)          loop {
      .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
      .           
105,021 ( 0.09%)              for bit in group.match_byte(h2_hash) {
163,606 ( 0.13%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
      .           
117,319 ( 0.10%)                  if likely(eq(index)) {
      .                               return Some(index);
      .                           }
      .                       }
      .           
 46,384 ( 0.04%)              if likely(group.match_empty().any_bit_set()) {
      .                           return None;
      .                       }
      .           
      .                       probe_seq.move_next(self.bucket_mask);
      .                   }
      .               }
      .           
      .               #[allow(clippy::mut_mut)]
-- line 1198 ----------------------------------------
-- line 1225 ----------------------------------------
      .                   Bucket::from_base_index(self.data_end(), index)
      .               }
      .           
      .               #[inline]
      .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
      .                   debug_assert_ne!(self.bucket_mask, 0);
      .                   debug_assert!(index < self.buckets());
      .                   let base: *mut u8 = self.data_end().as_ptr();
195,664 ( 0.16%)          base.sub((index + 1) * size_of)
      .               }
      .           
      .               #[inline]
      .               unsafe fn data_end<T>(&self) -> NonNull<T> {
      .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
      .               }
      .           
      .               /// Returns an iterator-like object for a probe sequence on the table.
      .               ///
      .               /// This iterator never terminates, but is guaranteed to visit each bucket
      .               /// group exactly once. The loop using `probe_seq` must terminate upon
      .               /// reaching a group containing an empty bucket.
      .               #[inline]
      .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
      .                   ProbeSeq {
754,330 ( 0.61%)              pos: h1(hash) & self.bucket_mask,
      .                       stride: 0,
      .                   }
      .               }
      .           
      .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
      .               /// in the table, otherwise returns error
      .               #[cfg(feature = "raw")]
      .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
      .                   } else {
      .                       self.record_item_insert_at(index, old_ctrl, hash);
      .                       Ok(index)
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
110,875 ( 0.09%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
      .                   self.set_ctrl_h2(index, hash);
 88,700 ( 0.07%)          self.items += 1;
      .               }
      .           
      .               #[inline]
      .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
      .                   let probe_seq_pos = self.probe_seq(hash).pos;
      .                   let probe_index =
      .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
      .                   probe_index(i) == probe_index(new_i)
-- line 1281 ----------------------------------------
-- line 1312 ----------------------------------------
      .                   // replicate the buckets at the end of the trailing group. For example
      .                   // with 2 buckets and a group size of 4, the control bytes will look
      .                   // like this:
      .                   //
      .                   //     Real    |             Replicated
      .                   // ---------------------------------------------
      .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
      .                   // ---------------------------------------------
162,756 ( 0.13%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
      .           
 54,252 ( 0.04%)          *self.ctrl(index) = ctrl;
 54,255 ( 0.04%)          *self.ctrl(index2) = ctrl;
      .               }
      .           
      .               /// Returns a pointer to a control byte.
      .               #[inline]
      .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
      .                   debug_assert!(index < self.num_ctrl_bytes());
      .                   self.ctrl.as_ptr().add(index)
      .               }
      .           
      .               #[inline]
      .               fn buckets(&self) -> usize {
 11,566 ( 0.01%)          self.bucket_mask + 1
      .               }
      .           
      .               #[inline]
      .               fn num_ctrl_bytes(&self) -> usize {
 11,178 ( 0.01%)          self.bucket_mask + 1 + Group::WIDTH
      .               }
      .           
      .               #[inline]
      .               fn is_empty_singleton(&self) -> bool {
 45,584 ( 0.04%)          self.bucket_mask == 0
      .               }
      .           
      .               #[allow(clippy::mut_mut)]
      .               #[inline]
      .               unsafe fn prepare_resize(
      .                   &self,
      .                   table_layout: TableLayout,
      .                   capacity: usize,
      .                   fallibility: Fallibility,
      .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
      .                   debug_assert!(self.items <= capacity);
      .           
      .                   // Allocate and initialize the new table.
    321 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
      .                       self.alloc.clone(),
      .                       table_layout,
      .                       capacity,
      .                       fallibility,
      .                   )?;
  6,190 ( 0.01%)          new_table.growth_left -= self.items;
      .                   new_table.items = self.items;
      .           
      .                   // The hash function may panic, in which case we simply free the new
      .                   // table without dropping any elements that may have been copied into
      .                   // it.
      .                   //
      .                   // This guard is also used to free the old table on success, see
      .                   // the comment at the bottom of this function.
      .                   Ok(guard(new_table, move |self_| {
  2,882 ( 0.00%)              if !self_.is_empty_singleton() {
      .                           self_.free_buckets(table_layout);
      .                       }
      .                   }))
      .               }
      .           
      .               /// Reserves or rehashes to make room for `additional` more elements.
      .               ///
      .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
      .                   &mut self,
      .                   additional: usize,
      .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
      .                   fallibility: Fallibility,
      .                   layout: TableLayout,
      .                   drop: Option<fn(*mut u8)>,
      .               ) -> Result<(), TryReserveError> {
      .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
  5,766 ( 0.00%)          let new_items = match self.items.checked_add(additional) {
      .                       Some(new_items) => new_items,
      .                       None => return Err(fallibility.capacity_overflow()),
      .                   };
  5,764 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
 12,031 ( 0.01%)          if new_items <= full_capacity / 2 {
      .                       // Rehash in-place without re-allocating if we have plenty of spare
      .                       // capacity that is locked up due to DELETED entries.
      .                       self.rehash_in_place(hasher, layout.size, drop);
      .                       Ok(())
      .                   } else {
      .                       // Otherwise, conservatively resize to at least the next size up
      .                       // to avoid churning deletes into frequent rehashes.
      .                       self.resize_inner(
  2,882 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
      .                           hasher,
      .                           fallibility,
      .                           layout,
      .                       )
      .                   }
      .               }
      .           
      .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
      .               #[inline(always)]
      .               unsafe fn resize_inner(
      .                   &mut self,
      .                   capacity: usize,
      .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
      .                   fallibility: Fallibility,
      .                   layout: TableLayout,
      .               ) -> Result<(), TryReserveError> {
    797 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
      .           
      .                   // Copy all elements to the new table.
      .                   for i in 0..self.buckets() {
 30,110 ( 0.02%)              if !is_full(*self.ctrl(i)) {
      .                           continue;
      .                       }
      .           
      .                       // This may panic.
      .                       let hash = hasher(self, i);
      .           
      .                       // We can use a simpler version of insert() here since:
      .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
      .                   }
      .           
      .                   // We successfully copied all elements without panicking. Now replace
      .                   // self with the new table. The old table will have its memory freed but
      .                   // the items will not be dropped (since they have been moved into the
      .                   // new table).
      .                   mem::swap(self, &mut new_table);
      .           
  2,882 ( 0.00%)          Ok(())
      .               }
      .           
      .               /// Rehashes the contents of the table in place (i.e. without changing the
      .               /// allocation).
      .               ///
      .               /// If `hasher` panics then some the table's contents may be lost.
      .               ///
      .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1554 ----------------------------------------
      .               #[inline]
      .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
      .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
      .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
      .                       Some(lco) => lco,
      .                       None => hint::unreachable_unchecked(),
      .                   };
      .                   self.alloc.deallocate(
  1,781 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
      .                       layout,
      .                   );
      .               }
      .           
      .               /// Marks all table buckets as empty without dropping their contents.
      .               #[inline]
      .               fn clear_no_drop(&mut self) {
     92 ( 0.00%)          if !self.is_empty_singleton() {
      .                       unsafe {
      .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
      .                       }
      .                   }
    137 ( 0.00%)          self.items = 0;
     92 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
      .               }
      .           
      .               #[inline]
      .               unsafe fn erase(&mut self, index: usize) {
      .                   debug_assert!(is_full(*self.ctrl(index)));
  5,829 ( 0.00%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
      .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
      .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
      .           
      .                   // If we are inside a continuous block of Group::WIDTH full or deleted
      .                   // cells then a probe window may have seen a full block when trying to
      .                   // insert. We therefore need to keep that block non-empty so that
      .                   // lookups will continue searching to the next probe window.
      .                   //
      .                   // Note that in this context `leading_zeros` refers to the bytes at the
      .                   // end of a group, while `trailing_zeros` refers to the bytes at the
      .                   // beginning of a group.
 23,316 ( 0.02%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
      .                       DELETED
      .                   } else {
 29,145 ( 0.02%)              self.growth_left += 1;
      .                       EMPTY
      .                   };
      .                   self.set_ctrl(index, ctrl);
 23,316 ( 0.02%)          self.items -= 1;
      .               }
      .           }
      .           
      .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
     96 ( 0.00%)      fn clone(&self) -> Self {
     15 ( 0.00%)          if self.table.is_empty_singleton() {
      .                       Self::new_in(self.table.alloc.clone())
      .                   } else {
      .                       unsafe {
      .                           let mut new_table = ManuallyDrop::new(
      .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
      .                               match Self::new_uninitialized(
      .                                   self.table.alloc.clone(),
      .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
      .                               // We need to free the memory allocated for the new table.
      .                               new_table.free_buckets();
      .                           });
      .           
      .                           // Return the newly created table.
      .                           ManuallyDrop::into_inner(new_table)
      .                       }
      .                   }
    108 ( 0.00%)      }
      .           
      .               fn clone_from(&mut self, source: &Self) {
      .                   if source.table.is_empty_singleton() {
      .                       *self = Self::new_in(self.table.alloc.clone());
      .                   } else {
      .                       unsafe {
      .                           // First, drop all our elements without clearing the control bytes.
      .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
      .                       .table
      .                       .ctrl(0)
      .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
      .                   source
      .                       .data_start()
      .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
      .           
      .                   self.table.items = source.table.items;
      6 ( 0.00%)          self.table.growth_left = source.table.growth_left;
      .               }
      .           }
      .           
      .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
      .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
      .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
      .               fn default() -> Self {
      .                   Self::new_in(Default::default())
      .               }
      .           }
      .           
      .           #[cfg(feature = "nightly")]
      .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
 24,780 ( 0.02%)      fn drop(&mut self) {
 19,330 ( 0.02%)          if !self.table.is_empty_singleton() {
      .                       unsafe {
      .                           self.drop_elements();
      .                           self.free_buckets();
      .                       }
      .                   }
 26,598 ( 0.02%)      }
      .           }
      .           #[cfg(not(feature = "nightly"))]
      .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn drop(&mut self) {
      .                   if !self.table.is_empty_singleton() {
      .                       unsafe {
      .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
      .               type Item = T;
      .               type IntoIter = RawIntoIter<T, A>;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
    488 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
      .                   unsafe {
      .                       let iter = self.iter();
      .                       self.into_iter_from(iter)
      .                   }
    610 ( 0.00%)      }
      .           }
      .           
      .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
      .           /// not track an item count.
      .           pub(crate) struct RawIterRange<T> {
      .               // Mask of full buckets in the current group. Bits are cleared from this
      .               // mask as each element is processed.
      .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
      .           
      .           impl<T> Iterator for RawIterRange<T> {
      .               type Item = Bucket<T>;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<Bucket<T>> {
      .                   unsafe {
      .                       loop {
 11,091 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    777 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
  1,290 ( 0.00%)                      return Some(self.data.next_n(index));
      .                           }
      .           
  6,778 ( 0.01%)                  if self.next_ctrl >= self.end {
      .                               return None;
      .                           }
      .           
      .                           // We might read past self.end up to the next group boundary,
      .                           // but this is fine because it only occurs on tables smaller
      .                           // than the group size where the trailing control bytes are all
      .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
      .                           // to the group size (since tables are power-of-two sized).
    181 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
     54 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
    415 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
      .                       }
      .                   }
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   // We don't have an item count, so just guess based on the range size.
      .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
      .                           }
      .                       } else {
      .                           // We must have already iterated past the removed item.
      .                       }
      .                   }
      .               }
      .           
      .               unsafe fn drop_elements(&mut self) {
    147 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
      .                       for item in self {
      .                           item.drop();
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
      .                   }
      .               }
      .           }
      .           
      .           impl<T> Iterator for RawIter<T> {
      .               type Item = Bucket<T>;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
  1,051 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
  9,760 ( 0.01%)          if let Some(b) = self.iter.next() {
 15,335 ( 0.01%)              self.items -= 1;
      .                       Some(b)
      .                   } else {
      .                       // We don't check against items == 0 here to allow the
      .                       // compiler to optimize away the item count entirely if the
      .                       // iterator length is never queried.
      .                       debug_assert_eq!(self.items, 0);
      .                       None
      .                   }
  2,102 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   (self.items, Some(self.items))
      .               }
      .           }
      .           
      .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
      .               T: Sync,
      .               A: Sync,
      .           {
      .           }
      .           
      .           #[cfg(feature = "nightly")]
      .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
    332 ( 0.00%)      fn drop(&mut self) {
      .                   unsafe {
      .                       // Drop all remaining elements
      .                       self.iter.drop_elements();
      .           
      .                       // Free the table
    863 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
      .                           self.alloc.deallocate(ptr, layout);
      .                       }
      .                   }
     90 ( 0.00%)      }
      .           }
      .           #[cfg(not(feature = "nightly"))]
      .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn drop(&mut self) {
      .                   unsafe {
      .                       // Drop all remaining elements
      .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
      .                   }
      .               }
      .           }
      .           
      .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
      .               type Item = T;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
     37 ( 0.00%)      fn next(&mut self) -> Option<T> {
     12 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
     74 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      3 ( 0.00%)          self.iter.size_hint()
      .               }
      .           }
      .           
      .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
      .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
      .           
      .           /// Iterator which consumes elements without freeing the table storage.
      .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
      .           where
      .               T: Sync,
      .               A: Sync,
      .           {
      .           }
      .           
      .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      8 ( 0.00%)      fn drop(&mut self) {
      .                   unsafe {
      .                       // Drop all remaining elements. Note that this may panic.
      .                       self.iter.drop_elements();
      .           
      .                       // Reset the contents of the table now that all elements have been
      .                       // dropped.
      .                       self.table.clear_no_drop();
      .           
      .                       // Move the now empty table back to its original location.
      1 ( 0.00%)              self.orig_table
      .                           .as_ptr()
      .                           .copy_from_nonoverlapping(&*self.table, 1);
      .                   }
      8 ( 0.00%)      }
      .           }
      .           
      .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
      .               type Item = T;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<T> {
      .                   unsafe {
-- line 2289 ----------------------------------------

439,015 ( 0.36%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/snap-1.0.1/src/decompress.rs
--------------------------------------------------------------------------------
Ir              

-- line 22 ----------------------------------------
     .           /// compressor.
     .           ///
     .           /// # Errors
     .           ///
     .           /// This function returns an error in the following circumstances:
     .           ///
     .           /// * An invalid Snappy header was seen.
     .           /// * The total space required for decompression exceeds `2^32 - 1`.
     8 ( 0.00%)  pub fn decompress_len(input: &[u8]) -> Result<usize> {
     4 ( 0.00%)      if input.is_empty() {
     .                   return Ok(0);
     .               }
     8 ( 0.00%)      Ok(Header::read(input)?.decompress_len)
    12 ( 0.00%)  }
     .           
     .           /// Decoder is a raw decoder for decompressing bytes in the Snappy format.
     .           ///
     .           /// This decoder does not use the Snappy frame format and simply decompresses
     .           /// the given bytes as if it were returned from `Encoder`.
     .           ///
     .           /// Unless you explicitly need the low-level control, you should use
     .           /// [`read::FrameDecoder`](../read/struct.FrameDecoder.html)
-- line 43 ----------------------------------------
-- line 47 ----------------------------------------
     .               // Place holder for potential future fields.
     .               _dummy: (),
     .           }
     .           
     .           impl Decoder {
     .               /// Return a new decoder that can be used for decompressing bytes.
     .               pub fn new() -> Decoder {
     .                   Decoder { _dummy: () }
     4 ( 0.00%)      }
     .           
     .               /// Decompresses all bytes in `input` into `output`.
     .               ///
     .               /// `input` must be a sequence of bytes returned by a conforming Snappy
     .               /// compressor.
     .               ///
     .               /// The size of `output` must be large enough to hold all decompressed
     .               /// bytes from the `input`. The size required can be queried with the
-- line 63 ----------------------------------------
-- line 67 ----------------------------------------
     .               ///
     .               /// # Errors
     .               ///
     .               /// This method returns an error in the following circumstances:
     .               ///
     .               /// * Invalid compressed Snappy data was seen.
     .               /// * The total space required for decompression exceeds `2^32 - 1`.
     .               /// * `output` has length less than `decompress_len(input)`.
    32 ( 0.00%)      pub fn decompress(
     .                   &mut self,
     .                   input: &[u8],
     .                   output: &mut [u8],
     .               ) -> Result<usize> {
     4 ( 0.00%)          if input.is_empty() {
     .                       return Err(Error::Empty);
     .                   }
     .                   let hdr = Header::read(input)?;
     8 ( 0.00%)          if hdr.decompress_len > output.len() {
     .                       return Err(Error::BufferTooSmall {
     .                           given: output.len() as u64,
     .                           min: hdr.decompress_len as u64,
     .                       });
     .                   }
     .                   let dst = &mut output[..hdr.decompress_len];
     .                   let mut dec =
     .                       Decompress { src: &input[hdr.len..], s: 0, dst: dst, d: 0 };
     .                   dec.decompress()?;
    12 ( 0.00%)          Ok(dec.dst.len())
    36 ( 0.00%)      }
     .           
     .               /// Decompresses all bytes in `input` into a freshly allocated `Vec`.
     .               ///
     .               /// This is just like the `decompress` method, except it allocates a `Vec`
     .               /// with the right size for you. (This is intended to be a convenience
     .               /// method.)
     .               ///
     .               /// This method returns an error under the same circumstances that
-- line 103 ----------------------------------------
-- line 123 ----------------------------------------
     .           }
     .           
     .           impl<'s, 'd> Decompress<'s, 'd> {
     .               /// Decompresses snappy compressed bytes in `src` to `dst`.
     .               ///
     .               /// This assumes that the header has already been read and that `dst` is
     .               /// big enough to store all decompressed bytes.
     .               fn decompress(&mut self) -> Result<()> {
11,240 ( 0.01%)          while self.s < self.src.len() {
 5,616 ( 0.00%)              let byte = self.src[self.s];
 5,616 ( 0.00%)              self.s += 1;
11,232 ( 0.01%)              if byte & 0b000000_11 == 0 {
 6,762 ( 0.01%)                  let len = (byte >> 2) as usize + 1;
     .                           self.read_literal(len)?;
     .                       } else {
     .                           self.read_copy(byte)?;
     .                       }
     .                   }
     8 ( 0.00%)          if self.d != self.dst.len() {
     .                       return Err(Error::HeaderMismatch {
     .                           expected_len: self.dst.len() as u64,
     .                           got_len: self.d as u64,
     .                       });
     .                   }
     .                   Ok(())
     .               }
     .           
-- line 149 ----------------------------------------
-- line 162 ----------------------------------------
     .                   debug_assert!(len <= 64);
     .                   let mut len = len as u64;
     .                   // As an optimization for the common case, if the literal length is
     .                   // <=16 and we have enough room in both `src` and `dst`, copy the
     .                   // literal using unaligned loads and stores.
     .                   //
     .                   // We pick 16 bytes with the hope that it optimizes down to a 128 bit
     .                   // load/store.
 8,728 ( 0.01%)          if len <= 16
 6,330 ( 0.01%)              && self.s + 16 <= self.src.len()
 8,440 ( 0.01%)              && self.d + 16 <= self.dst.len()
     .                   {
     .                       unsafe {
     .                           // SAFETY: We know both src and dst have at least 16 bytes of
     .                           // wiggle room after s/d, even if `len` is <16, so the copy is
     .                           // safe.
     .                           let srcp = self.src.as_ptr().add(self.s);
     .                           let dstp = self.dst.as_mut_ptr().add(self.d);
     .                           // Hopefully uses SIMD registers for 128 bit load/store.
     .                           ptr::copy_nonoverlapping(srcp, dstp, 16);
     .                       }
 2,110 ( 0.00%)              self.d += len as usize;
 6,330 ( 0.01%)              self.s += len as usize;
     .                       return Ok(());
     .                   }
     .                   // When the length is bigger than 60, it indicates that we need to read
     .                   // an additional 1-4 bytes to get the real length of the literal.
   288 ( 0.00%)          if len >= 61 {
     .                       // If there aren't at least 4 bytes left to read then we know this
     .                       // is corrupt because the literal must have length >=61.
    90 ( 0.00%)              if self.s as u64 + 4 > self.src.len() as u64 {
     .                           return Err(Error::Literal {
     .                               len: 4,
     .                               src_len: (self.src.len() - self.s) as u64,
     .                               dst_len: (self.dst.len() - self.d) as u64,
     .                           });
     .                       }
     .                       // Since we know there are 4 bytes left to read, read a 32 bit LE
     .                       // integer and mask away the bits we don't need.
     .                       let byte_count = len as usize - 60;
     .                       len = bytes::read_u32_le(&self.src[self.s..]) as u64;
   108 ( 0.00%)              len = (len & (WORD_MASK[byte_count] as u64)) + 1;
    18 ( 0.00%)              self.s += byte_count;
     .                   }
     .                   // If there's not enough buffer left to load or store this literal,
     .                   // then the input is corrupt.
     .                   // if self.s + len > self.src.len() || self.d + len > self.dst.len() {
   864 ( 0.00%)          if ((self.src.len() - self.s) as u64) < len
   432 ( 0.00%)              || ((self.dst.len() - self.d) as u64) < len
     .                   {
     .                       return Err(Error::Literal {
     .                           len: len,
     .                           src_len: (self.src.len() - self.s) as u64,
     .                           dst_len: (self.dst.len() - self.d) as u64,
     .                       });
     .                   }
     .                   unsafe {
     .                       // SAFETY: We've already checked the bounds, so we know this copy
     .                       // is correct.
     .                       let srcp = self.src.as_ptr().add(self.s);
     .                       let dstp = self.dst.as_mut_ptr().add(self.d);
     .                       ptr::copy_nonoverlapping(srcp, dstp, len as usize);
     .                   }
   288 ( 0.00%)          self.s += len as usize;
   288 ( 0.00%)          self.d += len as usize;
     .                   Ok(())
     .               }
     .           
     .               /// Reads a copy from `src` and writes the decompressed bytes to `dst`. `s`
     .               /// should point to the byte immediately proceding the copy tag byte.
     .               #[inline(always)]
     .               fn read_copy(&mut self, tag_byte: u8) -> Result<()> {
     .                   // Find the copy offset and len, then advance the input past the copy.
     .                   // The rest of this function deals with reading/writing to output only.
     .                   let entry = TAG_LOOKUP_TABLE.entry(tag_byte);
     .                   let offset = entry.offset(self.src, self.s)?;
     .                   let len = entry.len();
 6,724 ( 0.01%)          self.s += entry.num_tag_bytes();
     .           
     .                   // What we really care about here is whether `d == 0` or `d < offset`.
     .                   // To save an extra branch, use `d < offset - 1` instead. If `d` is
     .                   // `0`, then `offset.wrapping_sub(1)` will be usize::MAX which is also
     .                   // the max value of `d`.
 6,724 ( 0.01%)          if self.d <= offset.wrapping_sub(1) {
     .                       return Err(Error::Offset {
     .                           offset: offset as u64,
     .                           dst_pos: self.d as u64,
     .                       });
     .                   }
     .                   // When all is said and done, dst is advanced to end.
10,086 ( 0.01%)          let end = self.d + len;
     .                   // When the copy is small and the offset is at least 8 bytes away from
     .                   // `d`, then we can decompress the copy with two 64 bit unaligned
     .                   // loads/stores.
27,588 ( 0.02%)          if offset >= 8 && len <= 16 && self.d + 16 <= self.dst.len() {
     .                       unsafe {
     .                           // SAFETY: We know dstp points to at least 16 bytes of memory
     .                           // from the condition above, and we also know that dstp is
     .                           // preceded by at least `offset` bytes from the `d <= offset`
     .                           // check above.
     .                           //
     .                           // We also know that dstp and dstp-8 do not overlap from the
     .                           // check above, justifying the use of copy_nonoverlapping.
-- line 264 ----------------------------------------
-- line 273 ----------------------------------------
     .                   // If we have some wiggle room, try to decompress the copy 16 bytes
     .                   // at a time with 128 bit unaligned loads/stores. Remember, we can't
     .                   // just do a memcpy because decompressing copies may require copying
     .                   // overlapping memory.
     .                   //
     .                   // We need the extra wiggle room to make effective use of 128 bit
     .                   // loads/stores. Even if the store ends up copying more data than we
     .                   // need, we're careful to advance `d` by the correct amount at the end.
 2,670 ( 0.00%)          } else if end + 24 <= self.dst.len() {
     .                       unsafe {
     .                           // SAFETY: We know that dstp is preceded by at least `offset`
     .                           // bytes from the `d <= offset` check above.
     .                           //
     .                           // We don't know whether dstp overlaps with srcp, so we start
     .                           // by copying from srcp to dstp until they no longer overlap.
     .                           // The worst case is when dstp-src = 3 and copy length = 1. The
     .                           // first loop will issue these copy operations before stopping:
-- line 289 ----------------------------------------
-- line 295 ----------------------------------------
     .                           // But the copy had length 1, so it was only supposed to write
     .                           // to [0, 0]. But the last copy wrote to [9, 24], which is 24
     .                           // extra bytes in dst *beyond* the end of the copy, which is
     .                           // guaranteed by the conditional above.
     .                           let mut dstp = self.dst.as_mut_ptr().add(self.d);
     .                           let mut srcp = dstp.sub(offset);
     .                           loop {
     .                               debug_assert!(dstp >= srcp);
 4,188 ( 0.00%)                      let diff = (dstp as usize) - (srcp as usize);
 2,792 ( 0.00%)                      if diff >= 16 {
     .                                   break;
     .                               }
     .                               // srcp and dstp can overlap, so use ptr::copy.
     .                               debug_assert!(self.d + 16 <= self.dst.len());
     .                               ptr::copy(srcp, dstp, 16);
 1,724 ( 0.00%)                      self.d += diff as usize;
     .                               dstp = dstp.add(diff);
     .                           }
 5,630 ( 0.00%)                  while self.d < end {
     .                               ptr::copy_nonoverlapping(srcp, dstp, 16);
     .                               srcp = srcp.add(16);
     .                               dstp = dstp.add(16);
 4,548 ( 0.00%)                      self.d += 16;
     .                           }
     .                           // At this point, `d` is likely wrong. We correct it before
     .                           // returning. It's correct value is `end`.
     .                       }
     .                   } else {
     .                       if end > self.dst.len() {
     .                           return Err(Error::CopyWrite {
     .                               len: len as u64,
-- line 325 ----------------------------------------
-- line 350 ----------------------------------------
     .           
     .           impl Header {
     .               /// Reads the varint header from the given input.
     .               ///
     .               /// If there was a problem reading the header then an error is returned.
     .               /// If a header is returned then it is guaranteed to be valid.
     .               #[inline(always)]
     .               fn read(input: &[u8]) -> Result<Header> {
    32 ( 0.00%)          let (decompress_len, header_len) = bytes::read_varu64(input);
    16 ( 0.00%)          if header_len == 0 {
     .                       return Err(Error::Header);
     .                   }
    24 ( 0.00%)          if decompress_len > MAX_INPUT_SIZE {
     .                       return Err(Error::TooBig {
     .                           given: decompress_len as u64,
     .                           max: MAX_INPUT_SIZE,
     .                       });
     .                   }
     .                   Ok(Header { len: header_len, decompress_len: decompress_len as usize })
     .               }
     .           }
-- line 370 ----------------------------------------
-- line 426 ----------------------------------------
     .               /// This requires reading from the compressed input since the offset is
     .               /// encoded in bytes proceding the tag byte.
     .               fn offset(&self, src: &[u8], s: usize) -> Result<usize> {
     .                   let num_tag_bytes = self.num_tag_bytes();
     .                   let trailer =
     .                       // It is critical for this case to come first, since it is the
     .                       // fast path. We really hope that this case gets branch
     .                       // predicted.
16,810 ( 0.01%)              if s + 4 <= src.len() {
     .                           unsafe {
     .                               // SAFETY: The conditional above guarantees that
     .                               // src[s..s+4] is valid to read from.
     .                               let p = src.as_ptr().add(s);
     .                               // We use WORD_MASK here to mask out the bits we don't
     .                               // need. While we're guaranteed to read 4 valid bytes,
     .                               // not all of those bytes are necessarily part of the
     .                               // offset. This is the key optimization: we don't need to
     .                               // branch on num_tag_bytes.
16,810 ( 0.01%)                      bytes::loadu_u32_le(p) as usize & WORD_MASK[num_tag_bytes]
     .                           }
     .                       } else if num_tag_bytes == 1 {
     .                           if s >= src.len() {
     .                               return Err(Error::CopyRead {
     .                                   len: 1,
     .                                   src_len: (src.len() - s) as u64,
     .                               });
     .                           }
-- line 452 ----------------------------------------

39,692 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/snap-1.0.1/src/decompress.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/dl-lookup.c
  ./elf/do-rel.h
  ./malloc/malloc.c
  ./stdlib/cxa_finalize.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/strcmp.S

--------------------------------------------------------------------------------
Ir                  
--------------------------------------------------------------------------------
23,052,916 (18.77%)  events annotated

