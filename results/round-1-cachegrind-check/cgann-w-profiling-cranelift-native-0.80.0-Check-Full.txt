--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name cranelift_native --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg feature="default" --cfg feature="std" -C metadata=17dd4620b3b200e9 -C extra-filename=-17dd4620b3b200e9 --out-dir /usr/home/liquid/tmp/.tmplHAKYl/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmplHAKYl/target/debug/deps --extern cranelift_codegen=/usr/home/liquid/tmp/.tmplHAKYl/target/debug/deps/libcranelift_codegen-b263f850493aff14.rmeta --extern target_lexicon=/usr/home/liquid/tmp/.tmplHAKYl/target/debug/deps/libtarget_lexicon-11f0257581060abb.rmeta -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-cranelift-native-0.80.0-Check-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                  
--------------------------------------------------------------------------------
90,534,349 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   file:function
--------------------------------------------------------------------------------
10,305,124 (11.38%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
 4,835,679 ( 5.34%)  ./elf/dl-lookup.c:do_lookup_x
 4,141,271 ( 4.57%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
 3,315,694 ( 3.66%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,998,162 ( 3.31%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,937,912 ( 3.25%)  ./malloc/malloc.c:_int_malloc
 2,786,817 ( 3.08%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,139,033 ( 2.36%)  ./elf/do-rel.h:_dl_relocate_object
 2,086,742 ( 2.30%)  ./malloc/malloc.c:_int_free
 1,494,066 ( 1.65%)  ./malloc/malloc.c:malloc
 1,362,217 ( 1.50%)  ???:SetImpliedBits(llvm::FeatureBitset&, llvm::FeatureBitset const&, llvm::ArrayRef<llvm::SubtargetFeatureKV>)
 1,298,509 ( 1.43%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
 1,293,658 ( 1.43%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
 1,289,859 ( 1.42%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
 1,225,523 ( 1.35%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
   945,432 ( 1.04%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   864,856 ( 0.96%)  ./elf/dl-lookup.c:check_match
   861,040 ( 0.95%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   560,880 ( 0.62%)  ./malloc/malloc.c:free
   529,040 ( 0.58%)  ./string/../sysdeps/x86_64/strcmp.S:strcmp
   459,321 ( 0.51%)  ???:llvm::StringMapImpl::LookupBucketFor(llvm::StringRef)
   456,436 ( 0.50%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
   428,166 ( 0.47%)  ./malloc/malloc.c:malloc_consolidate
   427,750 ( 0.47%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   427,750 ( 0.47%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   427,750 ( 0.47%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   389,958 ( 0.43%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   374,252 ( 0.41%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
   286,937 ( 0.32%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
   283,586 ( 0.31%)  ./malloc/malloc.c:unlink_chunk.constprop.0
   258,526 ( 0.29%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
   251,410 ( 0.28%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs:<&str as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   239,091 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   221,269 ( 0.24%)  ./stdlib/cxa_finalize.c:__cxa_finalize
   206,592 ( 0.23%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(&str, rustc_span::symbol::Symbol)>>::insert::<hashbrown::map::make_hasher<&str, &str, rustc_span::symbol::Symbol, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   191,007 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/path.rs:<std::path::Path as core::hash::Hash>::hash::<rustc_data_structures::stable_hasher::StableHasher>
   178,599 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::TokenCursor>::next
   173,715 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs:<std::path::Path as core::hash::Hash>::hash::<rustc_data_structures::stable_hasher::StableHasher>
   165,920 ( 0.18%)  ???:llvm::StringMapImpl::RehashTable(unsigned int)
   161,953 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump
   154,301 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
   154,242 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   142,614 ( 0.16%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   139,542 ( 0.15%)  ./malloc/malloc.c:realloc
   137,692 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   136,902 ( 0.15%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::HashMap<&str, rustc_span::symbol::Symbol, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::insert
   134,073 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<u128 as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   132,245 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<std::path::Path as core::hash::Hash>::hash::<rustc_data_structures::stable_hasher::StableHasher>
   123,506 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core.rs:<indexmap::map::core::Entry<rustc_middle::ty::fast_reject::SimplifiedTypeGen<rustc_span::def_id::DefId>, alloc::vec::Vec<rustc_span::def_id::DefId>>>::or_default
   122,069 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::slice_write_process_buffer
   121,075 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   119,666 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs:<rustc_ast::tokenstream::Cursor>::next_with_spacing
   118,561 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_middle::hir::map::Map>::attrs
   117,650 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::slice_write_process_buffer
   117,322 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs:<std::path::Path as core::hash::Hash>::hash::<rustc_data_structures::stable_hasher::StableHasher>
   116,352 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core/raw.rs:<indexmap::map::core::IndexMapCore<rustc_middle::ty::fast_reject::SimplifiedTypeGen<rustc_span::def_id::DefId>, alloc::vec::Vec<rustc_span::def_id::DefId>>>::entry
   113,246 ( 0.13%)  ./stdio-common/vfscanf-internal.c:__vfscanf_internal
   112,834 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
   110,893 ( 0.12%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
   109,848 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs:<rustc_span::symbol::Symbol>::intern
   107,454 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/macro_parser.rs:rustc_expand::mbe::macro_parser::parse_tt
   106,276 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_seq::<[u8; 32], <[u8; 32] as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode::{closure#0}>
   103,258 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/span_encoding.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   102,763 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs:<indexmap::map::core::Entry<rustc_middle::ty::fast_reject::SimplifiedTypeGen<rustc_span::def_id::DefId>, alloc::vec::Vec<rustc_span::def_id::DefId>>>::or_default
   100,996 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<rustc_span::symbol::Symbol>::intern
    97,532 ( 0.11%)  ./malloc/malloc.c:_int_realloc
    97,281 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_u32
    96,943 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<rustc_span::hygiene::SyntaxContext as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
    95,490 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs:<rustc_parse::lexer::StringReader>::next_token
    94,612 ( 0.10%)  ???:llvm::PassRegistry::registerPass(llvm::PassInfo const&, bool)
    91,598 ( 0.10%)  ???:(anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*)
    91,060 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<&str as core::hash::Hash>::hash::<rustc_hash::FxHasher>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core.rs
--------------------------------------------------------------------------------
Ir              

-- line 26 ----------------------------------------
     .               /// indices mapping from the entry hash to its index.
     .               indices: RawTable<usize>,
     .               /// entries is a dense vec of entries in their order.
     .               entries: Vec<Bucket<K, V>>,
     .           }
     .           
     .           #[inline(always)]
     .           fn get_hash<K, V>(entries: &[Bucket<K, V>]) -> impl Fn(&usize) -> u64 + '_ {
23,847 ( 0.03%)      move |&i| entries[i].hash.get()
     .           }
     .           
     .           #[inline]
     .           fn equivalent<'a, K, V, Q: ?Sized + Equivalent<K>>(
     .               key: &'a Q,
     .               entries: &'a [Bucket<K, V>],
     .           ) -> impl Fn(&usize) -> bool + 'a {
 2,770 ( 0.00%)      move |&i| Q::equivalent(key, &entries[i].key)
     .           }
     .           
     .           #[inline]
     .           fn erase_index(table: &mut RawTable<usize>, hash: HashValue, index: usize) {
     .               table.erase_entry(hash.get(), move |&i| i == index);
     .           }
     .           
     .           #[inline]
-- line 50 ----------------------------------------
-- line 132 ----------------------------------------
     .                   IndexMapCore {
     .                       indices: RawTable::with_capacity(n),
     .                       entries: Vec::with_capacity(n),
     .                   }
     .               }
     .           
     .               #[inline]
     .               pub(crate) fn len(&self) -> usize {
    40 ( 0.00%)          self.indices.len()
     .               }
     .           
     .               #[inline]
     .               pub(crate) fn capacity(&self) -> usize {
     .                   cmp::min(self.indices.capacity(), self.entries.capacity())
     .               }
     .           
     .               pub(crate) fn clear(&mut self) {
-- line 148 ----------------------------------------
-- line 152 ----------------------------------------
     .           
     .               pub(crate) fn truncate(&mut self, len: usize) {
     .                   if len < self.len() {
     .                       self.erase_indices(len, self.entries.len());
     .                       self.entries.truncate(len);
     .                   }
     .               }
     .           
    63 ( 0.00%)      pub(crate) fn drain<R>(&mut self, range: R) -> Drain<'_, Bucket<K, V>>
     .               where
     .                   R: RangeBounds<usize>,
     .               {
    21 ( 0.00%)          let range = simplify_range(range, self.entries.len());
     .                   self.erase_indices(range.start, range.end);
     .                   self.entries.drain(range)
    56 ( 0.00%)      }
     .           
     .               #[cfg(feature = "rayon")]
     .               pub(crate) fn par_drain<R>(&mut self, range: R) -> rayon::vec::Drain<'_, Bucket<K, V>>
     .               where
     .                   K: Send,
     .                   V: Send,
     .                   R: RangeBounds<usize>,
     .               {
-- line 175 ----------------------------------------
-- line 194 ----------------------------------------
     .               /// Reserve capacity for `additional` more key-value pairs.
     .               pub(crate) fn reserve(&mut self, additional: usize) {
     .                   self.indices.reserve(additional, get_hash(&self.entries));
     .                   self.reserve_entries();
     .               }
     .           
     .               /// Reserve entries capacity to match the indices
     .               fn reserve_entries(&mut self) {
   675 ( 0.00%)          let additional = self.indices.capacity() - self.entries.len();
     .                   self.entries.reserve_exact(additional);
     .               }
     .           
     .               /// Shrink the capacity of the map as much as possible.
     .               pub(crate) fn shrink_to_fit(&mut self) {
     .                   self.indices.shrink_to(0, get_hash(&self.entries));
     .                   self.entries.shrink_to_fit();
     .               }
-- line 210 ----------------------------------------
-- line 218 ----------------------------------------
     .                   } else {
     .                       None
     .                   }
     .               }
     .           
     .               /// Append a key-value pair, *without* checking whether it already exists,
     .               /// and return the pair's new index.
     .               fn push(&mut self, hash: HashValue, key: K, value: V) -> usize {
 3,571 ( 0.00%)          let i = self.entries.len();
     .                   self.indices.insert(hash.get(), i, get_hash(&self.entries));
 7,198 ( 0.01%)          if i == self.entries.capacity() {
     .                       // Reserve our own capacity synced to the indices,
     .                       // rather than letting `Vec::push` just double it.
     .                       self.reserve_entries();
     .                   }
20,224 ( 0.02%)          self.entries.push(Bucket { hash, key, value });
     .                   i
     .               }
     .           
     .               /// Return the index in `entries` where an equivalent key can be found
   504 ( 0.00%)      pub(crate) fn get_index_of<Q>(&self, hash: HashValue, key: &Q) -> Option<usize>
     .               where
     .                   Q: ?Sized + Equivalent<K>,
     .               {
    40 ( 0.00%)          let eq = equivalent(key, &self.entries);
     .                   self.indices.get(hash.get(), eq).copied()
   504 ( 0.00%)      }
     .           
   208 ( 0.00%)      pub(crate) fn insert_full(&mut self, hash: HashValue, key: K, value: V) -> (usize, Option<V>)
     .               where
     .                   K: Eq,
     .               {
     .                   match self.get_index_of(hash, &key) {
     .                       Some(i) => (i, Some(replace(&mut self.entries[i].value, value))),
    32 ( 0.00%)              None => (self.push(hash, key, value), None),
     .                   }
   176 ( 0.00%)      }
     .           
     .               /// Remove an entry by shifting all entries that follow it
     .               pub(crate) fn shift_remove_full<Q>(&mut self, hash: HashValue, key: &Q) -> Option<(usize, K, V)>
     .               where
     .                   Q: ?Sized + Equivalent<K>,
     .               {
     .                   let eq = equivalent(key, &self.entries);
     .                   match self.indices.remove_entry(hash.get(), eq) {
-- line 262 ----------------------------------------
-- line 361 ----------------------------------------
     .                   let (init, shifted_entries) = self.entries.split_at(end);
     .                   let (start_entries, erased_entries) = init.split_at(start);
     .           
     .                   let erased = erased_entries.len();
     .                   let shifted = shifted_entries.len();
     .                   let half_capacity = self.indices.buckets() / 2;
     .           
     .                   // Use a heuristic between different strategies
    14 ( 0.00%)          if erased == 0 {
     .                       // Degenerate case, nothing to do
     .                   } else if start + shifted < half_capacity && start < erased {
     .                       // Reinsert everything, as there are few kept indices
     .                       self.indices.clear();
     .           
     .                       // Reinsert stable indices
     .                       for (i, entry) in enumerate(start_entries) {
     .                           self.indices.insert_no_grow(entry.hash.get(), i);
-- line 377 ----------------------------------------
-- line 468 ----------------------------------------
     .                       Entry::Vacant(entry) => entry.insert(default),
     .                   }
     .               }
     .           
     .               /// Inserts the result of the `call` function in the entry if it is vacant and returns a mutable
     .               /// reference to it. Otherwise a mutable reference to an already existent value is returned.
     .               ///
     .               /// Computes in **O(1)** time (amortized average).
 8,128 ( 0.01%)      pub fn or_insert_with<F>(self, call: F) -> &'a mut V
     .               where
     .                   F: FnOnce() -> V,
     .               {
 2,032 ( 0.00%)          match self {
   331 ( 0.00%)              Entry::Occupied(entry) => entry.into_mut(),
   705 ( 0.00%)              Entry::Vacant(entry) => entry.insert(call()),
     .                   }
 8,128 ( 0.01%)      }
     .           
     .               /// Inserts the result of the `call` function with a reference to the entry's key if it is
     .               /// vacant, and returns a mutable reference to the new value. Otherwise a mutable reference to
     .               /// an already existent value is returned.
     .               ///
     .               /// Computes in **O(1)** time (amortized average).
     .               pub fn or_insert_with_key<F>(self, call: F) -> &'a mut V
     .               where
-- line 492 ----------------------------------------
-- line 531 ----------------------------------------
     .                       x => x,
     .                   }
     .               }
     .           
     .               /// Inserts a default-constructed value in the entry if it is vacant and returns a mutable
     .               /// reference to it. Otherwise a mutable reference to an already existent value is returned.
     .               ///
     .               /// Computes in **O(1)** time (amortized average).
23,429 ( 0.03%)      pub fn or_default(self) -> &'a mut V
     .               where
     .                   V: Default,
     .               {
 6,694 ( 0.01%)          match self {
   485 ( 0.00%)              Entry::Occupied(entry) => entry.into_mut(),
 8,586 ( 0.01%)              Entry::Vacant(entry) => entry.insert(V::default()),
     .                   }
26,776 ( 0.03%)      }
     .           }
     .           
     .           impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for Entry<'_, K, V> {
     .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     .                   match *self {
     .                       Entry::Vacant(ref v) => f.debug_tuple(stringify!(Entry)).field(v).finish(),
     .                       Entry::Occupied(ref o) => f.debug_tuple(stringify!(Entry)).field(o).finish(),
     .                   }
-- line 555 ----------------------------------------
-- line 634 ----------------------------------------
     .           
     .               /// Return the index where the key-value pair will be inserted.
     .               pub fn index(&self) -> usize {
     .                   self.map.len()
     .               }
     .           
     .               /// Inserts the entry's key and the given value into the map, and returns a mutable reference
     .               /// to the value.
   188 ( 0.00%)      pub fn insert(self, value: V) -> &'a mut V {
 8,664 ( 0.01%)          let i = self.map.push(self.hash, self.key, value);
     3 ( 0.00%)          &mut self.map.entries[i].value
   210 ( 0.00%)      }
     .           }
     .           
     .           impl<K: fmt::Debug, V> fmt::Debug for VacantEntry<'_, K, V> {
     .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     .                   f.debug_tuple(stringify!(VacantEntry))
     .                       .field(self.key())
     .                       .finish()
     .               }
-- line 653 ----------------------------------------

25,278 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir               

-- line 57 ----------------------------------------
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
      .                   ///
      .                   /// ```
      .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      4 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
      2 ( 0.00%)              from_str_radix(src, radix)
      6 ( 0.00%)          }
      .           
      .                   /// Returns the number of ones in the binary representation of `self`.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
      .                   ///
      .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
      .                   #[doc(alias = "popcount")]
      .                   #[doc(alias = "popcnt")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn count_ones(self) -> u32 {
  1,350 ( 0.00%)              intrinsics::ctpop(self as $ActualT) as u32
      .                   }
      .           
      .                   /// Returns the number of zeros in the binary representation of `self`.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
      .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
      .                   /// assert_eq!(n.leading_zeros(), 2);
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn leading_zeros(self) -> u32 {
 11,745 ( 0.01%)              intrinsics::ctlz(self as $ActualT) as u32
      .                   }
      .           
      .                   /// Returns the number of trailing zeros in the binary representation
      .                   /// of `self`.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
      .                   /// assert_eq!(n.trailing_zeros(), 3);
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn trailing_zeros(self) -> u32 {
 10,785 ( 0.01%)              intrinsics::cttz(self) as u32
      .                   }
      .           
      .                   /// Returns the number of leading ones in the binary representation of `self`.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
      .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn rotate_left(self, n: u32) -> Self {
305,948 ( 0.34%)              intrinsics::rotate_left(self, n as $SelfT)
      .                   }
      .           
      .                   /// Shifts the bits to the right by a specified amount, `n`,
      .                   /// wrapping the truncated bits to the beginning of the resulting
      .                   /// integer.
      .                   ///
      .                   /// Please note this isn't the same operation as the `>>` shifting operator!
      .                   ///
-- line 220 ----------------------------------------
-- line 430 ----------------------------------------
      .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline]
      .                   pub const fn checked_add(self, rhs: Self) -> Option<Self> {
      2 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
      .                       if unlikely!(b) {None} else {Some(a)}
      .                   }
      .           
      .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
      .                   /// cannot occur.
      .                   ///
      .                   /// # Safety
      .                   ///
-- line 446 ----------------------------------------
-- line 456 ----------------------------------------
      .                   )]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
      .                   #[inline(always)]
      .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
      .                       // SAFETY: the caller must uphold the safety contract for
      .                       // `unchecked_add`.
 40,214 ( 0.04%)              unsafe { intrinsics::unchecked_add(self, rhs) }
      .                   }
      .           
      .                   /// Checked addition with a signed integer. Computes `self + rhs`,
      .                   /// returning `None` if overflow occurred.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
      .                   )]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
      .                   #[inline(always)]
      .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
      .                       // SAFETY: the caller must uphold the safety contract for
      .                       // `unchecked_sub`.
    356 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
      .                   }
      .           
      .                   /// Checked integer multiplication. Computes `self * rhs`, returning
      .                   /// `None` if overflow occurred.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 1035 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
      .                   #[inline(always)]
      .                   pub const fn saturating_add(self, rhs: Self) -> Self {
  2,852 ( 0.00%)              intrinsics::saturating_add(self, rhs)
      .                   }
      .           
      .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
      .                   /// saturating at the numeric bounds instead of overflowing.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
      .                   #[inline(always)]
      .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
     46 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
      .                   }
      .           
      .                   /// Saturating integer multiplication. Computes `self * rhs`,
      .                   /// saturating at the numeric bounds instead of overflowing.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
156,440 ( 0.17%)              intrinsics::wrapping_add(self, rhs)
      .                   }
      .           
      .                   /// Wrapping (modular) addition with a signed integer. Computes
      .                   /// `self + rhs`, wrapping around at the boundary of the type.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
 61,832 ( 0.07%)              intrinsics::wrapping_sub(self, rhs)
      .                   }
      .           
      .                   /// Wrapping (modular) multiplication. Computes `self *
      .                   /// rhs`, wrapping around at the boundary of the type.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
      .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
176,342 ( 0.19%)              intrinsics::wrapping_mul(self, rhs)
      .                   }
      .           
      .                   /// Wrapping (modular) division. Computes `self / rhs`.
      .                   /// Wrapped division on unsigned types is just normal division.
      .                   /// There's no way wrapping could ever happen.
      .                   /// This function exists, so that all operations
      .                   /// are accounted for in the wrapping operations.
      .                   ///
-- line 1256 ----------------------------------------
-- line 1492 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
      .                   /// ```
      .                   #[stable(feature = "wrapping", since = "1.7.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
 26,283 ( 0.03%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
      .                       (a as Self, b)
      .                   }
      .           
      .                   /// Calculates `self + rhs + carry` without the ability to overflow.
      .                   ///
      .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
      .                   /// additional bit of overflow. This allows for chaining together multiple additions
      .                   /// to create "big integers" which represent larger values.
-- line 1508 ----------------------------------------
-- line 1588 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
      .                   /// ```
      .                   #[stable(feature = "wrapping", since = "1.7.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
  8,005 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
      .                       (a as Self, b)
      .                   }
      .           
      .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
      .                   ///
      .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
      .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
      .                   /// to create "big integers" which represent larger values.
-- line 1604 ----------------------------------------
-- line 1674 ----------------------------------------
      .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
      .                   /// ```
      .                   #[stable(feature = "wrapping", since = "1.7.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                     without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
 40,668 ( 0.04%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
      .                       (a as Self, b)
      .                   }
      .           
      .                   /// Calculates the divisor when `self` is divided by `rhs`.
      .                   ///
      .                   /// Returns a tuple of the divisor along with a boolean indicating
      .                   /// whether an arithmetic overflow would occur. Note that for unsigned
      .                   /// integers overflow never occurs, so the second value is always
-- line 1690 ----------------------------------------
-- line 2132 ----------------------------------------
      .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
      .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
      .                   /// ```
      .                   #[must_use]
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
      .                   #[inline(always)]
      .                   pub const fn is_power_of_two(self) -> bool {
    186 ( 0.00%)              self.count_ones() == 1
      .                   }
      .           
      .                   // Returns one less than next power of two.
      .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
      .                   //
      .                   // 8u8.one_less_than_next_power_of_two() == 7
      .                   // 6u8.one_less_than_next_power_of_two() == 7
      .                   //
      .                   // This method cannot overflow, as in the `next_power_of_two`
      .                   // overflow cases it instead ends up returning the maximum value
      .                   // of the type, and can return 0 for 0.
      .                   #[inline]
      .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
      .                   const fn one_less_than_next_power_of_two(self) -> Self {
    156 ( 0.00%)              if self <= 1 { return 0; }
      .           
    673 ( 0.00%)              let p = self - 1;
      .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
      .                       // That means the shift is always in-bounds, and some processors
      .                       // (such as intel pre-haswell) have more efficient ctlz
      .                       // intrinsics when the argument is non-zero.
  2,019 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
    673 ( 0.00%)              <$SelfT>::MAX >> z
      .                   }
      .           
      .                   /// Returns the smallest power of two greater than or equal to `self`.
      .                   ///
      .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
      .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
      .                   /// release mode (the only situation in which method can return 0).
      .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline]
      .                   #[rustc_inherit_overflow_checks]
      .                   pub const fn next_power_of_two(self) -> Self {
  1,190 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
      .                   }
      .           
      .                   /// Returns the smallest power of two greater than or equal to `n`. If
      .                   /// the next power of two is greater than the type's maximum value,
      .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
      .                   ///
      .                   /// # Examples
      .                   ///
-- line 2195 ----------------------------------------

  2,315 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs
--------------------------------------------------------------------------------
Ir               

-- line 72 ----------------------------------------
      .                   fn deref(&self) -> &Self::Target {
      .                       &self.0
      .                   }
      .               }
      .           
      .               impl<T> !DerefMut for MonotonicVec<T> {}
      .           }
      .           
    148 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, Copy, HashStable_Generic)]
      .           pub struct Spanned<T> {
      .               pub node: T,
      .               pub span: Span,
      .           }
      .           
      .           pub fn respan<T>(sp: Span, t: T) -> Spanned<T> {
    386 ( 0.00%)      Spanned { node: t, span: sp }
    315 ( 0.00%)  }
      .           
      .           pub fn dummy_spanned<T>(t: T) -> Spanned<T> {
      .               respan(DUMMY_SP, t)
      .           }
      .           
      .           // _____________________________________________________________________________
      .           // SourceFile, MultiByteChar, FileName, FileLines
      .           //
-- line 96 ----------------------------------------
-- line 107 ----------------------------------------
      .           /// A FileLoader that uses std::fs to load real files.
      .           pub struct RealFileLoader;
      .           
      .           impl FileLoader for RealFileLoader {
      .               fn file_exists(&self, path: &Path) -> bool {
      .                   path.exists()
      .               }
      .           
      2 ( 0.00%)      fn read_file(&self, path: &Path) -> io::Result<String> {
      .                   fs::read_to_string(path)
      3 ( 0.00%)      }
      .           }
      .           
      .           /// This is a [SourceFile] identifier that is used to correlate source files between
      .           /// subsequent compilation sessions (which is something we need to do during
      .           /// incremental compilation).
      .           ///
      .           /// The [StableSourceFileId] also contains the CrateNum of the crate the source
      .           /// file was originally parsed for. This way we get two separate entries in
-- line 125 ----------------------------------------
-- line 128 ----------------------------------------
      .           /// at the point where we discover that there's a local use of the file in
      .           /// addition to the upstream one, we might already have made decisions based on
      .           /// the assumption that it's an upstream file. Treating the two files as
      .           /// different has no real downsides.
      .           #[derive(Copy, Clone, PartialEq, Eq, Hash, Encodable, Decodable, Debug)]
      .           pub struct StableSourceFileId {
      .               // A hash of the source file's FileName. This is hash so that it's size
      .               // is more predictable than if we included the actual FileName value.
     55 ( 0.00%)      pub file_name_hash: u64,
      .           
      .               // The CrateNum of the crate this source file was originally parsed for.
      .               // We cannot include this information in the hash because at the time
      .               // of hashing we don't have the context to map from the CrateNum's numeric
      .               // value to a StableCrateId.
      .               pub cnum: CrateNum,
      .           }
      .           
      .           // FIXME: we need a more globally consistent approach to the problem solved by
      .           // StableSourceFileId, perhaps built atop source_file.name_hash.
      .           impl StableSourceFileId {
      .               pub fn new(source_file: &SourceFile) -> StableSourceFileId {
  1,304 ( 0.00%)          StableSourceFileId::new_from_name(&source_file.name, source_file.cnum)
      .               }
      .           
  3,275 ( 0.00%)      fn new_from_name(name: &FileName, cnum: CrateNum) -> StableSourceFileId {
      .                   let mut hasher = StableHasher::new();
    655 ( 0.00%)          name.hash(&mut hasher);
      .                   StableSourceFileId { file_name_hash: hasher.finish(), cnum }
  3,930 ( 0.00%)      }
      .           }
      .           
      .           // _____________________________________________________________________________
      .           // SourceMap
      .           //
      .           
      .           #[derive(Default)]
      .           pub(super) struct SourceMapFiles {
-- line 164 ----------------------------------------
-- line 176 ----------------------------------------
      .               // `--remap-path-prefix` to all `SourceFile`s allocated within this `SourceMap`.
      .               path_mapping: FilePathMapping,
      .           
      .               /// The algorithm used for hashing the contents of each source file.
      .               hash_kind: SourceFileHashAlgorithm,
      .           }
      .           
      .           impl SourceMap {
      2 ( 0.00%)      pub fn new(path_mapping: FilePathMapping) -> SourceMap {
      .                   Self::with_file_loader_and_hash_kind(
      .                       Box::new(RealFileLoader),
      8 ( 0.00%)              path_mapping,
      .                       SourceFileHashAlgorithm::Md5,
      .                   )
      2 ( 0.00%)      }
      .           
      1 ( 0.00%)      pub fn with_file_loader_and_hash_kind(
      .                   file_loader: Box<dyn FileLoader + Sync + Send>,
      .                   path_mapping: FilePathMapping,
      .                   hash_kind: SourceFileHashAlgorithm,
      .               ) -> SourceMap {
     17 ( 0.00%)          SourceMap {
      .                       used_address_space: AtomicU32::new(0),
      .                       files: Default::default(),
      .                       file_loader,
      4 ( 0.00%)              path_mapping,
      .                       hash_kind,
      .                   }
      1 ( 0.00%)      }
      .           
      .               pub fn path_mapping(&self) -> &FilePathMapping {
      3 ( 0.00%)          &self.path_mapping
      3 ( 0.00%)      }
      .           
      .               pub fn file_exists(&self, path: &Path) -> bool {
      .                   self.file_loader.file_exists(path)
      .               }
      .           
     11 ( 0.00%)      pub fn load_file(&self, path: &Path) -> io::Result<Lrc<SourceFile>> {
      4 ( 0.00%)          let src = self.file_loader.read_file(path)?;
      .                   let filename = path.to_owned().into();
     18 ( 0.00%)          Ok(self.new_source_file(filename, src))
      9 ( 0.00%)      }
      .           
      .               /// Loads source file as a binary blob.
      .               ///
      .               /// Unlike `load_file`, guarantees that no normalization like BOM-removal
      .               /// takes place.
      .               pub fn load_binary_file(&self, path: &Path) -> io::Result<Vec<u8>> {
      .                   // Ideally, this should use `self.file_loader`, but it can't
      .                   // deal with binary files yet.
-- line 226 ----------------------------------------
-- line 233 ----------------------------------------
      .                   // empty string.
      .                   let text = std::str::from_utf8(&bytes).unwrap_or("").to_string();
      .                   self.new_source_file(path.to_owned().into(), text);
      .                   Ok(bytes)
      .               }
      .           
      .               // By returning a `MonotonicVec`, we ensure that consumers cannot invalidate
      .               // any existing indices pointing into `files`.
      5 ( 0.00%)      pub fn files(&self) -> MappedReadGuard<'_, monotonic::MonotonicVec<Lrc<SourceFile>>> {
      .                   ReadGuard::map(self.files.borrow(), |files| &files.source_files)
     15 ( 0.00%)      }
      .           
     12 ( 0.00%)      pub fn source_file_by_stable_id(
      .                   &self,
      .                   stable_id: StableSourceFileId,
      .               ) -> Option<Lrc<SourceFile>> {
      .                   self.files.borrow().stable_id_to_source_file.get(&stable_id).cloned()
     15 ( 0.00%)      }
      .           
      .               fn allocate_address_space(&self, size: usize) -> Result<usize, OffsetOverflowError> {
    655 ( 0.00%)          let size = u32::try_from(size).map_err(|_| OffsetOverflowError)?;
      .           
      .                   loop {
    655 ( 0.00%)              let current = self.used_address_space.load(Ordering::Relaxed);
  1,965 ( 0.00%)              let next = current
      .                           .checked_add(size)
      .                           // Add one so there is some space between files. This lets us distinguish
      .                           // positions in the `SourceMap`, even in the presence of zero-length files.
      .                           .and_then(|next| next.checked_add(1))
      .                           .ok_or(OffsetOverflowError)?;
      .           
      .                       if self
      .                           .used_address_space
-- line 265 ----------------------------------------
-- line 269 ----------------------------------------
      .                           return Ok(usize::try_from(current).unwrap());
      .                       }
      .                   }
      .               }
      .           
      .               /// Creates a new `SourceFile`.
      .               /// If a file already exists in the `SourceMap` with the same ID, that file is returned
      .               /// unmodified.
     24 ( 0.00%)      pub fn new_source_file(&self, filename: FileName, src: String) -> Lrc<SourceFile> {
     36 ( 0.00%)          self.try_new_source_file(filename, src).unwrap_or_else(|OffsetOverflowError| {
      .                       eprintln!("fatal error: rustc does not support files larger than 4GB");
      .                       crate::fatal_error::FatalError.raise()
      .                   })
     27 ( 0.00%)      }
      .           
      .               fn try_new_source_file(
      .                   &self,
      .                   filename: FileName,
      .                   src: String,
      .               ) -> Result<Lrc<SourceFile>, OffsetOverflowError> {
      .                   // Note that filename may not be a valid path, eg it may be `<anon>` etc,
      .                   // but this is okay because the directory determined by `path.pop()` will
      .                   // be empty, so the working directory will be used.
     39 ( 0.00%)          let (filename, _) = self.path_mapping.map_filename_prefix(&filename);
      .           
      6 ( 0.00%)          let file_id = StableSourceFileId::new_from_name(&filename, LOCAL_CRATE);
      .           
     18 ( 0.00%)          let lrc_sf = match self.source_file_by_stable_id(file_id) {
      .                       Some(lrc_sf) => lrc_sf,
      .                       None => {
      .                           let start_pos = self.allocate_address_space(src.len())?;
      .           
     18 ( 0.00%)                  let source_file = Lrc::new(SourceFile::new(
     27 ( 0.00%)                      filename,
      9 ( 0.00%)                      src,
      .                               Pos::from_usize(start_pos),
      .                               self.hash_kind,
      .                           ));
      .           
      .                           // Let's make sure the file_id we generated above actually matches
      .                           // the ID we generate for the SourceFile we just created.
      .                           debug_assert_eq!(StableSourceFileId::new(&source_file), file_id);
      .           
-- line 311 ----------------------------------------
-- line 319 ----------------------------------------
      .                   };
      .                   Ok(lrc_sf)
      .               }
      .           
      .               /// Allocates a new `SourceFile` representing a source file from an external
      .               /// crate. The source code of such an "imported `SourceFile`" is not available,
      .               /// but we still know enough to generate accurate debuginfo location
      .               /// information for things inlined from other crates.
  5,216 ( 0.01%)      pub fn new_imported_source_file(
      .                   &self,
      .                   filename: FileName,
      .                   src_hash: SourceFileHash,
      .                   name_hash: u128,
      .                   source_len: usize,
      .                   cnum: CrateNum,
      .                   mut file_local_lines: Vec<BytePos>,
      .                   mut file_local_multibyte_chars: Vec<MultiByteChar>,
-- line 335 ----------------------------------------
-- line 341 ----------------------------------------
      .                   let start_pos = self
      .                       .allocate_address_space(source_len)
      .                       .expect("not enough address space for imported source file");
      .           
      .                   let end_pos = Pos::from_usize(start_pos + source_len);
      .                   let start_pos = Pos::from_usize(start_pos);
      .           
      .                   for pos in &mut file_local_lines {
427,750 ( 0.47%)              *pos = *pos + start_pos;
      .                   }
      .           
      .                   for mbc in &mut file_local_multibyte_chars {
  1,140 ( 0.00%)              mbc.pos = mbc.pos + start_pos;
      .                   }
      .           
      .                   for swc in &mut file_local_non_narrow_chars {
    624 ( 0.00%)              *swc = *swc + start_pos;
      .                   }
      .           
      .                   for nc in &mut file_local_normalized_pos {
      .                       nc.pos = nc.pos + start_pos;
      .                   }
      .           
  1,956 ( 0.00%)          let source_file = Lrc::new(SourceFile {
  5,216 ( 0.01%)              name: filename,
      .                       src: None,
      .                       src_hash,
      .                       external_src: Lock::new(ExternalSource::Foreign {
      .                           kind: ExternalSourceKind::AbsentOk,
      .                           original_start_pos,
      .                           original_end_pos,
      .                       }),
      .                       start_pos,
-- line 373 ----------------------------------------
-- line 383 ----------------------------------------
      .                   let mut files = self.files.borrow_mut();
      .           
      .                   files.source_files.push(source_file.clone());
      .                   files
      .                       .stable_id_to_source_file
      .                       .insert(StableSourceFileId::new(&source_file), source_file.clone());
      .           
      .                   source_file
  5,868 ( 0.01%)      }
      .           
      .               // If there is a doctest offset, applies it to the line.
      .               pub fn doctest_offset_line(&self, file: &FileName, orig: usize) -> usize {
      .                   match file {
      .                       FileName::DocTest(_, offset) => {
      .                           if *offset < 0 {
      .                               orig - (-(*offset)) as usize
      .                           } else {
-- line 399 ----------------------------------------
-- line 400 ----------------------------------------
      .                               orig + *offset as usize
      .                           }
      .                       }
      .                       _ => orig,
      .                   }
      .               }
      .           
      .               /// Return the SourceFile that contains the given `BytePos`
      3 ( 0.00%)      pub fn lookup_source_file(&self, pos: BytePos) -> Lrc<SourceFile> {
      1 ( 0.00%)          let idx = self.lookup_source_file_idx(pos);
      1 ( 0.00%)          (*self.files.borrow().source_files)[idx].clone()
      3 ( 0.00%)      }
      .           
      .               /// Looks up source information about a `BytePos`.
      .               pub fn lookup_char_pos(&self, pos: BytePos) -> Loc {
      5 ( 0.00%)          let sf = self.lookup_source_file(pos);
      6 ( 0.00%)          let (line, col, col_display) = sf.lookup_file_pos_with_col_display(pos);
      3 ( 0.00%)          Loc { file: sf, line, col, col_display }
      .               }
      .           
      .               // If the corresponding `SourceFile` is empty, does not return a line number.
      .               pub fn lookup_line(&self, pos: BytePos) -> Result<SourceFileAndLine, Lrc<SourceFile>> {
      .                   let f = self.lookup_source_file(pos);
      .           
      .                   match f.lookup_line(pos) {
      .                       Some(line) => Ok(SourceFileAndLine { sf: f, line }),
-- line 425 ----------------------------------------
-- line 451 ----------------------------------------
      .           
      .               /// Format the span location to be printed in diagnostics. Must not be emitted
      .               /// to build artifacts as this may leak local file paths. Use span_to_embeddable_string
      .               /// for string suitable for embedding.
      .               pub fn span_to_diagnostic_string(&self, sp: Span) -> String {
      .                   self.span_to_string(sp, self.path_mapping.filename_display_for_diagnostics)
      .               }
      .           
     11 ( 0.00%)      pub fn span_to_filename(&self, sp: Span) -> FileName {
      3 ( 0.00%)          self.lookup_char_pos(sp.lo()).file.name.clone()
      8 ( 0.00%)      }
      .           
      .               pub fn filename_for_diagnostics<'a>(&self, filename: &'a FileName) -> FileNameDisplay<'a> {
      .                   filename.display(self.path_mapping.filename_display_for_diagnostics)
      .               }
      .           
    319 ( 0.00%)      pub fn is_multiline(&self, sp: Span) -> bool {
    116 ( 0.00%)          let lo = self.lookup_source_file_idx(sp.lo());
    116 ( 0.00%)          let hi = self.lookup_source_file_idx(sp.hi());
     58 ( 0.00%)          if lo != hi {
      .                       return true;
      .                   }
     58 ( 0.00%)          let f = (*self.files.borrow().source_files)[lo].clone();
      .                   f.lookup_line(sp.lo()) != f.lookup_line(sp.hi())
    261 ( 0.00%)      }
      .           
      .               #[instrument(skip(self), level = "trace")]
      .               pub fn is_valid_span(&self, sp: Span) -> Result<(Loc, Loc), SpanLinesError> {
      .                   let lo = self.lookup_char_pos(sp.lo());
      .                   trace!(?lo);
      .                   let hi = self.lookup_char_pos(sp.hi());
      .                   trace!(?hi);
      .                   if lo.file.start_pos != hi.file.start_pos {
-- line 483 ----------------------------------------
-- line 782 ----------------------------------------
      .                           },
      .                       }
      .                   };
      .           
      .                   sp.with_hi(BytePos(sp.lo().0 + width as u32))
      .               }
      .           
      .               /// Returns a new span representing just the last character of this span.
  2,028 ( 0.00%)      pub fn end_point(&self, sp: Span) -> Span {
      .                   let pos = sp.hi().0;
      .           
    676 ( 0.00%)          let width = self.find_width_of_character_at_span(sp, false);
      .                   let corrected_end_position = pos.checked_sub(width).unwrap_or(pos);
      .           
      .                   let end_point = BytePos(cmp::max(corrected_end_position, sp.lo().0));
  1,690 ( 0.00%)          sp.with_lo(end_point)
      .               }
      .           
      .               /// Returns a new span representing the next character after the end-point of this span.
     33 ( 0.00%)      pub fn next_point(&self, sp: Span) -> Span {
      3 ( 0.00%)          if sp.is_dummy() {
      .                       return sp;
      .                   }
      .                   let start_of_next_point = sp.hi().0;
      .           
     12 ( 0.00%)          let width = self.find_width_of_character_at_span(sp.shrink_to_hi(), true);
      .                   // If the width is 1, then the next span should point to the same `lo` and `hi`. However,
      .                   // in the case of a multibyte character, where the width != 1, the next span should
      .                   // span multiple bytes to include the whole character.
      .                   let end_of_next_point =
      6 ( 0.00%)              start_of_next_point.checked_add(width - 1).unwrap_or(start_of_next_point);
      .           
      6 ( 0.00%)          let end_of_next_point = BytePos(cmp::max(sp.lo().0 + 1, end_of_next_point));
      .                   Span::new(BytePos(start_of_next_point), end_of_next_point, sp.ctxt(), None)
     27 ( 0.00%)      }
      .           
      .               /// Finds the width of the character, either before or after the end of provided span,
      .               /// depending on the `forwards` parameter.
  2,064 ( 0.00%)      fn find_width_of_character_at_span(&self, sp: Span, forwards: bool) -> u32 {
      .                   let sp = sp.data();
    172 ( 0.00%)          if sp.lo == sp.hi {
      .                       debug!("find_width_of_character_at_span: early return empty span");
      .                       return 1;
      .                   }
      .           
  1,183 ( 0.00%)          let local_begin = self.lookup_byte_offset(sp.lo);
  1,521 ( 0.00%)          let local_end = self.lookup_byte_offset(sp.hi);
      .                   debug!(
      .                       "find_width_of_character_at_span: local_begin=`{:?}`, local_end=`{:?}`",
      .                       local_begin, local_end
      .                   );
      .           
    338 ( 0.00%)          if local_begin.sf.start_pos != local_end.sf.start_pos {
      .                       debug!("find_width_of_character_at_span: begin and end are in different files");
      .                       return 1;
      .                   }
      .           
      .                   let start_index = local_begin.pos.to_usize();
      .                   let end_index = local_end.pos.to_usize();
      .                   debug!(
      .                       "find_width_of_character_at_span: start_index=`{:?}`, end_index=`{:?}`",
      .                       start_index, end_index
      .                   );
      .           
      .                   // Disregard indexes that are at the start or end of their spans, they can't fit bigger
      .                   // characters.
    612 ( 0.00%)          if (!forwards && end_index == usize::MIN) || (forwards && start_index == usize::MAX) {
      .                       debug!("find_width_of_character_at_span: start or end of span, cannot be multibyte");
      .                       return 1;
      .                   }
      .           
    153 ( 0.00%)          let source_len = (local_begin.sf.end_pos - local_begin.sf.start_pos).to_usize();
      .                   debug!("find_width_of_character_at_span: source_len=`{:?}`", source_len);
      .                   // Ensure indexes are also not malformed.
    612 ( 0.00%)          if start_index > end_index || end_index > source_len {
      .                       debug!("find_width_of_character_at_span: source indexes are malformed");
      .                       return 1;
      .                   }
      .           
      .                   let src = local_begin.sf.external_src.borrow();
      .           
      .                   // We need to extend the snippet to the end of the src rather than to end_index so when
      .                   // searching forwards for boundaries we've got somewhere to search.
    459 ( 0.00%)          let snippet = if let Some(ref src) = local_begin.sf.src {
      .                       &src[start_index..]
      .                   } else if let Some(src) = src.get_source() {
      .                       &src[start_index..]
      .                   } else {
      .                       return 1;
      .                   };
      .                   debug!("find_width_of_character_at_span: snippet=`{:?}`", snippet);
      .           
    918 ( 0.00%)          let mut target = if forwards { end_index + 1 } else { end_index - 1 };
      .                   debug!("find_width_of_character_at_span: initial target=`{:?}`", target);
      .           
    612 ( 0.00%)          while !snippet.is_char_boundary(target - start_index) && target < source_len {
      .                       target = if forwards {
      .                           target + 1
      .                       } else {
      .                           match target.checked_sub(1) {
      .                               Some(target) => target,
      .                               None => {
      .                                   break;
      .                               }
      .                           }
      .                       };
      .                       debug!("find_width_of_character_at_span: target=`{:?}`", target);
      .                   }
      .                   debug!("find_width_of_character_at_span: final target=`{:?}`", target);
      .           
    612 ( 0.00%)          if forwards { (target - end_index) as u32 } else { (end_index - target) as u32 }
  1,548 ( 0.00%)      }
      .           
      .               pub fn get_source_file(&self, filename: &FileName) -> Option<Lrc<SourceFile>> {
      .                   // Remap filename before lookup
      .                   let filename = self.path_mapping().map_filename_prefix(filename).0;
      .                   for sf in self.files.borrow().source_files.iter() {
      .                       if filename == sf.name {
      .                           return Some(sf.clone());
      .                       }
      .                   }
      .                   None
      .               }
      .           
      .               /// For a global `BytePos`, computes the local offset within the containing `SourceFile`.
  1,690 ( 0.00%)      pub fn lookup_byte_offset(&self, bpos: BytePos) -> SourceFileAndBytePos {
    338 ( 0.00%)          let idx = self.lookup_source_file_idx(bpos);
    676 ( 0.00%)          let sf = (*self.files.borrow().source_files)[idx].clone();
      .                   let offset = bpos - sf.start_pos;
      .                   SourceFileAndBytePos { sf, pos: offset }
  1,690 ( 0.00%)      }
      .           
      .               // Returns the index of the `SourceFile` (in `self.files`) that contains `pos`.
      .               // This index is guaranteed to be valid for the lifetime of this `SourceMap`,
      .               // since `source_files` is a `MonotonicVec`
  1,863 ( 0.00%)      pub fn lookup_source_file_idx(&self, pos: BytePos) -> usize {
      .                   self.files
      .                       .borrow()
      .                       .source_files
      .                       .binary_search_by_key(&pos, |key| key.start_pos)
  1,240 ( 0.00%)              .unwrap_or_else(|p| p - 1)
  2,484 ( 0.00%)      }
      .           
      .               pub fn count_lines(&self) -> usize {
      .                   self.files().iter().fold(0, |a, f| a + f.count_lines())
      .               }
      .           
      .               pub fn generate_fn_name_span(&self, span: Span) -> Option<Span> {
      .                   let prev_span = self.span_extend_to_prev_str(span, "fn", true);
      .                   if let Ok(snippet) = self.span_to_snippet(prev_span) {
-- line 931 ----------------------------------------
-- line 1053 ----------------------------------------
      .                   let span = span.shrink_to_hi().with_hi(BytePos(span.hi().0.checked_add(1)?));
      .                   if self.span_to_snippet(span).as_deref() != Ok(";") {
      .                       return None;
      .                   }
      .                   Some(span)
      .               }
      .           }
      .           
      8 ( 0.00%)  #[derive(Clone)]
      .           pub struct FilePathMapping {
      4 ( 0.00%)      mapping: Vec<(PathBuf, PathBuf)>,
      2 ( 0.00%)      filename_display_for_diagnostics: FileNameDisplayPreference,
      .           }
      .           
      .           impl FilePathMapping {
      2 ( 0.00%)      pub fn empty() -> FilePathMapping {
      .                   FilePathMapping::new(Vec::new())
      2 ( 0.00%)      }
      .           
      3 ( 0.00%)      pub fn new(mapping: Vec<(PathBuf, PathBuf)>) -> FilePathMapping {
      .                   let filename_display_for_diagnostics = if mapping.is_empty() {
      .                       FileNameDisplayPreference::Local
      .                   } else {
      .                       FileNameDisplayPreference::Remapped
      .                   };
      .           
     20 ( 0.00%)          FilePathMapping { mapping, filename_display_for_diagnostics }
      3 ( 0.00%)      }
      .           
      .               /// Applies any path prefix substitution as defined by the mapping.
      .               /// The return value is the remapped path and a boolean indicating whether
      .               /// the path was affected by the mapping.
     45 ( 0.00%)      pub fn map_prefix(&self, path: PathBuf) -> (PathBuf, bool) {
      .                   // NOTE: We are iterating over the mapping entries from last to first
      .                   //       because entries specified later on the command line should
      .                   //       take precedence.
      .                   for &(ref from, ref to) in self.mapping.iter().rev() {
      .                       if let Ok(rest) = path.strip_prefix(from) {
      .                           return (to.join(rest), true);
      .                       }
      .                   }
      .           
     25 ( 0.00%)          (path, false)
     45 ( 0.00%)      }
      .           
     24 ( 0.00%)      fn map_filename_prefix(&self, file: &FileName) -> (FileName, bool) {
      6 ( 0.00%)          match file {
      2 ( 0.00%)              FileName::Real(realfile) if let RealFileName::LocalPath(local_path) = realfile => {
     14 ( 0.00%)                  let (mapped_path, mapped) = self.map_prefix(local_path.to_path_buf());
      1 ( 0.00%)                  let realfile = if mapped {
      .                               RealFileName::Remapped {
      .                                   local_path: Some(local_path.clone()),
      .                                   virtual_name: mapped_path,
      .                               }
      .                           } else {
      .                               realfile.clone()
      .                           };
     10 ( 0.00%)                  (FileName::Real(realfile), mapped)
      4 ( 0.00%)              }
      .                       FileName::Real(_) => unreachable!("attempted to remap an already remapped filename"),
     22 ( 0.00%)              other => (other.clone(), false),
      .                   }
     16 ( 0.00%)      }
      .           }

  5,643 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs
--------------------------------------------------------------------------------
Ir               

-- line 17 ----------------------------------------
      .                   #[inline]
      .                   pub fn $fn_name(
      .                       out: &mut [::std::mem::MaybeUninit<u8>; max_leb128_len!($int_ty)],
      .                       mut value: $int_ty,
      .                   ) -> &[u8] {
      .                       let mut i = 0;
      .           
      .                       loop {
  2,719 ( 0.00%)                  if value < 0x80 {
      .                               unsafe {
  1,083 ( 0.00%)                          *out.get_unchecked_mut(i).as_mut_ptr() = value as u8;
      .                               }
      .           
  1,472 ( 0.00%)                      i += 1;
      .                               break;
      .                           } else {
      .                               unsafe {
  1,636 ( 0.00%)                          *out.get_unchecked_mut(i).as_mut_ptr() = ((value & 0x7f) | 0x80) as u8;
      .                               }
      .           
    560 ( 0.00%)                      value >>= 7;
      .                               i += 1;
      .                           }
      .                       }
      .           
      .                       unsafe { ::std::mem::MaybeUninit::slice_assume_init_ref(&out.get_unchecked(..i)) }
      .                   }
      .               };
      .           }
-- line 45 ----------------------------------------
-- line 53 ----------------------------------------
      .           macro_rules! impl_read_unsigned_leb128 {
      .               ($fn_name:ident, $int_ty:ty) => {
      .                   #[inline]
      .                   pub fn $fn_name(slice: &[u8], position: &mut usize) -> $int_ty {
      .                       // The first iteration of this loop is unpeeled. This is a
      .                       // performance win because this code is hot and integer values less
      .                       // than 128 are very common, typically occurring 50-80% or more of
      .                       // the time, even for u64 and u128.
408,644 ( 0.45%)              let byte = slice[*position];
204,322 ( 0.23%)              *position += 1;
204,322 ( 0.23%)              if (byte & 0x80) == 0 {
      .                           return byte as $int_ty;
      .                       }
  1,304 ( 0.00%)              let mut result = (byte & 0x7F) as $int_ty;
      .                       let mut shift = 7;
      .                       loop {
173,928 ( 0.19%)                  let byte = slice[*position];
109,212 ( 0.12%)                  *position += 1;
115,952 ( 0.13%)                  if (byte & 0x80) == 0 {
 89,629 ( 0.10%)                      result |= (byte as $int_ty) << shift;
      .                               return result;
      .                           } else {
      .                               result |= ((byte & 0x7F) as $int_ty) << shift;
      .                           }
      .                           shift += 7;
      .                       }
      .                   }
      .               };
-- line 80 ----------------------------------------

189,106 ( 0.21%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir              

-- line 91 ----------------------------------------
     .           // maximum of number bytes needed to fill an 8-byte-sized element on which
     .           // SipHash operates. Note that for variable-sized copies which are known to be
     .           // less than 8 bytes, this function will perform more work than necessary unless
     .           // the compiler is able to optimize the extra work away.
     .           #[inline]
     .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
     .               debug_assert!(count <= 8);
     .           
 7,596 ( 0.01%)      if count == 8 {
     .                   ptr::copy_nonoverlapping(src, dst, 8);
     .                   return;
     .               }
     .           
     .               let mut i = 0;
13,824 ( 0.02%)      if i + 3 < count {
     .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
     .                   i += 4;
     .               }
     .           
29,520 ( 0.03%)      if i + 1 < count {
     .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
 4,493 ( 0.00%)          i += 2
     .               }
     .           
13,824 ( 0.02%)      if i < count {
 6,842 ( 0.01%)          *dst.add(i) = *src.add(i);
     .                   i += 1;
     .               }
     .           
     .               debug_assert_eq!(i, count);
     .           }
     .           
     .           // # Implementation
     .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
     .           
     .                   hasher
     .               }
     .           
     .               // A specialized write function for values with size <= 8.
     .               #[inline]
     .               fn short_write<T>(&mut self, x: T) {
     .                   let size = mem::size_of::<T>();
 7,949 ( 0.01%)          let nbuf = self.nbuf;
     .                   debug_assert!(size <= 8);
     .                   debug_assert!(nbuf < BUFFER_SIZE);
     .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
     .           
51,160 ( 0.06%)          if nbuf + size < BUFFER_SIZE {
     .                       unsafe {
     .                           // The memcpy call is optimized away because the size is known.
     .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
     .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
     .                       }
     .           
16,181 ( 0.02%)              self.nbuf = nbuf + size;
     .           
     .                       return;
     .                   }
     .           
 2,096 ( 0.00%)          unsafe { self.short_write_process_buffer(x) }
     .               }
     .           
     .               // A specialized write function for values with size <= 8 that should only
     .               // be called when the write would cause the buffer to fill.
     .               //
     .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
     .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
     .               // overflow) if it wasn't already.
     .               #[inline(never)]
   637 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
     .                   let size = mem::size_of::<T>();
   637 ( 0.00%)          let nbuf = self.nbuf;
     .                   debug_assert!(size <= 8);
     .                   debug_assert!(nbuf < BUFFER_SIZE);
     .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
     .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
     .           
     .                   // Copy first part of input into end of buffer, possibly into spill
     .                   // element. The memcpy call is optimized away because the size is known.
     .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
     .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
     .           
     .                   // Process buffer.
     .                   for i in 0..BUFFER_CAPACITY {
 6,370 ( 0.01%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
 5,096 ( 0.01%)              self.state.v3 ^= elem;
     .                       Sip24Rounds::c_rounds(&mut self.state);
 5,733 ( 0.01%)              self.state.v0 ^= elem;
     .                   }
     .           
     .                   // Copy remaining input into start of buffer by copying size - 1
     .                   // elements from spill (at most size - 1 bytes could have overflowed
     .                   // into the spill). The memcpy call is optimized away because the size
     .                   // is known. And the whole copy is optimized away for size == 1.
     .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
     .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
     .           
     .                   // This function should only be called when the write fills the buffer.
     .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
     .                   // is statically known, so the branch is optimized away.
 2,985 ( 0.00%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
 2,548 ( 0.00%)          self.processed += BUFFER_SIZE;
 1,274 ( 0.00%)      }
     .           
     .               // A write function for byte slices.
     .               #[inline]
     .               fn slice_write(&mut self, msg: &[u8]) {
     .                   let length = msg.len();
 7,343 ( 0.01%)          let nbuf = self.nbuf;
     .                   debug_assert!(nbuf < BUFFER_SIZE);
     .           
38,073 ( 0.04%)          if nbuf + length < BUFFER_SIZE {
     .                       unsafe {
     .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
     .           
13,848 ( 0.02%)                  if length <= 8 {
     .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
     .                           } else {
     .                               // This memcpy is *not* optimized away.
     .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
     .                           }
     .                       }
     .           
 6,928 ( 0.01%)              self.nbuf = nbuf + length;
     .           
     .                       return;
     .                   }
     .           
 3,752 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
     .               }
     .           
     .               // A write function for byte slices that should only be called when the
     .               // write would cause the buffer to fill.
     .               //
     .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
     .               // and `msg` must contain enough bytes to initialize the rest of the element
     .               // containing the byte offset `self.nbuf`.
     .               #[inline(never)]
 3,450 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
     .                   let length = msg.len();
   690 ( 0.00%)          let nbuf = self.nbuf;
     .                   debug_assert!(nbuf < BUFFER_SIZE);
     .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
     .           
     .                   // Always copy first part of input into current element of buffer.
     .                   // This function should only be called when the write fills the buffer,
     .                   // so we know that there is enough input to fill the current element.
 2,070 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
   690 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
     .           
     .                   let src = msg.as_ptr();
     .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
     .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
     .           
     .                   // Process buffer.
     .           
     .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
     .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
     .                   // We know that is true, because last step ensured we have a full
     .                   // element in the buffer.
 1,380 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
     .           
     .                   for i in 0..last {
 5,090 ( 0.01%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
 5,780 ( 0.01%)              self.state.v3 ^= elem;
     .                       Sip24Rounds::c_rounds(&mut self.state);
10,180 ( 0.01%)              self.state.v0 ^= elem;
     .                   }
     .           
     .                   // Process the remaining element-sized chunks of input.
     .                   let mut processed = needed_in_elem;
 1,380 ( 0.00%)          let input_left = length - processed;
   720 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
     .                   let extra_bytes_left = input_left % ELEM_SIZE;
     .           
     .                   for _ in 0..elems_left {
   538 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
   538 ( 0.00%)              self.state.v3 ^= elem;
     .                       Sip24Rounds::c_rounds(&mut self.state);
   538 ( 0.00%)              self.state.v0 ^= elem;
 1,076 ( 0.00%)              processed += ELEM_SIZE;
     .                   }
     .           
     .                   // Copy remaining input into start of buffer.
     .                   let src = msg.as_ptr().add(processed);
     .                   let dst = self.buf.as_mut_ptr() as *mut u8;
     .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
     .           
   690 ( 0.00%)          self.nbuf = extra_bytes_left;
 3,450 ( 0.00%)          self.processed += nbuf + processed;
 4,140 ( 0.00%)      }
     .           
     .               #[inline]
     .               pub fn finish128(mut self) -> (u64, u64) {
     .                   debug_assert!(self.nbuf < BUFFER_SIZE);
     .           
     .                   // Process full elements in buffer.
 2,400 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
     .           
     .                   // Since we're consuming self, avoid updating members for a potential
     .                   // performance gain.
 3,200 ( 0.00%)          let mut state = self.state;
     .           
     .                   for i in 0..last {
 2,491 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
 2,491 ( 0.00%)              state.v3 ^= elem;
     .                       Sip24Rounds::c_rounds(&mut state);
 2,491 ( 0.00%)              state.v0 ^= elem;
     .                   }
     .           
     .                   // Get remaining partial element.
 1,600 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
     .                       unsafe {
     .                           // Ensure element is initialized by writing zero bytes. At most
     .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
     .                           // to write this many because we have the spill and we maintain
     .                           // `self.nbuf` such that this write will start before the spill.
     .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
     .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
   709 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
     .                       }
     .                   } else {
     .                       0
     .                   };
     .           
     .                   // Finalize the hash.
 2,309 ( 0.00%)          let length = self.processed + self.nbuf;
 1,598 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
     .           
   799 ( 0.00%)          state.v3 ^= b;
     .                   Sip24Rounds::c_rounds(&mut state);
   799 ( 0.00%)          state.v0 ^= b;
     .           
   799 ( 0.00%)          state.v2 ^= 0xee;
     .                   Sip24Rounds::d_rounds(&mut state);
 1,750 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
     .           
   150 ( 0.00%)          state.v1 ^= 0xdd;
     .                   Sip24Rounds::d_rounds(&mut state);
   150 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
     .           
     .                   (_0, _1)
     .               }
     .           }
     .           
     .           impl Hasher for SipHasher128 {
     .               #[inline]
     .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
     .           }
     .           
     .           #[derive(Debug, Clone, Default)]
     .           struct Sip24Rounds;
     .           
     .           impl Sip24Rounds {
     .               #[inline]
     .               fn c_rounds(state: &mut State) {
58,763 ( 0.06%)          compress!(state);
73,237 ( 0.08%)          compress!(state);
     .               }
     .           
     .               #[inline]
     .               fn d_rounds(state: &mut State) {
 3,496 ( 0.00%)          compress!(state);
 3,496 ( 0.00%)          compress!(state);
 3,496 ( 0.00%)          compress!(state);
 2,698 ( 0.00%)          compress!(state);
     .               }
     .           }

 8,090 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/macro_parser.rs
--------------------------------------------------------------------------------
Ir              

-- line 90 ----------------------------------------
     .           use std::collections::hash_map::Entry::{Occupied, Vacant};
     .           use std::mem;
     .           use std::ops::{Deref, DerefMut};
     .           
     .           // To avoid costly uniqueness checks, we require that `MatchSeq` always has a nonempty body.
     .           
     .           /// Either a sequence of token trees or a single one. This is used as the representation of the
     .           /// sequence of tokens that make up a matcher.
   825 ( 0.00%)  #[derive(Clone)]
     .           enum TokenTreeOrTokenTreeSlice<'tt> {
     .               Tt(TokenTree),
   165 ( 0.00%)      TtSeq(&'tt [TokenTree]),
     .           }
     .           
     .           impl<'tt> TokenTreeOrTokenTreeSlice<'tt> {
     .               /// Returns the number of constituent top-level token trees of `self` (top-level in that it
     .               /// will not recursively descend into subtrees).
     .               fn len(&self) -> usize {
 5,631 ( 0.01%)          match *self {
 1,078 ( 0.00%)              TtSeq(ref v) => v.len(),
     .                       Tt(ref tt) => tt.len(),
     .                   }
     .               }
     .           
     .               /// The `index`-th token tree of `self`.
     .               fn get_tt(&self, index: usize) -> TokenTree {
   498 ( 0.00%)          match *self {
 1,652 ( 0.00%)              TtSeq(ref v) => v[index].clone(),
 1,442 ( 0.00%)              Tt(ref tt) => tt.get_tt(index),
     .                   }
     .               }
     .           }
     .           
     .           /// An unzipping of `TokenTree`s... see the `stack` field of `MatcherPos`.
     .           ///
     .           /// This is used by `inner_parse_loop` to keep track of delimited submatchers that we have
     .           /// descended into.
-- line 126 ----------------------------------------
-- line 147 ----------------------------------------
     .           ///   position refers to.
     .           ///
     .           /// It is important to distinguish these two lifetimes because we have a
     .           /// `SmallVec<TokenTreeOrTokenTreeSlice<'tt>>` below, and the destructor of
     .           /// that is considered to possibly access the data from its elements (it lacks
     .           /// a `#[may_dangle]` attribute). As a result, the compiler needs to know that
     .           /// all the elements in that `SmallVec` strictly outlive the root stack slot
     .           /// lifetime. By separating `'tt` from `'root`, we can show that.
 7,755 ( 0.01%)  #[derive(Clone)]
     .           struct MatcherPos<'root, 'tt> {
     .               /// The token or sequence of tokens that make up the matcher
     .               top_elts: TokenTreeOrTokenTreeSlice<'tt>,
     .           
     .               /// The position of the "dot" in this matcher
   165 ( 0.00%)      idx: usize,
     .           
     .               /// For each named metavar in the matcher, we keep track of token trees matched against the
     .               /// metavar by the black box parser. In particular, there may be more than one match per
     .               /// metavar if we are in a repetition (each repetition matches each of the variables).
     .               /// Moreover, matchers and repetitions can be nested; the `matches` field is shared (hence the
     .               /// `Rc`) among all "nested" matchers. `match_lo`, `match_cur`, and `match_hi` keep track of
     .               /// the current position of the `self` matcher position in the shared `matches` list.
     .               ///
     .               /// Also, note that while we are descending into a sequence, matchers are given their own
     .               /// `matches` vector. Only once we reach the end of a full repetition of the sequence do we add
     .               /// all bound matches from the submatcher into the shared top-level `matches` vector. If `sep`
     .               /// and `up` are `Some`, then `matches` is _not_ the shared top-level list. Instead, if one
     .               /// wants the shared `matches`, one should use `up.matches`.
   660 ( 0.00%)      matches: Box<[Lrc<NamedMatchVec>]>,
     .               /// The position in `matches` corresponding to the first metavar in this matcher's sequence of
     .               /// token trees. In other words, the first metavar in the first token of `top_elts` corresponds
     .               /// to `matches[match_lo]`.
   165 ( 0.00%)      match_lo: usize,
     .               /// The position in `matches` corresponding to the metavar we are currently trying to match
     .               /// against the source token stream. `match_lo <= match_cur <= match_hi`.
     .               match_cur: usize,
     .               /// Similar to `match_lo` except `match_hi` is the position in `matches` of the _last_ metavar
     .               /// in this matcher.
   165 ( 0.00%)      match_hi: usize,
     .           
     .               // The following fields are used if we are matching a repetition. If we aren't, they should be
     .               // `None`.
     .               /// The KleeneOp of this sequence if we are in a repetition.
   165 ( 0.00%)      seq_op: Option<mbe::KleeneOp>,
     .           
     .               /// The separator if we are in a repetition.
     .               sep: Option<Token>,
     .           
     .               /// The "parent" matcher position if we are in a repetition. That is, the matcher position just
     .               /// before we enter the sequence.
   330 ( 0.00%)      up: Option<MatcherPosHandle<'root, 'tt>>,
     .           
     .               /// Specifically used to "unzip" token trees. By "unzip", we mean to unwrap the delimiters from
     .               /// a delimited token tree (e.g., something wrapped in `(` `)`) or to get the contents of a doc
     .               /// comment...
     .               ///
     .               /// When matching against matchers with nested delimited submatchers (e.g., `pat ( pat ( .. )
     .               /// pat ) pat`), we need to keep track of the matchers we are descending into. This stack does
     .               /// that where the bottom of the stack is the outermost matcher.
     .               /// Also, throughout the comments, this "descent" is often referred to as "unzipping"...
     .               stack: SmallVec<[MatcherTtFrame<'tt>; 1]>,
     .           }
     .           
     .           impl<'root, 'tt> MatcherPos<'root, 'tt> {
     .               /// Adds `m` as a named match for the `idx`-th metavar.
     .               fn push_match(&mut self, idx: usize, m: NamedMatch) {
   880 ( 0.00%)          let matches = Lrc::make_mut(&mut self.matches[idx]);
     .                   matches.push(m);
     .               }
     .           }
     .           
     .           // Lots of MatcherPos instances are created at runtime. Allocating them on the
     .           // heap is slow. Furthermore, using SmallVec<MatcherPos> to allocate them all
     .           // on the stack is also slow, because MatcherPos is quite a large type and
     .           // instances get moved around a lot between vectors, which requires lots of
-- line 221 ----------------------------------------
-- line 226 ----------------------------------------
     .           // and this type is used to encapsulate both cases.
     .           enum MatcherPosHandle<'root, 'tt> {
     .               Ref(&'root mut MatcherPos<'root, 'tt>),
     .               Box(Box<MatcherPos<'root, 'tt>>),
     .           }
     .           
     .           impl<'root, 'tt> Clone for MatcherPosHandle<'root, 'tt> {
     .               // This always produces a new Box.
   660 ( 0.00%)      fn clone(&self) -> Self {
   330 ( 0.00%)          MatcherPosHandle::Box(match *self {
   165 ( 0.00%)              MatcherPosHandle::Ref(ref r) => Box::new((**r).clone()),
     .                       MatcherPosHandle::Box(ref b) => b.clone(),
     .                   })
   990 ( 0.00%)      }
     .           }
     .           
     .           impl<'root, 'tt> Deref for MatcherPosHandle<'root, 'tt> {
     .               type Target = MatcherPos<'root, 'tt>;
     .               fn deref(&self) -> &Self::Target {
     .                   match *self {
     .                       MatcherPosHandle::Ref(ref r) => r,
     .                       MatcherPosHandle::Box(ref b) => b,
-- line 247 ----------------------------------------
-- line 272 ----------------------------------------
     .           
     .           /// A `ParseResult` where the `Success` variant contains a mapping of
     .           /// `MacroRulesNormalizedIdent`s to `NamedMatch`es. This represents the mapping
     .           /// of metavars to the token trees they bind to.
     .           crate type NamedParseResult = ParseResult<FxHashMap<MacroRulesNormalizedIdent, NamedMatch>>;
     .           
     .           /// Count how many metavars are named in the given matcher `ms`.
     .           pub(super) fn count_names(ms: &[TokenTree]) -> usize {
 1,456 ( 0.00%)      ms.iter().fold(0, |count, elt| {
   728 ( 0.00%)          count
 2,184 ( 0.00%)              + match *elt {
    12 ( 0.00%)                  TokenTree::Sequence(_, ref seq) => seq.num_captures,
     .                           TokenTree::Delimited(_, ref delim) => count_names(&delim.tts),
     .                           TokenTree::MetaVar(..) => 0,
     .                           TokenTree::MetaVarDecl(..) => 1,
     .                           TokenTree::Token(..) => 0,
     .                       }
 1,820 ( 0.00%)      })
     .           }
     .           
     .           /// `len` `Vec`s (initially shared and empty) that will store matches of metavars.
     .           fn create_matches(len: usize) -> Box<[Lrc<NamedMatchVec>]> {
 1,190 ( 0.00%)      if len == 0 {
     .                   vec![]
     .               } else {
     .                   let empty_matches = Lrc::new(SmallVec::new());
     .                   vec![empty_matches; len]
     .               }
     .               .into_boxed_slice()
     .           }
     .           
     .           /// Generates the top-level matcher position in which the "dot" is before the first token of the
     .           /// matcher `ms`.
     .           fn initial_matcher_pos<'root, 'tt>(ms: &'tt [TokenTree]) -> MatcherPos<'root, 'tt> {
     .               let match_idx_hi = count_names(ms);
     .               let matches = create_matches(match_idx_hi);
 5,370 ( 0.01%)      MatcherPos {
     .                   // Start with the top level matcher given to us
     .                   top_elts: TtSeq(ms), // "elts" is an abbr. for "elements"
     .                   // The "dot" is before the first token of the matcher
     .                   idx: 0,
     .           
     .                   // Initialize `matches` to a bunch of empty `Vec`s -- one for each metavar in `top_elts`.
     .                   // `match_lo` for `top_elts` is 0 and `match_hi` is `matches.len()`. `match_cur` is 0 since
     .                   // we haven't actually matched anything yet.
-- line 316 ----------------------------------------
-- line 357 ----------------------------------------
     .               sess: &ParseSess,
     .               ms: &[TokenTree],
     .               mut res: I,
     .           ) -> NamedParseResult {
     .               // Recursively descend into each type of matcher (e.g., sequences, delimited, metavars) and make
     .               // sure that each metavar has _exactly one_ binding. If a metavar does not have exactly one
     .               // binding, then there is an error. If it does, then we insert the binding into the
     .               // `NamedParseResult`.
   374 ( 0.00%)      fn n_rec<I: Iterator<Item = NamedMatch>>(
     .                   sess: &ParseSess,
     .                   m: &TokenTree,
     .                   res: &mut I,
     .                   ret_val: &mut FxHashMap<MacroRulesNormalizedIdent, NamedMatch>,
     .               ) -> Result<(), (rustc_span::Span, String)> {
   182 ( 0.00%)          match *m {
     .                       TokenTree::Sequence(_, ref seq) => {
     6 ( 0.00%)                  for next_m in &seq.tts {
    72 ( 0.00%)                      n_rec(sess, next_m, res.by_ref(), ret_val)?
     .                           }
     .                       }
     .                       TokenTree::Delimited(_, ref delim) => {
     .                           for next_m in &delim.tts {
     .                               n_rec(sess, next_m, res.by_ref(), ret_val)?;
     .                           }
     .                       }
     .                       TokenTree::MetaVarDecl(span, _, None) => {
     .                           if sess.missing_fragment_specifiers.borrow_mut().remove(&span).is_some() {
     .                               return Err((span, "missing fragment specifier".to_string()));
     .                           }
     .                       }
    36 ( 0.00%)              TokenTree::MetaVarDecl(sp, bind_name, _) => match ret_val
    24 ( 0.00%)                  .entry(MacroRulesNormalizedIdent::new(bind_name))
     .                       {
     .                           Vacant(spot) => {
     .                               spot.insert(res.next().unwrap());
     .                           }
     .                           Occupied(..) => return Err((sp, format!("duplicated bind name: {}", bind_name))),
     .                       },
     .                       TokenTree::MetaVar(..) | TokenTree::Token(..) => (),
     .                   }
     .           
    34 ( 0.00%)          Ok(())
   272 ( 0.00%)      }
     .           
     .               let mut ret_val = FxHashMap::default();
     .               for m in ms {
   271 ( 0.00%)          match n_rec(sess, m, res.by_ref(), &mut ret_val) {
     .                       Ok(_) => {}
     .                       Err((sp, msg)) => return Error(sp, msg),
     .                   }
     .               }
     .           
   171 ( 0.00%)      Success(ret_val)
     .           }
     .           
     .           /// Performs a token equality check, ignoring syntax context (that is, an unhygienic comparison)
     .           fn token_name_eq(t1: &Token, t2: &Token) -> bool {
 2,875 ( 0.00%)      if let (Some((ident1, is_raw1)), Some((ident2, is_raw2))) = (t1.ident(), t2.ident()) {
     .                   ident1.name == ident2.name && is_raw1 == is_raw2
 4,025 ( 0.00%)      } else if let (Some(ident1), Some(ident2)) = (t1.lifetime(), t2.lifetime()) {
     .                   ident1.name == ident2.name
     .               } else {
 1,670 ( 0.00%)          t1.kind == t2.kind
     .               }
     .           }
     .           
     .           /// Process the matcher positions of `cur_items` until it is empty. In the process, this will
     .           /// produce more items in `next_items`, `eof_items`, and `bb_items`.
     .           ///
     .           /// For more info about the how this happens, see the module-level doc comments and the inline
     .           /// comments of this function.
-- line 427 ----------------------------------------
-- line 443 ----------------------------------------
     .               sess: &ParseSess,
     .               cur_items: &mut SmallVec<[MatcherPosHandle<'root, 'tt>; 1]>,
     .               next_items: &mut Vec<MatcherPosHandle<'root, 'tt>>,
     .               eof_items: &mut SmallVec<[MatcherPosHandle<'root, 'tt>; 1]>,
     .               bb_items: &mut SmallVec<[MatcherPosHandle<'root, 'tt>; 1]>,
     .               token: &Token,
     .           ) -> ParseResult<()> {
     .               // Pop items from `cur_items` until it is empty.
 3,928 ( 0.00%)      while let Some(mut item) = cur_items.pop() {
     .                   // When unzipped trees end, remove them. This corresponds to backtracking out of a
     .                   // delimited submatcher into which we already descended. In backtracking out again, we need
     .                   // to advance the "dot" past the delimiters in the outer matcher.
12,062 ( 0.01%)          while item.idx >= item.top_elts.len() {
     .                       match item.stack.pop() {
     .                           Some(MatcherTtFrame { elts, idx }) => {
     .                               item.top_elts = elts;
     .                               item.idx = idx + 1;
     .                           }
     .                           None => break,
     .                       }
     .                   }
     .           
     .                   // Get the current position of the "dot" (`idx`) in `item` and the number of token trees in
     .                   // the matcher (`len`).
     .                   let idx = item.idx;
     .                   let len = item.top_elts.len();
     .           
     .                   // If `idx >= len`, then we are at or past the end of the matcher of `item`.
 2,542 ( 0.00%)          if idx >= len {
     .                       // We are repeating iff there is a parent. If the matcher is inside of a repetition,
     .                       // then we could be at the end of a sequence or at the beginning of the next
     .                       // repetition.
   291 ( 0.00%)              if item.up.is_some() {
     .                           // At this point, regardless of whether there is a separator, we should add all
     .                           // matches from the complete repetition of the sequence to the shared, top-level
     .                           // `matches` list (actually, `up.matches`, which could itself not be the top-level,
     .                           // but anyway...). Moreover, we add another item to `cur_items` in which the "dot"
     .                           // is at the end of the `up` matcher. This ensures that the "dot" in the `up`
     .                           // matcher is also advanced sufficiently.
     .                           //
     .                           // NOTE: removing the condition `idx == len` allows trailing separators.
   330 ( 0.00%)                  if idx == len {
     .                               // Get the `up` matcher
     .                               let mut new_pos = item.up.clone().unwrap();
     .           
     .                               // Add matches from this repetition to the `matches` of `up`
   220 ( 0.00%)                      for idx in item.match_lo..item.match_hi {
   550 ( 0.00%)                          let sub = item.matches[idx].clone();
   330 ( 0.00%)                          new_pos.push_match(idx, MatchedSeq(sub));
     .                               }
     .           
     .                               // Move the "dot" past the repetition in `up`
   165 ( 0.00%)                      new_pos.match_cur = item.match_hi;
   660 ( 0.00%)                      new_pos.idx += 1;
     .                               cur_items.push(new_pos);
     .                           }
     .           
     .                           // Check if we need a separator.
   110 ( 0.00%)                  if idx == len && item.sep.is_some() {
     .                               // We have a separator, and it is the current token. We can advance past the
     .                               // separator token.
   110 ( 0.00%)                      if item.sep.as_ref().map_or(false, |sep| token_name_eq(token, sep)) {
   385 ( 0.00%)                          item.idx += 1;
     .                                   next_items.push(item);
     .                               }
     .                           }
     .                           // We don't need a separator. Move the "dot" back to the beginning of the matcher
     .                           // and try to match again UNLESS we are only allowed to have _one_ repetition.
   110 ( 0.00%)                  else if item.seq_op != Some(mbe::KleeneOp::ZeroOrOne) {
   220 ( 0.00%)                      item.match_cur = item.match_lo;
   440 ( 0.00%)                      item.idx = 0;
     .                               cur_items.push(item);
     .                           }
     .                       }
     .                       // If we are not in a repetition, then being at the end of a matcher means that we have
     .                       // reached the potential end of the input.
     .                       else {
     .                           eof_items.push(item);
     .                       }
     .                   }
     .                   // We are in the middle of a matcher.
     .                   else {
     .                       // Look at what token in the matcher we are trying to match the current token (`token`)
     .                       // against. Depending on that, we may generate new items.
 3,603 ( 0.00%)              match item.top_elts.get_tt(idx) {
     .                           // Need to descend into a sequence
   232 ( 0.00%)                  TokenTree::Sequence(sp, seq) => {
     .                               // Examine the case where there are 0 matches of this sequence. We are
     .                               // implicitly disallowing OneOrMore from having 0 matches here. Thus, that will
     .                               // result in a "no rules expected token" error by virtue of this matcher not
     .                               // working.
   116 ( 0.00%)                      if seq.kleene.op == mbe::KleeneOp::ZeroOrMore
     .                                   || seq.kleene.op == mbe::KleeneOp::ZeroOrOne
     .                               {
   110 ( 0.00%)                          let mut new_item = item.clone();
   220 ( 0.00%)                          new_item.match_cur += seq.num_captures;
   275 ( 0.00%)                          new_item.idx += 1;
   330 ( 0.00%)                          for idx in item.match_cur..item.match_cur + seq.num_captures {
     .                                       new_item.push_match(idx, MatchedSeq(Lrc::new(smallvec![])));
     .                                   }
     .                                   cur_items.push(new_item);
     .                               }
     .           
    58 ( 0.00%)                      let matches = create_matches(item.matches.len());
   696 ( 0.00%)                      cur_items.push(MatcherPosHandle::Box(Box::new(MatcherPos {
    58 ( 0.00%)                          stack: smallvec![],
     .                                   sep: seq.separator.clone(),
    58 ( 0.00%)                          seq_op: Some(seq.kleene.op),
     .                                   idx: 0,
   290 ( 0.00%)                          matches,
   116 ( 0.00%)                          match_lo: item.match_cur,
     .                                   match_cur: item.match_cur,
   116 ( 0.00%)                          match_hi: item.match_cur + seq.num_captures,
     .                                   up: Some(item),
   406 ( 0.00%)                          top_elts: Tt(TokenTree::Sequence(sp, seq)),
     .                               })));
     .                           }
     .           
     .                           // We need to match a metavar (but the identifier is invalid)... this is an error
     .                           TokenTree::MetaVarDecl(span, _, None) => {
     .                               if sess.missing_fragment_specifiers.borrow_mut().remove(&span).is_some() {
     .                                   return Error(span, "missing fragment specifier".to_string());
     .                               }
-- line 565 ----------------------------------------
-- line 568 ----------------------------------------
     .                           // We need to match a metavar with a valid ident... call out to the black-box
     .                           // parser by adding an item to `bb_items`.
     .                           TokenTree::MetaVarDecl(_, _, Some(kind)) => {
     .                               // Built-in nonterminals never start with these tokens, so we can eliminate
     .                               // them from consideration.
     .                               //
     .                               // We use the span of the metavariable declaration to determine any
     .                               // edition-specific matching behavior for non-terminals.
   565 ( 0.00%)                      if Parser::nonterminal_may_begin_with(kind, token) {
     .                                   bb_items.push(item);
     .                               }
     .                           }
     .           
     .                           // We need to descend into a delimited submatcher or a doc comment. To do this, we
     .                           // push the current matcher onto a stack and push a new item containing the
     .                           // submatcher onto `cur_items`.
     .                           //
-- line 584 ----------------------------------------
-- line 589 ----------------------------------------
     .                               let lower_elts = mem::replace(&mut item.top_elts, Tt(seq));
     .                               let idx = item.idx;
     .                               item.stack.push(MatcherTtFrame { elts: lower_elts, idx });
     .                               item.idx = 0;
     .                               cur_items.push(item);
     .                           }
     .           
     .                           // We just matched a normal token. We can just advance the parser.
 1,670 ( 0.00%)                  TokenTree::Token(t) if token_name_eq(&t, token) => {
   882 ( 0.00%)                      item.idx += 1;
     .                               next_items.push(item);
     .                           }
     .           
     .                           // There was another token that was not `token`... This means we can't add any
     .                           // rules. NOTE that this is not necessarily an error unless _all_ items in
     .                           // `cur_items` end up doing this. There may still be some other matchers that do
     .                           // end up working out.
     .                           TokenTree::Token(..) | TokenTree::MetaVar(..) => {}
     .                       }
 3,975 ( 0.00%)          }
 1,382 ( 0.00%)      }
     .           
     .               // Yay a successful parse (so far)!
     .               Success(())
     .           }
     .           
     .           /// Use the given sequence of token trees (`ms`) as a matcher. Match the token
     .           /// stream from the given `parser` against it and return the match.
 3,580 ( 0.00%)  pub(super) fn parse_tt(
     .               parser: &mut Cow<'_, Parser<'_>>,
     .               ms: &[TokenTree],
     .               macro_name: Ident,
     .           ) -> NamedParseResult {
     .               // A queue of possible matcher positions. We initialize it with the matcher position in which
     .               // the "dot" is before the first token of the first token tree in `ms`. `inner_parse_loop` then
     .               // processes all of these possible matcher positions and produces possible next positions into
     .               // `next_items`. After some post-processing, the contents of `next_items` replenish `cur_items`
     .               // and we start over again.
     .               //
     .               // This MatcherPos instance is allocated on the stack. All others -- and
     .               // there are frequently *no* others! -- are allocated on the heap.
     .               let mut initial = initial_matcher_pos(ms);
 1,790 ( 0.00%)      let mut cur_items = smallvec![MatcherPosHandle::Ref(&mut initial)];
     .               let mut next_items = Vec::new();
     .           
     .               loop {
     .                   // Matcher positions black-box parsed by parser.rs (`parser`)
     .                   let mut bb_items = SmallVec::new();
     .           
     .                   // Matcher positions that would be valid if the macro invocation was over now
     .                   let mut eof_items = SmallVec::new();
   594 ( 0.00%)          assert!(next_items.is_empty());
     .           
     .                   // Process `cur_items` until either we have finished the input or we need to get some
     .                   // parsing from the black-box parser done. The result is that `next_items` will contain a
     .                   // bunch of possible next matcher positions in `next_items`.
     .                   match inner_parse_loop(
     .                       parser.sess,
     .                       &mut cur_items,
     .                       &mut next_items,
-- line 648 ----------------------------------------
-- line 652 ----------------------------------------
     .                   ) {
     .                       Success(_) => {}
     .                       Failure(token, msg) => return Failure(token, msg),
     .                       Error(sp, msg) => return Error(sp, msg),
     .                       ErrorReported => return ErrorReported,
     .                   }
     .           
     .                   // inner parse loop handled all cur_items, so it's empty
   594 ( 0.00%)          assert!(cur_items.is_empty());
     .           
     .                   // We need to do some post processing after the `inner_parser_loop`.
     .                   //
     .                   // Error messages here could be improved with links to original rules.
     .           
     .                   // If we reached the EOF, check that there is EXACTLY ONE possible matcher. Otherwise,
     .                   // either the parse is ambiguous (which should never happen) or there is a syntax error.
 2,970 ( 0.00%)          if parser.token == token::Eof {
    76 ( 0.00%)              if eof_items.len() == 1 {
     .                           let matches =
    44 ( 0.00%)                      eof_items[0].matches.iter_mut().map(|dv| Lrc::make_mut(dv).pop().unwrap());
    57 ( 0.00%)                  return nameize(parser.sess, ms, matches);
     .                       } else if eof_items.len() > 1 {
     .                           return Error(
     .                               parser.token.span,
     .                               "ambiguity: multiple successful parses".to_string(),
     .                           );
     .                       } else {
     .                           return Failure(
     .                               Token::new(
-- line 680 ----------------------------------------
-- line 687 ----------------------------------------
     .                               ),
     .                               "missing tokens in macro arguments",
     .                           );
     .                       }
     .                   }
     .                   // Performance hack: eof_items may share matchers via Rc with other things that we want
     .                   // to modify. Dropping eof_items now may drop these refcounts to 1, preventing an
     .                   // unnecessary implicit clone later in Rc::make_mut.
 2,300 ( 0.00%)          drop(eof_items);
     .           
     .                   // If there are no possible next positions AND we aren't waiting for the black-box parser,
     .                   // then there is a syntax error.
 2,190 ( 0.00%)          if bb_items.is_empty() && next_items.is_empty() {
 4,407 ( 0.00%)              return Failure(parser.token.clone(), "no rules expected this token in macro call");
     .                   }
     .                   // Another possibility is that we need to call out to parse some rust nonterminal
     .                   // (black-box) parser. However, if there is not EXACTLY ONE of these, something is wrong.
   440 ( 0.00%)          else if (!bb_items.is_empty() && !next_items.is_empty()) || bb_items.len() > 1 {
     .                       let nts = bb_items
     .                           .iter()
     .                           .map(|item| match item.top_elts.get_tt(item.idx) {
     .                               TokenTree::MetaVarDecl(_, bind, Some(kind)) => format!("{} ('{}')", kind, bind),
     .                               _ => panic!(),
     .                           })
     .                           .collect::<Vec<String>>()
     .                           .join(" or ");
-- line 712 ----------------------------------------
-- line 721 ----------------------------------------
     .                                   n => format!("built-in NTs {} or {} other options.", nts, n),
     .                               }
     .                           ),
     .                       );
     .                   }
     .                   // Dump all possible `next_items` into `cur_items` for the next iteration.
     .                   else if !next_items.is_empty() {
     .                       // Now process the next token
   378 ( 0.00%)              cur_items.extend(next_items.drain(..));
   126 ( 0.00%)              parser.to_mut().bump();
     .                   }
     .                   // Finally, we have the case where we need to call the black-box parser to get some
     .                   // nonterminal.
     .                   else {
     .                       assert_eq!(bb_items.len(), 1);
     .           
   220 ( 0.00%)              let mut item = bb_items.pop().unwrap();
   880 ( 0.00%)              if let TokenTree::MetaVarDecl(span, _, Some(kind)) = item.top_elts.get_tt(item.idx) {
   110 ( 0.00%)                  let match_cur = item.match_cur;
     .                           // We use the span of the metavariable declaration to determine any
     .                           // edition-specific matching behavior for non-terminals.
   663 ( 0.00%)                  let nt = match parser.to_mut().parse_nonterminal(kind) {
     .                               Err(mut err) => {
     .                                   err.span_label(
     .                                       span,
     .                                       format!("while parsing argument for this `{}` macro fragment", kind),
     .                                   )
     .                                   .emit();
     .                                   return ErrorReported;
     .                               }
   660 ( 0.00%)                      Ok(nt) => nt,
     .                           };
   440 ( 0.00%)                  item.push_match(match_cur, MatchedNonterminal(Lrc::new(nt)));
   440 ( 0.00%)                  item.idx += 1;
   660 ( 0.00%)                  item.match_cur += 1;
     .                       } else {
     .                           unreachable!()
     .                       }
     .                       cur_items.push(item);
     .                   }
     .           
   472 ( 0.00%)          assert!(!cur_items.is_empty());
     .               }
 3,222 ( 0.00%)  }

16,325 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/macro_parser.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir               

-- line 186 ----------------------------------------
      .           /// // use the values stored in map
      .           /// ```
      .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
      .               pub(crate) hash_builder: S,
      .               pub(crate) table: RawTable<(K, V), A>,
      .           }
      .           
      .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
      8 ( 0.00%)      fn clone(&self) -> Self {
    166 ( 0.00%)          HashMap {
      .                       hash_builder: self.hash_builder.clone(),
     36 ( 0.00%)              table: self.table.clone(),
      .                   }
      9 ( 0.00%)      }
      .           
      .               fn clone_from(&mut self, source: &Self) {
      .                   self.table.clone_from(&source.table);
      .           
      .                   // Update hash_builder only if we successfully cloned all elements.
      .                   self.hash_builder.clone_from(&source.hash_builder);
      .               }
      .           }
-- line 207 ----------------------------------------
-- line 210 ----------------------------------------
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash,
      .               S: BuildHasher,
      .           {
  4,493 ( 0.00%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
      .           }
      .           
      .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: ?Sized + Eq,
      .           {
  6,495 ( 0.01%)      move |x| k.eq(x.0.borrow())
      .           }
      .           
      .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: ?Sized + Eq,
      .           {
  2,724 ( 0.00%)      move |x| k.eq(x.borrow())
      .           }
      .           
      .           #[cfg(not(feature = "nightly"))]
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
      .               use core::hash::Hasher;
      .               let mut state = hash_builder.build_hasher();
      .               val.hash(&mut state);
      .               state.finish()
      .           }
      .           
      .           #[cfg(feature = "nightly")]
      .           #[cfg_attr(feature = "inline-more", inline)]
      2 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash + ?Sized,
      .               S: BuildHasher,
      .           {
      .               hash_builder.hash_one(val)
      4 ( 0.00%)  }
      .           
      .           #[cfg(not(feature = "nightly"))]
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
      .           where
      .               K: Hash,
      .               S: BuildHasher,
      .           {
-- line 274 ----------------------------------------
-- line 367 ----------------------------------------
      .               /// let s = DefaultHashBuilder::default();
      .               /// let mut map = HashMap::with_hasher(s);
      .               /// map.insert(1, 2);
      .               /// ```
      .               ///
      .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub const fn with_hasher(hash_builder: S) -> Self {
  4,090 ( 0.00%)          Self {
      .                       hash_builder,
      .                       table: RawTable::new(),
      .                   }
      .               }
      .           
      .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
      .               /// to hash the keys.
      .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
      .               /// use hashbrown::hash_map::DefaultHashBuilder;
      .               ///
      .               /// let s = DefaultHashBuilder::default();
      .               /// let mut map = HashMap::with_hasher(s);
      .               /// map.insert(1, 2);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
     88 ( 0.00%)          Self {
      .                       hash_builder,
      .                       table: RawTable::new_in(alloc),
      .                   }
      .               }
      .           
      .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
      .               /// to hash the keys. It will be allocated with the given allocator.
      .               ///
-- line 453 ----------------------------------------
-- line 663 ----------------------------------------
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// assert_eq!(a.len(), 0);
      .               /// a.insert(1, "a");
      .               /// assert_eq!(a.len(), 1);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn len(&self) -> usize {
    358 ( 0.00%)          self.table.len()
      .               }
      .           
      .               /// Returns `true` if the map contains no elements.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// assert!(a.is_empty());
      .               /// a.insert(1, "a");
      .               /// assert!(!a.is_empty());
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn is_empty(&self) -> bool {
  1,932 ( 0.00%)          self.len() == 0
      .               }
      .           
      .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
      .               /// allocated memory for reuse.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// a.insert(1, "a");
      .               /// a.clear();
      .               /// assert!(a.is_empty());
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      6 ( 0.00%)      pub fn clear(&mut self) {
      .                   self.table.clear();
      6 ( 0.00%)      }
      .           
      .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
      .               /// The map cannot be used after calling this.
      .               /// The iterator element type is `K`.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
      .               /// }
      .               ///
      .               /// assert_eq!(letters[&'s'], 2);
      .               /// assert_eq!(letters[&'t'], 3);
      .               /// assert_eq!(letters[&'u'], 1);
      .               /// assert_eq!(letters.get(&'y'), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
    168 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
      .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
      .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
     30 ( 0.00%)              Entry::Occupied(OccupiedEntry {
      .                           hash,
      .                           key: Some(key),
      .                           elem,
      .                           table: self,
      .                       })
      .                   } else {
    180 ( 0.00%)              Entry::Vacant(VacantEntry {
      .                           hash,
      .                           key,
      .                           table: self,
      .                       })
      .                   }
    210 ( 0.00%)      }
      .           
      .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
      .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
      .               /// ```
      .               #[inline]
      .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
 12,749 ( 0.01%)          match self.get_inner(k) {
      .                       Some(&(_, ref v)) => Some(v),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Returns the key-value pair corresponding to the supplied key.
      .               ///
      .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
 19,627 ( 0.02%)          if self.table.is_empty() {
      .                       None
      .                   } else {
      1 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
      .                       self.table.get(hash, equivalent_key(k))
      .                   }
      .               }
      .           
      .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
      .               ///
      .               /// The supplied key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// assert_eq!(map.contains_key(&1), true);
      .               /// assert_eq!(map.contains_key(&2), false);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
  4,545 ( 0.01%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   self.get_inner(k).is_some()
  5,842 ( 0.01%)      }
      .           
      .               /// Returns a mutable reference to the value corresponding to the key.
      .               ///
      .               /// The key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
      .               ///
      .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// if let Some(x) = map.get_mut(&1) {
      .               ///     *x = "b";
      .               /// }
      .               /// assert_eq!(map[&1], "b");
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      4 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
     12 ( 0.00%)          match self.get_inner_mut(k) {
      .                       Some(&mut (_, ref mut v)) => Some(v),
      .                       None => None,
      .                   }
      8 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      4 ( 0.00%)          if self.table.is_empty() {
      .                       None
      .                   } else {
      .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
      .                       self.table.get_mut(hash, equivalent_key(k))
      .                   }
      .               }
      .           
      .               /// Attempts to get mutable references to `N` values in the map at once.
-- line 1219 ----------------------------------------
-- line 1495 ----------------------------------------
      .               /// assert_eq!(map.insert(37, "a"), None);
      .               /// assert_eq!(map.is_empty(), false);
      .               ///
      .               /// map.insert(37, "b");
      .               /// assert_eq!(map.insert(37, "c"), Some("b"));
      .               /// assert_eq!(map[&37], "c");
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
122,213 ( 0.13%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
      .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
      2 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
      .                       Some(mem::replace(item, v))
      .                   } else {
 66,567 ( 0.07%)              self.table
 65,150 ( 0.07%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
  4,011 ( 0.00%)              None
      .                   }
105,801 ( 0.12%)      }
      .           
      .               /// Insert a key-value pair into the map without checking
      .               /// if the key already exists in the map.
      .               ///
      .               /// Returns a reference to the key and value just inserted.
      .               ///
      .               /// This operation is safe if a key does not exist in the map.
      .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// assert_eq!(map.remove(&1), Some("a"));
      .               /// assert_eq!(map.remove(&1), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
  1,225 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
 18,082 ( 0.02%)          match self.remove_entry(k) {
    872 ( 0.00%)              Some((_, v)) => Some(v),
    900 ( 0.00%)              None => None,
      .                   }
  2,945 ( 0.00%)      }
      .           
      .               /// Removes a key from the map, returning the stored key and value if the
      .               /// key was previously in the map.
      .               ///
      .               /// The key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
      .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
  4,954 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
      .               }
      .           }
      .           
      .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
      .               /// Creates a raw entry builder for the HashMap.
      .               ///
      .               /// Raw entries provide the lowest level of control for searching and
      .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2209 ----------------------------------------
      .               /// Creates a `RawEntryMut` from the given key and its hash.
      .               #[inline]
      .               #[allow(clippy::wrong_self_convention)]
      .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Eq,
      .               {
 21,830 ( 0.02%)          self.from_hash(hash, equivalent(k))
      .               }
      .           }
      .           
      .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
      .               /// Creates a `RawEntryMut` from the given hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
 57,296 ( 0.06%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   for<'b> F: FnMut(&'b K) -> bool,
      .               {
      .                   self.search(hash, is_match)
 61,866 ( 0.07%)      }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   for<'b> F: FnMut(&'b K) -> bool,
      .               {
  5,742 ( 0.01%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
 27,502 ( 0.03%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
      .                           elem,
      .                           table: &mut self.map.table,
      .                           hash_builder: &self.map.hash_builder,
      .                       }),
  9,144 ( 0.01%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
      .                           table: &mut self.map.table,
      .                           hash_builder: &self.map.hash_builder,
      .                       }),
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
      .               {
      .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
      .                   self.from_key_hashed_nocheck(hash, k)
      .               }
      .           
      .               /// Access an entry by a key and its hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
 17,205 ( 0.02%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Eq,
      .               {
 19,735 ( 0.02%)          self.from_hash(hash, equivalent(k))
 30,770 ( 0.03%)      }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
      .               where
      .                   F: FnMut(&K) -> bool,
      .               {
 31,000 ( 0.03%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
      .                       Some(&(ref key, ref value)) => Some((key, value)),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Access an entry by hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
      .               /// and returns a mutable reference to it.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::shadow_unrelated)]
      .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
      .               where
      .                   K: Hash,
      .                   S: BuildHasher,
      .               {
 15,026 ( 0.02%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
      .                       hash,
      .                       (key, value),
      .                       make_hasher::<K, _, V, S>(self.hash_builder),
      .                   );
      .                   (k, v)
      .               }
      .           
      .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
      .               /// map.insert("a", 1);
      .               /// map.insert("b", 2);
      .               /// map.insert("c", 3);
      .               ///
      .               /// // Not possible with .iter()
      .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      8 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
  1,150 ( 0.00%)          IntoIter {
  1,108 ( 0.00%)              inner: self.table.into_iter(),
      .                   }
     24 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
      .               type Item = (&'a K, &'a V);
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
  2,089 ( 0.00%)          match self.inner.next() {
      .                       Some(x) => unsafe {
      .                           let r = x.as_ref();
      9 ( 0.00%)                  Some((&r.0, &r.1))
      .                       },
      .                       None => None,
      .                   }
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      2 ( 0.00%)          self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V> ExactSizeIterator for Iter<'_, K, V> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn len(&self) -> usize {
      .                   self.inner.len()
      .               }
      .           }
-- line 3013 ----------------------------------------
-- line 3051 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
      .               type Item = (K, V);
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<(K, V)> {
     28 ( 0.00%)          self.inner.next()
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
      .                   f.debug_list().entries(self.iter()).finish()
      .               }
      .           }
      .           
      .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
      .               type Item = &'a K;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      2 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
      .                   match self.inner.next() {
      .                       Some((k, _)) => Some(k),
      .                       None => None,
      .                   }
      4 ( 0.00%)      }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 3819 ----------------------------------------
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn insert(self, value: V) -> &'a mut V
      .               where
      .                   K: Hash,
      .                   S: BuildHasher,
      .               {
      .                   let table = &mut self.table.table;
     20 ( 0.00%)          let entry = table.insert_entry(
      .                       self.hash,
      .                       (self.key, value),
      .                       make_hasher::<K, _, V, S>(&self.table.hash_builder),
      .                   );
      .                   &mut entry.1
      .               }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3835 ----------------------------------------
-- line 4557 ----------------------------------------
      .           /// keys with new values returned from the iterator.
      .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
      .           where
      .               K: Eq + Hash,
      .               S: BuildHasher,
      .               A: Allocator + Clone,
      .           {
      .               #[cfg_attr(feature = "inline-more", inline)]
    351 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
      .                   // Keys may be already present or show multiple times in the iterator.
      .                   // Reserve the entire hint lower bound if the map is empty.
      .                   // Otherwise reserve half the hint (rounded up), so the map
      .                   // will only resize twice in the worst case.
    300 ( 0.00%)          let iter = iter.into_iter();
    241 ( 0.00%)          let reserve = if self.is_empty() {
      .                       iter.size_hint().0
      .                   } else {
     15 ( 0.00%)              (iter.size_hint().0 + 1) / 2
      .                   };
      .                   self.reserve(reserve);
      .                   iter.for_each(move |(k, v)| {
 14,805 ( 0.02%)              self.insert(k, v);
      .                   });
    230 ( 0.00%)      }
      .           
      .               #[inline]
      .               #[cfg(feature = "nightly")]
      .               fn extend_one(&mut self, (k, v): (K, V)) {
      .                   self.insert(k, v);
      .               }
      .           
      .               #[inline]
-- line 4588 ----------------------------------------

 32,461 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
   20,050 ( 0.02%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
       13 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    1,290 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
        .               LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
-- line 173 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    3,250 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
        2 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
        8 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 224 ----------------------------------------
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    2,596 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
        2 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
        1 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
        .               pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
        1 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
    6,727 ( 0.01%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    7,788 ( 0.01%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        2 ( 0.00%)      QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
        .               MacroExpansion(u64),
        .               ProcMacroSourceCode(u64),
        .               /// Strings provided as `--cfg [cfgspec]` stored in a `crate_cfg`.
        .               CfgSpec(u64),
-- line 285 ----------------------------------------
-- line 288 ----------------------------------------
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
        7 ( 0.00%)      fn from(p: PathBuf) -> Self {
        2 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
        6 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
        7 ( 0.00%)      }
        .           }
        .           
        2 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
        4 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
        6 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
        6 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
        5 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
        .               pub fn to_string_lossy(&self) -> Cow<'_, str> {
        .                   match self.inner {
        .                       FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
        .               }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
    1,306 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
-- line 353 ----------------------------------------
-- line 357 ----------------------------------------
        .               }
        .           
        .               pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
        .               }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
        1 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
        2 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 383 ----------------------------------------
        .               }
        .           
        .               pub fn proc_macro_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::ProcMacroSourceCode(hasher.finish())
        .               }
        .           
       10 ( 0.00%)      pub fn cfg_spec_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        4 ( 0.00%)          FileName::QuoteExpansion(hasher.finish())
       10 ( 0.00%)      }
        .           
        .               pub fn cli_crate_attr_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::CliCrateAttr(hasher.finish())
        .               }
        .           
        .               pub fn doc_test_source_code(path: PathBuf, line: isize) -> FileName {
-- line 403 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
    5,546 ( 0.01%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
        .                   self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
-- line 501 ----------------------------------------
-- line 502 ----------------------------------------
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
    4,848 ( 0.01%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
    3,636 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
    4,848 ( 0.01%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
    1,674 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
    1,116 ( 0.00%)      }
        .               #[inline]
      124 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
      124 ( 0.00%)      }
        .               #[inline]
      297 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
      198 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
      425 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
      255 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
        .               pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
        .               }
-- line 566 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// Returns a new span representing an empty span at the beginning of this span.
        .               #[inline]
        .               pub fn shrink_to_lo(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_hi(span.lo)
        .               }
        .               /// Returns a new span representing an empty span at the end of this span.
        .               #[inline]
       51 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_lo(span.hi)
       34 ( 0.00%)      }
        .           
        .               #[inline]
        .               /// Returns `true` if `hi == lo`.
        .               pub fn is_empty(self) -> bool {
        .                   let span = self.data_untracked();
        .                   span.hi == span.lo
        .               }
        .           
-- line 619 ----------------------------------------
-- line 671 ----------------------------------------
        .               pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
        .                   while !outer.contains(self) {
        .                       self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
        .               }
        .           
        .               /// Edition of the crate from which this span came.
      378 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
      252 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
       56 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
       80 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
       96 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
        5 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
        1 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
        4 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
      364 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
      312 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
      260 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
        .               pub fn desugaring_kind(self) -> Option<DesugaringKind> {
        .                   match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
-- line 736 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
   10,725 ( 0.01%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
    1,901 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
       49 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
       48 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
    6,818 ( 0.01%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
    8,775 ( 0.01%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
-- line 804 ----------------------------------------
-- line 815 ----------------------------------------
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
       11 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
        2 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
        7 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
        9 ( 0.00%)      }
        .           
        .               pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
        .               }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
       36 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
        2 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
        .                   self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
      228 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
      133 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
    2,736 ( 0.00%)          span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
        .               pub fn remove_mark(&mut self) -> ExpnId {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.remove_mark();
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
-- line 897 ----------------------------------------
-- line 901 ----------------------------------------
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
    1,314 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
      876 ( 0.00%)          let mut span = self.data();
      730 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
    1,314 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
    1,460 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
-- line 922 ----------------------------------------
-- line 929 ----------------------------------------
        .               ) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
      448 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
      392 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1048 ----------------------------------------
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_span(primary_span: Span) -> MultiSpan {
       90 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
        .                   MultiSpan { primary_spans: vec, span_labels: vec![] }
        .               }
        .           
        .               pub fn push_span_label(&mut self, span: Span, label: String) {
        .                   self.span_labels.push((span, label));
        .               }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
       18 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
        .               }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
-- line 1079 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
       90 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
       90 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
        .               fn from(spans: Vec<Span>) -> MultiSpan {
        .                   MultiSpan::from_spans(spans)
        .               }
        .           }
        .           
-- line 1157 ----------------------------------------
-- line 1160 ----------------------------------------
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      312 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      536 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      156 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      536 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      468 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
        3 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1267 ----------------------------------------
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
    1,304 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
        6 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    2,608 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        .                   let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
        9 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
        .                   let len = self.hash_len();
        .                   &self.value[..len]
        .               }
        .           
        .               fn hash_len(&self) -> usize {
        9 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
       58 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
        1 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
        1 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
        1 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
        4 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
        2 ( 0.00%)                          0..=0xFF => 1,
        .                                   0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
        2 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
        3 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
       11 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    5,868 ( 0.01%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      652 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
1,014,592 ( 1.12%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    1,304 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    7,172 ( 0.01%)              SourceFile {
    5,216 ( 0.01%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    2,608 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    2,608 ( 0.00%)                  lines,
    2,608 ( 0.00%)                  multibyte_chars,
    2,608 ( 0.00%)                  non_narrow_chars,
    2,608 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    5,868 ( 0.01%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
       33 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
        9 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
        6 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
        6 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
        9 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
       36 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
        6 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
       51 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
       33 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
       12 ( 0.00%)              lines,
       12 ( 0.00%)              multibyte_chars,
       12 ( 0.00%)              non_narrow_chars,
       12 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
       27 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
        .               pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
        .                   self.lines[line_index]
        .               }
        .           
        .               /// Add externally loaded source.
-- line 1565 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
      653 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
      703 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
      472 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
      889 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
      548 ( 0.00%)          assert!(line_index < self.lines.len());
      816 ( 0.00%)          if line_index == (self.lines.len() - 1) {
        7 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
      538 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
        2 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
        6 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
        .                       if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
        .                           total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
        .                           assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
       12 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
       10 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
        4 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
        7 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
        2 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
        .                   match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
        1 ( 0.00%)                  let linebpos = self.lines[a];
        2 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
        1 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
        8 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
        3 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
        2 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
        1 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
        5 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
        7 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
       30 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
       27 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        3 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        3 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
    1,820 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
      140 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
    3,112 ( 0.00%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
1,759,881 ( 1.94%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
  904,242 ( 1.00%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
        .               }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
   47,496 ( 0.05%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
    5,964 ( 0.01%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
      968 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
    4,996 ( 0.01%)          let span = self.data_untracked();
    2,208 ( 0.00%)          span.ctxt.hash_stable(ctx, hasher);
    2,556 ( 0.00%)          span.parent.hash_stable(ctx, hasher);
        .           
    1,747 ( 0.00%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
    1,618 ( 0.00%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
    3,142 ( 0.00%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
    1,430 ( 0.00%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
      715 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
      715 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
    6,816 ( 0.01%)      }
        .           }

1,336,549 ( 1.48%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/span_encoding.rs
--------------------------------------------------------------------------------
Ir              

-- line 55 ----------------------------------------
     .           ///   `ctxt` values depend partly on the crate size and partly on the form of
     .           ///   the code. No crates in `rustc-perf` need more than 15 bits for `ctxt`,
     .           ///   but larger crates might need more than 16 bits.
     .           ///
     .           /// In order to reliably use parented spans in incremental compilation,
     .           /// the dependency to the parent definition's span. This is performed
     .           /// using the callback `SPAN_TRACK` to access the query engine.
     .           ///
 7,506 ( 0.01%)  #[derive(Clone, Copy, Eq, PartialEq, Hash)]
     .           // FIXME(@lcnr): Enable this attribute once the bootstrap
     .           // compiler knows of `rustc_pass_by_value`.
     .           //
     .           // Right now, this lint would only trigger when compiling the
     .           // stage 2 compiler, which is fairly annoying as there are
     .           // a lot of places using `&Span` right now. After the next bootstrap bump,
     .           // the lint will already trigger when using stage 1, which is a lot less annoying.
     .           //
     .           // #[cfg_attr(not(bootstrap), rustc_pass_by_value)]
     .           pub struct Span {
   145 ( 0.00%)      base_or_index: u32,
    64 ( 0.00%)      len_or_tag: u16,
   116 ( 0.00%)      ctxt_or_zero: u16,
     .           }
     .           
     .           const LEN_TAG: u16 = 0b1000_0000_0000_0000;
     .           const MAX_LEN: u32 = 0b0111_1111_1111_1111;
     .           const MAX_CTXT: u32 = 0b1111_1111_1111_1111;
     .           
     .           /// Dummy span, both position and length are zero, syntax context is zero as well.
     .           pub const DUMMY_SP: Span = Span { base_or_index: 0, len_or_tag: 0, ctxt_or_zero: 0 };
-- line 84 ----------------------------------------
-- line 86 ----------------------------------------
     .           impl Span {
     .               #[inline]
     .               pub fn new(
     .                   mut lo: BytePos,
     .                   mut hi: BytePos,
     .                   ctxt: SyntaxContext,
     .                   parent: Option<LocalDefId>,
     .               ) -> Self {
12,179 ( 0.01%)          if lo > hi {
     .                       std::mem::swap(&mut lo, &mut hi);
     .                   }
     .           
24,358 ( 0.03%)          let (base, len, ctxt2) = (lo.0, hi.0 - lo.0, ctxt.as_u32());
     .           
97,440 ( 0.11%)          if len <= MAX_LEN && ctxt2 <= MAX_CTXT && parent.is_none() {
     .                       // Inline format.
     .                       Span { base_or_index: base, len_or_tag: len as u16, ctxt_or_zero: ctxt2 as u16 }
     .                   } else {
     .                       // Interned format.
     .                       let index =
    10 ( 0.00%)                  with_span_interner(|interner| interner.intern(&SpanData { lo, hi, ctxt, parent }));
     .                       Span { base_or_index: index, len_or_tag: LEN_TAG, ctxt_or_zero: 0 }
     .                   }
36,632 ( 0.04%)      }
     .           
     .               #[inline]
     .               pub fn data(self) -> SpanData {
     .                   let data = self.data_untracked();
     .                   if let Some(parent) = data.parent {
     .                       (*SPAN_TRACK)(parent);
     .                   }
     .                   data
     .               }
     .           
     .               /// Internal function to translate between an encoded span and the expanded representation.
     .               /// This function must not be used outside the incremental engine.
     .               #[inline]
     .               pub fn data_untracked(self) -> SpanData {
56,016 ( 0.06%)          if self.len_or_tag != LEN_TAG {
     .                       // Inline format.
     .                       debug_assert!(self.len_or_tag as u32 <= MAX_LEN);
     .                       SpanData {
     .                           lo: BytePos(self.base_or_index),
52,425 ( 0.06%)                  hi: BytePos(self.base_or_index + self.len_or_tag as u32),
     .                           ctxt: SyntaxContext::from_u32(self.ctxt_or_zero as u32),
     .                           parent: None,
     .                       }
     .                   } else {
     .                       // Interned format.
     .                       debug_assert!(self.ctxt_or_zero == 0);
     .                       let index = self.base_or_index;
     .                       with_span_interner(|interner| interner.spans[index as usize])
     .                   }
 6,457 ( 0.01%)      }
     .           }
     .           
     4 ( 0.00%)  #[derive(Default)]
     .           pub struct SpanInterner {
     .               spans: FxIndexSet<SpanData>,
     .           }
     .           
     .           impl SpanInterner {
     3 ( 0.00%)      fn intern(&mut self, span_data: &SpanData) -> u32 {
     4 ( 0.00%)          let (index, _) = self.spans.insert_full(*span_data);
     .                   index as u32
     4 ( 0.00%)      }
     .           }
     .           
     .           // If an interner exists, return it. Otherwise, prepare a fresh one.
     .           #[inline]
     .           fn with_span_interner<T, F: FnOnce(&mut SpanInterner) -> T>(f: F) -> T {
     .               crate::with_session_globals(|session_globals| f(&mut *session_globals.span_interner.lock()))
     .           }

58,457 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/span_encoding.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 111 ----------------------------------------
      .           const EMPTY: u8 = 0b1111_1111;
      .           
      .           /// Control byte value for a deleted bucket.
      .           const DELETED: u8 = 0b1000_0000;
      .           
      .           /// Checks whether a control byte represents a full bucket (top bit is clear).
      .           #[inline]
      .           fn is_full(ctrl: u8) -> bool {
 63,401 ( 0.07%)      ctrl & 0x80 == 0
      .           }
      .           
      .           /// Checks whether a control byte represents a special value (top bit is set).
      .           #[inline]
      .           fn is_special(ctrl: u8) -> bool {
      .               ctrl & 0x80 != 0
      .           }
      .           
      .           /// Checks whether a special control value is EMPTY (just check 1 bit).
      .           #[inline]
      .           fn special_is_empty(ctrl: u8) -> bool {
      .               debug_assert!(is_special(ctrl));
  4,334 ( 0.00%)      ctrl & 0x01 != 0
      .           }
      .           
      .           /// Primary hash function, used to select the initial bucket to probe from.
      .           #[inline]
      .           #[allow(clippy::cast_possible_truncation)]
      .           fn h1(hash: u64) -> usize {
      .               // On 32-bit platforms we simply ignore the higher hash bits.
      .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
      .           /// Secondary hash function, saved in the low 7 bits of the control byte.
      .           #[inline]
      .           #[allow(clippy::cast_possible_truncation)]
      .           fn h2(hash: u64) -> u8 {
      .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
      .               // value, some hash functions (such as FxHash) produce a usize result
      .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
      .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
544,048 ( 0.60%)      let top7 = hash >> (hash_len * 8 - 7);
      .               (top7 & 0x7f) as u8 // truncation
      .           }
      .           
      .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
      .           /// table size is a power of two) to visit every group of elements exactly once.
      .           ///
      .           /// A triangular probe has us jump by 1 more group every time. So first we
      .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
      .               #[inline]
      .               fn move_next(&mut self, bucket_mask: usize) {
      .                   // We should have found an empty bucket by now and ended the probe.
      .                   debug_assert!(
      .                       self.stride <= bucket_mask,
      .                       "Went past end of probe sequence"
      .                   );
      .           
  5,038 ( 0.01%)          self.stride += Group::WIDTH;
  5,038 ( 0.01%)          self.pos += self.stride;
  4,162 ( 0.00%)          self.pos &= bucket_mask;
      .               }
      .           }
      .           
      .           /// Returns the number of buckets needed to hold the given number of items,
      .           /// taking the maximum load factor into account.
      .           ///
      .           /// Returns `None` if an overflow occurs.
      .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
      .           #[cfg_attr(target_os = "emscripten", inline(never))]
      .           #[cfg_attr(not(target_os = "emscripten"), inline)]
      .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
      .               debug_assert_ne!(cap, 0);
      .           
      .               // For small tables we require at least 1 empty bucket so that lookups are
      .               // guaranteed to terminate if an element doesn't exist in the table.
  3,462 ( 0.00%)      if cap < 8 {
      .                   // We don't bother with a table size of 2 buckets since that can only
      .                   // hold a single element. Instead we skip directly to a 4 bucket table
      .                   // which can hold 3 elements.
  6,315 ( 0.01%)          return Some(if cap < 4 { 4 } else { 8 });
      .               }
      .           
      .               // Otherwise require 1/8 buckets to be empty (87.5% load)
      .               //
      .               // Be careful when modifying this, calculate_layout relies on the
      .               // overflow check here.
  2,808 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
      .           
      .               // Any overflows will have been caught by the checked_mul. Also, any
      .               // rounding errors from the division above will be cleaned up by
      .               // next_power_of_two (which can't overflow because of the previous division).
      .               Some(adjusted_cap.next_power_of_two())
      .           }
      .           
      .           /// Returns the maximum effective capacity for the given bucket mask, taking
      .           /// the maximum load factor into account.
      .           #[inline]
      .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
  8,939 ( 0.01%)      if bucket_mask < 8 {
      .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
      .                   // Keep in mind that the bucket mask is one less than the bucket count.
      .                   bucket_mask
      .               } else {
      .                   // For larger tables we reserve 12.5% of the slots as empty.
  3,606 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
      .               }
      .           }
      .           
      .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
      .           /// while keeping the rest of `calculate_layout_for` independent of `T`
      .           #[derive(Copy, Clone)]
      .           struct TableLayout {
      .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
      .           
      .               #[inline]
      .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
      .                   debug_assert!(buckets.is_power_of_two());
      .           
      .                   let TableLayout { size, ctrl_align } = self;
      .                   // Manual layout calculation since Layout methods are not yet stable.
      .                   let ctrl_offset =
  7,616 ( 0.01%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
  9,803 ( 0.01%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
      .           
      .                   Some((
      .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
      .                       ctrl_offset,
      .                   ))
      .               }
      .           }
      .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
      .                   }
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub unsafe fn drop(&self) {
      .                   self.as_ptr().drop_in_place();
      .               }
      .               #[inline]
      .               pub unsafe fn read(&self) -> T {
      4 ( 0.00%)          self.as_ptr().read()
      .               }
      .               #[inline]
      .               pub unsafe fn write(&self, val: T) {
      .                   self.as_ptr().write(val);
      .               }
      .               #[inline]
      .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
      .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
      .               /// Creates a new empty hash table without allocating any memory, using the
      .               /// given allocator.
      .               ///
      .               /// In effect this returns a table with exactly 1 bucket. However we can
      .               /// leave the data pointer dangling since that bucket is never written to
      .               /// due to our load factor forcing us to always have at least 1 free bucket.
      .               #[inline]
      .               pub fn new_in(alloc: A) -> Self {
    105 ( 0.00%)          Self {
      .                       table: RawTableInner::new_in(alloc),
      .                       marker: PhantomData,
      .                   }
      .               }
      .           
      .               /// Allocates a new hash table with the given number of buckets.
      .               ///
      .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
      .               unsafe fn new_uninitialized(
      .                   alloc: A,
      .                   buckets: usize,
      .                   fallibility: Fallibility,
      .               ) -> Result<Self, TryReserveError> {
      .                   debug_assert!(buckets.is_power_of_two());
      .           
      .                   Ok(Self {
     15 ( 0.00%)              table: RawTableInner::new_uninitialized(
      .                           alloc,
      .                           TableLayout::new::<T>(),
      .                           buckets,
      .                           fallibility,
      .                       )?,
      .                       marker: PhantomData,
      .                   })
      .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
      .               /// Attempts to allocate a new hash table with at least enough capacity
      .               /// for inserting the given number of elements without reallocating.
      .               fn fallible_with_capacity(
      .                   alloc: A,
      .                   capacity: usize,
      .                   fallibility: Fallibility,
      .               ) -> Result<Self, TryReserveError> {
      .                   Ok(Self {
    285 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
      .                           alloc,
      .                           TableLayout::new::<T>(),
      .                           capacity,
      .                           fallibility,
      .                       )?,
      .                       marker: PhantomData,
      .                   })
      .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
      .                   debug_assert_ne!(self.table.bucket_mask, 0);
      .                   debug_assert!(index < self.buckets());
      .                   Bucket::from_base_index(self.data_end(), index)
      .               }
      .           
      .               /// Erases an element from the table without dropping it.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    227 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    227 ( 0.00%)          let index = self.bucket_index(item);
      .                   self.table.erase(index);
    454 ( 0.00%)      }
      .           
      .               /// Erases an element from the table, dropping it in place.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::needless_pass_by_value)]
      .               #[allow(deprecated)]
      .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
      .                   // Erase the element from the table first since drop might panic.
     84 ( 0.00%)          self.erase_no_drop(&item);
      .                   item.drop();
      .               }
      .           
      .               /// Finds and erases an element from the table, dropping it in place.
      .               /// Returns true if an element was found.
      .               #[cfg(feature = "raw")]
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
      .                   }
      .               }
      .           
      .               /// Removes an element from the table, returning it.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::needless_pass_by_value)]
      .               #[allow(deprecated)]
      .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    370 ( 0.00%)          self.erase_no_drop(&item);
      .                   item.read()
      .               }
      .           
      .               /// Finds and removes an element from the table, returning it.
      .               #[cfg_attr(feature = "inline-more", inline)]
 13,710 ( 0.02%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
      2 ( 0.00%)          match self.find(hash, eq) {
    212 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
  2,816 ( 0.00%)              None => None,
      .                   }
 21,324 ( 0.02%)      }
      .           
      .               /// Marks all table buckets as empty without dropping their contents.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn clear_no_drop(&mut self) {
      .                   self.table.clear_no_drop();
      .               }
      .           
      .               /// Removes all elements from the table without freeing the backing memory.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn clear(&mut self) {
      .                   // Ensure that the table is reset even if one of the drops panic
      .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
      .                   unsafe {
      1 ( 0.00%)              self_.drop_elements();
      .                   }
      .               }
      .           
      7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
    242 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
      .                       for item in self.iter() {
      .                           item.drop();
      .                       }
      .                   }
      8 ( 0.00%)      }
      .           
      .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
      .                   // Calculate the minimal number of elements that we need to reserve
      .                   // space for.
      .                   let min_size = usize::max(self.table.items, min_size);
      .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
      .                       }
      .                   }
      .               }
      .           
      .               /// Ensures that at least `additional` items can be inserted into the table
      .               /// without reallocation.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
  9,753 ( 0.01%)          if additional > self.table.growth_left {
      .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
  6,127 ( 0.01%)              if self
      .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
      .                           .is_err()
      .                       {
      .                           unsafe { hint::unreachable_unchecked() }
      .                       }
      .                   }
      .               }
      .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
      .                   } else {
      .                       Ok(())
      .                   }
      .               }
      .           
      .               /// Out-of-line slow path for `reserve` and `try_reserve`.
      .               #[cold]
      .               #[inline(never)]
 14,070 ( 0.02%)      fn reserve_rehash(
      .                   &mut self,
      .                   additional: usize,
      .                   hasher: impl Fn(&T) -> u64,
      .                   fallibility: Fallibility,
      .               ) -> Result<(), TryReserveError> {
      .                   unsafe {
      .                       self.table.reserve_rehash_inner(
      .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
      .                           TableLayout::new::<T>(),
      .                           if mem::needs_drop::<T>() {
      .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
      .                           } else {
      .                               None
      .                           },
      .                       )
      .                   }
  8,352 ( 0.01%)      }
      .           
      .               /// Allocates a new table of a different size and moves the contents of the
      .               /// current table into it.
      .               fn resize(
      .                   &mut self,
      .                   capacity: usize,
      .                   hasher: impl Fn(&T) -> u64,
      .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
      .                       )
      .                   }
      .               }
      .           
      .               /// Inserts a new element into the table, and returns its raw bucket.
      .               ///
      .               /// This does not check if the given element already exists in the table.
      .               #[cfg_attr(feature = "inline-more", inline)]
119,328 ( 0.13%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
      .                   unsafe {
      .                       let mut index = self.table.find_insert_slot(hash);
      .           
      .                       // We can avoid growing the table once we have reached our load
      .                       // factor if we are replacing a tombstone. This works since the
      .                       // number of EMPTY slots does not change in this case.
    135 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
 71,226 ( 0.08%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
      .                           self.reserve(1, hasher);
      .                           index = self.table.find_insert_slot(hash);
      .                       }
      .           
      .                       self.table.record_item_insert_at(index, old_ctrl, hash);
      .           
      .                       let bucket = self.bucket(index);
      2 ( 0.00%)              bucket.write(value);
      .                       bucket
      .                   }
 88,118 ( 0.10%)      }
      .           
      .               /// Attempts to insert a new element without growing the table and return its raw bucket.
      .               ///
      .               /// Returns an `Err` containing the given element if inserting it would require growing the
      .               /// table.
      .               ///
      .               /// This does not check if the given element already exists in the table.
      .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
      .                       }
      .                   }
      .               }
      .           
      .               /// Inserts a new element into the table, and returns a mutable reference to it.
      .               ///
      .               /// This does not check if the given element already exists in the table.
      .               #[cfg_attr(feature = "inline-more", inline)]
 21,424 ( 0.02%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
     52 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
 16,068 ( 0.02%)      }
      .           
      .               /// Inserts a new element into the table, without growing the table.
      .               ///
      .               /// There must be enough space in the table to insert the new element.
      .               ///
      .               /// This does not check if the given element already exists in the table.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
    115 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
 12,892 ( 0.01%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
    208 ( 0.00%)          let bucket = self.table.bucket(index);
      .           
      .                   // If we are replacing a DELETED entry then we don't need to update
      .                   // the load counter.
 26,132 ( 0.03%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
      .           
      .                   bucket.write(value);
 20,840 ( 0.02%)          self.table.items += 1;
      .                   bucket
    225 ( 0.00%)      }
      .           
      .               /// Temporary removes a bucket, applying the given function to the removed
      .               /// element and optionally put back the returned value in the same bucket.
      .               ///
      .               /// Returns `true` if the bucket still contains an element
      .               ///
      .               /// This does not check if the given bucket is actually occupied.
      .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
      .                       true
      .                   } else {
      .                       false
      .                   }
      .               }
      .           
      .               /// Searches for an element in the table.
      .               #[inline]
     16 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
    129 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    453 ( 0.00%)              eq(self.bucket(index).as_ref())
     60 ( 0.00%)          });
      .           
      .                   // Avoid `Option::map` because it bloats LLVM IR.
      .                   match result {
     15 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
      .                       None => None,
      .                   }
     16 ( 0.00%)      }
      .           
      .               /// Gets a reference to an element in the table.
      .               #[inline]
      .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
    213 ( 0.00%)          match self.find(hash, eq) {
      .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Gets a mutable reference to an element in the table.
      .               #[inline]
      .               pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
     10 ( 0.00%)          match self.find(hash, eq) {
      .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Attempts to get mutable references to `N` entries in the table at once.
      .               ///
      .               /// Returns an array of length `N` with the results of each query.
-- line 855 ----------------------------------------
-- line 920 ----------------------------------------
      .               #[inline]
      .               pub fn len(&self) -> usize {
      .                   self.table.items
      .               }
      .           
      .               /// Returns `true` if the table contains no elements.
      .               #[inline]
      .               pub fn is_empty(&self) -> bool {
 20,180 ( 0.02%)          self.len() == 0
      .               }
      .           
      .               /// Returns the number of buckets in the table.
      .               #[inline]
      .               pub fn buckets(&self) -> usize {
      .                   self.table.bucket_mask + 1
      .               }
      .           
-- line 936 ----------------------------------------
-- line 938 ----------------------------------------
      .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
      .               /// Because we cannot make the `next` method unsafe on the `RawIter`
      .               /// struct, we have to make the `iter` method unsafe.
      .               #[inline]
      .               pub unsafe fn iter(&self) -> RawIter<T> {
      .                   let data = Bucket::from_base_index(self.data_end(), 0);
      .                   RawIter {
      .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
  2,256 ( 0.00%)              items: self.table.items,
      .                   }
      .               }
      .           
      .               /// Returns an iterator over occupied buckets that could match a given hash.
      .               ///
      .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
      .               /// return items that have a hash value different than the one provided. You
      .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
      .               /// Iteration starts at the provided iterator's current location.
      .               ///
      .               /// It is up to the caller to ensure that the iterator is valid for this
      .               /// `RawTable` and covers all items that remain in the table.
      .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
      .                   debug_assert_eq!(iter.len(), self.len());
      .           
      .                   let alloc = self.table.alloc.clone();
    532 ( 0.00%)          let allocation = self.into_allocation();
    399 ( 0.00%)          RawIntoIter {
    665 ( 0.00%)              iter,
      .                       allocation,
      .                       marker: PhantomData,
      .                       alloc,
      .                   }
      .               }
      .           
      .               /// Converts the table into a raw allocation. The contents of the table
      .               /// should be dropped using a `RawIter` before freeing the allocation.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
    141 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
      .                       None
      .                   } else {
      .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
      .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
      .                           Some(lco) => lco,
      .                           None => unsafe { hint::unreachable_unchecked() },
      .                       };
      .                       Some((
     95 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
      .                           layout,
      .                       ))
      .                   };
      .                   mem::forget(self);
      .                   alloc
      .               }
      .           }
      .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
      .               T: Sync,
      .               A: Sync,
      .           {
      .           }
      .           
      .           impl<A> RawTableInner<A> {
      .               #[inline]
      .               const fn new_in(alloc: A) -> Self {
 11,793 ( 0.01%)          Self {
      .                       // Be careful to cast the entire slice to a raw pointer.
      .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
      .                       bucket_mask: 0,
      .                       items: 0,
      .                       growth_left: 0,
      .                       alloc,
      .                   }
      .               }
      .           }
      .           
      .           impl<A: Allocator + Clone> RawTableInner<A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
 10,976 ( 0.01%)      unsafe fn new_uninitialized(
      .                   alloc: A,
      .                   table_layout: TableLayout,
      .                   buckets: usize,
      .                   fallibility: Fallibility,
      .               ) -> Result<Self, TryReserveError> {
      .                   debug_assert!(buckets.is_power_of_two());
      .           
      .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
      .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
      .                   // such allocations will never succeed anyways.
      .                   //
      .                   // This mirrors what Vec does in the standard library.
      .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
      .                       return Err(fallibility.capacity_overflow());
      .                   }
      .           
  3,202 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
      .                       Ok(block) => block.cast(),
      .                       Err(_) => return Err(fallibility.alloc_err(layout)),
      .                   };
      .           
      .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
  6,972 ( 0.01%)          Ok(Self {
      .                       ctrl,
  2,896 ( 0.00%)              bucket_mask: buckets - 1,
      .                       items: 0,
      .                       growth_left: bucket_mask_to_capacity(buckets - 1),
      .                       alloc,
      .                   })
  8,092 ( 0.01%)      }
      .           
      .               #[inline]
  2,535 ( 0.00%)      fn fallible_with_capacity(
      .                   alloc: A,
      .                   table_layout: TableLayout,
      .                   capacity: usize,
      .                   fallibility: Fallibility,
      .               ) -> Result<Self, TryReserveError> {
    636 ( 0.00%)          if capacity == 0 {
    242 ( 0.00%)              Ok(Self::new_in(alloc))
      .                   } else {
      .                       unsafe {
      .                           let buckets =
      .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
      .           
  5,121 ( 0.01%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
      .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
      .           
  1,614 ( 0.00%)                  Ok(result)
      .                       }
      .                   }
  2,535 ( 0.00%)      }
      .           
      .               /// Searches for an empty or deleted bucket which is suitable for inserting
      .               /// a new element and sets the hash for that slot.
      .               ///
      .               /// There must be at least 1 empty bucket in the table.
      .               #[inline]
  4,224 ( 0.00%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
      .                   let index = self.find_insert_slot(hash);
  4,224 ( 0.00%)          let old_ctrl = *self.ctrl(index);
      .                   self.set_ctrl_h2(index, hash);
      .                   (index, old_ctrl)
  8,448 ( 0.01%)      }
      .           
      .               /// Searches for an empty or deleted bucket which is suitable for inserting
      .               /// a new element.
      .               ///
      .               /// There must be at least 1 empty bucket in the table.
      .               #[inline]
      .               fn find_insert_slot(&self, hash: u64) -> usize {
      .                   let mut probe_seq = self.probe_seq(hash);
      .                   loop {
      .                       unsafe {
      .                           let group = Group::load(self.ctrl(probe_seq.pos));
 42,349 ( 0.05%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
124,494 ( 0.14%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
      .           
      .                               // In tables smaller than the group width, trailing control
      .                               // bytes outside the range of the table are filled with
      .                               // EMPTY entries. These will unfortunately trigger a
      .                               // match, but once masked may point to a full bucket that
      .                               // is already occupied. We detect this situation here and
      .                               // perform a second scan starting at the beginning of the
      .                               // table. This second scan is guaranteed to find an empty
      .                               // slot (due to the load factor) before hitting the trailing
      .                               // control bytes (containing EMPTY).
 59,283 ( 0.07%)                      if unlikely(is_full(*self.ctrl(result))) {
      .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
      .                                   debug_assert_ne!(probe_seq.pos, 0);
      .                                   return Group::load_aligned(self.ctrl(0))
      .                                       .match_empty_or_deleted()
      .                                       .lowest_set_bit_nonzero();
      .                               }
      .           
      .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
      .           
      .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
      .               /// code generated, but it is eliminated by LLVM optimizations.
      .               #[inline]
      .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
      .                   let h2_hash = h2(hash);
      .                   let mut probe_seq = self.probe_seq(hash);
      .           
  1,340 ( 0.00%)          loop {
      .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
      .           
 74,430 ( 0.08%)              for bit in group.match_byte(h2_hash) {
106,119 ( 0.12%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
      .           
 62,270 ( 0.07%)                  if likely(eq(index)) {
      .                               return Some(index);
      .                           }
      .                       }
      .           
 36,697 ( 0.04%)              if likely(group.match_empty().any_bit_set()) {
      .                           return None;
      .                       }
      .           
      .                       probe_seq.move_next(self.bucket_mask);
      .                   }
      .               }
      .           
      .               #[allow(clippy::mut_mut)]
-- line 1198 ----------------------------------------
-- line 1225 ----------------------------------------
      .                   Bucket::from_base_index(self.data_end(), index)
      .               }
      .           
      .               #[inline]
      .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
      .                   debug_assert_ne!(self.bucket_mask, 0);
      .                   debug_assert!(index < self.buckets());
      .                   let base: *mut u8 = self.data_end().as_ptr();
145,184 ( 0.16%)          base.sub((index + 1) * size_of)
      .               }
      .           
      .               #[inline]
      .               unsafe fn data_end<T>(&self) -> NonNull<T> {
      .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
      .               }
      .           
      .               /// Returns an iterator-like object for a probe sequence on the table.
      .               ///
      .               /// This iterator never terminates, but is guaranteed to visit each bucket
      .               /// group exactly once. The loop using `probe_seq` must terminate upon
      .               /// reaching a group containing an empty bucket.
      .               #[inline]
      .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
      .                   ProbeSeq {
547,241 ( 0.60%)              pos: h1(hash) & self.bucket_mask,
      .                       stride: 0,
      .                   }
      .               }
      .           
      .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
      .               /// in the table, otherwise returns error
      .               #[cfg(feature = "raw")]
      .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
      .                   } else {
      .                       self.record_item_insert_at(index, old_ctrl, hash);
      .                       Ok(index)
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
 89,030 ( 0.10%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
      .                   self.set_ctrl_h2(index, hash);
 71,224 ( 0.08%)          self.items += 1;
      .               }
      .           
      .               #[inline]
      .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
      .                   let probe_seq_pos = self.probe_seq(hash).pos;
      .                   let probe_index =
      .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
      .                   probe_index(i) == probe_index(new_i)
-- line 1281 ----------------------------------------
-- line 1312 ----------------------------------------
      .                   // replicate the buckets at the end of the trailing group. For example
      .                   // with 2 buckets and a group size of 4, the control bytes will look
      .                   // like this:
      .                   //
      .                   //     Real    |             Replicated
      .                   // ---------------------------------------------
      .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
      .                   // ---------------------------------------------
120,864 ( 0.13%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
      .           
 40,288 ( 0.04%)          *self.ctrl(index) = ctrl;
 40,291 ( 0.04%)          *self.ctrl(index2) = ctrl;
      .               }
      .           
      .               /// Returns a pointer to a control byte.
      .               #[inline]
      .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
      .                   debug_assert!(index < self.num_ctrl_bytes());
      .                   self.ctrl.as_ptr().add(index)
      .               }
      .           
      .               #[inline]
      .               fn buckets(&self) -> usize {
  7,482 ( 0.01%)          self.bucket_mask + 1
      .               }
      .           
      .               #[inline]
      .               fn num_ctrl_bytes(&self) -> usize {
  6,644 ( 0.01%)          self.bucket_mask + 1 + Group::WIDTH
      .               }
      .           
      .               #[inline]
      .               fn is_empty_singleton(&self) -> bool {
 25,062 ( 0.03%)          self.bucket_mask == 0
      .               }
      .           
      .               #[allow(clippy::mut_mut)]
      .               #[inline]
      .               unsafe fn prepare_resize(
      .                   &self,
      .                   table_layout: TableLayout,
      .                   capacity: usize,
      .                   fallibility: Fallibility,
      .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
      .                   debug_assert!(self.items <= capacity);
      .           
      .                   // Allocate and initialize the new table.
    738 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
      .                       self.alloc.clone(),
      .                       table_layout,
      .                       capacity,
      .                       fallibility,
      .                   )?;
  3,681 ( 0.00%)          new_table.growth_left -= self.items;
      .                   new_table.items = self.items;
      .           
      .                   // The hash function may panic, in which case we simply free the new
      .                   // table without dropping any elements that may have been copied into
      .                   // it.
      .                   //
      .                   // This guard is also used to free the old table on success, see
      .                   // the comment at the bottom of this function.
      .                   Ok(guard(new_table, move |self_| {
  1,708 ( 0.00%)              if !self_.is_empty_singleton() {
      .                           self_.free_buckets(table_layout);
      .                       }
      .                   }))
      .               }
      .           
      .               /// Reserves or rehashes to make room for `additional` more elements.
      .               ///
      .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
      .                   &mut self,
      .                   additional: usize,
      .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
      .                   fallibility: Fallibility,
      .                   layout: TableLayout,
      .                   drop: Option<fn(*mut u8)>,
      .               ) -> Result<(), TryReserveError> {
      .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
  3,416 ( 0.00%)          let new_items = match self.items.checked_add(additional) {
      .                       Some(new_items) => new_items,
      .                       None => return Err(fallibility.capacity_overflow()),
      .                   };
  3,416 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
  7,228 ( 0.01%)          if new_items <= full_capacity / 2 {
      .                       // Rehash in-place without re-allocating if we have plenty of spare
      .                       // capacity that is locked up due to DELETED entries.
      .                       self.rehash_in_place(hasher, layout.size, drop);
      .                       Ok(())
      .                   } else {
      .                       // Otherwise, conservatively resize to at least the next size up
      .                       // to avoid churning deletes into frequent rehashes.
      .                       self.resize_inner(
  1,708 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
      .                           hasher,
      .                           fallibility,
      .                           layout,
      .                       )
      .                   }
      .               }
      .           
      .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
      .               #[inline(always)]
      .               unsafe fn resize_inner(
      .                   &mut self,
      .                   capacity: usize,
      .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
      .                   fallibility: Fallibility,
      .                   layout: TableLayout,
      .               ) -> Result<(), TryReserveError> {
  1,831 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
      .           
      .                   // Copy all elements to the new table.
      .                   for i in 0..self.buckets() {
 21,924 ( 0.02%)              if !is_full(*self.ctrl(i)) {
      .                           continue;
      .                       }
      .           
      .                       // This may panic.
      .                       let hash = hasher(self, i);
      .           
      .                       // We can use a simpler version of insert() here since:
      .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
      .                   }
      .           
      .                   // We successfully copied all elements without panicking. Now replace
      .                   // self with the new table. The old table will have its memory freed but
      .                   // the items will not be dropped (since they have been moved into the
      .                   // new table).
      .                   mem::swap(self, &mut new_table);
      .           
  1,708 ( 0.00%)          Ok(())
      .               }
      .           
      .               /// Rehashes the contents of the table in place (i.e. without changing the
      .               /// allocation).
      .               ///
      .               /// If `hasher` panics then some the table's contents may be lost.
      .               ///
      .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1554 ----------------------------------------
      .               #[inline]
      .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
      .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
      .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
      .                       Some(lco) => lco,
      .                       None => hint::unreachable_unchecked(),
      .                   };
      .                   self.alloc.deallocate(
    960 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
      .                       layout,
      .                   );
      .               }
      .           
      .               /// Marks all table buckets as empty without dropping their contents.
      .               #[inline]
      .               fn clear_no_drop(&mut self) {
    162 ( 0.00%)          if !self.is_empty_singleton() {
      .                       unsafe {
      .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
      .                       }
      .                   }
    196 ( 0.00%)          self.items = 0;
    162 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
      .               }
      .           
      .               #[inline]
      .               unsafe fn erase(&mut self, index: usize) {
      .                   debug_assert!(is_full(*self.ctrl(index)));
  2,921 ( 0.00%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
      .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
      .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
      .           
      .                   // If we are inside a continuous block of Group::WIDTH full or deleted
      .                   // cells then a probe window may have seen a full block when trying to
      .                   // insert. We therefore need to keep that block non-empty so that
      .                   // lookups will continue searching to the next probe window.
      .                   //
      .                   // Note that in this context `leading_zeros` refers to the bytes at the
      .                   // end of a group, while `trailing_zeros` refers to the bytes at the
      .                   // beginning of a group.
 11,684 ( 0.01%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
      .                       DELETED
      .                   } else {
 14,605 ( 0.02%)              self.growth_left += 1;
      .                       EMPTY
      .                   };
      .                   self.set_ctrl(index, ctrl);
 11,684 ( 0.01%)          self.items -= 1;
      .               }
      .           }
      .           
      .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
    296 ( 0.00%)      fn clone(&self) -> Self {
     38 ( 0.00%)          if self.table.is_empty_singleton() {
      .                       Self::new_in(self.table.alloc.clone())
      .                   } else {
      .                       unsafe {
      .                           let mut new_table = ManuallyDrop::new(
      .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
      .                               match Self::new_uninitialized(
      .                                   self.table.alloc.clone(),
      .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
      .                               // We need to free the memory allocated for the new table.
      .                               new_table.free_buckets();
      .                           });
      .           
      .                           // Return the newly created table.
      .                           ManuallyDrop::into_inner(new_table)
      .                       }
      .                   }
    333 ( 0.00%)      }
      .           
      .               fn clone_from(&mut self, source: &Self) {
      .                   if source.table.is_empty_singleton() {
      .                       *self = Self::new_in(self.table.alloc.clone());
      .                   } else {
      .                       unsafe {
      .                           // First, drop all our elements without clearing the control bytes.
      .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
      .                       .table
      .                       .ctrl(0)
      .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
      .                   source
      .                       .data_start()
      .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
      .           
      .                   self.table.items = source.table.items;
      6 ( 0.00%)          self.table.growth_left = source.table.growth_left;
      .               }
      .           }
      .           
      .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
      .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
      .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
      .               fn default() -> Self {
      .                   Self::new_in(Default::default())
      .               }
      .           }
      .           
      .           #[cfg(feature = "nightly")]
      .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
 14,294 ( 0.02%)      fn drop(&mut self) {
 10,116 ( 0.01%)          if !self.table.is_empty_singleton() {
      .                       unsafe {
      .                           self.drop_elements();
      .                           self.free_buckets();
      .                       }
      .                   }
 15,522 ( 0.02%)      }
      .           }
      .           #[cfg(not(feature = "nightly"))]
      .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn drop(&mut self) {
      .                   if !self.table.is_empty_singleton() {
      .                       unsafe {
      .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
      .               type Item = T;
      .               type IntoIter = RawIntoIter<T, A>;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
    532 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
      .                   unsafe {
      .                       let iter = self.iter();
      .                       self.into_iter_from(iter)
      .                   }
    665 ( 0.00%)      }
      .           }
      .           
      .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
      .           /// not track an item count.
      .           pub(crate) struct RawIterRange<T> {
      .               // Mask of full buckets in the current group. Bits are cleared from this
      .               // mask as each element is processed.
      .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
      .           
      .           impl<T> Iterator for RawIterRange<T> {
      .               type Item = Bucket<T>;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<Bucket<T>> {
      .                   unsafe {
      .                       loop {
  5,568 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    682 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
  1,052 ( 0.00%)                      return Some(self.data.next_n(index));
      .                           }
      .           
  4,268 ( 0.00%)                  if self.next_ctrl >= self.end {
      .                               return None;
      .                           }
      .           
      .                           // We might read past self.end up to the next group boundary,
      .                           // but this is fine because it only occurs on tables smaller
      .                           // than the group size where the trailing control bytes are all
      .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
      .                           // to the group size (since tables are power-of-two sized).
    184 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
     70 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
    321 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
      .                       }
      .                   }
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   // We don't have an item count, so just guess based on the range size.
      .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
      .                           }
      .                       } else {
      .                           // We must have already iterated past the removed item.
      .                       }
      .                   }
      .               }
      .           
      .               unsafe fn drop_elements(&mut self) {
    365 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
      .                       for item in self {
      .                           item.drop();
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
      .                   }
      .               }
      .           }
      .           
      .           impl<T> Iterator for RawIter<T> {
      .               type Item = Bucket<T>;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
    676 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
  1,540 ( 0.00%)          if let Some(b) = self.iter.next() {
  7,167 ( 0.01%)              self.items -= 1;
      .                       Some(b)
      .                   } else {
      .                       // We don't check against items == 0 here to allow the
      .                       // compiler to optimize away the item count entirely if the
      .                       // iterator length is never queried.
      .                       debug_assert_eq!(self.items, 0);
      .                       None
      .                   }
  1,352 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   (self.items, Some(self.items))
      .               }
      .           }
      .           
      .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
      .               T: Sync,
      .               A: Sync,
      .           {
      .           }
      .           
      .           #[cfg(feature = "nightly")]
      .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
    586 ( 0.00%)      fn drop(&mut self) {
      .                   unsafe {
      .                       // Drop all remaining elements
      .                       self.iter.drop_elements();
      .           
      .                       // Free the table
    644 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
      .                           self.alloc.deallocate(ptr, layout);
      .                       }
      .                   }
    158 ( 0.00%)      }
      .           }
      .           #[cfg(not(feature = "nightly"))]
      .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn drop(&mut self) {
      .                   unsafe {
      .                       // Drop all remaining elements
      .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
      .                   }
      .               }
      .           }
      .           
      .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
      .               type Item = T;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
     15 ( 0.00%)      fn next(&mut self) -> Option<T> {
      9 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
     30 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      2 ( 0.00%)          self.iter.size_hint()
      .               }
      .           }
      .           
      .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
      .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
      .           
      .           /// Iterator which consumes elements without freeing the table storage.
      .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
      .           where
      .               T: Sync,
      .               A: Sync,
      .           {
      .           }
      .           
      .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
    136 ( 0.00%)      fn drop(&mut self) {
      .                   unsafe {
      .                       // Drop all remaining elements. Note that this may panic.
      .                       self.iter.drop_elements();
      .           
      .                       // Reset the contents of the table now that all elements have been
      .                       // dropped.
      .                       self.table.clear_no_drop();
      .           
      .                       // Move the now empty table back to its original location.
     17 ( 0.00%)              self.orig_table
      .                           .as_ptr()
      .                           .copy_from_nonoverlapping(&*self.table, 1);
      .                   }
    136 ( 0.00%)      }
      .           }
      .           
      .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
      .               type Item = T;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<T> {
      .                   unsafe {
-- line 2289 ----------------------------------------

272,600 ( 0.30%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs
--------------------------------------------------------------------------------
Ir               

-- line 198 ----------------------------------------
      .                   }
      .           
      .                   #[inline]
      .                   #[allow(arithmetic_overflow)]
      .                   #[rustc_inherit_overflow_checks]
      .                   fn forward(start: Self, n: usize) -> Self {
      .                       // In debug builds, trigger a panic on overflow.
      .                       // This should optimize completely out in release builds.
  3,051 ( 0.00%)              if Self::forward_checked(start, n).is_none() {
      .                           let _ = Self::MAX + 1;
      .                       }
      .                       // Do wrapping math to allow e.g. `Step::forward(-128i8, 255)`.
      .                       start.wrapping_add(n as Self)
      .                   }
      .           
      .                   #[inline]
      .                   #[allow(arithmetic_overflow)]
-- line 214 ----------------------------------------
-- line 613 ----------------------------------------
      .           
      .                   if taken < n { Err(taken) } else { Ok(()) }
      .               }
      .           }
      .           
      .           impl<T: TrustedStep> RangeIteratorImpl for ops::Range<T> {
      .               #[inline]
      .               fn spec_next(&mut self) -> Option<T> {
602,366 ( 0.67%)          if self.start < self.end {
      .                       // SAFETY: just checked precondition
      .                       let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
      .                       Some(mem::replace(&mut self.start, n))
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
-- line 629 ----------------------------------------
-- line 657 ----------------------------------------
      .                   // Otherwise 0 is returned which always safe to use.
      .                   self.start = unsafe { Step::forward_unchecked(self.start.clone(), taken) };
      .           
      .                   if taken < n { Err(taken) } else { Ok(()) }
      .               }
      .           
      .               #[inline]
      .               fn spec_next_back(&mut self) -> Option<T> {
  2,232 ( 0.00%)          if self.start < self.end {
      .                       // SAFETY: just checked precondition
      .                       self.end = unsafe { Step::backward_unchecked(self.end.clone(), 1) };
      .                       Some(self.end.clone())
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
-- line 673 ----------------------------------------
-- line 708 ----------------------------------------
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A> {
      .                   self.spec_next()
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
  3,846 ( 0.00%)          if self.start < self.end {
      .                       let hint = Step::steps_between(&self.start, &self.end);
      .                       (hint.unwrap_or(usize::MAX), hint)
      .                   } else {
      .                       (0, Some(0))
      .                   }
      .               }
      .           
      .               #[inline]
-- line 724 ----------------------------------------
-- line 857 ----------------------------------------
      .           impl<A: Step> FusedIterator for ops::Range<A> {}
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<A: Step> Iterator for ops::RangeFrom<A> {
      .               type Item = A;
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A> {
    136 ( 0.00%)          let n = Step::forward(self.start.clone(), 1);
      .                   Some(mem::replace(&mut self.start, n))
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   (usize::MAX, None)
      .               }
      .           
-- line 873 ----------------------------------------
-- line 998 ----------------------------------------
      .           
      .                   try { accum }
      .               }
      .           }
      .           
      .           impl<T: TrustedStep> RangeInclusiveIteratorImpl for ops::RangeInclusive<T> {
      .               #[inline]
      .               fn spec_next(&mut self) -> Option<T> {
    292 ( 0.00%)          if self.is_empty() {
      .                       return None;
      .                   }
      .                   let is_iterating = self.start < self.end;
    184 ( 0.00%)          Some(if is_iterating {
      .                       // SAFETY: just checked precondition
      .                       let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
      .                       mem::replace(&mut self.start, n)
      .                   } else {
      .                       self.exhausted = true;
      .                       self.start.clone()
      .                   })
      .               }
-- line 1018 ----------------------------------------
-- line 1025 ----------------------------------------
      .                   R: Try<Output = B>,
      .               {
      .                   if self.is_empty() {
      .                       return try { init };
      .                   }
      .           
      .                   let mut accum = init;
      .           
    791 ( 0.00%)          while self.start < self.end {
      .                       // SAFETY: just checked precondition
      .                       let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
      .                       let n = mem::replace(&mut self.start, n);
      .                       accum = f(accum, n)?;
      .                   }
      .           
      .                   self.exhausted = true;
      .           
     31 ( 0.00%)          if self.start == self.end {
      .                       accum = f(accum, self.start.clone())?;
      .                   }
      .           
      .                   try { accum }
      .               }
      .           
      .               #[inline]
      .               fn spec_next_back(&mut self) -> Option<T> {
-- line 1050 ----------------------------------------
-- line 1098 ----------------------------------------
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A> {
      .                   self.spec_next()
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
    780 ( 0.00%)          if self.is_empty() {
      .                       return (0, Some(0));
      .                   }
      .           
      .                   match Step::steps_between(&self.start, &self.end) {
      .                       Some(hint) => (hint.saturating_add(1), hint.checked_add(1)),
      .                       None => (usize::MAX, None),
      .                   }
      .               }
-- line 1114 ----------------------------------------

 83,836 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs
--------------------------------------------------------------------------------
Ir                 

-- line 14 ----------------------------------------
        .           
        .           pub type EncodeResult = Result<(), !>;
        .           
        .           pub struct Encoder {
        .               pub data: Vec<u8>,
        .           }
        .           
        .           impl Encoder {
        1 ( 0.00%)      pub fn new(data: Vec<u8>) -> Encoder {
        4 ( 0.00%)          Encoder { data }
        1 ( 0.00%)      }
        .           
        1 ( 0.00%)      pub fn into_inner(self) -> Vec<u8> {
        4 ( 0.00%)          self.data
        1 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn position(&self) -> usize {
      187 ( 0.00%)          self.data.len()
        .               }
        .           }
        .           
        .           macro_rules! write_leb128 {
        .               ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{
        .                   const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);
        .                   let old_len = $enc.data.len();
        .           
-- line 40 ----------------------------------------
-- line 67 ----------------------------------------
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> EncodeResult {
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn emit_usize(&mut self, v: usize) -> EncodeResult {
    4,226 ( 0.00%)          write_leb128!(self, v, usize, write_usize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u128(&mut self, v: u128) -> EncodeResult {
        7 ( 0.00%)          write_leb128!(self, v, u128, write_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u64(&mut self, v: u64) -> EncodeResult {
      252 ( 0.00%)          write_leb128!(self, v, u64, write_u64_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u32(&mut self, v: u32) -> EncodeResult {
    2,446 ( 0.00%)          write_leb128!(self, v, u32, write_u32_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u16(&mut self, v: u16) -> EncodeResult {
        .                   self.data.extend_from_slice(&v.to_le_bytes());
        .                   Ok(())
        .               }
        .           
-- line 98 ----------------------------------------
-- line 131 ----------------------------------------
        .               #[inline]
        .               fn emit_i8(&mut self, v: i8) -> EncodeResult {
        .                   let as_u8: u8 = unsafe { std::mem::transmute(v) };
        .                   self.emit_u8(as_u8)
        .               }
        .           
        .               #[inline]
        .               fn emit_bool(&mut self, v: bool) -> EncodeResult {
       44 ( 0.00%)          self.emit_u8(if v { 1 } else { 0 })
        .               }
        .           
        .               #[inline]
        .               fn emit_f64(&mut self, v: f64) -> EncodeResult {
        .                   let as_u64: u64 = v.to_bits();
        .                   self.emit_u64(as_u64)
        .               }
        .           
-- line 147 ----------------------------------------
-- line 549 ----------------------------------------
        .               #[inline]
        .               pub fn advance(&mut self, bytes: usize) {
        .                   self.position += bytes;
        .               }
        .           
        .               #[inline]
        .               pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {
        .                   let start = self.position;
       29 ( 0.00%)          self.position += bytes;
       29 ( 0.00%)          &self.data[start..self.position]
        .               }
        .           }
        .           
        .           macro_rules! read_leb128 {
        .               ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};
        .           }
        .           
        .           impl<'a> serialize::Decoder for Decoder<'a> {
        .               #[inline]
        .               fn read_unit(&mut self) -> () {
        .                   ()
        .               }
        .           
        .               #[inline]
        .               fn read_u128(&mut self) -> u128 {
      652 ( 0.00%)          read_leb128!(self, read_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_u64(&mut self) -> u64 {
      635 ( 0.00%)          read_leb128!(self, read_u64_leb128)
        .               }
        .           
        .               #[inline]
   11,029 ( 0.01%)      fn read_u32(&mut self) -> u32 {
   46,154 ( 0.05%)          read_leb128!(self, read_u32_leb128)
   22,058 ( 0.02%)      }
        .           
        .               #[inline]
        .               fn read_u16(&mut self) -> u16 {
  561,897 ( 0.62%)          let bytes = [self.data[self.position], self.data[self.position + 1]];
   80,271 ( 0.09%)          let value = u16::from_le_bytes(bytes);
  160,688 ( 0.18%)          self.position += 2;
        .                   value
        .               }
        .           
        .               #[inline]
        .               fn read_u8(&mut self) -> u8 {
2,209,784 ( 2.44%)          let value = self.data[self.position];
  410,205 ( 0.45%)          self.position += 1;
        .                   value
        .               }
        .           
        .               #[inline]
   54,612 ( 0.06%)      fn read_usize(&mut self) -> usize {
   54,720 ( 0.06%)          read_leb128!(self, read_usize_leb128)
  109,224 ( 0.12%)      }
        .           
        .               #[inline]
        .               fn read_i128(&mut self) -> i128 {
        .                   read_leb128!(self, read_i128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_i64(&mut self) -> i64 {
-- line 613 ----------------------------------------
-- line 637 ----------------------------------------
        .               #[inline]
        .               fn read_isize(&mut self) -> isize {
        .                   read_leb128!(self, read_isize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_bool(&mut self) -> bool {
        .                   let value = self.read_u8();
    4,452 ( 0.00%)          value != 0
        .               }
        .           
        .               #[inline]
        .               fn read_f64(&mut self) -> f64 {
        .                   let bits = self.read_u64();
        .                   f64::from_bits(bits)
        .               }
        .           
-- line 653 ----------------------------------------
-- line 660 ----------------------------------------
        .               #[inline]
        .               fn read_char(&mut self) -> char {
        .                   let bits = self.read_u32();
        .                   std::char::from_u32(bits).unwrap()
        .               }
        .           
        .               #[inline]
        .               fn read_str(&mut self) -> Cow<'_, str> {
    7,792 ( 0.01%)          let len = self.read_usize();
   47,540 ( 0.05%)          let sentinel = self.data[self.position + len];
   11,966 ( 0.01%)          assert!(sentinel == STR_SENTINEL);
        .                   let s = unsafe {
        .                       std::str::from_utf8_unchecked(&self.data[self.position..self.position + len])
        .                   };
   29,915 ( 0.03%)          self.position += len + 1;
    5,751 ( 0.01%)          Cow::Borrowed(s)
        .               }
        .           
        .               #[inline]
        .               fn read_raw_bytes_into(&mut self, s: &mut [u8]) {
       51 ( 0.00%)          let start = self.position;
      348 ( 0.00%)          self.position += s.len();
       51 ( 0.00%)          s.copy_from_slice(&self.data[start..self.position]);
        .               }
        .           }
        .           
        .           // Specializations for contiguous byte sequences follow. The default implementations for slices
        .           // encode and decode each element individually. This isn't necessary for `u8` slices when using
        .           // opaque encoders and decoders, because each `u8` is unchanged by encoding and decoding.
        .           // Therefore, we can use more efficient implementations that process the entire sequence at once.
        .           
-- line 690 ----------------------------------------

  185,285 ( 0.20%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs
--------------------------------------------------------------------------------
Ir              

-- line 26 ----------------------------------------
     .           pub struct UnmatchedBrace {
     .               pub expected_delim: token::DelimToken,
     .               pub found_delim: Option<token::DelimToken>,
     .               pub found_span: Span,
     .               pub unclosed_span: Option<Span>,
     .               pub candidate_span: Option<Span>,
     .           }
     .           
    42 ( 0.00%)  crate fn parse_token_trees<'a>(
     .               sess: &'a ParseSess,
     .               src: &'a str,
     .               start_pos: BytePos,
     .               override_span: Option<Span>,
     .           ) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
     .               StringReader { sess, start_pos, pos: start_pos, end_src_index: src.len(), src, override_span }
     .                   .into_token_trees()
    27 ( 0.00%)  }
     .           
     .           struct StringReader<'a> {
     .               sess: &'a ParseSess,
     .               /// Initial position, read-only.
     .               start_pos: BytePos,
     .               /// The absolute offset within the source_map of the current character.
     .               pos: BytePos,
     .               /// Stop reading src at this index.
-- line 50 ----------------------------------------
-- line 51 ----------------------------------------
     .               end_src_index: usize,
     .               /// Source text to tokenize.
     .               src: &'a str,
     .               override_span: Option<Span>,
     .           }
     .           
     .           impl<'a> StringReader<'a> {
     .               fn mk_sp(&self, lo: BytePos, hi: BytePos) -> Span {
 1,391 ( 0.00%)          self.override_span.unwrap_or_else(|| Span::with_root_ctxt(lo, hi))
     .               }
     .           
     .               /// Returns the next token, and info about preceding whitespace, if any.
 7,378 ( 0.01%)      fn next_token(&mut self) -> (Spacing, Token) {
     .                   let mut spacing = Spacing::Joint;
     .           
     .                   // Skip `#!` at the start of the file
 2,108 ( 0.00%)          let start_src_index = self.src_index(self.pos);
 3,162 ( 0.00%)          let text: &str = &self.src[start_src_index..self.end_src_index];
     .                   let is_beginning_of_file = self.pos == self.start_pos;
 1,054 ( 0.00%)          if is_beginning_of_file {
    12 ( 0.00%)              if let Some(shebang_len) = rustc_lexer::strip_shebang(text) {
     .                           self.pos = self.pos + BytePos::from_usize(shebang_len);
     .                           spacing = Spacing::Alone;
     .                       }
     .                   }
     .           
     .                   // Skip trivial (whitespace & comments) tokens
     .                   loop {
 1,746 ( 0.00%)              let start_src_index = self.src_index(self.pos);
 4,200 ( 0.00%)              let text: &str = &self.src[start_src_index..self.end_src_index];
     .           
 1,400 ( 0.00%)              if text.is_empty() {
     .                           let span = self.mk_sp(self.pos, self.pos);
    15 ( 0.00%)                  return (spacing, Token::new(token::Eof, span));
     .                       }
     .           
 4,191 ( 0.00%)              let token = rustc_lexer::first_token(text);
     .           
 2,794 ( 0.00%)              let start = self.pos;
 1,397 ( 0.00%)              self.pos = self.pos + BytePos::from_usize(token.len);
     .           
     .                       debug!("next_token: {:?}({:?})", token.kind, self.str_from(start));
     .           
11,228 ( 0.01%)              match self.cook_lexer_token(token.kind, start) {
 8,408 ( 0.01%)                  Some(kind) => {
     .                               let span = self.mk_sp(start, self.pos);
 6,306 ( 0.01%)                      return (spacing, Token::new(kind, span));
     .                           }
     .                           None => spacing = Spacing::Alone,
     .                       }
     .                   }
 9,486 ( 0.01%)      }
     .           
     .               /// Report a fatal lexical error with a given span.
     .               fn fatal_span(&self, sp: Span, m: &str) -> FatalError {
     .                   self.sess.span_diagnostic.span_fatal(sp, m)
     .               }
     .           
     .               /// Report a lexical error with a given span.
     .               fn err_span(&self, sp: Span, m: &str) {
-- line 110 ----------------------------------------
-- line 130 ----------------------------------------
     .               ) -> DiagnosticBuilder<'a> {
     .                   self.sess
     .                       .span_diagnostic
     .                       .struct_span_fatal(self.mk_sp(from_pos, to_pos), &format!("{}: {}", m, escaped_char(c)))
     .               }
     .           
     .               /// Detect usages of Unicode codepoints changing the direction of the text on screen and loudly
     .               /// complain about it.
    42 ( 0.00%)      fn lint_unicode_text_flow(&self, start: BytePos) {
     .                   // Opening delimiter of the length 2 is not included into the comment text.
     .                   let content_start = start + BytePos(2);
     .                   let content = self.str_from(content_start);
     .                   if contains_text_flow_control_chars(content) {
     .                       let span = self.mk_sp(start, self.pos);
     .                       self.sess.buffer_lint_with_diagnostic(
     .                           &TEXT_DIRECTION_CODEPOINT_IN_COMMENT,
     .                           span,
     .                           ast::CRATE_NODE_ID,
     .                           "unicode codepoint changing visible direction of text present in comment",
     .                           BuiltinLintDiagnostics::UnicodeTextFlow(span, content.to_string()),
     .                       );
     .                   }
    48 ( 0.00%)      }
     .           
     .               /// Turns simple `rustc_lexer::TokenKind` enum into a rich
     .               /// `rustc_ast::TokenKind`. This turns strings into interned
     .               /// symbols and runs additional validation.
     .               fn cook_lexer_token(&self, token: rustc_lexer::TokenKind, start: BytePos) -> Option<TokenKind> {
 6,985 ( 0.01%)          Some(match token {
    19 ( 0.00%)              rustc_lexer::TokenKind::LineComment { doc_style } => {
     .                           // Skip non-doc comments
    77 ( 0.00%)                  let doc_style = if let Some(doc_style) = doc_style {
     .                               doc_style
     .                           } else {
     .                               self.lint_unicode_text_flow(start);
     .                               return None;
     .                           };
     .           
     .                           // Opening delimiter of the length 3 is not included into the symbol.
     .                           let content_start = start + BytePos(3);
     .                           let content = self.str_from(content_start);
    65 ( 0.00%)                  self.cook_doc_comment(content_start, content, CommentKind::Line, doc_style)
     .                       }
     .                       rustc_lexer::TokenKind::BlockComment { doc_style, terminated } => {
     .                           if !terminated {
     .                               let msg = match doc_style {
     .                                   Some(_) => "unterminated block doc-comment",
     .                                   None => "unterminated block comment",
     .                               };
     .                               let last_bpos = self.pos;
-- line 179 ----------------------------------------
-- line 198 ----------------------------------------
     .                           let content_end = self.pos - BytePos(if terminated { 2 } else { 0 });
     .                           let content = self.str_from_to(content_start, content_end);
     .                           self.cook_doc_comment(content_start, content, CommentKind::Block, doc_style)
     .                       }
     .                       rustc_lexer::TokenKind::Whitespace => return None,
     .                       rustc_lexer::TokenKind::Ident
     .                       | rustc_lexer::TokenKind::RawIdent
     .                       | rustc_lexer::TokenKind::UnknownPrefix => {
 1,336 ( 0.00%)                  let is_raw_ident = token == rustc_lexer::TokenKind::RawIdent;
 1,670 ( 0.00%)                  let is_unknown_prefix = token == rustc_lexer::TokenKind::UnknownPrefix;
     .                           let mut ident_start = start;
   668 ( 0.00%)                  if is_raw_ident {
     .                               ident_start = ident_start + BytePos(2);
     .                           }
 1,002 ( 0.00%)                  if is_unknown_prefix {
     .                               self.report_unknown_prefix(start);
     .                           }
 1,670 ( 0.00%)                  let sym = nfc_normalize(self.str_from(ident_start));
     .                           let span = self.mk_sp(start, self.pos);
 1,336 ( 0.00%)                  self.sess.symbol_gallery.insert(sym, span);
   668 ( 0.00%)                  if is_raw_ident {
     .                               if !sym.can_be_raw() {
     .                                   self.err_span(span, &format!("`{}` cannot be a raw identifier", sym));
     .                               }
     .                               self.sess.raw_identifier_spans.borrow_mut().push(span);
     .                           }
 2,338 ( 0.00%)                  token::Ident(sym, is_raw_ident)
     .                       }
     .                       rustc_lexer::TokenKind::InvalidIdent
     .                           // Do not recover an identifier with emoji if the codepoint is a confusable
     .                           // with a recoverable substitution token, like `➖`.
     .                           if UNICODE_ARRAY
     .                               .iter()
     .                               .find(|&&(c, _, _)| {
     .                                   let sym = self.str_from(start);
-- line 232 ----------------------------------------
-- line 234 ----------------------------------------
     .                               })
     .                               .is_none() =>
     .                       {
     .                           let sym = nfc_normalize(self.str_from(start));
     .                           let span = self.mk_sp(start, self.pos);
     .                           self.sess.bad_unicode_identifiers.borrow_mut().entry(sym).or_default().push(span);
     .                           token::Ident(sym, false)
     .                       }
   992 ( 0.00%)              rustc_lexer::TokenKind::Literal { kind, suffix_start } => {
     .                           let suffix_start = start + BytePos(suffix_start as u32);
     .                           let (kind, symbol) = self.cook_lexer_literal(start, suffix_start, kind);
   186 ( 0.00%)                  let suffix = if suffix_start < self.pos {
     .                               let string = self.str_from(suffix_start);
     .                               if string == "_" {
     .                                   self.sess
     .                                       .span_diagnostic
     .                                       .struct_span_warn(
     .                                           self.mk_sp(suffix_start, self.pos),
     .                                           "underscore literal suffix is not allowed",
     .                                       )
-- line 253 ----------------------------------------
-- line 264 ----------------------------------------
     .                                       .emit();
     .                                   None
     .                               } else {
     .                                   Some(Symbol::intern(string))
     .                               }
     .                           } else {
     .                               None
     .                           };
   496 ( 0.00%)                  token::Literal(token::Lit { kind, symbol, suffix })
     .                       }
     4 ( 0.00%)              rustc_lexer::TokenKind::Lifetime { starts_with_number } => {
     .                           // Include the leading `'` in the real identifier, for macro
     .                           // expansion purposes. See #12512 for the gory details of why
     .                           // this is necessary.
     .                           let lifetime_name = self.str_from(start);
     2 ( 0.00%)                  if starts_with_number {
     .                               self.err_span_(start, self.pos, "lifetimes cannot start with a number");
     .                           }
     6 ( 0.00%)                  let ident = Symbol::intern(lifetime_name);
     8 ( 0.00%)                  token::Lifetime(ident)
     .                       }
     .                       rustc_lexer::TokenKind::Semi => token::Semi,
     .                       rustc_lexer::TokenKind::Comma => token::Comma,
     .                       rustc_lexer::TokenKind::Dot => token::Dot,
     .                       rustc_lexer::TokenKind::OpenParen => token::OpenDelim(token::Paren),
     .                       rustc_lexer::TokenKind::CloseParen => token::CloseDelim(token::Paren),
     .                       rustc_lexer::TokenKind::OpenBrace => token::OpenDelim(token::Brace),
     .                       rustc_lexer::TokenKind::CloseBrace => token::CloseDelim(token::Brace),
-- line 291 ----------------------------------------
-- line 324 ----------------------------------------
     .                               err.help("source files must contain UTF-8 encoded text, unexpected null bytes might occur when a different encoding is used");
     .                           }
     .                           err.emit();
     .                           token?
     .                       }
     .                   })
     .               }
     .           
   156 ( 0.00%)      fn cook_doc_comment(
     .                   &self,
     .                   content_start: BytePos,
     .                   content: &str,
     .                   comment_kind: CommentKind,
     .                   doc_style: DocStyle,
     .               ) -> TokenKind {
    13 ( 0.00%)          if content.contains('\r') {
     .                       for (idx, _) in content.char_indices().filter(|&(_, c)| c == '\r') {
     .                           self.err_span_(
     .                               content_start + BytePos(idx as u32),
     .                               content_start + BytePos(idx as u32 + 1),
     .                               match comment_kind {
     .                                   CommentKind::Line => "bare CR not allowed in doc-comment",
     .                                   CommentKind::Block => "bare CR not allowed in block doc-comment",
     .                               },
-- line 347 ----------------------------------------
-- line 349 ----------------------------------------
     .                       }
     .                   }
     .           
     .                   let attr_style = match doc_style {
     .                       DocStyle::Outer => AttrStyle::Outer,
     .                       DocStyle::Inner => AttrStyle::Inner,
     .                   };
     .           
    39 ( 0.00%)          token::DocComment(comment_kind, attr_style, Symbol::intern(content))
   195 ( 0.00%)      }
     .           
     .               fn cook_lexer_literal(
     .                   &self,
     .                   start: BytePos,
     .                   suffix_start: BytePos,
     .                   kind: rustc_lexer::LiteralKind,
     .               ) -> (token::LitKind, Symbol) {
     .                   // prefix means `"` or `br"` or `r###"`, ...
-- line 366 ----------------------------------------
-- line 380 ----------------------------------------
     .                               self.sess.span_diagnostic.span_fatal_with_code(
     .                                   self.mk_sp(start + BytePos(1), suffix_start),
     .                                   "unterminated byte constant",
     .                                   error_code!(E0763),
     .                               )
     .                           }
     .                           (token::Byte, Mode::Byte, 2, 1) // b' '
     .                       }
    57 ( 0.00%)              rustc_lexer::LiteralKind::Str { terminated } => {
    57 ( 0.00%)                  if !terminated {
     .                               self.sess.span_diagnostic.span_fatal_with_code(
     .                                   self.mk_sp(start, suffix_start),
     .                                   "unterminated double quote string",
     .                                   error_code!(E0765),
     .                               )
     .                           }
     .                           (token::Str, Mode::Str, 1, 1) // " "
     .                       }
-- line 397 ----------------------------------------
-- line 410 ----------------------------------------
     .                           let n = u32::from(n_hashes);
     .                           (token::StrRaw(n_hashes), Mode::RawStr, 2 + n, 1 + n) // r##" "##
     .                       }
     .                       rustc_lexer::LiteralKind::RawByteStr { n_hashes, err } => {
     .                           self.report_raw_str_error(start, err);
     .                           let n = u32::from(n_hashes);
     .                           (token::ByteStrRaw(n_hashes), Mode::RawByteStr, 3 + n, 1 + n) // br##" "##
     .                       }
    10 ( 0.00%)              rustc_lexer::LiteralKind::Int { base, empty_int } => {
     5 ( 0.00%)                  return if empty_int {
     .                               self.sess
     .                                   .span_diagnostic
     .                                   .struct_span_err_with_code(
     .                                       self.mk_sp(start, suffix_start),
     .                                       "no valid digits found for number",
     .                                       error_code!(E0768),
     .                                   )
     .                                   .emit();
     .                               (token::Integer, sym::integer(0))
     .                           } else {
     .                               self.validate_int_literal(base, start, suffix_start);
    15 ( 0.00%)                      (token::Integer, self.symbol_from_to(start, suffix_start))
     .                           };
     .                       }
     .                       rustc_lexer::LiteralKind::Float { base, empty_exponent } => {
     .                           if empty_exponent {
     .                               self.err_span_(start, self.pos, "expected at least one digit in exponent");
     .                           }
     .           
     .                           match base {
-- line 439 ----------------------------------------
-- line 452 ----------------------------------------
     .                           }
     .           
     .                           let id = self.symbol_from_to(start, suffix_start);
     .                           return (token::Float, id);
     .                       }
     .                   };
     .                   let content_start = start + BytePos(prefix_len);
     .                   let content_end = suffix_start - BytePos(postfix_len);
   171 ( 0.00%)          let id = self.symbol_from_to(content_start, content_end);
     .                   self.validate_literal_escape(mode, content_start, content_end, prefix_len, postfix_len);
     .                   (lit_kind, id)
     .               }
     .           
     .               #[inline]
     .               fn src_index(&self, pos: BytePos) -> usize {
     .                   (pos - self.start_pos).to_usize()
     .               }
     .           
     .               /// Slice of the source text from `start` up to but excluding `self.pos`,
     .               /// meaning the slice does not include the character `self.ch`.
     .               fn str_from(&self, start: BytePos) -> &str {
 2,183 ( 0.00%)          self.str_from_to(start, self.pos)
     .               }
     .           
     .               /// As symbol_from, with an explicit endpoint.
     .               fn symbol_from_to(&self, start: BytePos, end: BytePos) -> Symbol {
     .                   debug!("taking an ident from {:?} to {:?}", start, end);
   719 ( 0.00%)          Symbol::intern(self.str_from_to(start, end))
     .               }
     .           
     .               /// Slice of the source text spanning from `start` up to but excluding `end`.
   474 ( 0.00%)      fn str_from_to(&self, start: BytePos, end: BytePos) -> &str {
     .                   &self.src[self.src_index(start)..self.src_index(end)]
 1,896 ( 0.00%)      }
     .           
     .               fn report_raw_str_error(&self, start: BytePos, opt_err: Option<RawStrError>) {
     .                   match opt_err {
     .                       Some(RawStrError::InvalidStarter { bad_char }) => {
     .                           self.report_non_started_raw_string(start, bad_char)
     .                       }
     .                       Some(RawStrError::NoTerminator { expected, found, possible_terminator_offset }) => self
     .                           .report_unterminated_raw_string(start, expected, possible_terminator_offset, found),
-- line 493 ----------------------------------------
-- line 609 ----------------------------------------
     .               fn validate_literal_escape(
     .                   &self,
     .                   mode: Mode,
     .                   content_start: BytePos,
     .                   content_end: BytePos,
     .                   prefix_len: u32,
     .                   postfix_len: u32,
     .               ) {
   342 ( 0.00%)          let lit_content = self.str_from_to(content_start, content_end);
 5,310 ( 0.01%)          unescape::unescape_literal(lit_content, mode, &mut |range, result| {
     .                       // Here we only check for errors. The actual unescaping is done later.
 1,014 ( 0.00%)              if let Err(err) = result {
     .                           let span_with_quotes = self
     .                               .mk_sp(content_start - BytePos(prefix_len), content_end + BytePos(postfix_len));
     .                           let (start, end) = (range.start as u32, range.end as u32);
     .                           let lo = content_start + BytePos(start);
     .                           let hi = lo + BytePos(end - start);
     .                           let span = self.mk_sp(lo, hi);
     .                           emit_unescape_error(
     .                               &self.sess.span_diagnostic,
-- line 628 ----------------------------------------
-- line 629 ----------------------------------------
     .                               lit_content,
     .                               span_with_quotes,
     .                               span,
     .                               mode,
     .                               range,
     .                               err,
     .                           );
     .                       }
 4,563 ( 0.01%)          });
     .               }
     .           
     .               fn validate_int_literal(&self, base: Base, content_start: BytePos, content_end: BytePos) {
    20 ( 0.00%)          let base = match base {
     .                       Base::Binary => 2,
     .                       Base::Octal => 8,
     .                       _ => return,
     .                   };
     .                   let s = self.str_from_to(content_start + BytePos(2), content_end);
     .                   for (idx, c) in s.char_indices() {
     .                       let idx = idx as u32;
     .                       if c != '_' && c.to_digit(base).is_none() {
-- line 649 ----------------------------------------
-- line 650 ----------------------------------------
     .                           let lo = content_start + BytePos(2 + idx);
     .                           let hi = content_start + BytePos(2 + idx + c.len_utf8() as u32);
     .                           self.err_span_(lo, hi, &format!("invalid digit for a base {} literal", base));
     .                       }
     .                   }
     .               }
     .           }
     .           
 3,006 ( 0.00%)  pub fn nfc_normalize(string: &str) -> Symbol {
     .               use unicode_normalization::{is_nfc_quick, IsNormalized, UnicodeNormalization};
   668 ( 0.00%)      match is_nfc_quick(string.chars()) {
 3,340 ( 0.00%)          IsNormalized::Yes => Symbol::intern(string),
     .                   _ => {
     .                       let normalized_str: String = string.chars().nfc().collect();
     .                       Symbol::intern(&normalized_str)
     .                   }
     .               }
     .           }

 4,951 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs
--------------------------------------------------------------------------------
Ir               

-- line 223 ----------------------------------------
      .               fn eq(&self, other: &Rhs) -> bool;
      .           
      .               /// This method tests for `!=`.
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn ne(&self, other: &Rhs) -> bool {
    925 ( 0.00%)          !self.eq(other)
      .               }
      .           }
      .           
      .           /// Derive macro generating an impl of the trait `PartialEq`.
      .           #[rustc_builtin_macro]
      .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
      .           #[allow_internal_unstable(core_intrinsics, structural_match)]
      .           pub macro PartialEq($item:item) {
-- line 239 ----------------------------------------
-- line 328 ----------------------------------------
      .           /// assert_eq!(Ordering::Less, result);
      .           ///
      .           /// let result = 1.cmp(&1);
      .           /// assert_eq!(Ordering::Equal, result);
      .           ///
      .           /// let result = 2.cmp(&1);
      .           /// assert_eq!(Ordering::Greater, result);
      .           /// ```
      4 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Debug, Hash)]
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           #[repr(i8)]
      .           pub enum Ordering {
      .               /// An ordering where a compared value is less than another.
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               Less = -1,
      .               /// An ordering where a compared value is equal to another.
      .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 344 ----------------------------------------
-- line 569 ----------------------------------------
      .               /// let result = x.0.cmp(&y.0).then_with(|| x.1.cmp(&y.1)).then_with(|| x.2.cmp(&y.2));
      .               ///
      .               /// assert_eq!(result, Ordering::Less);
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "ordering_chaining", since = "1.17.0")]
      .               pub fn then_with<F: FnOnce() -> Ordering>(self, f: F) -> Ordering {
      7 ( 0.00%)          match self {
      .                       Equal => f(),
      .                       _ => self,
      .                   }
      .               }
      .           }
      .           
      .           /// A helper struct for reverse ordering.
      .           ///
-- line 585 ----------------------------------------
-- line 792 ----------------------------------------
      .               /// ```
      .               #[stable(feature = "ord_max_min", since = "1.21.0")]
      .               #[inline]
      .               #[must_use]
      .               fn max(self, other: Self) -> Self
      .               where
      .                   Self: Sized,
      .               {
  2,132 ( 0.00%)          max_by(self, other, Ord::cmp)
      .               }
      .           
      .               /// Compares and returns the minimum of two values.
      .               ///
      .               /// Returns the first argument if the comparison determines them to be equal.
      .               ///
      .               /// # Examples
      .               ///
-- line 808 ----------------------------------------
-- line 812 ----------------------------------------
      .               /// ```
      .               #[stable(feature = "ord_max_min", since = "1.21.0")]
      .               #[inline]
      .               #[must_use]
      .               fn min(self, other: Self) -> Self
      .               where
      .                   Self: Sized,
      .               {
     56 ( 0.00%)          min_by(self, other, Ord::cmp)
      .               }
      .           
      .               /// Restrict a value to a certain interval.
      .               ///
      .               /// Returns `max` if `self` is greater than `max`, and `min` if `self` is
      .               /// less than `min`. Otherwise this returns `self`.
      .               ///
      .               /// # Panics
-- line 828 ----------------------------------------
-- line 1097 ----------------------------------------
      .               /// let result = 2.0 < 1.0;
      .               /// assert_eq!(result, false);
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn lt(&self, other: &Rhs) -> bool {
  2,710 ( 0.00%)          matches!(self.partial_cmp(other), Some(Less))
      .               }
      .           
      .               /// This method tests less than or equal to (for `self` and `other`) and is used by the `<=`
      .               /// operator.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 1113 ----------------------------------------
-- line 1121 ----------------------------------------
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn le(&self, other: &Rhs) -> bool {
      .                   // Pattern `Some(Less | Eq)` optimizes worse than negating `None | Some(Greater)`.
      .                   // FIXME: The root cause was fixed upstream in LLVM with:
      .                   // https://github.com/llvm/llvm-project/commit/9bad7de9a3fb844f1ca2965f35d0c2a3d1e11775
      .                   // Revert this workaround once support for LLVM 12 gets dropped.
 14,847 ( 0.02%)          !matches!(self.partial_cmp(other), None | Some(Greater))
      .               }
      .           
      .               /// This method tests greater than (for `self` and `other`) and is used by the `>` operator.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let result = 1.0 > 2.0;
-- line 1137 ----------------------------------------
-- line 1140 ----------------------------------------
      .               /// let result = 2.0 > 2.0;
      .               /// assert_eq!(result, false);
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn gt(&self, other: &Rhs) -> bool {
 20,253 ( 0.02%)          matches!(self.partial_cmp(other), Some(Greater))
      .               }
      .           
      .               /// This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`
      .               /// operator.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 1156 ----------------------------------------
-- line 1160 ----------------------------------------
      .               /// let result = 2.0 >= 2.0;
      .               /// assert_eq!(result, true);
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn ge(&self, other: &Rhs) -> bool {
      2 ( 0.00%)          matches!(self.partial_cmp(other), Some(Greater | Equal))
      .               }
      .           }
      .           
      .           /// Derive macro generating an impl of the trait `PartialOrd`.
      .           #[rustc_builtin_macro]
      .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
      .           #[allow_internal_unstable(core_intrinsics)]
      .           pub macro PartialOrd($item:item) {
-- line 1176 ----------------------------------------
-- line 1210 ----------------------------------------
      .           ///
      .           /// assert_eq!(cmp::min_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 1);
      .           /// assert_eq!(cmp::min_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
      .           /// ```
      .           #[inline]
      .           #[must_use]
      .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
      .           pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
  5,452 ( 0.01%)      match compare(&v1, &v2) {
      .                   Ordering::Less | Ordering::Equal => v1,
      .                   Ordering::Greater => v2,
      .               }
      .           }
      .           
      .           /// Returns the element that gives the minimum value from the specified function.
      .           ///
      .           /// Returns the first argument if the comparison determines them to be equal.
-- line 1226 ----------------------------------------
-- line 1273 ----------------------------------------
      .           ///
      .           /// assert_eq!(cmp::max_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
      .           /// assert_eq!(cmp::max_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 2);
      .           /// ```
      .           #[inline]
      .           #[must_use]
      .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
      .           pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
 12,970 ( 0.01%)      match compare(&v1, &v2) {
      .                   Ordering::Less | Ordering::Equal => v2,
      .                   Ordering::Greater => v1,
      .               }
      .           }
      .           
      .           /// Returns the element that gives the maximum value from the specified function.
      .           ///
      .           /// Returns the second argument if the comparison determines them to be equal.
-- line 1289 ----------------------------------------
-- line 1308 ----------------------------------------
      .               use crate::cmp::Ordering::{self, Equal, Greater, Less};
      .               use crate::hint::unreachable_unchecked;
      .           
      .               macro_rules! partial_eq_impl {
      .                   ($($t:ty)*) => ($(
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl PartialEq for $t {
      .                           #[inline]
    341 ( 0.00%)                  fn eq(&self, other: &$t) -> bool { (*self) == (*other) }
      .                           #[inline]
    789 ( 0.00%)                  fn ne(&self, other: &$t) -> bool { (*self) != (*other) }
      .                       }
      .                   )*)
      .               }
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl PartialEq for () {
      .                   #[inline]
      .                   fn eq(&self, _other: &()) -> bool {
-- line 1326 ----------------------------------------
-- line 1392 ----------------------------------------
      .                   ($($t:ty)*) => ($(
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl PartialOrd for $t {
      .                           #[inline]
      .                           fn partial_cmp(&self, other: &$t) -> Option<Ordering> {
      .                               Some(self.cmp(other))
      .                           }
      .                           #[inline]
744,954 ( 0.82%)                  fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
      .                           #[inline]
    680 ( 0.00%)                  fn le(&self, other: &$t) -> bool { (*self) <= (*other) }
      .                           #[inline]
      .                           fn ge(&self, other: &$t) -> bool { (*self) >= (*other) }
      .                           #[inline]
      .                           fn gt(&self, other: &$t) -> bool { (*self) > (*other) }
      .                       }
      .           
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl Ord for $t {
      .                           #[inline]
      .                           fn cmp(&self, other: &$t) -> Ordering {
      .                               // The order here is important to generate more optimal assembly.
      .                               // See <https://github.com/rust-lang/rust/issues/63758> for more info.
 53,560 ( 0.06%)                      if *self < *other { Less }
      .                               else if *self == *other { Equal }
      .                               else { Greater }
      .                           }
      .                       }
      .                   )*)
      .               }
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 1423 ----------------------------------------
-- line 1430 ----------------------------------------
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl Ord for bool {
      .                   #[inline]
      .                   fn cmp(&self, other: &bool) -> Ordering {
      .                       // Casting to i8's and converting the difference to an Ordering generates
      .                       // more optimal assembly.
      .                       // See <https://github.com/rust-lang/rust/issues/66780> for more info.
  1,330 ( 0.00%)              match (*self as i8) - (*other as i8) {
      .                           -1 => Less,
      .                           0 => Equal,
      .                           1 => Greater,
      .                           // SAFETY: bool as i8 returns 0 or 1, so the difference can't be anything else
      .                           _ => unsafe { unreachable_unchecked() },
      .                       }
      .                   }
      .               }
-- line 1446 ----------------------------------------
-- line 1475 ----------------------------------------
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized, B: ?Sized> PartialEq<&B> for &A
      .               where
      .                   A: PartialEq<B>,
      .               {
      .                   #[inline]
      .                   fn eq(&self, other: &&B) -> bool {
 11,589 ( 0.01%)              PartialEq::eq(*self, *other)
    939 ( 0.00%)          }
      .                   #[inline]
      5 ( 0.00%)          fn ne(&self, other: &&B) -> bool {
     87 ( 0.00%)              PartialEq::ne(*self, *other)
    244 ( 0.00%)          }
      .               }
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized, B: ?Sized> PartialOrd<&B> for &A
      .               where
      .                   A: PartialOrd<B>,
      .               {
      .                   #[inline]
      .                   fn partial_cmp(&self, other: &&B) -> Option<Ordering> {
-- line 1496 ----------------------------------------
-- line 1516 ----------------------------------------
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized> Ord for &A
      .               where
      .                   A: Ord,
      .               {
      .                   #[inline]
      .                   fn cmp(&self, other: &Self) -> Ordering {
      .                       Ord::cmp(*self, *other)
     80 ( 0.00%)          }
      .               }
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized> Eq for &A where A: Eq {}
      .           
      .               // &mut pointers
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized, B: ?Sized> PartialEq<&mut B> for &mut A
-- line 1532 ----------------------------------------

 53,604 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 70 ----------------------------------------
        .           
        .                   impl<'a, T> $name<'a, T> {
        .                       // Helper function for creating a slice from the iterator.
        .                       #[inline(always)]
        .                       fn make_slice(&self) -> &'a [T] {
        .                           // SAFETY: the iterator was created from a slice with pointer
        .                           // `self.ptr` and length `len!(self)`. This guarantees that all
        .                           // the prerequisites for `from_raw_parts` are fulfilled.
    3,489 ( 0.00%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
        .                       }
        .           
        .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
        .                       // returning the old start.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
        .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               let old = self.ptr.as_ptr();
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
   10,053 ( 0.01%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
        .                               old
        .                           }
        .                       }
        .           
        .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
        .                       // returning the new end.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
-- line 101 ----------------------------------------
-- line 102 ----------------------------------------
        .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
        .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
       29 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
        .                               self.end
        .                           }
        .                       }
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<T> ExactSizeIterator for $name<'_, T> {
        .                       #[inline(always)]
        .                       fn len(&self) -> usize {
    2,475 ( 0.00%)                  len!(self)
        .                       }
        .           
        .                       #[inline(always)]
        .                       fn is_empty(&self) -> bool {
        .                           is_empty!(self)
        .                       }
        .                   }
        .           
-- line 128 ----------------------------------------
-- line 134 ----------------------------------------
        .                       fn next(&mut self) -> Option<$elem> {
        .                           // could be implemented with slices, but this avoids bounds checks
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer
        .                           // must be non-null, and slices over non-ZSTs must also have a
        .                           // non-null end pointer. The call to `next_unchecked!` is safe
        .                           // since we check if the iterator is empty first.
        .                           unsafe {
    2,520 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
    2,175 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
3,088,610 ( 3.41%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
        1 ( 0.00%)                          Some(next_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
        .                       fn size_hint(&self) -> (usize, Option<usize>) {
   17,070 ( 0.02%)                  let exact = len!(self);
        .                           (exact, Some(exact))
        .                       }
        .           
        .                       #[inline]
        .                       fn count(self) -> usize {
        .                           len!(self)
        .                       }
        .           
        .                       #[inline]
        .                       fn nth(&mut self, n: usize) -> Option<$elem> {
      144 ( 0.00%)                  if n >= len!(self) {
        .                               // This iterator is now empty.
        .                               if mem::size_of::<T>() == 0 {
        .                                   // We have to do it this way as `ptr` may never be 0, but `end`
        .                                   // could be (due to wrapping).
        .                                   self.end = self.ptr.as_ptr();
        .                               } else {
        .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
        .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
        .                       // faster to compile.
        .                       #[inline]
        .                       fn for_each<F>(mut self, mut f: F)
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item),
        .                       {
        .                           while let Some(x) = self.next() {
       58 ( 0.00%)                      f(x);
        .                           }
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn all<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
        8 ( 0.00%)                  while let Some(x) = self.next() {
    3,748 ( 0.00%)                      if !f(x) {
        .                                   return false;
        .                               }
        .                           }
        .                           true
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn any<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
    9,144 ( 0.01%)                  while let Some(x) = self.next() {
   12,772 ( 0.01%)                      if f(x) {
        .                                   return true;
        .                               }
        .                           }
        .                           false
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
        .                       where
        .                           Self: Sized,
        .                           P: FnMut(&Self::Item) -> bool,
        .                       {
      276 ( 0.00%)                  while let Some(x) = self.next() {
    8,549 ( 0.01%)                      if predicate(&x) {
        .                                   return Some(x);
        .                               }
        .                           }
        .                           None
    3,040 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> Option<B>,
        .                       {
      372 ( 0.00%)                  while let Some(x) = self.next() {
    1,700 ( 0.00%)                      if let Some(y) = f(x) {
      185 ( 0.00%)                          return Some(y);
        .                               }
        .                           }
        .                           None
       40 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       #[rustc_inherit_overflow_checks]
        .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           Self: Sized,
        .                           P: FnMut(Self::Item) -> bool,
        .                       {
        .                           let n = len!(self);
        .                           let mut i = 0;
        .                           while let Some(x) = self.next() {
    3,033 ( 0.00%)                      if predicate(x) {
        .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
        .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                               i += 1;
        .                           }
        .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           P: FnMut(Self::Item) -> bool,
        .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
        .                       {
        .                           let n = len!(self);
        .                           let mut i = n;
      460 ( 0.00%)                  while let Some(x) = self.next_back() {
    8,694 ( 0.01%)                      i -= 1;
    8,160 ( 0.01%)                      if predicate(x) {
        .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
        .                                   // and is only decreasing.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                           }
        .                           None
        .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
        .                           // the returned references is guaranteed to refer to an element
        .                           // of the slice and thus guaranteed to be valid.
        .                           //
        .                           // Also note that the caller also guarantees that we're never
        .                           // called with the same index again, and that no other methods
        .                           // that will access this subslice are called, so it is valid
        .                           // for the returned reference to be mutable in the case of
        .                           // `IterMut`
      473 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
        .                       }
        .           
        .                       $($extra)*
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
        .                       #[inline]
-- line 348 ----------------------------------------
-- line 351 ----------------------------------------
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
        .                           // and slices over non-ZSTs must also have a non-null end pointer.
        .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
        .                           // empty first.
        .                           unsafe {
        .                               assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
       30 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
   16,999 ( 0.02%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
        .                                   Some(next_back_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
-- line 369 ----------------------------------------

  116,793 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir              

-- line 5 ----------------------------------------
     .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
     .           unsafe impl GlobalAlloc for System {
     .               #[inline]
     .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
     .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
     .                   // So only rely on MIN_ALIGN if size >= align.
     .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
     .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
88,172 ( 0.10%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
66,129 ( 0.07%)              libc::malloc(layout.size()) as *mut u8
     .                   } else {
     .                       #[cfg(target_os = "macos")]
     .                       {
     .                           if layout.align() > (1 << 31) {
     .                               return ptr::null_mut();
     .                           }
     .                       }
     .                       aligned_malloc(&layout)
     .                   }
     .               }
     .           
     .               #[inline]
     .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
     .                   // See the comment above in `alloc` for why this check looks the way it does.
   804 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
 1,206 ( 0.00%)              libc::calloc(layout.size(), 1) as *mut u8
     .                   } else {
     .                       let ptr = self.alloc(layout);
     .                       if !ptr.is_null() {
     .                           ptr::write_bytes(ptr, 0, layout.size());
     .                       }
     .                       ptr
     .                   }
     .               }
     .           
     .               #[inline]
     .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
22,233 ( 0.02%)          libc::free(ptr as *mut libc::c_void)
     .               }
     .           
     .               #[inline]
     .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
 5,980 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
11,960 ( 0.01%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
     .                   } else {
     .                       realloc_fallback(self, ptr, layout, new_size)
     .                   }
     .               }
     .           }
     .           
     .           cfg_if::cfg_if! {
     .               if #[cfg(any(
-- line 56 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core/raw.rs
--------------------------------------------------------------------------------
Ir              

-- line 30 ----------------------------------------
     .                               bucket.write(i - offset);
     .                           } else if i >= start {
     .                               self.indices.erase(bucket);
     .                           }
     .                       }
     .                   }
     .               }
     .           
51,714 ( 0.06%)      pub(crate) fn entry(&mut self, hash: HashValue, key: K) -> Entry<'_, K, V>
     .               where
     .                   K: Eq,
     .               {
     .                   let eq = equivalent(&key, &self.entries);
   575 ( 0.00%)          match self.indices.find(hash.get(), eq) {
     .                       // SAFETY: The entry is created with a live raw bucket, at the same time
     .                       // we have a &mut reference to the map, so it can not be modified further.
 3,623 ( 0.00%)              Some(raw_bucket) => Entry::Occupied(OccupiedEntry {
     .                           map: self,
     .                           raw_bucket,
 1,986 ( 0.00%)                  key,
     .                       }),
14,248 ( 0.02%)              None => Entry::Vacant(VacantEntry {
     .                           map: self,
     .                           hash,
 4,110 ( 0.00%)                  key,
     .                       }),
     .                   }
37,980 ( 0.04%)      }
     .           
     .               pub(super) fn indices_mut(&mut self) -> impl Iterator<Item = &mut usize> {
     .                   // SAFETY: we're not letting any of the buckets escape this function,
     .                   // only the item references that are appropriately bound to `&mut self`.
     .                   unsafe { self.indices.iter().map(|bucket| bucket.as_mut()) }
     .               }
     .           
     .               /// Return the raw bucket for the given index
-- line 65 ----------------------------------------
-- line 139 ----------------------------------------
     .               pub fn index(&self) -> usize {
     .                   // SAFETY: we have &mut map keep keeping the bucket stable
     .                   unsafe { self.raw_bucket.read() }
     .               }
     .           
     .               /// Converts into a mutable reference to the entry's value in the map,
     .               /// with a lifetime bound to the map itself.
     .               pub fn into_mut(self) -> &'a mut V {
   816 ( 0.00%)          let index = self.index();
 2,448 ( 0.00%)          &mut self.map.entries[index].value
     .               }
     .           
     .               /// Remove and return the key, value pair stored in the map for this entry
     .               ///
     .               /// Like `Vec::swap_remove`, the pair is removed by swapping it with the
     .               /// last element of the map and popping it off. **This perturbs
     .               /// the position of what used to be the last element!**
     .               ///
-- line 156 ----------------------------------------

33,905 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core/raw.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs
--------------------------------------------------------------------------------
Ir               

-- line 176 ----------------------------------------
      .               }
      .               fn sess(self) -> Option<&'tcx Session> {
      .                   None
      .               }
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   None
      .               }
      .           
    609 ( 0.00%)      fn decoder(self, pos: usize) -> DecodeContext<'a, 'tcx> {
    203 ( 0.00%)          let tcx = self.tcx();
 66,137 ( 0.07%)          DecodeContext {
  7,104 ( 0.01%)              opaque: opaque::Decoder::new(self.blob(), pos),
    203 ( 0.00%)              cdata: self.cdata(),
      .                       blob: self.blob(),
    666 ( 0.00%)              sess: self.sess().or(tcx.map(|tcx| tcx.sess)),
      .                       tcx,
      .                       last_source_file_index: 0,
      .                       lazy_state: LazyState::NoNode,
      .                       alloc_decoding_session: self
      .                           .cdata()
  5,802 ( 0.01%)                  .map(|cdata| cdata.cdata.alloc_decoding_state.new_decoding_session()),
      .                   }
    609 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Metadata<'a, 'tcx> for &'a MetadataBlob {
      .               #[inline]
      .               fn blob(self) -> &'a MetadataBlob {
      .                   self
      .               }
      .           }
-- line 206 ----------------------------------------
-- line 255 ----------------------------------------
      .               }
      .               #[inline]
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   Some(self.1)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<T> {
  2,837 ( 0.00%)      fn decode<M: Metadata<'a, 'tcx>>(self, metadata: M) -> T {
  1,838 ( 0.00%)          let mut dcx = metadata.decoder(self.position.get());
 19,168 ( 0.02%)          dcx.lazy_state = LazyState::NodeStart(self.position);
  8,609 ( 0.01%)          T::decode(&mut dcx)
  3,698 ( 0.00%)      }
      .           }
      .           
      .           impl<'a: 'x, 'tcx: 'x, 'x, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<[T]> {
      .               fn decode<M: Metadata<'a, 'tcx>>(
      .                   self,
      .                   metadata: M,
      .               ) -> impl ExactSizeIterator<Item = T> + Captures<'a> + Captures<'tcx> + 'x {
      .                   let mut dcx = metadata.decoder(self.position.get());
      .                   dcx.lazy_state = LazyState::NodeStart(self.position);
  8,184 ( 0.01%)          (0..self.meta).map(move |_| T::decode(&mut dcx))
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> DecodeContext<'a, 'tcx> {
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   debug_assert!(self.tcx.is_some(), "missing TyCtxt in DecodeContext");
      .                   self.tcx.unwrap()
-- line 285 ----------------------------------------
-- line 292 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn cdata(&self) -> CrateMetadataRef<'a> {
      .                   debug_assert!(self.cdata.is_some(), "missing CrateMetadata in DecodeContext");
      .                   self.cdata.unwrap()
      .               }
      .           
      .               fn map_encoded_cnum_to_current(&self, cnum: CrateNum) -> CrateNum {
 17,497 ( 0.02%)          if cnum == LOCAL_CRATE { self.cdata().cnum } else { self.cdata().cnum_map[cnum] }
      .               }
      .           
 24,547 ( 0.03%)      fn read_lazy_with_meta<T: ?Sized + LazyMeta>(&mut self, meta: T::Meta) -> Lazy<T> {
      .                   let distance = self.read_usize();
 23,887 ( 0.03%)          let position = match self.lazy_state {
      .                       LazyState::NoNode => bug!("read_lazy_with_meta: outside of a metadata node"),
  1,019 ( 0.00%)              LazyState::NodeStart(start) => {
      .                           let start = start.get();
  2,038 ( 0.00%)                  assert!(distance <= start);
      .                           start - distance
      .                       }
 12,498 ( 0.01%)              LazyState::Previous(last_pos) => last_pos.get() + distance,
      .                   };
 10,370 ( 0.01%)          self.lazy_state = LazyState::Previous(NonZeroUsize::new(position).unwrap());
      .                   Lazy::from_position_and_meta(NonZeroUsize::new(position).unwrap(), meta)
 24,547 ( 0.03%)      }
      .           
      .               #[inline]
      .               pub fn read_raw_bytes(&mut self, len: usize) -> &'a [u8] {
      .                   self.opaque.read_raw_bytes(len)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> TyDecoder<'tcx> for DecodeContext<'a, 'tcx> {
-- line 324 ----------------------------------------
-- line 326 ----------------------------------------
      .           
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   self.tcx.expect("missing TyCtxt in DecodeContext")
      .               }
      .           
      .               #[inline]
      .               fn peek_byte(&self) -> u8 {
  3,740 ( 0.00%)          self.opaque.data[self.opaque.position()]
      .               }
      .           
      .               #[inline]
      .               fn position(&self) -> usize {
      .                   self.opaque.position()
      .               }
      .           
  3,010 ( 0.00%)      fn cached_ty_for_shorthand<F>(&mut self, shorthand: usize, or_insert_with: F) -> Ty<'tcx>
      .               where
      .                   F: FnOnce(&mut Self) -> Ty<'tcx>,
      .               {
    430 ( 0.00%)          let tcx = self.tcx();
      .           
    430 ( 0.00%)          let key = ty::CReaderCacheKey { cnum: Some(self.cdata().cnum), pos: shorthand };
      .           
    856 ( 0.00%)          if let Some(&ty) = tcx.ty_rcache.borrow().get(&key) {
      .                       return ty;
      .                   }
      .           
    216 ( 0.00%)          let ty = or_insert_with(self);
      .                   tcx.ty_rcache.borrow_mut().insert(key, ty);
      .                   ty
  3,870 ( 0.00%)      }
      .           
      .               fn with_position<F, R>(&mut self, pos: usize, f: F) -> R
      .               where
      .                   F: FnOnce(&mut Self) -> R,
      .               {
      .                   let new_opaque = opaque::Decoder::new(self.opaque.data, pos);
      .                   let old_opaque = mem::replace(&mut self.opaque, new_opaque);
      .                   let old_state = mem::replace(&mut self.lazy_state, LazyState::NoNode);
      .                   let r = f(self);
  1,215 ( 0.00%)          self.opaque = old_opaque;
    243 ( 0.00%)          self.lazy_state = old_state;
      .                   r
      .               }
      .           
      .               fn decode_alloc_id(&mut self) -> rustc_middle::mir::interpret::AllocId {
      .                   if let Some(alloc_decoding_session) = self.alloc_decoding_session {
      .                       alloc_decoding_session.decode_alloc_id(self)
      .                   } else {
      .                       bug!("Attempting to decode interpret::AllocId without CrateMetadata")
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for CrateNum {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> CrateNum {
  9,218 ( 0.01%)          let cnum = CrateNum::from_u32(d.read_u32());
      .                   d.map_encoded_cnum_to_current(cnum)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for DefIndex {
     72 ( 0.00%)      fn decode(d: &mut DecodeContext<'a, 'tcx>) -> DefIndex {
 24,069 ( 0.03%)          DefIndex::from_u32(d.read_u32())
    144 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnIndex {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> ExpnIndex {
      .                   ExpnIndex::from_u32(d.read_u32())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for SyntaxContext {
 27,644 ( 0.03%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> SyntaxContext {
  6,911 ( 0.01%)          let cdata = decoder.cdata();
  6,911 ( 0.01%)          let sess = decoder.sess.unwrap();
 13,822 ( 0.02%)          let cname = cdata.root.name;
      .                   rustc_span::hygiene::decode_syntax_context(decoder, &cdata.hygiene_context, |_, id| {
      .                       debug!("SpecializedDecoder<SyntaxContext>: decoding {}", id);
     36 ( 0.00%)              cdata
      .                           .root
      .                           .syntax_contexts
      .                           .get(cdata, id)
      .                           .unwrap_or_else(|| panic!("Missing SyntaxContext {:?} for crate {:?}", id, cname))
      .                           .decode((cdata, sess))
      .                   })
 34,555 ( 0.04%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnId {
  2,422 ( 0.00%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> ExpnId {
    346 ( 0.00%)          let local_cdata = decoder.cdata();
    346 ( 0.00%)          let sess = decoder.sess.unwrap();
      .           
      .                   let cnum = CrateNum::decode(decoder);
      .                   let index = u32::decode(decoder);
      .           
      .                   let expn_id = rustc_span::hygiene::decode_expn_id(cnum, index, |expn_id| {
      .                       let ExpnId { krate: cnum, local_id: index } = expn_id;
      .                       // Lookup local `ExpnData`s in our own crate data. Foreign `ExpnData`s
      .                       // are stored in the owning crate, to avoid duplication.
      .                       debug_assert_ne!(cnum, LOCAL_CRATE);
     48 ( 0.00%)              let crate_data = if cnum == local_cdata.cnum {
      .                           local_cdata
      .                       } else {
      .                           local_cdata.cstore.get_crate_data(cnum)
      .                       };
    240 ( 0.00%)              let expn_data = crate_data
      .                           .root
      .                           .expn_data
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
    240 ( 0.00%)              let expn_hash = crate_data
      .                           .root
      .                           .expn_hashes
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
    480 ( 0.00%)              (expn_data, expn_hash)
      .                   });
      .                   expn_id
  2,768 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Span {
 55,072 ( 0.06%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Span {
  6,884 ( 0.01%)          let ctxt = SyntaxContext::decode(decoder);
      .                   let tag = u8::decode(decoder);
      .           
 13,768 ( 0.02%)          if tag == TAG_PARTIAL_SPAN {
      .                       return DUMMY_SP.with_ctxt(ctxt);
      .                   }
      .           
      .                   debug_assert!(tag == TAG_VALID_SPAN_LOCAL || tag == TAG_VALID_SPAN_FOREIGN);
      .           
      .                   let lo = BytePos::decode(decoder);
      .                   let len = BytePos::decode(decoder);
      .                   let hi = lo + len;
      .           
 20,652 ( 0.02%)          let Some(sess) = decoder.sess else {
      .                       bug!("Cannot decode Span without Session.")
      .                   };
      .           
      .                   // There are two possibilities here:
      .                   // 1. This is a 'local span', which is located inside a `SourceFile`
      .                   // that came from this crate. In this case, we use the source map data
      .                   // encoded in this crate. This branch should be taken nearly all of the time.
      .                   // 2. This is a 'foreign span', which is located inside a `SourceFile`
-- line 476 ----------------------------------------
-- line 492 ----------------------------------------
      .                   // a transitive dependency.
      .                   //
      .                   // When we encode a foreign span, we adjust its 'lo' and 'high' values
      .                   // to be based on the *foreign* crate (e.g. crate C), not the crate
      .                   // we are writing metadata for (e.g. crate B). This allows us to
      .                   // treat the 'local' and 'foreign' cases almost identically during deserialization:
      .                   // we can call `imported_source_files` for the proper crate, and binary search
      .                   // through the returned slice using our span.
 15,858 ( 0.02%)          let imported_source_files = if tag == TAG_VALID_SPAN_LOCAL {
      .                       decoder.cdata().imported_source_files(sess)
      .                   } else {
      .                       // When we encode a proc-macro crate, all `Span`s should be encoded
      .                       // with `TAG_VALID_SPAN_LOCAL`
     47 ( 0.00%)              if decoder.cdata().root.is_proc_macro_crate() {
      .                           // Decode `CrateNum` as u32 - using `CrateNum::decode` will ICE
      .                           // since we don't have `cnum_map` populated.
      .                           let cnum = u32::decode(decoder);
      .                           panic!(
      .                               "Decoding of crate {:?} tried to access proc-macro dep {:?}",
      .                               decoder.cdata().root.name,
      .                               cnum
      .                           );
-- line 513 ----------------------------------------
-- line 518 ----------------------------------------
      .                           "SpecializedDecoder<Span>::specialized_decode: loading source files from cnum {:?}",
      .                           cnum
      .                       );
      .           
      .                       // Decoding 'foreign' spans should be rare enough that it's
      .                       // not worth it to maintain a per-CrateNum cache for `last_source_file_index`.
      .                       // We just set it to 0, to ensure that we don't try to access something out
      .                       // of bounds for our initial 'guess'
     94 ( 0.00%)              decoder.last_source_file_index = 0;
      .           
     47 ( 0.00%)              let foreign_data = decoder.cdata().cstore.get_crate_data(cnum);
      .                       foreign_data.imported_source_files(sess)
      .                   };
      .           
      .                   let source_file = {
      .                       // Optimize for the case that most spans within a translated item
      .                       // originate from the same source_file.
 20,652 ( 0.02%)              let last_source_file = &imported_source_files[decoder.last_source_file_index];
      .           
 27,173 ( 0.03%)              if lo >= last_source_file.original_start_pos && lo <= last_source_file.original_end_pos
      .                       {
      .                           last_source_file
      .                       } else {
      .                           let index = imported_source_files
      .                               .binary_search_by_key(&lo, |source_file| source_file.original_start_pos)
  4,180 ( 0.00%)                      .unwrap_or_else(|index| index - 1);
      .           
      .                           // Don't try to cache the index for foreign spans,
      .                           // as this would require a map from CrateNums to indices
  2,090 ( 0.00%)                  if tag == TAG_VALID_SPAN_LOCAL {
  2,056 ( 0.00%)                      decoder.last_source_file_index = index;
      .                           }
  4,180 ( 0.00%)                  &imported_source_files[index]
      .                       }
      .                   };
      .           
      .                   // Make sure our binary search above is correct.
      .                   debug_assert!(
      .                       lo >= source_file.original_start_pos && lo <= source_file.original_end_pos,
      .                       "Bad binary search: lo={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       lo,
-- line 558 ----------------------------------------
-- line 565 ----------------------------------------
      .                       hi >= source_file.original_start_pos && hi <= source_file.original_end_pos,
      .                       "Bad binary search: hi={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       hi,
      .                       source_file.original_start_pos,
      .                       source_file.original_end_pos
      .                   );
      .           
      .                   let lo =
 27,536 ( 0.03%)              (lo + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .                   let hi =
      .                       (hi + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .           
      .                   // Do not try to decode parent for foreign spans.
      .                   Span::new(lo, hi, ctxt, None)
 61,956 ( 0.07%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for &'tcx [thir::abstract_const::Node<'tcx>] {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
-- line 587 ----------------------------------------
-- line 590 ----------------------------------------
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<T>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
  1,511 ( 0.00%)          decoder.read_lazy_with_meta(())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<[T]>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
 12,298 ( 0.01%)          if len == 0 { Lazy::empty() } else { decoder.read_lazy_with_meta(len) }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, I: Idx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<Table<I, T>>
      .           where
      .               Option<T>: FixedSizeEncoding,
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
 14,872 ( 0.02%)          decoder.read_lazy_with_meta(len)
      .               }
      .           }
      .           
      .           implement_ty_decoder!(DecodeContext<'a, 'tcx>);
      .           
      .           impl<'tcx> MetadataBlob {
      .               crate fn new(metadata_ref: MetadataRef) -> MetadataBlob {
      .                   MetadataBlob(Lrc::new(metadata_ref))
-- line 626 ----------------------------------------
-- line 630 ----------------------------------------
      .                   self.blob().starts_with(METADATA_HEADER)
      .               }
      .           
      .               crate fn get_rustc_version(&self) -> String {
      .                   Lazy::<String>::from_position(NonZeroUsize::new(METADATA_HEADER.len() + 4).unwrap())
      .                       .decode(self)
      .               }
      .           
    264 ( 0.00%)      crate fn get_root(&self) -> CrateRoot<'tcx> {
     88 ( 0.00%)          let slice = &self.blob()[..];
      .                   let offset = METADATA_HEADER.len();
    440 ( 0.00%)          let pos = (((slice[offset + 0] as u32) << 24)
    176 ( 0.00%)              | ((slice[offset + 1] as u32) << 16)
    352 ( 0.00%)              | ((slice[offset + 2] as u32) << 8)
    264 ( 0.00%)              | ((slice[offset + 3] as u32) << 0)) as usize;
      .                   Lazy::<CrateRoot<'tcx>>::from_position(NonZeroUsize::new(pos).unwrap()).decode(self)
    440 ( 0.00%)      }
      .           
      .               crate fn list_crate_metadata(&self, out: &mut dyn io::Write) -> io::Result<()> {
      .                   let root = self.get_root();
      .                   writeln!(out, "Crate info:")?;
      .                   writeln!(out, "name {}{}", root.name, root.extra_filename)?;
      .                   writeln!(out, "hash {} stable_crate_id {:?}", root.hash, root.stable_crate_id)?;
      .                   writeln!(out, "proc_macro {:?}", root.proc_macro_data.is_some())?;
      .                   writeln!(out, "=External Dependencies=")?;
-- line 654 ----------------------------------------
-- line 666 ----------------------------------------
      .                   }
      .                   write!(out, "\n")?;
      .                   Ok(())
      .               }
      .           }
      .           
      .           impl CrateRoot<'_> {
      .               crate fn is_proc_macro_crate(&self) -> bool {
     58 ( 0.00%)          self.proc_macro_data.is_some()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
      4 ( 0.00%)          self.name
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
     29 ( 0.00%)          self.hash
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
     58 ( 0.00%)          self.stable_crate_id
      .               }
      .           
      .               crate fn triple(&self) -> &TargetTriple {
      .                   &self.triple
      .               }
      .           
      .               crate fn decode_crate_deps<'a>(
      .                   &self,
      .                   metadata: &'a MetadataBlob,
      .               ) -> impl ExactSizeIterator<Item = CrateDep> + Captures<'a> {
     58 ( 0.00%)          self.crate_deps.decode(metadata)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> CrateMetadataRef<'a> {
      .               fn raw_proc_macro(self, id: DefIndex) -> &'a ProcMacro {
      .                   // DefIndex's in root.proc_macro_data have a one-to-one correspondence
      .                   // with items in 'raw_proc_macros'.
      .                   let pos = self
-- line 705 ----------------------------------------
-- line 709 ----------------------------------------
      .                       .unwrap()
      .                       .macros
      .                       .decode(self)
      .                       .position(|i| i == id)
      .                       .unwrap();
      .                   &self.raw_proc_macros.unwrap()[pos]
      .               }
      .           
 10,945 ( 0.01%)      fn opt_item_ident(self, item_index: DefIndex, sess: &Session) -> Option<Ident> {
  8,070 ( 0.01%)          let name = self.def_key(item_index).disambiguated_data.data.get_opt_name()?;
  5,138 ( 0.01%)          let span = match self.root.tables.ident_span.get(self, item_index) {
      .                       Some(lazy_span) => lazy_span.decode((self, sess)),
      .                       None => {
      .                           // FIXME: this weird case of a name with no span is specific to `extern crate`
      .                           // items, which are supposed to be treated like `use` items and only be encoded
      .                           // to metadata as `Export`s, return `None` because that's what all the callers
      .                           // expect in this case.
    126 ( 0.00%)                  assert_eq!(self.def_kind(item_index), DefKind::ExternCrate);
      .                           return None;
      .                       }
      .                   };
      .                   Some(Ident::new(name, span))
 13,974 ( 0.02%)      }
      .           
     63 ( 0.00%)      fn item_ident(self, item_index: DefIndex, sess: &Session) -> Ident {
  1,486 ( 0.00%)          self.opt_item_ident(item_index, sess).expect("no encoded ident for item")
    126 ( 0.00%)      }
      .           
      .               fn maybe_kind(self, item_id: DefIndex) -> Option<EntryKind> {
  1,780 ( 0.00%)          self.root.tables.kind.get(self, item_id).map(|k| k.decode(self))
      .               }
      .           
  7,120 ( 0.01%)      fn kind(self, item_id: DefIndex) -> EntryKind {
      .                   self.maybe_kind(item_id).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
  5,340 ( 0.01%)      }
      .           
  5,257 ( 0.01%)      fn def_kind(self, item_id: DefIndex) -> DefKind {
  3,399 ( 0.00%)          self.root.tables.def_kind.get(self, item_id).map(|k| k.decode(self)).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::def_kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
  3,004 ( 0.00%)      }
      .           
    567 ( 0.00%)      fn get_span(self, index: DefIndex, sess: &Session) -> Span {
  2,293 ( 0.00%)          self.root
      .                       .tables
      .                       .span
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing span for {:?}", index))
      .                       .decode((self, sess))
    315 ( 0.00%)      }
      .           
      .               fn load_proc_macro(self, id: DefIndex, sess: &Session) -> SyntaxExtension {
      .                   let (name, kind, helper_attrs) = match *self.raw_proc_macro(id) {
      .                       ProcMacro::CustomDerive { trait_name, attributes, client } => {
      .                           let helper_attrs =
      .                               attributes.iter().cloned().map(Symbol::intern).collect::<Vec<_>>();
      .                           (
      .                               trait_name,
-- line 778 ----------------------------------------
-- line 795 ----------------------------------------
      .                       self.get_span(id, sess),
      .                       helper_attrs,
      .                       self.root.edition,
      .                       Symbol::intern(name),
      .                       &attrs,
      .                   )
      .               }
      .           
    117 ( 0.00%)      fn get_trait_def(self, item_id: DefIndex, sess: &Session) -> ty::TraitDef {
     36 ( 0.00%)          match self.kind(item_id) {
      9 ( 0.00%)              EntryKind::Trait(data) => {
     54 ( 0.00%)                  let data = data.decode((self, sess));
    144 ( 0.00%)                  ty::TraitDef::new(
      .                               self.local_def_id(item_id),
     18 ( 0.00%)                      data.unsafety,
     18 ( 0.00%)                      data.paren_sugar,
     18 ( 0.00%)                      data.has_auto_impl,
     18 ( 0.00%)                      data.is_marker,
      9 ( 0.00%)                      data.skip_array_during_method_dispatch,
      9 ( 0.00%)                      data.specialization_kind,
     36 ( 0.00%)                      self.def_path_hash(item_id),
      9 ( 0.00%)                      data.must_implement_one_of,
      .                           )
      .                       }
      .                       EntryKind::TraitAlias => ty::TraitDef::new(
      .                           self.local_def_id(item_id),
      .                           hir::Unsafety::Normal,
      .                           false,
      .                           false,
      .                           false,
      .                           false,
      .                           ty::trait_def::TraitSpecializationKind::None,
      .                           self.def_path_hash(item_id),
      .                           None,
      .                       ),
      .                       _ => bug!("def-index does not refer to trait or trait alias"),
      .                   }
     81 ( 0.00%)      }
      .           
  1,638 ( 0.00%)      fn get_variant(
      .                   self,
      .                   kind: &EntryKind,
      .                   index: DefIndex,
      .                   parent_did: DefId,
      .                   sess: &Session,
      .               ) -> ty::VariantDef {
    728 ( 0.00%)          let data = match kind {
      .                       EntryKind::Variant(data) | EntryKind::Struct(data, _) | EntryKind::Union(data, _) => {
    910 ( 0.00%)                  data.decode(self)
      .                       }
      .                       _ => bug!(),
      .                   };
      .           
    384 ( 0.00%)          let adt_kind = match kind {
      .                       EntryKind::Variant(_) => ty::AdtKind::Enum,
      .                       EntryKind::Struct(..) => ty::AdtKind::Struct,
      .                       EntryKind::Union(..) => ty::AdtKind::Union,
      .                       _ => bug!(),
      .                   };
      .           
      .                   let variant_did =
      .                       if adt_kind == ty::AdtKind::Enum { Some(self.local_def_id(index)) } else { None };
    364 ( 0.00%)          let ctor_did = data.ctor.map(|index| self.local_def_id(index));
      .           
  4,004 ( 0.00%)          ty::VariantDef::new(
      .                       self.item_ident(index, sess).name,
      .                       variant_did,
      .                       ctor_did,
    728 ( 0.00%)              data.discr,
  1,092 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, index)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
      .                           .map(|index| ty::FieldDef {
     39 ( 0.00%)                      did: self.local_def_id(index),
     78 ( 0.00%)                      name: self.item_ident(index, sess).name,
     78 ( 0.00%)                      vis: self.get_visibility(index),
      .                           })
      .                           .collect(),
      .                       data.ctor_kind,
      .                       adt_kind,
      .                       parent_did,
      .                       false,
    182 ( 0.00%)              data.is_non_exhaustive,
      .                   )
  1,638 ( 0.00%)      }
      .           
    420 ( 0.00%)      fn get_adt_def(self, item_id: DefIndex, tcx: TyCtxt<'tcx>) -> &'tcx ty::AdtDef {
    112 ( 0.00%)          let kind = self.kind(item_id);
     56 ( 0.00%)          let did = self.local_def_id(item_id);
      .           
    104 ( 0.00%)          let (adt_kind, repr) = match kind {
      .                       EntryKind::Enum(repr) => (ty::AdtKind::Enum, repr),
      .                       EntryKind::Struct(_, repr) => (ty::AdtKind::Struct, repr),
      .                       EntryKind::Union(_, repr) => (ty::AdtKind::Union, repr),
      .                       _ => bug!("get_adt_def called on a non-ADT {:?}", did),
      .                   };
      .           
      .                   let variants = if let ty::AdtKind::Enum = adt_kind {
     90 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, item_id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
  2,924 ( 0.00%)                  .map(|index| self.get_variant(&self.kind(index), index, did, tcx.sess))
      .                           .collect()
      .                   } else {
     80 ( 0.00%)              std::iter::once(self.get_variant(&kind, item_id, did, tcx.sess)).collect()
      .                   };
      .           
    482 ( 0.00%)          tcx.alloc_adt_def(did, adt_kind, variants, repr)
    196 ( 0.00%)      }
      .           
      .               fn get_explicit_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
    340 ( 0.00%)          self.root.tables.explicit_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_inferred_outlives(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
    340 ( 0.00%)          self.root
      .                       .tables
      .                       .inferred_outlives
      .                       .get(self, item_id)
      .                       .map(|predicates| tcx.arena.alloc_from_iter(predicates.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_super_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
     25 ( 0.00%)          self.root.tables.super_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_explicit_item_bounds(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
      .                   self.root
-- line 945 ----------------------------------------
-- line 946 ----------------------------------------
      .                       .tables
      .                       .explicit_item_bounds
      .                       .get(self, item_id)
      .                       .map(|bounds| tcx.arena.alloc_from_iter(bounds.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_generics(self, item_id: DefIndex, sess: &Session) -> ty::Generics {
    340 ( 0.00%)          self.root.tables.generics.get(self, item_id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_type(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
    515 ( 0.00%)          self.root
      .                       .tables
      .                       .ty
      .                       .get(self, id)
      .                       .unwrap_or_else(|| panic!("Not a type: {:?}", id))
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_stability(self, id: DefIndex) -> Option<attr::Stability> {
    145 ( 0.00%)          self.root.tables.stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_const_stability(self, id: DefIndex) -> Option<attr::ConstStability> {
      .                   self.root.tables.const_stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_deprecation(self, id: DefIndex) -> Option<attr::Deprecation> {
    170 ( 0.00%)          self.root.tables.deprecation.get(self, id).map(|depr| depr.decode(self))
      .               }
      .           
     54 ( 0.00%)      fn get_visibility(self, id: DefIndex) -> ty::Visibility {
  1,499 ( 0.00%)          self.root.tables.visibility.get(self, id).unwrap().decode(self)
     36 ( 0.00%)      }
      .           
      .               fn get_impl_data(self, id: DefIndex) -> ImplData {
    798 ( 0.00%)          match self.kind(id) {
    665 ( 0.00%)              EntryKind::Impl(data) => data.decode(self),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_parent_impl(self, id: DefIndex) -> Option<DefId> {
    345 ( 0.00%)          self.get_impl_data(id).parent_impl
      .               }
      .           
      .               fn get_impl_polarity(self, id: DefIndex) -> ty::ImplPolarity {
     14 ( 0.00%)          self.get_impl_data(id).polarity
      .               }
      .           
      .               fn get_impl_defaultness(self, id: DefIndex) -> hir::Defaultness {
      1 ( 0.00%)          self.get_impl_data(id).defaultness
      .               }
      .           
      .               fn get_impl_constness(self, id: DefIndex) -> hir::Constness {
      3 ( 0.00%)          self.get_impl_data(id).constness
      .               }
      .           
      .               fn get_trait_item_def_id(self, id: DefIndex) -> Option<DefId> {
    390 ( 0.00%)          self.root.tables.trait_item_def_id.get(self, id).map(|d| d.decode(self))
      .               }
      .           
      .               fn get_coerce_unsized_info(self, id: DefIndex) -> Option<ty::adjustment::CoerceUnsizedInfo> {
      .                   self.get_impl_data(id).coerce_unsized_info
      .               }
      .           
      .               fn get_impl_trait(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Option<ty::TraitRef<'tcx>> {
  1,565 ( 0.00%)          self.root.tables.impl_trait_ref.get(self, id).map(|tr| tr.decode((self, tcx)))
      .               }
      .           
      .               fn get_expn_that_defined(self, id: DefIndex, sess: &Session) -> ExpnId {
  1,445 ( 0.00%)          self.root.tables.expn_that_defined.get(self, id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_const_param_default(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> rustc_middle::ty::Const<'tcx> {
      .                   self.root.tables.const_defaults.get(self, id).unwrap().decode((self, tcx))
-- line 1026 ----------------------------------------
-- line 1028 ----------------------------------------
      .           
      .               /// Iterates over all the stability attributes in the given crate.
      .               fn get_lib_features(self, tcx: TyCtxt<'tcx>) -> &'tcx [(Symbol, Option<Symbol>)] {
      .                   tcx.arena.alloc_from_iter(self.root.lib_features.decode(self))
      .               }
      .           
      .               /// Iterates over the language items in the given crate.
      .               fn get_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [(DefId, usize)] {
     87 ( 0.00%)          tcx.arena.alloc_from_iter(
     58 ( 0.00%)              self.root
      .                           .lang_items
      .                           .decode(self)
    564 ( 0.00%)                  .map(|(def_index, index)| (self.local_def_id(def_index), index)),
      .                   )
      .               }
      .           
      .               /// Iterates over the diagnostic items in the given crate.
      .               fn get_diagnostic_items(self) -> DiagnosticItems {
      .                   let mut id_to_name = FxHashMap::default();
      8 ( 0.00%)          let name_to_id = self
      .                       .root
      .                       .diagnostic_items
      .                       .decode(self)
      .                       .map(|(name, def_index)| {
     91 ( 0.00%)                  let id = self.local_def_id(def_index);
     91 ( 0.00%)                  id_to_name.insert(id, name);
      .                           (name, id)
      .                       })
      .                       .collect();
     36 ( 0.00%)          DiagnosticItems { id_to_name, name_to_id }
      .               }
      .           
      .               /// Iterates over all named children of the given module,
      .               /// including both proper items and reexports.
      .               /// Module here is understood in name resolution sense - it can be a `mod` item,
      .               /// or a crate root, or an enum, or a trait.
      .               fn for_each_module_child(
      .                   self,
      .                   id: DefIndex,
      .                   mut callback: impl FnMut(ModChild),
      .                   sess: &Session,
      .               ) {
    152 ( 0.00%)          if let Some(data) = &self.root.proc_macro_data {
      .                       // If we are loading as a proc macro, we want to return
      .                       // the view of this crate as a proc macro crate.
      .                       if id == CRATE_DEF_INDEX {
      .                           for def_index in data.macros.decode(self) {
      .                               let raw_macro = self.raw_proc_macro(def_index);
      .                               let res = Res::Def(
      .                                   DefKind::Macro(macro_kind(raw_macro)),
      .                                   self.local_def_id(def_index),
-- line 1078 ----------------------------------------
-- line 1085 ----------------------------------------
      .                                   span: ident.span,
      .                               });
      .                           }
      .                       }
      .                       return;
      .                   }
      .           
      .                   // Iterate over all children.
    304 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
    608 ( 0.00%)              for child_index in children.decode((self, sess)) {
  3,834 ( 0.00%)                  if let Some(ident) = self.opt_item_ident(child_index, sess) {
  1,059 ( 0.00%)                      let kind = self.def_kind(child_index);
    706 ( 0.00%)                      if matches!(kind, DefKind::Macro(..)) {
      .                                   // FIXME: Macros are currently encoded twice, once as items and once as
      .                                   // reexports. We ignore the items here and only use the reexports.
      .                                   continue;
      .                               }
      .                               let def_id = self.local_def_id(child_index);
      .                               let res = Res::Def(kind, def_id);
      .                               let vis = self.get_visibility(child_index);
      .                               let span = self.get_span(child_index, sess);
      .           
      .                               callback(ModChild { ident, res, vis, span });
      .           
      .                               // For non-re-export structs and variants add their constructors to children.
      .                               // Re-export lists automatically contain constructors when necessary.
  1,404 ( 0.00%)                      match kind {
      .                                   DefKind::Struct => {
     10 ( 0.00%)                              if let Some((ctor_def_id, ctor_kind)) =
      .                                           self.get_ctor_def_id_and_kind(child_index)
      .                                       {
      .                                           let ctor_res =
      .                                               Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);
      .                                           let vis = self.get_visibility(ctor_def_id.index);
      .                                           callback(ModChild { ident, res: ctor_res, vis, span });
      .                                       }
      .                                   }
      .                                   DefKind::Variant => {
      .                                       // Braced variants, unlike structs, generate unusable names in
      .                                       // value namespace, they are reserved for possible future use.
      .                                       // It's ok to use the variant's id as a ctor id since an
      .                                       // error will be reported on any use of such resolution anyway.
      6 ( 0.00%)                              let (ctor_def_id, ctor_kind) = self
      .                                           .get_ctor_def_id_and_kind(child_index)
      .                                           .unwrap_or((def_id, CtorKind::Fictive));
      .                                       let ctor_res =
      .                                           Res::Def(DefKind::Ctor(CtorOf::Variant, ctor_kind), ctor_def_id);
      .                                       let mut vis = self.get_visibility(ctor_def_id.index);
      2 ( 0.00%)                              if ctor_def_id == def_id && vis.is_public() {
      .                                           // For non-exhaustive variants lower the constructor visibility to
      .                                           // within the crate. We only need this for fictive constructors,
      .                                           // for other constructors correct visibilities
      .                                           // were already encoded in metadata.
      .                                           let mut attrs = self.get_item_attrs(def_id.index, sess);
      .                                           if attrs.any(|item| item.has_name(sym::non_exhaustive)) {
      .                                               let crate_def_id = self.local_def_id(CRATE_DEF_INDEX);
      .                                               vis = ty::Visibility::Restricted(crate_def_id);
-- line 1141 ----------------------------------------
-- line 1144 ----------------------------------------
      .                                       callback(ModChild { ident, res: ctor_res, vis, span });
      .                                   }
      .                                   _ => {}
      .                               }
      .                           }
      .                       }
      .                   }
      .           
    394 ( 0.00%)          match self.kind(id) {
     20 ( 0.00%)              EntryKind::Mod(exports) => {
    652 ( 0.00%)                  for exp in exports.decode((self, sess)) {
      .                               callback(exp);
      .                           }
      .                       }
      .                       EntryKind::Enum(..) | EntryKind::Trait(..) => {}
      .                       _ => bug!("`for_each_module_child` is called on a non-module: {:?}", self.def_kind(id)),
      .                   }
      .               }
      .           
-- line 1162 ----------------------------------------
-- line 1164 ----------------------------------------
      .                   self.root.tables.mir_for_ctfe.get(self, id).is_some()
      .               }
      .           
      .               fn is_item_mir_available(self, id: DefIndex) -> bool {
      .                   self.root.tables.mir.get(self, id).is_some()
      .               }
      .           
      .               fn module_expansion(self, id: DefIndex, sess: &Session) -> ExpnId {
  1,981 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::Mod(_) | EntryKind::Enum(_) | EntryKind::Trait(_) => {
      .                           self.get_expn_that_defined(id, sess)
      .                       }
      .                       _ => panic!("Expected module, found {:?}", self.local_def_id(id)),
      .                   }
      .               }
      .           
      .               fn get_optimized_mir(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
-- line 1180 ----------------------------------------
-- line 1242 ----------------------------------------
      .                           qualif,
      .                           _,
      .                       ) => qualif,
      .                       _ => bug!("mir_const_qualif: unexpected kind"),
      .                   }
      .               }
      .           
      .               fn get_fn_has_self_parameter(self, id: DefIndex) -> bool {
    560 ( 0.00%)          match self.kind(id) {
    448 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).has_self,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn get_associated_item_def_ids(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [DefId] {
    112 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
     48 ( 0.00%)              tcx.arena.alloc_from_iter(
     16 ( 0.00%)                  children.decode((self, tcx.sess)).map(|child_index| self.local_def_id(child_index)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
      .               }
      .           
    828 ( 0.00%)      fn get_associated_item(self, id: DefIndex, sess: &Session) -> ty::AssocItem {
    483 ( 0.00%)          let def_key = self.def_key(id);
      .                   let parent = self.local_def_id(def_key.parent.unwrap());
      .                   let ident = self.item_ident(id, sess);
      .           
    497 ( 0.00%)          let (kind, container, has_self) = match self.kind(id) {
      .                       EntryKind::AssocConst(container, _, _) => (ty::AssocKind::Const, container, false),
     62 ( 0.00%)              EntryKind::AssocFn(data) => {
      .                           let data = data.decode(self);
    434 ( 0.00%)                  (ty::AssocKind::Fn, data.container, data.has_self)
      .                       }
     14 ( 0.00%)              EntryKind::AssocType(container) => (ty::AssocKind::Type, container, false),
      .                       _ => bug!("cannot get associated-item of `{:?}`", def_key),
      .                   };
      .           
  1,242 ( 0.00%)          ty::AssocItem {
      .                       name: ident.name,
      .                       kind,
      .                       vis: self.get_visibility(id),
      .                       defaultness: container.defaultness(),
      .                       def_id: self.local_def_id(id),
      .                       trait_item_def_id: self.get_trait_item_def_id(id),
      .                       container: container.with_def_id(parent),
      .                       fn_has_self_parameter: has_self,
      .                   }
    621 ( 0.00%)      }
      .           
      .               fn get_item_variances(self, id: DefIndex) -> impl Iterator<Item = ty::Variance> + 'a {
     35 ( 0.00%)          self.root.tables.variances.get(self, id).unwrap_or_else(Lazy::empty).decode(self)
      .               }
      .           
      .               fn get_ctor_def_id_and_kind(self, node_id: DefIndex) -> Option<(DefId, CtorKind)> {
    285 ( 0.00%)          match self.kind(node_id) {
      .                       EntryKind::Struct(data, _) | EntryKind::Variant(data) => {
    123 ( 0.00%)                  let vdata = data.decode(self);
     81 ( 0.00%)                  vdata.ctor.map(|index| (self.local_def_id(index), vdata.ctor_kind))
      .                       }
      .                       _ => None,
      .                   }
    137 ( 0.00%)      }
      .           
    492 ( 0.00%)      fn get_item_attrs(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = ast::Attribute> + 'a {
    447 ( 0.00%)          self.root
      .                       .tables
      .                       .attributes
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           // Structure and variant constructors don't have any attributes encoded for them,
      .                           // but we assume that someone passing a constructor ID actually wants to look at
      .                           // the attributes on the corresponding struct or variant.
      .                           let def_key = self.def_key(id);
-- line 1320 ----------------------------------------
-- line 1322 ----------------------------------------
      .                           let parent_id = def_key.parent.expect("no parent for a constructor");
      .                           self.root
      .                               .tables
      .                               .attributes
      .                               .get(self, parent_id)
      .                               .expect("no encoded attributes for a structure or variant")
      .                       })
      .                       .decode((self, sess))
    369 ( 0.00%)      }
      .           
      .               fn get_struct_field_names(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = Spanned<Symbol>> + 'a {
    125 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
    630 ( 0.00%)              .map(move |index| respan(self.get_span(index, sess), self.item_ident(index, sess).name))
      .               }
      .           
      .               fn get_struct_field_visibilities(self, id: DefIndex) -> impl Iterator<Item = Visibility> + 'a {
     30 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
     18 ( 0.00%)              .map(move |field_index| self.get_visibility(field_index))
      .               }
      .           
      .               fn get_inherent_implementations_for_type(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> &'tcx [DefId] {
     12 ( 0.00%)          tcx.arena.alloc_from_iter(
     15 ( 0.00%)              self.root
      .                           .tables
      .                           .inherent_impls
      .                           .get(self, id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
     73 ( 0.00%)                  .map(|index| self.local_def_id(index)),
      .                   )
      .               }
      .           
      .               fn get_traits(self) -> impl Iterator<Item = DefId> + 'a {
      .                   self.root.traits.decode(self).map(move |index| self.local_def_id(index))
      .               }
      .           
      .               fn get_trait_impls(self) -> impl Iterator<Item = (DefId, DefId, Option<SimplifiedType>)> + 'a {
-- line 1376 ----------------------------------------
-- line 1380 ----------------------------------------
      .                           index: *trait_index,
      .                       };
      .                       impls.decode(self).map(move |(impl_index, simplified_self_ty)| {
      .                           (trait_def_id, self.local_def_id(impl_index), simplified_self_ty)
      .                       })
      .                   })
      .               }
      .           
  2,871 ( 0.00%)      fn get_implementations_of_trait(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_def_id: DefId,
      .               ) -> &'tcx [(DefId, Option<SimplifiedType>)] {
    319 ( 0.00%)          if self.trait_impls.is_empty() {
      .                       return &[];
      .                   }
      .           
      .                   // Do a reverse lookup beforehand to avoid touching the crate_num
      .                   // hash map in the loop below.
    482 ( 0.00%)          let key = match self.reverse_translate_def_id(trait_def_id) {
      .                       Some(def_id) => (def_id.krate.as_u32(), def_id.index),
      .                       None => return &[],
      .                   };
      .           
      .                   if let Some(impls) = self.trait_impls.get(&key) {
    296 ( 0.00%)              tcx.arena.alloc_from_iter(
    148 ( 0.00%)                  impls
      .                               .decode(self)
  3,234 ( 0.00%)                      .map(|(idx, simplified_self_ty)| (self.local_def_id(idx), simplified_self_ty)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
  2,552 ( 0.00%)      }
      .           
      .               fn get_trait_of_item(self, id: DefIndex) -> Option<DefId> {
     24 ( 0.00%)          let def_key = self.def_key(id);
     30 ( 0.00%)          match def_key.disambiguated_data.data {
      .                       DefPathData::TypeNs(..) | DefPathData::ValueNs(..) => (),
      .                       // Not an associated item
      .                       _ => return None,
      .                   }
     54 ( 0.00%)          def_key.parent.and_then(|parent_index| match self.kind(parent_index) {
      .                       EntryKind::Trait(_) | EntryKind::TraitAlias => Some(self.local_def_id(parent_index)),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               fn get_native_libraries(self, sess: &'a Session) -> impl Iterator<Item = NativeLib> + 'a {
     58 ( 0.00%)          self.root.native_libraries.decode((self, sess))
      .               }
      .           
      .               fn get_proc_macro_quoted_span(self, index: usize, sess: &Session) -> Span {
      .                   self.root
      .                       .tables
      .                       .proc_macro_quoted_spans
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing proc macro quoted span: {:?}", index))
-- line 1437 ----------------------------------------
-- line 1450 ----------------------------------------
      .                       self.root.dylib_dependency_formats.decode(self).enumerate().flat_map(|(i, link)| {
      .                           let cnum = CrateNum::new(i + 1);
      .                           link.map(|link| (self.cnum_map[cnum], link))
      .                       }),
      .                   )
      .               }
      .           
      .               fn get_missing_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [lang_items::LangItem] {
    145 ( 0.00%)          tcx.arena.alloc_from_iter(self.root.lang_items_missing.decode(self))
      .               }
      .           
      .               fn get_fn_param_names(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [Ident] {
      .                   let param_names = match self.kind(id) {
      .                       EntryKind::Fn(data) | EntryKind::ForeignFn(data) => data.decode(self).param_names,
      .                       EntryKind::AssocFn(data) => data.decode(self).fn_data.param_names,
      .                       _ => Lazy::empty(),
      .                   };
-- line 1466 ----------------------------------------
-- line 1479 ----------------------------------------
      .                       EntryKind::AnonConst(_, data)
      .                       | EntryKind::Const(_, data)
      .                       | EntryKind::AssocConst(_, _, data) => data.decode(self).0,
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_macro(self, id: DefIndex, sess: &Session) -> MacroDef {
     18 ( 0.00%)          match self.kind(id) {
      3 ( 0.00%)              EntryKind::MacroDef(macro_def) => macro_def.decode((self, sess)),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               // This replicates some of the logic of the crate-local `is_const_fn_raw` query, because we
      .               // don't serialize constness for tuple variant and tuple struct constructors.
      .               fn is_const_fn_raw(self, id: DefIndex) -> bool {
      .                   let constness = match self.kind(id) {
-- line 1496 ----------------------------------------
-- line 1532 ----------------------------------------
      .               fn generator_kind(self, id: DefIndex) -> Option<hir::GeneratorKind> {
      .                   match self.kind(id) {
      .                       EntryKind::Generator(data) => Some(data),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               fn fn_sig(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {
    135 ( 0.00%)          self.root.tables.fn_sig.get(self, id).unwrap().decode((self, tcx))
      .               }
      .           
      .               #[inline]
 10,395 ( 0.01%)      fn def_key(self, index: DefIndex) -> DefKey {
  2,970 ( 0.00%)          *self
      .                       .def_key_cache
      .                       .lock()
      .                       .entry(index)
  5,455 ( 0.01%)              .or_insert_with(|| self.root.tables.def_keys.get(self, index).unwrap().decode(self))
 11,880 ( 0.01%)      }
      .           
      .               // Returns the path leading to the thing with this `id`.
      .               fn def_path(self, id: DefIndex) -> DefPath {
      .                   debug!("def_path(cnum={:?}, id={:?})", self.cnum, id);
      .                   DefPath::make(self.cnum, id, |parent| self.def_key(parent))
      .               }
      .           
      .               fn def_path_hash_unlocked(
      .                   self,
      .                   index: DefIndex,
      .                   def_path_hashes: &mut FxHashMap<DefIndex, DefPathHash>,
      .               ) -> DefPathHash {
    380 ( 0.00%)          *def_path_hashes.entry(index).or_insert_with(|| {
    255 ( 0.00%)              self.root.tables.def_path_hashes.get(self, index).unwrap().decode(self)
      .                   })
      .               }
      .           
      .               #[inline]
  1,330 ( 0.00%)      fn def_path_hash(self, index: DefIndex) -> DefPathHash {
      .                   let mut def_path_hashes = self.def_path_hash_cache.lock();
      .                   self.def_path_hash_unlocked(index, &mut def_path_hashes)
  1,520 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn def_path_hash_to_def_index(self, hash: DefPathHash) -> DefIndex {
      .                   self.def_path_hash_map.def_path_hash_to_def_index(&hash)
      .               }
      .           
      .               fn expn_hash_to_expn_id(self, sess: &Session, index_guess: u32, hash: ExpnHash) -> ExpnId {
      .                   debug_assert_eq!(ExpnId::from_hash(hash), None);
-- line 1580 ----------------------------------------
-- line 1635 ----------------------------------------
      .               /// Proc macro crates don't currently export spans, so this function does not have
      .               /// to work for them.
      .               fn imported_source_files(self, sess: &Session) -> &'a [ImportedSourceFile] {
      .                   // Translate the virtual `/rustc/$hash` prefix back to a real directory
      .                   // that should hold actual sources, where possible.
      .                   //
      .                   // NOTE: if you update this, you might need to also update bootstrap's code for generating
      .                   // the `rust-src` component in `Src::run` in `src/bootstrap/dist.rs`.
 13,768 ( 0.02%)          let virtual_rust_source_base_dir = option_env!("CFG_VIRTUAL_RUST_SOURCE_BASE_DIR")
      .                       .map(Path::new)
      .                       .filter(|_| {
      .                           // Only spend time on further checks if we have what to translate *to*.
      .                           sess.opts.real_rust_source_base_dir.is_some()
      .                       })
      .                       .filter(|virtual_dir| {
      .                           // Don't translate away `/rustc/$hash` if we're still remapping to it,
      .                           // since that means we're still building `std`/`rustc` that need it,
      .                           // and we don't want the real path to leak into codegen/debuginfo.
      .                           !sess.opts.remap_path_prefix.iter().any(|(_from, to)| to == virtual_dir)
      .                       });
 13,768 ( 0.02%)          let try_to_translate_virtual_to_real = |name: &mut rustc_span::FileName| {
      .                       debug!(
      .                           "try_to_translate_virtual_to_real(name={:?}): \
      .                            virtual_rust_source_base_dir={:?}, real_rust_source_base_dir={:?}",
      .                           name, virtual_rust_source_base_dir, sess.opts.real_rust_source_base_dir,
      .                       );
      .           
  3,260 ( 0.00%)              if let Some(virtual_dir) = virtual_rust_source_base_dir {
      .                           if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                               if let rustc_span::FileName::Real(old_name) = name {
      .                                   if let rustc_span::RealFileName::Remapped { local_path: _, virtual_name } =
      .                                       old_name
      .                                   {
      .                                       if let Ok(rest) = virtual_name.strip_prefix(virtual_dir) {
      .                                           let virtual_name = virtual_name.clone();
      .           
-- line 1670 ----------------------------------------
-- line 1709 ----------------------------------------
      .                                           *old_name = new_name;
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   };
      .           
 13,721 ( 0.02%)          self.cdata.source_map_import_info.get_or_init(|| {
     33 ( 0.00%)              let external_source_map = self.root.source_map.decode(self);
      .           
      .                       external_source_map
      .                           .map(|source_file_to_import| {
      .                               // We can't reuse an existing SourceFile, so allocate a new one
      .                               // containing the information we need.
      .                               let rustc_span::SourceFile {
 13,692 ( 0.02%)                          mut name,
  3,912 ( 0.00%)                          src_hash,
    652 ( 0.00%)                          start_pos,
  1,304 ( 0.00%)                          end_pos,
  3,260 ( 0.00%)                          mut lines,
  3,260 ( 0.00%)                          mut multibyte_chars,
  3,912 ( 0.00%)                          mut non_narrow_chars,
  3,260 ( 0.00%)                          mut normalized_pos,
  3,912 ( 0.00%)                          name_hash,
      .                                   ..
      .                               } = source_file_to_import;
      .           
      .                               // If this file is under $sysroot/lib/rustlib/src/ but has not been remapped
      .                               // during rust bootstrapping by `remap-debuginfo = true`, and the user
      .                               // wish to simulate that behaviour by -Z simulate-remapped-rust-src-base,
      .                               // then we change `name` to a similar state as if the rust was bootstrapped
      .                               // with `remap-debuginfo = true`.
      .                               // This is useful for testing so that tests about the effects of
      .                               // `try_to_translate_virtual_to_real` don't have to worry about how the
      .                               // compiler is bootstrapped.
  1,304 ( 0.00%)                      if let Some(virtual_dir) =
      .                                   &sess.opts.debugging_opts.simulate_remapped_rust_src_base
      .                               {
      .                                   if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                                       if let rustc_span::FileName::Real(ref mut old_name) = name {
      .                                           if let rustc_span::RealFileName::LocalPath(local) = old_name {
      .                                               if let Ok(rest) = local.strip_prefix(real_dir) {
      .                                                   *old_name = rustc_span::RealFileName::Remapped {
      .                                                       local_path: None,
-- line 1753 ----------------------------------------
-- line 1767 ----------------------------------------
      .                               let source_length = (end_pos - start_pos).to_usize();
      .           
      .                               // Translate line-start positions and multibyte character
      .                               // position into frame of reference local to file.
      .                               // `SourceMap::new_imported_source_file()` will then translate those
      .                               // coordinates to their new global frame of reference when the
      .                               // offset of the SourceFile is known.
      .                               for pos in &mut lines {
855,500 ( 0.94%)                          *pos = *pos - start_pos;
      .                               }
      .                               for mbc in &mut multibyte_chars {
  2,280 ( 0.00%)                          mbc.pos = mbc.pos - start_pos;
      .                               }
      .                               for swc in &mut non_narrow_chars {
    936 ( 0.00%)                          *swc = *swc - start_pos;
      .                               }
      .                               for np in &mut normalized_pos {
      .                                   np.pos = np.pos - start_pos;
      .                               }
      .           
 11,736 ( 0.01%)                      let local_version = sess.source_map().new_imported_source_file(
  8,476 ( 0.01%)                          name,
  4,564 ( 0.01%)                          src_hash,
      .                                   name_hash,
      .                                   source_length,
  1,304 ( 0.00%)                          self.cnum,
  3,260 ( 0.00%)                          lines,
  3,912 ( 0.00%)                          multibyte_chars,
  3,260 ( 0.00%)                          non_narrow_chars,
  2,608 ( 0.00%)                          normalized_pos,
      .                                   start_pos,
      .                                   end_pos,
      .                               );
      .                               debug!(
      .                                   "CrateMetaData::imported_source_files alloc \
      .                                    source_file {:?} original (start_pos {:?} end_pos {:?}) \
      .                                    translated (start_pos {:?} end_pos {:?})",
      .                                   local_version.name,
-- line 1804 ----------------------------------------
-- line 1808 ----------------------------------------
      .                                   local_version.end_pos
      .                               );
      .           
      .                               ImportedSourceFile {
      .                                   original_start_pos: start_pos,
      .                                   original_end_pos: end_pos,
      .                                   translated_source_file: local_version,
      .                               }
  1,956 ( 0.00%)                  })
      .                           .collect()
      .                   })
      .               }
      .           }
      .           
      .           impl CrateMetadata {
    348 ( 0.00%)      crate fn new(
      .                   sess: &Session,
      .                   blob: MetadataBlob,
      .                   root: CrateRoot<'static>,
      .                   raw_proc_macros: Option<&'static [ProcMacro]>,
      .                   cnum: CrateNum,
      .                   cnum_map: CrateNumMap,
      .                   dep_kind: CrateDepKind,
      .                   source: CrateSource,
      .                   private_dep: bool,
      .                   host_hash: Option<Svh>,
      .               ) -> CrateMetadata {
     87 ( 0.00%)          let trait_impls = root
      .                       .impls
      .                       .decode((&blob, sess))
      .                       .map(|trait_impls| (trait_impls.trait_id, trait_impls.impls))
      .                       .collect();
      .                   let alloc_decoding_state =
     87 ( 0.00%)              AllocDecodingState::new(root.interpret_alloc_index.decode(&blob).collect());
      .                   let dependencies = Lock::new(cnum_map.iter().cloned().collect());
      .           
      .                   // Pre-decode the DefPathHash->DefIndex table. This is a cheap operation
      .                   // that does not copy any data. It just does some data verification.
     29 ( 0.00%)          let def_path_hash_map = root.def_path_hash_map.decode(&blob);
      .           
    667 ( 0.00%)          CrateMetadata {
     29 ( 0.00%)              blob,
     87 ( 0.00%)              root,
    116 ( 0.00%)              trait_impls,
      .                       raw_proc_macros,
      .                       source_map_import_info: OnceCell::new(),
    116 ( 0.00%)              def_path_hash_map,
      .                       expn_hash_map: Default::default(),
    203 ( 0.00%)              alloc_decoding_state,
      .                       cnum,
    116 ( 0.00%)              cnum_map,
    145 ( 0.00%)              dependencies,
      .                       dep_kind: Lock::new(dep_kind),
    348 ( 0.00%)              source,
      .                       private_dep,
      .                       host_hash,
      .                       extern_crate: Lock::new(None),
      .                       hygiene_context: Default::default(),
      .                       def_key_cache: Default::default(),
      .                       def_path_hash_cache: Default::default(),
      .                   }
    261 ( 0.00%)      }
      .           
      .               crate fn dependencies(&self) -> LockGuard<'_, Vec<CrateNum>> {
      .                   self.dependencies.borrow()
      .               }
      .           
      .               crate fn add_dependency(&self, cnum: CrateNum) {
      .                   self.dependencies.borrow_mut().push(cnum);
      .               }
      .           
      .               crate fn update_extern_crate(&self, new_extern_crate: ExternCrate) -> bool {
      .                   let mut extern_crate = self.extern_crate.borrow_mut();
      .                   let update = Some(new_extern_crate.rank()) > extern_crate.as_ref().map(ExternCrate::rank);
      .                   if update {
    150 ( 0.00%)              *extern_crate = Some(new_extern_crate);
      .                   }
      .                   update
      .               }
      .           
      .               crate fn source(&self) -> &CrateSource {
    172 ( 0.00%)          &self.source
      .               }
      .           
      .               crate fn dep_kind(&self) -> CrateDepKind {
      .                   *self.dep_kind.lock()
      .               }
      .           
      .               crate fn update_dep_kind(&self, f: impl FnOnce(CrateDepKind) -> CrateDepKind) {
    215 ( 0.00%)          self.dep_kind.with_lock(|dep_kind| *dep_kind = f(*dep_kind))
      .               }
      .           
      .               crate fn panic_strategy(&self) -> PanicStrategy {
      .                   self.root.panic_strategy
      .               }
      .           
      .               crate fn needs_panic_runtime(&self) -> bool {
      .                   self.root.needs_panic_runtime
-- line 1905 ----------------------------------------
-- line 1909 ----------------------------------------
      .                   self.root.panic_runtime
      .               }
      .           
      .               crate fn is_profiler_runtime(&self) -> bool {
      .                   self.root.profiler_runtime
      .               }
      .           
      .               crate fn needs_allocator(&self) -> bool {
      5 ( 0.00%)          self.root.needs_allocator
      .               }
      .           
      .               crate fn has_global_allocator(&self) -> bool {
      .                   self.root.has_global_allocator
      .               }
      .           
      .               crate fn has_default_lib_allocator(&self) -> bool {
      .                   self.root.has_default_lib_allocator
      .               }
      .           
      .               crate fn is_proc_macro_crate(&self) -> bool {
      .                   self.root.is_proc_macro_crate()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
    303 ( 0.00%)          self.root.name
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
      .                   self.root.stable_crate_id
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
      .                   self.root.hash
      .               }
      .           
      .               fn num_def_ids(&self) -> usize {
      .                   self.root.tables.def_keys.size()
      .               }
      .           
      .               fn local_def_id(&self, index: DefIndex) -> DefId {
  6,640 ( 0.01%)          DefId { krate: self.cnum, index }
      .               }
      .           
      .               // Translate a DefId from the current compilation environment to a DefId
      .               // for an external crate.
      .               fn reverse_translate_def_id(&self, did: DefId) -> Option<DefId> {
      .                   for (local, &global) in self.cnum_map.iter_enumerated() {
  1,171 ( 0.00%)              if global == did.krate {
      .                           return Some(DefId { krate: local, index: did.index });
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .           }
      .           
-- line 1964 ----------------------------------------

131,959 ( 0.15%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir              

-- line 141 ----------------------------------------
     .               /// ```
     .               /// let a = [1, 2, 3];
     .               /// assert!(!a.is_empty());
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
     .               #[inline]
     .               pub const fn is_empty(&self) -> bool {
10,477 ( 0.01%)          self.len() == 0
     .               }
     .           
     .               /// Returns the first element of the slice, or `None` if it is empty.
     .               ///
     .               /// # Examples
     .               ///
     .               /// ```
     .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 159 ----------------------------------------
     .               ///
     .               /// let w: &[i32] = &[];
     .               /// assert_eq!(None, w.first());
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
     .               #[inline]
     .               pub const fn first(&self) -> Option<&T> {
    38 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
     .               }
     .           
     .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
     .               ///
     .               /// # Examples
     .               ///
     .               /// ```
     .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 178 ----------------------------------------
     .               ///     *first = 5;
     .               /// }
     .               /// assert_eq!(x, &[5, 1, 2]);
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
     .               #[inline]
     .               pub const fn first_mut(&mut self) -> Option<&mut T> {
    16 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
     .               }
     .           
     .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
     .               ///
     .               /// # Examples
     .               ///
     .               /// ```
     .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 237 ----------------------------------------
     .               ///     assert_eq!(last, &2);
     .               ///     assert_eq!(elements, &[0, 1]);
     .               /// }
     .               /// ```
     .               #[stable(feature = "slice_splits", since = "1.5.0")]
     .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
     .               #[inline]
     .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
   117 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
     .               }
     .           
     .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
     .               ///
     .               /// # Examples
     .               ///
     .               /// ```
     .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
     .               ///
     .               /// let w: &[i32] = &[];
     .               /// assert_eq!(None, w.last());
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
     .               #[inline]
     .               pub const fn last(&self) -> Option<&T> {
 6,523 ( 0.01%)          if let [.., last] = self { Some(last) } else { None }
     .               }
     .           
     .               /// Returns a mutable pointer to the last item in the slice.
     .               ///
     .               /// # Examples
     .               ///
     .               /// ```
     .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 295 ----------------------------------------
     .               ///     *last = 10;
     .               /// }
     .               /// assert_eq!(x, &[0, 1, 10]);
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
     .               #[inline]
     .               pub const fn last_mut(&mut self) -> Option<&mut T> {
11,807 ( 0.01%)          if let [.., last] = self { Some(last) } else { None }
     .               }
     .           
     .               /// Returns a reference to an element or subslice depending on the type of
     .               /// index.
     .               ///
     .               /// - If given a position, returns a reference to the element at that
     .               ///   position or `None` if out of bounds.
     .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 448 ----------------------------------------
     .               /// }
     .               /// ```
     .               ///
     .               /// [`as_mut_ptr`]: slice::as_mut_ptr
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
     .               #[inline]
     .               pub const fn as_ptr(&self) -> *const T {
 8,942 ( 0.01%)          self as *const [T] as *const T
     .               }
     .           
     .               /// Returns an unsafe mutable pointer to the slice's buffer.
     .               ///
     .               /// The caller must ensure that the slice outlives the pointer this
     .               /// function returns, or else it will end up pointing to garbage.
     .               ///
     .               /// Modifying the container referenced by this slice may cause its buffer
-- line 464 ----------------------------------------
-- line 476 ----------------------------------------
     .               ///     }
     .               /// }
     .               /// assert_eq!(x, &[3, 4, 6]);
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
     .               #[inline]
     .               pub const fn as_mut_ptr(&mut self) -> *mut T {
     1 ( 0.00%)          self as *mut [T] as *mut T
     .               }
     .           
     .               /// Returns the two raw pointers spanning the slice.
     .               ///
     .               /// The returned range is half-open, which means that the end pointer
     .               /// points *one past* the last element of the slice. This way, an empty
     .               /// slice is represented by two equal pointers, and the difference between
     .               /// the two pointers represents the size of the slice.
-- line 492 ----------------------------------------
-- line 582 ----------------------------------------
     .               /// v.swap(2, 4);
     .               /// assert!(v == ["a", "b", "e", "d", "c"]);
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
     .               #[inline]
     .               #[track_caller]
     .               pub const fn swap(&mut self, a: usize, b: usize) {
   350 ( 0.00%)          let _ = &self[a];
   462 ( 0.00%)          let _ = &self[b];
     .           
     .                   // SAFETY: we just checked that both `a` and `b` are in bounds
     .                   unsafe { self.swap_unchecked(a, b) }
     .               }
     .           
     .               /// Swaps two elements in the slice, without doing bounds checking.
     .               ///
     .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 677 ----------------------------------------
     .           
     .                       // Because this function is first compiled in isolation,
     .                       // this check tells LLVM that the indexing below is
     .                       // in-bounds.  Then after inlining -- once the actual
     .                       // lengths of the slices are known -- it's removed.
     .                       let (a, b) = (&mut a[..n], &mut b[..n]);
     .           
     .                       for i in 0..n {
   239 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
     .                       }
     .                   }
     .               }
     .           
     .               /// Returns an iterator over the slice.
     .               ///
     .               /// # Examples
     .               ///
-- line 693 ----------------------------------------
-- line 1499 ----------------------------------------
     .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
     .               ///     assert_eq!(right, []);
     .               /// }
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[inline]
     .               #[track_caller]
     .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
    42 ( 0.00%)          assert!(mid <= self.len());
     .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
     .                   // fulfills the requirements of `from_raw_parts_mut`.
     .                   unsafe { self.split_at_unchecked(mid) }
     .               }
     .           
     .               /// Divides one mutable slice into two at an index.
     .               ///
     .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
     .               /// left[1] = 2;
     .               /// right[1] = 4;
     .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[inline]
     .               #[track_caller]
     .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
   612 ( 0.00%)          assert!(mid <= self.len());
     .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
     .                   // fulfills the requirements of `from_raw_parts_mut`.
     .                   unsafe { self.split_at_mut_unchecked(mid) }
     .               }
     .           
     .               /// Divides one slice into two at an index, without doing bounds checking.
     .               ///
     .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
     .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
     .                   let len = self.len();
     .                   let ptr = self.as_mut_ptr();
     .           
     .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
     .                   //
     .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
     .                   // is fine.
    47 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
     .               }
     .           
     .               /// Divides one slice into an array and a remainder slice at an index.
     .               ///
     .               /// The array will contain all indices from `[0, N)` (excluding
     .               /// the index `N` itself) and the slice will contain all
     .               /// indices from `[N, len)` (excluding the index `len` itself).
     .               ///
-- line 1644 ----------------------------------------
-- line 2113 ----------------------------------------
     .               /// assert!(!v.iter().any(|e| e == "hi"));
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[inline]
     .               pub fn contains(&self, x: &T) -> bool
     .               where
     .                   T: PartialEq,
     .               {
    34 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
     .               }
     .           
     .               /// Returns `true` if `needle` is a prefix of the slice.
     .               ///
     .               /// # Examples
     .               ///
     .               /// ```
     .               /// let v = [10, 40, 30];
-- line 2129 ----------------------------------------
-- line 2142 ----------------------------------------
     .               /// assert!(v.starts_with(&[]));
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               pub fn starts_with(&self, needle: &[T]) -> bool
     .               where
     .                   T: PartialEq,
     .               {
     .                   let n = needle.len();
10,658 ( 0.01%)          self.len() >= n && needle == &self[..n]
     .               }
     .           
     .               /// Returns `true` if `needle` is a suffix of the slice.
     .               ///
     .               /// # Examples
     .               ///
     .               /// ```
     .               /// let v = [10, 40, 30];
-- line 2158 ----------------------------------------
-- line 2171 ----------------------------------------
     .               /// assert!(v.ends_with(&[]));
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               pub fn ends_with(&self, needle: &[T]) -> bool
     .               where
     .                   T: PartialEq,
     .               {
     .                   let (m, n) = (self.len(), needle.len());
 6,066 ( 0.01%)          m >= n && needle == &self[m - n..]
     .               }
     .           
     .               /// Returns a subslice with the prefix removed.
     .               ///
     .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
     .               /// If `prefix` is empty, simply returns the original slice.
     .               ///
     .               /// If the slice does not start with `prefix`, returns `None`.
-- line 2187 ----------------------------------------
-- line 2293 ----------------------------------------
     .               /// s.insert(idx, num);
     .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
     .               where
     .                   T: Ord,
     .               {
     3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
     .               }
     .           
     .               /// Binary searches this sorted slice with a comparator function.
     .               ///
     .               /// The comparator function should implement an order consistent
     .               /// with the sort order of the underlying slice, returning an
     .               /// order code that indicates whether its argument is `Less`,
     .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
     .               #[inline]
     .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
     .               where
     .                   F: FnMut(&'a T) -> Ordering,
     .               {
     .                   let mut size = self.len();
     .                   let mut left = 0;
     .                   let mut right = size;
66,887 ( 0.07%)          while left < right {
94,631 ( 0.10%)              let mid = left + size / 2;
     .           
     .                       // SAFETY: the call is made safe by the following invariants:
     .                       // - `mid >= 0`
     .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
28,438 ( 0.03%)              let cmp = f(unsafe { self.get_unchecked(mid) });
     .           
     .                       // The reason why we use if/else control flow rather than match
     .                       // is because match reorders comparison operations, which is perf sensitive.
     .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
28,865 ( 0.03%)              if cmp == Less {
30,361 ( 0.03%)                  left = mid + 1;
16,580 ( 0.02%)              } else if cmp == Greater {
     .                           right = mid;
     .                       } else {
     .                           // SAFETY: same as the `get_unchecked` above
     .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
     .                           return Ok(mid);
     .                       }
     .           
83,829 ( 0.09%)              size = right - left;
     .                   }
     .                   Err(left)
     .               }
     .           
     .               /// Binary searches this sorted slice with a key extraction function.
     .               ///
     .               /// Assumes that the slice is sorted by the key, for instance with
     .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3203 ----------------------------------------
     .                   #[track_caller]
     .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
     .                       panic!(
     .                           "source slice length ({}) does not match destination slice length ({})",
     .                           src_len, dst_len,
     .                       );
     .                   }
     .           
 2,946 ( 0.00%)          if self.len() != src.len() {
     .                       len_mismatch_fail(self.len(), src.len());
     .                   }
     .           
     .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
     .                   // checked to have the same length. The slices cannot overlap because
     .                   // mutable references are exclusive.
     .                   unsafe {
     .                       ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
-- line 3219 ----------------------------------------
-- line 3382 ----------------------------------------
     .                   }
     .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
     .                   let ts: usize = mem::size_of::<U>() / gcd;
     .                   let us: usize = mem::size_of::<T>() / gcd;
     .           
     .                   // Armed with this knowledge, we can find how many `U`s we can fit!
     .                   let us_len = self.len() / ts * us;
     .                   // And how many `T`s will be in the trailing slice!
    60 ( 0.00%)          let ts_len = self.len() % ts;
     .                   (us_len, ts_len)
     .               }
     .           
     .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
     .               /// maintained.
     .               ///
     .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
     .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
     .                       return (self, &[], &[]);
     .                   }
     .           
     .                   // First, find at what point do we split between the first and 2nd slice. Easy with
     .                   // ptr.align_offset.
     .                   let ptr = self.as_ptr();
     .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
     .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
    60 ( 0.00%)          if offset > self.len() {
     .                       (self, &[], &[])
     .                   } else {
     .                       let (left, rest) = self.split_at(offset);
     .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
     .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
     .                       // since the caller guarantees that we can transmute `T` to `U` safely.
     .                       unsafe {
     .                           (
     .                               left,
     .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
    60 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
     .                           )
     .                       }
     .                   }
     .               }
     .           
     .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
     .               /// maintained.
     .               ///
-- line 3456 ----------------------------------------

55,048 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs
--------------------------------------------------------------------------------
Ir              

-- line 15 ----------------------------------------
     .           use std::str;
     .           
     .           use crate::{with_session_globals, Edition, Span, DUMMY_SP};
     .           
     .           #[cfg(test)]
     .           mod tests;
     .           
     .           // The proc macro code for this is in `compiler/rustc_macros/src/symbols.rs`.
     8 ( 0.00%)  symbols! {
     .               // After modifying this list adjust `is_special`, `is_used_keyword`/`is_unused_keyword`,
     .               // this should be rarely necessary though if the keywords are kept in alphabetic order.
     .               Keywords {
     .                   // Special reserved identifiers used internally for elided lifetimes,
     .                   // unnamed method parameters, crate root module, error recovery etc.
     .                   Empty:              "",
     .                   PathRoot:           "{{root}}",
     .                   DollarCrate:        "$crate",
-- line 31 ----------------------------------------
-- line 1498 ----------------------------------------
     .                   write_str,
     .                   writeln_macro,
     .                   x87_reg,
     .                   xer,
     .                   xmm_reg,
     .                   ymm_reg,
     .                   zmm_reg,
     .               }
    10 ( 0.00%)  }
     .           
 1,342 ( 0.00%)  #[derive(Copy, Clone, Eq, HashStable_Generic, Encodable, Decodable)]
     .           pub struct Ident {
     .               pub name: Symbol,
     .               pub span: Span,
     .           }
     .           
     .           impl Ident {
     .               #[inline]
     .               /// Constructs a new identifier from a symbol and a span.
     .               pub const fn new(name: Symbol, span: Span) -> Ident {
     .                   Ident { name, span }
11,554 ( 0.01%)      }
     .           
     .               /// Constructs a new identifier with a dummy span.
     .               #[inline]
     .               pub const fn with_dummy_span(name: Symbol) -> Ident {
     .                   Ident::new(name, DUMMY_SP)
     .               }
     .           
     .               #[inline]
     .               pub fn empty() -> Ident {
     .                   Ident::with_dummy_span(kw::Empty)
     .               }
     .           
     .               /// Maps a string to an identifier with a dummy span.
     4 ( 0.00%)      pub fn from_str(string: &str) -> Ident {
     4 ( 0.00%)          Ident::with_dummy_span(Symbol::intern(string))
    16 ( 0.00%)      }
     .           
     .               /// Maps a string and a span to an identifier.
     .               pub fn from_str_and_span(string: &str, span: Span) -> Ident {
     .                   Ident::new(Symbol::intern(string), span)
     .               }
     .           
     .               /// Replaces `lo` and `hi` with those from `span`, but keep hygiene context.
   152 ( 0.00%)      pub fn with_span_pos(self, span: Span) -> Ident {
     .                   Ident::new(self.name, span.with_ctxt(self.span.ctxt()))
    95 ( 0.00%)      }
     .           
     .               pub fn without_first_quote(self) -> Ident {
     .                   Ident::new(Symbol::intern(self.as_str().trim_start_matches('\'')), self.span)
     .               }
     .           
     .               /// "Normalize" ident for use in comparisons using "item hygiene".
     .               /// Identifiers with same string value become same if they came from the same macro 2.0 macro
     .               /// (e.g., `macro` item, but not `macro_rules` item) and stay different if they came from
     .               /// different macro 2.0 macros.
     .               /// Technically, this operation strips all non-opaque marks from ident's syntactic context.
 9,684 ( 0.01%)      pub fn normalize_to_macros_2_0(self) -> Ident {
     .                   Ident::new(self.name, self.span.normalize_to_macros_2_0())
 7,532 ( 0.01%)      }
     .           
     .               /// "Normalize" ident for use in comparisons using "local variable hygiene".
     .               /// Identifiers with same string value become same if they came from the same non-transparent
     .               /// macro (e.g., `macro` or `macro_rules!` items) and stay different if they came from different
     .               /// non-transparent macros.
     .               /// Technically, this operation strips all transparent marks from ident's syntactic context.
   207 ( 0.00%)      pub fn normalize_to_macro_rules(self) -> Ident {
     .                   Ident::new(self.name, self.span.normalize_to_macro_rules())
   161 ( 0.00%)      }
     .           
     .               /// Access the underlying string. This is a slowish operation because it
     .               /// requires locking the symbol interner.
     .               ///
     .               /// Note that the lifetime of the return value is a lie. See
     .               /// `Symbol::as_str()` for details.
     .               pub fn as_str(&self) -> &str {
    34 ( 0.00%)          self.name.as_str()
     .               }
     .           }
     .           
     .           impl PartialEq for Ident {
 1,335 ( 0.00%)      fn eq(&self, rhs: &Self) -> bool {
 3,344 ( 0.00%)          self.name == rhs.name && self.span.ctxt() == rhs.span.ctxt()
 1,780 ( 0.00%)      }
     .           }
     .           
     .           impl Hash for Ident {
     .               fn hash<H: Hasher>(&self, state: &mut H) {
     3 ( 0.00%)          self.name.hash(state);
   355 ( 0.00%)          self.span.ctxt().hash(state);
     .               }
     .           }
     .           
     .           impl fmt::Debug for Ident {
     .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     .                   fmt::Display::fmt(self, f)?;
     .                   fmt::Debug::fmt(&self.span.ctxt(), f)
     .               }
-- line 1596 ----------------------------------------
-- line 1622 ----------------------------------------
     .               is_raw: bool,
     .               /// Span used for retrieving the crate name to which `$crate` refers to,
     .               /// if this field is `None` then the `$crate` conversion doesn't happen.
     .               convert_dollar_crate: Option<Span>,
     .           }
     .           
     .           impl IdentPrinter {
     .               /// The most general `IdentPrinter` constructor. Do not use this.
    18 ( 0.00%)      pub fn new(symbol: Symbol, is_raw: bool, convert_dollar_crate: Option<Span>) -> IdentPrinter {
   140 ( 0.00%)          IdentPrinter { symbol, is_raw, convert_dollar_crate }
    18 ( 0.00%)      }
     .           
     .               /// This implementation is supposed to be used when printing identifiers
     .               /// as a part of pretty-printing for larger AST pieces.
     .               /// Do not use this either.
    34 ( 0.00%)      pub fn for_ast_ident(ident: Ident, is_raw: bool) -> IdentPrinter {
    34 ( 0.00%)          IdentPrinter::new(ident.name, is_raw, Some(ident.span))
    17 ( 0.00%)      }
     .           }
     .           
     .           impl fmt::Display for IdentPrinter {
   175 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    70 ( 0.00%)          if self.is_raw {
     .                       f.write_str("r#")?;
    35 ( 0.00%)          } else if self.symbol == kw::DollarCrate {
     .                       if let Some(span) = self.convert_dollar_crate {
     .                           let converted = span.ctxt().dollar_crate_name();
     .                           if !converted.is_path_segment_keyword() {
     .                               f.write_str("::")?;
     .                           }
     .                           return fmt::Display::fmt(&converted, f);
     .                       }
     .                   }
-- line 1654 ----------------------------------------
-- line 1656 ----------------------------------------
     .               }
     .           }
     .           
     .           /// An newtype around `Ident` that calls [Ident::normalize_to_macro_rules] on
     .           /// construction.
     .           // FIXME(matthewj, petrochenkov) Use this more often, add a similar
     .           // `ModernIdent` struct and use that as well.
     .           #[derive(Copy, Clone, Eq, PartialEq, Hash)]
    44 ( 0.00%)  pub struct MacroRulesNormalizedIdent(Ident);
     .           
     .           impl MacroRulesNormalizedIdent {
     .               pub fn new(ident: Ident) -> Self {
    20 ( 0.00%)          Self(ident.normalize_to_macro_rules())
     .               }
     .           }
     .           
     .           impl fmt::Debug for MacroRulesNormalizedIdent {
     .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     .                   fmt::Debug::fmt(&self.0, f)
     .               }
     .           }
-- line 1676 ----------------------------------------
-- line 1686 ----------------------------------------
     .           /// Internally, a `Symbol` is implemented as an index, and all operations
     .           /// (including hashing, equality, and ordering) operate on that index. The use
     .           /// of `rustc_index::newtype_index!` means that `Option<Symbol>` only takes up 4 bytes,
     .           /// because `rustc_index::newtype_index!` reserves the last 256 values for tagging purposes.
     .           ///
     .           /// Note that `Symbol` cannot directly be a `rustc_index::newtype_index!` because it
     .           /// implements `fmt::Debug`, `Encodable`, and `Decodable` in special ways.
     .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
 2,076 ( 0.00%)  pub struct Symbol(SymbolIndex);
     .           
     .           rustc_index::newtype_index! {
     .               struct SymbolIndex { .. }
     .           }
     .           
     .           impl Symbol {
     .               const fn new(n: u32) -> Self {
     .                   Symbol(SymbolIndex::from_u32(n))
     4 ( 0.00%)      }
     .           
     .               /// Maps a string to its interned representation.
48,690 ( 0.05%)      pub fn intern(string: &str) -> Self {
     .                   with_session_globals(|session_globals| session_globals.symbol_interner.intern(string))
48,690 ( 0.05%)      }
     .           
     .               /// Access the underlying string. This is a slowish operation because it
     .               /// requires locking the symbol interner.
     .               ///
     .               /// Note that the lifetime of the return value is a lie. It's not the same
     .               /// as `&self`, but actually tied to the lifetime of the underlying
     .               /// interner. Interners are long-lived, and there are very few of them, and
     .               /// this function is typically used for short-lived things, so in practice
     .               /// it works out ok.
 3,345 ( 0.00%)      pub fn as_str(&self) -> &str {
 1,115 ( 0.00%)          with_session_globals(|session_globals| unsafe {
     .                       std::mem::transmute::<&str, &str>(session_globals.symbol_interner.get(*self))
     .                   })
 4,460 ( 0.00%)      }
     .           
     .               pub fn as_u32(self) -> u32 {
     .                   self.0.as_u32()
     .               }
     .           
     .               pub fn is_empty(self) -> bool {
     .                   self == kw::Empty
     .               }
-- line 1730 ----------------------------------------
-- line 1740 ----------------------------------------
     .           
     .           impl fmt::Debug for Symbol {
     .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     .                   fmt::Debug::fmt(self.as_str(), f)
     .               }
     .           }
     .           
     .           impl fmt::Display for Symbol {
   242 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1,041 ( 0.00%)          fmt::Display::fmt(self.as_str(), f)
     .               }
     .           }
     .           
     .           impl<S: Encoder> Encodable<S> for Symbol {
     .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
   466 ( 0.00%)          s.emit_str(self.as_str())
     .               }
     .           }
     .           
     .           impl<D: Decoder> Decodable<D> for Symbol {
     .               #[inline]
 5,504 ( 0.01%)      fn decode(d: &mut D) -> Symbol {
11,503 ( 0.01%)          Symbol::intern(&d.read_str())
     .               }
     .           }
     .           
     .           impl<CTX> HashStable<CTX> for Symbol {
     .               #[inline]
   300 ( 0.00%)      fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
   473 ( 0.00%)          self.as_str().hash_stable(hcx, hasher);
   294 ( 0.00%)      }
     .           }
     .           
     .           impl<CTX> ToStableHashKey<CTX> for Symbol {
     .               type KeyType = String;
     .               #[inline]
     .               fn to_stable_hash_key(&self, _: &CTX) -> String {
     .                   self.as_str().to_string()
     .               }
-- line 1778 ----------------------------------------
-- line 1785 ----------------------------------------
     .           //
     .           // The `FxHashMap`+`Vec` pair could be replaced by `FxIndexSet`, but #75278
     .           // found that to regress performance up to 2% in some cases. This might be
     .           // revisited after further improvements to `indexmap`.
     .           //
     .           // This type is private to prevent accidentally constructing more than one
     .           // `Interner` on the same thread, which makes it easy to mixup `Symbol`s
     .           // between `Interner`s.
     2 ( 0.00%)  #[derive(Default)]
     .           struct InternerInner {
     .               arena: DroplessArena,
     .               names: FxHashMap<&'static str, Symbol>,
     .               strings: Vec<&'static str>,
     .           }
     .           
     .           impl Interner {
     .               fn prefill(init: &[&'static str]) -> Self {
    30 ( 0.00%)          Interner(Lock::new(InternerInner {
     .                       strings: init.into(),
     .                       names: init.iter().copied().zip((0..).map(Symbol::new)).collect(),
     .                       ..Default::default()
     .                   }))
     .               }
     .           
     .               #[inline]
     .               fn intern(&self, string: &str) -> Symbol {
     .                   let mut inner = self.0.lock();
 7,528 ( 0.01%)          if let Some(&name) = inner.names.get(string) {
     .                       return name;
     .                   }
     .           
 1,646 ( 0.00%)          let name = Symbol::new(inner.strings.len() as u32);
     .           
     .                   // SAFETY: we convert from `&str` to `&[u8]`, clone it into the arena,
     .                   // and immediately convert the clone back to `&[u8], all because there
     .                   // is no `inner.arena.alloc_str()` method. This is clearly safe.
     .                   let string: &str =
     .                       unsafe { str::from_utf8_unchecked(inner.arena.alloc_slice(string.as_bytes())) };
     .           
     .                   // SAFETY: we can extend the arena allocation to `'static` because we
-- line 1824 ----------------------------------------
-- line 1831 ----------------------------------------
     .                   // #91445 for details.
     .                   inner.names.insert(string, name);
     .                   name
     .               }
     .           
     .               // Get the symbol as a string. `Symbol::as_str()` should be used in
     .               // preference to this function.
     .               fn get(&self, symbol: Symbol) -> &str {
 3,345 ( 0.00%)          self.0.lock().strings[symbol.0.as_usize()]
     .               }
     .           }
     .           
     .           // This module has a very short name because it's used a lot.
     .           /// This module contains all the defined keyword `Symbol`s.
     .           ///
     .           /// Given that `kw` is imported, use them like `kw::keyword_name`.
     .           /// For example `kw::Loop` or `kw::Break`.
-- line 1847 ----------------------------------------
-- line 1863 ----------------------------------------
     .           
     .               // Used from a macro in `librustc_feature/accepted.rs`
     .               pub use super::kw::MacroRules as macro_rules;
     .           
     .               /// Get the symbol for an integer.
     .               ///
     .               /// The first few non-negative integers each have a static symbol and therefore
     .               /// are fast.
     6 ( 0.00%)      pub fn integer<N: TryInto<usize> + Copy + ToString>(n: N) -> Symbol {
     6 ( 0.00%)          if let Result::Ok(idx) = n.try_into() {
     .                       if idx < 10 {
     8 ( 0.00%)                  return Symbol::new(super::SYMBOL_DIGITS_BASE + idx as u32);
     .                       }
     .                   }
     .                   Symbol::intern(&n.to_string())
     .               }
     .           }
     .           
     .           impl Symbol {
     .               fn is_special(self) -> bool {
     .                   self <= kw::Underscore
     .               }
     .           
     .               fn is_used_keyword_always(self) -> bool {
    54 ( 0.00%)          self >= kw::As && self <= kw::While
     .               }
     .           
     .               fn is_used_keyword_conditional(self, edition: impl FnOnce() -> Edition) -> bool {
 1,377 ( 0.00%)          (self >= kw::Async && self <= kw::Dyn) && edition() >= Edition::Edition2018
     .               }
     .           
     .               fn is_unused_keyword_always(self) -> bool {
    54 ( 0.00%)          self >= kw::Abstract && self <= kw::Yield
     .               }
     .           
     .               fn is_unused_keyword_conditional(self, edition: impl FnOnce() -> Edition) -> bool {
    18 ( 0.00%)          self == kw::Try && edition() >= Edition::Edition2018
     .               }
     .           
     .               pub fn is_reserved(self, edition: impl Copy + FnOnce() -> Edition) -> bool {
 2,525 ( 0.00%)          self.is_special()
     .                       || self.is_used_keyword_always()
     .                       || self.is_unused_keyword_always()
     .                       || self.is_used_keyword_conditional(edition)
     .                       || self.is_unused_keyword_conditional(edition)
     .               }
     .           
     .               /// A keyword or reserved identifier that can be used as a path segment.
     .               pub fn is_path_segment_keyword(self) -> bool {
 6,055 ( 0.01%)          self == kw::Super
     .                       || self == kw::SelfLower
     .                       || self == kw::SelfUpper
     .                       || self == kw::Crate
     .                       || self == kw::PathRoot
     .                       || self == kw::DollarCrate
     .               }
     .           
     .               /// Returns `true` if the symbol is `true` or `false`.
     .               pub fn is_bool_lit(self) -> bool {
    63 ( 0.00%)          self == kw::True || self == kw::False
    63 ( 0.00%)      }
     .           
     .               /// Returns `true` if this symbol can be a raw identifier.
     .               pub fn can_be_raw(self) -> bool {
    36 ( 0.00%)          self != kw::Empty && self != kw::Underscore && !self.is_path_segment_keyword()
     .               }
     .           }
     .           
     .           impl Ident {
     .               // Returns `true` for reserved identifiers used internally for elided lifetimes,
     .               // unnamed method parameters, crate root module, error recovery etc.
     .               pub fn is_special(self) -> bool {
     .                   self.name.is_special()
    18 ( 0.00%)      }
     .           
     .               /// Returns `true` if the token is a keyword used in the language.
    18 ( 0.00%)      pub fn is_used_keyword(self) -> bool {
     .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
    18 ( 0.00%)          self.name.is_used_keyword_always()
     .                       || self.name.is_used_keyword_conditional(|| self.span.edition())
    36 ( 0.00%)      }
     .           
     .               /// Returns `true` if the token is a keyword reserved for possible future use.
    18 ( 0.00%)      pub fn is_unused_keyword(self) -> bool {
     .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
    18 ( 0.00%)          self.name.is_unused_keyword_always()
     .                       || self.name.is_unused_keyword_conditional(|| self.span.edition())
    36 ( 0.00%)      }
     .           
     .               /// Returns `true` if the token is either a special identifier or a keyword.
   487 ( 0.00%)      pub fn is_reserved(self) -> bool {
     .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
     .                   self.name.is_reserved(|| self.span.edition())
   974 ( 0.00%)      }
     .           
     .               /// A keyword or reserved identifier that can be used as a path segment.
     .               pub fn is_path_segment_keyword(self) -> bool {
     .                   self.name.is_path_segment_keyword()
   865 ( 0.00%)      }
     .           
     .               /// We see this identifier in a normal identifier position, like variable name or a type.
     .               /// How was it written originally? Did it use the raw form? Let's try to guess.
    18 ( 0.00%)      pub fn is_raw_guess(self) -> bool {
     .                   self.name.can_be_raw() && self.is_reserved()
    36 ( 0.00%)      }
     .           }

 6,319 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 417 ----------------------------------------
        .               /// # #![allow(unused_mut)]
        .               /// let mut vec: Vec<i32> = Vec::new();
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        .               pub const fn new() -> Self {
   60,701 ( 0.07%)          Vec { buf: RawVec::NEW, len: 0 }
       20 ( 0.00%)      }
        .           
        .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
        .               ///
        .               /// The vector will be able to hold exactly `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the vector will not allocate.
        .               ///
        .               /// It is important to note that although the returned vector has the
        .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 601 ----------------------------------------
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
   27,221 ( 0.03%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
        .               }
        .           
        .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
-- line 617 ----------------------------------------
-- line 677 ----------------------------------------
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
    1,042 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
        .               }
        .           
        .               /// Decomposes a `Vec<T>` into its raw components.
        .               ///
        .               /// Returns the raw pointer to the underlying data, the length of
        .               /// the vector (in elements), and the allocated capacity of the
        .               /// data (in elements). These are the same arguments in the same
        .               /// order as the arguments to [`from_raw_parts`].
-- line 693 ----------------------------------------
-- line 778 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let vec: Vec<i32> = Vec::with_capacity(10);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn capacity(&self) -> usize {
    4,853 ( 0.01%)          self.buf.capacity()
        .               }
        .           
        .               /// Reserves capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 794 ----------------------------------------
-- line 801 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve(&mut self, additional: usize) {
    4,918 ( 0.01%)          self.buf.reserve(self.len, additional);
        .               }
        .           
        .               /// Reserves the minimum capacity for exactly `additional` more elements to
        .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
        .               /// capacity will be greater than or equal to `self.len() + additional`.
        .               /// Does nothing if the capacity is already sufficient.
        .               ///
        .               /// Note that the allocator may give the collection more space than it
-- line 817 ----------------------------------------
-- line 829 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve_exact(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve_exact(&mut self, additional: usize) {
      344 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
        .               }
        .           
        .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `try_reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 845 ----------------------------------------
-- line 930 ----------------------------------------
        .               /// assert!(vec.capacity() >= 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn shrink_to_fit(&mut self) {
        .                   // The capacity is never less than the length, and there's nothing to do when
        .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
        .                   // by only calling it with a greater capacity.
    1,382 ( 0.00%)          if self.capacity() > self.len {
      107 ( 0.00%)              self.buf.shrink_to_fit(self.len);
        .                   }
        .               }
        .           
        .               /// Shrinks the capacity of the vector with a lower bound.
        .               ///
        .               /// The capacity will remain at least as large as both the length
        .               /// and the supplied value.
        .               ///
-- line 947 ----------------------------------------
-- line 990 ----------------------------------------
        .               /// let slice = vec.into_boxed_slice();
        .               /// assert_eq!(slice.into_vec().capacity(), 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn into_boxed_slice(mut self) -> Box<[T], A> {
        .                   unsafe {
        .                       self.shrink_to_fit();
      797 ( 0.00%)              let me = ManuallyDrop::new(self);
        .                       let buf = ptr::read(&me.buf);
        .                       let len = me.len();
        .                       buf.into_box(len).assume_init()
        .                   }
        .               }
        .           
        .               /// Shortens the vector, keeping the first `len` elements and dropping
        .               /// the rest.
-- line 1006 ----------------------------------------
-- line 1040 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.truncate(0);
        .               /// assert_eq!(vec, []);
        .               /// ```
        .               ///
        .               /// [`clear`]: Vec::clear
        .               /// [`drain`]: Vec::drain
        .               #[stable(feature = "rust1", since = "1.0.0")]
   15,052 ( 0.02%)      pub fn truncate(&mut self, len: usize) {
        .                   // This is safe because:
        .                   //
        .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
        .                   //   case avoids creating an invalid slice, and
        .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
        .                   //   such that no value will be dropped twice in case `drop_in_place`
        .                   //   were to panic once (if it panics twice, the program aborts).
        .                   unsafe {
        .                       // Note: It's intentional that this is `>` and not `>=`.
        .                       //       Changing it to `>=` has negative performance
        .                       //       implications in some cases. See #78884 for more.
    9,587 ( 0.01%)              if len > self.len {
        .                           return;
        .                       }
        .                       let remaining_len = self.len - len;
        .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
    5,226 ( 0.01%)              self.len = len;
       67 ( 0.00%)              ptr::drop_in_place(s);
        .                   }
   18,062 ( 0.02%)      }
        .           
        .               /// Extracts a slice containing the entire vector.
        .               ///
        .               /// Equivalent to `&s[..]`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1076 ----------------------------------------
-- line 1126 ----------------------------------------
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_ptr(&self) -> *const T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref`, which creates an intermediate reference.
   88,134 ( 0.10%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns an unsafe mutable pointer to the vector's buffer.
        .               ///
-- line 1142 ----------------------------------------
-- line 1162 ----------------------------------------
        .               /// }
        .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
        .               /// ```
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_mut_ptr(&mut self) -> *mut T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref_mut`, which creates an intermediate reference.
  494,418 ( 0.55%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
-- line 1178 ----------------------------------------
-- line 1259 ----------------------------------------
        .               ///
        .               /// Normally, here, one would use [`clear`] instead to correctly drop
        .               /// the contents and thus not leak memory.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   debug_assert!(new_len <= self.capacity());
        .           
   11,733 ( 0.01%)          self.len = new_len;
       20 ( 0.00%)      }
        .           
        .               /// Removes an element from the vector and returns it.
        .               ///
        .               /// The removed element is replaced by the last element of the vector.
        .               ///
        .               /// This does not preserve ordering, but is *O*(1).
        .               /// If you need to preserve the element order, use [`remove`] instead.
        .               ///
-- line 1276 ----------------------------------------
-- line 1329 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.insert(1, 4);
        .               /// assert_eq!(vec, [1, 4, 2, 3]);
        .               /// vec.insert(4, 5);
        .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      287 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
        .                   }
        .           
       41 ( 0.00%)          let len = self.len();
       90 ( 0.00%)          if index > len {
        .                       assert_failed(index, len);
        .                   }
        .           
        .                   // space for the new element
      104 ( 0.00%)          if len == self.buf.capacity() {
        .                       self.reserve(1);
        .                   }
        .           
        .                   unsafe {
        .                       // infallible
        .                       // The spot to put the new value
        .                       {
        .                           let p = self.as_mut_ptr().add(index);
        .                           // Shift everything over to make space. (Duplicating the
        .                           // `index`th element into two consecutive places.)
      156 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
        .                           // Write it in, overwriting the first copy of the `index`th
        .                           // element.
        .                           ptr::write(p, element);
        .                       }
      104 ( 0.00%)              self.set_len(len + 1);
        .                   }
      246 ( 0.00%)      }
        .           
        .               /// Removes and returns the element at position `index` within the vector,
        .               /// shifting all elements after it to the left.
        .               ///
        .               /// Note: Because this shifts over the remaining elements, it has a
        .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
        .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
        .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1395 ----------------------------------------
        .               pub fn remove(&mut self, index: usize) -> T {
        .                   #[cold]
        .                   #[inline(never)]
        .                   #[track_caller]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("removal index (is {}) should be < len (is {})", index, len);
        .                   }
        .           
       21 ( 0.00%)          let len = self.len();
       80 ( 0.00%)          if index >= len {
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // infallible
        .                       let ret;
        .                       {
        .                           // the place we are taking from.
        .                           let ptr = self.as_mut_ptr().add(index);
        .                           // copy it out, unsafely having a copy of the value on
        .                           // the stack and in the vector at the same time.
       64 ( 0.00%)                  ret = ptr::read(ptr);
        .           
        .                           // Shift everything down to fill in that spot.
       48 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
        .                       }
       21 ( 0.00%)              self.set_len(len - 1);
        .                       ret
        .                   }
        .               }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
-- line 1428 ----------------------------------------
-- line 1442 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3, 4, 5];
        .               /// let keep = [false, true, true, false, true];
        .               /// let mut iter = keep.iter();
        .               /// vec.retain(|_| *iter.next().unwrap());
        .               /// assert_eq!(vec, [2, 3, 5]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
    7,149 ( 0.01%)      pub fn retain<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&T) -> bool,
        .               {
      512 ( 0.00%)          self.retain_mut(|elem| f(elem));
    6,824 ( 0.01%)      }
        .           
        .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
        .               /// });
        .               /// assert_eq!(vec, [2, 3, 4]);
        .               /// ```
        .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
        .               pub fn retain_mut<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
      865 ( 0.00%)          let original_len = self.len();
        .                   // Avoid double drop if the drop guard is not executed,
        .                   // since we may make some holes during the process.
        .                   unsafe { self.set_len(0) };
        .           
        .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
        .                   //      |<-              processed len   ->| ^- next to check
        .                   //                  |<-  deleted cnt     ->|
        .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
        .                       v: &'a mut Vec<T, A>,
        .                       processed_len: usize,
        .                       deleted_cnt: usize,
        .                       original_len: usize,
        .                   }
        .           
        .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
        .                       fn drop(&mut self) {
      526 ( 0.00%)                  if self.deleted_cnt > 0 {
        .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
        .                               unsafe {
        .                                   ptr::copy(
        .                                       self.v.as_ptr().add(self.processed_len),
      492 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
        .                                       self.original_len - self.processed_len,
        .                                   );
        .                               }
        .                           }
        .                           // SAFETY: After filling holes, all items are in contiguous memory.
        .                           unsafe {
        2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
        .                           }
        .                       }
        .                   }
        .           
        .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
        .           
        .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
        .                       original_len: usize,
        .                       f: &mut F,
        .                       g: &mut BackshiftOnDrop<'_, T, A>,
        .                   ) where
        .                       F: FnMut(&mut T) -> bool,
        .                   {
    7,811 ( 0.01%)              while g.processed_len != original_len {
        .                           // SAFETY: Unchecked element must be valid.
        .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
    1,857 ( 0.00%)                  if !f(cur) {
        .                               // Advance early to avoid double drop if `drop_in_place` panicked.
       52 ( 0.00%)                      g.processed_len += 1;
       18 ( 0.00%)                      g.deleted_cnt += 1;
        .                               // SAFETY: We never touch this element again after dropped.
        .                               unsafe { ptr::drop_in_place(cur) };
        .                               // We already advanced the counter.
        .                               if DELETED {
        .                                   continue;
        .                               } else {
        .                                   break;
        .                               }
        .                           }
        .                           if DELETED {
        .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
        .                               // We use copy for move, and never touch this element again.
        .                               unsafe {
        6 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
        .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
        .                               }
        .                           }
        4 ( 0.00%)                  g.processed_len += 1;
        .                       }
        .                   }
        .           
        .                   // Stage 1: Nothing was deleted.
        .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
        .           
        .                   // Stage 2: Some elements were deleted.
        .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
        .               ///
        .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
        .               ///
        .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
        .               /// ```
        .               #[stable(feature = "dedup_by", since = "1.16.0")]
        7 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
        .               where
        .                   F: FnMut(&mut T, &mut T) -> bool,
        .               {
        1 ( 0.00%)          let len = self.len();
       20 ( 0.00%)          if len <= 1 {
        .                       return;
        .                   }
        .           
        .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
        .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
        .                       /* Offset of the element we want to check if it is duplicate */
        .                       read: usize,
        .           
-- line 1627 ----------------------------------------
-- line 1699 ----------------------------------------
        .                       }
        .           
        .                       /* Technically we could let `gap` clean up with its Drop, but
        .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
        .                        * the codegen, so we just do it manually */
        .                       gap.vec.set_len(gap.write);
        .                       mem::forget(gap);
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Appends an element to the back of a collection.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
        .               ///
        .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1720 ----------------------------------------
        .               /// assert_eq!(vec, [1, 2, 3]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn push(&mut self, value: T) {
        .                   // This will panic or abort if we would allocate > isize::MAX bytes
        .                   // or if the length increment would overflow for zero-sized types.
1,399,513 ( 1.55%)          if self.len == self.buf.capacity() {
   15,426 ( 0.02%)              self.buf.reserve_for_push(self.len);
        .                   }
        .                   unsafe {
    6,216 ( 0.01%)              let end = self.as_mut_ptr().add(self.len);
        .                       ptr::write(end, value);
1,427,099 ( 1.58%)              self.len += 1;
        .                   }
        .               }
        .           
        .               /// Removes the last element from a vector and returns it, or [`None`] if it
        .               /// is empty.
        .               ///
        .               /// If you'd like to pop the first element, consider using
        .               /// [`VecDeque::pop_front`] instead.
-- line 1742 ----------------------------------------
-- line 1748 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3];
        .               /// assert_eq!(vec.pop(), Some(3));
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop(&mut self) -> Option<T> {
   24,944 ( 0.03%)          if self.len == 0 {
        6 ( 0.00%)              None
        .                   } else {
        .                       unsafe {
   17,578 ( 0.02%)                  self.len -= 1;
    3,280 ( 0.00%)                  Some(ptr::read(self.as_ptr().add(self.len())))
        .                       }
        .                   }
        .               }
        .           
        .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
        .               ///
        .               /// # Panics
        .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
        .               /// let mut vec2 = vec![4, 5, 6];
        .               /// vec.append(&mut vec2);
        .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
        .               /// assert_eq!(vec2, []);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "append", since = "1.4.0")]
        7 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
        .                   unsafe {
        .                       self.append_elements(other.as_slice() as _);
        .                       other.set_len(0);
        .                   }
        6 ( 0.00%)      }
        .           
        .               /// Appends elements to `Self` from other buffer.
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               unsafe fn append_elements(&mut self, other: *const [T]) {
        .                   let count = unsafe { (*other).len() };
        .                   self.reserve(count);
      984 ( 0.00%)          let len = self.len();
        .                   unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
    6,356 ( 0.01%)          self.len += count;
        .               }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// When the iterator **is** dropped, all elements in the range are removed
        .               /// from the vector, even if the iterator was not fully consumed. If the
        .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
-- line 1807 ----------------------------------------
-- line 1834 ----------------------------------------
        .                   // When the Drain is first created, it shortens the length of
        .                   // the source vector to make sure no uninitialized or moved-from elements
        .                   // are accessible at all if the Drain's destructor never gets to run.
        .                   //
        .                   // Drain will ptr::read out the values to remove.
        .                   // When finished, remaining tail of the vec is copied back to cover
        .                   // the hole, and the vector length is restored to the new length.
        .                   //
      365 ( 0.00%)          let len = self.len();
        .                   let Range { start, end } = slice::range(range, ..len);
        .           
        .                   unsafe {
        .                       // set self.vec length's to start, to be safe in case Drain is leaked
        .                       self.set_len(start);
        .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
        .                       // whole Drain iterator (like &mut T).
       14 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
      791 ( 0.00%)              Drain {
        .                           tail_start: end,
       14 ( 0.00%)                  tail_len: len - end,
        .                           iter: range_slice.iter(),
        .                           vec: NonNull::from(self),
        .                       }
        .                   }
        .               }
        .           
        .               /// Clears the vector, removing all values.
        .               ///
-- line 1861 ----------------------------------------
-- line 1869 ----------------------------------------
        .               ///
        .               /// v.clear();
        .               ///
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn clear(&mut self) {
   26,226 ( 0.03%)          self.truncate(0)
        .               }
        .           
        .               /// Returns the number of elements in the vector, also referred to
        .               /// as its 'length'.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1885 ----------------------------------------
-- line 1900 ----------------------------------------
        .               /// let mut v = Vec::new();
        .               /// assert!(v.is_empty());
        .               ///
        .               /// v.push(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn is_empty(&self) -> bool {
    9,026 ( 0.01%)          self.len() == 0
        .               }
        .           
        .               /// Splits the collection into two at the given index.
        .               ///
        .               /// Returns a newly allocated vector containing the elements in the range
        .               /// `[at, len)`. After the call, the original vector will be left containing
        .               /// the elements `[0, at)` with its previous capacity unchanged.
        .               ///
-- line 1916 ----------------------------------------
-- line 1935 ----------------------------------------
        .                   A: Clone,
        .               {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(at: usize, len: usize) -> ! {
        .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
        .                   }
        .           
        6 ( 0.00%)          if at > self.len() {
        .                       assert_failed(at, self.len());
        .                   }
        .           
        6 ( 0.00%)          if at == 0 {
        .                       // the new vector can take over the original buffer and avoid the copy
        .                       return mem::replace(
        .                           self,
        .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
        .                       );
        .                   }
        .           
        .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
        .               ///
        .               /// let mut vec = vec![];
        .               /// let mut p = 1;
        .               /// vec.resize_with(4, || { p *= 2; p });
        .               /// assert_eq!(vec, [2, 4, 8, 16]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
      481 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
        .               where
        .                   F: FnMut() -> T,
        .               {
       67 ( 0.00%)          let len = self.len();
      134 ( 0.00%)          if new_len > len {
      395 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
      414 ( 0.00%)      }
        .           
        .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
        .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
        .               /// `'a`. If the type has only static references, or none at all, then this
        .               /// may be chosen to be `'static`.
        .               ///
        .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
        .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2070 ----------------------------------------
        .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
        .               #[inline]
        .               pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
        .                   // Note:
        .                   // This method is not implemented in terms of `split_at_spare_mut`,
        .                   // to prevent invalidation of pointers to the buffer.
        .                   unsafe {
        .                       slice::from_raw_parts_mut(
        2 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
       18 ( 0.00%)                  self.buf.capacity() - self.len,
        .                       )
        .                   }
        .               }
        .           
        .               /// Returns vector content as a slice of `T`, along with the remaining spare
        .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
        .               ///
        .               /// The returned spare capacity slice can be used to fill the vector with data
-- line 2087 ----------------------------------------
-- line 2189 ----------------------------------------
        .               /// assert_eq!(vec, ["hello", "world", "world"]);
        .               ///
        .               /// let mut vec = vec![1, 2, 3, 4];
        .               /// vec.resize(2, 0);
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize", since = "1.5.0")]
       10 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
        1 ( 0.00%)          let len = self.len();
        .           
        3 ( 0.00%)          if new_len > len {
       66 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
        1 ( 0.00%)      }
        .           
        .               /// Clones and appends all elements in a slice to the `Vec`.
        .               ///
        .               /// Iterates over the slice `other`, clones each element, and then appends
        .               /// it to this `Vec`. The `other` slice is traversed in-order.
        .               ///
        .               /// Note that this function is same as [`extend`] except that it is
        .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2291 ----------------------------------------
        .               fn last(mut self) -> T {
        .                   (self.0)()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               #[cfg(not(no_global_oom_handling))]
        .               /// Extend the vector by `n` values, using the given generator.
    5,156 ( 0.01%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
        .                   self.reserve(n);
        .           
        .                   unsafe {
      120 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
        .                       // Use SetLenOnDrop to work around bug where compiler
        .                       // might not realize the store through `ptr` through self.set_len()
        .                       // don't alias.
        .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
        .           
        .                       // Write all elements except the last one
        .                       for _ in 1..n {
        .                           ptr::write(ptr, value.next());
        .                           ptr = ptr.offset(1);
        .                           // Increment the length in every step in case next() panics
        .                           local_len.increment_len(1);
        .                       }
        .           
    3,382 ( 0.00%)              if n > 0 {
        .                           // We can write the last element directly without cloning needlessly
        .                           ptr::write(ptr, value.last());
        .                           local_len.increment_len(1);
        .                       }
        .           
        .                       // len set by scope guard
        .                   }
    4,043 ( 0.00%)      }
        .           }
        .           
        .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
        .               /// Removes consecutive repeated elements in the vector according to the
        .               /// [`PartialEq`] trait implementation.
        .               ///
        .               /// If the vector is sorted, this removes all duplicates.
        .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
        .               ///
        .               /// vec.dedup();
        .               ///
        .               /// assert_eq!(vec, [1, 2, 3, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn dedup(&mut self) {
        2 ( 0.00%)          self.dedup_by(|a, b| a == b)
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Internal methods and functions
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
      487 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
    5,362 ( 0.01%)      <T as SpecFromElem>::from_elem(elem, n, Global)
      635 ( 0.00%)  }
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[unstable(feature = "allocator_api", issue = "32838")]
        .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
        .               <T as SpecFromElem>::from_elem(elem, n, alloc)
        .           }
        .           
-- line 2367 ----------------------------------------
-- line 2424 ----------------------------------------
        .           // Common trait implementations for Vec
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
        .               type Target = [T];
        .           
        .               fn deref(&self) -> &[T] {
  129,614 ( 0.14%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
        .               fn deref_mut(&mut self) -> &mut [T] {
   31,073 ( 0.03%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           trait SpecCloneFrom {
        .               fn clone_from(this: &mut Self, other: &Self);
        .           }
        .           
-- line 2447 ----------------------------------------
-- line 2468 ----------------------------------------
        .                   this.extend_from_slice(other);
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
        .               #[cfg(not(test))]
    4,213 ( 0.00%)      fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
        2 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
    5,301 ( 0.01%)      }
        .           
        .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
        .               // required for this method definition, is not available. Instead use the
        .               // `slice::to_vec`  function which is only available with cfg(test)
        .               // NB see the slice::hack module in slice.rs for more information
        .               #[cfg(test)]
        .               fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
        .               type Output = I::Output;
        .           
        .               #[inline]
        .               fn index(&self, index: I) -> &Self::Output {
    5,643 ( 0.01%)          Index::index(&**self, index)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_on_unimplemented(
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
-- line 2534 ----------------------------------------
-- line 2539 ----------------------------------------
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> FromIterator<T> for Vec<T> {
        .               #[inline]
        .               fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
   21,869 ( 0.02%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
        .               type Item = T;
        .               type IntoIter = IntoIter<T, A>;
        .           
-- line 2555 ----------------------------------------
-- line 2564 ----------------------------------------
        .               /// for s in v.into_iter() {
        .               ///     // s has type String, not &String
        .               ///     println!("{}", s);
        .               /// }
        .               /// ```
        .               #[inline]
        .               fn into_iter(self) -> IntoIter<T, A> {
        .                   unsafe {
    9,875 ( 0.01%)              let mut me = ManuallyDrop::new(self);
        .                       let alloc = ptr::read(me.allocator());
        .                       let begin = me.as_mut_ptr();
        .                       let end = if mem::size_of::<T>() == 0 {
        .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
        .                       } else {
        .                           begin.add(me.len()) as *const T
        .                       };
        .                       let cap = me.buf.capacity();
    3,463 ( 0.00%)              IntoIter {
        .                           buf: NonNull::new_unchecked(begin),
        .                           phantom: PhantomData,
        .                           cap,
        .                           alloc,
        .                           ptr: begin,
        .                           end,
        .                       }
        .                   }
-- line 2589 ----------------------------------------
-- line 2601 ----------------------------------------
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
        .               type Item = &'a mut T;
        .               type IntoIter = slice::IterMut<'a, T>;
        .           
        .               fn into_iter(self) -> slice::IterMut<'a, T> {
    1,304 ( 0.00%)          self.iter_mut()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
        .               #[inline]
       24 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
   11,583 ( 0.01%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
       24 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, item: T) {
        .                   self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
-- line 2627 ----------------------------------------
-- line 2636 ----------------------------------------
        .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
        .                   // This is the case for a general iterator.
        .                   //
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iterator {
        .                   //          self.push(item);
        .                   //      }
    1,354 ( 0.00%)          while let Some(element) = iterator.next() {
      345 ( 0.00%)              let len = self.len();
    7,268 ( 0.01%)              if len == self.capacity() {
       24 ( 0.00%)                  let (lower, _) = iterator.size_hint();
        .                           self.reserve(lower.saturating_add(1));
        .                       }
        .                       unsafe {
        .                           ptr::write(self.as_mut_ptr().add(len), element);
        .                           // Since next() executes user code which can panic we have to bump the length
        .                           // after each step.
        .                           // NB can't overflow since we would have had to alloc the address space
    4,660 ( 0.01%)                  self.set_len(len + 1);
        .                       }
        .                   }
       23 ( 0.00%)      }
        .           
        .               /// Creates a splicing iterator that replaces the specified range in the vector
        .               /// with the given `replace_with` iterator and yields the removed items.
        .               /// `replace_with` does not need to be the same length as `range`.
        .               ///
        .               /// `range` is removed even if the iterator is not consumed until the end.
        .               ///
        .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2745 ----------------------------------------
        .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
        .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
        .               /// ```
        .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
        .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
       31 ( 0.00%)          let old_len = self.len();
        .           
        .                   // Guard against us getting leaked (leak amplification)
        .                   unsafe {
        .                       self.set_len(0);
        .                   }
        .           
       56 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
        .               }
        .           }
        .           
        .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
        .           ///
        .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
        .           /// append the entire slice at once.
        .           ///
-- line 2768 ----------------------------------------
-- line 2803 ----------------------------------------
        .               #[inline]
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   Ord::cmp(&**self, &**other)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
   20,361 ( 0.02%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // use drop for [T]
        .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
        .                       // could avoid questions of validity in certain cases
    9,238 ( 0.01%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
        .                   }
        .                   // RawVec handles deallocation
   24,040 ( 0.03%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
        .           impl<T> const Default for Vec<T> {
        .               /// Creates an empty `Vec<T>`.
        .               fn default() -> Vec<T> {
        .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
        .               /// newly-allocated buffer with exactly the right capacity.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
        .               /// ```
        .               fn from(v: Vec<T, A>) -> Self {
        4 ( 0.00%)          v.into_boxed_slice()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl From<&str> for Vec<u8> {
        .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
        .               ///
-- line 2992 ----------------------------------------

   34,802 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir              

-- line 36 ----------------------------------------
     .           use rustc_session::parse::ParseSess;
     .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
     .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
     .           use tracing::debug;
     .           
     .           use std::ops::Range;
     .           use std::{cmp, mem, slice};
     .           
   508 ( 0.00%)  bitflags::bitflags! {
     .               struct Restrictions: u8 {
     .                   const STMT_EXPR         = 1 << 0;
     .                   const NO_STRUCT_LITERAL = 1 << 1;
     .                   const CONST_EXPR        = 1 << 2;
     .               }
     .           }
     .           
     .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
     .                               $self.bump();
     .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
     .                           }
     .                       }
     .                   }
     .               };
     .           }
     .           
 1,976 ( 0.00%)  #[derive(Clone)]
     .           pub struct Parser<'a> {
    86 ( 0.00%)      pub sess: &'a ParseSess,
     .               /// The current token.
    70 ( 0.00%)      pub token: Token,
     .               /// The spacing for the current token
    35 ( 0.00%)      pub token_spacing: Spacing,
     .               /// The previous token.
   105 ( 0.00%)      pub prev_token: Token,
    35 ( 0.00%)      pub capture_cfg: bool,
    70 ( 0.00%)      restrictions: Restrictions,
    70 ( 0.00%)      expected_tokens: Vec<TokenType>,
     .               // Important: This must only be advanced from `next_tok`
     .               // to ensure that `token_cursor.num_next_calls` is updated properly
     .               token_cursor: TokenCursor,
    70 ( 0.00%)      desugar_doc_comments: bool,
     .               /// This field is used to keep track of how many left angle brackets we have seen. This is
     .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
     .               /// appropriately.
     .               ///
     .               /// See the comments in the `parse_path_segment` function for more details.
    70 ( 0.00%)      unmatched_angle_bracket_count: u32,
   105 ( 0.00%)      max_angle_bracket_count: u32,
     .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
     .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
     .               /// error.
    35 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
     .               last_unexpected_token_span: Option<Span>,
     .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
     .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
     .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
     .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
     .               subparser_name: Option<&'static str>,
     .               capture_state: CaptureState,
     .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
     .           /// the first macro inner attribute to invoke a proc-macro).
     .           /// When create a `TokenStream`, the inner attributes get inserted
     .           /// into the proper place in the token stream.
     .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
     .           
     .           /// Controls how we capture tokens. Capturing can be expensive,
     .           /// so we try to avoid performing capturing in cases where
     .           /// we will never need an `AttrAnnotatedTokenStream`
    35 ( 0.00%)  #[derive(Copy, Clone)]
     .           pub enum Capturing {
     .               /// We aren't performing any capturing - this is the default mode.
     .               No,
     .               /// We are capturing tokens
     .               Yes,
     .           }
     .           
   156 ( 0.00%)  #[derive(Clone)]
     .           struct CaptureState {
   140 ( 0.00%)      capturing: Capturing,
    35 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
     .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
     .           }
     .           
     .           impl<'a> Drop for Parser<'a> {
     .               fn drop(&mut self) {
   323 ( 0.00%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
     .               }
     .           }
     .           
 3,956 ( 0.00%)  #[derive(Clone)]
     .           struct TokenCursor {
     .               frame: TokenCursorFrame,
   897 ( 0.00%)      stack: Vec<TokenCursorFrame>,
     .               desugar_doc_comments: bool,
     .               // Counts the number of calls to `next` or `next_desugared`,
     .               // depending on whether `desugar_doc_comments` is set.
   288 ( 0.00%)      num_next_calls: usize,
     .               // During parsing, we may sometimes need to 'unglue' a
     .               // glued token into two component tokens
     .               // (e.g. '>>' into '>' and '>), so that the parser
     .               // can consume them one at a time. This process
     .               // bypasses the normal capturing mechanism
     .               // (e.g. `num_next_calls` will not be incremented),
     .               // since the 'unglued' tokens due not exist in
     .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
     .               // in `Option<Vec<u8>>` requires us to unglue
     .               // the trailing `>>` token. The `break_last_token`
     .               // field is used to track this token - it gets
     .               // appended to the captured stream when
     .               // we evaluate a `LazyTokenStream`
     .               break_last_token: bool,
     .           }
     .           
 1,780 ( 0.00%)  #[derive(Clone)]
     .           struct TokenCursorFrame {
   470 ( 0.00%)      delim: token::DelimToken,
     .               span: DelimSpan,
     .               open_delim: bool,
   940 ( 0.00%)      tree_cursor: tokenstream::Cursor,
     .               close_delim: bool,
     .           }
     .           
     .           impl TokenCursorFrame {
     .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
   340 ( 0.00%)          TokenCursorFrame {
     .                       delim,
     .                       span,
     .                       open_delim: false,
   658 ( 0.00%)              tree_cursor: tts.into_trees(),
     .                       close_delim: false,
     .                   }
     .               }
     .           }
     .           
     .           impl TokenCursor {
38,424 ( 0.04%)      fn next(&mut self) -> (Token, Spacing) {
     .                   loop {
19,600 ( 0.02%)              let (tree, spacing) = if !self.frame.open_delim {
   522 ( 0.00%)                  self.frame.open_delim = true;
 2,610 ( 0.00%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
36,835 ( 0.04%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
     .                           tree
 2,134 ( 0.00%)              } else if !self.frame.close_delim {
   490 ( 0.00%)                  self.frame.close_delim = true;
 2,450 ( 0.00%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
   980 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
 6,370 ( 0.01%)                  self.frame = frame;
     .                           continue;
     .                       } else {
 1,566 ( 0.00%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
     .                       };
     .           
 7,448 ( 0.01%)              match tree {
     .                           TokenTree::Token(token) => {
25,616 ( 0.03%)                      return (token, spacing);
     .                           }
     .                           TokenTree::Delimited(sp, delim, tts) => {
     .                               let frame = TokenCursorFrame::new(sp, delim, tts);
     .                               self.stack.push(mem::replace(&mut self.frame, frame));
     .                           }
     .                       }
     .                   }
25,616 ( 0.03%)      }
     .           
14,360 ( 0.02%)      fn next_desugared(&mut self) -> (Token, Spacing) {
 4,308 ( 0.00%)          let (data, attr_style, sp) = match self.next() {
     .                       (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
     .                           (data, attr_style, span)
     .                       }
 7,180 ( 0.01%)              tok => return tok,
     .                   };
     .           
     .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
     .                   // required to wrap the text.
     .                   let mut num_of_hashes = 0;
     .                   let mut count = 0;
     .                   for ch in data.as_str().chars() {
     .                       count = match ch {
-- line 298 ----------------------------------------
-- line 332 ----------------------------------------
     .                                   .iter()
     .                                   .cloned()
     .                                   .collect::<TokenStream>()
     .                           },
     .                       ),
     .                   ));
     .           
     .                   self.next()
12,924 ( 0.01%)      }
     .           }
     .           
   120 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
     .           enum TokenType {
    96 ( 0.00%)      Token(TokenKind),
     .               Keyword(Symbol),
     .               Operator,
     .               Lifetime,
     .               Ident,
     .               Path,
     .               Type,
     .               Const,
     .           }
-- line 353 ----------------------------------------
-- line 378 ----------------------------------------
     .               /// The separator token.
     .               sep: Option<TokenKind>,
     .               /// `true` if a trailing separator is allowed.
     .               trailing_sep_allowed: bool,
     .           }
     .           
     .           impl SeqSep {
     .               fn trailing_allowed(t: TokenKind) -> SeqSep {
     3 ( 0.00%)          SeqSep { sep: Some(t), trailing_sep_allowed: true }
     .               }
     .           
     .               fn none() -> SeqSep {
     .                   SeqSep { sep: None, trailing_sep_allowed: false }
     .               }
     .           }
     .           
     .           pub enum FollowedByType {
     .               Yes,
     .               No,
     .           }
     .           
     .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
    36 ( 0.00%)      Some(match token.kind {
    72 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
    72 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
    72 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
     .                   token::DocComment(..) => "doc comment",
     .                   _ => return None,
     .               })
     .           }
     .           
   126 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
    36 ( 0.00%)      let token_str = pprust::token_to_string(token);
     .               match token_descr_opt(token) {
     .                   Some(prefix) => format!("{} `{}`", prefix, token_str),
   126 ( 0.00%)          _ => format!("`{}`", token_str),
     .               }
    90 ( 0.00%)  }
     .           
     .           impl<'a> Parser<'a> {
   952 ( 0.00%)      pub fn new(
     .                   sess: &'a ParseSess,
     .                   tokens: TokenStream,
     .                   desugar_doc_comments: bool,
     .                   subparser_name: Option<&'static str>,
     .               ) -> Self {
    68 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
   136 ( 0.00%)          start_frame.open_delim = true;
     .                   start_frame.close_delim = true;
     .           
 2,108 ( 0.00%)          let mut parser = Parser {
     .                       sess,
    68 ( 0.00%)              token: Token::dummy(),
     .                       token_spacing: Spacing::Alone,
    68 ( 0.00%)              prev_token: Token::dummy(),
     .                       capture_cfg: false,
     .                       restrictions: Restrictions::empty(),
     .                       expected_tokens: Vec::new(),
     .                       token_cursor: TokenCursor {
   408 ( 0.00%)                  frame: start_frame,
     .                           stack: Vec::new(),
     .                           num_next_calls: 0,
     .                           desugar_doc_comments,
     .                           break_last_token: false,
     .                       },
     .                       desugar_doc_comments,
     .                       unmatched_angle_bracket_count: 0,
     .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
     .                           capturing: Capturing::No,
     .                           replace_ranges: Vec::new(),
     .                           inner_attr_ranges: Default::default(),
     .                       },
     .                       current_closure: None,
     .                   };
     .           
     .                   // Make parser point to the first token.
   136 ( 0.00%)          parser.bump();
     .           
     .                   parser
   612 ( 0.00%)      }
     .           
     .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
     .                   loop {
18,078 ( 0.02%)              let (mut next, spacing) = if self.desugar_doc_comments {
 5,744 ( 0.01%)                  self.token_cursor.next_desugared()
     .                       } else {
 4,731 ( 0.01%)                  self.token_cursor.next()
     .                       };
12,052 ( 0.01%)              self.token_cursor.num_next_calls += 1;
     .                       // We've retrieved an token from the underlying
     .                       // cursor, so we no longer need to worry about
     .                       // an unglued token. See `break_and_eat` for more details
 3,013 ( 0.00%)              self.token_cursor.break_last_token = false;
12,052 ( 0.01%)              if next.span.is_dummy() {
     .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
   340 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
     .                       }
10,509 ( 0.01%)              if matches!(
 6,026 ( 0.01%)                  next.kind,
     .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
     .                       ) {
     .                           continue;
     .                       }
11,508 ( 0.01%)              return (next, spacing);
     .                   }
     .               }
     .           
     .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
     .                   match self.expect_one_of(&[], &[]) {
     .                       Err(e) => Err(e),
     .                       // We can get `Ok(true)` from `recover_closing_delimiter`
     .                       // which is called in `expected_one_of_not_found`.
     .                       Ok(_) => FatalError.raise(),
     .                   }
     .               }
     .           
     .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
 1,017 ( 0.00%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
   113 ( 0.00%)          if self.expected_tokens.is_empty() {
   120 ( 0.00%)              if self.token == *t {
   100 ( 0.00%)                  self.bump();
     .                           Ok(false)
     .                       } else {
     .                           self.unexpected_try_recover(t)
     .                       }
     .                   } else {
 1,116 ( 0.00%)              self.expect_one_of(slice::from_ref(t), &[])
     .                   }
 1,695 ( 0.00%)      }
     .           
     .               /// Expect next token to be edible or inedible token.  If edible,
     .               /// then consume it; if inedible, then return without consuming
     .               /// anything.  Signal a fatal error if next token is unexpected.
 1,464 ( 0.00%)      pub fn expect_one_of(
     .                   &mut self,
     .                   edible: &[TokenKind],
     .                   inedible: &[TokenKind],
     .               ) -> PResult<'a, bool /* recovered */> {
   244 ( 0.00%)          if edible.contains(&self.token.kind) {
   285 ( 0.00%)              self.bump();
     .                       Ok(false)
     .                   } else if inedible.contains(&self.token.kind) {
     .                       // leave it in the input
     .                       Ok(false)
     .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
     .                       FatalError.raise();
     .                   } else {
     .                       self.expected_one_of_not_found(edible, inedible)
     .                   }
 1,830 ( 0.00%)      }
     .           
     .               // Public for rustfmt usage.
     .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
 1,252 ( 0.00%)          self.parse_ident_common(true)
     .               }
     .           
     .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
   936 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
     .                       TokenKind::DocComment(..) => {
     .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
     .                       }
     .                       _ => self.expected_ident_found(),
     .                   })
     .               }
     .           
 2,184 ( 0.00%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
   312 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
 1,872 ( 0.00%)          if !is_raw && ident.is_reserved() {
     .                       let mut err = self.expected_ident_found();
     .                       if recover {
     .                           err.emit();
     .                       } else {
     .                           return Err(err);
     .                       }
     .                   }
 1,248 ( 0.00%)          self.bump();
     .                   Ok(ident)
 3,120 ( 0.00%)      }
     .           
     .               /// Checks if the next token is `tok`, and returns `true` if so.
     .               ///
     .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
     .               /// encountered.
23,268 ( 0.03%)      fn check(&mut self, tok: &TokenKind) -> bool {
10,196 ( 0.01%)          let is_present = self.token == *tok;
 6,932 ( 0.01%)          if !is_present {
13,024 ( 0.01%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
     .                   }
     .                   is_present
23,268 ( 0.03%)      }
     .           
     .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
   132 ( 0.00%)      pub fn eat(&mut self, tok: &TokenKind) -> bool {
 4,844 ( 0.01%)          let is_present = self.check(tok);
 3,228 ( 0.00%)          if is_present {
   948 ( 0.00%)              self.bump()
     .                   }
     .                   is_present
   165 ( 0.00%)      }
     .           
     .               /// If the next token is the given keyword, returns `true` without eating it.
     .               /// An expectation is also added for diagnostics purposes.
 1,255 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
   196 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
 5,681 ( 0.01%)          self.token.is_keyword(kw)
     .               }
     .           
     .               /// If the next token is the given keyword, eats it and returns `true`.
     .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
     .               // Public for rustfmt usage.
 1,385 ( 0.00%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
 1,124 ( 0.00%)          if self.check_keyword(kw) {
   120 ( 0.00%)              self.bump();
     .                       true
     .                   } else {
     .                       false
     .                   }
 1,385 ( 0.00%)      }
     .           
     .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
    36 ( 0.00%)          if self.token.is_keyword(kw) {
     9 ( 0.00%)              self.bump();
     .                       true
     .                   } else {
     .                       false
     .                   }
     .               }
     .           
     .               /// If the given word is not a keyword, signals an error.
     .               /// If the next token is not the given word, signals an error.
     .               /// Otherwise, eats it.
     5 ( 0.00%)      fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
     .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
     4 ( 0.00%)      }
     .           
     .               /// Is the given keyword `kw` followed by a non-reserved identifier?
 2,032 ( 0.00%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
 1,016 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
 2,286 ( 0.00%)      }
     .           
   900 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
   428 ( 0.00%)          if ok {
     .                       true
     .                   } else {
   176 ( 0.00%)              self.expected_tokens.push(typ);
     .                       false
     .                   }
   900 ( 0.00%)      }
     .           
     .               fn check_ident(&mut self) -> bool {
    90 ( 0.00%)          self.check_or_expected(self.token.is_ident(), TokenType::Ident)
     .               }
     .           
   492 ( 0.00%)      fn check_path(&mut self) -> bool {
 1,078 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
   615 ( 0.00%)      }
     .           
     .               fn check_type(&mut self) -> bool {
    32 ( 0.00%)          self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
     .               }
     .           
     .               fn check_const_arg(&mut self) -> bool {
    32 ( 0.00%)          self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
     .               }
     .           
   144 ( 0.00%)      fn check_inline_const(&self, dist: usize) -> bool {
    80 ( 0.00%)          self.is_keyword_ahead(dist, &[kw::Const])
     .                       && self.look_ahead(dist + 1, |t| match t.kind {
     .                           token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),
     .                           token::OpenDelim(DelimToken::Brace) => true,
     .                           _ => false,
     .                       })
   144 ( 0.00%)      }
     .           
     .               /// Checks to see if the next token is either `+` or `+=`.
     .               /// Otherwise returns `false`.
     .               fn check_plus(&mut self) -> bool {
    24 ( 0.00%)          self.check_or_expected(
    12 ( 0.00%)              self.token.is_like_plus(),
    12 ( 0.00%)              TokenType::Token(token::BinOp(token::Plus)),
     .                   )
     .               }
     .           
     .               /// Eats the expected token if it's present possibly breaking
     .               /// compound tokens like multi-character operators in process.
     .               /// Returns `true` if the token was eaten.
 1,248 ( 0.00%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
   728 ( 0.00%)          if self.token.kind == expected {
    18 ( 0.00%)              self.bump();
     .                       return true;
     .                   }
   475 ( 0.00%)          match self.token.kind.break_two_token_op() {
     .                       Some((first, second)) if first == expected => {
     .                           let first_span = self.sess.source_map().start_point(self.token.span);
     .                           let second_span = self.token.span.with_lo(first_span.hi());
     .                           self.token = Token::new(first, first_span);
     .                           // Keep track of this token - if we end token capturing now,
     .                           // we'll want to append this token to the captured stream.
     .                           //
     .                           // If we consume any additional tokens, then this token
-- line 682 ----------------------------------------
-- line 684 ----------------------------------------
     .                           // and `next_tok` will set this field to `None`
     .                           self.token_cursor.break_last_token = true;
     .                           // Use the spacing of the glued token as the spacing
     .                           // of the unglued second token.
     .                           self.bump_with((Token::new(second, second_span), self.token_spacing));
     .                           true
     .                       }
     .                       _ => {
   285 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
     .                           false
     .                       }
     .                   }
 1,316 ( 0.00%)      }
     .           
     .               /// Eats `+` possibly breaking tokens like `+=` in process.
     .               fn eat_plus(&mut self) -> bool {
     .                   self.break_and_eat(token::BinOp(token::Plus))
     .               }
     .           
     .               /// Eats `&` possibly breaking tokens like `&&` in process.
     .               /// Signals an error if `&` is not eaten.
     .               fn expect_and(&mut self) -> PResult<'a, ()> {
    24 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
     .               }
     .           
     .               /// Eats `|` possibly breaking tokens like `||` in process.
     .               /// Signals an error if `|` was not eaten.
     .               fn expect_or(&mut self) -> PResult<'a, ()> {
     6 ( 0.00%)          if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
     .               }
     .           
     .               /// Eats `<` possibly breaking tokens like `<<` in process.
    24 ( 0.00%)      fn eat_lt(&mut self) -> bool {
   296 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
   196 ( 0.00%)          if ate {
     .                       // See doc comment for `unmatched_angle_bracket_count`.
     8 ( 0.00%)              self.unmatched_angle_bracket_count += 1;
     8 ( 0.00%)              self.max_angle_bracket_count += 1;
     .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
     .                   }
     .                   ate
    24 ( 0.00%)      }
     .           
     .               /// Eats `<` possibly breaking tokens like `<<` in process.
     .               /// Signals an error if `<` was not eaten.
     .               fn expect_lt(&mut self) -> PResult<'a, ()> {
     .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
     .               }
     .           
     .               /// Eats `>` possibly breaking tokens like `>>` in process.
     .               /// Signals an error if `>` was not eaten.
     .               fn expect_gt(&mut self) -> PResult<'a, ()> {
    12 ( 0.00%)          if self.break_and_eat(token::Gt) {
     .                       // See doc comment for `unmatched_angle_bracket_count`.
     6 ( 0.00%)              if self.unmatched_angle_bracket_count > 0 {
     4 ( 0.00%)                  self.unmatched_angle_bracket_count -= 1;
     .                           debug!("expect_gt: (decrement) count={:?}", self.unmatched_angle_bracket_count);
     .                       }
     .                       Ok(())
     .                   } else {
     .                       self.unexpected()
     .                   }
     .               }
     .           
     .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
     .                   kets.iter().any(|k| match expect {
   186 ( 0.00%)              TokenExpectType::Expect => self.check(k),
    15 ( 0.00%)              TokenExpectType::NoExpect => self.token == **k,
     .                   })
     .               }
     .           
     .               fn parse_seq_to_before_tokens<T>(
     .                   &mut self,
     .                   kets: &[&TokenKind],
     .                   sep: SeqSep,
     .                   expect: TokenExpectType,
-- line 759 ----------------------------------------
-- line 761 ----------------------------------------
     .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
     .                   let mut first = true;
     .                   let mut recovered = false;
     .                   let mut trailing = false;
     .                   let mut v = vec![];
     .                   let unclosed_delims = !self.unclosed_delims.is_empty();
     .           
     .                   while !self.expect_any_with_type(kets, expect) {
   247 ( 0.00%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
     .                           break;
     .                       }
   228 ( 0.00%)              if let Some(ref t) = sep.sep {
   301 ( 0.00%)                  if first {
     .                               first = false;
     .                           } else {
    28 ( 0.00%)                      match self.expect(t) {
     .                                   Ok(false) => {
     .                                       self.current_closure.take();
     .                                   }
     .                                   Ok(true) => {
     .                                       self.current_closure.take();
     .                                       recovered = true;
     .                                       break;
     .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
     .                                               e.cancel();
     .                                               break;
     .                                           }
     .                                       }
     .                                   }
     .                               }
     .                           }
     .                       }
    86 ( 0.00%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
     .                           trailing = true;
     .                           break;
     .                       }
     .           
    38 ( 0.00%)              let t = f(self)?;
    70 ( 0.00%)              v.push(t);
     .                   }
     .           
   312 ( 0.00%)          Ok((v, trailing, recovered))
     .               }
     .           
     .               fn recover_missing_braces_around_closure_body(
     .                   &mut self,
     .                   closure_spans: ClosureSpans,
     .                   mut expect_err: DiagnosticBuilder<'_>,
     .               ) -> PResult<'a, ()> {
     .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
     .               /// `f` must consume tokens until reaching the next separator or
     .               /// closing bracket.
     .               fn parse_seq_to_before_end<T>(
     .                   &mut self,
     .                   ket: &TokenKind,
     .                   sep: SeqSep,
     .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
     .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
   311 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
     .               }
     .           
     .               /// Parses a sequence, including the closing delimiter. The function
     .               /// `f` must consume tokens until reaching the next separator or
     .               /// closing bracket.
   680 ( 0.00%)      fn parse_seq_to_end<T>(
     .                   &mut self,
     .                   ket: &TokenKind,
     .                   sep: SeqSep,
     .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
     .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
   222 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
    86 ( 0.00%)          if !recovered {
     .                       self.eat(ket);
     .                   }
   645 ( 0.00%)          Ok((val, trailing))
   544 ( 0.00%)      }
     .           
     .               /// Parses a sequence, including the closing delimiter. The function
     .               /// `f` must consume tokens until reaching the next separator or
     .               /// closing bracket.
     .               fn parse_unspanned_seq<T>(
     .                   &mut self,
     .                   bra: &TokenKind,
     .                   ket: &TokenKind,
     .                   sep: SeqSep,
     .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
     .               ) -> PResult<'a, (Vec<T>, bool)> {
   217 ( 0.00%)          self.expect(bra)?;
   544 ( 0.00%)          self.parse_seq_to_end(ket, sep, f)
     .               }
     .           
     .               fn parse_delim_comma_seq<T>(
     .                   &mut self,
     .                   delim: DelimToken,
     .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
     .               ) -> PResult<'a, (Vec<T>, bool)> {
     .                   self.parse_unspanned_seq(
    76 ( 0.00%)              &token::OpenDelim(delim),
    84 ( 0.00%)              &token::CloseDelim(delim),
     .                       SeqSep::trailing_allowed(token::Comma),
     .                       f,
     .                   )
     .               }
     .           
     .               fn parse_paren_comma_seq<T>(
     .                   &mut self,
     .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
     .               ) -> PResult<'a, (Vec<T>, bool)> {
     .                   self.parse_delim_comma_seq(token::Paren, f)
     .               }
     .           
     .               /// Advance the parser by one token using provided token as the next one.
37,401 ( 0.04%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
     .                   // Bumping after EOF is a bad sign, usually an infinite loop.
17,262 ( 0.02%)          if self.prev_token.kind == TokenKind::Eof {
     .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
     .                       self.span_bug(self.token.span, msg);
     .                   }
     .           
     .                   // Update the current and previous tokens.
11,508 ( 0.01%)          self.prev_token = mem::replace(&mut self.token, next_token);
 2,877 ( 0.00%)          self.token_spacing = next_spacing;
     .           
     .                   // Diagnostics.
 2,877 ( 0.00%)          self.expected_tokens.clear();
     .               }
     .           
     .               /// Advance the parser by one token.
23,016 ( 0.03%)      pub fn bump(&mut self) {
11,508 ( 0.01%)          let next_token = self.next_tok(self.token.span);
17,262 ( 0.02%)          self.bump_with(next_token);
23,016 ( 0.03%)      }
     .           
     .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
     .               /// When `dist == 0` then the current token is looked at.
     .               pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
    34 ( 0.00%)          if dist == 0 {
    17 ( 0.00%)              return looker(&self.token);
     .                   }
     .           
   441 ( 0.00%)          let frame = &self.token_cursor.frame;
   493 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
     .                       let all_normal = (0..dist).all(|i| {
 1,020 ( 0.00%)                  let token = frame.tree_cursor.look_ahead(i);
 1,327 ( 0.00%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
     .                       });
     .                       if all_normal {
 1,646 ( 0.00%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
   555 ( 0.00%)                      Some(tree) => match tree {
   259 ( 0.00%)                          TokenTree::Token(token) => looker(token),
     .                                   TokenTree::Delimited(dspan, delim, _) => {
   124 ( 0.00%)                              looker(&Token::new(token::OpenDelim(*delim), dspan.open))
     .                                   }
     .                               },
   418 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
     .                           };
     .                       }
     .                   }
     .           
     .                   let mut cursor = self.token_cursor.clone();
     .                   let mut i = 0;
   172 ( 0.00%)          let mut token = Token::dummy();
     .                   while i < dist {
 1,323 ( 0.00%)              token = cursor.next().0;
   631 ( 0.00%)              if matches!(
   394 ( 0.00%)                  token.kind,
     .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
     .                       ) {
     .                           continue;
     .                       }
     .                       i += 1;
     .                   }
    50 ( 0.00%)          return looker(&token);
     .               }
     .           
     .               /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.
   153 ( 0.00%)      fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {
    37 ( 0.00%)          self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))
   153 ( 0.00%)      }
     .           
     .               /// Parses asyncness: `async` or nothing.
     .               fn parse_asyncness(&mut self) -> Async {
     .                   if self.eat_keyword(kw::Async) {
     .                       let span = self.prev_token.uninterpolated_span();
     .                       Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }
     .                   } else {
     .                       Async::No
     .                   }
     .               }
     .           
     .               /// Parses unsafety: `unsafe` or nothing.
     8 ( 0.00%)      fn parse_unsafety(&mut self) -> Unsafe {
     .                   if self.eat_keyword(kw::Unsafe) {
     .                       Unsafe::Yes(self.prev_token.uninterpolated_span())
     .                   } else {
     .                       Unsafe::No
     .                   }
    32 ( 0.00%)      }
     .           
     .               /// Parses constness: `const` or nothing.
   312 ( 0.00%)      fn parse_constness(&mut self) -> Const {
     .                   // Avoid const blocks to be parsed as const items
    83 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
     .                       && self.eat_keyword(kw::Const)
     .                   {
    10 ( 0.00%)              Const::Yes(self.prev_token.uninterpolated_span())
     .                   } else {
     .                       Const::No
     .                   }
   546 ( 0.00%)      }
     .           
     .               /// Parses inline const expressions.
     .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
     .                   if pat {
     .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
     .                   } else {
     .                       self.sess.gated_spans.gate(sym::inline_const, span);
     .                   }
-- line 1104 ----------------------------------------
-- line 1110 ----------------------------------------
     .                   };
     .                   let blk_span = anon_const.value.span;
     .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
     .               }
     .           
     .               /// Parses mutability (`mut` or nothing).
     .               fn parse_mutability(&mut self) -> Mutability {
     .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
     8 ( 0.00%)      }
     .           
     .               /// Possibly parses mutability (`const` or `mut`).
     .               fn parse_const_or_mut(&mut self) -> Option<Mutability> {
     .                   if self.eat_keyword(kw::Mut) {
     .                       Some(Mutability::Mut)
     .                   } else if self.eat_keyword(kw::Const) {
     .                       Some(Mutability::Not)
     .                   } else {
-- line 1126 ----------------------------------------
-- line 1135 ----------------------------------------
     .                       self.bump();
     .                       Ok(Ident::new(symbol, self.prev_token.span))
     .                   } else {
     .                       self.parse_ident_common(true)
     .                   }
     .               }
     .           
     .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
   132 ( 0.00%)          self.parse_mac_args_common(true).map(P)
     .               }
     .           
     .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
    48 ( 0.00%)          self.parse_mac_args_common(false)
     .               }
     .           
   558 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
   496 ( 0.00%)          Ok(
   314 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
     3 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Bracket))
     3 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Brace))
     .                       {
   244 ( 0.00%)                  match self.parse_token_tree() {
   305 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
     .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
     .                               {
   122 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
     .                               }
     .                               _ => unreachable!(),
     .                           }
     2 ( 0.00%)              } else if !delimited_only {
     .                           if self.eat(&token::Eq) {
     .                               let eq_span = self.prev_token.span;
     .           
     .                               // Collect tokens because they are used during lowering to HIR.
     .                               let expr = self.parse_expr_force_collect()?;
     .                               let span = expr.span;
     .           
     .                               let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));
-- line 1172 ----------------------------------------
-- line 1173 ----------------------------------------
     .                               MacArgs::Eq(eq_span, Token::new(token_kind, span))
     .                           } else {
     .                               MacArgs::Empty
     .                           }
     .                       } else {
     .                           return self.unexpected();
     .                       },
     .                   )
   434 ( 0.00%)      }
     .           
     .               fn parse_or_use_outer_attributes(
     .                   &mut self,
     .                   already_parsed_attrs: Option<AttrWrapper>,
     .               ) -> PResult<'a, AttrWrapper> {
   531 ( 0.00%)          if let Some(attrs) = already_parsed_attrs {
     .                       Ok(attrs)
     .                   } else {
   230 ( 0.00%)              self.parse_outer_attributes()
     .                   }
     .               }
     .           
     .               /// Parses a single token tree from the input.
 1,368 ( 0.00%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
   513 ( 0.00%)          match self.token.kind {
     .                       token::OpenDelim(..) => {
     .                           let depth = self.token_cursor.stack.len();
     .           
     .                           // We keep advancing the token cursor until we hit
     .                           // the matching `CloseDelim` token.
 5,054 ( 0.01%)                  while !(depth == self.token_cursor.stack.len()
     .                               && matches!(self.token.kind, token::CloseDelim(_)))
     .                           {
     .                               // Advance one token at a time, so `TokenCursor::next()`
     .                               // can capture these tokens if necessary.
 2,908 ( 0.00%)                      self.bump();
     .                           }
     .                           // We are still inside the frame corresponding
     .                           // to the delimited stream we captured, so grab
     .                           // the tokens from this frame.
     .                           let frame = &self.token_cursor.frame;
   342 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
   342 ( 0.00%)                  let span = frame.span;
   171 ( 0.00%)                  let delim = frame.delim;
     .                           // Consume close delimiter
   342 ( 0.00%)                  self.bump();
   855 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
     .                       }
     .                       token::CloseDelim(_) | token::Eof => unreachable!(),
     .                       _ => {
     .                           self.bump();
     .                           TokenTree::Token(self.prev_token.clone())
     .                       }
     .                   }
 1,197 ( 0.00%)      }
     .           
     .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
     .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
     .                   let mut tts = Vec::new();
     .                   while self.token != token::Eof {
     .                       tts.push(self.parse_token_tree());
     .                   }
     .                   Ok(tts)
-- line 1234 ----------------------------------------
-- line 1244 ----------------------------------------
     .                   }
     .                   TokenStream::new(result)
     .               }
     .           
     .               /// Evaluates the closure with restrictions in place.
     .               ///
     .               /// Afters the closure is evaluated, restrictions are reset.
     .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
   185 ( 0.00%)          let old = self.restrictions;
   259 ( 0.00%)          self.restrictions = res;
     .                   let res = f(self);
   280 ( 0.00%)          self.restrictions = old;
     .                   res
     .               }
     .           
   608 ( 0.00%)      fn is_crate_vis(&self) -> bool {
   380 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
   684 ( 0.00%)      }
     .           
     .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
     .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
     .               /// If the following element can't be a tuple (i.e., it's a function definition), then
     .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
     .               /// so emit a proper diagnostic.
     .               // Public for rustfmt usage.
   470 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
    94 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
     .           
    47 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
   188 ( 0.00%)          if self.is_crate_vis() {
     .                       self.bump(); // `crate`
     .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
     .                       return Ok(Visibility {
     .                           span: self.prev_token.span,
     .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
     .                           tokens: None,
     .                       });
     .                   }
     .           
     .                   if !self.eat_keyword(kw::Pub) {
     .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
     .                       // keyword to grab a span from for inherited visibility; an empty span at the
     .                       // beginning of the current token would seem to be the "Schelling span".
    44 ( 0.00%)              return Ok(Visibility {
   132 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
     .                           kind: VisibilityKind::Inherited,
     .                           tokens: None,
     .                       });
     .                   }
     3 ( 0.00%)          let lo = self.prev_token.span;
     .           
    15 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
     .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
     .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
     .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
     .                       // by the following tokens.
     .                       if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
     .                       // account for `pub(crate::foo)`
     .                       {
     .                           // Parse `pub(crate)`.
-- line 1303 ----------------------------------------
-- line 1338 ----------------------------------------
     .                       } else if let FollowedByType::No = fbt {
     .                           // Provide this diagnostic if a type cannot follow;
     .                           // in particular, if this is not a tuple struct.
     .                           self.recover_incorrect_vis_restriction()?;
     .                           // Emit diagnostic, but continue with public visibility.
     .                       }
     .                   }
     .           
     9 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
   423 ( 0.00%)      }
     .           
     .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
     .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
     .                   self.bump(); // `(`
     .                   let path = self.parse_path(PathStyle::Mod)?;
     .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
     .           
     .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1370 ----------------------------------------
     .                       )
     .                       .emit();
     .           
     .                   Ok(())
     .               }
     .           
     .               /// Parses `extern string_literal?`.
     .               fn parse_extern(&mut self) -> Extern {
     3 ( 0.00%)          if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }
     .               }
     .           
     .               /// Parses a string literal as an ABI spec.
     .               fn parse_abi(&mut self) -> Option<StrLit> {
     .                   match self.parse_str_lit() {
     .                       Ok(str_lit) => Some(str_lit),
     .                       Err(Some(lit)) => match lit.kind {
     .                           ast::LitKind::Err(_) => None,
-- line 1386 ----------------------------------------
-- line 1409 ----------------------------------------
     .                   self.collect_tokens_trailing_token(
     .                       AttrWrapper::empty(),
     .                       ForceCollect::Yes,
     .                       |this, _attrs| Ok((f(this)?, TrailingToken::None)),
     .                   )
     .               }
     .           
     .               /// `::{` or `::*`
 2,288 ( 0.00%)      fn is_import_coupler(&mut self) -> bool {
 1,144 ( 0.00%)          self.check(&token::ModSep)
     .                       && self.look_ahead(1, |t| {
 1,040 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
     .                       })
 2,223 ( 0.00%)      }
     .           
     .               pub fn clear_expected_tokens(&mut self) {
     .                   self.expected_tokens.clear();
     .               }
     .           }
     .           
     .           crate fn make_unclosed_delims_error(
     .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
     .                   err.span_label(sp, "closing delimiter possibly meant for this");
     .               }
     .               if let Some(sp) = unmatched.unclosed_span {
     .                   err.span_label(sp, "unclosed delimiter");
     .               }
     .               Some(err)
     .           }
     .           
   824 ( 0.00%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
   412 ( 0.00%)      *sess.reached_eof.borrow_mut() |=
     .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
   412 ( 0.00%)      for unmatched in unclosed_delims.drain(..) {
     .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
     .                       e.emit();
     .                   }
     .               }
   824 ( 0.00%)  }
     .           
     .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
     .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
     .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
     .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
     .           /// `AttrAnnotatedTokenTree::Delimited` tokens
     .           #[derive(Debug, Clone)]
     .           pub enum FlatToken {
-- line 1474 ----------------------------------------

15,907 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs
--------------------------------------------------------------------------------
Ir              

-- line 32 ----------------------------------------
     .           ///
     .           /// If the syntax extension is an MBE macro, it will attempt to match its
     .           /// LHS token tree against the provided token tree, and if it finds a
     .           /// match, will transcribe the RHS token tree, splicing in any captured
     .           /// `macro_parser::matched_nonterminals` into the `SubstNt`s it finds.
     .           ///
     .           /// The RHS of an MBE macro is the only place `SubstNt`s are substituted.
     .           /// Nothing special happens to misnamed or misplaced `SubstNt`s.
78,463 ( 0.09%)  #[derive(Debug, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
     .           pub enum TokenTree {
     .               /// A single token.
12,632 ( 0.01%)      Token(Token),
     .               /// A delimited sequence of token trees.
 1,922 ( 0.00%)      Delimited(DelimSpan, DelimToken, TokenStream),
     .           }
     .           
     .           #[derive(Copy, Clone)]
     .           pub enum CanSynthesizeMissingTokens {
     .               Yes,
     .               No,
     .           }
     .           
-- line 53 ----------------------------------------
-- line 71 ----------------------------------------
     .                           delim == delim2 && tts.eq_unspanned(&tts2)
     .                       }
     .                       _ => false,
     .                   }
     .               }
     .           
     .               /// Retrieves the `TokenTree`'s span.
     .               pub fn span(&self) -> Span {
   384 ( 0.00%)          match self {
   162 ( 0.00%)              TokenTree::Token(token) => token.span,
   192 ( 0.00%)              TokenTree::Delimited(sp, ..) => sp.entire(),
     .                   }
   144 ( 0.00%)      }
     .           
     .               /// Modify the `TokenTree`'s span in-place.
     .               pub fn set_span(&mut self, span: Span) {
   384 ( 0.00%)          match self {
   144 ( 0.00%)              TokenTree::Token(token) => token.span = span,
    96 ( 0.00%)              TokenTree::Delimited(dspan, ..) => *dspan = DelimSpan::from_single(span),
     .                   }
   192 ( 0.00%)      }
     .           
     .               pub fn token(kind: TokenKind, span: Span) -> TokenTree {
 4,048 ( 0.00%)          TokenTree::Token(Token::new(kind, span))
     .               }
     .           
     .               /// Returns the opening delimiter as a token tree.
   522 ( 0.00%)      pub fn open_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
 1,566 ( 0.00%)          TokenTree::token(token::OpenDelim(delim), span.open)
   522 ( 0.00%)      }
     .           
     .               /// Returns the closing delimiter as a token tree.
   490 ( 0.00%)      pub fn close_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
 1,470 ( 0.00%)          TokenTree::token(token::CloseDelim(delim), span.close)
   490 ( 0.00%)      }
     .           
    93 ( 0.00%)      pub fn uninterpolate(self) -> TokenTree {
    62 ( 0.00%)          match self {
   279 ( 0.00%)              TokenTree::Token(token) => TokenTree::Token(token.uninterpolate().into_owned()),
     .                       tt => tt,
     .                   }
   124 ( 0.00%)      }
     .           }
     .           
     .           impl<CTX> HashStable<CTX> for TokenStream
     .           where
     .               CTX: crate::HashStableContext,
     .           {
    36 ( 0.00%)      fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
   142 ( 0.00%)          for sub_tt in self.trees() {
     .                       sub_tt.hash_stable(hcx, hasher);
     .                   }
    32 ( 0.00%)      }
     .           }
     .           
     .           pub trait CreateTokenStream: sync::Send + sync::Sync {
     .               fn create_token_stream(&self) -> AttrAnnotatedTokenStream;
     .           }
     .           
     .           impl CreateTokenStream for AttrAnnotatedTokenStream {
     .               fn create_token_stream(&self) -> AttrAnnotatedTokenStream {
-- line 131 ----------------------------------------
-- line 188 ----------------------------------------
     .               Delimited(DelimSpan, DelimToken, AttrAnnotatedTokenStream),
     .               /// Stores the attributes for an attribute target,
     .               /// along with the tokens for that attribute target.
     .               /// See `AttributesData` for more information
     .               Attributes(AttributesData),
     .           }
     .           
     .           impl AttrAnnotatedTokenStream {
   450 ( 0.00%)      pub fn new(tokens: Vec<(AttrAnnotatedTokenTree, Spacing)>) -> AttrAnnotatedTokenStream {
     .                   AttrAnnotatedTokenStream(Lrc::new(tokens))
   450 ( 0.00%)      }
     .           
     .               /// Converts this `AttrAnnotatedTokenStream` to a plain `TokenStream
     .               /// During conversion, `AttrAnnotatedTokenTree::Attributes` get 'flattened'
     .               /// back to a `TokenStream` of the form `outer_attr attr_target`.
     .               /// If there are inner attributes, they are inserted into the proper
     .               /// place in the attribute target tokens.
     .               pub fn to_tokenstream(&self) -> TokenStream {
     .                   let trees: Vec<_> = self
-- line 206 ----------------------------------------
-- line 316 ----------------------------------------
     .           pub struct TokenStream(pub(crate) Lrc<Vec<TreeAndSpacing>>);
     .           
     .           pub type TreeAndSpacing = (TokenTree, Spacing);
     .           
     .           // `TokenStream` is used a lot. Make sure it doesn't unintentionally get bigger.
     .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
     .           rustc_data_structures::static_assert_size!(TokenStream, 8);
     .           
 6,284 ( 0.01%)  #[derive(Clone, Copy, Debug, PartialEq, Encodable, Decodable)]
     .           pub enum Spacing {
     .               Alone,
     .               Joint,
     .           }
     .           
     .           impl TokenStream {
     .               /// Given a `TokenStream` with a `Stream` of only two arguments, return a new `TokenStream`
     .               /// separating the two arguments with a comma for diagnostic suggestions.
-- line 332 ----------------------------------------
-- line 371 ----------------------------------------
     .           impl From<(AttrAnnotatedTokenTree, Spacing)> for AttrAnnotatedTokenStream {
     .               fn from((tree, spacing): (AttrAnnotatedTokenTree, Spacing)) -> AttrAnnotatedTokenStream {
     .                   AttrAnnotatedTokenStream::new(vec![(tree, spacing)])
     .               }
     .           }
     .           
     .           impl From<TokenTree> for TokenStream {
     .               fn from(tree: TokenTree) -> TokenStream {
   550 ( 0.00%)          TokenStream::new(vec![(tree, Spacing::Alone)])
     .               }
     .           }
     .           
     .           impl From<TokenTree> for TreeAndSpacing {
     .               fn from(tree: TokenTree) -> TreeAndSpacing {
 1,428 ( 0.00%)          (tree, Spacing::Alone)
     .               }
     .           }
     .           
     .           impl iter::FromIterator<TokenTree> for TokenStream {
     .               fn from_iter<I: IntoIterator<Item = TokenTree>>(iter: I) -> Self {
     .                   TokenStream::new(iter.into_iter().map(Into::into).collect::<Vec<TreeAndSpacing>>())
     .               }
     .           }
-- line 393 ----------------------------------------
-- line 401 ----------------------------------------
     .           }
     .           
     .           impl TokenStream {
     .               pub fn new(streams: Vec<TreeAndSpacing>) -> TokenStream {
     .                   TokenStream(Lrc::new(streams))
     .               }
     .           
     .               pub fn is_empty(&self) -> bool {
   164 ( 0.00%)          self.0.is_empty()
   164 ( 0.00%)      }
     .           
     .               pub fn len(&self) -> usize {
 5,378 ( 0.01%)          self.0.len()
    16 ( 0.00%)      }
     .           
     .               pub fn from_streams(mut streams: SmallVec<[TokenStream; 2]>) -> TokenStream {
     .                   match streams.len() {
     .                       0 => TokenStream::default(),
     .                       1 => streams.pop().unwrap(),
     .                       _ => {
     .                           // We are going to extend the first stream in `streams` with
     .                           // the elements from the subsequent streams. This requires
-- line 422 ----------------------------------------
-- line 448 ----------------------------------------
     .           
     .                           // Create the final `TokenStream`.
     .                           TokenStream(first_stream_lrc)
     .                       }
     .                   }
     .               }
     .           
     .               pub fn trees(&self) -> Cursor {
   392 ( 0.00%)          self.clone().into_trees()
   784 ( 0.00%)      }
     .           
   628 ( 0.00%)      pub fn into_trees(self) -> Cursor {
     .                   Cursor::new(self)
 1,256 ( 0.00%)      }
     .           
     .               /// Compares two `TokenStream`s, checking equality without regarding span information.
     .               pub fn eq_unspanned(&self, other: &TokenStream) -> bool {
     .                   let mut t1 = self.trees();
     .                   let mut t2 = other.trees();
     .                   for (t1, t2) in iter::zip(&mut t1, &mut t2) {
     .                       if !t1.eq_unspanned(&t2) {
     .                           return false;
     .                       }
     .                   }
     .                   t1.next().is_none() && t2.next().is_none()
     .               }
     .           
     .               pub fn map_enumerated<F: FnMut(usize, &TokenTree) -> TokenTree>(self, mut f: F) -> TokenStream {
    16 ( 0.00%)          TokenStream(Lrc::new(
     .                       self.0
     .                           .iter()
     .                           .enumerate()
 1,152 ( 0.00%)                  .map(|(i, (tree, is_joint))| (f(i, tree), *is_joint))
     .                           .collect(),
     .                   ))
     .               }
     .           }
     .           
     .           // 99.5%+ of the time we have 1 or 2 elements in this vector.
     .           #[derive(Clone)]
     .           pub struct TokenStreamBuilder(SmallVec<[TokenStream; 2]>);
-- line 488 ----------------------------------------
-- line 572 ----------------------------------------
     .           pub struct Cursor {
     .               pub stream: TokenStream,
     .               index: usize,
     .           }
     .           
     .           impl Iterator for Cursor {
     .               type Item = TokenTree;
     .           
 4,692 ( 0.01%)      fn next(&mut self) -> Option<TokenTree> {
 7,269 ( 0.01%)          self.next_with_spacing().map(|(tree, _)| tree)
 6,256 ( 0.01%)      }
     .           }
     .           
     .           impl Cursor {
     .               fn new(stream: TokenStream) -> Self {
     .                   Cursor { stream, index: 0 }
     .               }
     .           
18,910 ( 0.02%)      pub fn next_with_spacing(&mut self) -> Option<TreeAndSpacing> {
16,038 ( 0.02%)          if self.index < self.stream.len() {
 7,634 ( 0.01%)              self.index += 1;
18,781 ( 0.02%)              Some(self.stream.0[self.index - 1].clone())
     .                   } else {
 2,198 ( 0.00%)              None
     .                   }
22,692 ( 0.03%)      }
     .           
     .               pub fn index(&self) -> usize {
     .                   self.index
     .               }
     .           
     .               pub fn append(&mut self, new_stream: TokenStream) {
     .                   if new_stream.is_empty() {
     .                       return;
     .                   }
     .                   let index = self.index;
     .                   let stream = mem::take(&mut self.stream);
     .                   *self = TokenStream::from_streams(smallvec![stream, new_stream]).into_trees();
     .                   self.index = index;
     .               }
     .           
   693 ( 0.00%)      pub fn look_ahead(&self, n: usize) -> Option<&TokenTree> {
 1,386 ( 0.00%)          self.stream.0[self.index..].get(n).map(|(tree, _)| tree)
 1,386 ( 0.00%)      }
     .           }
     .           
 2,443 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
     .           pub struct DelimSpan {
     .               pub open: Span,
     .               pub close: Span,
     .           }
     .           
     .           impl DelimSpan {
     .               pub fn from_single(sp: Span) -> Self {
     .                   DelimSpan { open: sp, close: sp }
     .               }
     .           
   316 ( 0.00%)      pub fn from_pair(open: Span, close: Span) -> Self {
     .                   DelimSpan { open, close }
   158 ( 0.00%)      }
     .           
     .               pub fn dummy() -> Self {
     .                   Self::from_single(DUMMY_SP)
   270 ( 0.00%)      }
     .           
 1,224 ( 0.00%)      pub fn entire(self) -> Span {
     .                   self.open.with_hi(self.close.hi())
   918 ( 0.00%)      }
     .           }

 2,652 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 71 ----------------------------------------
      .               fn default() -> FxHasher {
      .                   FxHasher { hash: 0 }
      .               }
      .           }
      .           
      .           impl FxHasher {
      .               #[inline]
      .               fn add_to_hash(&mut self, i: usize) {
 31,115 ( 0.03%)          self.hash = self.hash.rotate_left(5).bitxor(i).wrapping_mul(K);
      .               }
      .           }
      .           
      .           impl Hasher for FxHasher {
      .               #[inline]
    674 ( 0.00%)      fn write(&mut self, mut bytes: &[u8]) {
      .                   #[cfg(target_pointer_width = "32")]
      .                   let read_usize = |bytes: &[u8]| u32::from_ne_bytes(bytes[..4].try_into().unwrap());
      .                   #[cfg(target_pointer_width = "64")]
      .                   let read_usize = |bytes: &[u8]| u64::from_ne_bytes(bytes[..8].try_into().unwrap());
      .           
 14,513 ( 0.02%)          let mut hash = FxHasher { hash: self.hash };
      .                   assert!(size_of::<usize>() <= 8);
172,463 ( 0.19%)          while bytes.len() >= size_of::<usize>() {
      .                       hash.add_to_hash(read_usize(bytes) as usize);
      .                       bytes = &bytes[size_of::<usize>()..];
      .                   }
 27,790 ( 0.03%)          if (size_of::<usize>() > 4) && (bytes.len() >= 4) {
      .                       hash.add_to_hash(u32::from_ne_bytes(bytes[..4].try_into().unwrap()) as usize);
      .                       bytes = &bytes[4..];
      .                   }
 27,790 ( 0.03%)          if (size_of::<usize>() > 2) && bytes.len() >= 2 {
      .                       hash.add_to_hash(u16::from_ne_bytes(bytes[..2].try_into().unwrap()) as usize);
      .                       bytes = &bytes[2..];
      .                   }
 31,089 ( 0.03%)          if (size_of::<usize>() > 1) && bytes.len() >= 1 {
  7,020 ( 0.01%)              hash.add_to_hash(bytes[0] as usize);
      .                   }
  1,536 ( 0.00%)          self.hash = hash.hash;
    674 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn write_u8(&mut self, i: u8) {
     36 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u16(&mut self, i: u16) {
      5 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u32(&mut self, i: u32) {
 49,727 ( 0.05%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[cfg(target_pointer_width = "32")]
      .               #[inline]
      .               fn write_u64(&mut self, i: u64) {
      .                   self.add_to_hash(i as usize);
      .                   self.add_to_hash((i >> 32) as usize);
      .               }
-- line 131 ----------------------------------------

      1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir              

-- line 114 ----------------------------------------
     .           const EMPTY: u8 = 0b1111_1111;
     .           
     .           /// Control byte value for a deleted bucket.
     .           const DELETED: u8 = 0b1000_0000;
     .           
     .           /// Checks whether a control byte represents a full bucket (top bit is clear).
     .           #[inline]
     .           fn is_full(ctrl: u8) -> bool {
 9,367 ( 0.01%)      ctrl & 0x80 == 0
     .           }
     .           
     .           /// Checks whether a control byte represents a special value (top bit is set).
     .           #[inline]
     .           fn is_special(ctrl: u8) -> bool {
     .               ctrl & 0x80 != 0
     .           }
     .           
-- line 130 ----------------------------------------
-- line 146 ----------------------------------------
     .           /// Secondary hash function, saved in the low 7 bits of the control byte.
     .           #[inline]
     .           #[allow(clippy::cast_possible_truncation)]
     .           fn h2(hash: u64) -> u8 {
     .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
     .               // value, some hash functions (such as FxHash) produce a usize result
     .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
     .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
 9,056 ( 0.01%)      let top7 = hash >> (hash_len * 8 - 7);
     .               (top7 & 0x7f) as u8 // truncation
     .           }
     .           
     .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
     .           /// table size is a power of two) to visit every group of elements exactly once.
     .           ///
     .           /// A triangular probe has us jump by 1 more group every time. So first we
     .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 162 ----------------------------------------
-- line 173 ----------------------------------------
     .               #[inline]
     .               fn move_next(&mut self, bucket_mask: usize) {
     .                   // We should have found an empty bucket by now and ended the probe.
     .                   debug_assert!(
     .                       self.stride <= bucket_mask,
     .                       "Went past end of probe sequence"
     .                   );
     .           
   868 ( 0.00%)          self.stride += Group::WIDTH;
   868 ( 0.00%)          self.pos += self.stride;
   434 ( 0.00%)          self.pos &= bucket_mask;
     .               }
     .           }
     .           
     .           /// Returns the number of buckets needed to hold the given number of items,
     .           /// taking the maximum load factor into account.
     .           ///
     .           /// Returns `None` if an overflow occurs.
     .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
     .           #[cfg_attr(target_os = "emscripten", inline(never))]
     .           #[cfg_attr(not(target_os = "emscripten"), inline)]
     .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
     .               debug_assert_ne!(cap, 0);
     .           
     .               // For small tables we require at least 1 empty bucket so that lookups are
     .               // guaranteed to terminate if an element doesn't exist in the table.
   336 ( 0.00%)      if cap < 8 {
     .                   // We don't bother with a table size of 2 buckets since that can only
     .                   // hold a single element. Instead we skip directly to a 4 bucket table
     .                   // which can hold 3 elements.
   480 ( 0.00%)          return Some(if cap < 4 { 4 } else { 8 });
     .               }
     .           
     .               // Otherwise require 1/8 buckets to be empty (87.5% load)
     .               //
     .               // Be careful when modifying this, calculate_layout relies on the
     .               // overflow check here.
   432 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
     .           
     .               // Any overflows will have been caught by the checked_mul. Also, any
     .               // rounding errors from the division above will be cleaned up by
     .               // next_power_of_two (which can't overflow because of the previous divison).
     .               Some(adjusted_cap.next_power_of_two())
     .           }
     .           
     .           /// Returns the maximum effective capacity for the given bucket mask, taking
     .           /// the maximum load factor into account.
     .           #[inline]
     .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
 1,291 ( 0.00%)      if bucket_mask < 8 {
     .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
     .                   // Keep in mind that the bucket mask is one less than the bucket count.
     .                   bucket_mask
     .               } else {
     .                   // For larger tables we reserve 12.5% of the slots as empty.
   300 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
     .               }
     .           }
     .           
     .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
     .           /// while keeping the rest of `calculate_layout_for` independent of `T`
     .           #[derive(Copy, Clone)]
     .           struct TableLayout {
     .               size: usize,
-- line 236 ----------------------------------------
-- line 249 ----------------------------------------
     .           
     .               #[inline]
     .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
     .                   debug_assert!(buckets.is_power_of_two());
     .           
     .                   let TableLayout { size, ctrl_align } = self;
     .                   // Manual layout calculation since Layout methods are not yet stable.
     .                   let ctrl_offset =
   730 ( 0.00%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
   898 ( 0.00%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
     .           
     .                   Some((
     .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
     .                       ctrl_offset,
     .                   ))
     .               }
     .           }
     .           
-- line 266 ----------------------------------------
-- line 636 ----------------------------------------
     .                       }
     .                   }
     .               }
     .           
     .               /// Ensures that at least `additional` items can be inserted into the table
     .               /// without reallocation.
     .               #[cfg_attr(feature = "inline-more", inline)]
     .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
     4 ( 0.00%)          if additional > self.table.growth_left {
     .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
   844 ( 0.00%)              if self
     .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
     .                           .is_err()
     .                       {
     .                           unsafe { hint::unreachable_unchecked() }
     .                       }
     .                   }
     .               }
     .           
-- line 654 ----------------------------------------
-- line 665 ----------------------------------------
     .                   } else {
     .                       Ok(())
     .                   }
     .               }
     .           
     .               /// Out-of-line slow path for `reserve` and `try_reserve`.
     .               #[cold]
     .               #[inline(never)]
 1,399 ( 0.00%)      fn reserve_rehash(
     .                   &mut self,
     .                   additional: usize,
     .                   hasher: impl Fn(&T) -> u64,
     .                   fallibility: Fallibility,
     .               ) -> Result<(), TryReserveError> {
     .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
   336 ( 0.00%)          let new_items = match self.table.items.checked_add(additional) {
     .                       Some(new_items) => new_items,
     .                       None => return Err(fallibility.capacity_overflow()),
     .                   };
   336 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.table.bucket_mask);
   672 ( 0.00%)          if new_items <= full_capacity / 2 {
     .                       // Rehash in-place without re-allocating if we have plenty of spare
     .                       // capacity that is locked up due to DELETED entries.
     .                       self.rehash_in_place(hasher);
     .                       Ok(())
     .                   } else {
     .                       // Otherwise, conservatively resize to at least the next size up
     .                       // to avoid churning deletes into frequent rehashes.
     .                       self.resize(
   168 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
     .                           hasher,
     .                           fallibility,
     .                       )
     .                   }
 1,512 ( 0.00%)      }
     .           
     .               /// Rehashes the contents of the table in place (i.e. without changing the
     .               /// allocation).
     .               ///
     .               /// If `hasher` panics then some the table's contents may be lost.
     .               fn rehash_in_place(&mut self, hasher: impl Fn(&T) -> u64) {
     .                   unsafe {
     .                       // If the hash function panics then properly clean up any elements
-- line 707 ----------------------------------------
-- line 780 ----------------------------------------
     .               fn resize(
     .                   &mut self,
     .                   capacity: usize,
     .                   hasher: impl Fn(&T) -> u64,
     .                   fallibility: Fallibility,
     .               ) -> Result<(), TryReserveError> {
     .                   unsafe {
     .                       let mut new_table =
 1,301 ( 0.00%)                  self.table
     .                               .prepare_resize(TableLayout::new::<T>(), capacity, fallibility)?;
     .           
     .                       // Copy all elements to the new table.
     .                       for item in self.iter() {
     .                           // This may panic.
 4,923 ( 0.01%)                  let hash = hasher(item.as_ref());
     .           
     .                           // We can use a simpler version of insert() here since:
     .                           // - there are no DELETED entries.
     .                           // - we know there is enough space in the table.
     .                           // - all elements are unique.
     .                           let (index, _) = new_table.prepare_insert_slot(hash);
 4,923 ( 0.01%)                  new_table.bucket(index).copy_from_nonoverlapping(&item);
     .                       }
     .           
     .                       // We successfully copied all elements without panicking. Now replace
     .                       // self with the new table. The old table will have its memory freed but
     .                       // the items will not be dropped (since they have been moved into the
     .                       // new table).
     .                       mem::swap(&mut self.table, &mut new_table);
     .           
   168 ( 0.00%)              Ok(())
     .                   }
     .               }
     .           
     .               /// Inserts a new element into the table, and returns its raw bucket.
     .               ///
     .               /// This does not check if the given element already exists in the table.
     .               #[cfg_attr(feature = "inline-more", inline)]
     .               pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
     .                   unsafe {
     .                       let mut index = self.table.find_insert_slot(hash);
     .           
     .                       // We can avoid growing the table once we have reached our load
     .                       // factor if we are replacing a tombstone. This works since the
     .                       // number of EMPTY slots does not change in this case.
    17 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
14,352 ( 0.02%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
     .                           self.reserve(1, hasher);
     .                           index = self.table.find_insert_slot(hash);
     .                       }
     .           
     .                       self.table.record_item_insert_at(index, old_ctrl, hash);
     .           
 3,591 ( 0.00%)              let bucket = self.bucket(index);
     .                       bucket.write(value);
     .                       bucket
     .                   }
     .               }
     .           
     .               /// Attempts to insert a new element without growing the table and return its raw bucket.
     .               ///
     .               /// Returns an `Err` containing the given element if inserting it would require growing the
-- line 841 ----------------------------------------
-- line 911 ----------------------------------------
     .                       true
     .                   } else {
     .                       false
     .                   }
     .               }
     .           
     .               /// Searches for an element in the table.
     .               #[inline]
   471 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
     .                   unsafe {
27,075 ( 0.03%)              for bucket in self.iter_hash(hash) {
     .                           let elm = bucket.as_ref();
 3,690 ( 0.00%)                  if likely(eq(elm)) {
     .                               return Some(bucket);
     .                           }
     .                       }
     .                       None
     .                   }
   628 ( 0.00%)      }
     .           
     .               /// Gets a reference to an element in the table.
     .               #[inline]
     .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
     .                   // Avoid `Option::map` because it bloats LLVM IR.
   168 ( 0.00%)          match self.find(hash, eq) {
     .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
     .                       None => None,
     .                   }
     .               }
     .           
     .               /// Gets a mutable reference to an element in the table.
     .               #[inline]
     .               pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
-- line 943 ----------------------------------------
-- line 1007 ----------------------------------------
     .               }
     .           
     .               /// Returns the number of elements the map can hold without reallocating.
     .               ///
     .               /// This number is a lower bound; the table might be able to hold
     .               /// more, but is guaranteed to be able to hold at least this many.
     .               #[cfg_attr(feature = "inline-more", inline)]
     .               pub fn capacity(&self) -> usize {
   338 ( 0.00%)          self.table.items + self.table.growth_left
     .               }
     .           
     .               /// Returns the number of elements in the table.
     .               #[cfg_attr(feature = "inline-more", inline)]
     .               pub fn len(&self) -> usize {
     .                   self.table.items
     .               }
     .           
     .               /// Returns the number of buckets in the table.
     .               #[cfg_attr(feature = "inline-more", inline)]
     .               pub fn buckets(&self) -> usize {
    28 ( 0.00%)          self.table.bucket_mask + 1
     .               }
     .           
     .               /// Returns an iterator over every element in the table. It is up to
     .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
     .               /// Because we cannot make the `next` method unsafe on the `RawIter`
     .               /// struct, we have to make the `iter` method unsafe.
     .               #[cfg_attr(feature = "inline-more", inline)]
     .               pub unsafe fn iter(&self) -> RawIter<T> {
   168 ( 0.00%)          let data = Bucket::from_base_index(self.data_end(), 0);
     .                   RawIter {
     .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
     .                       items: self.table.items,
     .                   }
     .               }
     .           
     .               /// Returns an iterator over occupied buckets that could match a given hash.
     .               ///
-- line 1044 ----------------------------------------
-- line 1122 ----------------------------------------
     .           }
     .           
     .           unsafe impl<T, A: Allocator + Clone> Send for RawTable<T, A> where T: Send {}
     .           unsafe impl<T, A: Allocator + Clone> Sync for RawTable<T, A> where T: Sync {}
     .           
     .           impl<A> RawTableInner<A> {
     .               #[cfg_attr(feature = "inline-more", inline)]
     .               const fn new_in(alloc: A) -> Self {
   764 ( 0.00%)          Self {
     .                       // Be careful to cast the entire slice to a raw pointer.
   398 ( 0.00%)              ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
     .                       bucket_mask: 0,
     .                       items: 0,
     .                       growth_left: 0,
     .                       alloc,
     .                   }
     .               }
     .           }
     .           
-- line 1140 ----------------------------------------
-- line 1149 ----------------------------------------
     .                   debug_assert!(buckets.is_power_of_two());
     .           
     .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
     .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(buckets) {
     .                       Some(lco) => lco,
     .                       None => return Err(fallibility.capacity_overflow()),
     .                   };
     .           
   336 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
     .                       Ok(block) => block.cast(),
     .                       Err(_) => return Err(fallibility.alloc_err(layout)),
     .                   };
     .           
     .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
     .                   Ok(Self {
     .                       ctrl,
   173 ( 0.00%)              bucket_mask: buckets - 1,
     .                       items: 0,
     .                       growth_left: bucket_mask_to_capacity(buckets - 1),
     .                       alloc,
     .                   })
     .               }
     .           
     .               #[inline]
 1,080 ( 0.00%)      fn fallible_with_capacity(
     .                   alloc: A,
     .                   table_layout: TableLayout,
     .                   capacity: usize,
     .                   fallibility: Fallibility,
     .               ) -> Result<Self, TryReserveError> {
     .                   if capacity == 0 {
     .                       Ok(Self::new_in(alloc))
     .                   } else {
     .                       unsafe {
     .                           let buckets =
     .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
     .           
     .                           let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
     .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
     .           
   648 ( 0.00%)                  Ok(result)
     .                       }
     .                   }
   864 ( 0.00%)      }
     .           
     .               /// Searches for an empty or deleted bucket which is suitable for inserting
     .               /// a new element and sets the hash for that slot.
     .               ///
     .               /// There must be at least 1 empty bucket in the table.
     .               #[inline]
     .               unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
     .                   let index = self.find_insert_slot(hash);
-- line 1200 ----------------------------------------
-- line 1208 ----------------------------------------
     .               ///
     .               /// There must be at least 1 empty bucket in the table.
     .               #[inline]
     .               fn find_insert_slot(&self, hash: u64) -> usize {
     .                   let mut probe_seq = self.probe_seq(hash);
     .                   loop {
     .                       unsafe {
     .                           let group = Group::load(self.ctrl(probe_seq.pos));
 8,896 ( 0.01%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
26,046 ( 0.03%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
     .           
     .                               // In tables smaller than the group width, trailing control
     .                               // bytes outside the range of the table are filled with
     .                               // EMPTY entries. These will unfortunately trigger a
     .                               // match, but once masked may point to a full bucket that
     .                               // is already occupied. We detect this situation here and
     .                               // perform a second scan starting at the begining of the
     .                               // table. This second scan is guaranteed to find an empty
     .                               // slot (due to the load factor) before hitting the trailing
     .                               // control bytes (containing EMPTY).
12,273 ( 0.01%)                      if unlikely(is_full(*self.ctrl(result))) {
     .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
     .                                   debug_assert_ne!(probe_seq.pos, 0);
     .                                   return Group::load_aligned(self.ctrl(0))
     .                                       .match_empty_or_deleted()
     .                                       .lowest_set_bit_nonzero();
     .                               }
     .           
     .                               return result;
-- line 1236 ----------------------------------------
-- line 1278 ----------------------------------------
     .               /// Returns an iterator-like object for a probe sequence on the table.
     .               ///
     .               /// This iterator never terminates, but is guaranteed to visit each bucket
     .               /// group exactly once. The loop using `probe_seq` must terminate upon
     .               /// reaching a group containing an empty bucket.
     .               #[inline]
     .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
     .                   ProbeSeq {
44,646 ( 0.05%)              pos: h1(hash) & self.bucket_mask,
     .                       stride: 0,
     .                   }
     .               }
     .           
     .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
     .               /// in the table, otherwise returns error
     .               #[cfg(feature = "raw")]
     .               #[inline]
-- line 1294 ----------------------------------------
-- line 1300 ----------------------------------------
     .                   } else {
     .                       self.record_item_insert_at(index, old_ctrl, hash);
     .                       Ok(index)
     .                   }
     .               }
     .           
     .               #[inline]
     .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
17,955 ( 0.02%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
     .                   self.set_ctrl_h2(index, hash);
14,364 ( 0.02%)          self.items += 1;
     .               }
     .           
     .               #[inline]
     .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
     .                   let probe_seq_pos = self.probe_seq(hash).pos;
     .                   let probe_index =
     .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
     .                   probe_index(i) == probe_index(new_i)
-- line 1318 ----------------------------------------
-- line 1349 ----------------------------------------
     .                   // replicate the buckets at the end of the trailing group. For example
     .                   // with 2 buckets and a group size of 4, the control bytes will look
     .                   // like this:
     .                   //
     .                   //     Real    |             Replicated
     .                   // ---------------------------------------------
     .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
     .                   // ---------------------------------------------
25,542 ( 0.03%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
     .           
 8,514 ( 0.01%)          *self.ctrl(index) = ctrl;
 8,514 ( 0.01%)          *self.ctrl(index2) = ctrl;
     .               }
     .           
     .               /// Returns a pointer to a control byte.
     .               #[inline]
     .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
     .                   debug_assert!(index < self.num_ctrl_bytes());
     .                   self.ctrl.as_ptr().add(index)
     .               }
     .           
     .               #[inline]
     .               fn buckets(&self) -> usize {
   336 ( 0.00%)          self.bucket_mask + 1
     .               }
     .           
     .               #[inline]
     .               fn num_ctrl_bytes(&self) -> usize {
     .                   self.bucket_mask + 1 + Group::WIDTH
     .               }
     .           
     .               #[inline]
     .               fn is_empty_singleton(&self) -> bool {
 1,125 ( 0.00%)          self.bucket_mask == 0
     .               }
     .           
     .               #[allow(clippy::mut_mut)]
     .               #[inline]
    55 ( 0.00%)      unsafe fn prepare_resize(
     .                   &self,
     .                   table_layout: TableLayout,
     .                   capacity: usize,
     .                   fallibility: Fallibility,
     .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
     .                   debug_assert!(self.items <= capacity);
     .           
     .                   // Allocate and initialize the new table.
   540 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
     .                       self.alloc.clone(),
     .                       table_layout,
     .                       capacity,
     .                       fallibility,
     .                   )?;
   336 ( 0.00%)          new_table.growth_left -= self.items;
     .                   new_table.items = self.items;
     .           
     .                   // The hash function may panic, in which case we simply free the new
     .                   // table without dropping any elements that may have been copied into
     .                   // it.
     .                   //
     .                   // This guard is also used to free the old table on success, see
     .                   // the comment at the bottom of this function.
    40 ( 0.00%)          Ok(guard(new_table, move |self_| {
   168 ( 0.00%)              if !self_.is_empty_singleton() {
     .                           self_.free_buckets(table_layout);
     .                       }
     .                   }))
    40 ( 0.00%)      }
     .           
     .               #[inline]
     .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
     .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
     .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
     .                       Some(lco) => lco,
     .                       None => hint::unreachable_unchecked(),
     .                   };
     .                   self.alloc.deallocate(
    60 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
     .                       layout,
     .                   );
     .               }
     .           
     .               /// Marks all table buckets as empty without dropping their contents.
     .               #[inline]
     .               fn clear_no_drop(&mut self) {
     .                   if !self.is_empty_singleton() {
-- line 1434 ----------------------------------------
-- line 1667 ----------------------------------------
     .                       }
     .                   }
     .               }
     .           }
     .           #[cfg(not(feature = "nightly"))]
     .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
     .               #[cfg_attr(feature = "inline-more", inline)]
     .               fn drop(&mut self) {
   403 ( 0.00%)          if !self.table.is_empty_singleton() {
     .                       unsafe {
     .                           self.drop_elements();
     .                           self.free_buckets();
     .                       }
     .                   }
     .               }
     .           }
     .           
-- line 1683 ----------------------------------------
-- line 1798 ----------------------------------------
     .           
     .           impl<T> Iterator for RawIterRange<T> {
     .               type Item = Bucket<T>;
     .           
     .               #[cfg_attr(feature = "inline-more", inline)]
     .               fn next(&mut self) -> Option<Bucket<T>> {
     .                   unsafe {
     .                       loop {
   529 ( 0.00%)                  if let Some(index) = self.current_group.lowest_set_bit() {
     .                               self.current_group = self.current_group.remove_lowest_bit();
     .                               return Some(self.data.next_n(index));
     .                           }
     .           
   904 ( 0.00%)                  if self.next_ctrl >= self.end {
     .                               return None;
     .                           }
     .           
     .                           // We might read past self.end up to the next group boundary,
     .                           // but this is fine because it only occurs on tables smaller
     .                           // than the group size where the trailing control bytes are all
     .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
     .                           // to the group size (since tables are power-of-two sized).
-- line 1819 ----------------------------------------
-- line 1990 ----------------------------------------
     .           }
     .           
     .           impl<T> Iterator for RawIter<T> {
     .               type Item = Bucket<T>;
     .           
     .               #[cfg_attr(feature = "inline-more", inline)]
     .               fn next(&mut self) -> Option<Bucket<T>> {
     .                   if let Some(b) = self.iter.next() {
 9,846 ( 0.01%)              self.items -= 1;
     .                       Some(b)
     .                   } else {
     .                       // We don't check against items == 0 here to allow the
     .                       // compiler to optimize away the item count entirely if the
     .                       // iterator length is never queried.
     .                       debug_assert_eq!(self.items, 0);
     .                       None
     .                   }
-- line 2006 ----------------------------------------
-- line 2178 ----------------------------------------
     .               }
     .           }
     .           impl<'a, A: Allocator + Clone> RawIterHashInner<'a, A> {
     .               #[cfg_attr(feature = "inline-more", inline)]
     .               fn new(table: &'a RawTableInner<A>, hash: u64) -> Self {
     .                   unsafe {
     .                       let h2_hash = h2(hash);
     .                       let probe_seq = table.probe_seq(hash);
 4,658 ( 0.01%)              let group = Group::load(table.ctrl(probe_seq.pos));
     .                       let bitmask = group.match_byte(h2_hash).into_iter();
     .           
     .                       RawIterHashInner {
     .                           table,
     .                           h2_hash,
     .                           probe_seq,
     .                           group,
     .                           bitmask,
-- line 2194 ----------------------------------------
-- line 2195 ----------------------------------------
     .                       }
     .                   }
     .               }
     .           }
     .           
     .           impl<'a, T, A: Allocator + Clone> Iterator for RawIterHash<'a, T, A> {
     .               type Item = Bucket<T>;
     .           
    60 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
     .                   unsafe {
     .                       match self.inner.next() {
    30 ( 0.00%)                  Some(index) => Some(self.inner.table.bucket(index)),
     .                           None => None,
     .                       }
     .                   }
    60 ( 0.00%)      }
     .           }
     .           
     .           impl<'a, A: Allocator + Clone> Iterator for RawIterHashInner<'a, A> {
     .               type Item = usize;
     .           
     .               fn next(&mut self) -> Option<Self::Item> {
     .                   unsafe {
     .                       loop {
     .                           if let Some(bit) = self.bitmask.next() {
 3,900 ( 0.00%)                      let index = (self.probe_seq.pos + bit) & self.table.bucket_mask;
     .                               return Some(index);
     .                           }
 3,861 ( 0.00%)                  if likely(self.group.match_empty().any_bit_set()) {
     .                               return None;
     .                           }
     .                           self.probe_seq.move_next(self.table.bucket_mask);
     .                           self.group = Group::load(self.table.ctrl(self.probe_seq.pos));
   660 ( 0.00%)                  self.bitmask = self.group.match_byte(self.h2_hash).into_iter();
     .                       }
     .                   }
     .               }
     .           }
     .           
     .           #[cfg(test)]
     .           mod test_map {
     .               use super::*;
-- line 2236 ----------------------------------------

39,105 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/path.rs
--------------------------------------------------------------------------------
Ir              

-- line 316 ----------------------------------------
     .           
     .           ////////////////////////////////////////////////////////////////////////////////
     .           // Cross-platform, iterator-independent parsing
     .           ////////////////////////////////////////////////////////////////////////////////
     .           
     .           /// Says whether the first byte after the prefix is a separator.
     .           fn has_physical_root(s: &[u8], prefix: Option<Prefix<'_>>) -> bool {
     .               let path = if let Some(p) = prefix { &s[p.len()..] } else { s };
   163 ( 0.00%)      !path.is_empty() && is_sep_byte(path[0])
     .           }
     .           
     .           // basic workhorse for splitting stem and extension
     .           fn rsplit_file_at_dot(file: &OsStr) -> (Option<&OsStr>, Option<&OsStr>) {
     .               if os_str_as_u8_slice(file) == b".." {
     .                   return (Some(file), None);
     .               }
     .           
     .               // The unsafety here stems from converting between &OsStr and &[u8]
     .               // and back. This is safe to do because (1) we only look at ASCII
     .               // contents of the encoding and (2) new &OsStr values are produced
     .               // only from ASCII-bounded slices of existing &OsStr values.
    99 ( 0.00%)      let mut iter = os_str_as_u8_slice(file).rsplitn(2, |b| *b == b'.');
     .               let after = iter.next();
     .               let before = iter.next();
     .               if before == Some(b"") {
     .                   (Some(file), None)
     .               } else {
     .                   unsafe { (before.map(|s| u8_slice_as_os_str(s)), after.map(|s| u8_slice_as_os_str(s))) }
     .               }
     .           }
-- line 345 ----------------------------------------
-- line 368 ----------------------------------------
     .           ////////////////////////////////////////////////////////////////////////////////
     .           
     .           /// Component parsing works by a double-ended state machine; the cursors at the
     .           /// front and back of the path each keep track of what parts of the path have
     .           /// been consumed so far.
     .           ///
     .           /// Going front to back, a path is made up of a prefix, a starting
     .           /// directory component, and a body (of normal components)
   194 ( 0.00%)  #[derive(Copy, Clone, PartialEq, PartialOrd, Debug)]
     .           enum State {
     .               Prefix = 0,   // c:
     .               StartDir = 1, // / or . or nothing
     .               Body = 2,     // foo/bar/baz
     .               Done = 3,
     .           }
     .           
     .           /// A structure wrapping a Windows path prefix as well as its unparsed string
-- line 384 ----------------------------------------
-- line 493 ----------------------------------------
     .           /// let components = path.components().collect::<Vec<_>>();
     .           /// assert_eq!(&components, &[
     .           ///     Component::RootDir,
     .           ///     Component::Normal("tmp".as_ref()),
     .           ///     Component::Normal("foo".as_ref()),
     .           ///     Component::Normal("bar.txt".as_ref()),
     .           /// ]);
     .           /// ```
     2 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           pub enum Component<'a> {
     .               /// A Windows path prefix, e.g., `C:` or `\\server\share`.
     .               ///
     .               /// There is a large variety of prefix types, see [`Prefix`]'s documentation
     .               /// for more.
     .               ///
     .               /// Does not occur on Unix.
-- line 509 ----------------------------------------
-- line 586 ----------------------------------------
     .           /// let path = Path::new("/tmp/foo/bar.txt");
     .           ///
     .           /// for component in path.components() {
     .           ///     println!("{:?}", component);
     .           /// }
     .           /// ```
     .           ///
     .           /// [`components`]: Path::components
    72 ( 0.00%)  #[derive(Clone)]
     .           #[must_use = "iterators are lazy and do nothing unless consumed"]
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           pub struct Components<'a> {
     .               // The path left to parse components from
    12 ( 0.00%)      path: &'a [u8],
     .           
     .               // The prefix as it was originally parsed, if any
     .               prefix: Option<Prefix<'a>>,
     .           
     .               // true if path *physically* has a root separator; for most Windows
     .               // prefixes, it may have a "logical" root separator for the purposes of
     .               // normalization, e.g.,  \\server\share == \\server\share\.
     .               has_physical_root: bool,
     .           
     .               // The iterator is double-ended, and these two states keep track of what has
     .               // been produced from either end
     6 ( 0.00%)      front: State,
     6 ( 0.00%)      back: State,
     .           }
     .           
     .           /// An iterator over the [`Component`]s of a [`Path`], as [`OsStr`] slices.
     .           ///
     .           /// This `struct` is created by the [`iter`] method on [`Path`].
     .           /// See its documentation for more.
     .           ///
     .           /// [`iter`]: Path::iter
-- line 620 ----------------------------------------
-- line 650 ----------------------------------------
     .               #[inline]
     .               fn prefix_verbatim(&self) -> bool {
     .                   self.prefix.as_ref().map(Prefix::is_verbatim).unwrap_or(false)
     .               }
     .           
     .               /// how much of the prefix is left from the point of view of iteration?
     .               #[inline]
     .               fn prefix_remaining(&self) -> usize {
   149 ( 0.00%)          if self.front == State::Prefix { self.prefix_len() } else { 0 }
     .               }
     .           
     .               // Given the iteration so far, how much of the pre-State::Body path is left?
     .               #[inline]
 1,043 ( 0.00%)      fn len_before_body(&self) -> usize {
   596 ( 0.00%)          let root = if self.front <= State::StartDir && self.has_physical_root { 1 } else { 0 };
   161 ( 0.00%)          let cur_dir = if self.front <= State::StartDir && self.include_cur_dir() { 1 } else { 0 };
   596 ( 0.00%)          self.prefix_remaining() + root + cur_dir
 1,341 ( 0.00%)      }
     .           
     .               // is the iteration complete?
     .               #[inline]
     .               fn finished(&self) -> bool {
     .                   self.front == State::Done || self.back == State::Done || self.front > self.back
     .               }
     .           
     .               #[inline]
-- line 675 ----------------------------------------
-- line 687 ----------------------------------------
     .               /// let mut components = Path::new("/tmp/foo/bar.txt").components();
     .               /// components.next();
     .               /// components.next();
     .               ///
     .               /// assert_eq!(Path::new("foo/bar.txt"), components.as_path());
     .               /// ```
     .               #[must_use]
     .               #[stable(feature = "rust1", since = "1.0.0")]
    36 ( 0.00%)      pub fn as_path(&self) -> &'a Path {
     .                   let mut comps = self.clone();
     6 ( 0.00%)          if comps.front == State::Body {
     .                       comps.trim_left();
     .                   }
     6 ( 0.00%)          if comps.back == State::Body {
     .                       comps.trim_right();
     .                   }
     .                   unsafe { Path::from_u8_slice(comps.path) }
    54 ( 0.00%)      }
     .           
     .               /// Is the *original* path rooted?
     .               fn has_root(&self) -> bool {
   298 ( 0.00%)          if self.has_physical_root {
     .                       return true;
     .                   }
    15 ( 0.00%)          if let Some(p) = self.prefix {
     .                       if p.has_implicit_root() {
     .                           return true;
     .                       }
     .                   }
     .                   false
     .               }
     .           
     .               /// Should the normalized path include a leading . ?
     .               fn include_cur_dir(&self) -> bool {
     6 ( 0.00%)          if self.has_root() {
     .                       return false;
     .                   }
    11 ( 0.00%)          let mut iter = self.path[self.prefix_len()..].iter();
     4 ( 0.00%)          match (iter.next(), iter.next()) {
     .                       (Some(&b'.'), None) => true,
     .                       (Some(&b'.'), Some(&b)) => self.is_sep_byte(b),
     .                       _ => false,
     .                   }
     .               }
     .           
     .               // parse a given byte sequence into the corresponding path component
     .               fn parse_single_component<'b>(&self, comp: &'b [u8]) -> Option<Component<'b>> {
     .                   match comp {
   444 ( 0.00%)              b"." if self.prefix_verbatim() => Some(Component::CurDir),
     .                       b"." => None, // . components are normalized away, except at
     .                       // the beginning of a path, which is treated
     .                       // separately via `include_cur_dir`
     .                       b".." => Some(Component::ParentDir),
     .                       b"" => None,
     .                       _ => Some(Component::Normal(unsafe { u8_slice_as_os_str(comp) })),
     .                   }
     .               }
-- line 743 ----------------------------------------
-- line 750 ----------------------------------------
     .                       None => (0, self.path),
     .                       Some(i) => (1, &self.path[..i]),
     .                   };
     .                   (comp.len() + extra, self.parse_single_component(comp))
     .               }
     .           
     .               // parse a component from the right, saying how many bytes to consume to
     .               // remove the component
   370 ( 0.00%)      fn parse_next_component_back(&self) -> (usize, Option<Component<'a>>) {
     .                   debug_assert!(self.back == State::Body);
   148 ( 0.00%)          let start = self.len_before_body();
    74 ( 0.00%)          let (extra, comp) = match self.path[start..].iter().rposition(|b| self.is_sep_byte(*b)) {
     .                       None => (0, &self.path[start..]),
   292 ( 0.00%)              Some(i) => (1, &self.path[start + i + 1..]),
     .                   };
   444 ( 0.00%)          (comp.len() + extra, self.parse_single_component(comp))
   296 ( 0.00%)      }
     .           
     .               // trim away repeated separators (i.e., empty components) on the left
     .               fn trim_left(&mut self) {
     .                   while !self.path.is_empty() {
     .                       let (size, comp) = self.parse_next_component();
     .                       if comp.is_some() {
     .                           return;
     .                       } else {
     .                           self.path = &self.path[size..];
     .                       }
     .                   }
     .               }
     .           
     .               // trim away repeated separators (i.e., empty components) on the right
     .               fn trim_right(&mut self) {
    18 ( 0.00%)          while self.path.len() > self.len_before_body() {
    18 ( 0.00%)              let (size, comp) = self.parse_next_component_back();
     6 ( 0.00%)              if comp.is_some() {
     .                           return;
     .                       } else {
     .                           self.path = &self.path[..self.path.len() - size];
     .                       }
     .                   }
     .               }
     .           }
     .           
-- line 792 ----------------------------------------
-- line 930 ----------------------------------------
     .                       }
     .                   }
     .                   None
     .               }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl<'a> DoubleEndedIterator for Components<'a> {
   690 ( 0.00%)      fn next_back(&mut self) -> Option<Component<'a>> {
   347 ( 0.00%)          while !self.finished() {
   148 ( 0.00%)              match self.back {
   345 ( 0.00%)                  State::Body if self.path.len() > self.len_before_body() => {
   816 ( 0.00%)                      let (size, comp) = self.parse_next_component_back();
   272 ( 0.00%)                      self.path = &self.path[..self.path.len() - size];
    68 ( 0.00%)                      if comp.is_some() {
   544 ( 0.00%)                          return comp;
     .                               }
     .                           }
     .                           State::Body => {
     3 ( 0.00%)                      self.back = State::StartDir;
     .                           }
     .                           State::StartDir => {
     2 ( 0.00%)                      self.back = State::Prefix;
    69 ( 0.00%)                      if self.has_physical_root {
     .                                   self.path = &self.path[..self.path.len() - 1];
     .                                   return Some(Component::RootDir);
    12 ( 0.00%)                      } else if let Some(p) = self.prefix {
     .                                   if p.has_implicit_root() && !p.is_verbatim() {
     .                                       return Some(Component::RootDir);
     .                                   }
     .                               } else if self.include_cur_dir() {
     .                                   self.path = &self.path[..self.path.len() - 1];
     .                                   return Some(Component::CurDir);
     .                               }
     .                           }
-- line 964 ----------------------------------------
-- line 965 ----------------------------------------
     .                           State::Prefix if self.prefix_len() > 0 => {
     .                               self.back = State::Done;
     .                               return Some(Component::Prefix(PrefixComponent {
     .                                   raw: unsafe { u8_slice_as_os_str(self.path) },
     .                                   parsed: self.prefix.unwrap(),
     .                               }));
     .                           }
     .                           State::Prefix => {
     1 ( 0.00%)                      self.back = State::Done;
     .                               return None;
     .                           }
     .                           State::Done => unreachable!(),
     .                       }
     .                   }
     .                   None
   621 ( 0.00%)      }
     .           }
     .           
     .           #[stable(feature = "fused", since = "1.26.0")]
     .           impl FusedIterator for Components<'_> {}
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl<'a> cmp::PartialEq for Components<'a> {
     .               #[inline]
     .               fn eq(&self, other: &Components<'a>) -> bool {
     .                   let Components { path: _, front: _, back: _, has_physical_root: _, prefix: _ } = self;
     .           
     .                   // Fast path for exact matches, e.g. for hashmap lookups.
     .                   // Don't explicitly compare the prefix or has_physical_root fields since they'll
     .                   // either be covered by the `path` buffer or are only relevant for `prefix_verbatim()`.
    88 ( 0.00%)          if self.path.len() == other.path.len()
    11 ( 0.00%)              && self.front == other.front
     .                       && self.back == State::Body
     .                       && other.back == State::Body
    11 ( 0.00%)              && self.prefix_verbatim() == other.prefix_verbatim()
     .                   {
     .                       // possible future improvement: this could bail out earlier if there were a
     .                       // reverse memcmp/bcmp comparing back to front
    33 ( 0.00%)              if self.path == other.path {
     .                           return true;
     .                       }
     .                   }
     .           
     .                   // compare back to front since absolute paths often share long prefixes
     1 ( 0.00%)          Iterator::eq(self.clone().rev(), other.clone().rev())
     .               }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl cmp::Eq for Components<'_> {}
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl<'a> cmp::PartialOrd for Components<'a> {
-- line 1017 ----------------------------------------
-- line 1179 ----------------------------------------
     .               /// use std::path::PathBuf;
     .               ///
     .               /// let path = PathBuf::new();
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[must_use]
     .               #[inline]
     .               pub fn new() -> PathBuf {
    36 ( 0.00%)          PathBuf { inner: OsString::new() }
     .               }
     .           
     .               /// Creates a new `PathBuf` with a given capacity used to create the
     .               /// internal [`OsString`]. See [`with_capacity`] defined on [`OsString`].
     .               ///
     .               /// # Examples
     .               ///
     .               /// ```
-- line 1195 ----------------------------------------
-- line 1260 ----------------------------------------
     .               /// use std::path::PathBuf;
     .               ///
     .               /// let mut path = PathBuf::from("/tmp");
     .               /// path.push("/etc");
     .               /// assert_eq!(path, PathBuf::from("/etc"));
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               pub fn push<P: AsRef<Path>>(&mut self, path: P) {
   288 ( 0.00%)          self._push(path.as_ref())
     .               }
     .           
   576 ( 0.00%)      fn _push(&mut self, path: &Path) {
     .                   // in general, a separator is needed if the rightmost byte is not a separator
     .                   let mut need_sep = self.as_mut_vec().last().map(|c| !is_sep_byte(*c)).unwrap_or(false);
     .           
     .                   // in the special case of `C:` on Windows, do *not* add a separator
     .                   let comps = self.components();
     .           
     .                   if comps.prefix_len() > 0
     .                       && comps.prefix_len() == comps.path.len()
-- line 1279 ----------------------------------------
-- line 1327 ----------------------------------------
     .                       return;
     .           
     .                   // `path` has a root but no prefix, e.g., `\windows` (Windows only)
     .                   } else if path.has_root() {
     .                       let prefix_len = self.components().prefix_remaining();
     .                       self.as_mut_vec().truncate(prefix_len);
     .           
     .                   // `path` is a pure relative path
    71 ( 0.00%)          } else if need_sep {
     .                       self.inner.push(MAIN_SEP_STR);
     .                   }
     .           
     .                   self.inner.push(path);
   432 ( 0.00%)      }
     .           
     .               /// Truncates `self` to [`self.parent`].
     .               ///
     .               /// Returns `false` and does nothing if [`self.parent`] is [`None`].
     .               /// Otherwise, returns `true`.
     .               ///
     .               /// [`self.parent`]: Path::parent
     .               ///
-- line 1348 ----------------------------------------
-- line 1354 ----------------------------------------
     .               /// let mut p = PathBuf::from("/spirited/away.rs");
     .               ///
     .               /// p.pop();
     .               /// assert_eq!(Path::new("/spirited"), p);
     .               /// p.pop();
     .               /// assert_eq!(Path::new("/"), p);
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
    16 ( 0.00%)      pub fn pop(&mut self) -> bool {
     4 ( 0.00%)          match self.parent().map(|p| p.as_u8_slice().len()) {
     .                       Some(len) => {
     .                           self.as_mut_vec().truncate(len);
     .                           true
     .                       }
     .                       None => false,
     .                   }
    16 ( 0.00%)      }
     .           
     .               /// Updates [`self.file_name`] to `file_name`.
     .               ///
     .               /// If [`self.file_name`] was [`None`], this is equivalent to pushing
     .               /// `file_name`.
     .               ///
     .               /// Otherwise it is equivalent to calling [`pop`] and then pushing
     .               /// `file_name`. The new path will be a sibling of the original path.
-- line 1378 ----------------------------------------
-- line 1428 ----------------------------------------
     .               /// p.set_extension("force");
     .               /// assert_eq!(Path::new("/feel/the.force"), p.as_path());
     .               ///
     .               /// p.set_extension("dark_side");
     .               /// assert_eq!(Path::new("/feel/the.dark_side"), p.as_path());
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               pub fn set_extension<S: AsRef<OsStr>>(&mut self, extension: S) -> bool {
    12 ( 0.00%)          self._set_extension(extension.as_ref())
     .               }
     .           
    30 ( 0.00%)      fn _set_extension(&mut self, extension: &OsStr) -> bool {
    24 ( 0.00%)          let file_stem = match self.file_stem() {
     .                       None => return false,
     .                       Some(f) => os_str_as_u8_slice(f),
     .                   };
     .           
     .                   // truncate until right after the file stem
     .                   let end_file_stem = file_stem[file_stem.len()..].as_ptr() as usize;
     .                   let start = os_str_as_u8_slice(&self.inner).as_ptr() as usize;
     .                   let v = self.as_mut_vec();
     .                   v.truncate(end_file_stem.wrapping_sub(start));
     .           
     .                   // add the new extension, if any
     .                   let new = os_str_as_u8_slice(extension);
     3 ( 0.00%)          if !new.is_empty() {
     9 ( 0.00%)              v.reserve_exact(new.len() + 1);
     .                       v.push(b'.');
     .                       v.extend_from_slice(new);
     .                   }
     .           
     .                   true
    24 ( 0.00%)      }
     .           
     .               /// Consumes the `PathBuf`, yielding its internal [`OsString`] storage.
     .               ///
     .               /// # Examples
     .               ///
     .               /// ```
     .               /// use std::path::PathBuf;
     .               ///
-- line 1468 ----------------------------------------
-- line 1558 ----------------------------------------
     .                   self.inner.shrink_to(min_capacity)
     .               }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl Clone for PathBuf {
     .               #[inline]
     .               fn clone(&self) -> Self {
    12 ( 0.00%)          PathBuf { inner: self.inner.clone() }
     .               }
     .           
     .               #[inline]
     .               fn clone_from(&mut self, source: &Self) {
     .                   self.inner.clone_from(&source.inner)
     .               }
     .           }
     .           
-- line 1574 ----------------------------------------
-- line 1642 ----------------------------------------
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl From<OsString> for PathBuf {
     .               /// Converts an [`OsString`] into a [`PathBuf`]
     .               ///
     .               /// This conversion does not allocate or copy memory.
     .               #[inline]
     .               fn from(s: OsString) -> PathBuf {
   225 ( 0.00%)          PathBuf { inner: s }
     .               }
     .           }
     .           
     .           #[stable(feature = "from_path_buf_for_os_string", since = "1.14.0")]
     .           impl From<PathBuf> for OsString {
     .               /// Converts a [`PathBuf`] into an [`OsString`]
     .               ///
     .               /// This conversion does not allocate or copy memory.
-- line 1658 ----------------------------------------
-- line 1825 ----------------------------------------
     .               }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl ToOwned for Path {
     .               type Owned = PathBuf;
     .               #[inline]
     .               fn to_owned(&self) -> PathBuf {
     9 ( 0.00%)          self.to_path_buf()
     .               }
     .               #[inline]
     .               fn clone_into(&self, target: &mut PathBuf) {
     .                   self.inner.clone_into(&mut target.inner);
     .               }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl cmp::PartialEq for PathBuf {
     .               #[inline]
    44 ( 0.00%)      fn eq(&self, other: &PathBuf) -> bool {
    44 ( 0.00%)          self.components() == other.components()
    44 ( 0.00%)      }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl Hash for PathBuf {
   315 ( 0.00%)      fn hash<H: Hasher>(&self, h: &mut H) {
     .                   self.as_path().hash(h)
   252 ( 0.00%)      }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl cmp::Eq for PathBuf {}
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl cmp::PartialOrd for PathBuf {
     .               #[inline]
-- line 1861 ----------------------------------------
-- line 1936 ----------------------------------------
     .           
     .           impl Path {
     .               // The following (private!) function allows construction of a path from a u8
     .               // slice, which is only safe when it is known to follow the OsStr encoding.
     .               unsafe fn from_u8_slice(s: &[u8]) -> &Path {
     .                   unsafe { Path::new(u8_slice_as_os_str(s)) }
     .               }
     .               // The following (private!) function reveals the byte encoding used for OsStr.
 1,424 ( 0.00%)      fn as_u8_slice(&self) -> &[u8] {
     .                   os_str_as_u8_slice(&self.inner)
   712 ( 0.00%)      }
     .           
     .               /// Directly wraps a string slice as a `Path` slice.
     .               ///
     .               /// This is a cost-free conversion.
     .               ///
     .               /// # Examples
     .               ///
     .               /// ```
-- line 1954 ----------------------------------------
-- line 1964 ----------------------------------------
     .               ///
     .               /// let string = String::from("foo.txt");
     .               /// let from_string = Path::new(&string);
     .               /// let from_path = Path::new(&from_string);
     .               /// assert_eq!(from_string, from_path);
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               pub fn new<S: AsRef<OsStr> + ?Sized>(s: &S) -> &Path {
     4 ( 0.00%)          unsafe { &*(s.as_ref() as *const OsStr as *const Path) }
     .               }
     .           
     .               /// Yields the underlying [`OsStr`] slice.
     .               ///
     .               /// # Examples
     .               ///
     .               /// ```
     .               /// use std::path::Path;
-- line 1980 ----------------------------------------
-- line 2050 ----------------------------------------
     .               ///
     .               /// let path_buf = Path::new("foo.txt").to_path_buf();
     .               /// assert_eq!(path_buf, std::path::PathBuf::from("foo.txt"));
     .               /// ```
     .               #[rustc_conversion_suggestion]
     .               #[must_use = "this returns the result of the operation, \
     .                             without modifying the original"]
     .               #[stable(feature = "rust1", since = "1.0.0")]
    56 ( 0.00%)      pub fn to_path_buf(&self) -> PathBuf {
     .                   PathBuf::from(self.inner.to_os_string())
    49 ( 0.00%)      }
     .           
     .               /// Returns `true` if the `Path` is absolute, i.e., if it is independent of
     .               /// the current directory.
     .               ///
     .               /// * On Unix, a path is absolute if it starts with the root, so
     .               /// `is_absolute` and [`has_root`] are equivalent.
     .               ///
     .               /// * On Windows, a path is absolute if it has a prefix and starts with the
-- line 2068 ----------------------------------------
-- line 2082 ----------------------------------------
     .               #[allow(deprecated)]
     .               pub fn is_absolute(&self) -> bool {
     .                   if cfg!(target_os = "redox") {
     .                       // FIXME: Allow Redox prefixes
     .                       self.has_root() || has_redox_scheme(self.as_u8_slice())
     .                   } else {
     .                       self.has_root() && (cfg!(any(unix, target_os = "wasi")) || self.prefix().is_some())
     .                   }
     1 ( 0.00%)      }
     .           
     .               /// Returns `true` if the `Path` is relative, i.e., not absolute.
     .               ///
     .               /// See [`is_absolute`]'s documentation for more details.
     .               ///
     .               /// # Examples
     .               ///
     .               /// ```
-- line 2098 ----------------------------------------
-- line 2150 ----------------------------------------
     .               /// assert_eq!(parent, Path::new("/foo"));
     .               ///
     .               /// let grand_parent = parent.parent().unwrap();
     .               /// assert_eq!(grand_parent, Path::new("/"));
     .               /// assert_eq!(grand_parent.parent(), None);
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[must_use]
     2 ( 0.00%)      pub fn parent(&self) -> Option<&Path> {
     .                   let mut comps = self.components();
     6 ( 0.00%)          let comp = comps.next_back();
     8 ( 0.00%)          comp.and_then(|p| match p {
     .                       Component::Normal(_) | Component::CurDir | Component::ParentDir => {
    10 ( 0.00%)                  Some(comps.as_path())
     .                       }
     .                       _ => None,
     .                   })
     4 ( 0.00%)      }
     .           
     .               /// Produces an iterator over `Path` and its ancestors.
     .               ///
     .               /// The iterator will yield the `Path` that is returned if the [`parent`] method is used zero
     .               /// or more times. That means, the iterator will yield `&self`, `&self.parent().unwrap()`,
     .               /// `&self.parent().unwrap().parent().unwrap()` and so on. If the [`parent`] method returns
     .               /// [`None`], the iterator will do likewise. The iterator will always yield at least one value,
     .               /// namely `&self`.
-- line 2175 ----------------------------------------
-- line 2217 ----------------------------------------
     .               /// assert_eq!(Some(OsStr::new("foo.txt")), Path::new("tmp/foo.txt").file_name());
     .               /// assert_eq!(Some(OsStr::new("foo.txt")), Path::new("foo.txt/.").file_name());
     .               /// assert_eq!(Some(OsStr::new("foo.txt")), Path::new("foo.txt/.//").file_name());
     .               /// assert_eq!(None, Path::new("foo.txt/..").file_name());
     .               /// assert_eq!(None, Path::new("/").file_name());
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[must_use]
    58 ( 0.00%)      pub fn file_name(&self) -> Option<&OsStr> {
   183 ( 0.00%)          self.components().next_back().and_then(|p| match p {
     .                       Component::Normal(p) => Some(p),
     .                       _ => None,
     .                   })
   116 ( 0.00%)      }
     .           
     .               /// Returns a path that, when joined onto `base`, yields `self`.
     .               ///
     .               /// # Errors
     .               ///
     .               /// If `base` is not a prefix of `self` (i.e., [`starts_with`]
     .               /// returns `false`), returns [`Err`].
     .               ///
-- line 2238 ----------------------------------------
-- line 2354 ----------------------------------------
     .               /// # See Also
     .               /// This method is similar to [`Path::file_prefix`], which extracts the portion of the file name
     .               /// before the *first* `.`
     .               ///
     .               /// [`Path::file_prefix`]: Path::file_prefix
     .               ///
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[must_use]
     3 ( 0.00%)      pub fn file_stem(&self) -> Option<&OsStr> {
     .                   self.file_name().map(rsplit_file_at_dot).and_then(|(before, after)| before.or(after))
     6 ( 0.00%)      }
     .           
     .               /// Extracts the prefix of [`self.file_name`].
     .               ///
     .               /// The prefix is:
     .               ///
     .               /// * [`None`], if there is no file name;
     .               /// * The entire file name if there is no embedded `.`;
     .               /// * The portion of the file name before the first non-beginning `.`;
-- line 2372 ----------------------------------------
-- line 2431 ----------------------------------------
     .               /// ```
     .               /// use std::path::{Path, PathBuf};
     .               ///
     .               /// assert_eq!(Path::new("/etc").join("passwd"), PathBuf::from("/etc/passwd"));
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[must_use]
     .               pub fn join<P: AsRef<Path>>(&self, path: P) -> PathBuf {
    40 ( 0.00%)          self._join(path.as_ref())
     .               }
     .           
   132 ( 0.00%)      fn _join(&self, path: &Path) -> PathBuf {
     .                   let mut buf = self.to_path_buf();
     .                   buf.push(path);
     .                   buf
    99 ( 0.00%)      }
     .           
     .               /// Creates an owned [`PathBuf`] like `self` but with the given file name.
     .               ///
     .               /// See [`PathBuf::set_file_name`] for more details.
     .               ///
     .               /// # Examples
     .               ///
     .               /// ```
-- line 2454 ----------------------------------------
-- line 2529 ----------------------------------------
     .               /// assert_eq!(components.next(), Some(Component::RootDir));
     .               /// assert_eq!(components.next(), Some(Component::Normal(OsStr::new("tmp"))));
     .               /// assert_eq!(components.next(), Some(Component::Normal(OsStr::new("foo.txt"))));
     .               /// assert_eq!(components.next(), None)
     .               /// ```
     .               ///
     .               /// [`CurDir`]: Component::CurDir
     .               #[stable(feature = "rust1", since = "1.0.0")]
    22 ( 0.00%)      pub fn components(&self) -> Components<'_> {
     .                   let prefix = parse_prefix(self.as_os_str());
   579 ( 0.00%)          Components {
     .                       path: self.as_u8_slice(),
     .                       prefix,
   162 ( 0.00%)              has_physical_root: has_physical_root(self.as_u8_slice(), prefix)
     .                           || has_redox_scheme(self.as_u8_slice()),
     .                       front: State::Prefix,
     .                       back: State::Body,
     .                   }
    22 ( 0.00%)      }
     .           
     .               /// Produces an iterator over the path's components viewed as [`OsStr`]
     .               /// slices.
     .               ///
     .               /// For more information about the particulars of how the path is separated
     .               /// into components, see [`components`].
     .               ///
     .               /// [`components`]: Path::components
-- line 2555 ----------------------------------------
-- line 2775 ----------------------------------------
     .               ///
     .               /// When the goal is simply to read from (or write to) the source, the most
     .               /// reliable way to test the source can be read (or written to) is to open
     .               /// it. Only using `is_file` can break workflows like `diff <( prog_a )` on
     .               /// a Unix-like system for example. See [`fs::File::open`] or
     .               /// [`fs::OpenOptions::open`] for more information.
     .               #[stable(feature = "path_ext", since = "1.5.0")]
     .               #[must_use]
     5 ( 0.00%)      pub fn is_file(&self) -> bool {
     .                   fs::metadata(self).map(|m| m.is_file()).unwrap_or(false)
     3 ( 0.00%)      }
     .           
     .               /// Returns `true` if the path exists on disk and is pointing at a directory.
     .               ///
     .               /// This function will traverse symbolic links to query information about the
     .               /// destination file.
     .               ///
     .               /// If you cannot access the metadata of the file, e.g. because of a
     .               /// permission error or broken symbolic links, this will return `false`.
-- line 2793 ----------------------------------------
-- line 2802 ----------------------------------------
     .               ///
     .               /// # See Also
     .               ///
     .               /// This is a convenience function that coerces errors to false. If you want to
     .               /// check errors, call [`fs::metadata`] and handle its [`Result`]. Then call
     .               /// [`fs::Metadata::is_dir`] if it was [`Ok`].
     .               #[stable(feature = "path_ext", since = "1.5.0")]
     .               #[must_use]
    10 ( 0.00%)      pub fn is_dir(&self) -> bool {
     .                   fs::metadata(self).map(|m| m.is_dir()).unwrap_or(false)
     6 ( 0.00%)      }
     .           
     .               /// Returns `true` if the path exists on disk and is pointing at a symbolic link.
     .               ///
     .               /// This function will not traverse symbolic links.
     .               /// In case of a broken symbolic link this will also return true.
     .               ///
     .               /// If you cannot access the directory containing the file, e.g., because of a
     .               /// permission error, this will return false.
-- line 2820 ----------------------------------------
-- line 2898 ----------------------------------------
     .           impl fmt::Debug for Display<'_> {
     .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     .                   fmt::Debug::fmt(&self.path, f)
     .               }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl fmt::Display for Display<'_> {
     4 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     4 ( 0.00%)          self.path.inner.display(f)
     .               }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl cmp::PartialEq for Path {
     .               #[inline]
     .               fn eq(&self, other: &Path) -> bool {
     .                   self.components() == other.components()
     .               }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl Hash for Path {
 5,192 ( 0.01%)      fn hash<H: Hasher>(&self, h: &mut H) {
   775 ( 0.00%)          let bytes = self.as_u8_slice();
     .                   let prefix_len = match parse_prefix(&self.inner) {
     .                       Some(prefix) => {
     .                           prefix.hash(h);
     .                           prefix.len()
     .                       }
     .                       None => 0,
     .                   };
     .                   let bytes = &bytes[prefix_len..];
     .           
     .                   let mut component_start = 0;
     .                   let mut bytes_hashed = 0;
     .           
     .                   for i in 0..bytes.len() {
73,428 ( 0.08%)              if is_sep_byte(bytes[i]) {
24,201 ( 0.03%)                  if i > component_start {
     .                               let to_hash = &bytes[component_start..i];
     8 ( 0.00%)                      h.write(to_hash);
14,714 ( 0.02%)                      bytes_hashed += to_hash.len();
     .                           }
     .           
     .                           // skip over separator and optionally a following CurDir item
     .                           // since components() would normalize these away
33,019 ( 0.04%)                  component_start = i + match bytes[i..] {
16,134 ( 0.02%)                      [_, b'.', b'/', ..] | [_, b'.'] => 2,
     .                               _ => 1,
     .                           };
     .                       }
     .                   }
     .           
 1,424 ( 0.00%)          if component_start < bytes.len() {
     .                       let to_hash = &bytes[component_start..];
     3 ( 0.00%)              h.write(to_hash);
 1,424 ( 0.00%)              bytes_hashed += to_hash.len();
     .                   }
     .           
     .                   h.write_usize(bytes_hashed);
 5,176 ( 0.01%)      }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl cmp::Eq for Path {}
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl cmp::PartialOrd for Path {
     .               #[inline]
-- line 2967 ----------------------------------------

36,612 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/path.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 180 ----------------------------------------
        .           /// assert_eq!(v, &[0.into()]);
        .           ///
        .           /// // Ensure that the last item was dropped.
        .           /// assert!(weak.upgrade().is_none());
        .           /// ```
        .           #[stable(feature = "drop_in_place", since = "1.8.0")]
        .           #[lang = "drop_in_place"]
        .           #[allow(unconditional_recursion)]
  481,232 ( 0.53%)  pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
        .               // Code here does not matter - this is replaced by the
        .               // real drop glue by the compiler.
        .           
        .               // SAFETY: see comment above
        .               unsafe { drop_in_place(to_drop) }
        .           }
        .           
        .           /// Creates a null raw pointer.
-- line 196 ----------------------------------------
-- line 448 ----------------------------------------
        .                       return;
        .                   }
        .               }
        .           
        .               // Direct swapping, for the cases not going through the block optimization.
        .               // SAFETY: the caller must guarantee that `x` and `y` are valid
        .               // for writes, properly aligned, and non-overlapping.
        .               unsafe {
        2 ( 0.00%)          let z = read(x);
        .                   copy_nonoverlapping(y, x, 1);
        .                   write(y, z);
        .               }
        .           }
        .           
        .           #[inline]
        .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
        .           const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {
-- line 464 ----------------------------------------
-- line 693 ----------------------------------------
        .               let mut tmp = MaybeUninit::<T>::uninit();
        .               // SAFETY: the caller must guarantee that `src` is valid for reads.
        .               // `src` cannot overlap `tmp` because `tmp` was just allocated on
        .               // the stack as a separate allocated object.
        .               //
        .               // Also, since we just wrote a valid value into `tmp`, it is guaranteed
        .               // to be properly initialized.
        .               unsafe {
   15,014 ( 0.02%)          copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
   64,074 ( 0.07%)          tmp.assume_init()
        .               }
        .           }
        .           
        .           /// Reads the value from `src` without moving it. This leaves the
        .           /// memory in `src` unchanged.
        .           ///
        .           /// Unlike [`read`], `read_unaligned` works with unaligned pointers.
        .           ///
-- line 710 ----------------------------------------
-- line 884 ----------------------------------------
        .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
        .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
        .               }
        .           
        .               // SAFETY: the caller must guarantee that `dst` is valid for writes.
        .               // `dst` cannot overlap `src` because the caller has mutable access
        .               // to `dst` while `src` is owned by this function.
        .               unsafe {
1,084,173 ( 1.20%)          copy_nonoverlapping(&src as *const T, dst, 1);
        .                   intrinsics::forget(src);
        .               }
        .           }
        .           
        .           /// Overwrites a memory location with the given value without reading or
        .           /// dropping the old value.
        .           ///
        .           /// Unlike [`write()`], the pointer may be unaligned.
-- line 900 ----------------------------------------
-- line 1206 ----------------------------------------
        .               if stride == 1 {
        .                   // `stride == 1` case can be computed more simply through `-p (mod a)`, but doing so
        .                   // inhibits LLVM's ability to select instructions like `lea`. Instead we compute
        .                   //
        .                   //    round_up_to_next_alignment(p, a) - p
        .                   //
        .                   // which distributes operations around the load-bearing, but pessimizing `and` sufficiently
        .                   // for LLVM to be able to utilize the various optimizations it knows about.
       30 ( 0.00%)          return wrapping_sub(
      206 ( 0.00%)              wrapping_add(p as usize, a_minus_one) & wrapping_sub(0, a),
        .                       p as usize,
        .                   );
        .               }
        .           
        .               let pmoda = p as usize & a_minus_one;
        .               if pmoda == 0 {
        .                   // Already aligned. Yay!
        .                   return 0;
-- line 1223 ----------------------------------------
-- line 1348 ----------------------------------------
        .           /// assert!(std::ptr::eq(
        .           ///     &wrapper as &dyn Trait as *const dyn Trait as *const u8,
        .           ///     &wrapper.member as &dyn Trait as *const dyn Trait as *const u8,
        .           /// ));
        .           /// ```
        .           #[stable(feature = "ptr_eq", since = "1.17.0")]
        .           #[inline]
        .           pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {
   10,791 ( 0.01%)      a == b
        .           }
        .           
        .           /// Hash a raw pointer.
        .           ///
        .           /// This can be used to hash a `&T` reference (which coerces to `*const T` implicitly)
        .           /// by its address rather than the value it points to
        .           /// (which is what the `Hash for &T` implementation does).
        .           ///
-- line 1364 ----------------------------------------

   77,258 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/dl-lookup.c
  ./elf/do-rel.h
  ./malloc/malloc.c
  ./stdio-common/vfscanf-internal.c
  ./stdlib/cxa_finalize.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/strcmp.S

--------------------------------------------------------------------------------
Ir                  
--------------------------------------------------------------------------------
30,127,410 (33.28%)  events annotated

