--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name rusoto_credential --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 -C metadata=7fa2d80787fbe7d7 -C extra-filename=-7fa2d80787fbe7d7 --out-dir /usr/home/liquid/tmp/.tmp42AMHB/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmp42AMHB/target/debug/deps --extern async_trait=/usr/home/liquid/tmp/.tmp42AMHB/target/debug/deps/libasync_trait-0d29c6b3600675a5.so --extern chrono=/usr/home/liquid/tmp/.tmp42AMHB/target/debug/deps/libchrono-9df97c71cec152de.rmeta --extern dirs_next=/usr/home/liquid/tmp/.tmp42AMHB/target/debug/deps/libdirs_next-afe65f4abb0d3dcd.rmeta --extern futures=/usr/home/liquid/tmp/.tmp42AMHB/target/debug/deps/libfutures-f14452caefc54bc4.rmeta --extern hyper=/usr/home/liquid/tmp/.tmp42AMHB/target/debug/deps/libhyper-143d8490fb01ae0e.rmeta --extern serde=/usr/home/liquid/tmp/.tmp42AMHB/target/debug/deps/libserde-977fca36b4b9afe1.rmeta --extern serde_json=/usr/home/liquid/tmp/.tmp42AMHB/target/debug/deps/libserde_json-ea977746e1b39582.rmeta --extern shlex=/usr/home/liquid/tmp/.tmp42AMHB/target/debug/deps/libshlex-3c87580d81ec9353.rmeta --extern tokio=/usr/home/liquid/tmp/.tmp42AMHB/target/debug/deps/libtokio-26fda870afd7d021.rmeta --extern zeroize=/usr/home/liquid/tmp/.tmp42AMHB/target/debug/deps/libzeroize-26256fdb52adbcdd.rmeta -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-rusoto_credential-0.47.0-Check-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
1,679,300,890 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   file:function
--------------------------------------------------------------------------------
54,927,886 ( 3.27%)  ./malloc/malloc.c:_int_free
40,930,502 ( 2.44%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
38,560,853 ( 2.30%)  ./malloc/malloc.c:_int_malloc
34,696,671 ( 2.07%)  ./elf/dl-lookup.c:do_lookup_x
33,747,656 ( 2.01%)  ./malloc/malloc.c:malloc
28,665,370 ( 1.71%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
17,132,086 ( 1.02%)  ./malloc/malloc.c:free
10,796,015 ( 0.64%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 7,253,988 ( 0.43%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
 6,985,360 ( 0.42%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs:<rustc_trait_selection::traits::select::SelectionContext>::evaluate_trait_predicate_recursively
 6,655,365 ( 0.40%)  ./malloc/malloc.c:malloc_consolidate
 6,630,978 ( 0.39%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
 6,245,050 ( 0.37%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/server.rs:<proc_macro::bridge::server::Dispatcher<proc_macro::bridge::server::MarkedTypes<rustc_expand::proc_macro_server::Rustc>> as proc_macro::bridge::server::DispatcherTrait>::dispatch
 6,215,418 ( 0.37%)  ./elf/../elf/dl-tls.c:_dl_update_slotinfo
 5,498,640 ( 0.33%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/sip.rs:<std::collections::hash::map::DefaultHasher as core::hash::Hasher>::write
 5,411,233 ( 0.32%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
 5,120,836 ( 0.30%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
 5,074,912 ( 0.30%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
 4,925,559 ( 0.29%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 4,778,959 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
 4,673,924 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
 4,534,838 ( 0.27%)  ./malloc/malloc.c:realloc
 4,378,140 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
 4,312,954 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 4,302,339 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
 4,204,415 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 4,198,880 ( 0.25%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
 4,174,291 ( 0.25%)  ./malloc/malloc.c:unlink_chunk.constprop.0
 4,102,126 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/client.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
 3,942,434 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs:<rustc_trait_selection::traits::select::SelectionContext>::assemble_candidates
 3,887,760 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 3,672,501 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::TraitPredicate>::remap_constness
 3,588,646 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 3,532,984 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 3,182,555 ( 0.19%)  ./malloc/malloc.c:_int_realloc
 3,110,912 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::lang_items
 3,081,343 ( 0.18%)  ./elf/do-rel.h:_dl_relocate_object
 3,024,394 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_predicate
 2,908,832 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
 2,887,130 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
 2,860,913 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::PredicateKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 2,818,603 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs:<rustc_infer::infer::InferCtxtInner>::rollback_to
 2,809,668 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 2,744,947 ( 0.16%)  ./elf/dl-lookup.c:check_match
 2,738,007 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::cmp::PartialEq>::eq
 2,736,474 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/traits.rs:core::str::traits::<impl core::cmp::PartialEq for str>::eq
 2,706,313 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 2,687,322 ( 0.16%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs:stacker::remaining_stack
 2,671,366 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs:<proc_macro::bridge::api_tags::Method as proc_macro::bridge::rpc::DecodeMut<()>>::decode
 2,636,844 ( 0.16%)  ./elf/../elf/dl-tls.c:update_get_addr
 2,635,094 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs:rustc_mir_dataflow::drop_flag_effects::on_all_children_bits::is_terminal_path
 2,578,068 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<rustc_middle::ty::subst::SubstFolder as rustc_middle::ty::fold::TypeFolder>::fold_ty
 2,500,391 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/freshen.rs:<rustc_infer::infer::freshen::TypeFreshener as rustc_middle::ty::fold::TypeFolder>::fold_ty
 2,497,225 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs:rustc_middle::ty::relate::super_relate_tys::<rustc_infer::infer::combine::Generalizer>
 2,473,236 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:core::ptr::drop_in_place<proc_macro::bridge::scoped_cell::ScopedCell<T>::replace::PutBackOnDrop<proc_macro::bridge::client::BridgeStateL>>
 2,454,732 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs:<rustc_infer::infer::type_variable::TypeVariableTable>::probe
 2,369,952 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 2,319,941 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
 2,238,234 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs:<rustc_trait_selection::traits::select::SelectionContext>::candidate_from_obligation
 2,228,247 ( 0.13%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
 2,197,197 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/cmp.rs:<[A] as core::slice::cmp::SlicePartialEq<B>>::equal
 2,165,703 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/mem/mod.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
 2,156,715 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
 2,143,045 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/scoped_cell.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
 2,118,961 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs:<rustc_infer::infer::combine::Generalizer as rustc_middle::ty::relate::TypeRelation>::tys
 2,113,980 ( 0.13%)  ./elf/../sysdeps/x86_64/tls_get_addr.S:__tls_get_addr
 2,052,265 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs:<core::result::Result<T,E> as proc_macro::bridge::rpc::DecodeMut<S>>::decode
 2,043,070 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs:<proc_macro::bridge::api_tags::Method as proc_macro::bridge::rpc::Encode<S>>::encode
 2,027,775 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::start_snapshot
 2,025,880 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>)>>::remove_entry::<hashbrown::map::equivalent_key<rustc_span::def_id::DefId, rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>>::{closure#0}>
 2,019,347 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
 1,998,716 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next
 1,951,700 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::sty::RegionKind>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::RegionKind, rustc_middle::ty::context::Interned<rustc_middle::ty::sty::RegionKind>>::{closure#0}>
 1,935,540 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
 1,923,455 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::reuse_or_mk_predicate
 1,922,365 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::DefId, &(rustc_middle::ty::assoc::AssocItem, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::DefId>
 1,893,978 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/traversal.rs:<rustc_middle::mir::traversal::Postorder>::traverse_successor
 1,862,349 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/buffer.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
 1,846,969 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::freshen::TypeFreshener>
 1,836,035 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_transform/src/simplify.rs:<rustc_mir_transform::simplify::CfgSimplifier>::simplify
 1,823,105 ( 0.11%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
 1,723,820 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::freshen::TypeFreshener>
 1,720,480 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/closure.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
 1,719,744 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs:core::cmp::impls::<impl core::cmp::PartialEq<&B> for &A>::eq
 1,715,182 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs:<rustc_borrowck::MirBorrowckCtxt>::access_place
 1,710,632 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mut_ptr.rs:core::ptr::mut_ptr::<impl *mut T>::guaranteed_eq
 1,707,492 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_expand::proc_macro_server::Ident, proc_macro::bridge::client::Ident>, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<core::num::nonzero::NonZeroU32>
 1,700,238 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/into_iter.rs:<alloc::vec::into_iter::IntoIter<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>> as core::ops::drop::Drop>::drop
 1,685,610 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/scoped_cell.rs
--------------------------------------------------------------------------------
Ir                 

-- line 22 ----------------------------------------
        .           impl<'a, 'b, T: LambdaL> Deref for RefMutL<'a, 'b, T> {
        .               type Target = <T as ApplyL<'b>>::Out;
        .               fn deref(&self) -> &Self::Target {
        .                   self.0
        .               }
        .           }
        .           
        .           impl<'a, 'b, T: LambdaL> DerefMut for RefMutL<'a, 'b, T> {
       48 ( 0.00%)      fn deref_mut(&mut self) -> &mut Self::Target {
       24 ( 0.00%)          self.0
       48 ( 0.00%)      }
        .           }
        .           
        .           pub struct ScopedCell<T: LambdaL>(Cell<<T as ApplyL<'static>>::Out>);
        .           
        .           impl<T: LambdaL> ScopedCell<T> {
        .               #[rustc_allow_const_fn_unstable(const_fn)]
        3 ( 0.00%)      pub const fn new(value: <T as ApplyL<'static>>::Out) -> Self {
       10 ( 0.00%)          ScopedCell(Cell::new(value))
        2 ( 0.00%)      }
        .           
        .               /// Sets the value in `self` to `replacement` while
        .               /// running `f`, which gets the old value, mutably.
        .               /// The old value will be restored after `f` exits, even
        .               /// by panic, including modifications made to it by `f`.
  795,156 ( 0.05%)      pub fn replace<'a, R>(
        .                   &self,
        .                   replacement: <T as ApplyL<'a>>::Out,
        .                   f: impl for<'b, 'c> FnOnce(RefMutL<'b, 'c, T>) -> R,
        .               ) -> R {
        .                   /// Wrapper that ensures that the cell always gets filled
        .                   /// (with the original state, optionally changed by `f`),
        .                   /// even if `f` had panicked.
        .                   struct PutBackOnDrop<'a, T: LambdaL> {
        .                       cell: &'a ScopedCell<T>,
        .                       value: Option<<T as ApplyL<'static>>::Out>,
        .                   }
        .           
        .                   impl<'a, T: LambdaL> Drop for PutBackOnDrop<'a, T> {
      108 ( 0.00%)              fn drop(&mut self) {
  107,928 ( 0.01%)                  self.cell.0.set(self.value.take().unwrap());
       72 ( 0.00%)              }
        .                   }
        .           
  215,674 ( 0.01%)          let mut put_back_on_drop = PutBackOnDrop {
        .                       cell: self,
      360 ( 0.00%)              value: Some(self.0.replace(unsafe {
       72 ( 0.00%)                  let erased = mem::transmute_copy(&replacement);
      432 ( 0.00%)                  mem::forget(replacement);
      360 ( 0.00%)                  erased
        .                       })),
        .                   };
        .           
   45,583 ( 0.00%)          f(RefMutL(put_back_on_drop.value.as_mut().unwrap()))
1,048,678 ( 0.06%)      }
        .           
        .               /// Sets the value in `self` to `value` while running `f`.
       84 ( 0.00%)      pub fn set<R>(&self, value: <T as ApplyL<'_>>::Out, f: impl FnOnce() -> R) -> R {
      192 ( 0.00%)          self.replace(value, |_| f())
       24 ( 0.00%)      }
        .           }

   36,807 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/scoped_cell.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/into_iter.rs
--------------------------------------------------------------------------------
Ir                 

-- line 50 ----------------------------------------
        .               /// ```
        .               /// let vec = vec!['a', 'b', 'c'];
        .               /// let mut into_iter = vec.into_iter();
        .               /// assert_eq!(into_iter.as_slice(), &['a', 'b', 'c']);
        .               /// let _ = into_iter.next().unwrap();
        .               /// assert_eq!(into_iter.as_slice(), &['b', 'c']);
        .               /// ```
        .               #[stable(feature = "vec_into_iter_as_slice", since = "1.15.0")]
    1,036 ( 0.00%)      pub fn as_slice(&self) -> &[T] {
   21,340 ( 0.00%)          unsafe { slice::from_raw_parts(self.ptr, self.len()) }
    1,036 ( 0.00%)      }
        .           
        .               /// Returns the remaining items of this iterator as a mutable slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let vec = vec!['a', 'b', 'c'];
        .               /// let mut into_iter = vec.into_iter();
-- line 68 ----------------------------------------
-- line 79 ----------------------------------------
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               #[inline]
        .               pub fn allocator(&self) -> &A {
        .                   &self.alloc
        .               }
        .           
    2,210 ( 0.00%)      fn as_raw_mut_slice(&mut self) -> *mut [T] {
  419,565 ( 0.02%)          ptr::slice_from_raw_parts_mut(self.ptr as *mut T, self.len())
    2,210 ( 0.00%)      }
        .           
        .               /// Drops remaining elements and relinquishes the backing allocation.
        .               ///
        .               /// This is roughly equivalent to the following, but more efficient
        .               ///
        .               /// ```
        .               /// # let mut into_iter = Vec::<u8>::with_capacity(10).into_iter();
        .               /// (&mut into_iter).for_each(core::mem::drop);
-- line 97 ----------------------------------------
-- line 99 ----------------------------------------
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               pub(super) fn forget_allocation_drop_remaining(&mut self) {
        .                   let remaining = self.as_raw_mut_slice();
        .           
        .                   // overwrite the individual fields instead of creating a new
        .                   // struct and then overwriting &mut self.
        .                   // this creates less assembly
      685 ( 0.00%)          self.cap = 0;
    1,370 ( 0.00%)          self.buf = unsafe { NonNull::new_unchecked(RawVec::NEW.ptr()) };
      830 ( 0.00%)          self.ptr = self.buf.as_ptr();
      915 ( 0.00%)          self.end = self.buf.as_ptr();
        .           
        .                   unsafe {
        .                       ptr::drop_in_place(remaining);
        .                   }
        .               }
        .           }
        .           
        .           #[stable(feature = "vec_intoiter_as_ref", since = "1.46.0")]
-- line 118 ----------------------------------------
-- line 127 ----------------------------------------
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<T: Sync, A: Allocator + Sync> Sync for IntoIter<T, A> {}
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Iterator for IntoIter<T, A> {
        .               type Item = T;
        .           
        .               #[inline]
    5,162 ( 0.00%)      fn next(&mut self) -> Option<T> {
1,215,335 ( 0.07%)          if self.ptr as *const _ == self.end {
   55,398 ( 0.00%)              None
    1,927 ( 0.00%)          } else if mem::size_of::<T>() == 0 {
        .                       // purposefully don't use 'ptr.offset' because for
        .                       // vectors with 0-size elements this would return the
        .                       // same pointer.
        .                       self.ptr = unsafe { arith_offset(self.ptr as *const i8, 1) as *mut T };
        .           
        .                       // Make up a value of this ZST.
        .                       Some(unsafe { mem::zeroed() })
        .                   } else {
    1,341 ( 0.00%)              let old = self.ptr;
  163,006 ( 0.01%)              self.ptr = unsafe { self.ptr.offset(1) };
        .           
   44,982 ( 0.00%)              Some(unsafe { ptr::read(old) })
        .                   }
    2,072 ( 0.00%)      }
        .           
        .               #[inline]
    8,260 ( 0.00%)      fn size_hint(&self) -> (usize, Option<usize>) {
    4,956 ( 0.00%)          let exact = if mem::size_of::<T>() == 0 {
        .                       (self.end as usize).wrapping_sub(self.ptr as usize)
        .                   } else {
    8,260 ( 0.00%)              unsafe { self.end.offset_from(self.ptr) as usize }
        .                   };
   14,871 ( 0.00%)          (exact, Some(exact))
    3,304 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn advance_by(&mut self, n: usize) -> Result<(), usize> {
        .                   let step_size = self.len().min(n);
        .                   let to_drop = ptr::slice_from_raw_parts_mut(self.ptr as *mut T, step_size);
        .                   if mem::size_of::<T>() == 0 {
        .                       // SAFETY: due to unchecked casts of unsigned amounts to signed offsets the wraparound
        .                       // effectively results in unsigned pointers representing positions 0..usize::MAX,
-- line 170 ----------------------------------------
-- line 181 ----------------------------------------
        .                   if step_size < n {
        .                       return Err(step_size);
        .                   }
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn count(self) -> usize {
        2 ( 0.00%)          self.len()
        .               }
        .           
        .               #[doc(hidden)]
        .               unsafe fn __iterator_get_unchecked(&mut self, i: usize) -> Self::Item
        .               where
        .                   Self: TrustedRandomAccessNoCoerce,
        .               {
        .                   // SAFETY: the caller must guarantee that `i` is in bounds of the
-- line 197 ----------------------------------------
-- line 207 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> DoubleEndedIterator for IntoIter<T, A> {
        .               #[inline]
        .               fn next_back(&mut self) -> Option<T> {
   24,932 ( 0.00%)          if self.end == self.ptr {
        .                       None
        .                   } else if mem::size_of::<T>() == 0 {
        .                       // See above for why 'ptr.offset' isn't used
        .                       self.end = unsafe { arith_offset(self.end as *const i8, -1) as *mut T };
        .           
        .                       // Make up a value of this ZST.
        .                       Some(unsafe { mem::zeroed() })
        .                   } else {
    6,111 ( 0.00%)              self.end = unsafe { self.end.offset(-1) };
        .           
      516 ( 0.00%)              Some(unsafe { ptr::read(self.end) })
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {
        .                   let step_size = self.len().min(n);
        .                   if mem::size_of::<T>() == 0 {
        .                       // SAFETY: same as for advance_by()
-- line 234 ----------------------------------------
-- line 295 ----------------------------------------
        .               #[cfg(test)]
        .               fn clone(&self) -> Self {
        .                   crate::slice::to_vec(self.as_slice(), self.alloc.clone()).into_iter()
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for IntoIter<T, A> {
1,321,918 ( 0.08%)      fn drop(&mut self) {
        .                   struct DropGuard<'a, T, A: Allocator>(&'a mut IntoIter<T, A>);
        .           
        .                   impl<T, A: Allocator> Drop for DropGuard<'_, T, A> {
    3,315 ( 0.00%)              fn drop(&mut self) {
        .                           unsafe {
        .                               // `IntoIter::alloc` is not used anymore after this
    4,420 ( 0.00%)                      let alloc = ptr::read(&self.0.alloc);
        .                               // RawVec handles deallocation
  341,473 ( 0.02%)                      let _ = RawVec::from_raw_parts_in(self.0.buf.as_ptr(), self.0.cap, alloc);
    1,105 ( 0.00%)                  }
    2,210 ( 0.00%)              }
        .                   }
        .           
    1,105 ( 0.00%)          let guard = DropGuard(self);
        .                   // destroy the remaining elements
        .                   unsafe {
    9,888 ( 0.00%)              ptr::drop_in_place(guard.0.as_raw_mut_slice());
        .                   }
        .                   // now `guard` will be dropped and do the rest
  886,151 ( 0.05%)      }
        .           }
        .           
        .           #[unstable(issue = "none", feature = "inplace_iteration")]
        .           #[doc(hidden)]
        .           unsafe impl<T, A: Allocator> InPlaceIterable for IntoIter<T, A> {}
        .           
        .           #[unstable(issue = "none", feature = "inplace_iteration")]
        .           #[doc(hidden)]
-- line 331 ----------------------------------------

  590,837 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/into_iter.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs
--------------------------------------------------------------------------------
Ir                 

-- line 222 ----------------------------------------
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               fn eq(&self, other: &Rhs) -> bool;
        .           
        .               /// This method tests for `!=`.
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[default_method_body_is_const]
   24,012 ( 0.00%)      fn ne(&self, other: &Rhs) -> bool {
   39,461 ( 0.00%)          !self.eq(other)
   32,016 ( 0.00%)      }
        .           }
        .           
        .           /// Derive macro generating an impl of the trait `PartialEq`.
        .           #[rustc_builtin_macro]
        .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
        .           #[allow_internal_unstable(core_intrinsics, structural_match)]
        .           pub macro PartialEq($item:item) {
        .               /* compiler built-in */
-- line 240 ----------------------------------------
-- line 328 ----------------------------------------
        .           /// assert_eq!(Ordering::Less, result);
        .           ///
        .           /// let result = 1.cmp(&1);
        .           /// assert_eq!(Ordering::Equal, result);
        .           ///
        .           /// let result = 2.cmp(&1);
        .           /// assert_eq!(Ordering::Greater, result);
        .           /// ```
   24,872 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Debug, Hash)]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[repr(i8)]
        .           pub enum Ordering {
        .               /// An ordering where a compared value is less than another.
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               Less = -1,
        .               /// An ordering where a compared value is equal to another.
        .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 344 ----------------------------------------
-- line 569 ----------------------------------------
        .               /// let result = x.0.cmp(&y.0).then_with(|| x.1.cmp(&y.1)).then_with(|| x.2.cmp(&y.2));
        .               ///
        .               /// assert_eq!(result, Ordering::Less);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "ordering_chaining", since = "1.17.0")]
        .               pub fn then_with<F: FnOnce() -> Ordering>(self, f: F) -> Ordering {
   16,907 ( 0.00%)          match self {
        .                       Equal => f(),
        .                       _ => self,
        .                   }
        .               }
        .           }
        .           
        .           /// A helper struct for reverse ordering.
        .           ///
-- line 585 ----------------------------------------
-- line 788 ----------------------------------------
        .               ///
        .               /// ```
        .               /// assert_eq!(2, 1.max(2));
        .               /// assert_eq!(2, 2.max(2));
        .               /// ```
        .               #[stable(feature = "ord_max_min", since = "1.21.0")]
        .               #[inline]
        .               #[must_use]
   43,554 ( 0.00%)      fn max(self, other: Self) -> Self
        .               where
        .                   Self: Sized,
        .               {
   79,670 ( 0.00%)          max_by(self, other, Ord::cmp)
   29,036 ( 0.00%)      }
        .           
        .               /// Compares and returns the minimum of two values.
        .               ///
        .               /// Returns the first argument if the comparison determines them to be equal.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!(1, 1.min(2));
        .               /// assert_eq!(2, 2.min(2));
        .               /// ```
        .               #[stable(feature = "ord_max_min", since = "1.21.0")]
        .               #[inline]
        .               #[must_use]
        9 ( 0.00%)      fn min(self, other: Self) -> Self
        .               where
        .                   Self: Sized,
        .               {
    3,952 ( 0.00%)          min_by(self, other, Ord::cmp)
        6 ( 0.00%)      }
        .           
        .               /// Restrict a value to a certain interval.
        .               ///
        .               /// Returns `max` if `self` is greater than `max`, and `min` if `self` is
        .               /// less than `min`. Otherwise this returns `self`.
        .               ///
        .               /// # Panics
        .               ///
-- line 829 ----------------------------------------
-- line 1097 ----------------------------------------
        .               /// let result = 2.0 < 1.0;
        .               /// assert_eq!(result, false);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[default_method_body_is_const]
        .               fn lt(&self, other: &Rhs) -> bool {
   41,041 ( 0.00%)          matches!(self.partial_cmp(other), Some(Less))
        .               }
        .           
        .               /// This method tests less than or equal to (for `self` and `other`) and is used by the `<=`
        .               /// operator.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1113 ----------------------------------------
-- line 1121 ----------------------------------------
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[default_method_body_is_const]
        .               fn le(&self, other: &Rhs) -> bool {
        .                   // Pattern `Some(Less | Eq)` optimizes worse than negating `None | Some(Greater)`.
        .                   // FIXME: The root cause was fixed upstream in LLVM with:
        .                   // https://github.com/llvm/llvm-project/commit/9bad7de9a3fb844f1ca2965f35d0c2a3d1e11775
        .                   // Revert this workaround once support for LLVM 12 gets dropped.
  268,308 ( 0.02%)          !matches!(self.partial_cmp(other), None | Some(Greater))
        .               }
        .           
        .               /// This method tests greater than (for `self` and `other`) and is used by the `>` operator.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let result = 1.0 > 2.0;
-- line 1137 ----------------------------------------
-- line 1139 ----------------------------------------
        .               ///
        .               /// let result = 2.0 > 2.0;
        .               /// assert_eq!(result, false);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[default_method_body_is_const]
        6 ( 0.00%)      fn gt(&self, other: &Rhs) -> bool {
  660,043 ( 0.04%)          matches!(self.partial_cmp(other), Some(Greater))
       10 ( 0.00%)      }
        .           
        .               /// This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`
        .               /// operator.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let result = 2.0 >= 1.0;
-- line 1157 ----------------------------------------
-- line 1159 ----------------------------------------
        .               ///
        .               /// let result = 2.0 >= 2.0;
        .               /// assert_eq!(result, true);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[default_method_body_is_const]
    3,846 ( 0.00%)      fn ge(&self, other: &Rhs) -> bool {
   18,096 ( 0.00%)          matches!(self.partial_cmp(other), Some(Greater | Equal))
    6,410 ( 0.00%)      }
        .           }
        .           
        .           /// Derive macro generating an impl of the trait `PartialOrd`.
        .           #[rustc_builtin_macro]
        .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
        .           #[allow_internal_unstable(core_intrinsics)]
        .           pub macro PartialOrd($item:item) {
        .               /* compiler built-in */
-- line 1177 ----------------------------------------
-- line 1190 ----------------------------------------
        .           ///
        .           /// assert_eq!(1, cmp::min(1, 2));
        .           /// assert_eq!(2, cmp::min(2, 2));
        .           /// ```
        .           #[inline]
        .           #[must_use]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[cfg_attr(not(test), rustc_diagnostic_item = "cmp_min")]
        9 ( 0.00%)  pub fn min<T: Ord>(v1: T, v2: T) -> T {
        6 ( 0.00%)      v1.min(v2)
        6 ( 0.00%)  }
        .           
        .           /// Returns the minimum of two values with respect to the specified comparison function.
        .           ///
        .           /// Returns the first argument if the comparison determines them to be equal.
        .           ///
        .           /// # Examples
        .           ///
        .           /// ```
-- line 1208 ----------------------------------------
-- line 1209 ----------------------------------------
        .           /// use std::cmp;
        .           ///
        .           /// assert_eq!(cmp::min_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 1);
        .           /// assert_eq!(cmp::min_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
        .           /// ```
        .           #[inline]
        .           #[must_use]
        .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
        9 ( 0.00%)  pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
  271,218 ( 0.02%)      match compare(&v1, &v2) {
       12 ( 0.00%)          Ordering::Less | Ordering::Equal => v1,
        .                   Ordering::Greater => v2,
        .               }
      107 ( 0.00%)  }
        .           
        .           /// Returns the element that gives the minimum value from the specified function.
        .           ///
        .           /// Returns the first argument if the comparison determines them to be equal.
        .           ///
        .           /// # Examples
        .           ///
        .           /// ```
-- line 1230 ----------------------------------------
-- line 1231 ----------------------------------------
        .           /// use std::cmp;
        .           ///
        .           /// assert_eq!(cmp::min_by_key(-2, 1, |x: &i32| x.abs()), 1);
        .           /// assert_eq!(cmp::min_by_key(-2, 2, |x: &i32| x.abs()), -2);
        .           /// ```
        .           #[inline]
        .           #[must_use]
        .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
      480 ( 0.00%)  pub fn min_by_key<T, F: FnMut(&T) -> K, K: Ord>(v1: T, v2: T, mut f: F) -> T {
      320 ( 0.00%)      min_by(v1, v2, |v1, v2| f(v1).cmp(&f(v2)))
      320 ( 0.00%)  }
        .           
        .           /// Compares and returns the maximum of two values.
        .           ///
        .           /// Returns the second argument if the comparison determines them to be equal.
        .           ///
        .           /// Internally uses an alias to [`Ord::max`].
        .           ///
        .           /// # Examples
-- line 1249 ----------------------------------------
-- line 1253 ----------------------------------------
        .           ///
        .           /// assert_eq!(2, cmp::max(1, 2));
        .           /// assert_eq!(2, cmp::max(2, 2));
        .           /// ```
        .           #[inline]
        .           #[must_use]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[cfg_attr(not(test), rustc_diagnostic_item = "cmp_max")]
   43,554 ( 0.00%)  pub fn max<T: Ord>(v1: T, v2: T) -> T {
   29,036 ( 0.00%)      v1.max(v2)
   29,036 ( 0.00%)  }
        .           
        .           /// Returns the maximum of two values with respect to the specified comparison function.
        .           ///
        .           /// Returns the second argument if the comparison determines them to be equal.
        .           ///
        .           /// # Examples
        .           ///
        .           /// ```
-- line 1271 ----------------------------------------
-- line 1272 ----------------------------------------
        .           /// use std::cmp;
        .           ///
        .           /// assert_eq!(cmp::max_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
        .           /// assert_eq!(cmp::max_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 2);
        .           /// ```
        .           #[inline]
        .           #[must_use]
        .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
   43,554 ( 0.00%)  pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
  697,637 ( 0.04%)      match compare(&v1, &v2) {
   41,191 ( 0.00%)          Ordering::Less | Ordering::Equal => v2,
   16,167 ( 0.00%)          Ordering::Greater => v1,
        .               }
  121,533 ( 0.01%)  }
        .           
        .           /// Returns the element that gives the maximum value from the specified function.
        .           ///
        .           /// Returns the second argument if the comparison determines them to be equal.
        .           ///
        .           /// # Examples
        .           ///
        .           /// ```
-- line 1293 ----------------------------------------
-- line 1308 ----------------------------------------
        .               use crate::cmp::Ordering::{self, Equal, Greater, Less};
        .               use crate::hint::unreachable_unchecked;
        .           
        .               macro_rules! partial_eq_impl {
        .                   ($($t:ty)*) => ($(
        .                       #[stable(feature = "rust1", since = "1.0.0")]
        .                       impl PartialEq for $t {
        .                           #[inline]
   24,858 ( 0.00%)                  fn eq(&self, other: &$t) -> bool { (*self) == (*other) }
        .                           #[inline]
   75,522 ( 0.00%)                  fn ne(&self, other: &$t) -> bool { (*self) != (*other) }
        .                       }
        .                   )*)
        .               }
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl PartialEq for () {
        .                   #[inline]
        .                   fn eq(&self, _other: &()) -> bool {
-- line 1326 ----------------------------------------
-- line 1392 ----------------------------------------
        .                   ($($t:ty)*) => ($(
        .                       #[stable(feature = "rust1", since = "1.0.0")]
        .                       impl PartialOrd for $t {
        .                           #[inline]
        .                           fn partial_cmp(&self, other: &$t) -> Option<Ordering> {
        .                               Some(self.cmp(other))
        .                           }
        .                           #[inline]
3,373,545 ( 0.20%)                  fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
        .                           #[inline]
   32,134 ( 0.00%)                  fn le(&self, other: &$t) -> bool { (*self) <= (*other) }
        .                           #[inline]
        .                           fn ge(&self, other: &$t) -> bool { (*self) >= (*other) }
        .                           #[inline]
        .                           fn gt(&self, other: &$t) -> bool { (*self) > (*other) }
        .                       }
        .           
        .                       #[stable(feature = "rust1", since = "1.0.0")]
        .                       impl Ord for $t {
        .                           #[inline]
   79,025 ( 0.00%)                  fn cmp(&self, other: &$t) -> Ordering {
        .                               // The order here is important to generate more optimal assembly.
        .                               // See <https://github.com/rust-lang/rust/issues/63758> for more info.
4,331,255 ( 0.26%)                      if *self < *other { Less }
   33,539 ( 0.00%)                      else if *self == *other { Equal }
    6,647 ( 0.00%)                      else { Greater }
   47,415 ( 0.00%)                  }
        .                       }
        .                   )*)
        .               }
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl Ord for () {
        .                   #[inline]
        .                   fn cmp(&self, _other: &()) -> Ordering {
-- line 1426 ----------------------------------------
-- line 1430 ----------------------------------------
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl Ord for bool {
        .                   #[inline]
        .                   fn cmp(&self, other: &bool) -> Ordering {
        .                       // Casting to i8's and converting the difference to an Ordering generates
        .                       // more optimal assembly.
        .                       // See <https://github.com/rust-lang/rust/issues/66780> for more info.
    7,475 ( 0.00%)              match (*self as i8) - (*other as i8) {
        .                           -1 => Less,
        .                           0 => Equal,
        .                           1 => Greater,
        .                           // SAFETY: bool as i8 returns 0 or 1, so the difference can't be anything else
        .                           _ => unsafe { unreachable_unchecked() },
        .                       }
        .                   }
        .               }
-- line 1446 ----------------------------------------
-- line 1474 ----------------------------------------
        .               // & pointers
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized, B: ?Sized> PartialEq<&B> for &A
        .               where
        .                   A: PartialEq<B>,
        .               {
        .                   #[inline]
  539,685 ( 0.03%)          fn eq(&self, other: &&B) -> bool {
1,155,979 ( 0.07%)              PartialEq::eq(*self, *other)
  490,101 ( 0.03%)          }
        .                   #[inline]
       90 ( 0.00%)          fn ne(&self, other: &&B) -> bool {
      201 ( 0.00%)              PartialEq::ne(*self, *other)
   46,289 ( 0.00%)          }
        .               }
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized, B: ?Sized> PartialOrd<&B> for &A
        .               where
        .                   A: PartialOrd<B>,
        .               {
        .                   #[inline]
        .                   fn partial_cmp(&self, other: &&B) -> Option<Ordering> {
        6 ( 0.00%)              PartialOrd::partial_cmp(*self, *other)
        .                   }
        .                   #[inline]
        .                   fn lt(&self, other: &&B) -> bool {
        .                       PartialOrd::lt(*self, *other)
        .                   }
        .                   #[inline]
        .                   fn le(&self, other: &&B) -> bool {
        .                       PartialOrd::le(*self, *other)
-- line 1505 ----------------------------------------
-- line 1516 ----------------------------------------
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized> Ord for &A
        .               where
        .                   A: Ord,
        .               {
        .                   #[inline]
        .                   fn cmp(&self, other: &Self) -> Ordering {
        .                       Ord::cmp(*self, *other)
    5,639 ( 0.00%)          }
        .               }
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized> Eq for &A where A: Eq {}
        .           
        .               // &mut pointers
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized, B: ?Sized> PartialEq<&mut B> for &mut A
-- line 1532 ----------------------------------------
-- line 1597 ----------------------------------------
        .               }
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized, B: ?Sized> PartialEq<&B> for &mut A
        .               where
        .                   A: PartialEq<B>,
        .               {
        .                   #[inline]
      784 ( 0.00%)          fn eq(&self, other: &&B) -> bool {
      980 ( 0.00%)              PartialEq::eq(*self, *other)
      784 ( 0.00%)          }
        .                   #[inline]
        .                   fn ne(&self, other: &&B) -> bool {
        .                       PartialEq::ne(*self, *other)
        .                   }
        .               }
        .           }

2,189,015 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs
--------------------------------------------------------------------------------
Ir                 

-- line 22 ----------------------------------------
        .           
        .           /// An entity in the Rust type system, which can be one of
        .           /// several kinds (types, lifetimes, and consts).
        .           /// To reduce memory usage, a `GenericArg` is an interned pointer,
        .           /// with the lowest 2 bits being reserved for a tag to
        .           /// indicate the type (`Ty`, `Region`, or `Const`) it points to.
        .           #[derive(Copy, Clone, PartialEq, Eq, Hash)]
        .           pub struct GenericArg<'tcx> {
  332,102 ( 0.02%)      ptr: NonZeroUsize,
  815,010 ( 0.05%)      marker: PhantomData<(Ty<'tcx>, ty::Region<'tcx>, &'tcx ty::Const<'tcx>)>,
        .           }
        .           
        .           const TAG_MASK: usize = 0b11;
        .           const TYPE_TAG: usize = 0b00;
        .           const REGION_TAG: usize = 0b01;
        .           const CONST_TAG: usize = 0b10;
        .           
   61,988 ( 0.00%)  #[derive(Debug, TyEncodable, TyDecodable, PartialEq, Eq, PartialOrd, Ord, HashStable)]
        .           pub enum GenericArgKind<'tcx> {
        .               Lifetime(ty::Region<'tcx>),
        .               Type(Ty<'tcx>),
        .               Const(&'tcx ty::Const<'tcx>),
        .           }
        .           
        .           impl<'tcx> GenericArgKind<'tcx> {
   16,392 ( 0.00%)      fn pack(self) -> GenericArg<'tcx> {
   16,392 ( 0.00%)          let (tag, ptr) = match self {
        .                       GenericArgKind::Lifetime(lt) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(lt) & TAG_MASK, 0);
        .                           (REGION_TAG, lt as *const _ as usize)
        .                       }
        .                       GenericArgKind::Type(ty) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(ty) & TAG_MASK, 0);
-- line 56 ----------------------------------------
-- line 58 ----------------------------------------
        .                       }
        .                       GenericArgKind::Const(ct) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(ct) & TAG_MASK, 0);
        .                           (CONST_TAG, ct as *const _ as usize)
        .                       }
        .                   };
        .           
  150,047 ( 0.01%)          GenericArg { ptr: unsafe { NonZeroUsize::new_unchecked(ptr | tag) }, marker: PhantomData }
   16,392 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> fmt::Debug for GenericArg<'tcx> {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   match self.unpack() {
        .                       GenericArgKind::Lifetime(lt) => lt.fmt(f),
        .                       GenericArgKind::Type(ty) => ty.fmt(f),
        .                       GenericArgKind::Const(ct) => ct.fmt(f),
-- line 75 ----------------------------------------
-- line 85 ----------------------------------------
        .           
        .           impl<'tcx> PartialOrd for GenericArg<'tcx> {
        .               fn partial_cmp(&self, other: &GenericArg<'_>) -> Option<Ordering> {
        .                   Some(self.cmp(&other))
        .               }
        .           }
        .           
        .           impl<'tcx> From<ty::Region<'tcx>> for GenericArg<'tcx> {
  107,804 ( 0.01%)      fn from(r: ty::Region<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Lifetime(r).pack()
  107,804 ( 0.01%)      }
        .           }
        .           
        .           impl<'tcx> From<Ty<'tcx>> for GenericArg<'tcx> {
  410,666 ( 0.02%)      fn from(ty: Ty<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Type(ty).pack()
  410,666 ( 0.02%)      }
        .           }
        .           
        .           impl<'tcx> From<&'tcx ty::Const<'tcx>> for GenericArg<'tcx> {
        1 ( 0.00%)      fn from(c: &'tcx ty::Const<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Const(c).pack()
        1 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> GenericArg<'tcx> {
        .               #[inline]
        .               pub fn unpack(self) -> GenericArgKind<'tcx> {
        .                   let ptr = self.ptr.get();
        .                   unsafe {
5,689,868 ( 0.34%)              match ptr & TAG_MASK {
   64,317 ( 0.00%)                  REGION_TAG => GenericArgKind::Lifetime(&*((ptr & !TAG_MASK) as *const _)),
1,336,796 ( 0.08%)                  TYPE_TAG => GenericArgKind::Type(&*((ptr & !TAG_MASK) as *const _)),
      314 ( 0.00%)                  CONST_TAG => GenericArgKind::Const(&*((ptr & !TAG_MASK) as *const _)),
        .                           _ => intrinsics::unreachable(),
        .                       }
        .                   }
        .               }
        .           
        .               /// Unpack the `GenericArg` as a type when it is known certainly to be a type.
        .               /// This is true in cases where `Substs` is used in places where the kinds are known
        .               /// to be limited (e.g. in tuples, where the only parameters are type parameters).
        .               pub fn expect_ty(self) -> Ty<'tcx> {
        .                   match self.unpack() {
        .                       GenericArgKind::Type(ty) => ty,
        .                       _ => bug!("expected a type, but found another kind"),
        .                   }
   16,938 ( 0.00%)      }
        .           
        .               /// Unpack the `GenericArg` as a const when it is known certainly to be a const.
        .               pub fn expect_const(self) -> &'tcx ty::Const<'tcx> {
        .                   match self.unpack() {
        .                       GenericArgKind::Const(c) => c,
        .                       _ => bug!("expected a const, but found another kind"),
        .                   }
        .               }
-- line 140 ----------------------------------------
-- line 170 ----------------------------------------
        .                       GenericArgKind::Type(ty) => ty.visit_with(visitor),
        .                       GenericArgKind::Const(ct) => ct.visit_with(visitor),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for GenericArg<'tcx> {
        .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
    3,486 ( 0.00%)          self.unpack().encode(e)
        .               }
        .           }
        .           
        .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for GenericArg<'tcx> {
   81,960 ( 0.00%)      fn decode(d: &mut D) -> GenericArg<'tcx> {
   81,960 ( 0.00%)          GenericArgKind::decode(d).pack()
        .               }
        .           }
        .           
        .           /// A substitution mapping generic parameters to new values.
        .           pub type InternalSubsts<'tcx> = List<GenericArg<'tcx>>;
        .           
        .           pub type SubstsRef<'tcx> = &'tcx InternalSubsts<'tcx>;
        .           
        .           impl<'a, 'tcx> InternalSubsts<'tcx> {
        .               /// Interpret these substitutions as the substitutions of a closure type.
        .               /// Closure substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the signature and closure kind;
        .               /// see `ty::ClosureSubsts` struct for more comments.
    2,011 ( 0.00%)      pub fn as_closure(&'a self) -> ClosureSubsts<'a> {
        .                   ClosureSubsts { substs: self }
    2,011 ( 0.00%)      }
        .           
        .               /// Interpret these substitutions as the substitutions of a generator type.
        .               /// Generator substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the signature and generator kind;
        .               /// see `ty::GeneratorSubsts` struct for more comments.
        .               pub fn as_generator(&'tcx self) -> GeneratorSubsts<'tcx> {
        .                   GeneratorSubsts { substs: self }
        .               }
-- line 208 ----------------------------------------
-- line 211 ----------------------------------------
        .               /// Inline const substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the inferred type;
        .               /// see `ty::InlineConstSubsts` struct for more comments.
        .               pub fn as_inline_const(&'tcx self) -> InlineConstSubsts<'tcx> {
        .                   InlineConstSubsts { substs: self }
        .               }
        .           
        .               /// Creates an `InternalSubsts` that maps each generic parameter to itself.
    7,570 ( 0.00%)      pub fn identity_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {
    2,764 ( 0.00%)          Self::for_item(tcx, def_id, |param, _| tcx.mk_param_from_def(param))
    6,813 ( 0.00%)      }
        .           
        .               /// Creates an `InternalSubsts` for generic parameter definitions,
        .               /// by calling closures to obtain each kind.
        .               /// The closures get to observe the `InternalSubsts` as they're
        .               /// being built, which can be used to correctly
        .               /// substitute defaults of generic parameters.
  117,637 ( 0.01%)      pub fn for_item<F>(tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
        .               where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   let defs = tcx.generics_of(def_id);
        .                   let count = defs.count();
        .                   let mut substs = SmallVec::with_capacity(count);
   41,806 ( 0.00%)          Self::fill_item(&mut substs, tcx, defs, &mut mk_kind);
   26,234 ( 0.00%)          tcx.intern_substs(&substs)
  118,053 ( 0.01%)      }
        .           
        .               pub fn extend_to<F>(&self, tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
        .               where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   Self::for_item(tcx, def_id, |param, substs| {
        .                       self.get(param.index as usize).cloned().unwrap_or_else(|| mk_kind(param, substs))
        .                   })
        .               }
        .           
  150,580 ( 0.01%)      pub fn fill_item<F>(
        .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
        .                   tcx: TyCtxt<'tcx>,
        .                   defs: &ty::Generics,
        .                   mk_kind: &mut F,
        .               ) where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
   61,607 ( 0.00%)          if let Some(def_id) = defs.parent {
        .                       let parent_defs = tcx.generics_of(def_id);
    5,708 ( 0.00%)              Self::fill_item(substs, tcx, parent_defs, mk_kind);
        .                   }
        .                   Self::fill_single(substs, defs, mk_kind)
  120,128 ( 0.01%)      }
        .           
       32 ( 0.00%)      pub fn fill_single<F>(
        .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
        .                   defs: &ty::Generics,
        .                   mk_kind: &mut F,
        .               ) where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   substs.reserve(defs.params.len());
        .                   for param in &defs.params {
        .                       let kind = mk_kind(param, substs);
   86,481 ( 0.01%)              assert_eq!(param.index as usize, substs.len());
        .                       substs.push(kind);
        .                   }
       32 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn types(&'a self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> + 'a {
        .                   self.iter()
        .                       .filter_map(|k| if let GenericArgKind::Type(ty) = k.unpack() { Some(ty) } else { None })
        .               }
        .           
        .               #[inline]
-- line 284 ----------------------------------------
-- line 302 ----------------------------------------
        .                   self.iter().filter_map(|k| match k.unpack() {
        .                       GenericArgKind::Lifetime(_) => None,
        .                       generic => Some(generic),
        .                   })
        .               }
        .           
        .               #[inline]
        .               pub fn type_at(&self, i: usize) -> Ty<'tcx> {
  458,982 ( 0.03%)          if let GenericArgKind::Type(ty) = self[i].unpack() {
        .                       ty
        .                   } else {
        .                       bug!("expected type for param #{} in {:?}", i, self);
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn region_at(&self, i: usize) -> ty::Region<'tcx> {
-- line 318 ----------------------------------------
-- line 350 ----------------------------------------
        .               /// impl<U> X<U> for U { fn f<V>() {} }
        .               /// ```
        .               ///
        .               /// * If `self` is `[Self, S, T]`: the identity substs of `f` in the trait.
        .               /// * If `source_ancestor` is the def_id of the trait.
        .               /// * If `target_substs` is `[U]`, the substs for the impl.
        .               /// * Then we will return `[U, T]`, the subst for `f` in the impl that
        .               ///   are needed for it to match the trait.
    4,655 ( 0.00%)      pub fn rebase_onto(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .                   source_ancestor: DefId,
        .                   target_substs: SubstsRef<'tcx>,
        .               ) -> SubstsRef<'tcx> {
        .                   let defs = tcx.generics_of(source_ancestor);
    1,330 ( 0.00%)          tcx.mk_substs(target_substs.iter().chain(self.iter().skip(defs.params.len())))
    5,320 ( 0.00%)      }
        .           
        .               pub fn truncate_to(&self, tcx: TyCtxt<'tcx>, generics: &ty::Generics) -> SubstsRef<'tcx> {
        .                   tcx.mk_substs(self.iter().take(generics.count()))
        .               }
        .           }
        .           
        .           impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {
   19,964 ( 0.00%)      fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error> {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // The match arms are in order of frequency. The 1, 2, and 0 cases are
        .                   // typically hit in 90--99.99% of cases. When folding doesn't change
        .                   // the substs, it's faster to reuse the existing substs rather than
        .                   // calling `intern_substs`.
1,415,762 ( 0.08%)          match self.len() {
        .                       1 => {
  282,035 ( 0.02%)                  let param0 = self[0].try_fold_with(folder)?;
  935,392 ( 0.06%)                  if param0 == self[0] { Ok(self) } else { Ok(folder.tcx().intern_substs(&[param0])) }
        .                       }
        .                       2 => {
  117,042 ( 0.01%)                  let param0 = self[0].try_fold_with(folder)?;
  249,780 ( 0.01%)                  let param1 = self[1].try_fold_with(folder)?;
  254,555 ( 0.02%)                  if param0 == self[0] && param1 == self[1] {
        .                               Ok(self)
        .                           } else {
  182,062 ( 0.01%)                      Ok(folder.tcx().intern_substs(&[param0, param1]))
        .                           }
        .                       }
        .                       0 => Ok(self),
        .                       _ => {
        .                           let params: SmallVec<[_; 8]> =
   67,450 ( 0.00%)                      self.iter().map(|k| k.try_fold_with(folder)).collect::<Result<_, _>>()?;
    3,999 ( 0.00%)                  if params[..] == self[..] {
        .                               Ok(self)
        .                           } else {
    7,397 ( 0.00%)                      Ok(folder.tcx().intern_substs(&params))
        .                           }
        .                       }
        .                   }
   43,738 ( 0.00%)      }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
  399,055 ( 0.02%)          self.iter().try_for_each(|t| t.visit_with(visitor))
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Public trait `Subst`
        .           //
        .           // Just call `foo.subst(tcx, substs)` to perform a substitution across
        .           // `foo`. Or use `foo.subst_spanned(tcx, substs, Some(span))` when
-- line 420 ----------------------------------------
-- line 435 ----------------------------------------
        .           
        .           impl<'tcx, T: TypeFoldable<'tcx>> Subst<'tcx> for T {
        .               fn subst_spanned(
        .                   self,
        .                   tcx: TyCtxt<'tcx>,
        .                   substs: &[GenericArg<'tcx>],
        .                   span: Option<Span>,
        .               ) -> T {
  556,668 ( 0.03%)          let mut folder = SubstFolder { tcx, substs, span, binders_passed: 0 };
        .                   self.fold_with(&mut folder)
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // The actual substitution engine itself is a type folder.
        .           
        .           struct SubstFolder<'a, 'tcx> {
-- line 451 ----------------------------------------
-- line 456 ----------------------------------------
        .               span: Option<Span>,
        .           
        .               /// Number of region binders we have passed through while doing the substitution
        .               binders_passed: u32,
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
   75,072 ( 0.00%)          self.tcx
        .               }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: ty::Binder<'tcx, T>,
        .               ) -> ty::Binder<'tcx, T> {
  145,294 ( 0.01%)          self.binders_passed += 1;
   39,175 ( 0.00%)          let t = t.super_fold_with(self);
  145,294 ( 0.01%)          self.binders_passed -= 1;
        .                   t
        .               }
        .           
   87,756 ( 0.01%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
        .                   // Note: This routine only handles regions that are bound on
        .                   // type declarations and other outer declarations, not those
        .                   // bound in *fn types*. Region substitution of the bound
        .                   // regions that appear in a function signature is done using
        .                   // the specialized routine `ty::replace_late_regions()`.
   29,252 ( 0.00%)          match *r {
   24,042 ( 0.00%)              ty::ReEarlyBound(data) => {
   24,042 ( 0.00%)                  let rk = self.substs.get(data.index as usize).map(|k| k.unpack());
        .                           match rk {
   12,021 ( 0.00%)                      Some(GenericArgKind::Lifetime(lt)) => self.shift_region_through_binders(lt),
        .                               _ => {
        .                                   let span = self.span.unwrap_or(DUMMY_SP);
        .                                   let msg = format!(
        .                                       "Region parameter out of range \
        .                                        when substituting in region {} (index={})",
        .                                       data.name, data.index
        .                                   );
        .                                   span_bug!(span, "{}", msg);
        .                               }
        .                           }
        .                       }
        .                       _ => r,
        .                   }
  102,382 ( 0.01%)      }
        .           
  395,391 ( 0.02%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
  131,797 ( 0.01%)          if !t.needs_subst() {
        .                       return t;
        .                   }
        .           
  207,762 ( 0.01%)          match *t.kind() {
  360,305 ( 0.02%)              ty::Param(p) => self.ty_for_param(p, t),
  190,920 ( 0.01%)              _ => t.super_fold_with(self),
        .                   }
  499,885 ( 0.03%)      }
        .           
      175 ( 0.00%)      fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
       55 ( 0.00%)          if let ty::ConstKind::Param(p) = c.val {
        .                       self.const_for_param(p, c)
        .                   } else {
      216 ( 0.00%)              c.super_fold_with(self)
        .                   }
        8 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {
        .                   c.super_fold_with(self)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> SubstFolder<'a, 'tcx> {
        .               fn ty_for_param(&self, p: ty::ParamTy, source_ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   // Look up the type in the substitutions. It really should be in there.
  144,122 ( 0.01%)          let opt_ty = self.substs.get(p.index as usize).map(|k| k.unpack());
        .                   let ty = match opt_ty {
        .                       Some(GenericArgKind::Type(ty)) => ty,
        .                       Some(kind) => {
        .                           let span = self.span.unwrap_or(DUMMY_SP);
        .                           span_bug!(
        .                               span,
        .                               "expected type for `{:?}` ({:?}/{}) but found {:?} \
        .                                when substituting, substs={:?}",
-- line 539 ----------------------------------------
-- line 562 ----------------------------------------
        .               }
        .           
        .               fn const_for_param(
        .                   &self,
        .                   p: ParamConst,
        .                   source_ct: &'tcx ty::Const<'tcx>,
        .               ) -> &'tcx ty::Const<'tcx> {
        .                   // Look up the const in the substitutions. It really should be in there.
        2 ( 0.00%)          let opt_ct = self.substs.get(p.index as usize).map(|k| k.unpack());
        .                   let ct = match opt_ct {
        .                       Some(GenericArgKind::Const(ct)) => ct,
        .                       Some(kind) => {
        .                           let span = self.span.unwrap_or(DUMMY_SP);
        .                           span_bug!(
        .                               span,
        .                               "expected const for `{:?}` ({:?}/{}) but found {:?} \
        .                                when substituting substs={:?}",
-- line 578 ----------------------------------------
-- line 645 ----------------------------------------
        .               fn shift_vars_through_binders<T: TypeFoldable<'tcx>>(&self, val: T) -> T {
        .                   debug!(
        .                       "shift_vars(val={:?}, binders_passed={:?}, has_escaping_bound_vars={:?})",
        .                       val,
        .                       self.binders_passed,
        .                       val.has_escaping_bound_vars()
        .                   );
        .           
  255,696 ( 0.02%)          if self.binders_passed == 0 || !val.has_escaping_bound_vars() {
        .                       return val;
        .                   }
        .           
        .                   let result = ty::fold::shift_vars(self.tcx(), val, self.binders_passed);
        .                   debug!("shift_vars: shifted result = {:?}", result);
        .           
        .                   result
        .               }
        .           
        .               fn shift_region_through_binders(&self, region: ty::Region<'tcx>) -> ty::Region<'tcx> {
   30,042 ( 0.00%)          if self.binders_passed == 0 || !region.has_escaping_bound_vars() {
        .                       return region;
        .                   }
        .                   ty::fold::shift_region(self.tcx, region, self.binders_passed)
        .               }
        .           }
        .           
        .           /// Stores the user-given substs to reach some fully qualified path
        .           /// (e.g., `<T>::Item` or `<T as Trait>::Item`).
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
    4,378 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct UserSubsts<'tcx> {
        .               /// The substitutions for the item as given by the user.
        .               pub substs: SubstsRef<'tcx>,
        .           
        .               /// The self type, in the case of a `<T>::Item` path (when applied
        .               /// to an inherent impl). See `UserSelfTy` below.
    1,777 ( 0.00%)      pub user_self_ty: Option<UserSelfTy<'tcx>>,
        .           }
        .           
        .           /// Specifies the user-given self type. In the case of a path that
        .           /// refers to a member in an inherent impl, this self type is
        .           /// sometimes needed to constrain the type parameters on the impl. For
        .           /// example, in this code:
        .           ///
        .           /// ```
-- line 689 ----------------------------------------
-- line 696 ----------------------------------------
        .           /// self type `Foo<u32>`. Then we can instantiate the parameters of
        .           /// the impl (with the substs from `UserSubsts`) and apply those to
        .           /// the self type, giving `Foo<?A>`. Finally, we unify that with
        .           /// the self type here, which contains `?A` to be `&'static u32`
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
        .           #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct UserSelfTy<'tcx> {
        .               pub impl_def_id: DefId,
      645 ( 0.00%)      pub self_ty: Ty<'tcx>,
        .           }

2,265,717 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 121 ----------------------------------------
      .           #[derive(Debug)]
      .           pub enum ProcessResult<O, E> {
      .               Unchanged,
      .               Changed(Vec<O>),
      .               Error(E),
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
 19,509 ( 0.00%)  struct ObligationTreeId(usize);
      .           
      .           type ObligationTreeIdGenerator =
      .               std::iter::Map<std::ops::RangeFrom<usize>, fn(usize) -> ObligationTreeId>;
      .           
      .           pub struct ObligationForest<O: ForestObligation> {
      .               /// The list of obligations. In between calls to `process_obligations`,
      .               /// this list only contains nodes in the `Pending` or `Waiting` state.
      .               ///
-- line 137 ----------------------------------------
-- line 181 ----------------------------------------
      .               has_parent: bool,
      .           
      .               /// Identifier of the obligation tree to which this node belongs.
      .               obligation_tree_id: ObligationTreeId,
      .           }
      .           
      .           impl<O> Node<O> {
      .               fn new(parent: Option<usize>, obligation: O, obligation_tree_id: ObligationTreeId) -> Node<O> {
248,928 ( 0.01%)          Node {
      .                       obligation,
      .                       state: Cell::new(NodeState::Pending),
 32,979 ( 0.00%)              dependents: if let Some(parent_index) = parent { vec![parent_index] } else { vec![] },
      .                       has_parent: parent.is_some(),
      .                       obligation_tree_id,
      .                   }
      .               }
      .           }
      .           
      .           /// The state of one node in some tree within the forest. This represents the
      .           /// current state of processing for the obligation (of type `O`) associated
-- line 200 ----------------------------------------
-- line 223 ----------------------------------------
      .           ///  |     compress()
      .           ///  v
      .           /// (Removed)
      .           /// ```
      .           /// The `Error` state can be introduced in several places, via `error_at()`.
      .           ///
      .           /// Outside of `ObligationForest` methods, nodes should be either `Pending` or
      .           /// `Waiting`.
244,026 ( 0.01%)  #[derive(Debug, Copy, Clone, PartialEq, Eq)]
      .           enum NodeState {
      .               /// This obligation has not yet been selected successfully. Cannot have
      .               /// subobligations.
      .               Pending,
      .           
      .               /// This obligation was selected successfully, but may or may not have
      .               /// subobligations.
      .               Success,
-- line 239 ----------------------------------------
-- line 279 ----------------------------------------
      .               pub stalled: bool,
      .           }
      .           
      .           impl<O, E> OutcomeTrait for Outcome<O, E> {
      .               type Error = Error<O, E>;
      .               type Obligation = O;
      .           
      .               fn new() -> Self {
 38,932 ( 0.00%)          Self { stalled: true, errors: vec![] }
      .               }
      .           
      .               fn mark_not_stalled(&mut self) {
 15,415 ( 0.00%)          self.stalled = false;
      .               }
      .           
      .               fn is_stalled(&self) -> bool {
  7,534 ( 0.00%)          self.stalled
      .               }
      .           
      .               fn record_completed(&mut self, _outcome: &Self::Obligation) {
      .                   // do nothing
      .               }
      .           
      .               fn record_error(&mut self, error: Self::Error) {
    112 ( 0.00%)          self.errors.push(error)
      .               }
      .           }
      .           
      .           #[derive(Debug, PartialEq, Eq)]
      .           pub struct Error<O, E> {
      .               pub error: E,
      .               pub backtrace: Vec<O>,
      .           }
      .           
      .           impl<O: ForestObligation> ObligationForest<O> {
  5,976 ( 0.00%)      pub fn new() -> ObligationForest<O> {
 71,712 ( 0.00%)          ObligationForest {
      .                       nodes: vec![],
      .                       done_cache: Default::default(),
      .                       active_cache: Default::default(),
      .                       reused_node_vec: vec![],
      .                       obligation_tree_id_generator: (0..).map(ObligationTreeId),
      .                       error_cache: Default::default(),
      .                   }
  5,976 ( 0.00%)      }
      .           
      .               /// Returns the total number of nodes in the forest that have not
      .               /// yet been fully resolved.
      .               pub fn len(&self) -> usize {
      .                   self.nodes.len()
      .               }
      .           
      .               /// Registers an obligation.
      .               pub fn register_obligation(&mut self, obligation: O) {
      .                   // Ignore errors here - there is no guarantee of success.
155,181 ( 0.01%)          let _ = self.register_obligation_at(obligation, None);
      .               }
      .           
      .               // Returns Err(()) if we already know this obligation failed.
246,873 ( 0.01%)      fn register_obligation_at(&mut self, obligation: O, parent: Option<usize>) -> Result<(), ()> {
 44,886 ( 0.00%)          let cache_key = obligation.as_cache_key();
 44,886 ( 0.00%)          if self.done_cache.contains(&cache_key) {
      .                       debug!("register_obligation_at: ignoring already done obligation: {:?}", obligation);
      .                       return Ok(());
      .                   }
      .           
114,132 ( 0.01%)          match self.active_cache.entry(cache_key) {
      .                       Entry::Occupied(o) => {
  6,928 ( 0.00%)                  let node = &mut self.nodes[*o.get()];
  6,928 ( 0.00%)                  if let Some(parent_index) = parent {
      .                               // If the node is already in `active_cache`, it has already
      .                               // had its chance to be marked with a parent. So if it's
      .                               // not already present, just dump `parent` into the
      .                               // dependents as a non-parent.
  7,848 ( 0.00%)                      if !node.dependents.contains(&parent_index) {
      .                                   node.dependents.push(parent_index);
      .                               }
      .                           }
 10,392 ( 0.00%)                  if let NodeState::Error = node.state.get() { Err(()) } else { Ok(()) }
      .                       }
 46,674 ( 0.00%)              Entry::Vacant(v) => {
 93,348 ( 0.01%)                  let obligation_tree_id = match parent {
 11,614 ( 0.00%)                      Some(parent_index) => self.nodes[parent_index].obligation_tree_id,
      .                               None => self.obligation_tree_id_generator.next().unwrap(),
      .                           };
      .           
      .                           let already_failed = parent.is_some()
      .                               && self
      .                                   .error_cache
      .                                   .get(&obligation_tree_id)
      .                                   .map_or(false, |errors| errors.contains(v.key()));
      .           
      .                           if already_failed {
      .                               Err(())
      .                           } else {
 15,558 ( 0.00%)                      let new_index = self.nodes.len();
      .                               v.insert(new_index);
      .                               self.nodes.push(Node::new(parent, obligation, obligation_tree_id));
      .                               Ok(())
      .                           }
      .                       }
      .                   }
201,987 ( 0.01%)      }
      .           
      .               /// Converts all remaining obligations to the given error.
 55,482 ( 0.00%)      pub fn to_errors<E: Clone>(&mut self, error: E) -> Vec<Error<O, E>> {
      .                   let errors = self
      .                       .nodes
      .                       .iter()
      .                       .enumerate()
      .                       .filter(|(_index, node)| node.state.get() == NodeState::Pending)
      .                       .map(|(index, _node)| Error { error: error.clone(), backtrace: self.error_at(index) })
      .                       .collect();
      .           
 15,852 ( 0.00%)          self.compress(|_| assert!(false));
      .                   errors
 47,556 ( 0.00%)      }
      .           
      .               /// Returns the set of obligations that are in a pending state.
      .               pub fn map_pending_obligations<P, F>(&self, f: F) -> Vec<P>
      .               where
      .                   F: Fn(&O) -> P,
      .               {
     65 ( 0.00%)          self.nodes
      .                       .iter()
      .                       .filter(|node| node.state.get() == NodeState::Pending)
      .                       .map(|node| f(&node.obligation))
      .                       .collect()
      .               }
      .           
     98 ( 0.00%)      fn insert_into_error_cache(&mut self, index: usize) {
      .                   let node = &self.nodes[index];
     14 ( 0.00%)          self.error_cache
     42 ( 0.00%)              .entry(node.obligation_tree_id)
      .                       .or_default()
      .                       .insert(node.obligation.as_cache_key());
    112 ( 0.00%)      }
      .           
      .               /// Performs a pass through the obligation list. This must
      .               /// be called in a loop until `outcome.stalled` is false.
      .               ///
      .               /// This _cannot_ be unrolled (presently, at least).
      .               #[inline(never)]
175,194 ( 0.01%)      pub fn process_obligations<P, OUT>(&mut self, processor: &mut P) -> OUT
      .               where
      .                   P: ObligationProcessor<Obligation = O>,
      .                   OUT: OutcomeTrait<Obligation = O, Error = Error<O, P::Error>>,
      .               {
      .                   let mut outcome = OUT::new();
      .           
      .                   // Note that the loop body can append new nodes, and those new nodes
      .                   // will then be processed by subsequent iterations of the loop.
      .                   //
      .                   // We can't use an iterator for the loop because `self.nodes` is
      .                   // appended to and the borrow checker would complain. We also can't use
      .                   // `for index in 0..self.nodes.len() { ... }` because the range would
      .                   // be computed with the initial length, and we would miss the appended
      .                   // nodes. Therefore we use a `while` loop.
      .                   let mut index = 0;
111,841 ( 0.01%)          while let Some(node) = self.nodes.get_mut(index) {
      .                       // `processor.process_obligation` can modify the predicate within
      .                       // `node.obligation`, and that predicate is the key used for
      .                       // `self.active_cache`. This means that `self.active_cache` can get
      .                       // out of sync with `nodes`. It's not very common, but it does
      .                       // happen, and code in `compress` has to allow for it.
184,750 ( 0.01%)              if node.state.get() != NodeState::Pending {
  9,587 ( 0.00%)                  index += 1;
      .                           continue;
      .                       }
      .           
 86,048 ( 0.01%)              match processor.process_obligation(&mut node.obligation) {
      .                           ProcessResult::Unchanged => {
      .                               // No change in state.
      .                           }
 61,632 ( 0.00%)                  ProcessResult::Changed(children) => {
      .                               // We are not (yet) stalled.
      .                               outcome.mark_not_stalled();
      .                               node.state.set(NodeState::Success);
      .           
 82,644 ( 0.00%)                      for child in children {
178,602 ( 0.01%)                          let st = self.register_obligation_at(child, Some(index));
 21,012 ( 0.00%)                          if let Err(()) = st {
      .                                       // Error already reported - propagate it
      .                                       // to our node.
      .                                       self.error_at(index);
      .                                   }
      .                               }
      .                           }
      .                           ProcessResult::Error(err) => {
      .                               outcome.mark_not_stalled();
    231 ( 0.00%)                      outcome.record_error(Error { error: err, backtrace: self.error_at(index) });
      .                           }
      .                       }
165,576 ( 0.01%)              index += 1;
      .                   }
      .           
      .                   // There's no need to perform marking, cycle processing and compression when nothing
      .                   // changed.
  7,534 ( 0.00%)          if !outcome.is_stalled() {
      .                       self.mark_successes();
      .                       self.process_cycles(processor);
  7,962 ( 0.00%)              self.compress(|obl| outcome.record_completed(obl));
      .                   }
      .           
      .                   outcome
175,194 ( 0.01%)      }
      .           
      .               /// Returns a vector of obligations for `p` and all of its
      .               /// ancestors, putting them into the error state in the process.
     49 ( 0.00%)      fn error_at(&self, mut index: usize) -> Vec<O> {
      .                   let mut error_stack: Vec<usize> = vec![];
      .                   let mut trace = vec![];
      .           
      .                   loop {
      .                       let node = &self.nodes[index];
     14 ( 0.00%)              node.state.set(NodeState::Error);
      .                       trace.push(node.obligation.clone());
     28 ( 0.00%)              if node.has_parent {
      .                           // The first dependent is the parent, which is treated
      .                           // specially.
      .                           error_stack.extend(node.dependents.iter().skip(1));
      7 ( 0.00%)                  index = node.dependents[0];
      .                       } else {
      .                           // No parent; treat all dependents non-specially.
      .                           error_stack.extend(node.dependents.iter());
      .                           break;
      .                       }
      .                   }
      .           
      .                   while let Some(index) = error_stack.pop() {
-- line 508 ----------------------------------------
-- line 509 ----------------------------------------
      .                       let node = &self.nodes[index];
      .                       if node.state.get() != NodeState::Error {
      .                           node.state.set(NodeState::Error);
      .                           error_stack.extend(node.dependents.iter());
      .                       }
      .                   }
      .           
      .                   trace
     56 ( 0.00%)      }
      .           
      .               /// Mark all `Waiting` nodes as `Success`, except those that depend on a
      .               /// pending node.
      .               fn mark_successes(&self) {
      .                   // Convert all `Waiting` nodes to `Success`.
      .                   for node in &self.nodes {
 90,699 ( 0.01%)              if node.state.get() == NodeState::Waiting {
      .                           node.state.set(NodeState::Success);
      .                       }
      .                   }
      .           
      .                   // Convert `Success` nodes that depend on a pending node back to
      .                   // `Waiting`.
      .                   for node in &self.nodes {
 40,841 ( 0.00%)              if node.state.get() == NodeState::Pending {
      .                           // This call site is hot.
      .                           self.inlined_mark_dependents_as_waiting(node);
      .                       }
      .                   }
      .               }
      .           
      .               // This always-inlined function is for the hot call site.
      .               #[inline(always)]
      .               fn inlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
  4,332 ( 0.00%)          for &index in node.dependents.iter() {
      .                       let node = &self.nodes[index];
  4,332 ( 0.00%)              let state = node.state.get();
  4,332 ( 0.00%)              if state == NodeState::Success {
      .                           // This call site is cold.
  9,531 ( 0.00%)                  self.uninlined_mark_dependents_as_waiting(node);
      .                       } else {
      .                           debug_assert!(state == NodeState::Waiting || state == NodeState::Error)
      .                       }
      .                   }
      .               }
      .           
      .               // This never-inlined function is for the cold call site.
      .               #[inline(never)]
 22,239 ( 0.00%)      fn uninlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
      .                   // Mark node Waiting in the cold uninlined code instead of the hot inlined
      .                   node.state.set(NodeState::Waiting);
      .                   self.inlined_mark_dependents_as_waiting(node)
 25,416 ( 0.00%)      }
      .           
      .               /// Report cycles between all `Success` nodes, and convert all `Success`
      .               /// nodes to `Done`. This must be called after `mark_successes`.
      .               fn process_cycles<P>(&mut self, processor: &mut P)
      .               where
      .                   P: ObligationProcessor<Obligation = O>,
      .               {
  3,981 ( 0.00%)          let mut stack = std::mem::take(&mut self.reused_node_vec);
      .                   for (index, node) in self.nodes.iter().enumerate() {
      .                       // For some benchmarks this state test is extremely hot. It's a win
      .                       // to handle the no-op cases immediately to avoid the cost of the
      .                       // function call.
 40,841 ( 0.00%)              if node.state.get() == NodeState::Success {
 72,480 ( 0.00%)                  self.find_cycles_from_node(&mut stack, processor, index);
      .                       }
      .                   }
      .           
      .                   debug_assert!(stack.is_empty());
 31,848 ( 0.00%)          self.reused_node_vec = stack;
      .               }
      .           
204,111 ( 0.01%)      fn find_cycles_from_node<P>(&self, stack: &mut Vec<usize>, processor: &mut P, index: usize)
      .               where
      .                   P: ObligationProcessor<Obligation = O>,
      .               {
      .                   let node = &self.nodes[index];
 45,358 ( 0.00%)          if node.state.get() == NodeState::Success {
  3,510 ( 0.00%)              match stack.iter().rposition(|&n| n == index) {
      .                           None => {
      .                               stack.push(index);
  8,183 ( 0.00%)                      for &dep_index in node.dependents.iter() {
 32,732 ( 0.00%)                          self.find_cycles_from_node(stack, processor, dep_index);
      .                               }
      .                               stack.pop();
      .                               node.state.set(NodeState::Done);
      .                           }
      .                           Some(rpos) => {
      .                               // Cycle detected.
  1,239 ( 0.00%)                      processor.process_backedge(
      .                                   stack[rpos..].iter().map(|&i| &self.nodes[i].obligation),
      .                                   PhantomData,
      .                               );
      .                           }
      .                       }
      .                   }
181,432 ( 0.01%)      }
      .           
      .               /// Compresses the vector, removing all popped nodes. This adjusts the
      .               /// indices and hence invalidates any outstanding indices. `process_cycles`
      .               /// must be run beforehand to remove any cycles on `Success` nodes.
      .               #[inline(never)]
 87,330 ( 0.01%)      fn compress(&mut self, mut outcome_cb: impl FnMut(&O)) {
 11,907 ( 0.00%)          let orig_nodes_len = self.nodes.len();
      .                   let mut node_rewrites: Vec<_> = std::mem::take(&mut self.reused_node_vec);
      .                   debug_assert!(node_rewrites.is_empty());
      .                   node_rewrites.extend(0..orig_nodes_len);
      .                   let mut dead_nodes = 0;
      .           
      .                   // Move removable nodes to the end, preserving the order of the
      .                   // remaining nodes.
      .                   //
      .                   // LOOP INVARIANT:
      .                   //     self.nodes[0..index - dead_nodes] are the first remaining nodes
      .                   //     self.nodes[index - dead_nodes..index] are all dead
      .                   //     self.nodes[index..] are unchanged
      .                   for index in 0..orig_nodes_len {
      .                       let node = &self.nodes[index];
220,129 ( 0.01%)              match node.state.get() {
      .                           NodeState::Pending | NodeState::Waiting => {
 50,852 ( 0.00%)                      if dead_nodes > 0 {
 17,067 ( 0.00%)                          self.nodes.swap(index, index - dead_nodes);
 28,445 ( 0.00%)                          node_rewrites[index] -= dead_nodes;
      .                               }
      .                           }
      .                           NodeState::Done => {
      .                               // This lookup can fail because the contents of
      .                               // `self.active_cache` are not guaranteed to match those of
      .                               // `self.nodes`. See the comment in `process_obligation`
      .                               // for more details.
 58,028 ( 0.00%)                      if let Some((predicate, _)) =
 46,203 ( 0.00%)                          self.active_cache.remove_entry(&node.obligation.as_cache_key())
      .                               {
      .                                   self.done_cache.insert(predicate);
      .                               } else {
      .                                   self.done_cache.insert(node.obligation.as_cache_key().clone());
      .                               }
      .                               // Extract the success stories.
      .                               outcome_cb(&node.obligation);
 30,802 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
 30,802 ( 0.00%)                      dead_nodes += 1;
      .                           }
      .                           NodeState::Error => {
      .                               // We *intentionally* remove the node from the cache at this point. Otherwise
      .                               // tests must come up with a different type on every type error they
      .                               // check against.
     42 ( 0.00%)                      self.active_cache.remove(&node.obligation.as_cache_key());
     28 ( 0.00%)                      self.insert_into_error_cache(index);
     28 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
     28 ( 0.00%)                      dead_nodes += 1;
      .                           }
      .                           NodeState::Success => unreachable!(),
      .                       }
      .                   }
      .           
      .                   if dead_nodes > 0 {
      .                       // Remove the dead nodes and rewrite indices.
  7,678 ( 0.00%)              self.nodes.truncate(orig_nodes_len - dead_nodes);
  3,839 ( 0.00%)              self.apply_rewrites(&node_rewrites);
      .                   }
      .           
      .                   node_rewrites.truncate(0);
 47,628 ( 0.00%)          self.reused_node_vec = node_rewrites;
 95,256 ( 0.01%)      }
      .           
      .               #[inline(never)]
 34,551 ( 0.00%)      fn apply_rewrites(&mut self, node_rewrites: &[usize]) {
      .                   let orig_nodes_len = node_rewrites.len();
      .           
      .                   for node in &mut self.nodes {
      .                       let mut i = 0;
 27,707 ( 0.00%)              while let Some(dependent) = node.dependents.get_mut(i) {
 15,580 ( 0.00%)                  let new_index = node_rewrites[*dependent];
  7,790 ( 0.00%)                  if new_index >= orig_nodes_len {
      .                               node.dependents.swap_remove(i);
      .                               if i == 0 && node.has_parent {
      .                                   // We just removed the parent.
      .                                   node.has_parent = false;
      .                               }
      .                           } else {
  3,895 ( 0.00%)                      *dependent = new_index;
  7,790 ( 0.00%)                      i += 1;
      .                           }
      .                       }
      .                   }
      .           
      .                   // This updating of `self.active_cache` is necessary because the
      .                   // removal of nodes within `compress` can fail. See above.
      .                   self.active_cache.retain(|_predicate, index| {
109,552 ( 0.01%)              let new_index = node_rewrites[*index];
 54,776 ( 0.00%)              if new_index >= orig_nodes_len {
      .                           false
      .                       } else {
 23,812 ( 0.00%)                  *index = new_index;
      .                           true
      .                       }
      .                   });
 30,712 ( 0.00%)      }
      .           }

469,769 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs
--------------------------------------------------------------------------------
Ir               

-- line 10 ----------------------------------------
      .           pub fn move_path_children_matching<'tcx, F>(
      .               move_data: &MoveData<'tcx>,
      .               path: MovePathIndex,
      .               mut cond: F,
      .           ) -> Option<MovePathIndex>
      .           where
      .               F: FnMut(mir::PlaceElem<'tcx>) -> bool,
      .           {
    463 ( 0.00%)      let mut next_child = move_data.move_paths[path].first_child;
  1,212 ( 0.00%)      while let Some(child_index) = next_child {
      .                   let move_path_children = &move_data.move_paths[child_index];
  1,038 ( 0.00%)          if let Some(&elem) = move_path_children.place.projection.last() {
  1,752 ( 0.00%)              if cond(elem) {
      .                           return Some(child_index);
      .                       }
      .                   }
      .                   next_child = move_path_children.next_sibling;
      .               }
      .           
      .               None
      .           }
-- line 30 ----------------------------------------
-- line 48 ----------------------------------------
      .           //
      .           // FIXME: we have to do something for moving slice patterns.
      .           fn place_contents_drop_state_cannot_differ<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               place: mir::Place<'tcx>,
      .           ) -> bool {
      .               let ty = place.ty(body, tcx).ty;
415,460 ( 0.02%)      match ty.kind() {
      .                   ty::Array(..) => {
      .                       debug!(
      .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} => false",
      .                           place, ty
      .                       );
      .                       false
      .                   }
      .                   ty::Slice(..) | ty::Ref(..) | ty::RawPtr(..) => {
      .                       debug!(
      .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} refd => true",
      .                           place, ty
      .                       );
      .                       true
      .                   }
416,223 ( 0.02%)          ty::Adt(def, _) if (def.has_dtor(tcx) && !def.is_box()) || def.is_union() => {
      .                       debug!(
      .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} Drop => true",
      .                           place, ty
      .                       );
      .                       true
      .                   }
      .                   _ => false,
      .               }
-- line 79 ----------------------------------------
-- line 83 ----------------------------------------
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               move_data: &MoveData<'tcx>,
      .               lookup_result: LookupResult,
      .               each_child: F,
      .           ) where
      .               F: FnMut(MovePathIndex),
      .           {
  7,266 ( 0.00%)      match lookup_result {
      .                   LookupResult::Parent(..) => {
      .                       // access to untracked value - do not touch children
      .                   }
      .                   LookupResult::Exact(e) => on_all_children_bits(tcx, body, move_data, e, each_child),
      .               }
      .           }
      .           
      .           pub fn on_all_children_bits<'tcx, F>(
-- line 99 ----------------------------------------
-- line 100 ----------------------------------------
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               move_data: &MoveData<'tcx>,
      .               move_path_index: MovePathIndex,
      .               mut each_child: F,
      .           ) where
      .               F: FnMut(MovePathIndex),
      .           {
599,168 ( 0.04%)      fn is_terminal_path<'tcx>(
      .                   tcx: TyCtxt<'tcx>,
      .                   body: &Body<'tcx>,
      .                   move_data: &MoveData<'tcx>,
      .                   path: MovePathIndex,
      .               ) -> bool {
149,792 ( 0.01%)          place_contents_drop_state_cannot_differ(tcx, body, move_data.move_paths[path].place)
599,168 ( 0.04%)      }
      .           
753,720 ( 0.04%)      fn on_all_children_bits<'tcx, F>(
      .                   tcx: TyCtxt<'tcx>,
      .                   body: &Body<'tcx>,
      .                   move_data: &MoveData<'tcx>,
      .                   move_path_index: MovePathIndex,
      .                   each_child: &mut F,
      .               ) where
      .                   F: FnMut(MovePathIndex),
      .               {
 12,143 ( 0.00%)          each_child(move_path_index);
      .           
525,398 ( 0.03%)          if is_terminal_path(tcx, body, move_data, move_path_index) {
      .                       return;
      .                   }
      .           
 56,836 ( 0.00%)          let mut next_child_index = move_data.move_paths[move_path_index].first_child;
170,840 ( 0.01%)          while let Some(child_index) = next_child_index {
 85,152 ( 0.01%)              on_all_children_bits(tcx, body, move_data, child_index, each_child);
 14,192 ( 0.00%)              next_child_index = move_data.move_paths[child_index].next_sibling;
      .                   }
590,928 ( 0.04%)      }
371,094 ( 0.02%)      on_all_children_bits(tcx, body, move_data, move_path_index, &mut each_child);
      .           }
      .           
      .           pub fn on_all_drop_children_bits<'tcx, F>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               ctxt: &MoveDataParamEnv<'tcx>,
      .               path: MovePathIndex,
      .               mut each_child: F,
      .           ) where
      .               F: FnMut(MovePathIndex),
      .           {
 18,338 ( 0.00%)      on_all_children_bits(tcx, body, &ctxt.move_data, path, |child| {
 13,288 ( 0.00%)          let place = &ctxt.move_data.move_paths[path].place;
  3,322 ( 0.00%)          let ty = place.ty(body, tcx).ty;
      .                   debug!("on_all_drop_children_bits({:?}, {:?} : {:?})", path, place, ty);
      .           
  1,844 ( 0.00%)          let erased_ty = tcx.erase_regions(ty);
 20,685 ( 0.00%)          if erased_ty.needs_drop(tcx, ctxt.param_env) {
  3,313 ( 0.00%)              each_child(child);
      .                   } else {
      .                       debug!("on_all_drop_children_bits - skipping")
      .                   }
      .               })
      .           }
      .           
  6,770 ( 0.00%)  pub fn drop_flag_effects_for_function_entry<'tcx, F>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               ctxt: &MoveDataParamEnv<'tcx>,
      .               mut callback: F,
      .           ) where
      .               F: FnMut(MovePathIndex, DropFlagState),
      .           {
      .               let move_data = &ctxt.move_data;
    612 ( 0.00%)      for arg in body.args_iter() {
  1,456 ( 0.00%)          let place = mir::Place::from(arg);
  2,184 ( 0.00%)          let lookup_result = move_data.rev_lookup.find(place.as_ref());
      .                   on_lookup_result_bits(tcx, body, move_data, lookup_result, |mpi| {
    750 ( 0.00%)              callback(mpi, DropFlagState::Present)
      .                   });
      .               }
  4,896 ( 0.00%)  }
      .           
749,670 ( 0.04%)  pub fn drop_flag_effects_for_location<'tcx, F>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               ctxt: &MoveDataParamEnv<'tcx>,
      .               loc: Location,
      .               mut callback: F,
      .           ) where
      .               F: FnMut(MovePathIndex, DropFlagState),
      .           {
      .               let move_data = &ctxt.move_data;
      .               debug!("drop_flag_effects_for_location({:?})", loc);
      .           
      .               // first, move out of the RHS
 45,125 ( 0.00%)      for mi in &move_data.loc_map[loc] {
168,272 ( 0.01%)          let path = mi.move_path_index(move_data);
      .                   debug!("moving out of path {:?}", move_data.move_paths[path]);
      .           
 53,575 ( 0.00%)          on_all_children_bits(tcx, body, move_data, path, |mpi| callback(mpi, DropFlagState::Absent))
      .               }
      .           
      .               debug!("drop_flag_effects: assignment for location({:?})", loc);
      .           
 12,143 ( 0.00%)      for_location_inits(tcx, body, move_data, loc, |mpi| callback(mpi, DropFlagState::Present));
546,040 ( 0.03%)  }
      .           
      .           pub fn for_location_inits<'tcx, F>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               move_data: &MoveData<'tcx>,
      .               loc: Location,
      .               mut callback: F,
      .           ) where
      .               F: FnMut(MovePathIndex),
      .           {
 45,125 ( 0.00%)      for ii in &move_data.init_loc_map[loc] {
 60,608 ( 0.00%)          let init = move_data.inits[*ii];
 37,256 ( 0.00%)          match init.kind {
      .                       InitKind::Deep => {
      .                           let path = init.path;
      .           
      .                           on_all_children_bits(tcx, body, move_data, path, &mut callback)
      .                       }
      .                       InitKind::Shallow => {
      .                           let mpi = init.path;
      .                           callback(mpi);
-- line 226 ----------------------------------------
-- line 230 ----------------------------------------
      .               }
      .           }
      .           
      .           /// Calls `handle_inactive_variant` for each descendant move path of `enum_place` that contains a
      .           /// `Downcast` to a variant besides the `active_variant`.
      .           ///
      .           /// NOTE: If there are no move paths corresponding to an inactive variant,
      .           /// `handle_inactive_variant` will not be called for that variant.
  9,168 ( 0.00%)  pub(crate) fn on_all_inactive_variants<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &mir::Body<'tcx>,
      .               move_data: &MoveData<'tcx>,
      .               enum_place: mir::Place<'tcx>,
      .               active_variant: VariantIdx,
      .               mut handle_inactive_variant: impl FnMut(MovePathIndex),
      .           ) {
  3,820 ( 0.00%)      let enum_mpi = match move_data.rev_lookup.find(enum_place.as_ref()) {
      .                   LookupResult::Exact(mpi) => mpi,
      .                   LookupResult::Parent(_) => return,
      .               };
      .           
      .               let enum_path = &move_data.move_paths[enum_mpi];
  4,958 ( 0.00%)      for (variant_mpi, variant_path) in enum_path.children(&move_data.move_paths) {
      .                   // Because of the way we build the `MoveData` tree, each child should have exactly one more
      .                   // projection than `enum_place`. This additional projection must be a downcast since the
      .                   // base is an enum.
    949 ( 0.00%)          let (downcast, base_proj) = variant_path.place.projection.split_last().unwrap();
  3,796 ( 0.00%)          assert_eq!(enum_place.projection.len(), base_proj.len());
      .           
  2,847 ( 0.00%)          let variant_idx = match *downcast {
      .                       mir::ProjectionElem::Downcast(_, idx) => idx,
      .                       _ => unreachable!(),
      .                   };
      .           
    949 ( 0.00%)          if variant_idx != active_variant {
      .                       on_all_children_bits(tcx, body, move_data, variant_mpi, |mpi| {
    866 ( 0.00%)                  handle_inactive_variant(mpi)
      .                       });
      .                   }
      .               }
  6,112 ( 0.00%)  }

571,819 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/sip.rs
--------------------------------------------------------------------------------
Ir                 

-- line 124 ----------------------------------------
        .           /// sizes and avoid calling `memcpy`, which is good for speed.
        .           ///
        .           /// Unsafe because: unchecked indexing at start..start+len
        .           #[inline]
        .           unsafe fn u8to64_le(buf: &[u8], start: usize, len: usize) -> u64 {
        .               debug_assert!(len < 8);
        .               let mut i = 0; // current byte index (from LSB) in the output u64
        .               let mut out = 0;
  330,596 ( 0.02%)      if i + 3 < len {
        .                   // SAFETY: `i` cannot be greater than `len`, and the caller must guarantee
        .                   // that the index start..start+len is in bounds.
        .                   out = unsafe { load_int_le!(buf, start + i, u32) } as u64;
        .                   i += 4;
        .               }
  682,971 ( 0.04%)      if i + 1 < len {
        .                   // SAFETY: same as above.
  341,451 ( 0.02%)          out |= (unsafe { load_int_le!(buf, start + i, u16) } as u64) << (i * 8);
  170,514 ( 0.01%)          i += 2
        .               }
  386,797 ( 0.02%)      if i < len {
        .                   // SAFETY: same as above.
  484,541 ( 0.03%)          out |= (unsafe { *buf.get_unchecked(start + i) } as u64) << (i * 8);
        .                   i += 1;
        .               }
        .               debug_assert_eq!(i, len);
        .               out
        .           }
        .           
        .           impl SipHasher {
        .               /// Creates a new `SipHasher` with the two initial keys set to 0.
-- line 153 ----------------------------------------
-- line 190 ----------------------------------------
        .               /// Creates a `SipHasher13` that is keyed off the provided keys.
        .               #[inline]
        .               #[unstable(feature = "hashmap_internals", issue = "none")]
        .               #[rustc_deprecated(
        .                   since = "1.13.0",
        .                   reason = "use `std::collections::hash_map::DefaultHasher` instead"
        .               )]
        .               pub fn new_with_keys(key0: u64, key1: u64) -> SipHasher13 {
   67,809 ( 0.00%)          SipHasher13 { hasher: Hasher::new_with_keys(key0, key1) }
        .               }
        .           }
        .           
        .           impl<S: Sip> Hasher<S> {
        .               #[inline]
        .               fn new_with_keys(key0: u64, key1: u64) -> Hasher<S> {
        9 ( 0.00%)          let mut state = Hasher {
        .                       k0: key0,
        .                       k1: key1,
        .                       length: 0,
        .                       state: State { v0: 0, v1: 0, v2: 0, v3: 0 },
        .                       tail: 0,
        .                       ntail: 0,
        .                       _marker: PhantomData,
        .                   };
        .                   state.reset();
        .                   state
        .               }
        .           
        .               #[inline]
        .               fn reset(&mut self) {
        .                   self.length = 0;
  101,709 ( 0.01%)          self.state.v0 = self.k0 ^ 0x736f6d6570736575;
  107,151 ( 0.01%)          self.state.v1 = self.k1 ^ 0x646f72616e646f6d;
        .                   self.state.v2 = self.k0 ^ 0x6c7967656e657261;
        .                   self.state.v3 = self.k1 ^ 0x7465646279746573;
        .                   self.ntail = 0;
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl super::Hasher for SipHasher {
-- line 230 ----------------------------------------
-- line 258 ----------------------------------------
        .               // in librustc_data_structures/sip128.rs, and add `write_u*`/`write_i*`
        .               // methods to `SipHasher`, `SipHasher13`, and `DefaultHasher`. This would
        .               // greatly speed up integer hashing by those hashers, at the cost of
        .               // slightly slowing down compile speeds on some benchmarks. See #69152 for
        .               // details.
        .               #[inline]
        .               fn write(&mut self, msg: &[u8]) {
        .                   let length = msg.len();
  414,992 ( 0.02%)          self.length += length;
        .           
        .                   let mut needed = 0;
        .           
  409,539 ( 0.02%)          if self.ntail != 0 {
  205,076 ( 0.01%)              needed = 8 - self.ntail;
        .                       // SAFETY: `cmp::min(length, needed)` is guaranteed to not be over `length`
1,025,340 ( 0.06%)              self.tail |= unsafe { u8to64_le(msg, 0, cmp::min(length, needed)) } << (8 * self.ntail);
  205,068 ( 0.01%)              if length < needed {
  136,646 ( 0.01%)                  self.ntail += length;
        .                           return;
        .                       } else {
   34,211 ( 0.00%)                  self.state.v3 ^= self.tail;
        .                           S::c_rounds(&mut self.state);
   68,422 ( 0.00%)                  self.state.v0 ^= self.tail;
   34,211 ( 0.00%)                  self.ntail = 0;
        .                       }
        .                   }
        .           
        .                   // Buffered tail is now flushed, process new input.
  125,485 ( 0.01%)          let len = length - needed;
  125,496 ( 0.01%)          let left = len & 0x7; // len % 8
        .           
        .                   let mut i = needed;
  188,576 ( 0.01%)          while i < len - left {
        .                       // SAFETY: because `len - left` is the biggest multiple of 8 under
        .                       // `len`, and because `i` starts at `needed` where `len` is `length - needed`,
        .                       // `i + 8` is guaranteed to be less than or equal to `length`.
        .                       let mi = unsafe { load_int_le!(msg, i, u64) };
        .           
      166 ( 0.00%)              self.state.v3 ^= mi;
        .                       S::c_rounds(&mut self.state);
      166 ( 0.00%)              self.state.v0 ^= mi;
        .           
      332 ( 0.00%)              i += 8;
        .                   }
        .           
        .                   // SAFETY: `i` is now `needed + len.div_euclid(8) * 8`,
        .                   // so `i + left` = `needed + len` = `length`, which is by
        .                   // definition equal to `msg.len()`.
  130,927 ( 0.01%)          self.tail = unsafe { u8to64_le(msg, i, left) };
        .                   self.ntail = left;
        .               }
        .           
        .               #[inline]
        .               fn finish(&self) -> u64 {
   33,906 ( 0.00%)          let mut state = self.state;
        .           
  169,530 ( 0.01%)          let b: u64 = ((self.length as u64 & 0xff) << 56) | self.tail;
        .           
   33,906 ( 0.00%)          state.v3 ^= b;
        .                   S::c_rounds(&mut state);
   33,906 ( 0.00%)          state.v0 ^= b;
        .           
   33,906 ( 0.00%)          state.v2 ^= 0xff;
        .                   S::d_rounds(&mut state);
        .           
   67,812 ( 0.00%)          state.v0 ^ state.v1 ^ state.v2 ^ state.v3
        .               }
        .           }
        .           
        .           impl<S: Sip> Clone for Hasher<S> {
        .               #[inline]
        .               fn clone(&self) -> Hasher<S> {
        .                   Hasher {
        .                       k0: self.k0,
-- line 331 ----------------------------------------
-- line 354 ----------------------------------------
        .           }
        .           
        .           #[derive(Debug, Clone, Default)]
        .           struct Sip13Rounds;
        .           
        .           impl Sip for Sip13Rounds {
        .               #[inline]
        .               fn c_rounds(state: &mut State) {
  444,427 ( 0.03%)          compress!(state);
        .               }
        .           
        .               #[inline]
        .               fn d_rounds(state: &mut State) {
  135,624 ( 0.01%)          compress!(state);
  135,624 ( 0.01%)          compress!(state);
  101,718 ( 0.01%)          compress!(state);
        .               }
        .           }
        .           
        .           #[derive(Debug, Clone, Default)]
        .           struct Sip24Rounds;
        .           
        .           impl Sip for Sip24Rounds {
        .               #[inline]
-- line 377 ----------------------------------------

  957,907 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/sip.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 97 ----------------------------------------
      .           
      .               /// If true, the capture is behind a reference.
      .               by_ref: bool,
      .           }
      .           
      .           const DEREF_PROJECTION: &[PlaceElem<'_>; 1] = &[ProjectionElem::Deref];
      .           
      .           pub fn provide(providers: &mut Providers) {
      4 ( 0.00%)      *providers = Providers {
      .                   mir_borrowck: |tcx, did| {
    240 ( 0.00%)              if let Some(def) = ty::WithOptConstParam::try_lookup(did, tcx) {
      .                           tcx.mir_borrowck_const_arg(def)
      .                       } else {
    920 ( 0.00%)                  mir_borrowck(tcx, ty::WithOptConstParam::unknown(did))
      .                       }
      .                   },
      .                   mir_borrowck_const_arg: |tcx, (did, param_did)| {
      .                       mir_borrowck(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })
      .                   },
      .                   ..*providers
      .               };
      1 ( 0.00%)  }
      .           
  2,300 ( 0.00%)  fn mir_borrowck<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               def: ty::WithOptConstParam<LocalDefId>,
      .           ) -> &'tcx BorrowCheckResult<'tcx> {
      .               let (input_body, promoted) = tcx.mir_promoted(def);
      .               debug!("run query mir_borrowck: {}", tcx.def_path_str(def.did.to_def_id()));
      .           
  2,990 ( 0.00%)      let opt_closure_req = tcx.infer_ctxt().with_opaque_type_inference(def.did).enter(|infcx| {
      .                   let input_body: &Body<'_> = &input_body.borrow();
      .                   let promoted: &IndexVec<_, _> = &promoted.borrow();
  3,220 ( 0.00%)          do_mir_borrowck(&infcx, input_body, promoted, false).0
    920 ( 0.00%)      });
      .               debug!("mir_borrowck done");
      .           
    230 ( 0.00%)      tcx.arena.alloc(opt_closure_req)
  1,840 ( 0.00%)  }
      .           
      .           /// Perform the actual borrow checking.
      .           ///
      .           /// If `return_body_with_facts` is true, then return the body with non-erased
      .           /// region ids on which the borrow checking was performed together with Polonius
      .           /// facts.
  5,060 ( 0.00%)  #[instrument(skip(infcx, input_body, input_promoted), level = "debug")]
      .           fn do_mir_borrowck<'a, 'tcx>(
      .               infcx: &InferCtxt<'a, 'tcx>,
      .               input_body: &Body<'tcx>,
      .               input_promoted: &IndexVec<Promoted, Body<'tcx>>,
      .               return_body_with_facts: bool,
      .           ) -> (BorrowCheckResult<'tcx>, Option<Box<BodyWithBorrowckFacts<'tcx>>>) {
  2,300 ( 0.00%)      let def = input_body.source.with_opt_param().as_local().unwrap();
      .           
      .               debug!(?def);
      .           
    460 ( 0.00%)      let tcx = infcx.tcx;
      .               let param_env = tcx.param_env(def.did);
    230 ( 0.00%)      let id = tcx.hir().local_def_id_to_hir_id(def.did);
      .           
    460 ( 0.00%)      let mut local_names = IndexVec::from_elem(None, &input_body.local_decls);
      .               for var_debug_info in &input_body.var_debug_info {
  2,673 ( 0.00%)          if let VarDebugInfoContents::Place(place) = var_debug_info.value {
  1,352 ( 0.00%)              if let Some(local) = place.as_local() {
  1,974 ( 0.00%)                  if let Some(prev_name) = local_names[local] {
      .                               if var_debug_info.name != prev_name {
      .                                   span_bug!(
      .                                       var_debug_info.source_info.span,
      .                                       "local {:?} has many names (`{}` vs `{}`)",
      .                                       local,
      .                                       prev_name,
      .                                       var_debug_info.name
      .                                   );
      .                               }
      .                           }
  1,974 ( 0.00%)                  local_names[local] = Some(var_debug_info.name);
      .                       }
      .                   }
      .               }
      .           
      .               // Gather the upvars of a closure, if any.
    920 ( 0.00%)      let tables = tcx.typeck_opt_const_arg(def);
    460 ( 0.00%)      if let Some(ErrorReported) = tables.tainted_by_errors {
      .                   infcx.set_tainted_by_errors();
      .               }
    920 ( 0.00%)      let upvars: Vec<_> = tables
      .                   .closure_min_captures_flattened(def.did.to_def_id())
      .                   .map(|captured_place| {
      .                       let capture = captured_place.info.capture_kind;
     36 ( 0.00%)              let by_ref = match capture {
      .                           ty::UpvarCapture::ByValue => false,
      .                           ty::UpvarCapture::ByRef(..) => true,
      .                       };
      .                       Upvar { place: captured_place.clone(), by_ref }
      .                   })
      .                   .collect();
      .           
      .               // Replace all regions with fresh inference variables. This
      .               // requires first making our own copy of the MIR. This copy will
      .               // be modified (in place) to contain non-lexical lifetimes. It
      .               // will have a lifetime tied to the inference context.
    460 ( 0.00%)      let mut body_owned = input_body.clone();
      .               let mut promoted = input_promoted.clone();
      .               let free_regions =
    690 ( 0.00%)          nll::replace_regions_in_mir(infcx, param_env, &mut body_owned, &mut promoted);
      .               let body = &body_owned; // no further changes
      .           
    230 ( 0.00%)      let location_table_owned = LocationTable::new(body);
      .               let location_table = &location_table_owned;
      .           
      .               let mut errors_buffer = Vec::new();
    690 ( 0.00%)      let (move_data, move_errors): (MoveData<'tcx>, Vec<(Place<'tcx>, MoveError<'tcx>)>) =
  1,610 ( 0.00%)          match MoveData::gather_moves(&body, tcx, param_env) {
  1,380 ( 0.00%)              Ok(move_data) => (move_data, Vec::new()),
      .                       Err((move_data, move_errors)) => (move_data, move_errors),
      .                   };
      .               let promoted_errors = promoted
      .                   .iter_enumerated()
    480 ( 0.00%)          .map(|(idx, body)| (idx, MoveData::gather_moves(&body, tcx, param_env)));
      .           
  1,380 ( 0.00%)      let mdpe = MoveDataParamEnv { move_data, param_env };
      .           
  1,840 ( 0.00%)      let mut flow_inits = MaybeInitializedPlaces::new(tcx, &body, &mdpe)
    230 ( 0.00%)          .into_engine(tcx, &body)
      .                   .pass_name("borrowck")
      .                   .iterate_to_fixpoint()
      .                   .into_results_cursor(&body);
      .           
  2,760 ( 0.00%)      let locals_are_invalidated_at_exit = tcx.hir().body_owner_kind(id).is_fn_or_closure();
      .               let borrow_set =
  2,300 ( 0.00%)          Rc::new(BorrowSet::build(tcx, body, locals_are_invalidated_at_exit, &mdpe.move_data));
      .           
  1,150 ( 0.00%)      let use_polonius = return_body_with_facts || infcx.tcx.sess.opts.debugging_opts.polonius;
      .           
      .               // Compute non-lexical lifetimes.
      .               let nll::NllOutput {
    690 ( 0.00%)          regioncx,
    920 ( 0.00%)          opaque_type_values,
    460 ( 0.00%)          polonius_input,
    690 ( 0.00%)          polonius_output,
    920 ( 0.00%)          opt_closure_req,
  2,300 ( 0.00%)          nll_errors,
  4,140 ( 0.00%)      } = nll::compute_regions(
      .                   infcx,
  3,680 ( 0.00%)          free_regions,
      .                   body,
      .                   &promoted,
      .                   location_table,
      .                   param_env,
      .                   &mut flow_inits,
      .                   &mdpe.move_data,
      .                   &borrow_set,
      .                   &upvars,
      .                   use_polonius,
      .               );
      .           
      .               // Dump MIR results into a file, if that is enabled. This let us
      .               // write unit-tests, as well as helping with debugging.
    690 ( 0.00%)      nll::dump_mir_results(infcx, &body, &regioncx, &opt_closure_req);
      .           
      .               // We also have a `#[rustc_regions]` annotation that causes us to dump
      .               // information.
    460 ( 0.00%)      nll::dump_annotation(
      .                   infcx,
      .                   &body,
      .                   &regioncx,
      .                   &opt_closure_req,
      .                   &opaque_type_values,
      .                   &mut errors_buffer,
      .               );
      .           
      .               // The various `flow_*` structures can be large. We drop `flow_inits` here
      .               // so it doesn't overlap with the others below. This reduces peak memory
      .               // usage significantly on some benchmarks.
  3,680 ( 0.00%)      drop(flow_inits);
      .           
    230 ( 0.00%)      let regioncx = Rc::new(regioncx);
      .           
  1,380 ( 0.00%)      let flow_borrows = Borrows::new(tcx, body, &regioncx, &borrow_set)
    230 ( 0.00%)          .into_engine(tcx, body)
      .                   .pass_name("borrowck")
      .                   .iterate_to_fixpoint();
  1,380 ( 0.00%)      let flow_uninits = MaybeUninitializedPlaces::new(tcx, body, &mdpe)
    230 ( 0.00%)          .into_engine(tcx, body)
      .                   .pass_name("borrowck")
      .                   .iterate_to_fixpoint();
  1,380 ( 0.00%)      let flow_ever_inits = EverInitializedPlaces::new(tcx, body, &mdpe)
    230 ( 0.00%)          .into_engine(tcx, body)
      .                   .pass_name("borrowck")
      .                   .iterate_to_fixpoint();
      .           
    672 ( 0.00%)      let movable_generator = !matches!(
  1,592 ( 0.00%)          tcx.hir().get(id),
      .                   Node::Expr(&hir::Expr {
      .                       kind: hir::ExprKind::Closure(.., Some(hir::Movability::Static)),
      .                       ..
      .                   })
      .               );
      .           
    336 ( 0.00%)      for (idx, move_data_results) in promoted_errors {
      .                   let promoted_body = &promoted[idx];
      .           
     96 ( 0.00%)          if let Err((move_data, move_errors)) = move_data_results {
      .                       let mut promoted_mbcx = MirBorrowckCtxt {
      .                           infcx,
      .                           param_env,
      .                           body: promoted_body,
      .                           move_data: &move_data,
      .                           location_table, // no need to create a real one for the promoted, it is not used
      .                           movable_generator,
      .                           fn_self_span_reported: Default::default(),
-- line 307 ----------------------------------------
-- line 325 ----------------------------------------
      .                       };
      .                       promoted_mbcx.report_move_errors(move_errors);
      .                       errors_buffer = promoted_mbcx.errors_buffer;
      .                   };
      .               }
      .           
      .               let dominators = body.dominators();
      .           
 10,350 ( 0.00%)      let mut mbcx = MirBorrowckCtxt {
      .                   infcx,
      .                   param_env,
      .                   body,
      .                   move_data: &mdpe.move_data,
      .                   location_table,
      .                   movable_generator,
      .                   locals_are_invalidated_at_exit,
      .                   fn_self_span_reported: Default::default(),
      .                   access_place_error_reported: Default::default(),
      .                   reservation_error_reported: Default::default(),
      .                   reservation_warnings: Default::default(),
      .                   move_error_reported: BTreeMap::new(),
      .                   uninitialized_error_reported: Default::default(),
    920 ( 0.00%)          errors_buffer,
    230 ( 0.00%)          regioncx: Rc::clone(&regioncx),
      .                   used_mut: Default::default(),
      .                   used_mut_upvars: SmallVec::new(),
    230 ( 0.00%)          borrow_set: Rc::clone(&borrow_set),
  1,380 ( 0.00%)          dominators,
    920 ( 0.00%)          upvars,
    920 ( 0.00%)          local_names,
      .                   region_names: RefCell::default(),
      .                   next_region_name: RefCell::new(1),
      .                   polonius_output,
      .               };
      .           
      .               // Compute and report region errors, if any.
    690 ( 0.00%)      mbcx.report_region_errors(nll_errors);
      .           
      .               let results = BorrowckResults {
  1,380 ( 0.00%)          ever_inits: flow_ever_inits,
  1,840 ( 0.00%)          uninits: flow_uninits,
  2,530 ( 0.00%)          borrows: flow_borrows,
      .               };
      .           
  1,380 ( 0.00%)      mbcx.report_move_errors(move_errors);
      .           
    230 ( 0.00%)      rustc_mir_dataflow::visit_results(
      .                   body,
    230 ( 0.00%)          traversal::reverse_postorder(body).map(|(bb, _)| bb),
      .                   &results,
      .                   &mut mbcx,
      .               );
      .           
      .               // Convert any reservation warnings into lints.
      .               let reservation_warnings = mem::take(&mut mbcx.reservation_warnings);
      .               for (_, (place, span, location, bk, borrow)) in reservation_warnings {
      .                   let mut initial_diag = mbcx.report_conflicting_borrow(location, (place, span), bk, &borrow);
-- line 381 ----------------------------------------
-- line 406 ----------------------------------------
      .               // For each non-user used mutable variable, check if it's been assigned from
      .               // a user-declared local. If so, then put that local into the used_mut set.
      .               // Note that this set is expected to be small - only upvars from closures
      .               // would have a chance of erroneously adding non-user-defined mutable vars
      .               // to the set.
      .               let temporary_used_locals: FxHashSet<Local> = mbcx
      .                   .used_mut
      .                   .iter()
    230 ( 0.00%)          .filter(|&local| !mbcx.body.local_decls[*local].is_user_variable())
      .                   .cloned()
      .                   .collect();
      .               // For the remaining unused locals that are marked as mutable, we avoid linting any that
      .               // were never initialized. These locals may have been removed as unreachable code; or will be
      .               // linted as unused variables.
      .               let unused_mut_locals =
    230 ( 0.00%)          mbcx.body.mut_vars_iter().filter(|local| !mbcx.used_mut.contains(local)).collect();
    920 ( 0.00%)      mbcx.gather_used_muts(temporary_used_locals, unused_mut_locals);
      .           
      .               debug!("mbcx.used_mut: {:?}", mbcx.used_mut);
    920 ( 0.00%)      let used_mut = mbcx.used_mut;
    230 ( 0.00%)      for local in mbcx.body.mut_vars_and_args_iter().filter(|local| !used_mut.contains(local)) {
     60 ( 0.00%)          let local_decl = &mbcx.body.local_decls[local];
    360 ( 0.00%)          let lint_root = match &mbcx.body.source_scopes[local_decl.source_info.scope].local_data {
      .                       ClearCrossCrate::Set(data) => data.lint_root,
      .                       _ => continue,
      .                   };
      .           
      .                   // Skip over locals that begin with an underscore or have no name
    180 ( 0.00%)          match mbcx.local_names[local] {
      2 ( 0.00%)              Some(name) => {
      6 ( 0.00%)                  if name.as_str().starts_with('_') {
      .                               continue;
      .                           }
      .                       }
      .                       None => continue,
      .                   }
      .           
      .                   let span = local_decl.source_info.span;
      .                   if span.desugaring_kind().is_some() {
-- line 444 ----------------------------------------
-- line 455 ----------------------------------------
      .                               String::new(),
      .                               Applicability::MachineApplicable,
      .                           )
      .                           .emit();
      .                   })
      .               }
      .           
      .               // Buffer any move errors that we collected and de-duplicated.
  2,070 ( 0.00%)      for (_, (_, diag)) in mbcx.move_error_reported {
      .                   diag.buffer(&mut mbcx.errors_buffer);
      .               }
      .           
    230 ( 0.00%)      if !mbcx.errors_buffer.is_empty() {
      .                   mbcx.errors_buffer.sort_by_key(|diag| diag.sort_span);
      .           
      .                   for diag in mbcx.errors_buffer.drain(..) {
      .                       mbcx.infcx.tcx.sess.diagnostic().emit_diagnostic(&diag);
      .                   }
      .               }
      .           
      .               let result = BorrowCheckResult {
    920 ( 0.00%)          concrete_opaque_types: opaque_type_values,
  1,150 ( 0.00%)          closure_requirements: opt_closure_req,
  1,380 ( 0.00%)          used_mut_upvars: mbcx.used_mut_upvars,
      .               };
      .           
    460 ( 0.00%)      let body_with_facts = if return_body_with_facts {
      .                   let output_facts = mbcx.polonius_output.expect("Polonius output was not computed");
      .                   Some(Box::new(BodyWithBorrowckFacts {
      .                       body: body_owned,
      .                       input_facts: *polonius_input.expect("Polonius input facts were not generated"),
      .                       output_facts,
      .                       location_table: location_table_owned,
      .                   }))
      .               } else {
      .                   None
      .               };
      .           
      .               debug!("do_mir_borrowck: result = {:#?}", result);
      .           
  3,220 ( 0.00%)      (result, body_with_facts)
  2,760 ( 0.00%)  }
      .           
      .           /// A `Body` with information computed by the borrow checker. This struct is
      .           /// intended to be consumed by compiler consumers.
      .           ///
      .           /// We need to include the MIR body here because the region identifiers must
      .           /// match the ones in the Polonius facts.
      .           pub struct BodyWithBorrowckFacts<'tcx> {
      .               /// A mir body that contains region identifiers.
-- line 504 ----------------------------------------
-- line 608 ----------------------------------------
      .           // Check that:
      .           // 1. assignments are always made to mutable locations (FIXME: does that still really go here?)
      .           // 2. loans made in overlapping scopes do not conflict
      .           // 3. assignments do not affect things loaned out as immutable
      .           // 4. moves do not affect things loaned out in any way
      .           impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx> {
      .               type FlowState = Flows<'cx, 'tcx>;
      .           
 86,598 ( 0.01%)      fn visit_statement_before_primary_effect(
      .                   &mut self,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .                   stmt: &'cx Statement<'tcx>,
      .                   location: Location,
      .               ) {
      .                   debug!("MirBorrowckCtxt::process_statement({:?}, {:?}): {:?}", location, stmt, flow_state);
      .                   let span = stmt.source_info.span;
      .           
      .                   self.check_activations(location, span, flow_state);
      .           
 48,110 ( 0.00%)          match &stmt.kind {
  4,918 ( 0.00%)              StatementKind::Assign(box (lhs, ref rhs)) => {
      .                           self.consume_rvalue(location, (rhs, span), flow_state);
      .           
  9,836 ( 0.00%)                  self.mutate_place(location, (*lhs, span), Shallow(None), flow_state);
      .                       }
    348 ( 0.00%)              StatementKind::FakeRead(box (_, ref place)) => {
      .                           // Read for match doesn't access any memory and is used to
      .                           // assert that a place is safe and live. So we don't have to
      .                           // do any checks here.
      .                           //
      .                           // FIXME: Remove check that the place is initialized. This is
      .                           // needed for now because matches don't have never patterns yet.
      .                           // So this is the only place we prevent
      .                           //      let x: !;
      .                           //      match x {};
      .                           // from compiling.
  1,392 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
      .                               location,
      .                               InitializationRequiringAction::Use,
  3,132 ( 0.00%)                      (place.as_ref(), span),
      .                               flow_state,
      .                           );
      .                       }
      .                       StatementKind::SetDiscriminant { place, variant_index: _ } => {
      .                           self.mutate_place(location, (**place, span), Shallow(None), flow_state);
      .                       }
      .                       StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {
      .                           ..
-- line 655 ----------------------------------------
-- line 663 ----------------------------------------
      .                       | StatementKind::Coverage(..)
      .                       | StatementKind::AscribeUserType(..)
      .                       | StatementKind::Retag { .. }
      .                       | StatementKind::StorageLive(..) => {
      .                           // `Nop`, `AscribeUserType`, `Retag`, and `StorageLive` are irrelevant
      .                           // to borrow check.
      .                       }
      .                       StatementKind::StorageDead(local) => {
 24,762 ( 0.00%)                  self.access_place(
      .                               location,
 45,397 ( 0.00%)                      (Place::from(*local), span),
      .                               (Shallow(None), Write(WriteKind::StorageDeadOrDrop)),
      .                               LocalMutationIsAllowed::Yes,
      .                               flow_state,
      .                           );
      .                       }
      .                   }
 76,976 ( 0.00%)      }
      .           
 33,624 ( 0.00%)      fn visit_terminator_before_primary_effect(
      .                   &mut self,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .                   term: &'cx Terminator<'tcx>,
      .                   loc: Location,
      .               ) {
      .                   debug!("MirBorrowckCtxt::process_terminator({:?}, {:?}): {:?}", loc, term, flow_state);
      .                   let span = term.source_info.span;
      .           
      .                   self.check_activations(loc, span, flow_state);
      .           
 21,015 ( 0.00%)          match term.kind {
    980 ( 0.00%)              TerminatorKind::SwitchInt { ref discr, switch_ty: _, targets: _ } => {
    980 ( 0.00%)                  self.consume_operand(loc, (discr, span), flow_state);
      .                       }
  3,476 ( 0.00%)              TerminatorKind::Drop { place, target: _, unwind: _ } => {
      .                           debug!(
      .                               "visit_terminator_drop \
      .                                loc: {:?} term: {:?} place: {:?} span: {:?}",
      .                               loc, term, place, span
      .                           );
      .           
 10,428 ( 0.00%)                  self.access_place(
      .                               loc,
 15,642 ( 0.00%)                      (place, span),
      .                               (AccessDepth::Drop, Write(WriteKind::StorageDeadOrDrop)),
      .                               LocalMutationIsAllowed::Yes,
      .                               flow_state,
      .                           );
      .                       }
      .                       TerminatorKind::DropAndReplace {
     32 ( 0.00%)                  place: drop_place,
     16 ( 0.00%)                  value: ref new_value,
      .                           target: _,
      .                           unwind: _,
      .                       } => {
    256 ( 0.00%)                  self.mutate_place(loc, (drop_place, span), Deep, flow_state);
      .                           self.consume_operand(loc, (new_value, span), flow_state);
      .                       }
      .                       TerminatorKind::Call {
  2,439 ( 0.00%)                  ref func,
      .                           ref args,
      .                           ref destination,
      .                           cleanup: _,
      .                           from_hir_call: _,
      .                           fn_span: _,
      .                       } => {
  6,504 ( 0.00%)                  self.consume_operand(loc, (func, span), flow_state);
      .                           for arg in args {
  6,528 ( 0.00%)                      self.consume_operand(loc, (arg, span), flow_state);
      .                           }
  3,251 ( 0.00%)                  if let Some((dest, _ /*bb*/)) = *destination {
  9,744 ( 0.00%)                      self.mutate_place(loc, (dest, span), Deep, flow_state);
      .                           }
      .                       }
      .                       TerminatorKind::Assert { ref cond, expected: _, ref msg, target: _, cleanup: _ } => {
      .                           self.consume_operand(loc, (cond, span), flow_state);
      .                           use rustc_middle::mir::AssertKind;
      .                           if let AssertKind::BoundsCheck { ref len, ref index } = *msg {
      .                               self.consume_operand(loc, (len, span), flow_state);
      .                               self.consume_operand(loc, (index, span), flow_state);
      .                           }
      .                       }
      .           
     90 ( 0.00%)              TerminatorKind::Yield { ref value, resume: _, resume_arg, drop: _ } => {
    198 ( 0.00%)                  self.consume_operand(loc, (value, span), flow_state);
    198 ( 0.00%)                  self.mutate_place(loc, (resume_arg, span), Deep, flow_state);
      .                       }
      .           
      .                       TerminatorKind::InlineAsm {
      .                           template: _,
      .                           ref operands,
      .                           options: _,
      .                           line_spans: _,
      .                           destination: _,
-- line 756 ----------------------------------------
-- line 790 ----------------------------------------
      .                       | TerminatorKind::Resume
      .                       | TerminatorKind::Return
      .                       | TerminatorKind::GeneratorDrop
      .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
      .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ } => {
      .                           // no data used, thus irrelevant to borrowck
      .                       }
      .                   }
 31,536 ( 0.00%)      }
      .           
 29,421 ( 0.00%)      fn visit_terminator_after_primary_effect(
      .                   &mut self,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .                   term: &'cx Terminator<'tcx>,
      .                   loc: Location,
      .               ) {
  4,203 ( 0.00%)          let span = term.source_info.span;
      .           
 16,812 ( 0.00%)          match term.kind {
      .                       TerminatorKind::Yield { value: _, resume: _, resume_arg: _, drop: _ } => {
     36 ( 0.00%)                  if self.movable_generator {
      .                               // Look for any active borrows to locals
      .                               let borrow_set = self.borrow_set.clone();
      .                               for i in flow_state.borrows.iter() {
      .                                   let borrow = &borrow_set[i];
      .                                   self.check_for_local_borrow(borrow, span);
      .                               }
      .                           }
      .                       }
      .           
      .                       TerminatorKind::Resume | TerminatorKind::Return | TerminatorKind::GeneratorDrop => {
      .                           // Returning from the function implicitly kills storage for all locals and statics.
      .                           // Often, the storage will already have been killed by an explicit
      .                           // StorageDead, but we don't always emit those (notably on unwind paths),
      .                           // so this "extra check" serves as a kind of backup.
    882 ( 0.00%)                  let borrow_set = self.borrow_set.clone();
      .                           for i in flow_state.borrows.iter() {
      .                               let borrow = &borrow_set[i];
      .                               self.check_for_invalidation_at_exit(loc, borrow, span);
      .                           }
      .                       }
      .           
      .                       TerminatorKind::Abort
      .                       | TerminatorKind::Assert { .. }
-- line 833 ----------------------------------------
-- line 836 ----------------------------------------
      .                       | TerminatorKind::DropAndReplace { .. }
      .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
      .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ }
      .                       | TerminatorKind::Goto { .. }
      .                       | TerminatorKind::SwitchInt { .. }
      .                       | TerminatorKind::Unreachable
      .                       | TerminatorKind::InlineAsm { .. } => {}
      .                   }
 33,624 ( 0.00%)      }
      .           }
      .           
      .           use self::AccessDepth::{Deep, Shallow};
      .           use self::ReadOrWrite::{Activation, Read, Reservation, Write};
      .           
      .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
      .           enum ArtificialField {
      .               ArrayLength,
-- line 852 ----------------------------------------
-- line 913 ----------------------------------------
      .           /// When checking permissions for a place access, this flag is used to indicate that an immutable
      .           /// local place can be mutated.
      .           //
      .           // FIXME: @nikomatsakis suggested that this flag could be removed with the following modifications:
      .           // - Merge `check_access_permissions()` and `check_if_reassignment_to_immutable_state()`.
      .           // - Split `is_mutable()` into `is_assignable()` (can be directly assigned) and
      .           //   `is_declared_mutable()`.
      .           // - Take flow state into consideration in `is_assignable()` for local variables.
  2,630 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
      .           enum LocalMutationIsAllowed {
      .               Yes,
      .               /// We want use of immutable upvars to cause a "write to immutable upvar"
      .               /// error, not an "reassignment" error.
      .               ExceptUpvars,
      .               No,
      .           }
      .           
-- line 929 ----------------------------------------
-- line 970 ----------------------------------------
      .               }
      .           
      .               /// Checks an access to the given place to see if it is allowed. Examines the set of borrows
      .               /// that are in scope, as well as which paths have been initialized, to ensure that (a) the
      .               /// place is initialized and (b) it is not borrowed in some way that would prevent this
      .               /// access.
      .               ///
      .               /// Returns `true` if an error is reported.
190,256 ( 0.01%)      fn access_place(
      .                   &mut self,
      .                   location: Location,
      .                   place_span: (Place<'tcx>, Span),
      .                   kind: (AccessDepth, ReadOrWrite),
      .                   is_local_mutation_allowed: LocalMutationIsAllowed,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
      .                   let (sd, rw) = kind;
      .           
 47,564 ( 0.00%)          if let Activation(_, borrow_index) = rw {
    252 ( 0.00%)              if self.reservation_error_reported.contains(&place_span.0) {
      .                           debug!(
      .                               "skipping access_place for activation of invalid reservation \
      .                                place: {:?} borrow_index: {:?}",
      .                               place_span.0, borrow_index
      .                           );
      .                           return;
      .                       }
      .                   }
      .           
      .                   // Check is_empty() first because it's the common case, and doing that
      .                   // way we avoid the clone() call.
 11,891 ( 0.00%)          if !self.access_place_error_reported.is_empty()
      .                       && self.access_place_error_reported.contains(&(place_span.0, place_span.1))
      .                   {
      .                       debug!(
      .                           "access_place: suppressing error place_span=`{:?}` kind=`{:?}`",
      .                           place_span, kind
      .                       );
      .                       return;
      .                   }
      .           
 71,346 ( 0.00%)          let mutability_error = self.check_access_permissions(
 47,564 ( 0.00%)              place_span,
      .                       rw,
      .                       is_local_mutation_allowed,
      .                       flow_state,
      .                       location,
      .                   );
      .                   let conflict_error =
130,801 ( 0.01%)              self.check_access_for_conflict(location, place_span, sd, rw, flow_state);
      .           
 35,673 ( 0.00%)          if let (Activation(_, borrow_idx), true) = (kind.1, conflict_error) {
      .                       // Suppress this warning when there's an error being emitted for the
      .                       // same borrow: fixing the error is likely to fix the warning.
      .                       self.reservation_warnings.remove(&borrow_idx);
      .                   }
      .           
 35,673 ( 0.00%)          if conflict_error || mutability_error {
      .                       debug!("access_place: logging error place_span=`{:?}` kind=`{:?}`", place_span, kind);
      .           
      .                       self.access_place_error_reported.insert((place_span.0, place_span.1));
      .                   }
 95,128 ( 0.01%)      }
      .           
      .               fn check_access_for_conflict(
      .                   &mut self,
      .                   location: Location,
      .                   place_span: (Place<'tcx>, Span),
      .                   sd: AccessDepth,
      .                   rw: ReadOrWrite,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) -> bool {
      .                   debug!(
      .                       "check_access_for_conflict(location={:?}, place_span={:?}, sd={:?}, rw={:?})",
      .                       location, place_span, sd, rw,
      .                   );
      .           
 11,891 ( 0.00%)          let mut error_reported = false;
 35,673 ( 0.00%)          let tcx = self.infcx.tcx;
      .                   let body = self.body;
 23,782 ( 0.00%)          let borrow_set = self.borrow_set.clone();
      .           
      .                   // Use polonius output if it has been enabled.
 23,782 ( 0.00%)          let polonius_output = self.polonius_output.clone();
      .                   let borrows_in_scope = if let Some(polonius) = &polonius_output {
      .                       let location = self.location_table.start_index(location);
      .                       Either::Left(polonius.errors_at(location).iter().copied())
      .                   } else {
      .                       Either::Right(flow_state.borrows.iter())
      .                   };
      .           
154,583 ( 0.01%)          each_borrow_involving_path(
      .                       self,
      .                       tcx,
      .                       body,
      .                       location,
 71,346 ( 0.00%)              (sd, place_span.0),
      .                       &borrow_set,
 71,346 ( 0.00%)              borrows_in_scope,
132,439 ( 0.01%)              |this, borrow_index, borrow| match (rw, borrow.kind) {
      .                           // Obviously an activation is compatible with its own
      .                           // reservation (or even prior activating uses of same
      .                           // borrow); so don't check if they interfere.
      .                           //
      .                           // NOTE: *reservations* do conflict with themselves;
      .                           // thus aren't injecting unsoundenss w/ this check.)
    126 ( 0.00%)                  (Activation(_, activating), _) if activating == borrow_index => {
      .                               debug!(
      .                                   "check_access_for_conflict place_span: {:?} sd: {:?} rw: {:?} \
      .                                    skipping {:?} b/c activation of same borrow_index",
      .                                   place_span,
      .                                   sd,
      .                                   rw,
      .                                   (borrow_index, borrow),
      .                               );
-- line 1084 ----------------------------------------
-- line 1179 ----------------------------------------
      .                                   }
      .                               }
      .                               Control::Break
      .                           }
      .                       },
      .                   );
      .           
      .                   error_reported
 35,673 ( 0.00%)      }
      .           
 33,050 ( 0.00%)      fn mutate_place(
      .                   &mut self,
      .                   location: Location,
      .                   place_span: (Place<'tcx>, Span),
      .                   kind: AccessDepth,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
      .                   // Write of P[i] or *P requires P init'd.
 29,745 ( 0.00%)          self.check_if_assigned_path_is_moved(location, place_span, flow_state);
      .           
      .                   // Special case: you can assign an immutable local variable
      .                   // (e.g., `x = ...`) so long as it has never been initialized
      .                   // before (at this point in the flow).
  3,305 ( 0.00%)          if let Some(local) = place_span.0.as_local() {
 13,188 ( 0.00%)              if let Mutability::Not = self.body.local_decls[local].mutability {
      .                           // check for reassignments to immutable local variables
      .                           self.check_if_reassignment_to_immutable_state(
      .                               location, local, place_span, flow_state,
      .                           );
      .                           return;
      .                       }
      .                   }
      .           
      .                   // Otherwise, use the normal access permission rules.
 29,436 ( 0.00%)          self.access_place(
      .                       location,
  9,812 ( 0.00%)              place_span,
      .                       (kind, Write(WriteKind::Mutate)),
      .                       LocalMutationIsAllowed::No,
      .                       flow_state,
      .                   );
 26,440 ( 0.00%)      }
      .           
      .               fn consume_rvalue(
      .                   &mut self,
      .                   location: Location,
      .                   (rvalue, span): (&'cx Rvalue<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
 14,754 ( 0.00%)          match *rvalue {
  2,853 ( 0.00%)              Rvalue::Ref(_ /*rgn*/, bk, place) => {
 11,058 ( 0.00%)                  let access_kind = match bk {
      .                               BorrowKind::Shallow => {
      .                                   (Shallow(Some(ArtificialField::ShallowBorrow)), Read(ReadKind::Borrow(bk)))
      .                               }
      .                               BorrowKind::Shared => (Deep, Read(ReadKind::Borrow(bk))),
      .                               BorrowKind::Unique | BorrowKind::Mut { .. } => {
      .                                   let wk = WriteKind::MutableBorrow(bk);
    354 ( 0.00%)                          if allow_two_phase_borrow(bk) {
      .                                       (Deep, Reservation(wk))
      .                                   } else {
      .                                       (Deep, Write(wk))
      .                                   }
      .                               }
      .                           };
      .           
 19,971 ( 0.00%)                  self.access_place(
      .                               location,
  3,804 ( 0.00%)                      (place, span),
      .                               access_kind,
      .                               LocalMutationIsAllowed::No,
      .                               flow_state,
      .                           );
      .           
      .                           let action = if bk == BorrowKind::Shallow {
      .                               InitializationRequiringAction::MatchOn
      .                           } else {
      .                               InitializationRequiringAction::Borrow
      .                           };
      .           
  6,657 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
      .                               location,
      .                               action,
  6,657 ( 0.00%)                      (place.as_ref(), span),
      .                               flow_state,
      .                           );
      .                       }
      .           
      .                       Rvalue::AddressOf(mutability, place) => {
      .                           let access_kind = match mutability {
      .                               Mutability::Mut => (
      .                                   Deep,
-- line 1270 ----------------------------------------
-- line 1302 ----------------------------------------
      .                       }
      .           
      .                       Rvalue::Len(place) | Rvalue::Discriminant(place) => {
      .                           let af = match *rvalue {
      .                               Rvalue::Len(..) => Some(ArtificialField::ArrayLength),
      .                               Rvalue::Discriminant(..) => None,
      .                               _ => unreachable!(),
      .                           };
  2,208 ( 0.00%)                  self.access_place(
      .                               location,
    552 ( 0.00%)                      (place, span),
      .                               (Shallow(af), Read(ReadKind::Copy)),
      .                               LocalMutationIsAllowed::No,
      .                               flow_state,
      .                           );
    966 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
      .                               location,
      .                               InitializationRequiringAction::Use,
    966 ( 0.00%)                      (place.as_ref(), span),
      .                               flow_state,
      .                           );
      .                       }
      .           
      .                       Rvalue::BinaryOp(_bin_op, box (ref operand1, ref operand2))
      .                       | Rvalue::CheckedBinaryOp(_bin_op, box (ref operand1, ref operand2)) => {
     90 ( 0.00%)                  self.consume_operand(location, (operand1, span), flow_state);
     63 ( 0.00%)                  self.consume_operand(location, (operand2, span), flow_state);
      .                       }
      .           
      .                       Rvalue::NullaryOp(_op, _ty) => {
      .                           // nullary ops take no dynamic input; no borrowck effect.
      .                       }
      .           
      .                       Rvalue::Aggregate(ref aggregate_kind, ref operands) => {
      .                           // We need to report back the list of mutable upvars that were
      .                           // moved into the closure and subsequently used by the closure,
      .                           // in order to populate our used_mut set.
  1,173 ( 0.00%)                  match **aggregate_kind {
      .                               AggregateKind::Closure(def_id, _) | AggregateKind::Generator(def_id, _, _) => {
      .                                   let BorrowCheckResult { used_mut_upvars, .. } =
    212 ( 0.00%)                              self.infcx.tcx.mir_borrowck(def_id.expect_local());
      .                                   debug!("{:?} used_mut_upvars={:?}", def_id, used_mut_upvars);
      .                                   for field in used_mut_upvars {
      .                                       self.propagate_closure_used_mut_upvar(&operands[field.index()]);
      .                                   }
      .                               }
      .                               AggregateKind::Adt(..)
      .                               | AggregateKind::Array(..)
      .                               | AggregateKind::Tuple { .. } => (),
-- line 1350 ----------------------------------------
-- line 1448 ----------------------------------------
      .                               }
      .                               _ => propagate_closure_used_mut_place(self, place),
      .                           }
      .                       }
      .                       Operand::Constant(..) => {}
      .                   }
      .               }
      .           
 38,016 ( 0.00%)      fn consume_operand(
      .                   &mut self,
      .                   location: Location,
      .                   (operand, span): (&'cx Operand<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
 18,816 ( 0.00%)          match *operand {
    600 ( 0.00%)              Operand::Copy(place) => {
      .                           // copy of place: check if this is "copy of frozen path"
      .                           // (FIXME: see check_loans.rs)
  1,340 ( 0.00%)                  self.access_place(
      .                               location,
  1,000 ( 0.00%)                      (place, span),
      .                               (Deep, Read(ReadKind::Copy)),
      .                               LocalMutationIsAllowed::No,
      .                               flow_state,
      .                           );
      .           
      .                           // Finally, check if path was already moved.
    140 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
      .                               location,
      .                               InitializationRequiringAction::Use,
    120 ( 0.00%)                      (place.as_ref(), span),
      .                               flow_state,
      .                           );
      .                       }
  6,474 ( 0.00%)              Operand::Move(place) => {
      .                           // move of place: check if this is move of already borrowed path
 17,086 ( 0.00%)                  self.access_place(
      .                               location,
 10,790 ( 0.00%)                      (place, span),
      .                               (Deep, Write(WriteKind::Move)),
      .                               LocalMutationIsAllowed::Yes,
      .                               flow_state,
      .                           );
      .           
      .                           // Finally, check if path was already moved.
  2,640 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
      .                               location,
      .                               InitializationRequiringAction::Use,
  1,980 ( 0.00%)                      (place.as_ref(), span),
      .                               flow_state,
      .                           );
      .                       }
      .                       Operand::Constant(_) => {}
      .                   }
 25,344 ( 0.00%)      }
      .           
      .               /// Checks whether a borrow of this place is invalidated when the function
      .               /// exits
      .               fn check_for_invalidation_at_exit(
      .                   &mut self,
      .                   location: Location,
      .                   borrow: &BorrowData<'tcx>,
      .                   span: Span,
      .               ) {
      .                   debug!("check_for_invalidation_at_exit({:?})", borrow);
      2 ( 0.00%)          let place = borrow.borrowed_place;
      .                   let mut root_place = PlaceRef { local: place.local, projection: &[] };
      .           
      .                   // FIXME(nll-rfc#40): do more precise destructor tracking here. For now
      .                   // we just know that all locals are dropped at function exit (otherwise
      .                   // we'll have a memory leak) and assume that all statics have a destructor.
      .                   //
      .                   // FIXME: allow thread-locals to borrow other thread locals?
      .           
      .                   let (might_be_alive, will_be_dropped) =
     14 ( 0.00%)              if self.body.local_decls[root_place.local].is_ref_to_thread_local() {
      .                           // Thread-locals might be dropped after the function exits
      .                           // We have to dereference the outer reference because
      .                           // borrows don't conflict behind shared references.
      .                           root_place.projection = DEREF_PROJECTION;
      .                           (true, true)
      .                       } else {
      .                           (false, self.locals_are_invalidated_at_exit)
      .                       };
      .           
     10 ( 0.00%)          if !will_be_dropped {
      .                       debug!("place_is_invalidated_at_exit({:?}) - won't be dropped", place);
      .                       return;
      .                   }
      .           
      .                   let sd = if might_be_alive { Deep } else { Shallow(None) };
      .           
     24 ( 0.00%)          if places_conflict::borrow_conflicts_with_place(
      4 ( 0.00%)              self.infcx.tcx,
      .                       &self.body,
      .                       place,
      .                       borrow.kind,
      8 ( 0.00%)              root_place,
      .                       sd,
      .                       places_conflict::PlaceConflictBias::Overlap,
      .                   ) {
      .                       debug!("check_for_invalidation_at_exit({:?}): INVALID", place);
      .                       // FIXME: should be talking about the region lifetime instead
      .                       // of just a span here.
      .                       let span = self.infcx.tcx.sess.source_map().end_point(span);
      .                       self.report_borrowed_value_does_not_live_long_enough(
-- line 1553 ----------------------------------------
-- line 1573 ----------------------------------------
      .                       err.buffer(&mut self.errors_buffer);
      .                   }
      .               }
      .           
      .               fn check_activations(&mut self, location: Location, span: Span, flow_state: &Flows<'cx, 'tcx>) {
      .                   // Two-phase borrow support: For each activation that is newly
      .                   // generated at this statement, check if it interferes with
      .                   // another borrow.
 27,650 ( 0.00%)          let borrow_set = self.borrow_set.clone();
 51,223 ( 0.00%)          for &borrow_index in borrow_set.activations_at_location(location) {
      .                       let borrow = &borrow_set[borrow_index];
      .           
      .                       // only mutable borrows should be 2-phase
    630 ( 0.00%)              assert!(match borrow.kind {
      .                           BorrowKind::Shared | BorrowKind::Shallow => false,
      .                           BorrowKind::Unique | BorrowKind::Mut { .. } => true,
      .                       });
      .           
  1,512 ( 0.00%)              self.access_place(
      .                           location,
    756 ( 0.00%)                  (borrow.borrowed_place, span),
  1,134 ( 0.00%)                  (Deep, Activation(WriteKind::MutableBorrow(borrow.kind), borrow_index)),
      .                           LocalMutationIsAllowed::No,
      .                           flow_state,
      .                       );
      .                       // We do not need to call `check_if_path_or_subpath_is_moved`
      .                       // again, as we already called it when we made the
      .                       // initial reservation.
      .                   }
      .               }
-- line 1602 ----------------------------------------
-- line 1606 ----------------------------------------
      .                   location: Location,
      .                   local: Local,
      .                   place_span: (Place<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
      .                   debug!("check_if_reassignment_to_immutable_state({:?})", local);
      .           
      .                   // Check if any of the initializiations of `local` have happened yet:
  5,112 ( 0.00%)          if let Some(init_index) = self.is_local_ever_initialized(local, flow_state) {
      .                       // And, if so, report an error.
      .                       let init = &self.move_data.inits[init_index];
      .                       let span = init.span(&self.body);
      .                       self.report_illegal_reassignment(location, place_span, span, place_span.0);
      .                   }
      .               }
      .           
 49,426 ( 0.00%)      fn check_if_full_path_is_moved(
      .                   &mut self,
      .                   location: Location,
      .                   desired_action: InitializationRequiringAction,
      .                   place_span: (PlaceRef<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
      .                   let maybe_uninits = &flow_state.uninits;
      .           
-- line 1630 ----------------------------------------
-- line 1660 ----------------------------------------
      .                   // Therefore, if we seek out the *closest* prefix for which we
      .                   // have a MovePath, that should capture the initialization
      .                   // state for the place scenario.
      .                   //
      .                   // This code covers scenarios 1, 2, and 3.
      .           
      .                   debug!("check_if_full_path_is_moved place: {:?}", place_span.0);
      .                   let (prefix, mpi) = self.move_path_closest_to(place_span.0);
  3,802 ( 0.00%)          if maybe_uninits.contains(mpi) {
      .                       self.report_use_of_moved_or_uninitialized(
      .                           location,
      .                           desired_action,
      .                           (prefix, place_span.0, place_span.1),
      .                           mpi,
      .                       );
      .                   } // Only query longest prefix with a MovePath, not further
      .                   // ancestors; dataflow recurs on children when parents
      .                   // move (to support partial (re)inits).
      .                   //
      .                   // (I.e., querying parents breaks scenario 7; but may want
      .                   // to do such a query based on partial-init feature-gate.)
 30,416 ( 0.00%)      }
      .           
      .               /// Subslices correspond to multiple move paths, so we iterate through the
      .               /// elements of the base array. For each element we check
      .               ///
      .               /// * Does this element overlap with our slice.
      .               /// * Is any part of it uninitialized.
      .               fn check_if_subslice_element_is_moved(
      .                   &mut self,
-- line 1689 ----------------------------------------
-- line 1719 ----------------------------------------
      .                                       return; // don't bother finding other problems.
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   }
      .               }
      .           
 41,745 ( 0.00%)      fn check_if_path_or_subpath_is_moved(
      .                   &mut self,
      .                   location: Location,
      .                   desired_action: InitializationRequiringAction,
      .                   place_span: (PlaceRef<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
  7,590 ( 0.00%)          let maybe_uninits = &flow_state.uninits;
      .           
      .                   // Bad scenarios:
      .                   //
      .                   // 1. Move of `a.b.c`, use of `a` or `a.b`
      .                   //    partial initialization support, one might have `a.x`
      .                   //    initialized but not `a.b`.
      .                   // 2. All bad scenarios from `check_if_full_path_is_moved`
      .                   //
-- line 1742 ----------------------------------------
-- line 1743 ----------------------------------------
      .                   // OK scenarios:
      .                   //
      .                   // 3. Move of `a.b.c`, use of `a.b.d`
      .                   // 4. Uninitialized `a.x`, initialized `a.b`, use of `a.b`
      .                   // 5. Copied `(a.b: &_)`, use of `*(a.b).c`; note that `a.b`
      .                   //    must have been initialized for the use to be sound.
      .                   // 6. Move of `a.b.c` then reinit of `a.b.c.d`, use of `a.b.c.d`
      .           
 26,565 ( 0.00%)          self.check_if_full_path_is_moved(location, desired_action, place_span, flow_state);
      .           
  4,160 ( 0.00%)          if let Some((place_base, ProjectionElem::Subslice { from, to, from_end: false })) =
  3,795 ( 0.00%)              place_span.0.last_projection()
      .                   {
      .                       let place_ty = place_base.ty(self.body(), self.infcx.tcx);
      .                       if let ty::Array(..) = place_ty.ty.kind() {
      .                           self.check_if_subslice_element_is_moved(
      .                               location,
      .                               desired_action,
      .                               (place_base, place_span.1),
      .                               maybe_uninits,
-- line 1762 ----------------------------------------
-- line 1772 ----------------------------------------
      .                   //
      .                   // (Distinct from handling of scenarios 1+2+4 above because
      .                   // `place` does not interfere with suffixes of its prefixes,
      .                   // e.g., `a.b.c` does not interfere with `a.b.d`)
      .                   //
      .                   // This code covers scenario 1.
      .           
      .                   debug!("check_if_path_or_subpath_is_moved place: {:?}", place_span.0);
 15,180 ( 0.00%)          if let Some(mpi) = self.move_path_for_place(place_span.0) {
 11,700 ( 0.00%)              let uninit_mpi = self
      .                           .move_data
      .                           .find_in_move_path_or_its_descendants(mpi, |mpi| maybe_uninits.contains(mpi));
      .           
  5,850 ( 0.00%)              if let Some(uninit_mpi) = uninit_mpi {
      .                           self.report_use_of_moved_or_uninitialized(
      .                               location,
      .                               desired_action,
      .                               (place_span.0, place_span.0, place_span.1),
      .                               uninit_mpi,
      .                           );
      .                           return; // don't bother finding other problems.
      .                       }
      .                   }
 30,360 ( 0.00%)      }
      .           
      .               /// Currently MoveData does not store entries for all places in
      .               /// the input MIR. For example it will currently filter out
      .               /// places that are Copy; thus we do not track places of shared
      .               /// reference type. This routine will walk up a place along its
      .               /// prefixes, searching for a foundational place that *is*
      .               /// tracked in the MoveData.
      .               ///
      .               /// An Err result includes a tag indicated why the search failed.
      .               /// Currently this can only occur if the place is built off of a
      .               /// static variable, as we do not track those in the MoveData.
      .               fn move_path_closest_to(&mut self, place: PlaceRef<'tcx>) -> (PlaceRef<'tcx>, MovePathIndex) {
 49,426 ( 0.00%)          match self.move_data.rev_lookup.find(place) {
      .                       LookupResult::Parent(Some(mpi)) | LookupResult::Exact(mpi) => {
      .                           (self.move_data.move_paths[mpi].place.as_ref(), mpi)
      .                       }
      .                       LookupResult::Parent(None) => panic!("should have move path for every Local"),
      .                   }
      .               }
      .           
      .               fn move_path_for_place(&mut self, place: PlaceRef<'tcx>) -> Option<MovePathIndex> {
      .                   // If returns None, then there is no move path corresponding
      .                   // to a direct owner of `place` (which means there is nothing
      .                   // that borrowck tracks for its analysis).
      .           
 34,203 ( 0.00%)          match self.move_data.rev_lookup.find(place) {
      .                       LookupResult::Parent(_) => None,
      .                       LookupResult::Exact(mpi) => Some(mpi),
      .                   }
      .               }
      .           
      .               fn check_if_assigned_path_is_moved(
      .                   &mut self,
      .                   location: Location,
      .                   (place, span): (Place<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
      .                   debug!("check_if_assigned_path_is_moved place: {:?}", place);
      .           
      .                   // None case => assigning to `x` does not require `x` be initialized.
      8 ( 0.00%)          for (place_base, elem) in place.iter_projections().rev() {
     52 ( 0.00%)              match elem {
      .                           ProjectionElem::Index(_/*operand*/) |
      .                           ProjectionElem::ConstantIndex { .. } |
      .                           // assigning to P[i] requires P to be valid.
      .                           ProjectionElem::Downcast(_/*adt_def*/, _/*variant_idx*/) =>
      .                           // assigning to (P->variant) is okay if assigning to `P` is okay
      .                           //
      .                           // FIXME: is this true even if P is an adt with a dtor?
      .                           { }
      .           
      .                           // assigning to (*P) requires P to be initialized
      .                           ProjectionElem::Deref => {
     49 ( 0.00%)                      self.check_if_full_path_is_moved(
      .                                   location, InitializationRequiringAction::Use,
     42 ( 0.00%)                          (place_base, span), flow_state);
      .                               // (base initialized; no need to
      .                               // recur further)
      .                               break;
      .                           }
      .           
      .                           ProjectionElem::Subslice { .. } => {
      .                               panic!("we don't allow assignments to subslices, location: {:?}",
      .                                      location);
      .                           }
      .           
      .                           ProjectionElem::Field(..) => {
      .                               // if type of `P` has a dtor, then
      .                               // assigning to `P.f` requires `P` itself
      .                               // be already initialized
      .                               let tcx = self.infcx.tcx;
      6 ( 0.00%)                      let base_ty = place_base.ty(self.body(), tcx).ty;
     18 ( 0.00%)                      match base_ty.kind() {
     36 ( 0.00%)                          ty::Adt(def, _) if def.has_dtor(tcx) => {
      .                                       self.check_if_path_or_subpath_is_moved(
      .                                           location, InitializationRequiringAction::Assignment,
      .                                           (place_base, span), flow_state);
      .           
      .                                       // (base initialized; no need to
      .                                       // recur further)
      .                                       break;
      .                                   }
-- line 1877 ----------------------------------------
-- line 1931 ----------------------------------------
      .           
      .                       // Shallow so that we'll stop at any dereference; we'll
      .                       // report errors about issues with such bases elsewhere.
      .                       let maybe_uninits = &flow_state.uninits;
      .           
      .                       // Find the shortest uninitialized prefix you can reach
      .                       // without going over a Deref.
      .                       let mut shortest_uninit_seen = None;
    133 ( 0.00%)              for prefix in this.prefixes(base, PrefixSet::Shallow) {
      8 ( 0.00%)                  let mpi = match this.move_path_for_place(prefix) {
      .                               Some(mpi) => mpi,
      .                               None => continue,
      .                           };
      .           
      1 ( 0.00%)                  if maybe_uninits.contains(mpi) {
      .                               debug!(
      .                                   "check_parent_of_field updating shortest_uninit_seen from {:?} to {:?}",
      .                                   shortest_uninit_seen,
      .                                   Some((prefix, mpi))
      .                               );
      .                               shortest_uninit_seen = Some((prefix, mpi));
      .                           } else {
      .                               debug!("check_parent_of_field {:?} is definitely initialized", (prefix, mpi));
      .                           }
      .                       }
      .           
     18 ( 0.00%)              if let Some((prefix, mpi)) = shortest_uninit_seen {
      .                           // Check for a reassignment into an uninitialized field of a union (for example,
      .                           // after a move out). In this case, do not report an error here. There is an
      .                           // exception, if this is the first assignment into the union (that is, there is
      .                           // no move out from an earlier location) then this is an attempt at initialization
      .                           // of the union - we should error in that case.
      .                           let tcx = this.infcx.tcx;
      .                           if base.ty(this.body(), tcx).ty.is_union() {
      .                               if this.move_data.path_map[mpi].iter().any(|moi| {
-- line 1965 ----------------------------------------
-- line 1979 ----------------------------------------
      .                   }
      .               }
      .           
      .               /// Checks the permissions for the given place and read or write kind
      .               ///
      .               /// Returns `true` if an error is reported.
      .               fn check_access_permissions(
      .                   &mut self,
 23,782 ( 0.00%)          (place, span): (Place<'tcx>, Span),
      .                   kind: ReadOrWrite,
      .                   is_local_mutation_allowed: LocalMutationIsAllowed,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .                   location: Location,
      .               ) -> bool {
      .                   debug!(
      .                       "check_access_permissions({:?}, {:?}, is_local_mutation_allowed: {:?})",
      .                       place, kind, is_local_mutation_allowed
      .                   );
      .           
      .                   let error_access;
      .                   let the_place_err;
      .           
190,475 ( 0.01%)          match kind {
      .                       Reservation(WriteKind::MutableBorrow(
      .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
      .                       ))
      .                       | Write(WriteKind::MutableBorrow(
      .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
      .                       )) => {
  1,770 ( 0.00%)                  let is_local_mutation_allowed = match borrow_kind {
      .                               BorrowKind::Unique => LocalMutationIsAllowed::Yes,
      .                               BorrowKind::Mut { .. } => is_local_mutation_allowed,
      .                               BorrowKind::Shared | BorrowKind::Shallow => unreachable!(),
      .                           };
  1,239 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
      .                               Ok(root_place) => {
      .                                   self.add_used_mut(root_place, flow_state);
      .                                   return false;
      .                               }
      .                               Err(place_err) => {
      .                                   error_access = AccessKind::MutableBorrow;
      .                                   the_place_err = place_err;
      .                               }
      .                           }
      .                       }
      .                       Reservation(WriteKind::Mutate) | Write(WriteKind::Mutate) => {
 17,171 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
      .                               Ok(root_place) => {
      .                                   self.add_used_mut(root_place, flow_state);
      .                                   return false;
      .                               }
      .                               Err(place_err) => {
      .                                   error_access = AccessKind::Mutate;
      .                                   the_place_err = place_err;
      .                               }
-- line 2033 ----------------------------------------
-- line 2041 ----------------------------------------
      .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
      .                       )
      .                       | Write(
      .                           WriteKind::Move
      .                           | WriteKind::StorageDeadOrDrop
      .                           | WriteKind::MutableBorrow(BorrowKind::Shared)
      .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
      .                       ) => {
 16,046 ( 0.00%)                  if let (Err(_), true) = (
 56,161 ( 0.00%)                      self.is_mutable(place.as_ref(), is_local_mutation_allowed),
      .                               self.errors_buffer.is_empty(),
      .                           ) {
      .                               // rust-lang/rust#46908: In pure NLL mode this code path should be
      .                               // unreachable, but we use `delay_span_bug` because we can hit this when
      .                               // dereferencing a non-Copy raw pointer *and* have `-Ztreat-err-as-bug`
      .                               // enabled. We don't want to ICE for that case, as other errors will have
      .                               // been emitted (#52262).
      .                               self.infcx.tcx.sess.delay_span_bug(
-- line 2058 ----------------------------------------
-- line 2094 ----------------------------------------
      .                   if previously_initialized {
      .                       self.report_mutability_error(place, span, the_place_err, error_access, location);
      .                       true
      .                   } else {
      .                       false
      .                   }
      .               }
      .           
 16,795 ( 0.00%)      fn is_local_ever_initialized(
      .                   &self,
      .                   local: Local,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) -> Option<InitIndex> {
 10,077 ( 0.00%)          let mpi = self.move_data.rev_lookup.find_local(local);
  3,359 ( 0.00%)          let ii = &self.move_data.init_path_map[mpi];
 14,227 ( 0.00%)          for &index in ii {
  8,300 ( 0.00%)              if flow_state.ever_inits.contains(index) {
      .                           return Some(index);
      .                       }
      .                   }
      .                   None
 13,436 ( 0.00%)      }
      .           
      .               /// Adds the place into the used mutable variables set
 10,520 ( 0.00%)      fn add_used_mut(&mut self, root_place: RootPlace<'tcx>, flow_state: &Flows<'cx, 'tcx>) {
      .                   match root_place {
  7,890 ( 0.00%)              RootPlace { place_local: local, place_projection: [], is_local_mutation_allowed } => {
      .                           // If the local may have been initialized, and it is now currently being
      .                           // mutated, then it is justified to be annotated with the `mut`
      .                           // keyword, since the mutation may be a possible reassignment.
  5,137 ( 0.00%)                  if is_local_mutation_allowed != LocalMutationIsAllowed::Yes
  7,521 ( 0.00%)                      && self.is_local_ever_initialized(local, flow_state).is_some()
      .                           {
      .                               self.used_mut.insert(local);
      .                           }
      .                       }
      .                       RootPlace {
      .                           place_local: _,
      .                           place_projection: _,
      .                           is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
-- line 2133 ----------------------------------------
-- line 2140 ----------------------------------------
      .                           if let Some(field) = self.is_upvar_field_projection(PlaceRef {
      .                               local: place_local,
      .                               projection: place_projection,
      .                           }) {
      .                               self.used_mut_upvars.push(field);
      .                           }
      .                       }
      .                   }
  9,872 ( 0.00%)      }
      .           
      .               /// Whether this value can be written or borrowed mutably.
      .               /// Returns the root place if the place passed in is a projection.
122,177 ( 0.01%)      fn is_mutable(
      .                   &self,
      .                   place: PlaceRef<'tcx>,
      .                   is_local_mutation_allowed: LocalMutationIsAllowed,
      .               ) -> Result<RootPlace<'tcx>, PlaceRef<'tcx>> {
      .                   debug!("is_mutable: place={:?}, is_local...={:?}", place, is_local_mutation_allowed);
 34,229 ( 0.00%)          match place.last_projection() {
      .                       None => {
 10,653 ( 0.00%)                  let local = &self.body.local_decls[place.local];
 31,959 ( 0.00%)                  match local.mutability {
  4,516 ( 0.00%)                      Mutability::Not => match is_local_mutation_allowed {
 13,548 ( 0.00%)                          LocalMutationIsAllowed::Yes => Ok(RootPlace {
      .                                       place_local: place.local,
      .                                       place_projection: place.projection,
      .                                       is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
      .                                   }),
      .                                   LocalMutationIsAllowed::ExceptUpvars => Ok(RootPlace {
      .                                       place_local: place.local,
      .                                       place_projection: place.projection,
      .                                       is_local_mutation_allowed: LocalMutationIsAllowed::ExceptUpvars,
      .                                   }),
      .                                   LocalMutationIsAllowed::No => Err(place),
      .                               },
 16,790 ( 0.00%)                      Mutability::Mut => Ok(RootPlace {
      .                                   place_local: place.local,
      .                                   place_projection: place.projection,
      .                                   is_local_mutation_allowed,
      .                               }),
      .                           }
      .                       }
      .                       Some((place_base, elem)) => {
  1,362 ( 0.00%)                  match elem {
      .                               ProjectionElem::Deref => {
    246 ( 0.00%)                          let base_ty = place_base.ty(self.body(), self.infcx.tcx).ty;
      .           
      .                                   // Check the kind of deref to decide
    738 ( 0.00%)                          match base_ty.kind() {
      .                                       ty::Ref(_, _, mutbl) => {
    246 ( 0.00%)                                  match mutbl {
      .                                               // Shared borrowed data is never mutable
      .                                               hir::Mutability::Not => Err(place),
      .                                               // Mutably borrowed data is mutable, but only if we have a
      .                                               // unique path to the `&mut`
      .                                               hir::Mutability::Mut => {
    246 ( 0.00%)                                          let mode = match self.is_upvar_field_projection(place) {
      .                                                       Some(field) if self.upvars[field.index()].by_ref => {
      .                                                           is_local_mutation_allowed
      .                                                       }
      .                                                       _ => LocalMutationIsAllowed::Yes,
      .                                                   };
      .           
    738 ( 0.00%)                                          self.is_mutable(place_base, mode)
      .                                               }
      .                                           }
      .                                       }
      .                                       ty::RawPtr(tnm) => {
      .                                           match tnm.mutbl {
      .                                               // `*const` raw pointers are not mutable
      .                                               hir::Mutability::Not => Err(place),
      .                                               // `*mut` raw pointers are always mutable, regardless of
-- line 2211 ----------------------------------------
-- line 2228 ----------------------------------------
      .                               // All other projections are owned by their base path, so mutable if
      .                               // base path is mutable
      .                               ProjectionElem::Field(..)
      .                               | ProjectionElem::Index(..)
      .                               | ProjectionElem::ConstantIndex { .. }
      .                               | ProjectionElem::Subslice { .. }
      .                               | ProjectionElem::Downcast(..) => {
      .                                   let upvar_field_projection = self.is_upvar_field_projection(place);
    662 ( 0.00%)                          if let Some(field) = upvar_field_projection {
      .                                       let upvar = &self.upvars[field.index()];
      .                                       debug!(
      .                                           "is_mutable: upvar.mutability={:?} local_mutation_is_allowed={:?} \
      .                                            place={:?}, place_base={:?}",
      .                                           upvar, is_local_mutation_allowed, place, place_base
      .                                       );
     15 ( 0.00%)                              match (upvar.place.mutability, is_local_mutation_allowed) {
      .                                           (
      .                                               Mutability::Not,
      .                                               LocalMutationIsAllowed::No
      .                                               | LocalMutationIsAllowed::ExceptUpvars,
      .                                           ) => Err(place),
      .                                           (Mutability::Not, LocalMutationIsAllowed::Yes)
      .                                           | (Mutability::Mut, _) => {
      .                                               // Subtle: this is an upvar
-- line 2251 ----------------------------------------
-- line 2270 ----------------------------------------
      .                                               // fn main() {
      .                                               //     let var = Vec::new();
      .                                               //     foo(move || {
      .                                               //         var.push(1);
      .                                               //     });
      .                                               // }
      .                                               // ```
      .                                               let _ =
     27 ( 0.00%)                                          self.is_mutable(place_base, is_local_mutation_allowed)?;
      .                                               Ok(RootPlace {
      .                                                   place_local: place.local,
      .                                                   place_projection: place.projection,
      .                                                   is_local_mutation_allowed,
      .                                               })
      .                                           }
      .                                       }
      .                                   } else {
      .                                       self.is_mutable(place_base, is_local_mutation_allowed)
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   }
 88,856 ( 0.01%)      }
      .           
      .               /// If `place` is a field projection, and the field is being projected from a closure type,
      .               /// then returns the index of the field being projected. Note that this closure will always
      .               /// be `self` in the current MIR, because that is the only time we directly access the fields
      .               /// of a closure type.
      .               fn is_upvar_field_projection(&self, place_ref: PlaceRef<'tcx>) -> Option<Field> {
  4,086 ( 0.00%)          path_utils::is_upvar_field_projection(self.infcx.tcx, &self.upvars, place_ref, self.body())
      .               }
      .           }
      .           
      .           /// The degree of overlap between 2 places for borrow-checking.
      .           enum Overlap {
      .               /// The places might partially overlap - in this case, we give
      .               /// up and say that they might conflict. This occurs when
      .               /// different fields of a union are borrowed. For example,
-- line 2308 ----------------------------------------

345,469 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir                 

-- line 186 ----------------------------------------
        .           /// // use the values stored in map
        .           /// ```
        .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
        .               pub(crate) hash_builder: S,
        .               pub(crate) table: RawTable<(K, V), A>,
        .           }
        .           
        .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
      296 ( 0.00%)      fn clone(&self) -> Self {
    1,086 ( 0.00%)          HashMap {
        .                       hash_builder: self.hash_builder.clone(),
      206 ( 0.00%)              table: self.table.clone(),
        .                   }
      333 ( 0.00%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   self.table.clone_from(&source.table);
        .           
        .                   // Update hash_builder only if we successfully cloned all elements.
        .                   self.hash_builder.clone_from(&source.hash_builder);
        .               }
        .           }
        .           
        .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        8 ( 0.00%)  pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash,
        .               S: BuildHasher,
        .           {
   71,617 ( 0.00%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
       12 ( 0.00%)  }
        .           
        .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: ?Sized + Eq,
        .           {
  188,228 ( 0.01%)      move |x| k.eq(x.0.borrow())
        .           }
        .           
        .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: ?Sized + Eq,
        .           {
  338,739 ( 0.02%)      move |x| k.eq(x.borrow())
        .           }
        .           
        .           #[cfg(not(feature = "nightly"))]
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
        .               use core::hash::Hasher;
        .               let mut state = hash_builder.build_hasher();
        .               val.hash(&mut state);
        .               state.finish()
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           #[cfg_attr(feature = "inline-more", inline)]
        2 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash + ?Sized,
        .               S: BuildHasher,
        .           {
    4,280 ( 0.00%)      hash_builder.hash_one(val)
        4 ( 0.00%)  }
        .           
        .           #[cfg(not(feature = "nightly"))]
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
        .           where
        .               K: Hash,
        .               S: BuildHasher,
        .           {
-- line 274 ----------------------------------------
-- line 280 ----------------------------------------
        .           
        .           #[cfg(feature = "nightly")]
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
        .           where
        .               K: Hash,
        .               S: BuildHasher,
        .           {
   88,869 ( 0.01%)      hash_builder.hash_one(val)
        .           }
        .           
        .           #[cfg(feature = "ahash")]
        .           impl<K, V> HashMap<K, V, DefaultHashBuilder> {
        .               /// Creates an empty `HashMap`.
        .               ///
        .               /// The hash map is initially created with a capacity of 0, so it will not allocate until it
        .               /// is first inserted into.
-- line 296 ----------------------------------------
-- line 366 ----------------------------------------
        .               ///
        .               /// let s = DefaultHashBuilder::default();
        .               /// let mut map = HashMap::with_hasher(s);
        .               /// map.insert(1, 2);
        .               /// ```
        .               ///
        .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
        .               #[cfg_attr(feature = "inline-more", inline)]
       32 ( 0.00%)      pub const fn with_hasher(hash_builder: S) -> Self {
   98,568 ( 0.01%)          Self {
        .                       hash_builder,
        8 ( 0.00%)              table: RawTable::new(),
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
        .               /// to hash the keys.
        .               ///
        .               /// The hash map will be able to hold at least `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the hash map will not allocate.
        .               ///
        .               /// Warning: `hash_builder` is normally randomly generated, and
-- line 387 ----------------------------------------
-- line 436 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               /// use hashbrown::hash_map::DefaultHashBuilder;
        .               ///
        .               /// let s = DefaultHashBuilder::default();
        .               /// let mut map = HashMap::with_hasher(s);
        .               /// map.insert(1, 2);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
       32 ( 0.00%)      pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
      239 ( 0.00%)          Self {
        .                       hash_builder,
        8 ( 0.00%)              table: RawTable::new_in(alloc),
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
        .               /// to hash the keys. It will be allocated with the given allocator.
        .               ///
        .               /// The hash map will be able to hold at least `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the hash map will not allocate.
        .               ///
        .               /// Warning: `hash_builder` is normally randomly generated, and
-- line 457 ----------------------------------------
-- line 662 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// assert_eq!(a.len(), 0);
        .               /// a.insert(1, "a");
        .               /// assert_eq!(a.len(), 1);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        8 ( 0.00%)      pub fn len(&self) -> usize {
   10,279 ( 0.00%)          self.table.len()
        8 ( 0.00%)      }
        .           
        .               /// Returns `true` if the map contains no elements.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// assert!(a.is_empty());
        .               /// a.insert(1, "a");
        .               /// assert!(!a.is_empty());
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        8 ( 0.00%)      pub fn is_empty(&self) -> bool {
   45,926 ( 0.00%)          self.len() == 0
       16 ( 0.00%)      }
        .           
        .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
        .               /// allocated memory for reuse.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
-- line 697 ----------------------------------------
-- line 790 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// a.insert(1, "a");
        .               /// a.clear();
        .               /// assert!(a.is_empty());
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        6 ( 0.00%)      pub fn clear(&mut self) {
        .                   self.table.clear();
        6 ( 0.00%)      }
        .           
        .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
        .               /// The map cannot be used after calling this.
        .               /// The iterator element type is `K`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 808 ----------------------------------------
-- line 865 ----------------------------------------
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
        .               /// let mut map: HashMap<&str, i32> = HashMap::new();
        .               /// map.reserve(10);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
       16 ( 0.00%)      pub fn reserve(&mut self, additional: usize) {
       16 ( 0.00%)          self.table
        8 ( 0.00%)              .reserve(additional, make_hasher::<K, _, V, S>(&self.hash_builder));
        8 ( 0.00%)      }
        .           
        .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
        .               /// in the given `HashMap<K,V>`. The collection may reserve more space to avoid
        .               /// frequent reallocations.
        .               ///
        .               /// # Errors
        .               ///
        .               /// If the capacity overflows, or the allocator reports a failure, then an error
-- line 884 ----------------------------------------
-- line 963 ----------------------------------------
        .               /// }
        .               ///
        .               /// assert_eq!(letters[&'s'], 2);
        .               /// assert_eq!(letters[&'t'], 3);
        .               /// assert_eq!(letters[&'u'], 1);
        .               /// assert_eq!(letters.get(&'y'), None);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
    2,392 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
        .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
        .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
      430 ( 0.00%)              Entry::Occupied(OccupiedEntry {
        .                           hash,
        .                           key: Some(key),
        .                           elem,
        .                           table: self,
        .                       })
        .                   } else {
    2,560 ( 0.00%)              Entry::Vacant(VacantEntry {
        .                           hash,
        .                           key,
        .                           table: self,
        .                       })
        .                   }
    2,990 ( 0.00%)      }
        .           
        .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
        .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
  375,759 ( 0.02%)          match self.get_inner(k) {
        .                       Some(&(_, ref v)) => Some(v),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Returns the key-value pair corresponding to the supplied key.
        .               ///
        .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1086 ----------------------------------------
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match self.get_inner(k) {
        .                       Some(&(ref key, ref value)) => Some((key, value)),
        .                       None => None,
        .                   }
        .               }
        .           
        .               #[inline]
       60 ( 0.00%)      fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
  594,659 ( 0.04%)          if self.table.is_empty() {
       12 ( 0.00%)              None
        .                   } else {
        1 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
        .                       self.table.get(hash, equivalent_key(k))
        .                   }
       36 ( 0.00%)      }
        .           
        .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
        .               ///
        .               /// The supplied key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
        .               ///
        .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1113 ----------------------------------------
-- line 1155 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// assert_eq!(map.contains_key(&1), true);
        .               /// assert_eq!(map.contains_key(&2), false);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
  195,677 ( 0.01%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
       60 ( 0.00%)          self.get_inner(k).is_some()
  247,788 ( 0.01%)      }
        .           
        .               /// Returns a mutable reference to the value corresponding to the key.
        .               ///
        .               /// The key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
        .               ///
        .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// if let Some(x) = map.get_mut(&1) {
        .               ///     *x = "b";
        .               /// }
        .               /// assert_eq!(map[&1], "b");
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
      539 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
    2,982 ( 0.00%)          match self.get_inner_mut(k) {
        .                       Some(&mut (_, ref mut v)) => Some(v),
        .                       None => None,
        .                   }
    1,078 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
    1,006 ( 0.00%)          if self.table.is_empty() {
        .                       None
        .                   } else {
        .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
    1,820 ( 0.00%)              self.table.get_mut(hash, equivalent_key(k))
        .                   }
        .               }
        .           
        .               /// Attempts to get mutable references to `N` values in the map at once.
        .               ///
        .               /// Returns an array of length `N` with the results of each query. For soundness, at most one
        .               /// mutable reference will be returned to any value. `None` will be returned if any of the
        .               /// keys are duplicates or missing.
-- line 1223 ----------------------------------------
-- line 1495 ----------------------------------------
        .               /// assert_eq!(map.insert(37, "a"), None);
        .               /// assert_eq!(map.is_empty(), false);
        .               ///
        .               /// map.insert(37, "b");
        .               /// assert_eq!(map.insert(37, "c"), Some("b"));
        .               /// assert_eq!(map[&37], "c");
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
2,110,974 ( 0.13%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
        .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
    2,632 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
        4 ( 0.00%)              Some(mem::replace(item, v))
        .                   } else {
1,016,660 ( 0.06%)              self.table
1,427,810 ( 0.09%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
  131,404 ( 0.01%)              None
        .                   }
1,929,875 ( 0.11%)      }
        .           
        .               /// Insert a key-value pair into the map without checking
        .               /// if the key already exists in the map.
        .               ///
        .               /// Returns a reference to the key and value just inserted.
        .               ///
        .               /// This operation is safe if a key does not exist in the map.
        .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// assert_eq!(map.remove(&1), Some("a"));
        .               /// assert_eq!(map.remove(&1), None);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
   29,875 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
  443,476 ( 0.03%)          match self.remove_entry(k) {
   10,363 ( 0.00%)              Some((_, v)) => Some(v),
   26,111 ( 0.00%)              None => None,
        .                   }
   68,828 ( 0.00%)      }
        .           
        .               /// Removes a key from the map, returning the stored key and value if the
        .               /// key was previously in the map.
        .               ///
        .               /// The key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
        .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
  139,469 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
        .               }
        .           }
        .           
        .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
        .               /// Creates a raw entry builder for the HashMap.
        .               ///
        .               /// Raw entries provide the lowest level of control for searching and
        .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 1737 ----------------------------------------
        .           
        .           impl<K, V, S, A> Default for HashMap<K, V, S, A>
        .           where
        .               S: Default,
        .               A: Default + Allocator + Clone,
        .           {
        .               /// Creates an empty `HashMap<K, V, S, A>`, with the `Default` value for the hasher and allocator.
        .               #[cfg_attr(feature = "inline-more", inline)]
       12 ( 0.00%)      fn default() -> Self {
       44 ( 0.00%)          Self::with_hasher_in(Default::default(), Default::default())
        8 ( 0.00%)      }
        .           }
        .           
        .           impl<K, Q: ?Sized, V, S, A> Index<&Q> for HashMap<K, V, S, A>
        .           where
        .               K: Eq + Hash + Borrow<Q>,
        .               Q: Eq + Hash,
        .               S: BuildHasher,
        .               A: Allocator + Clone,
-- line 1755 ----------------------------------------
-- line 2069 ----------------------------------------
        .           where
        .               F: FnMut(&K, &mut V) -> bool,
        .               A: Allocator + Clone,
        .           {
        .               type Item = (K, V);
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<Self::Item> {
       15 ( 0.00%)          self.inner.next(&mut self.f)
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   (0, self.inner.iter.size_hint().1)
        .               }
        .           }
        .           
-- line 2085 ----------------------------------------
-- line 2095 ----------------------------------------
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub(super) fn next<F>(&mut self, f: &mut F) -> Option<(K, V)>
        .               where
        .                   F: FnMut(&K, &mut V) -> bool,
        .               {
        .                   unsafe {
        .                       for item in &mut self.iter {
        .                           let &mut (ref key, ref mut value) = item.as_mut();
       30 ( 0.00%)                  if f(key, value) {
        5 ( 0.00%)                      return Some(self.table.remove(item));
        .                           }
        .                       }
        .                   }
        .                   None
        .               }
        .           }
        .           
        .           /// A mutable iterator over the values of a `HashMap`.
-- line 2112 ----------------------------------------
-- line 2209 ----------------------------------------
        .               /// Creates a `RawEntryMut` from the given key and its hash.
        .               #[inline]
        .               #[allow(clippy::wrong_self_convention)]
        .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Eq,
        .               {
1,960,066 ( 0.12%)          self.from_hash(hash, equivalent(k))
        .               }
        .           }
        .           
        .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
        .               /// Creates a `RawEntryMut` from the given hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
4,903,706 ( 0.29%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   for<'b> F: FnMut(&'b K) -> bool,
        .               {
        .                   self.search(hash, is_match)
5,319,127 ( 0.32%)      }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   for<'b> F: FnMut(&'b K) -> bool,
        .               {
  557,944 ( 0.03%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
3,201,696 ( 0.19%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
        .                           elem,
        .                           table: &mut self.map.table,
        .                           hash_builder: &self.map.hash_builder,
        .                       }),
  250,261 ( 0.01%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
        .                           table: &mut self.map.table,
        .                           hash_builder: &self.map.hash_builder,
        .                       }),
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
        .               {
        .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
        .                   self.from_key_hashed_nocheck(hash, k)
        .               }
        .           
        .               /// Access an entry by a key and its hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
  762,840 ( 0.05%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Eq,
        .               {
1,037,502 ( 0.06%)          self.from_hash(hash, equivalent(k))
1,403,300 ( 0.08%)      }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
        .               where
        .                   F: FnMut(&K) -> bool,
        .               {
1,375,000 ( 0.08%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
        .                       Some(&(ref key, ref value)) => Some((key, value)),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Access an entry by hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
        .               /// and returns a mutable reference to it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::shadow_unrelated)]
        .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
        .               where
        .                   K: Hash,
        .                   S: BuildHasher,
        .               {
  413,363 ( 0.02%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
        .                       hash,
        .                       (key, value),
        .                       make_hasher::<K, _, V, S>(self.hash_builder),
        .                   );
        .                   (k, v)
        .               }
        .           
        .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
        .               /// map.insert("a", 1);
        .               /// map.insert("b", 2);
        .               /// map.insert("c", 3);
        .               ///
        .               /// // Not possible with .iter()
        .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
      756 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
   17,125 ( 0.00%)          IntoIter {
    9,571 ( 0.00%)              inner: self.table.into_iter(),
        .                   }
    2,268 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
        .               type Item = (&'a K, &'a V);
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
   63,411 ( 0.00%)          match self.inner.next() {
        .                       Some(x) => unsafe {
        .                           let r = x.as_ref();
    1,305 ( 0.00%)                  Some((&r.0, &r.1))
        .                       },
        .                       None => None,
        .                   }
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
      219 ( 0.00%)          self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V> ExactSizeIterator for Iter<'_, K, V> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn len(&self) -> usize {
        .                   self.inner.len()
        .               }
        .           }
-- line 3013 ----------------------------------------
-- line 3018 ----------------------------------------
        .               type Item = (&'a K, &'a mut V);
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<(&'a K, &'a mut V)> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match self.inner.next() {
        .                       Some(x) => unsafe {
        .                           let r = x.as_mut();
       43 ( 0.00%)                  Some((&r.0, &mut r.1))
        .                       },
        .                       None => None,
        .                   }
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
-- line 3034 ----------------------------------------
-- line 3051 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
        .               type Item = (K, V);
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<(K, V)> {
      974 ( 0.00%)          self.inner.next()
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
        .                   f.debug_list().entries(self.iter()).finish()
        .               }
        .           }
        .           
        .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
        .               type Item = &'a K;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
      513 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match self.inner.next() {
        .                       Some((k, _)) => Some(k),
        .                       None => None,
        .                   }
    1,026 ( 0.00%)      }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 3819 ----------------------------------------
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn insert(self, value: V) -> &'a mut V
        .               where
        .                   K: Hash,
        .                   S: BuildHasher,
        .               {
        .                   let table = &mut self.table.table;
      176 ( 0.00%)          let entry = table.insert_entry(
        .                       self.hash,
        .                       (self.key, value),
        .                       make_hasher::<K, _, V, S>(&self.table.hash_builder),
        .                   );
        .                   &mut entry.1
        .               }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3835 ----------------------------------------
-- line 4557 ----------------------------------------
        .           /// keys with new values returned from the iterator.
        .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
        .           where
        .               K: Eq + Hash,
        .               S: BuildHasher,
        .               A: Allocator + Clone,
        .           {
        .               #[cfg_attr(feature = "inline-more", inline)]
   19,897 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
        .                   // Keys may be already present or show multiple times in the iterator.
        .                   // Reserve the entire hint lower bound if the map is empty.
        .                   // Otherwise reserve half the hint (rounded up), so the map
        .                   // will only resize twice in the worst case.
   15,680 ( 0.00%)          let iter = iter.into_iter();
    9,793 ( 0.00%)          let reserve = if self.is_empty() {
       16 ( 0.00%)              iter.size_hint().0
        .                   } else {
      675 ( 0.00%)              (iter.size_hint().0 + 1) / 2
        .                   };
       12 ( 0.00%)          self.reserve(reserve);
       28 ( 0.00%)          iter.for_each(move |(k, v)| {
   75,045 ( 0.00%)              self.insert(k, v);
        .                   });
   13,836 ( 0.00%)      }
        .           
        .               #[inline]
        .               #[cfg(feature = "nightly")]
        .               fn extend_one(&mut self, (k, v): (K, V)) {
        .                   self.insert(k, v);
        .               }
        .           
        .               #[inline]
-- line 4588 ----------------------------------------

1,852,443 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/traversal.rs
--------------------------------------------------------------------------------
Ir               

-- line 23 ----------------------------------------
      .           pub struct Preorder<'a, 'tcx> {
      .               body: &'a Body<'tcx>,
      .               visited: BitSet<BasicBlock>,
      .               worklist: Vec<BasicBlock>,
      .               root_is_start_block: bool,
      .           }
      .           
      .           impl<'a, 'tcx> Preorder<'a, 'tcx> {
 14,510 ( 0.00%)      pub fn new(body: &'a Body<'tcx>, root: BasicBlock) -> Preorder<'a, 'tcx> {
  1,451 ( 0.00%)          let worklist = vec![root];
      .           
  4,353 ( 0.00%)          Preorder {
      .                       body,
      .                       visited: BitSet::new_empty(body.basic_blocks().len()),
  5,804 ( 0.00%)              worklist,
      .                       root_is_start_block: root == START_BLOCK,
      .                   }
 13,059 ( 0.00%)      }
      .           }
      .           
  1,616 ( 0.00%)  pub fn preorder<'a, 'tcx>(body: &'a Body<'tcx>) -> Preorder<'a, 'tcx> {
  5,474 ( 0.00%)      Preorder::new(body, START_BLOCK)
  2,424 ( 0.00%)  }
      .           
      .           impl<'a, 'tcx> Iterator for Preorder<'a, 'tcx> {
      .               type Item = (BasicBlock, &'a BasicBlockData<'tcx>);
      .           
408,430 ( 0.02%)      fn next(&mut self) -> Option<(BasicBlock, &'a BasicBlockData<'tcx>)> {
 51,129 ( 0.00%)          while let Some(idx) = self.worklist.pop() {
 51,129 ( 0.00%)              if !self.visited.insert(idx) {
      .                           continue;
      .                       }
      .           
 35,679 ( 0.00%)              let data = &self.body[idx];
      .           
178,395 ( 0.01%)              if let Some(ref term) = data.terminator {
      .                           self.worklist.extend(term.successors());
      .                       }
      .           
      .                       return Some((idx, data));
      .                   }
      .           
      .                   None
334,170 ( 0.02%)      }
      .           
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   // All the blocks, minus the number of blocks we've visited.
      .                   let upper = self.body.basic_blocks().len() - self.visited.count();
      .           
      .                   let lower = if self.root_is_start_block {
      .                       // We will visit all remaining blocks exactly once.
      .                       upper
-- line 74 ----------------------------------------
-- line 101 ----------------------------------------
      .           pub struct Postorder<'a, 'tcx> {
      .               body: &'a Body<'tcx>,
      .               visited: BitSet<BasicBlock>,
      .               visit_stack: Vec<(BasicBlock, Successors<'a>)>,
      .               root_is_start_block: bool,
      .           }
      .           
      .           impl<'a, 'tcx> Postorder<'a, 'tcx> {
 13,041 ( 0.00%)      pub fn new(body: &'a Body<'tcx>, root: BasicBlock) -> Postorder<'a, 'tcx> {
      .                   let mut po = Postorder {
      .                       body,
      .                       visited: BitSet::new_empty(body.basic_blocks().len()),
      .                       visit_stack: Vec::new(),
      .                       root_is_start_block: root == START_BLOCK,
      .                   };
      .           
      .                   let data = &po.body[root];
      .           
 13,041 ( 0.00%)          if let Some(ref term) = data.terminator {
      .                       po.visited.insert(root);
  7,452 ( 0.00%)              po.visit_stack.push((root, term.successors()));
  3,726 ( 0.00%)              po.traverse_successor();
      .                   }
      .           
      .                   po
 16,767 ( 0.00%)      }
      .           
300,657 ( 0.02%)      fn traverse_successor(&mut self) {
      .                   // This is quite a complex loop due to 1. the borrow checker not liking it much
      .                   // and 2. what exactly is going on is not clear
      .                   //
      .                   // It does the actual traversal of the graph, while the `next` method on the iterator
      .                   // just pops off of the stack. `visit_stack` is a stack containing pairs of nodes and
      .                   // iterators over the successors of those nodes. Each iteration attempts to get the next
      .                   // node from the top of the stack, then pushes that node and an iterator over the
      .                   // successors to the top of the stack. This loop only grows `visit_stack`, stopping when
-- line 136 ----------------------------------------
-- line 169 ----------------------------------------
      .                   //
      .                   // Now that the top of the stack has no successors we can traverse, each item will
      .                   // be popped off during iteration until we get back to `A`. This yields [E, D, B].
      .                   //
      .                   // When we yield `B` and call `traverse_successor`, we push `C` to the stack, but
      .                   // since we've already visited `E`, that child isn't added to the stack. The last
      .                   // two iterations yield `C` and finally `A` for a final traversal of [E, D, B, C, A]
      .                   loop {
299,709 ( 0.02%)              let bb = if let Some(&mut (_, ref mut iter)) = self.visit_stack.last_mut() {
174,582 ( 0.01%)                  if let Some(&bb) = iter.next() {
      .                               bb
      .                           } else {
      .                               break;
      .                           }
      .                       } else {
      .                           break;
      .                       };
      .           
 58,194 ( 0.00%)              if self.visited.insert(bb) {
274,575 ( 0.02%)                  if let Some(term) = &self.body[bb].terminator {
156,900 ( 0.01%)                      self.visit_stack.push((bb, term.successors()));
      .                           }
      .                       }
      .                   }
343,608 ( 0.02%)      }
      .           }
      .           
    132 ( 0.00%)  pub fn postorder<'a, 'tcx>(body: &'a Body<'tcx>) -> Postorder<'a, 'tcx> {
    132 ( 0.00%)      Postorder::new(body, START_BLOCK)
    198 ( 0.00%)  }
      .           
      .           impl<'a, 'tcx> Iterator for Postorder<'a, 'tcx> {
      .               type Item = (BasicBlock, &'a BasicBlockData<'tcx>);
      .           
 10,947 ( 0.00%)      fn next(&mut self) -> Option<(BasicBlock, &'a BasicBlockData<'tcx>)> {
      .                   let next = self.visit_stack.pop();
 41,088 ( 0.00%)          if next.is_some() {
 80,379 ( 0.00%)              self.traverse_successor();
      .                   }
      .           
 41,088 ( 0.00%)          next.map(|(bb, _)| (bb, &self.body[bb]))
 18,245 ( 0.00%)      }
      .           
    400 ( 0.00%)      fn size_hint(&self) -> (usize, Option<usize>) {
      .                   // All the blocks, minus the number of blocks we've visited.
  6,720 ( 0.00%)          let upper = self.body.basic_blocks().len() - self.visited.count();
      .           
  6,720 ( 0.00%)          let lower = if self.root_is_start_block {
      .                       // We will visit all remaining blocks exactly once.
      .                       upper
      .                   } else {
      .                       self.visit_stack.len()
      .                   };
      .           
    240 ( 0.00%)          (lower, Some(upper))
    560 ( 0.00%)      }
      .           }
      .           
      .           /// Reverse postorder traversal of a graph
      .           ///
      .           /// Reverse postorder is the reverse order of a postorder traversal.
      .           /// This is different to a preorder traversal and represents a natural
      .           /// linearization of control-flow.
      .           ///
-- line 232 ----------------------------------------
-- line 253 ----------------------------------------
      .           pub struct ReversePostorder<'a, 'tcx> {
      .               body: &'a Body<'tcx>,
      .               blocks: Vec<BasicBlock>,
      .               idx: usize,
      .           }
      .           
      .           impl<'a, 'tcx> ReversePostorder<'a, 'tcx> {
      .               pub fn new(body: &'a Body<'tcx>, root: BasicBlock) -> ReversePostorder<'a, 'tcx> {
  3,594 ( 0.00%)          let blocks: Vec<_> = Postorder::new(body, root).map(|(bb, _)| bb).collect();
      .           
  1,797 ( 0.00%)          let len = blocks.len();
      .           
  8,985 ( 0.00%)          ReversePostorder { body, blocks, idx: len }
      .               }
      .           }
      .           
 10,782 ( 0.00%)  pub fn reverse_postorder<'a, 'tcx>(body: &'a Body<'tcx>) -> ReversePostorder<'a, 'tcx> {
      .               ReversePostorder::new(body, START_BLOCK)
  8,985 ( 0.00%)  }
      .           
      .           impl<'a, 'tcx> Iterator for ReversePostorder<'a, 'tcx> {
      .               type Item = (BasicBlock, &'a BasicBlockData<'tcx>);
      .           
 39,302 ( 0.00%)      fn next(&mut self) -> Option<(BasicBlock, &'a BasicBlockData<'tcx>)> {
157,208 ( 0.01%)          if self.idx == 0 {
      .                       return None;
      .                   }
 75,010 ( 0.00%)          self.idx -= 1;
      .           
      .                   self.blocks.get(self.idx).map(|&bb| (bb, &self.body[bb]))
 78,604 ( 0.00%)      }
      .           
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   (self.idx, Some(self.idx))
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> ExactSizeIterator for ReversePostorder<'a, 'tcx> {}
      .           
-- line 291 ----------------------------------------
-- line 295 ----------------------------------------
      .           /// This is clearer than writing `preorder` in cases where the order doesn't matter.
      .           pub fn reachable<'a, 'tcx>(
      .               body: &'a Body<'tcx>,
      .           ) -> impl 'a + Iterator<Item = (BasicBlock, &'a BasicBlockData<'tcx>)> {
      .               preorder(body)
      .           }
      .           
      .           /// Returns a `BitSet` containing all basic blocks reachable from the `START_BLOCK`.
  3,858 ( 0.00%)  pub fn reachable_as_bitset<'tcx>(body: &Body<'tcx>) -> BitSet<BasicBlock> {
      .               let mut iter = preorder(body);
      .               (&mut iter).for_each(drop);
  2,572 ( 0.00%)      iter.visited
  3,858 ( 0.00%)  }

411,034 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/traversal.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir                 

-- line 5 ----------------------------------------
        .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
        .           unsafe impl GlobalAlloc for System {
        .               #[inline]
        .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
        .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
        .                   // So only rely on MIN_ALIGN if size >= align.
        .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
        .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
2,926,192 ( 0.17%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
2,194,644 ( 0.13%)              libc::malloc(layout.size()) as *mut u8
        .                   } else {
        .                       #[cfg(target_os = "macos")]
        .                       {
        .                           if layout.align() > (1 << 31) {
        .                               return ptr::null_mut();
        .                           }
        .                       }
        .                       aligned_malloc(&layout)
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
        .                   // See the comment above in `alloc` for why this check looks the way it does.
   44,500 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
   66,750 ( 0.00%)              libc::calloc(layout.size(), 1) as *mut u8
        .                   } else {
        .                       let ptr = self.alloc(layout);
        .                       if !ptr.is_null() {
        .                           ptr::write_bytes(ptr, 0, layout.size());
        .                       }
        .                       ptr
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
  742,661 ( 0.04%)          libc::free(ptr as *mut libc::c_void)
        .               }
        .           
        .               #[inline]
        .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
  193,092 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
  386,184 ( 0.02%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
        .                   } else {
        .                       realloc_fallback(self, ptr, layout, new_size)
        .                   }
        .               }
        .           }
        .           
        .           cfg_if::cfg_if! {
        .               if #[cfg(any(
-- line 56 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mut_ptr.rs
--------------------------------------------------------------------------------
Ir                  

-- line 28 ----------------------------------------
         .               /// ```
         .               /// let mut s = [1, 2, 3];
         .               /// let ptr: *mut u32 = s.as_mut_ptr();
         .               /// assert!(!ptr.is_null());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_is_null", issue = "74939")]
         .               #[inline]
   488,752 ( 0.03%)      pub const fn is_null(self) -> bool {
         .                   // Compare via a cast to a thin pointer, so fat pointers are only
         .                   // considering their "data" part for null-ness.
   488,752 ( 0.03%)          (self as *mut u8).guaranteed_eq(null_mut())
   488,752 ( 0.03%)      }
         .           
         .               /// Casts to a pointer of another type.
         .               #[stable(feature = "ptr_cast", since = "1.38.0")]
         .               #[rustc_const_stable(feature = "const_ptr_cast", since = "1.38.0")]
         .               #[inline(always)]
         .               pub const fn cast<U>(self) -> *mut U {
         .                   self as _
         .               }
-- line 48 ----------------------------------------
-- line 299 ----------------------------------------
         .               #[inline(always)]
         .               pub const unsafe fn offset(self, count: isize) -> *mut T
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the caller must uphold the safety contract for `offset`.
         .                   // The obtained pointer is valid for writes since the caller must
         .                   // guarantee that it points to the same allocated object as `self`.
11,989,692 ( 0.71%)          unsafe { intrinsics::offset(self, count) as *mut T }
         .               }
         .           
         .               /// Calculates the offset from a pointer using wrapping arithmetic.
         .               /// `count` is in units of T; e.g., a `count` of 3 represents a pointer
         .               /// offset of `3 * size_of::<T>()` bytes.
         .               ///
         .               /// # Safety
         .               ///
-- line 315 ----------------------------------------
-- line 360 ----------------------------------------
         .               #[must_use = "returns a new pointer rather than modifying its argument"]
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline(always)]
         .               pub const fn wrapping_offset(self, count: isize) -> *mut T
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the `arith_offset` intrinsic has no prerequisites to be called.
       165 ( 0.00%)          unsafe { intrinsics::arith_offset(self, count) as *mut T }
         .               }
         .           
         .               /// Returns `None` if the pointer is null, or else returns a unique reference to
         .               /// the value wrapped in `Some`. If the value may be uninitialized, [`as_uninit_mut`]
         .               /// must be used instead.
         .               ///
         .               /// For the shared counterpart see [`as_ref`].
         .               ///
-- line 376 ----------------------------------------
-- line 492 ----------------------------------------
         .               /// affect the outcome, but just the performance.
         .               /// The consequences of using this method to make runtime and compile-time code behave
         .               /// differently have not been explored. This method should not be used to introduce such
         .               /// differences, and it should also not be stabilized before we have a better understanding
         .               /// of this issue.
         .               #[unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
         .               #[rustc_const_unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
         .               #[inline]
   366,564 ( 0.02%)      pub const fn guaranteed_eq(self, other: *mut T) -> bool
         .               where
         .                   T: Sized,
         .               {
   733,825 ( 0.04%)          intrinsics::ptr_guaranteed_eq(self as *const _, other as *const _)
   488,752 ( 0.03%)      }
         .           
         .               /// Returns whether two pointers are guaranteed to be unequal.
         .               ///
         .               /// At runtime this function behaves like `self != other`.
         .               /// However, in some contexts (e.g., compile-time evaluation),
         .               /// it is not always possible to determine the inequality of two pointers, so this function may
         .               /// spuriously return `false` for pointers that later actually turn out to be unequal.
         .               /// But when it returns `true`, the pointers are guaranteed to be unequal.
-- line 513 ----------------------------------------
-- line 683 ----------------------------------------
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline(always)]
         .               pub const unsafe fn add(self, count: usize) -> Self
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the caller must uphold the safety contract for `offset`.
         .                   unsafe { self.offset(count as isize) }
        12 ( 0.00%)      }
         .           
         .               /// Calculates the offset from a pointer (convenience for
         .               /// `.offset((count as isize).wrapping_neg())`).
         .               ///
         .               /// `count` is in units of T; e.g., a `count` of 3 represents a pointer
         .               /// offset of `3 * size_of::<T>()` bytes.
         .               ///
         .               /// # Safety
-- line 699 ----------------------------------------
-- line 1055 ----------------------------------------
         .               ///
         .               /// See [`ptr::drop_in_place`] for safety concerns and examples.
         .               ///
         .               /// [`ptr::drop_in_place`]: crate::ptr::drop_in_place()
         .               #[stable(feature = "pointer_methods", since = "1.26.0")]
         .               #[inline(always)]
         .               pub unsafe fn drop_in_place(self) {
         .                   // SAFETY: the caller must uphold the safety contract for `drop_in_place`.
       154 ( 0.00%)          unsafe { drop_in_place(self) }
         .               }
         .           
         .               /// Overwrites a memory location with the given value without reading or
         .               /// dropping the old value.
         .               ///
         .               /// See [`ptr::write`] for safety concerns and examples.
         .               ///
         .               /// [`ptr::write`]: crate::ptr::write()
-- line 1071 ----------------------------------------
-- line 1072 ----------------------------------------
         .               #[stable(feature = "pointer_methods", since = "1.26.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_write", issue = "86302")]
         .               #[inline(always)]
         .               pub const unsafe fn write(self, val: T)
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the caller must uphold the safety contract for `write`.
        15 ( 0.00%)          unsafe { write(self, val) }
         .               }
         .           
         .               /// Invokes memset on the specified pointer, setting `count * size_of::<T>()`
         .               /// bytes of memory starting at `self` to `val`.
         .               ///
         .               /// See [`ptr::write_bytes`] for safety concerns and examples.
         .               ///
         .               /// [`ptr::write_bytes`]: crate::ptr::write_bytes()
-- line 1088 ----------------------------------------
-- line 1416 ----------------------------------------
         .               }
         .           }
         .           
         .           // Equality for pointers
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: ?Sized> PartialEq for *mut T {
         .               #[inline(always)]
         .               fn eq(&self, other: &*mut T) -> bool {
    23,810 ( 0.00%)          *self == *other
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: ?Sized> Eq for *mut T {}
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: ?Sized> Ord for *mut T {
-- line 1432 ----------------------------------------

   360,851 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mut_ptr.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs
--------------------------------------------------------------------------------
Ir               

-- line 44 ----------------------------------------
      .           /// Convert from a specific kind of undo to the more general UndoLog
      .           impl<'tcx> From<Instantiate> for UndoLog<'tcx> {
      .               fn from(l: Instantiate) -> Self {
      .                   UndoLog::Values(sv::UndoLog::Other(l))
      .               }
      .           }
      .           
      .           impl<'tcx> Rollback<UndoLog<'tcx>> for TypeVariableStorage<'tcx> {
 61,721 ( 0.00%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
259,519 ( 0.02%)          match undo {
 49,086 ( 0.00%)              UndoLog::EqRelation(undo) => self.eq_relations.reverse(undo),
 25,898 ( 0.00%)              UndoLog::SubRelation(undo) => self.sub_relations.reverse(undo),
 48,458 ( 0.00%)              UndoLog::Values(undo) => self.values.reverse(undo),
      .                   }
123,442 ( 0.01%)      }
      .           }
      .           
      .           pub struct TypeVariableStorage<'tcx> {
      .               values: sv::SnapshotVecStorage<Delegate>,
      .           
      .               /// Two variables are unified in `eq_relations` when we have a
      .               /// constraint `?X == ?Y`. This table also stores, for each key,
      .               /// the known value.
-- line 66 ----------------------------------------
-- line 136 ----------------------------------------
      .               DynReturnFn,
      .               LatticeVariable,
      .           }
      .           
      .           pub(crate) struct TypeVariableData {
      .               origin: TypeVariableOrigin,
      .           }
      .           
307,756 ( 0.02%)  #[derive(Copy, Clone, Debug)]
      .           pub enum TypeVariableValue<'tcx> {
      .               Known { value: Ty<'tcx> },
      .               Unknown { universe: ty::UniverseIndex },
      .           }
      .           
      .           impl<'tcx> TypeVariableValue<'tcx> {
      .               /// If this value is known, returns the type it is known to be.
      .               /// Otherwise, `None`.
      .               pub fn known(&self) -> Option<Ty<'tcx>> {
179,876 ( 0.01%)          match *self {
      .                       TypeVariableValue::Unknown { .. } => None,
      .                       TypeVariableValue::Known { value } => Some(value),
      .                   }
      .               }
      .           
      .               pub fn is_unknown(&self) -> bool {
      .                   match *self {
      .                       TypeVariableValue::Unknown { .. } => true,
-- line 162 ----------------------------------------
-- line 166 ----------------------------------------
      .           }
      .           
      .           pub(crate) struct Instantiate;
      .           
      .           pub(crate) struct Delegate;
      .           
      .           impl<'tcx> TypeVariableStorage<'tcx> {
      .               pub fn new() -> TypeVariableStorage<'tcx> {
 28,263 ( 0.00%)          TypeVariableStorage {
      .                       values: sv::SnapshotVecStorage::new(),
      .                       eq_relations: ut::UnificationTableStorage::new(),
      .                       sub_relations: ut::UnificationTableStorage::new(),
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub(crate) fn with_log<'a>(
-- line 182 ----------------------------------------
-- line 188 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> TypeVariableTable<'_, 'tcx> {
      .               /// Returns the origin that was given when `vid` was created.
      .               ///
      .               /// Note that this function does not return care whether
      .               /// `vid` has been unified with something else or not.
      .               pub fn var_origin(&self, vid: ty::TyVid) -> &TypeVariableOrigin {
    378 ( 0.00%)          &self.storage.values.get(vid.as_usize()).origin
      .               }
      .           
      .               /// Records that `a == b`, depending on `dir`.
      .               ///
      .               /// Precondition: neither `a` nor `b` are known.
      .               pub fn equate(&mut self, a: ty::TyVid, b: ty::TyVid) {
      .                   debug_assert!(self.probe(a).is_unknown());
      .                   debug_assert!(self.probe(b).is_unknown());
  2,303 ( 0.00%)          self.eq_relations().union(a, b);
  1,974 ( 0.00%)          self.sub_relations().union(a, b);
      .               }
      .           
      .               /// Records that `a <: b`, depending on `dir`.
      .               ///
      .               /// Precondition: neither `a` nor `b` are known.
      .               pub fn sub(&mut self, a: ty::TyVid, b: ty::TyVid) {
      .                   debug_assert!(self.probe(a).is_unknown());
      .                   debug_assert!(self.probe(b).is_unknown());
  1,917 ( 0.00%)          self.sub_relations().union(a, b);
      .               }
      .           
      .               /// Instantiates `vid` with the type `ty`.
      .               ///
      .               /// Precondition: `vid` must not have been previously instantiated.
 85,990 ( 0.01%)      pub fn instantiate(&mut self, vid: ty::TyVid, ty: Ty<'tcx>) {
      .                   let vid = self.root_var(vid);
      .                   debug_assert!(self.probe(vid).is_unknown());
      .                   debug_assert!(
      .                       self.eq_relations().probe_value(vid).is_unknown(),
      .                       "instantiating type variable `{:?}` twice: new-value = {:?}, old-value={:?}",
      .                       vid,
      .                       ty,
      .                       self.eq_relations().probe_value(vid)
      .                   );
120,386 ( 0.01%)          self.eq_relations().union_value(vid, TypeVariableValue::Known { value: ty });
      .           
      .                   // Hack: we only need this so that `types_escaping_snapshot`
      .                   // can see what has been unified; see the Delegate impl for
      .                   // more details.
      .                   self.undo_log.push(Instantiate);
 85,990 ( 0.01%)      }
      .           
      .               /// Creates a new type variable.
      .               ///
      .               /// - `diverging`: indicates if this is a "diverging" type
      .               ///   variable, e.g.,  one created as the type of a `return`
      .               ///   expression. The code in this module doesn't care if a
      .               ///   variable is diverging, but the main Rust type-checker will
      .               ///   sometimes "unify" such variables with the `!` or `()` types.
      .               /// - `origin`: indicates *why* the type variable was created.
      .               ///   The code in this module doesn't care, but it can be useful
      .               ///   for improving error messages.
105,960 ( 0.01%)      pub fn new_var(
      .                   &mut self,
      .                   universe: ty::UniverseIndex,
      .                   origin: TypeVariableOrigin,
      .               ) -> ty::TyVid {
158,940 ( 0.01%)          let eq_key = self.eq_relations().new_key(TypeVariableValue::Unknown { universe });
      .           
 88,300 ( 0.01%)          let sub_key = self.sub_relations().new_key(());
 17,660 ( 0.00%)          assert_eq!(eq_key.vid, sub_key);
      .           
158,940 ( 0.01%)          let index = self.values().push(TypeVariableData { origin });
 70,640 ( 0.00%)          assert_eq!(eq_key.vid.as_u32(), index as u32);
      .           
      .                   debug!("new_var(index={:?}, universe={:?}, origin={:?}", eq_key.vid, universe, origin,);
      .           
      .                   eq_key.vid
123,620 ( 0.01%)      }
      .           
      .               /// Returns the number of type variables created thus far.
      .               pub fn num_vars(&self) -> usize {
    845 ( 0.00%)          self.storage.values.len()
      .               }
      .           
      .               /// Returns the "root" variable of `vid` in the `eq_relations`
      .               /// equivalence table. All type variables that have been equated
      .               /// will yield the same root variable (per the union-find
      .               /// algorithm), so `root_var(a) == root_var(b)` implies that `a ==
      .               /// b` (transitively).
      .               pub fn root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
 65,061 ( 0.00%)          self.eq_relations().find(vid).vid
      .               }
      .           
      .               /// Returns the "root" variable of `vid` in the `sub_relations`
      .               /// equivalence table. All type variables that have been are
      .               /// related via equality or subtyping will yield the same root
      .               /// variable (per the union-find algorithm), so `sub_root_var(a)
      .               /// == sub_root_var(b)` implies that:
      .               ///
      .               ///     exists X. (a <: X || X <: a) && (b <: X || X <: b)
    352 ( 0.00%)      pub fn sub_root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
 53,346 ( 0.00%)          self.sub_relations().find(vid)
    704 ( 0.00%)      }
      .           
      .               /// Returns `true` if `a` and `b` have same "sub-root" (i.e., exists some
      .               /// type X such that `forall i in {a, b}. (i <: X || X <: i)`.
      .               pub fn sub_unified(&mut self, a: ty::TyVid, b: ty::TyVid) -> bool {
      .                   self.sub_root_var(a) == self.sub_root_var(b)
      .               }
      .           
      .               /// Retrieves the type to which `vid` has been instantiated, if
      .               /// any.
681,870 ( 0.04%)      pub fn probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
      .                   self.inlined_probe(vid)
681,870 ( 0.04%)      }
      .           
      .               /// An always-inlined variant of `probe`, for very hot call sites.
      .               #[inline(always)]
      .               pub fn inlined_probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
409,668 ( 0.02%)          self.eq_relations().inlined_probe_value(vid)
      .               }
      .           
      .               /// If `t` is a type-inference variable, and it has been
      .               /// instantiated, then return the with which it was
      .               /// instantiated. Otherwise, returns `t`.
      .               pub fn replace_if_possible(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
175,810 ( 0.01%)          match *t.kind() {
121,858 ( 0.01%)              ty::Infer(ty::TyVar(v)) => match self.probe(v) {
      .                           TypeVariableValue::Unknown { .. } => t,
      .                           TypeVariableValue::Known { value } => value,
      .                       },
      .                       _ => t,
      .                   }
      .               }
      .           
      .               #[inline]
-- line 323 ----------------------------------------
-- line 324 ----------------------------------------
      .               fn values(
      .                   &mut self,
      .               ) -> sv::SnapshotVec<Delegate, &mut Vec<TypeVariableData>, &mut InferCtxtUndoLogs<'tcx>> {
      .                   self.storage.values.with_log(self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn eq_relations(&mut self) -> super::UnificationTable<'_, 'tcx, TyVidEqKey<'tcx>> {
586,974 ( 0.03%)          self.storage.eq_relations.with_log(self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn sub_relations(&mut self) -> super::UnificationTable<'_, 'tcx, ty::TyVid> {
 37,369 ( 0.00%)          self.storage.sub_relations.with_log(self.undo_log)
      .               }
      .           
      .               /// Returns a range of the type variables created during the snapshot.
  4,225 ( 0.00%)      pub fn vars_since_snapshot(
      .                   &mut self,
      .                   value_count: usize,
      .               ) -> (Range<TyVid>, Vec<TypeVariableOrigin>) {
      .                   let range = TyVid::from_usize(value_count)..TyVid::from_usize(self.num_vars());
  5,070 ( 0.00%)          (
      .                       range.start..range.end,
      .                       (range.start.as_usize()..range.end.as_usize())
      .                           .map(|index| self.storage.values.get(index).origin)
      .                           .collect(),
      .                   )
  5,070 ( 0.00%)      }
      .           
      .               /// Returns indices of all variables that are not yet
      .               /// instantiated.
      .               pub fn unsolved_variables(&mut self) -> Vec<ty::TyVid> {
      .                   (0..self.storage.values.len())
      .                       .filter_map(|i| {
      .                           let vid = ty::TyVid::from_usize(i);
 27,940 ( 0.00%)                  match self.probe(vid) {
      .                               TypeVariableValue::Unknown { .. } => Some(vid),
      .                               TypeVariableValue::Known { .. } => None,
      .                           }
      .                       })
      .                       .collect()
      .               }
      .           }
      .           
-- line 368 ----------------------------------------
-- line 391 ----------------------------------------
      .           /// These structs (a newtyped TyVid) are used as the unification key
      .           /// for the `eq_relations`; they carry a `TypeVariableValue` along
      .           /// with them.
      .           #[derive(Copy, Clone, Debug, PartialEq, Eq)]
      .           pub(crate) struct TyVidEqKey<'tcx> {
      .               vid: ty::TyVid,
      .           
      .               // in the table, we map each ty-vid to one of these:
403,915 ( 0.02%)      phantom: PhantomData<TypeVariableValue<'tcx>>,
      .           }
      .           
      .           impl<'tcx> From<ty::TyVid> for TyVidEqKey<'tcx> {
      .               #[inline] // make this function eligible for inlining - it is quite hot.
      .               fn from(vid: ty::TyVid) -> Self {
      .                   TyVidEqKey { vid, phantom: PhantomData }
      .               }
      .           }
-- line 407 ----------------------------------------
-- line 419 ----------------------------------------
      .                   "TyVidEqKey"
      .               }
      .           }
      .           
      .           impl<'tcx> ut::UnifyValue for TypeVariableValue<'tcx> {
      .               type Error = ut::NoError;
      .           
      .               fn unify_values(value1: &Self, value2: &Self) -> Result<Self, ut::NoError> {
 70,437 ( 0.00%)          match (value1, value2) {
      .                       // We never equate two type variables, both of which
      .                       // have known types.  Instead, we recursively equate
      .                       // those types.
      .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Known { .. }) => {
      .                           bug!("equating two type variables, both of which have known types")
      .                       }
      .           
      .                       // If one side is known, prefer that one.
      .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Unknown { .. }) => Ok(*value1),
      .                       (&TypeVariableValue::Unknown { .. }, &TypeVariableValue::Known { .. }) => Ok(*value2),
      .           
      .                       // If both sides are *unknown*, it hardly matters, does it?
      .                       (
    329 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe1 },
    329 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe2 },
      .                       ) => {
      .                           // If we unify two unbound variables, ?T and ?U, then whatever
      .                           // value they wind up taking (which must be the same value) must
      .                           // be nameable by both universes. Therefore, the resulting
      .                           // universe is the minimum of the two universes, because that is
      .                           // the one which contains the fewest names in scope.
      .                           let universe = cmp::min(universe1, universe2);
  1,316 ( 0.00%)                  Ok(TypeVariableValue::Unknown { universe })
      .                       }
      .                   }
      .               }
      .           }

 40,516 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 208 ----------------------------------------
        .               /// There is no built-in impl. There may be some other
        .               /// candidate (a where-clause or user-defined impl).
        .               None,
        .               /// It is unknown whether there is an impl.
        .               Ambiguous,
        .           }
        .           
        .           impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {
   71,778 ( 0.00%)      pub fn new(infcx: &'cx InferCtxt<'cx, 'tcx>) -> SelectionContext<'cx, 'tcx> {
  454,255 ( 0.03%)          SelectionContext {
        .                       infcx,
   70,773 ( 0.00%)              freshener: infcx.freshener_keep_static(),
        .                       intercrate: false,
        .                       intercrate_ambiguity_causes: None,
        .                       allow_negative_impls: false,
        .                       query_mode: TraitQueryMode::Standard,
        .                   }
   59,815 ( 0.00%)      }
        .           
        .               pub fn intercrate(infcx: &'cx InferCtxt<'cx, 'tcx>) -> SelectionContext<'cx, 'tcx> {
      207 ( 0.00%)          SelectionContext {
        .                       infcx,
       26 ( 0.00%)              freshener: infcx.freshener_keep_static(),
        .                       intercrate: true,
        .                       intercrate_ambiguity_causes: None,
        .                       allow_negative_impls: false,
        .                       query_mode: TraitQueryMode::Standard,
        .                   }
        .               }
        .           
        .               pub fn with_negative(
-- line 238 ----------------------------------------
-- line 245 ----------------------------------------
        .                       freshener: infcx.freshener_keep_static(),
        .                       intercrate: false,
        .                       intercrate_ambiguity_causes: None,
        .                       allow_negative_impls,
        .                       query_mode: TraitQueryMode::Standard,
        .                   }
        .               }
        .           
   20,272 ( 0.00%)      pub fn with_query_mode(
        .                   infcx: &'cx InferCtxt<'cx, 'tcx>,
        .                   query_mode: TraitQueryMode,
        .               ) -> SelectionContext<'cx, 'tcx> {
        .                   debug!(?query_mode, "with_query_mode");
   40,544 ( 0.00%)          SelectionContext {
        .                       infcx,
    2,534 ( 0.00%)              freshener: infcx.freshener_keep_static(),
        .                       intercrate: false,
        .                       intercrate_ambiguity_causes: None,
        .                       allow_negative_impls: false,
        .                       query_mode,
        .                   }
   15,204 ( 0.00%)      }
        .           
        .               /// Enables tracking of intercrate ambiguity causes. These are
        .               /// used in coherence to give improved diagnostics. We don't do
        .               /// this until we detect a coherence error because it can lead to
        .               /// false overflow results (#47139) and because it costs
        .               /// computation time.
        .               pub fn enable_tracking_intercrate_ambiguity_causes(&mut self) {
        .                   assert!(self.intercrate);
        .                   assert!(self.intercrate_ambiguity_causes.is_none());
        1 ( 0.00%)          self.intercrate_ambiguity_causes = Some(vec![]);
        .                   debug!("selcx: enable_tracking_intercrate_ambiguity_causes");
        .               }
        .           
        .               /// Gets the intercrate ambiguity causes collected since tracking
        .               /// was enabled and disables tracking at the same time. If
        .               /// tracking is not enabled, just returns an empty vector.
        .               pub fn take_intercrate_ambiguity_causes(&mut self) -> Vec<IntercrateAmbiguityCause> {
        4 ( 0.00%)          assert!(self.intercrate);
        .                   self.intercrate_ambiguity_causes.take().unwrap_or_default()
        .               }
        .           
        .               pub fn infcx(&self) -> &'cx InferCtxt<'cx, 'tcx> {
  560,877 ( 0.03%)          self.infcx
   10,519 ( 0.00%)      }
        .           
        .               pub fn tcx(&self) -> TyCtxt<'tcx> {
1,231,930 ( 0.07%)          self.infcx.tcx
        .               }
        .           
        .               pub fn is_intercrate(&self) -> bool {
   11,363 ( 0.00%)          self.intercrate
        .               }
        .           
        .               ///////////////////////////////////////////////////////////////////////////
        .               // Selection
        .               //
        .               // The selection phase tries to identify *how* an obligation will
        .               // be resolved. For example, it will identify which impl or
        .               // parameter bound is to be used. The process can be inconclusive
-- line 305 ----------------------------------------
-- line 309 ----------------------------------------
        .               // 1. If no applicable impl or parameter bound can be found.
        .               // 2. If the output type parameters in the obligation do not match
        .               //    those specified by the impl/bound. For example, if the obligation
        .               //    is `Vec<Foo>: Iterable<Bar>`, but the impl specifies
        .               //    `impl<T> Iterable<T> for Vec<T>`, than an error would result.
        .           
        .               /// Attempts to satisfy the obligation. If successful, this will affect the surrounding
        .               /// type environment by performing unification.
   64,470 ( 0.00%)      #[instrument(level = "debug", skip(self))]
   82,890 ( 0.00%)      pub fn select(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .               ) -> SelectionResult<'tcx, Selection<'tcx>> {
   67,014 ( 0.00%)          let candidate = match self.select_from_obligation(obligation) {
        .                       Err(SelectionError::Overflow) => {
        .                           // In standard mode, overflow must have been caught and reported
        .                           // earlier.
        .                           assert!(self.query_mode == TraitQueryMode::Canonical);
        .                           return Err(SelectionError::Overflow);
        .                       }
        .                       Err(SelectionError::Ambiguous(_)) => {
        .                           return Ok(None);
        .                       }
        .                       Err(e) => {
   17,500 ( 0.00%)                  return Err(e);
        .                       }
        .                       Ok(None) => {
    5,820 ( 0.00%)                  return Ok(None);
        .                       }
   35,988 ( 0.00%)              Ok(Some(candidate)) => candidate,
        .                   };
        .           
   60,168 ( 0.00%)          match self.confirm_candidate(obligation, candidate) {
        .                       Err(SelectionError::Overflow) => {
        .                           assert!(self.query_mode == TraitQueryMode::Canonical);
        .                           Err(SelectionError::Overflow)
        .                       }
    1,222 ( 0.00%)              Err(e) => Err(e),
        .                       Ok(candidate) => {
        .                           debug!(?candidate, "confirmed");
   70,848 ( 0.00%)                  Ok(Some(candidate))
        .                       }
        .                   }
        .               }
        .           
   92,100 ( 0.01%)      crate fn select_from_obligation(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .               ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {
        .                   debug_assert!(!obligation.predicate.has_escaping_bound_vars());
        .           
        .                   let pec = &ProvisionalEvaluationCache::default();
        .                   let stack = self.push_stack(TraitObligationStackList::empty(pec), obligation);
        .           
   18,420 ( 0.00%)          self.candidate_from_obligation(&stack)
   82,890 ( 0.00%)      }
        .           
        .               ///////////////////////////////////////////////////////////////////////////
        .               // EVALUATION
        .               //
        .               // Tests whether an obligation can be selected or whether an impl
        .               // can be applied to particular types. It skips the "confirmation"
        .               // step and hence completely ignores output type parameters.
        .               //
-- line 372 ----------------------------------------
-- line 374 ----------------------------------------
        .               // we can be sure it does not.
        .           
        .               /// Evaluates whether the obligation `obligation` can be satisfied (by any means).
        .               pub fn predicate_may_hold_fatal(&mut self, obligation: &PredicateObligation<'tcx>) -> bool {
        .                   debug!(?obligation, "predicate_may_hold_fatal");
        .           
        .                   // This fatal query is a stopgap that should only be used in standard mode,
        .                   // where we do not expect overflow to be propagated.
        8 ( 0.00%)          assert!(self.query_mode == TraitQueryMode::Standard);
        .           
       40 ( 0.00%)          self.evaluate_root_obligation(obligation)
        .                       .expect("Overflow should be caught earlier in standard query mode")
        .                       .may_apply()
        .               }
        .           
        .               /// Evaluates whether the obligation `obligation` can be satisfied
        .               /// and returns an `EvaluationResult`. This is meant for the
        .               /// *initial* call.
    5,068 ( 0.00%)      pub fn evaluate_root_obligation(
        .                   &mut self,
        .                   obligation: &PredicateObligation<'tcx>,
        .               ) -> Result<EvaluationResult, OverflowError> {
        .                   self.evaluation_probe(|this| {
    7,626 ( 0.00%)              this.evaluate_predicate_recursively(
        .                           TraitObligationStackList::empty(&ProvisionalEvaluationCache::default()),
        .                           obligation.clone(),
        .                       )
        .                   })
    5,068 ( 0.00%)      }
        .           
        .               fn evaluation_probe(
        .                   &mut self,
        .                   op: impl FnOnce(&mut Self) -> Result<EvaluationResult, OverflowError>,
        .               ) -> Result<EvaluationResult, OverflowError> {
  215,118 ( 0.01%)          self.infcx.probe(|snapshot| -> Result<EvaluationResult, OverflowError> {
    5,084 ( 0.00%)              let result = op(self)?;
        .           
  152,768 ( 0.01%)              match self.infcx.leak_check(true, snapshot) {
        .                           Ok(()) => {}
        .                           Err(_) => return Ok(EvaluatedToErr),
        .                       }
        .           
  109,120 ( 0.01%)              match self.infcx.region_constraints_added_in_snapshot(snapshot) {
        .                           None => Ok(result),
        .                           Some(_) => Ok(result.max(EvaluatedToOkModuloRegions)),
        .                       }
        .                   })
        .               }
        .           
        .               /// Evaluates the predicates in `predicates` recursively. Note that
        .               /// this applies projections in the predicates, and therefore
        .               /// is run within an inference probe.
  362,980 ( 0.02%)      #[instrument(skip(self, stack), level = "debug")]
        .               fn evaluate_predicates_recursively<'o, I>(
        .                   &mut self,
        .                   stack: TraitObligationStackList<'o, 'tcx>,
        .                   predicates: I,
        .               ) -> Result<EvaluationResult, OverflowError>
        .               where
        .                   I: IntoIterator<Item = PredicateObligation<'tcx>> + std::fmt::Debug,
        .               {
        .                   let mut result = EvaluatedToOk;
  433,340 ( 0.03%)          for obligation in predicates {
  143,684 ( 0.01%)              let eval = self.evaluate_predicate_recursively(stack, obligation.clone())?;
   71,842 ( 0.00%)              if let EvaluatedToErr = eval {
        .                           // fast-path - EvaluatedToErr is the top of the lattice,
        .                           // so we don't need to look on the other predicates.
        .                           return Ok(EvaluatedToErr);
        .                       } else {
        .                           result = cmp::max(result, eval);
        .                       }
        .                   }
        .                   Ok(result)
        .               }
        .           
  384,630 ( 0.02%)      #[instrument(
        .                   level = "debug",
        .                   skip(self, previous_stack),
        .                   fields(previous_stack = ?previous_stack.head())
  346,167 ( 0.02%)      )]
        .               fn evaluate_predicate_recursively<'o>(
        .                   &mut self,
        .                   previous_stack: TraitObligationStackList<'o, 'tcx>,
        .                   obligation: PredicateObligation<'tcx>,
        .               ) -> Result<EvaluationResult, OverflowError> {
        .                   // `previous_stack` stores a `TraitObligation`, while `obligation` is
        .                   // a `PredicateObligation`. These are distinct types, so we can't
        .                   // use any `Option` combinator method that would force them to be
        .                   // the same.
   76,926 ( 0.00%)          match previous_stack.head() {
   71,810 ( 0.00%)              Some(h) => self.check_recursion_limit(&obligation, h.obligation)?,
    2,558 ( 0.00%)              None => self.check_recursion_limit(&obligation, &obligation)?,
        .                   }
        .           
  230,778 ( 0.01%)          let result = ensure_sufficient_stack(|| {
   38,463 ( 0.00%)              let bound_predicate = obligation.predicate.kind();
  384,630 ( 0.02%)              match bound_predicate.skip_binder() {
        .                           ty::PredicateKind::Trait(t) => {
        .                               let t = bound_predicate.rebind(t);
        .                               debug_assert!(!t.has_escaping_bound_vars());
        .                               let obligation = obligation.with(t);
  575,205 ( 0.03%)                      self.evaluate_trait_predicate_recursively(previous_stack, obligation)
        .                           }
        .           
        .                           ty::PredicateKind::Subtype(p) => {
        .                               let p = bound_predicate.rebind(p);
        .                               // Does this code ever run?
      225 ( 0.00%)                      match self.infcx.subtype_predicate(&obligation.cause, obligation.param_env, p) {
        .                                   Some(Ok(InferOk { mut obligations, .. })) => {
        .                                       self.add_depth(obligations.iter_mut(), obligation.recursion_depth);
        .                                       self.evaluate_predicates_recursively(
        .                                           previous_stack,
        .                                           obligations.into_iter(),
        .                                       )
        .                                   }
        .                                   Some(Err(_)) => Ok(EvaluatedToErr),
-- line 489 ----------------------------------------
-- line 522 ----------------------------------------
        .                               None => Ok(EvaluatedToAmbig),
        .                           },
        .           
        .                           ty::PredicateKind::TypeOutlives(pred) => {
        .                               // A global type with no late-bound regions can only
        .                               // contain the "'static" lifetime (any other lifetime
        .                               // would either be late-bound or local), so it is guaranteed
        .                               // to outlive any other lifetime
       68 ( 0.00%)                      if pred.0.is_global() && !pred.0.has_late_bound_regions() {
        .                                   Ok(EvaluatedToOk)
        .                               } else {
        .                                   Ok(EvaluatedToOkModuloRegions)
        .                               }
        .                           }
        .           
        .                           ty::PredicateKind::RegionOutlives(..) => {
        .                               // We do not consider region relationships when evaluating trait matches.
-- line 538 ----------------------------------------
-- line 545 ----------------------------------------
        .                               } else {
        .                                   Ok(EvaluatedToErr)
        .                               }
        .                           }
        .           
        .                           ty::PredicateKind::Projection(data) => {
        .                               let data = bound_predicate.rebind(data);
        .                               let project_obligation = obligation.with(data);
      234 ( 0.00%)                      match project::poly_project_and_unify_type(self, &project_obligation) {
      190 ( 0.00%)                          Ok(Ok(Some(mut subobligations))) => {
        .                                       'compute_res: {
        .                                           // If we've previously marked this projection as 'complete', thne
        .                                           // use the final cached result (either `EvaluatedToOk` or
        .                                           // `EvaluatedToOkModuloRegions`), and skip re-evaluating the
        .                                           // sub-obligations.
      152 ( 0.00%)                                  if let Some(key) =
      342 ( 0.00%)                                      ProjectionCacheKey::from_poly_projection_predicate(self, data)
        .                                           {
      296 ( 0.00%)                                      if let Some(cached_res) = self
        .                                                   .infcx
        .                                                   .inner
        .                                                   .borrow_mut()
        .                                                   .projection_cache()
        .                                                   .is_complete(key)
        .                                               {
        .                                                   break 'compute_res Ok(cached_res);
        .                                               }
        .                                           }
        .           
       72 ( 0.00%)                                  self.add_depth(
        .                                               subobligations.iter_mut(),
       72 ( 0.00%)                                      obligation.recursion_depth,
        .                                           );
       72 ( 0.00%)                                  let res = self.evaluate_predicates_recursively(
      108 ( 0.00%)                                      previous_stack,
      180 ( 0.00%)                                      subobligations,
        .                                           );
      144 ( 0.00%)                                  if let Ok(res) = res {
       72 ( 0.00%)                                      if res == EvaluatedToOk || res == EvaluatedToOkModuloRegions {
      120 ( 0.00%)                                          if let Some(key) =
       30 ( 0.00%)                                              ProjectionCacheKey::from_poly_projection_predicate(
      210 ( 0.00%)                                                  self, data,
        .                                                       )
        .                                                   {
        .                                                       // If the result is something that we can cache, then mark this
        .                                                       // entry as 'complete'. This will allow us to skip evaluating the
        .                                                       // suboligations at all the next time we evaluate the projection
        .                                                       // predicate.
      203 ( 0.00%)                                              self.infcx
        .                                                           .inner
        .                                                           .borrow_mut()
        .                                                           .projection_cache()
        .                                                           .complete(key, res);
        .                                                   }
        .                                               }
        .                                           }
        .                                           res
-- line 601 ----------------------------------------
-- line 603 ----------------------------------------
        .                                   }
        .                                   Ok(Ok(None)) => Ok(EvaluatedToAmbig),
        .                                   Ok(Err(project::InProgress)) => Ok(EvaluatedToRecur),
        .                                   Err(_) => Ok(EvaluatedToErr),
        .                               }
        .                           }
        .           
        .                           ty::PredicateKind::ClosureKind(_, closure_substs, kind) => {
      150 ( 0.00%)                      match self.infcx.closure_kind(closure_substs) {
        .                                   Some(closure_kind) => {
       90 ( 0.00%)                              if closure_kind.extends(kind) {
        .                                           Ok(EvaluatedToOk)
        .                                       } else {
        .                                           Ok(EvaluatedToErr)
        .                                       }
        .                                   }
        .                                   None => Ok(EvaluatedToAmbig),
        .                               }
        .                           }
-- line 621 ----------------------------------------
-- line 693 ----------------------------------------
        .                                       }
        .                                   }
        .                               }
        .                           }
        .                           ty::PredicateKind::TypeWellFormedFromEnv(..) => {
        .                               bug!("TypeWellFormedFromEnv is only used for chalk")
        .                           }
        .                       }
   38,463 ( 0.00%)          });
        .           
        .                   debug!("finished: {:?} from {:?}", result, obligation);
        .           
        .                   result
        .               }
        .           
  805,287 ( 0.05%)      #[instrument(skip(self, previous_stack), level = "debug")]
        .               fn evaluate_trait_predicate_recursively<'o>(
        .                   &mut self,
        .                   previous_stack: TraitObligationStackList<'o, 'tcx>,
        .                   mut obligation: TraitObligation<'tcx>,
        .               ) -> Result<EvaluationResult, OverflowError> {
   76,694 ( 0.00%)          if !self.intercrate
        .                       && obligation.is_global()
        .                       && obligation.param_env.caller_bounds().iter().all(|bound| bound.needs_subst())
        .                   {
        .                       // If a param env has no global bounds, global obligations do not
        .                       // depend on its particular value in order to work, so we can clear
        .                       // out the param env and get better caching.
        .                       debug!("in global");
    3,786 ( 0.00%)              obligation.param_env = obligation.param_env.without_caller_bounds();
        .                   }
        .           
        .                   let stack = self.push_stack(previous_stack, &obligation);
        .                   let mut fresh_trait_pred = stack.fresh_trait_pred;
   76,694 ( 0.00%)          let mut param_env = obligation.param_env;
        .           
        .                   fresh_trait_pred = fresh_trait_pred.map_bound(|mut pred| {
   38,347 ( 0.00%)              pred.remap_constness(self.tcx(), &mut param_env);
  460,164 ( 0.03%)              pred
        .                   });
        .           
        .                   debug!(?fresh_trait_pred);
        .           
   75,132 ( 0.00%)          if let Some(result) = self.check_evaluation_cache(param_env, fresh_trait_pred) {
        .                       debug!(?result, "CACHE HIT");
        .                       return Ok(result);
        .                   }
        .           
        .                   if let Some(result) = stack.cache().get_provisional(fresh_trait_pred) {
        .                       debug!(?result, "PROVISIONAL CACHE HIT");
        .                       stack.update_reached_depth(result.reached_depth);
        .                       return Ok(result.result);
-- line 744 ----------------------------------------
-- line 748 ----------------------------------------
        .                   // stack. If so, we don't want to insert the result into the
        .                   // main cache (it is cycle dependent) nor the provisional
        .                   // cache (which is meant for things that have completed but
        .                   // for a "backedge" -- this result *is* the backedge).
        .                   if let Some(cycle_result) = self.check_evaluation_cycle(&stack) {
        .                       return Ok(cycle_result);
        .                   }
        .           
  166,716 ( 0.01%)          let (result, dep_node) = self.in_task(|this| this.evaluate_stack(&stack));
   18,524 ( 0.00%)          let result = result?;
        .           
   92,620 ( 0.01%)          if !result.must_apply_modulo_regions() {
        .                       stack.cache().on_failure(stack.dfn);
        .                   }
        .           
   18,524 ( 0.00%)          let reached_depth = stack.reached_depth.get();
   37,048 ( 0.00%)          if reached_depth >= stack.depth {
        .                       debug!(?result, "CACHE MISS");
  351,861 ( 0.02%)              self.insert_evaluation_cache(param_env, fresh_trait_pred, dep_node, result);
        .           
        .                       stack.cache().on_completion(
   37,038 ( 0.00%)                  stack.dfn,
        .                           |fresh_trait_pred, provisional_result, provisional_dep_node| {
        .                               // Create a new `DepNode` that has dependencies on:
        .                               // * The `DepNode` for the original evaluation that resulted in a provisional cache
        .                               // entry being crated
        .                               // * The `DepNode` for the *current* evaluation, which resulted in us completing
        .                               // provisional caches entries and inserting them into the evaluation cache
        .                               //
        .                               // This ensures that when a query reads this entry from the evaluation cache,
-- line 777 ----------------------------------------
-- line 782 ----------------------------------------
        .                               // cache entry to end up with a transitive `type_of(field_def_id`)` dependency.
        .                               //
        .                               // By using `in_task`, we're also creating an edge from the *current* query
        .                               // to the newly-created `combined_dep_node`. This is probably redundant,
        .                               // but it's better to add too many dep graph edges than to add too few
        .                               // dep graph edges.
        .                               let ((), combined_dep_node) = self.in_task(|this| {
        .                                   this.tcx().dep_graph.read_index(provisional_dep_node);
       10 ( 0.00%)                          this.tcx().dep_graph.read_index(dep_node);
        .                               });
       15 ( 0.00%)                      self.insert_evaluation_cache(
        5 ( 0.00%)                          param_env,
       40 ( 0.00%)                          fresh_trait_pred,
        .                                   combined_dep_node,
        .                                   provisional_result.max(result),
        .                               );
        .                           },
        .                       );
        .                   } else {
        .                       debug!(?result, "PROVISIONAL");
        .                       debug!(
-- line 802 ----------------------------------------
-- line 835 ----------------------------------------
        .               /// `self.freshener`, we can be sure that (a) this will not
        .               /// affect the inferencer state and (b) that if we see two
        .               /// fresh regions with the same index, they refer to the same
        .               /// unbound type variable.
        .               fn check_evaluation_cycle(
        .                   &mut self,
        .                   stack: &TraitObligationStack<'_, 'tcx>,
        .               ) -> Option<EvaluationResult> {
   22,558 ( 0.00%)          if let Some(cycle_depth) = stack
        .                       .iter()
        .                       .skip(1) // Skip top-most frame.
        .                       .find(|prev| {
  586,012 ( 0.03%)                  stack.obligation.param_env == prev.obligation.param_env
        .                               && stack.fresh_trait_pred == prev.fresh_trait_pred
        .                       })
        .                       .map(|stack| stack.depth)
        .                   {
        .                       debug!("evaluate_stack --> recursive at depth {}", cycle_depth);
        .           
        .                       // If we have a stack like `A B C D E A`, where the top of
        .                       // the stack is the final `A`, then this will iterate over
        .                       // `A, E, D, C, B` -- i.e., all the participants apart
        .                       // from the cycle head. We mark them as participating in a
        .                       // cycle. This suppresses caching for those nodes. See
        .                       // `in_cycle` field for more details.
   22,558 ( 0.00%)              stack.update_reached_depth(cycle_depth);
        .           
        .                       // Subtle: when checking for a coinductive cycle, we do
        .                       // not compare using the "freshened trait refs" (which
        .                       // have erased regions) but rather the fully explicit
        .                       // trait refs. This is important because it's only a cycle
        .                       // if the regions match exactly.
   22,413 ( 0.00%)              let cycle = stack.iter().skip(1).take_while(|s| s.depth >= cycle_depth);
   11,279 ( 0.00%)              let tcx = self.tcx();
   78,988 ( 0.00%)              let cycle = cycle.map(|stack| stack.obligation.predicate.to_predicate(tcx));
  124,069 ( 0.01%)              if self.coinductive_match(cycle) {
        .                           debug!("evaluate_stack --> recursive, coinductive");
        .                           Some(EvaluatedToOk)
        .                       } else {
        .                           debug!("evaluate_stack --> recursive, inductive");
        .                           Some(EvaluatedToRecur)
        .                       }
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
  166,716 ( 0.01%)      fn evaluate_stack<'o>(
        .                   &mut self,
        .                   stack: &TraitObligationStack<'o, 'tcx>,
        .               ) -> Result<EvaluationResult, OverflowError> {
        .                   // In intercrate mode, whenever any of the generics are unbound,
        .                   // there can always be an impl. Even if there are no impls in
        .                   // this crate, perhaps the type would be unified with
        .                   // something from another crate that does provide an impl.
        .                   //
-- line 890 ----------------------------------------
-- line 903 ----------------------------------------
        .                   // imagine, this is just where we started. To avoid that, we
        .                   // check for unbound variables and return an ambiguous (hence possible)
        .                   // match if we've seen this trait before.
        .                   //
        .                   // This suffices to allow chains like `FnMut` implemented in
        .                   // terms of `Fn` etc, but we could probably make this more
        .                   // precise still.
        .                   let unbound_input_types =
   18,524 ( 0.00%)              stack.fresh_trait_pred.skip_binder().trait_ref.substs.types().any(|ty| ty.is_fresh());
        .           
   55,572 ( 0.00%)          if stack.obligation.polarity() != ty::ImplPolarity::Negative {
        .                       // This check was an imperfect workaround for a bug in the old
        .                       // intercrate mode; it should be removed when that goes away.
   92,620 ( 0.01%)              if unbound_input_types && self.intercrate {
        .                           debug!("evaluate_stack --> unbound argument, intercrate -->  ambiguous",);
        .                           // Heuristics: show the diagnostics when there are no candidates in crate.
        2 ( 0.00%)                  if self.intercrate_ambiguity_causes.is_some() {
        .                               debug!("evaluate_stack: intercrate_ambiguity_causes is some");
        9 ( 0.00%)                      if let Ok(candidate_set) = self.assemble_candidates(stack) {
        2 ( 0.00%)                          if !candidate_set.ambiguous && candidate_set.vec.is_empty() {
        .                                       let trait_ref = stack.obligation.predicate.skip_binder().trait_ref;
        .                                       let self_ty = trait_ref.self_ty();
        .                                       let cause = with_no_trimmed_paths(|| {
        .                                           IntercrateAmbiguityCause::DownstreamCrate {
        .                                               trait_desc: trait_ref.print_only_trait_path().to_string(),
        .                                               self_desc: if self_ty.has_concrete_skeleton() {
        .                                                   Some(self_ty.to_string())
        .                                               } else {
-- line 930 ----------------------------------------
-- line 937 ----------------------------------------
        .                                       self.intercrate_ambiguity_causes.as_mut().unwrap().push(cause);
        .                                   }
        .                               }
        .                           }
        .                           return Ok(EvaluatedToAmbig);
        .                       }
        .                   }
        .           
   37,044 ( 0.00%)          if unbound_input_types
        .                       && stack.iter().skip(1).any(|prev| {
       39 ( 0.00%)                  stack.obligation.param_env == prev.obligation.param_env
        .                               && self.match_fresh_trait_refs(
       52 ( 0.00%)                          stack.fresh_trait_pred,
       52 ( 0.00%)                          prev.fresh_trait_pred,
        .                                   prev.obligation.param_env,
        .                               )
        .                       })
        .                   {
        .                       debug!("evaluate_stack --> unbound argument, recursive --> giving up",);
        .                       return Ok(EvaluatedToUnknown);
        .                   }
        .           
  154,440 ( 0.01%)          match self.candidate_from_obligation(stack) {
  106,218 ( 0.01%)              Ok(Some(c)) => self.evaluate_candidate(stack, &c),
        .                       Err(SelectionError::Ambiguous(_)) => Ok(EvaluatedToAmbig),
        .                       Ok(None) => Ok(EvaluatedToAmbig),
        .                       Err(Overflow) => Err(OverflowError::Canonical),
        .                       Err(ErrorReporting) => Err(OverflowError::ErrorReporting),
        .                       Err(..) => Ok(EvaluatedToErr),
        .                   }
  185,240 ( 0.01%)      }
        .           
        .               /// For defaulted traits, we use a co-inductive strategy to solve, so
        .               /// that recursion is ok. This routine returns `true` if the top of the
        .               /// stack (`cycle[0]`):
        .               ///
        .               /// - is a defaulted trait,
        .               /// - it also appears in the backtrace at some position `X`,
        .               /// - all the predicates at positions `X..` between `X` and the top are
-- line 975 ----------------------------------------
-- line 977 ----------------------------------------
        .               pub fn coinductive_match<I>(&mut self, mut cycle: I) -> bool
        .               where
        .                   I: Iterator<Item = ty::Predicate<'tcx>>,
        .               {
        .                   cycle.all(|predicate| self.coinductive_predicate(predicate))
        .               }
        .           
        .               fn coinductive_predicate(&self, predicate: ty::Predicate<'tcx>) -> bool {
   23,394 ( 0.00%)          let result = match predicate.kind().skip_binder() {
  105,273 ( 0.01%)              ty::PredicateKind::Trait(ref data) => self.tcx().trait_is_auto(data.def_id()),
        .                       _ => false,
        .                   };
        .                   debug!(?predicate, ?result, "coinductive_predicate");
        .                   result
        .               }
        .           
        .               /// Further evaluates `candidate` to decide whether all type parameters match and whether nested
        .               /// obligations are met. Returns whether `candidate` remains viable after this further
-- line 994 ----------------------------------------
-- line 998 ----------------------------------------
        .                   skip(self, stack),
        .                   fields(depth = stack.obligation.recursion_depth)
        .               )]
        .               fn evaluate_candidate<'o>(
        .                   &mut self,
        .                   stack: &TraitObligationStack<'o, 'tcx>,
        .                   candidate: &SelectionCandidate<'tcx>,
        .               ) -> Result<EvaluationResult, OverflowError> {
   35,664 ( 0.00%)          let mut result = self.evaluation_probe(|this| {
        .                       let candidate = (*candidate).clone();
  285,583 ( 0.02%)              match this.confirm_candidate(stack.obligation, candidate) {
        .                           Ok(selection) => {
        .                               debug!(?selection);
   71,328 ( 0.00%)                      this.evaluate_predicates_recursively(
        .                                   stack.list(),
  231,816 ( 0.01%)                          selection.nested_obligations().into_iter(),
        .                               )
        .                           }
        .                           Err(..) => Ok(EvaluatedToErr),
        .                       }
        .                   })?;
        .           
        .                   // If we erased any lifetimes, then we want to use
        .                   // `EvaluatedToOkModuloRegions` instead of `EvaluatedToOk`
        .                   // as your final result. The result will be cached using
        .                   // the freshened trait predicate as a key, so we need
        .                   // our result to be correct by *any* choice of original lifetimes,
        .                   // not just the lifetime choice for this particular (non-erased)
        .                   // predicate.
        .                   // See issue #80691
        5 ( 0.00%)          if stack.fresh_trait_pred.has_erased_regions() {
        .                       result = result.max(EvaluatedToOkModuloRegions);
        .                   }
        .           
        .                   debug!(?result);
        .                   Ok(result)
        .               }
        .           
        .               fn check_evaluation_cache(
-- line 1036 ----------------------------------------
-- line 1037 ----------------------------------------
        .                   &self,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   trait_pred: ty::PolyTraitPredicate<'tcx>,
        .               ) -> Option<EvaluationResult> {
        .                   // Neither the global nor local cache is aware of intercrate
        .                   // mode, so don't do any caching. In particular, we might
        .                   // re-use the same `InferCtxt` with both an intercrate
        .                   // and non-intercrate `SelectionContext`
   76,694 ( 0.00%)          if self.intercrate {
        .                       return None;
        .                   }
        .           
        .                   let tcx = self.tcx();
        .                   if self.can_use_global_caches(param_env) {
   20,013 ( 0.00%)              if let Some(res) = tcx.evaluation_cache.get(&param_env.and(trait_pred), tcx) {
        .                           return Some(res);
        .                       }
        .                   }
  150,264 ( 0.01%)          self.infcx.evaluation_cache.get(&param_env.and(trait_pred), tcx)
        .               }
        .           
  222,288 ( 0.01%)      fn insert_evaluation_cache(
        .                   &mut self,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   trait_pred: ty::PolyTraitPredicate<'tcx>,
        .                   dep_node: DepNodeIndex,
        .                   result: EvaluationResult,
        .               ) {
        .                   // Avoid caching results that depend on more than just the trait-ref
        .                   // - the stack can create recursion.
   74,096 ( 0.00%)          if result.is_stack_dependent() {
        .                       return;
        .                   }
        .           
        .                   // Neither the global nor local cache is aware of intercrate
        .                   // mode, so don't do any caching. In particular, we might
        .                   // re-use the same `InferCtxt` with both an intercrate
        .                   // and non-intercrate `SelectionContext`
   37,048 ( 0.00%)          if self.intercrate {
        .                       return;
        .                   }
        .           
        .                   if self.can_use_global_caches(param_env) {
        .                       if !trait_pred.needs_infer() {
        .                           debug!(?trait_pred, ?result, "insert_evaluation_cache global");
        .                           // This may overwrite the cache with the same value
        .                           // FIXME: Due to #50507 this overwrites the different values
        .                           // This should be changed to use HashMapExt::insert_same
        .                           // when that is fixed
    1,834 ( 0.00%)                  self.tcx().evaluation_cache.insert(param_env.and(trait_pred), dep_node, result);
        .                           return;
        .                       }
        .                   }
        .           
        .                   debug!(?trait_pred, ?result, "insert_evaluation_cache");
   66,728 ( 0.00%)          self.infcx.evaluation_cache.insert(param_env.and(trait_pred), dep_node, result);
  148,192 ( 0.01%)      }
        .           
        .               /// For various reasons, it's possible for a subobligation
        .               /// to have a *lower* recursion_depth than the obligation used to create it.
        .               /// Projection sub-obligations may be returned from the projection cache,
        .               /// which results in obligations with an 'old' `recursion_depth`.
        .               /// Additionally, methods like `InferCtxt.subtype_predicate` produce
        .               /// subobligations without taking in a 'parent' depth, causing the
        .               /// generated subobligations to have a `recursion_depth` of `0`.
        .               ///
        .               /// To ensure that obligation_depth never decreases, we force all subobligations
        .               /// to have at least the depth of the original obligation.
       36 ( 0.00%)      fn add_depth<T: 'cx, I: Iterator<Item = &'cx mut Obligation<'tcx, T>>>(
        .                   &self,
        .                   it: I,
        .                   min_depth: usize,
        .               ) {
      152 ( 0.00%)          it.for_each(|o| o.recursion_depth = cmp::max(min_depth, o.recursion_depth) + 1);
       72 ( 0.00%)      }
        .           
        .               fn check_recursion_depth<T: Display + TypeFoldable<'tcx>>(
        .                   &self,
        .                   depth: usize,
        .                   error_obligation: &Obligation<'tcx, T>,
        .               ) -> Result<(), OverflowError> {
  264,780 ( 0.02%)          if !self.infcx.tcx.recursion_limit().value_within_limit(depth) {
        .                       match self.query_mode {
        .                           TraitQueryMode::Standard => {
        .                               if self.infcx.is_tainted_by_errors() {
        .                                   return Err(OverflowError::ErrorReporting);
        .                               }
        .                               self.infcx.report_overflow_error(error_obligation, true);
        .                           }
        .                           TraitQueryMode::Canonical => {
-- line 1126 ----------------------------------------
-- line 1143 ----------------------------------------
        .               ) -> Result<(), OverflowError> {
        .                   self.check_recursion_depth(obligation.recursion_depth, error_obligation)
        .               }
        .           
        .               fn in_task<OP, R>(&mut self, op: OP) -> (R, DepNodeIndex)
        .               where
        .                   OP: FnOnce(&mut Self) -> R,
        .               {
  277,810 ( 0.02%)          let (result, dep_node) =
  276,457 ( 0.02%)              self.tcx().dep_graph.with_anon_task(self.tcx(), DepKind::TraitSelect, || op(self));
        .                   self.tcx().dep_graph.read_index(dep_node);
  256,440 ( 0.02%)          (result, dep_node)
        .               }
        .           
        .               /// filter_impls filters constant trait obligations and candidates that have a positive impl
        .               /// for a negative goal and a negative impl for a positive goal
        .               #[instrument(level = "debug", skip(self))]
        .               fn filter_impls(
        .                   &mut self,
        .                   candidates: Vec<SelectionCandidate<'tcx>>,
        .                   obligation: &TraitObligation<'tcx>,
        .               ) -> Vec<SelectionCandidate<'tcx>> {
        .                   let tcx = self.tcx();
        .                   let mut result = Vec::with_capacity(candidates.len());
        .           
  325,939 ( 0.02%)          for candidate in candidates {
        .                       // Respect const trait obligations
   60,147 ( 0.00%)              if obligation.is_const() {
        .                           match candidate {
        .                               // const impl
        .                               ImplCandidate(def_id)
        .                                   if tcx.impl_constness(def_id) == hir::Constness::Const => {}
        .                               // const param
        .                               ParamCandidate(trait_pred)
        .                                   if trait_pred.skip_binder().constness
        .                                       == ty::BoundConstness::ConstIfConst => {}
-- line 1178 ----------------------------------------
-- line 1186 ----------------------------------------
        .                               ConstDropCandidate(_) => {}
        .                               _ => {
        .                                   // reject all other types of candidates
        .                                   continue;
        .                               }
        .                           }
        .                       }
        .           
   40,098 ( 0.00%)              if let ImplCandidate(def_id) = candidate {
   10,046 ( 0.00%)                  if ty::ImplPolarity::Reservation == tcx.impl_polarity(def_id)
    5,023 ( 0.00%)                      || obligation.polarity() == tcx.impl_polarity(def_id)
        .                               || self.allow_negative_impls
        .                           {
        .                               result.push(candidate);
        .                           }
        .                       } else {
        .                           result.push(candidate);
        .                       }
        .                   }
        .           
   84,320 ( 0.01%)          result
        .               }
        .           
        .               /// filter_reservation_impls filter reservation impl for any goal as ambiguous
  339,405 ( 0.02%)      #[instrument(level = "debug", skip(self))]
        .               fn filter_reservation_impls(
        .                   &mut self,
        .                   candidate: SelectionCandidate<'tcx>,
        .                   obligation: &TraitObligation<'tcx>,
        .               ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {
        .                   let tcx = self.tcx();
        .                   // Treat reservation impls as ambiguity.
   49,810 ( 0.00%)          if let ImplCandidate(def_id) = candidate {
    9,880 ( 0.00%)              if let ty::ImplPolarity::Reservation = tcx.impl_polarity(def_id) {
        .                           if let Some(intercrate_ambiguity_clauses) = &mut self.intercrate_ambiguity_causes {
        .                               let attrs = tcx.get_attrs(def_id);
        .                               let attr = tcx.sess.find_by_name(&attrs, sym::rustc_reservation_impl);
        .                               let value = attr.and_then(|a| a.value_str());
        .                               if let Some(value) = value {
        .                                   debug!(
        .                                       "filter_reservation_impls: \
        .                                            reservation impl ambiguity on {:?}",
-- line 1227 ----------------------------------------
-- line 1232 ----------------------------------------
        .                                           message: value.to_string(),
        .                                       },
        .                                   );
        .                               }
        .                           }
        .                           return Ok(None);
        .                       }
        .                   }
  119,790 ( 0.01%)          Ok(Some(candidate))
        .               }
        .           
        .               fn is_knowable<'o>(&mut self, stack: &TraitObligationStack<'o, 'tcx>) -> Option<Conflict> {
        .                   debug!("is_knowable(intercrate={:?})", self.intercrate);
        .           
   64,128 ( 0.00%)          if !self.intercrate || stack.obligation.polarity() == ty::ImplPolarity::Negative {
        .                       return None;
        .                   }
        .           
        .                   let obligation = &stack.obligation;
       18 ( 0.00%)          let predicate = self.infcx().resolve_vars_if_possible(obligation.predicate);
        .           
        .                   // Okay to skip binder because of the nature of the
        .                   // trait-ref-is-knowable check, which does not care about
        .                   // bound regions.
        .                   let trait_ref = predicate.skip_binder().trait_ref;
        .           
       18 ( 0.00%)          coherence::trait_ref_is_knowable(self.tcx(), trait_ref)
        .               }
        .           
        .               /// Returns `true` if the global caches can be used.
        .               fn can_use_global_caches(&self, param_env: ty::ParamEnv<'tcx>) -> bool {
        .                   // If there are any inference variables in the `ParamEnv`, then we
        .                   // always use a cache local to this particular scope. Otherwise, we
        .                   // switch to a global cache.
        .                   if param_env.needs_infer() {
-- line 1266 ----------------------------------------
-- line 1286 ----------------------------------------
        .                   &mut self,
        .                   mut param_env: ty::ParamEnv<'tcx>,
        .                   cache_fresh_trait_pred: ty::PolyTraitPredicate<'tcx>,
        .               ) -> Option<SelectionResult<'tcx, SelectionCandidate<'tcx>>> {
        .                   // Neither the global nor local cache is aware of intercrate
        .                   // mode, so don't do any caching. In particular, we might
        .                   // re-use the same `InferCtxt` with both an intercrate
        .                   // and non-intercrate `SelectionContext`
   55,464 ( 0.00%)          if self.intercrate {
        6 ( 0.00%)              return None;
        .                   }
        .                   let tcx = self.tcx();
        .                   let mut pred = cache_fresh_trait_pred.skip_binder();
   55,452 ( 0.00%)          pred.remap_constness(tcx, &mut param_env);
        .           
   27,726 ( 0.00%)          if self.can_use_global_caches(param_env) {
  100,490 ( 0.01%)              if let Some(res) = tcx.selection_cache.get(&param_env.and(pred), tcx) {
   81,055 ( 0.00%)                  return Some(res);
        .                       }
        .                   }
  218,724 ( 0.01%)          self.infcx.selection_cache.get(&param_env.and(pred), tcx)
        .               }
        .           
        .               /// Determines whether can we safely cache the result
        .               /// of selecting an obligation. This is almost always `true`,
        .               /// except when dealing with certain `ParamCandidate`s.
        .               ///
        .               /// Ordinarily, a `ParamCandidate` will contain no inference variables,
        .               /// since it was usually produced directly from a `DefId`. However,
-- line 1314 ----------------------------------------
-- line 1325 ----------------------------------------
        .               fn can_cache_candidate(
        .                   &self,
        .                   result: &SelectionResult<'tcx, SelectionCandidate<'tcx>>,
        .               ) -> bool {
        .                   // Neither the global nor local cache is aware of intercrate
        .                   // mode, so don't do any caching. In particular, we might
        .                   // re-use the same `InferCtxt` with both an intercrate
        .                   // and non-intercrate `SelectionContext`
   42,740 ( 0.00%)          if self.intercrate {
        .                       return false;
        .                   }
   64,092 ( 0.00%)          match result {
        .                       Ok(Some(SelectionCandidate::ParamCandidate(trait_ref))) => !trait_ref.needs_infer(),
        .                       _ => true,
        .                   }
        .               }
        .           
        .               fn insert_candidate_cache(
        .                   &mut self,
        .                   mut param_env: ty::ParamEnv<'tcx>,
        .                   cache_fresh_trait_pred: ty::PolyTraitPredicate<'tcx>,
        .                   dep_node: DepNodeIndex,
        .                   candidate: SelectionResult<'tcx, SelectionCandidate<'tcx>>,
        .               ) {
        .                   let tcx = self.tcx();
        .                   let mut pred = cache_fresh_trait_pred.skip_binder();
        .           
   42,740 ( 0.00%)          pred.remap_constness(tcx, &mut param_env);
        .           
        .                   if !self.can_cache_candidate(&candidate) {
        .                       debug!(?pred, ?candidate, "insert_candidate_cache - candidate is not cacheable");
        .                       return;
        .                   }
        .           
   21,265 ( 0.00%)          if self.can_use_global_caches(param_env) {
    9,168 ( 0.00%)              if let Err(Overflow) = candidate {
        .                           // Don't cache overflow globally; we only produce this in certain modes.
        .                       } else if !pred.needs_infer() {
   15,256 ( 0.00%)                  if !candidate.needs_infer() {
        .                               debug!(?pred, ?candidate, "insert_candidate_cache global");
        .                               // This may overwrite the cache with the same value.
  102,978 ( 0.01%)                      tcx.selection_cache.insert(param_env.and(pred), dep_node, candidate);
        .                               return;
        .                           }
        .                       }
        .                   }
        .           
        .                   debug!(?pred, ?candidate, "insert_candidate_cache local");
  401,373 ( 0.02%)          self.infcx.selection_cache.insert(param_env.and(pred), dep_node, candidate);
        .               }
        .           
        .               /// Matches a predicate against the bounds of its self type.
        .               ///
        .               /// Given an obligation like `<T as Foo>::Bar: Baz` where the self type is
        .               /// a projection, look at the bounds of `T::Bar`, see if we can find a
        .               /// `Baz` bound. We return indexes into the list returned by
        .               /// `tcx.item_bounds` for any applicable bounds.
    4,500 ( 0.00%)      fn match_projection_obligation_against_definition_bounds(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .               ) -> smallvec::SmallVec<[usize; 2]> {
    6,500 ( 0.00%)          let poly_trait_predicate = self.infcx().resolve_vars_if_possible(obligation.predicate);
        .                   let placeholder_trait_predicate =
    8,500 ( 0.00%)              self.infcx().replace_bound_vars_with_placeholders(poly_trait_predicate);
        .                   debug!(
        .                       ?placeholder_trait_predicate,
        .                       "match_projection_obligation_against_definition_bounds"
        .                   );
        .           
      500 ( 0.00%)          let tcx = self.infcx.tcx;
    3,878 ( 0.00%)          let (def_id, substs) = match *placeholder_trait_predicate.trait_ref.self_ty().kind() {
      183 ( 0.00%)              ty::Projection(ref data) => (data.item_def_id, data.substs),
    2,195 ( 0.00%)              ty::Opaque(def_id, substs) => (def_id, substs),
        .                       _ => {
        .                           span_bug!(
        .                               obligation.cause.span,
        .                               "match_projection_obligation_against_definition_bounds() called \
        .                                but self-ty is not a projection: {:?}",
        .                               placeholder_trait_predicate.trait_ref.self_ty()
        .                           );
        .                       }
-- line 1405 ----------------------------------------
-- line 1411 ----------------------------------------
        .                   // unnecessary ambiguity.
        .                   let mut distinct_normalized_bounds = FxHashSet::default();
        .           
        .                   let matching_bounds = bounds
        .                       .iter()
        .                       .enumerate()
        .                       .filter_map(|(idx, bound)| {
        .                           let bound_predicate = bound.kind();
    4,400 ( 0.00%)                  if let ty::PredicateKind::Trait(pred) = bound_predicate.skip_binder() {
        .                               let bound = bound_predicate.rebind(pred.trait_ref);
   17,610 ( 0.00%)                      if self.infcx.probe(|_| {
    6,684 ( 0.00%)                          match self.match_normalize_trait_ref(
        .                                       obligation,
    4,696 ( 0.00%)                              bound,
    4,696 ( 0.00%)                              placeholder_trait_predicate.trait_ref,
        .                                   ) {
        .                                       Ok(None) => true,
        .                                       Ok(Some(normalized_trait))
        .                                           if distinct_normalized_bounds.insert(normalized_trait) =>
        .                                       {
        .                                           true
        .                                       }
        .                                       _ => false,
-- line 1433 ----------------------------------------
-- line 1437 ----------------------------------------
        .                               }
        .                           }
        .                           None
        .                       })
        .                       .collect();
        .           
        .                   debug!(?matching_bounds, "match_projection_obligation_against_definition_bounds");
        .                   matching_bounds
    4,500 ( 0.00%)      }
        .           
        .               /// Equates the trait in `obligation` with trait bound. If the two traits
        .               /// can be equated and the normalized trait bound doesn't contain inference
        .               /// variables or placeholders, the normalized bound is returned.
   17,069 ( 0.00%)      fn match_normalize_trait_ref(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .                   trait_bound: ty::PolyTraitRef<'tcx>,
        .                   placeholder_trait_ref: ty::TraitRef<'tcx>,
        .               ) -> Result<Option<ty::PolyTraitRef<'tcx>>, ()> {
        .                   debug_assert!(!placeholder_trait_ref.has_escaping_bound_vars());
    4,511 ( 0.00%)          if placeholder_trait_ref.def_id != trait_bound.def_id() {
        .                       // Avoid unnecessary normalization
    2,054 ( 0.00%)              return Err(());
        .                   }
        .           
    3,432 ( 0.00%)          let Normalized { value: trait_bound, obligations: _ } = ensure_sufficient_stack(|| {
        .                       project::normalize_with_depth(
        .                           self,
      286 ( 0.00%)                  obligation.param_env,
        .                           obligation.cause.clone(),
      858 ( 0.00%)                  obligation.recursion_depth + 1,
    1,144 ( 0.00%)                  trait_bound,
        .                       )
        .                   });
      858 ( 0.00%)          self.infcx
      572 ( 0.00%)              .at(&obligation.cause, obligation.param_env)
        .                       .sup(ty::Binder::dummy(placeholder_trait_ref), trait_bound)
        .                       .map(|InferOk { obligations: _, value: () }| {
        .                           // This method is called within a probe, so we can't have
        .                           // inference variables and placeholders escape.
        .                           if !trait_bound.needs_infer() && !trait_bound.has_placeholders() {
      450 ( 0.00%)                      Some(trait_bound)
        .                           } else {
        .                               None
        .                           }
        .                       })
        .                       .map_err(|_| ())
   11,817 ( 0.00%)      }
        .           
        .               fn evaluate_where_clause<'o>(
        .                   &mut self,
        .                   stack: &TraitObligationStack<'o, 'tcx>,
        .                   where_clause_trait_ref: ty::PolyTraitRef<'tcx>,
        .               ) -> Result<EvaluationResult, OverflowError> {
        .                   self.evaluation_probe(|this| {
   15,950 ( 0.00%)              match this.match_where_clause_trait_ref(stack.obligation, where_clause_trait_ref) {
    2,248 ( 0.00%)                  Ok(obligations) => this.evaluate_predicates_recursively(stack.list(), obligations),
        .                           Err(()) => Ok(EvaluatedToErr),
        .                       }
        .                   })
        .               }
        .           
    1,161 ( 0.00%)      pub(super) fn match_projection_projections(
        .                   &mut self,
        .                   obligation: &ProjectionTyObligation<'tcx>,
        .                   env_predicate: PolyProjectionPredicate<'tcx>,
        .                   potentially_unnormalized_candidates: bool,
        .               ) -> bool {
        .                   let mut nested_obligations = Vec::new();
      645 ( 0.00%)          let (infer_predicate, _) = self.infcx.replace_bound_vars_with_fresh_vars(
      387 ( 0.00%)              obligation.cause.span,
        .                       LateBoundRegionConversionTime::HigherRankedType,
        .                       env_predicate,
        .                   );
      258 ( 0.00%)          let infer_projection = if potentially_unnormalized_candidates {
      704 ( 0.00%)              ensure_sufficient_stack(|| {
      352 ( 0.00%)                  project::normalize_with_depth_to(
        .                               self,
       88 ( 0.00%)                      obligation.param_env,
        .                               obligation.cause.clone(),
      264 ( 0.00%)                      obligation.recursion_depth + 1,
      176 ( 0.00%)                      infer_predicate.projection_ty,
        .                               &mut nested_obligations,
        .                           )
        .                       })
        .                   } else {
       82 ( 0.00%)              infer_predicate.projection_ty
        .                   };
        .           
      129 ( 0.00%)          self.infcx
      258 ( 0.00%)              .at(&obligation.cause, obligation.param_env)
      258 ( 0.00%)              .sup(obligation.predicate, infer_projection)
    1,032 ( 0.00%)              .map_or(false, |InferOk { obligations, value: () }| {
        .                           self.evaluate_predicates_recursively(
        .                               TraitObligationStackList::empty(&ProvisionalEvaluationCache::default()),
        .                               nested_obligations.into_iter().chain(obligations),
        .                           )
      258 ( 0.00%)                  .map_or(false, |res| res.may_apply())
        .                       })
    1,161 ( 0.00%)      }
        .           
        .               ///////////////////////////////////////////////////////////////////////////
        .               // WINNOW
        .               //
        .               // Winnowing is the process of attempting to resolve ambiguity by
        .               // probing further. During the winnowing process, we unify all
        .               // type variables and then we also attempt to evaluate recursive
        .               // bounds to see if they are satisfied.
-- line 1544 ----------------------------------------
-- line 1550 ----------------------------------------
        .               /// See the comment for "SelectionCandidate" for more details.
        .               fn candidate_should_be_dropped_in_favor_of(
        .                   &mut self,
        .                   sized_predicate: bool,
        .                   victim: &EvaluatedCandidate<'tcx>,
        .                   other: &EvaluatedCandidate<'tcx>,
        .                   needs_infer: bool,
        .               ) -> bool {
       65 ( 0.00%)          if victim.candidate == other.candidate {
        .                       return true;
        .                   }
        .           
        .                   // Check if a bound would previously have been removed when normalizing
        .                   // the param_env so that it can be given the lowest priority. See
        .                   // #50825 for the motivation for this.
        .                   let is_global = |cand: &ty::PolyTraitPredicate<'tcx>| {
        .                       cand.is_global() && !cand.has_late_bound_regions()
        .                   };
        .           
        .                   // (*) Prefer `BuiltinCandidate { has_nested: false }`, `PointeeCandidate`,
        .                   // `DiscriminantKindCandidate`, and `ConstDropCandidate` to anything else.
        .                   //
        .                   // This is a fix for #53123 and prevents winnowing from accidentally extending the
        .                   // lifetime of a variable.
    1,225 ( 0.00%)          match (&other.candidate, &victim.candidate) {
        .                       (_, AutoImplCandidate(..)) | (AutoImplCandidate(..), _) => {
        .                           bug!(
        .                               "default implementations shouldn't be recorded \
        .                               when there are other valid candidates"
        .                           );
        .                       }
        .           
        .                       // (*)
-- line 1582 ----------------------------------------
-- line 1633 ----------------------------------------
        .                       }
        .           
        .                       // Global bounds from the where clause should be ignored
        .                       // here (see issue #50825). Otherwise, we have a where
        .                       // clause so don't go around looking for impls.
        .                       // Arbitrarily give param candidates priority
        .                       // over projection and object candidates.
        .                       (
       12 ( 0.00%)                  ParamCandidate(ref cand),
        .                           ImplCandidate(..)
        .                           | ClosureCandidate
        .                           | GeneratorCandidate
        .                           | FnPointerCandidate { .. }
        .                           | BuiltinObjectCandidate
        .                           | BuiltinUnsizeCandidate
        .                           | TraitUpcastingUnsizeCandidate(_)
        .                           | BuiltinCandidate { .. }
-- line 1649 ----------------------------------------
-- line 1674 ----------------------------------------
        .                       }
        .                       (ObjectCandidate(_), ProjectionCandidate(_))
        .                       | (ProjectionCandidate(_), ObjectCandidate(_)) => {
        .                           bug!("Have both object and projection candidate")
        .                       }
        .           
        .                       // Arbitrarily give projection and object candidates priority.
        .                       (
      130 ( 0.00%)                  ObjectCandidate(_) | ProjectionCandidate(_),
        .                           ImplCandidate(..)
        .                           | ClosureCandidate
        .                           | GeneratorCandidate
        .                           | FnPointerCandidate { .. }
        .                           | BuiltinObjectCandidate
        .                           | BuiltinUnsizeCandidate
        .                           | TraitUpcastingUnsizeCandidate(_)
        .                           | BuiltinCandidate { .. }
-- line 1690 ----------------------------------------
-- line 1696 ----------------------------------------
        .                           | ClosureCandidate
        .                           | GeneratorCandidate
        .                           | FnPointerCandidate { .. }
        .                           | BuiltinObjectCandidate
        .                           | BuiltinUnsizeCandidate
        .                           | TraitUpcastingUnsizeCandidate(_)
        .                           | BuiltinCandidate { .. }
        .                           | TraitAliasCandidate(..),
      260 ( 0.00%)                  ObjectCandidate(_) | ProjectionCandidate(_),
        .                       ) => false,
        .           
      650 ( 0.00%)              (&ImplCandidate(other_def), &ImplCandidate(victim_def)) => {
        .                           // See if we can toss out `victim` based on specialization.
        .                           // This requires us to know *for sure* that the `other` impl applies
        .                           // i.e., `EvaluatedToOk`.
        .                           //
        .                           // FIXME(@lcnr): Using `modulo_regions` here seems kind of scary
        .                           // to me but is required for `std` to compile, so I didn't change it
        .                           // for now.
        .                           let tcx = self.tcx();
      260 ( 0.00%)                  if other.evaluation.must_apply_modulo_regions() {
      480 ( 0.00%)                      if tcx.specializes((other_def, victim_def)) {
        .                                   return true;
        .                               }
        .                           }
        .           
      290 ( 0.00%)                  if other.evaluation.must_apply_considering_regions() {
      212 ( 0.00%)                      match tcx.impls_are_allowed_to_overlap(other_def, victim_def) {
        .                                   Some(ty::ImplOverlapKind::Permitted { marker: true }) => {
        .                                       // Subtle: If the predicate we are evaluating has inference
        .                                       // variables, do *not* allow discarding candidates due to
        .                                       // marker trait impls.
        .                                       //
        .                                       // Without this restriction, we could end up accidentally
        .                                       // constrainting inference variables based on an arbitrarily
        .                                       // chosen trait impl.
-- line 1731 ----------------------------------------
-- line 1790 ----------------------------------------
        .                           | BuiltinUnsizeCandidate
        .                           | TraitUpcastingUnsizeCandidate(_)
        .                           | BuiltinCandidate { has_nested: true }
        .                           | TraitAliasCandidate(..),
        .                       ) => false,
        .                   }
        .               }
        .           
   24,160 ( 0.00%)      fn sized_conditions(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .               ) -> BuiltinImplConditions<'tcx> {
        .                   use self::BuiltinImplConditions::{Ambiguous, None, Where};
        .           
        .                   // NOTE: binder moved to (*)
    7,248 ( 0.00%)          let self_ty = self.infcx.shallow_resolve(obligation.predicate.skip_binder().self_ty());
        .           
   12,084 ( 0.00%)          match self_ty.kind() {
        .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
        .                       | ty::Uint(_)
        .                       | ty::Int(_)
        .                       | ty::Bool
        .                       | ty::Float(_)
        .                       | ty::FnDef(..)
        .                       | ty::FnPtr(_)
        .                       | ty::RawPtr(..)
-- line 1815 ----------------------------------------
-- line 1817 ----------------------------------------
        .                       | ty::Ref(..)
        .                       | ty::Generator(..)
        .                       | ty::GeneratorWitness(..)
        .                       | ty::Array(..)
        .                       | ty::Closure(..)
        .                       | ty::Never
        .                       | ty::Error(_) => {
        .                           // safe for everything
      338 ( 0.00%)                  Where(ty::Binder::dummy(Vec::new()))
        .                       }
        .           
        .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => None,
        .           
        .                       ty::Tuple(tys) => Where(
        .                           obligation
        .                               .predicate
      745 ( 0.00%)                      .rebind(tys.last().into_iter().map(|k| k.expect_ty()).collect()),
        .                       ),
        .           
        .                       ty::Adt(def, substs) => {
    2,922 ( 0.00%)                  let sized_crit = def.sized_constraint(self.tcx());
        .                           // (*) binder moved here
    7,305 ( 0.00%)                  Where(
        .                               obligation.predicate.rebind({
    1,461 ( 0.00%)                          sized_crit.iter().map(|ty| ty.subst(self.tcx(), substs)).collect()
        .                               }),
        .                           )
        .                       }
        .           
        .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => None,
        .                       ty::Infer(ty::TyVar(_)) => Ambiguous,
        .           
        .                       ty::Placeholder(..)
        .                       | ty::Bound(..)
        .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("asked to assemble builtin bounds of unexpected type: {:?}", self_ty);
        .                       }
        .                   }
   19,328 ( 0.00%)      }
        .           
   11,536 ( 0.00%)      fn copy_clone_conditions(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .               ) -> BuiltinImplConditions<'tcx> {
        .                   // NOTE: binder moved to (*)
    2,884 ( 0.00%)          let self_ty = self.infcx.shallow_resolve(obligation.predicate.skip_binder().self_ty());
        .           
        .                   use self::BuiltinImplConditions::{Ambiguous, None, Where};
        .           
    7,562 ( 0.00%)          match *self_ty.kind() {
        .                       ty::Infer(ty::IntVar(_))
        .                       | ty::Infer(ty::FloatVar(_))
        .                       | ty::FnDef(..)
        .                       | ty::FnPtr(_)
      372 ( 0.00%)              | ty::Error(_) => Where(ty::Binder::dummy(Vec::new())),
        .           
        .                       ty::Uint(_)
        .                       | ty::Int(_)
        .                       | ty::Bool
        .                       | ty::Float(_)
        .                       | ty::Char
        .                       | ty::RawPtr(..)
        .                       | ty::Never
-- line 1879 ----------------------------------------
-- line 1886 ----------------------------------------
        .                       ty::Dynamic(..)
        .                       | ty::Str
        .                       | ty::Slice(..)
        .                       | ty::Generator(..)
        .                       | ty::GeneratorWitness(..)
        .                       | ty::Foreign(..)
        .                       | ty::Ref(_, _, hir::Mutability::Mut) => None,
        .           
       21 ( 0.00%)              ty::Tuple(tys) => {
        .                           // (*) binder moved here
      810 ( 0.00%)                  Where(obligation.predicate.rebind(tys.iter().map(|k| k.expect_ty()).collect()))
        .                       }
        .           
       65 ( 0.00%)              ty::Closure(_, substs) => {
        .                           // (*) binder moved here
      195 ( 0.00%)                  let ty = self.infcx.shallow_resolve(substs.as_closure().tupled_upvars_ty());
      130 ( 0.00%)                  if let ty::Infer(ty::TyVar(_)) = ty.kind() {
        .                               // Not yet resolved.
        .                               Ambiguous
        .                           } else {
      455 ( 0.00%)                      Where(obligation.predicate.rebind(substs.as_closure().upvar_tys().collect()))
        .                           }
        .                       }
        .           
        .                       ty::Adt(..) | ty::Projection(..) | ty::Param(..) | ty::Opaque(..) => {
        .                           // Fallback to whatever user-defined impls exist in this case.
        .                           None
        .                       }
        .           
-- line 1914 ----------------------------------------
-- line 1920 ----------------------------------------
        .                       }
        .           
        .                       ty::Placeholder(..)
        .                       | ty::Bound(..)
        .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("asked to assemble builtin bounds of unexpected type: {:?}", self_ty);
        .                       }
        .                   }
    8,652 ( 0.00%)      }
        .           
        .               /// For default impls, we need to break apart a type into its
        .               /// "constituent types" -- meaning, the types that it contains.
        .               ///
        .               /// Here are some (simple) examples:
        .               ///
        .               /// ```
        .               /// (i32, u32) -> [i32, u32]
-- line 1936 ----------------------------------------
-- line 1937 ----------------------------------------
        .               /// Foo where struct Foo { x: i32, y: u32 } -> [i32, u32]
        .               /// Bar<i32> where struct Bar<T> { x: T, y: u32 } -> [i32, u32]
        .               /// Zed<i32> where enum Zed { A(T), B(u32) } -> [i32, u32]
        .               /// ```
        .               fn constituent_types_for_ty(
        .                   &self,
        .                   t: ty::Binder<'tcx, Ty<'tcx>>,
        .               ) -> ty::Binder<'tcx, Vec<Ty<'tcx>>> {
   58,555 ( 0.00%)          match *t.skip_binder().kind() {
        .                       ty::Uint(_)
        .                       | ty::Int(_)
        .                       | ty::Bool
        .                       | ty::Float(_)
        .                       | ty::FnDef(..)
        .                       | ty::FnPtr(_)
        .                       | ty::Str
        .                       | ty::Error(_)
-- line 1953 ----------------------------------------
-- line 1960 ----------------------------------------
        .                       | ty::Param(..)
        .                       | ty::Foreign(..)
        .                       | ty::Projection(..)
        .                       | ty::Bound(..)
        .                       | ty::Infer(ty::TyVar(_) | ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("asked to assemble constituent types of unexpected type: {:?}", t);
        .                       }
        .           
       46 ( 0.00%)              ty::RawPtr(ty::TypeAndMut { ty: element_ty, .. }) | ty::Ref(_, element_ty, _) => {
        .                           t.rebind(vec![element_ty])
        .                       }
        .           
        .                       ty::Array(element_ty, _) | ty::Slice(element_ty) => t.rebind(vec![element_ty]),
        .           
        .                       ty::Tuple(ref tys) => {
        .                           // (T1, ..., Tn) -- meets any bound that all of T1...Tn meet
      502 ( 0.00%)                  t.rebind(tys.iter().map(|k| k.expect_ty()).collect())
        .                       }
        .           
        .                       ty::Closure(_, ref substs) => {
       56 ( 0.00%)                  let ty = self.infcx.shallow_resolve(substs.as_closure().tupled_upvars_ty());
        .                           t.rebind(vec![ty])
        .                       }
        .           
        .                       ty::Generator(_, ref substs, _) => {
      232 ( 0.00%)                  let ty = self.infcx.shallow_resolve(substs.as_generator().tupled_upvars_ty());
      464 ( 0.00%)                  let witness = substs.as_generator().witness();
        .                           t.rebind([ty].into_iter().chain(iter::once(witness)).collect())
        .                       }
        .           
      375 ( 0.00%)              ty::GeneratorWitness(types) => {
        .                           debug_assert!(!types.has_escaping_bound_vars());
      250 ( 0.00%)                  types.map_bound(|types| types.to_vec())
        .                       }
        .           
        .                       // For `PhantomData<T>`, we pass `T`.
   19,531 ( 0.00%)              ty::Adt(def, substs) if def.is_phantom_data() => t.rebind(substs.types().collect()),
        .           
    9,689 ( 0.00%)              ty::Adt(def, substs) => {
   34,663 ( 0.00%)                  t.rebind(def.all_fields().map(|f| f.ty(self.tcx(), substs)).collect())
        .                       }
        .           
      597 ( 0.00%)              ty::Opaque(def_id, substs) => {
        .                           // We can resolve the `impl Trait` to its concrete type,
        .                           // which enforces a DAG between the functions requiring
        .                           // the auto trait bounds in question.
      199 ( 0.00%)                  t.rebind(vec![self.tcx().type_of(def_id).subst(self.tcx(), substs)])
        .                       }
        .                   }
        .               }
        .           
  143,160 ( 0.01%)      fn collect_predicates_for_types(
        .                   &mut self,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   cause: ObligationCause<'tcx>,
        .                   recursion_depth: usize,
        .                   trait_def_id: DefId,
        .                   types: ty::Binder<'tcx, Vec<Ty<'tcx>>>,
        .               ) -> Vec<PredicateObligation<'tcx>> {
        .                   // Because the types were potentially derived from
-- line 2019 ----------------------------------------
-- line 2030 ----------------------------------------
        .                   // 2. Produce something like `&'0 i32 : Copy`
        .                   // 3. Re-bind the regions back to `for<'a> &'a i32 : Copy`
        .           
        .                   types
        .                       .as_ref()
        .                       .skip_binder() // binder moved -\
        .                       .iter()
        .                       .flat_map(|ty| {
   58,212 ( 0.00%)                  let ty: ty::Binder<'tcx, Ty<'tcx>> = types.rebind(ty); // <----/
        .           
  232,848 ( 0.01%)                  self.infcx.commit_unconditionally(|_| {
   58,212 ( 0.00%)                      let placeholder_ty = self.infcx.replace_bound_vars_with_placeholders(ty);
   97,020 ( 0.01%)                      let Normalized { value: normalized_ty, mut obligations } =
  194,040 ( 0.01%)                          ensure_sufficient_stack(|| {
        .                                       project::normalize_with_depth(
        .                                           self,
   19,404 ( 0.00%)                                  param_env,
        .                                           cause.clone(),
   19,404 ( 0.00%)                                  recursion_depth,
   19,404 ( 0.00%)                                  placeholder_ty,
        .                                       )
        .                                   });
  213,444 ( 0.01%)                      let placeholder_obligation = predicate_for_trait_def(
        .                                   self.tcx(),
   19,404 ( 0.00%)                          param_env,
        .                                   cause.clone(),
   38,808 ( 0.00%)                          trait_def_id,
        .                                   recursion_depth,
        .                                   normalized_ty,
        .                                   &[],
        .                               );
  116,424 ( 0.01%)                      obligations.push(placeholder_obligation);
        .                               obligations
        .                           })
        .                       })
        .                       .collect()
   71,580 ( 0.00%)      }
        .           
        .               ///////////////////////////////////////////////////////////////////////////
        .               // Matching
        .               //
        .               // Matching is a common path used for both evaluation and
        .               // confirmation.  It basically unifies types that appear in impls
        .               // and traits. This does affect the surrounding environment;
        .               // therefore, when used during evaluation, match routines must be
-- line 2074 ----------------------------------------
-- line 2075 ----------------------------------------
        .               // run inside of a `probe()` so that their side-effects are
        .               // contained.
        .           
        .               fn rematch_impl(
        .                   &mut self,
        .                   impl_def_id: DefId,
        .                   obligation: &TraitObligation<'tcx>,
        .               ) -> Normalized<'tcx, SubstsRef<'tcx>> {
   31,355 ( 0.00%)          match self.match_impl(impl_def_id, obligation) {
   25,084 ( 0.00%)              Ok(substs) => substs,
        .                       Err(()) => {
        .                           bug!(
        .                               "Impl {:?} was matchable against {:?} but now is not",
        .                               impl_def_id,
        .                               obligation
        .                           );
        .                       }
        .                   }
        .               }
        .           
  233,054 ( 0.01%)      #[tracing::instrument(level = "debug", skip(self))]
        .               fn match_impl(
        .                   &mut self,
        .                   impl_def_id: DefId,
        .                   obligation: &TraitObligation<'tcx>,
        .               ) -> Result<Normalized<'tcx, SubstsRef<'tcx>>, ()> {
        .                   let impl_trait_ref = self.tcx().impl_trait_ref(impl_def_id).unwrap();
        .           
        .                   // Before we create the substitutions and everything, first
        .                   // consider a "quick reject". This avoids creating more types
        .                   // and so forth that we need to.
        .                   if self.fast_reject_trait_refs(obligation, &impl_trait_ref) {
    1,592 ( 0.00%)              return Err(());
        .                   }
        .           
        .                   let placeholder_obligation =
   80,290 ( 0.00%)              self.infcx().replace_bound_vars_with_placeholders(obligation.predicate);
   34,410 ( 0.00%)          let placeholder_obligation_trait_ref = placeholder_obligation.trait_ref;
        .           
   57,350 ( 0.00%)          let impl_substs = self.infcx.fresh_substs_for_item(obligation.cause.span, impl_def_id);
        .           
   22,940 ( 0.00%)          let impl_trait_ref = impl_trait_ref.subst(self.tcx(), impl_substs);
        .           
        .                   debug!(?impl_trait_ref);
        .           
   68,820 ( 0.00%)          let Normalized { value: impl_trait_ref, obligations: mut nested_obligations } =
   80,290 ( 0.00%)              ensure_sufficient_stack(|| {
        .                           project::normalize_with_depth(
        .                               self,
   11,470 ( 0.00%)                      obligation.param_env,
        .                               obligation.cause.clone(),
   34,410 ( 0.00%)                      obligation.recursion_depth + 1,
   22,940 ( 0.00%)                      impl_trait_ref,
        .                           )
        .                       });
        .           
        .                   debug!(?impl_trait_ref, ?placeholder_obligation_trait_ref);
        .           
        .                   let cause = ObligationCause::new(
   11,470 ( 0.00%)              obligation.cause.span,
   22,940 ( 0.00%)              obligation.cause.body_id,
  103,230 ( 0.01%)              ObligationCauseCode::MatchImpl(obligation.cause.clone(), impl_def_id),
        .                   );
        .           
   22,940 ( 0.00%)          let InferOk { obligations, .. } = self
        .                       .infcx
   11,470 ( 0.00%)              .at(&cause, obligation.param_env)
        .                       .eq(placeholder_obligation_trait_ref, impl_trait_ref)
        .                       .map_err(|e| debug!("match_impl: failed eq_trait_refs due to `{}`", e))?;
        .                   nested_obligations.extend(obligations);
        .           
   33,898 ( 0.00%)          if !self.intercrate
        .                       && self.tcx().impl_polarity(impl_def_id) == ty::ImplPolarity::Reservation
        .                   {
        .                       debug!("match_impl: reservation impls only apply in intercrate mode");
        .                       return Err(());
        .                   }
        .           
        .                   debug!(?impl_substs, ?nested_obligations, "match_impl: success");
   67,770 ( 0.00%)          Ok(Normalized { value: impl_substs, obligations: nested_obligations })
        .               }
        .           
        .               fn fast_reject_trait_refs(
        .                   &mut self,
        .                   obligation: &TraitObligation<'_>,
        .                   impl_trait_ref: &ty::TraitRef<'_>,
        .               ) -> bool {
        .                   // We can avoid creating type variables and doing the full
        .                   // substitution if we find that any of the input types, when
        .                   // simplified, do not match.
        .           
   36,798 ( 0.00%)          iter::zip(obligation.predicate.skip_binder().trait_ref.substs, impl_trait_ref.substs).any(
        .                       |(obligation_arg, impl_arg)| {
   88,810 ( 0.01%)                  match (obligation_arg.unpack(), impl_arg.unpack()) {
        .                               (GenericArgKind::Type(obligation_ty), GenericArgKind::Type(impl_ty)) => {
        .                                   // Note, we simplify parameters for the obligation but not the
        .                                   // impl so that we do not reject a blanket impl but do reject
        .                                   // more concrete impls if we're searching for `T: Trait`.
  116,664 ( 0.01%)                          let simplified_obligation_ty = fast_reject::simplify_type(
        .                                       self.tcx(),
        .                                       obligation_ty,
        .                                       SimplifyParams::Yes,
        .                                       StripReferences::No,
        .                                   );
   87,498 ( 0.01%)                          let simplified_impl_ty = fast_reject::simplify_type(
        .                                       self.tcx(),
        .                                       impl_ty,
        .                                       SimplifyParams::No,
        .                                       StripReferences::No,
        .                                   );
        .           
   43,749 ( 0.00%)                          simplified_obligation_ty.is_some()
        .                                       && simplified_impl_ty.is_some()
        .                                       && simplified_obligation_ty != simplified_impl_ty
        .                               }
        .                               (GenericArgKind::Lifetime(_), GenericArgKind::Lifetime(_)) => {
        .                                   // Lifetimes can never cause a rejection.
        .                                   false
        .                               }
        .                               (GenericArgKind::Const(_), GenericArgKind::Const(_)) => {
-- line 2194 ----------------------------------------
-- line 2201 ----------------------------------------
        .                           }
        .                       },
        .                   )
        .               }
        .           
        .               /// Normalize `where_clause_trait_ref` and try to match it against
        .               /// `obligation`. If successful, return any predicates that
        .               /// result from the normalization.
   13,050 ( 0.00%)      fn match_where_clause_trait_ref(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .                   where_clause_trait_ref: ty::PolyTraitRef<'tcx>,
        .               ) -> Result<Vec<PredicateObligation<'tcx>>, ()> {
        .                   self.match_poly_trait_ref(obligation, where_clause_trait_ref)
   11,600 ( 0.00%)      }
        .           
        .               /// Returns `Ok` if `poly_trait_ref` being true implies that the
        .               /// obligation is satisfied.
        .               #[instrument(skip(self), level = "debug")]
        .               fn match_poly_trait_ref(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .                   poly_trait_ref: ty::PolyTraitRef<'tcx>,
        .               ) -> Result<Vec<PredicateObligation<'tcx>>, ()> {
    2,366 ( 0.00%)          self.infcx
    1,450 ( 0.00%)              .at(&obligation.cause, obligation.param_env)
    7,098 ( 0.00%)              .sup(obligation.predicate.to_poly_trait_ref(), poly_trait_ref)
        .                       .map(|InferOk { obligations, .. }| obligations)
        .                       .map_err(|_| ())
        .               }
        .           
        .               ///////////////////////////////////////////////////////////////////////////
        .               // Miscellany
        .           
        .               fn match_fresh_trait_refs(
        .                   &self,
        .                   previous: ty::PolyTraitPredicate<'tcx>,
        .                   current: ty::PolyTraitPredicate<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .               ) -> bool {
       39 ( 0.00%)          let mut matcher = ty::_match::Match::new(self.tcx(), param_env);
        .                   matcher.relate(previous, current).is_ok()
        .               }
        .           
        .               fn push_stack<'o>(
        .                   &mut self,
        .                   previous_stack: TraitObligationStackList<'o, 'tcx>,
        .                   obligation: &'o TraitObligation<'tcx>,
        .               ) -> TraitObligationStack<'o, 'tcx> {
  362,036 ( 0.02%)          let fresh_trait_pred = obligation.predicate.fold_with(&mut self.freshener);
        .           
        .                   let dfn = previous_stack.cache.next_dfn();
   76,694 ( 0.00%)          let depth = previous_stack.depth() + 1;
  312,972 ( 0.02%)          TraitObligationStack {
        .                       obligation,
  276,132 ( 0.02%)              fresh_trait_pred,
        .                       reached_depth: Cell::new(depth),
        .                       previous: previous_stack,
        .                       dfn,
        .                       depth,
        .                   }
        .               }
        .           
        .               #[instrument(skip(self), level = "debug")]
        .               fn closure_trait_ref_unnormalized(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .                   substs: SubstsRef<'tcx>,
        .               ) -> ty::PolyTraitRef<'tcx> {
      498 ( 0.00%)          let closure_sig = substs.as_closure().sig();
        .           
        .                   debug!(?closure_sig);
        .           
        .                   // (1) Feels icky to skip the binder here, but OTOH we know
        .                   // that the self-type is an unboxed closure type and hence is
        .                   // in fact unparameterized (or at least does not reference any
        .                   // regions bound in the obligation). Still probably some
        .                   // refactoring could make this nicer.
    1,660 ( 0.00%)          closure_trait_ref_and_return_type(
        .                       self.tcx(),
      996 ( 0.00%)              obligation.predicate.def_id(),
      166 ( 0.00%)              obligation.predicate.skip_binder().self_ty(), // (1)
      664 ( 0.00%)              closure_sig,
        .                       util::TupleArgumentsFlag::No,
        .                   )
        .                   .map_bound(|(trait_ref, _)| trait_ref)
        .               }
        .           
        .               fn generator_trait_ref_unnormalized(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .                   substs: SubstsRef<'tcx>,
        .               ) -> ty::PolyTraitRef<'tcx> {
      300 ( 0.00%)          let gen_sig = substs.as_generator().poly_sig();
        .           
        .                   // (1) Feels icky to skip the binder here, but OTOH we know
        .                   // that the self-type is an generator type and hence is
        .                   // in fact unparameterized (or at least does not reference any
        .                   // regions bound in the obligation). Still probably some
        .                   // refactoring could make this nicer.
        .           
        .                   super::util::generator_trait_ref_and_outputs(
        .                       self.tcx(),
      600 ( 0.00%)              obligation.predicate.def_id(),
      100 ( 0.00%)              obligation.predicate.skip_binder().self_ty(), // (1)
      200 ( 0.00%)              gen_sig,
        .                   )
        .                   .map_bound(|(trait_ref, ..)| trait_ref)
        .               }
        .           
        .               /// Returns the obligations that are implied by instantiating an
        .               /// impl or trait. The obligations are substituted and fully
        .               /// normalized. This is used when confirming an impl or default
        .               /// impl.
  413,586 ( 0.02%)      #[tracing::instrument(level = "debug", skip(self, cause, param_env))]
        .               fn impl_or_trait_obligations(
        .                   &mut self,
        .                   cause: ObligationCause<'tcx>,
        .                   recursion_depth: usize,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   def_id: DefId,           // of impl or trait
        .                   substs: SubstsRef<'tcx>, // for impl or trait
        .               ) -> Vec<PredicateObligation<'tcx>> {
-- line 2323 ----------------------------------------
-- line 2334 ----------------------------------------
        .                   //    V: Iterator, V: Sized,
        .                   //    <U as Iterator>::Item: Copy
        .                   // When we substitute, say, `V => IntoIter<u32>, U => $0`, the last
        .                   // obligation will normalize to `<$0 as Iterator>::Item = $1` and
        .                   // `$1: Copy`, so we must ensure the obligations are emitted in
        .                   // that order.
        .                   let predicates = tcx.predicates_of(def_id);
        .                   debug!(?predicates);
   17,982 ( 0.00%)          assert_eq!(predicates.parent, None);
   53,946 ( 0.00%)          let mut obligations = Vec::with_capacity(predicates.predicates.len());
        .                   for (predicate, _) in predicates.predicates {
        .                       debug!(?predicate);
  105,430 ( 0.01%)              let predicate = normalize_with_depth_to(
        .                           self,
        .                           param_env,
        .                           cause.clone(),
        .                           recursion_depth,
   21,086 ( 0.00%)                  predicate.subst(tcx, substs),
        .                           &mut obligations,
        .                       );
  210,860 ( 0.01%)              obligations.push(Obligation {
        .                           cause: cause.clone(),
        .                           recursion_depth,
        .                           param_env,
        .                           predicate,
        .                       });
        .                   }
        .           
        .                   // We are performing deduplication here to avoid exponential blowups
-- line 2362 ----------------------------------------
-- line 2363 ----------------------------------------
        .                   // (#38528) from happening, but the real cause of the duplication is
        .                   // unknown. What we know is that the deduplication avoids exponential
        .                   // amount of predicates being propagated when processing deeply nested
        .                   // types.
        .                   //
        .                   // This code is hot enough that it's worth avoiding the allocation
        .                   // required for the FxHashSet when possible. Special-casing lengths 0,
        .                   // 1 and 2 covers roughly 75-80% of the cases.
   48,963 ( 0.00%)          if obligations.len() <= 1 {
        .                       // No possibility of duplicates.
    2,976 ( 0.00%)          } else if obligations.len() == 2 {
        .                       // Only two elements. Drop the second if they are equal.
        4 ( 0.00%)              if obligations[0] == obligations[1] {
       12 ( 0.00%)                  obligations.truncate(1);
        .                       }
        .                   } else {
        .                       // Three or more elements. Use a general deduplication process.
        .                       let mut seen = FxHashSet::default();
      798 ( 0.00%)              obligations.retain(|i| seen.insert(i.clone()));
        .                   }
        .           
   71,928 ( 0.00%)          obligations
        .               }
        .           }
        .           
        .           trait TraitObligationExt<'tcx> {
        .               fn derived_cause(
        .                   &self,
        .                   variant: fn(DerivedObligationCause<'tcx>) -> ObligationCauseCode<'tcx>,
        .               ) -> ObligationCause<'tcx>;
-- line 2392 ----------------------------------------
-- line 2408 ----------------------------------------
        .                    */
        .           
        .                   let obligation = self;
        .           
        .                   // NOTE(flaper87): As of now, it keeps track of the whole error
        .                   // chain. Ideally, we should have a way to configure this either
        .                   // by using -Z verbose or just a CLI argument.
        .                   let derived_cause = DerivedObligationCause {
  119,648 ( 0.01%)              parent_trait_pred: obligation.predicate,
   59,605 ( 0.00%)              parent_code: obligation.cause.clone_code(),
        .                   };
        .                   let derived_code = variant(derived_cause);
  335,303 ( 0.02%)          ObligationCause::new(obligation.cause.span, obligation.cause.body_id, derived_code)
        .               }
        .           }
        .           
        .           impl<'o, 'tcx> TraitObligationStack<'o, 'tcx> {
        .               fn list(&'o self) -> TraitObligationStackList<'o, 'tcx> {
        .                   TraitObligationStackList::with(self)
        .               }
        .           
        .               fn cache(&self) -> &'o ProvisionalEvaluationCache<'tcx> {
   90,129 ( 0.01%)          self.previous.cache
        .               }
        .           
        .               fn iter(&'o self) -> TraitObligationStackList<'o, 'tcx> {
        .                   self.list()
        .               }
        .           
        .               /// Indicates that attempting to evaluate this stack entry
        .               /// required accessing something from the stack at depth `reached_depth`.
   22,558 ( 0.00%)      fn update_reached_depth(&self, reached_depth: usize) {
   11,279 ( 0.00%)          assert!(
   11,279 ( 0.00%)              self.depth >= reached_depth,
        .                       "invoked `update_reached_depth` with something under this stack: \
        .                        self.depth={} reached_depth={}",
        .                       self.depth,
        .                       reached_depth,
        .                   );
        .                   debug!(reached_depth, "update_reached_depth");
        .                   let mut p = self;
   33,847 ( 0.00%)          while reached_depth < p.depth {
        .                       debug!(?p.fresh_trait_pred, "update_reached_depth: marking as cycle participant");
   11,284 ( 0.00%)              p.reached_depth.set(p.reached_depth.get().min(reached_depth));
   11,284 ( 0.00%)              p = p.previous.head.unwrap();
        .                   }
   22,558 ( 0.00%)      }
        .           }
        .           
        .           /// The "provisional evaluation cache" is used to store intermediate cache results
        .           /// when solving auto traits. Auto traits are unusual in that they can support
        .           /// cycles. So, for example, a "proof tree" like this would be ok:
        .           ///
        .           /// - `Foo<T>: Send` :-
        .           ///   - `Bar<T>: Send` :-
-- line 2462 ----------------------------------------
-- line 2540 ----------------------------------------
        .               /// evaluation. When we create an entry in the evaluation cache using this provisional
        .               /// cache entry (see `on_completion`), we use this `dep_node` to ensure that future reads from
        .               /// the cache will have all of the necessary incr comp dependencies tracked.
        .               dep_node: DepNodeIndex,
        .           }
        .           
        .           impl<'tcx> Default for ProvisionalEvaluationCache<'tcx> {
        .               fn default() -> Self {
   19,894 ( 0.00%)          Self { dfn: Cell::new(0), map: Default::default() }
        .               }
        .           }
        .           
        .           impl<'tcx> ProvisionalEvaluationCache<'tcx> {
        .               /// Get the next DFN in sequence (basically a counter).
        .               fn next_dfn(&self) -> usize {
   38,347 ( 0.00%)          let result = self.dfn.get();
  153,388 ( 0.01%)          self.dfn.set(result + 1);
        .                   result
        .               }
        .           
        .               /// Check the provisional cache for any result for
        .               /// `fresh_trait_ref`. If there is a hit, then you must consider
        .               /// it an access to the stack slots at depth
        .               /// `reached_depth` (from the returned value).
        .               fn get_provisional(
-- line 2564 ----------------------------------------
-- line 2663 ----------------------------------------
        .               fn on_completion(
        .                   &self,
        .                   dfn: usize,
        .                   mut op: impl FnMut(ty::PolyTraitPredicate<'tcx>, EvaluationResult, DepNodeIndex),
        .               ) {
        .                   debug!(?dfn, "on_completion");
        .           
        .                   for (fresh_trait_pred, eval) in
  129,653 ( 0.01%)              self.map.borrow_mut().drain_filter(|_k, eval| eval.from_dfn >= dfn)
        .                   {
        .                       debug!(?fresh_trait_pred, ?eval, "on_completion");
        .           
        .                       op(fresh_trait_pred, eval.result, eval.dep_node);
        .                   }
        .               }
        .           }
        .           
-- line 2679 ----------------------------------------
-- line 2692 ----------------------------------------
        .                   TraitObligationStackList { cache: r.cache(), head: Some(r) }
        .               }
        .           
        .               fn head(&self) -> Option<&'o TraitObligationStack<'o, 'tcx>> {
        .                   self.head
        .               }
        .           
        .               fn depth(&self) -> usize {
  112,545 ( 0.01%)          if let Some(head) = self.head { head.depth } else { 0 }
        .               }
        .           }
        .           
        .           impl<'o, 'tcx> Iterator for TraitObligationStackList<'o, 'tcx> {
        .               type Item = &'o TraitObligationStack<'o, 'tcx>;
        .           
        .               fn next(&mut self) -> Option<&'o TraitObligationStack<'o, 'tcx>> {
  743,852 ( 0.04%)          let o = self.head?;
  439,124 ( 0.03%)          *self = o.previous;
        .                   Some(o)
        .               }
        .           }
        .           
        .           impl<'o, 'tcx> fmt::Debug for TraitObligationStack<'o, 'tcx> {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(f, "TraitObligationStack({:?})", self.obligation)
        .               }
-- line 2717 ----------------------------------------

2,207,597 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_transform/src/simplify.rs
--------------------------------------------------------------------------------
Ir               

-- line 38 ----------------------------------------
      .           use std::convert::TryInto;
      .           
      .           pub struct SimplifyCfg {
      .               label: String,
      .           }
      .           
      .           impl SimplifyCfg {
      .               pub fn new(label: &str) -> Self {
  4,780 ( 0.00%)          SimplifyCfg { label: format!("SimplifyCfg-{}", label) }
      .               }
      .           }
      .           
  5,640 ( 0.00%)  pub fn simplify_cfg<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {
  2,256 ( 0.00%)      CfgSimplifier::new(body).simplify();
  1,692 ( 0.00%)      remove_dead_blocks(tcx, body);
      .           
      .               // FIXME: Should probably be moved into some kind of pass manager
      .               body.basic_blocks_mut().raw.shrink_to_fit();
  2,152 ( 0.00%)  }
      .           
      .           impl<'tcx> MirPass<'tcx> for SimplifyCfg {
    536 ( 0.00%)      fn name(&self) -> Cow<'_, str> {
  1,608 ( 0.00%)          Cow::Borrowed(&self.label)
    536 ( 0.00%)      }
      .           
    536 ( 0.00%)      fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {
      .                   debug!("SimplifyCfg({:?}) - simplifying {:?}", self.label, body.source);
  1,128 ( 0.00%)          simplify_cfg(tcx, body);
      .               }
      .           }
      .           
      .           pub struct CfgSimplifier<'a, 'tcx> {
      .               basic_blocks: &'a mut IndexVec<BasicBlock, BasicBlockData<'tcx>>,
      .               pred_count: IndexVec<BasicBlock, u32>,
      .           }
      .           
      .           impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {
  3,948 ( 0.00%)      pub fn new(body: &'a mut Body<'tcx>) -> Self {
  1,128 ( 0.00%)          let mut pred_count = IndexVec::from_elem(0u32, body.basic_blocks());
      .           
      .                   // we can't use mir.predecessors() here because that counts
      .                   // dead blocks, which we don't want to.
  1,692 ( 0.00%)          pred_count[START_BLOCK] = 1;
      .           
 65,868 ( 0.00%)          for (_, data) in traversal::preorder(body) {
 42,633 ( 0.00%)              if let Some(ref term) = data.terminator {
 62,210 ( 0.00%)                  for &tgt in term.successors() {
 97,885 ( 0.01%)                      pred_count[tgt] += 1;
      .                           }
      .                       }
      .                   }
      .           
      .                   let basic_blocks = body.basic_blocks_mut();
      .           
  2,256 ( 0.00%)          CfgSimplifier { basic_blocks, pred_count }
  4,512 ( 0.00%)      }
      .           
  4,512 ( 0.00%)      pub fn simplify(mut self) {
    564 ( 0.00%)          self.strip_nops();
      .           
      .                   // Vec of the blocks that should be merged. We store the indices here, instead of the
      .                   // statements itself to avoid moving the (relatively) large statements twice.
      .                   // We do not push the statements directly into the target block (`bb`) as that is slower
      .                   // due to additional reallocations
      .                   let mut merged_blocks = Vec::new();
      .                   loop {
      .                       let mut changed = false;
      .           
  1,342 ( 0.00%)              for bb in self.basic_blocks.indices() {
 48,828 ( 0.00%)                  if self.pred_count[bb] == 0 {
      .                               continue;
      .                           }
      .           
      .                           debug!("simplifying {:?}", bb);
      .           
      .                           let mut terminator =
      .                               self.basic_blocks[bb].terminator.take().expect("invalid terminator state");
      .           
 59,706 ( 0.00%)                  for successor in terminator.successors_mut() {
      .                               self.collapse_goto_chain(successor, &mut changed);
      .                           }
      .           
      .                           let mut inner_changed = true;
      .                           merged_blocks.clear();
 61,538 ( 0.00%)                  while inner_changed {
      .                               inner_changed = false;
      .                               inner_changed |= self.simplify_branch(&mut terminator);
 20,818 ( 0.00%)                      inner_changed |= self.merge_successor(&mut merged_blocks, &mut terminator);
 62,454 ( 0.00%)                      changed |= inner_changed;
      .                           }
      .           
      .                           let statements_to_merge =
 21,686 ( 0.00%)                      merged_blocks.iter().map(|&i| self.basic_blocks[i].statements.len()).sum();
      .           
  1,476 ( 0.00%)                  if statements_to_merge > 0 {
      .                               let mut statements = std::mem::take(&mut self.basic_blocks[bb].statements);
      .                               statements.reserve(statements_to_merge);
    706 ( 0.00%)                      for &from in &merged_blocks {
  1,412 ( 0.00%)                          statements.append(&mut self.basic_blocks[from].statements);
      .                               }
  4,968 ( 0.00%)                      self.basic_blocks[bb].statements = statements;
      .                           }
      .           
616,962 ( 0.04%)                  self.basic_blocks[bb].terminator = Some(terminator);
      .                       }
      .           
  1,342 ( 0.00%)              if !changed {
      .                           break;
      .                       }
      .                   }
  4,512 ( 0.00%)      }
      .           
      .               /// This function will return `None` if
      .               /// * the block has statements
      .               /// * the block has a terminator other than `goto`
      .               /// * the block has no terminator (meaning some other part of the current optimization stole it)
      .               fn take_terminator_if_simple_goto(&mut self, bb: BasicBlock) -> Option<Terminator<'tcx>> {
203,819 ( 0.01%)          match self.basic_blocks[bb] {
      .                       BasicBlockData {
      .                           ref statements,
      .                           terminator:
      .                               ref mut terminator @ Some(Terminator { kind: TerminatorKind::Goto { .. }, .. }),
      .                           ..
  9,165 ( 0.00%)              } if statements.is_empty() => terminator.take(),
      .                       // if `terminator` is None, this means we are in a loop. In that
      .                       // case, let all the loop collapse to its entry.
      .                       _ => None,
      .                   }
      .               }
      .           
      .               /// Collapse a goto chain starting from `start`
      .               fn collapse_goto_chain(&mut self, start: &mut BasicBlock, changed: &mut bool) {
      .                   // Using `SmallVec` here, because in some logs on libcore oli-obk saw many single-element
      .                   // goto chains. We should probably benchmark different sizes.
      .                   let mut terminators: SmallVec<[_; 1]> = Default::default();
 84,234 ( 0.01%)          let mut current = *start;
104,279 ( 0.01%)          while let Some(terminator) = self.take_terminator_if_simple_goto(current) {
  2,110 ( 0.00%)              let target = match terminator {
  1,055 ( 0.00%)                  Terminator { kind: TerminatorKind::Goto { target }, .. } => target,
      .                           _ => unreachable!(),
      .                       };
 20,045 ( 0.00%)              terminators.push((current, terminator));
      .                       current = target;
      .                   }
      .                   let last = current;
 28,078 ( 0.00%)          *start = last;
 15,825 ( 0.00%)          while let Some((current, mut terminator)) = terminators.pop() {
  2,110 ( 0.00%)              let target = match terminator {
      .                           Terminator { kind: TerminatorKind::Goto { ref mut target }, .. } => target,
      .                           _ => unreachable!(),
      .                       };
  2,110 ( 0.00%)              *changed |= *target != last;
  2,110 ( 0.00%)              *target = last;
      .                       debug!("collapsing goto chain from {:?} to {:?}", current, target);
      .           
  2,110 ( 0.00%)              if self.pred_count[current] == 1 {
      .                           // This is the last reference to current, so the pred-count to
      .                           // to target is moved into the current block.
      .                           self.pred_count[current] = 0;
      .                       } else {
  1,088 ( 0.00%)                  self.pred_count[*target] += 1;
    816 ( 0.00%)                  self.pred_count[current] -= 1;
      .                       }
 34,815 ( 0.00%)              self.basic_blocks[current].terminator = Some(terminator);
      .                   }
      .               }
      .           
      .               // merge a block with 1 `goto` predecessor to its parent
      .               fn merge_successor(
      .                   &mut self,
      .                   merged_blocks: &mut Vec<BasicBlock>,
      .                   terminator: &mut Terminator<'tcx>,
      .               ) -> bool {
 50,183 ( 0.00%)          let target = match terminator.kind {
 23,444 ( 0.00%)              TerminatorKind::Goto { target } if self.pred_count[target] == 1 => target,
      .                       _ => return false,
      .                   };
      .           
      .                   debug!("merging block {:?} into {:?}", target, terminator);
 20,516 ( 0.00%)          *terminator = match self.basic_blocks[target].terminator.take() {
      .                       Some(terminator) => terminator,
      .                       None => {
      .                           // unreachable loop - this should not be possible, as we
      .                           // don't strand blocks, but handle it correctly.
      .                           return false;
      .                       }
      .                   };
      .           
      .                   merged_blocks.push(target);
  2,676 ( 0.00%)          self.pred_count[target] = 0;
      .           
      .                   true
      .               }
      .           
      .               // turn a branch with all successors identical to a goto
      .               fn simplify_branch(&mut self, terminator: &mut Terminator<'tcx>) -> bool {
 62,454 ( 0.00%)          match terminator.kind {
      .                       TerminatorKind::SwitchInt { .. } => {}
      .                       _ => return false,
      .                   };
      .           
      .                   let first_succ = {
  8,712 ( 0.00%)              if let Some(&first_succ) = terminator.successors().next() {
  4,356 ( 0.00%)                  if terminator.successors().all(|s| *s == first_succ) {
    327 ( 0.00%)                      let count = terminator.successors().count();
    654 ( 0.00%)                      self.pred_count[first_succ] -= (count - 1) as u32;
      .                               first_succ
      .                           } else {
      .                               return false;
      .                           }
      .                       } else {
      .                           return false;
      .                       }
      .                   };
      .           
      .                   debug!("simplifying branch {:?}", terminator);
    654 ( 0.00%)          terminator.kind = TerminatorKind::Goto { target: first_succ };
      .                   true
      .               }
      .           
      .               fn strip_nops(&mut self) {
      .                   for blk in self.basic_blocks.iter_mut() {
 59,898 ( 0.00%)              blk.statements.retain(|stmt| !matches!(stmt.kind, StatementKind::Nop))
      .                   }
      .               }
      .           }
      .           
  6,120 ( 0.00%)  pub fn remove_dead_blocks<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {
    612 ( 0.00%)      let reachable = traversal::reachable_as_bitset(body);
      .               let num_blocks = body.basic_blocks().len();
  1,224 ( 0.00%)      if num_blocks == reachable.count() {
      .                   return;
      .               }
      .           
      .               let basic_blocks = body.basic_blocks_mut();
      .               let mut replacements: Vec<_> = (0..num_blocks).map(BasicBlock::new).collect();
      .               let mut used_blocks = 0;
  9,238 ( 0.00%)      for alive_index in reachable.iter() {
      .                   let alive_index = alive_index.index();
  9,238 ( 0.00%)          replacements[alive_index] = BasicBlock::new(used_blocks);
 18,476 ( 0.00%)          if alive_index != used_blocks {
      .                       // Swap the next alive block data with the current available slot. Since
      .                       // alive_index is non-decreasing this is a valid operation.
      .                       basic_blocks.raw.swap(alive_index, used_blocks);
      .                   }
  9,238 ( 0.00%)          used_blocks += 1;
      .               }
      .           
    788 ( 0.00%)      if tcx.sess.instrument_coverage() {
      .                   save_unreachable_coverage(basic_blocks, used_blocks);
      .               }
      .           
      .               basic_blocks.raw.truncate(used_blocks);
      .           
      .               for block in basic_blocks {
 18,476 ( 0.00%)          for target in block.terminator_mut().successors_mut() {
 51,380 ( 0.00%)              *target = replacements[target.index()];
      .                   }
      .               }
  4,896 ( 0.00%)  }
      .           
      .           /// Some MIR transforms can determine at compile time that a sequences of
      .           /// statements will never be executed, so they can be dropped from the MIR.
      .           /// For example, an `if` or `else` block that is guaranteed to never be executed
      .           /// because its condition can be evaluated at compile time, such as by const
      .           /// evaluation: `if false { ... }`.
      .           ///
      .           /// Those statements are bypassed by redirecting paths in the CFG around the
-- line 305 ----------------------------------------
-- line 363 ----------------------------------------
      .                       })),
      .                   })
      .               }
      .           }
      .           
      .           pub struct SimplifyLocals;
      .           
      .           impl<'tcx> MirPass<'tcx> for SimplifyLocals {
     28 ( 0.00%)      fn is_enabled(&self, sess: &rustc_session::Session) -> bool {
     42 ( 0.00%)          sess.mir_opt_level() > 0
     28 ( 0.00%)      }
      .           
     14 ( 0.00%)      fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {
      .                   trace!("running SimplifyLocals on {:?}", body.source);
     14 ( 0.00%)          simplify_locals(body, tcx);
      .               }
      .           }
      .           
     98 ( 0.00%)  pub fn simplify_locals<'tcx>(body: &mut Body<'tcx>, tcx: TyCtxt<'tcx>) {
      .               // First, we're going to get a count of *actual* uses for every `Local`.
      .               let mut used_locals = UsedLocals::new(body);
      .           
      .               // Next, we're going to remove any `Local` with zero actual uses. When we remove those
      .               // `Locals`, we're also going to subtract any uses of other `Locals` from the `used_locals`
      .               // count. For example, if we removed `_2 = discriminant(_1)`, then we'll subtract one from
      .               // `use_counts[_1]`. That in turn might make `_1` unused, so we loop until we hit a
      .               // fixedpoint where there are no more unused locals.
-- line 389 ----------------------------------------
-- line 390 ----------------------------------------
      .               remove_unused_definitions(&mut used_locals, body);
      .           
      .               // Finally, we'll actually do the work of shrinking `body.local_decls` and remapping the `Local`s.
      .               let map = make_local_map(&mut body.local_decls, &used_locals);
      .           
      .               // Only bother running the `LocalUpdater` if we actually found locals to remove.
      .               if map.iter().any(Option::is_none) {
      .                   // Update references to all vars and tmps now
     84 ( 0.00%)          let mut updater = LocalUpdater { map, tcx };
      .                   updater.visit_body(body);
      .           
      .                   body.local_decls.shrink_to_fit();
      .               }
    112 ( 0.00%)  }
      .           
      .           /// Construct the mapping while swapping out unused stuff out from the `vec`.
      .           fn make_local_map<V>(
      .               local_decls: &mut IndexVec<Local, V>,
      .               used_locals: &UsedLocals,
      .           ) -> IndexVec<Local, Option<Local>> {
     28 ( 0.00%)      let mut map: IndexVec<Local, Option<Local>> = IndexVec::from_elem(None, &*local_decls);
      .               let mut used = Local::new(0);
      .           
     14 ( 0.00%)      for alive_index in local_decls.indices() {
      .                   // `is_used` treats the `RETURN_PLACE` and arguments as used.
  1,101 ( 0.00%)          if !used_locals.is_used(alive_index) {
      .                       continue;
      .                   }
      .           
    779 ( 0.00%)          map[alive_index] = Some(used);
    779 ( 0.00%)          if alive_index != used {
      .                       local_decls.swap(alive_index, used);
      .                   }
      .                   used.increment_by(1);
      .               }
      .               local_decls.truncate(used.index());
      .               map
      .           }
      .           
-- line 428 ----------------------------------------
-- line 431 ----------------------------------------
      .               increment: bool,
      .               arg_count: u32,
      .               use_count: IndexVec<Local, u32>,
      .           }
      .           
      .           impl UsedLocals {
      .               /// Determines which locals are used & unused in the given body.
      .               fn new(body: &Body<'_>) -> Self {
     98 ( 0.00%)          let mut this = Self {
      .                       increment: true,
     14 ( 0.00%)              arg_count: body.arg_count.try_into().unwrap(),
     42 ( 0.00%)              use_count: IndexVec::from_elem(0, &body.local_decls),
      .                   };
      .                   this.visit_body(body);
      .                   this
      .               }
      .           
      .               /// Checks if local is used.
      .               ///
      .               /// Return place and arguments are always considered used.
      .               fn is_used(&self, local: Local) -> bool {
      .                   trace!("is_used({:?}): use_count: {:?}", local, self.use_count[local]);
  6,909 ( 0.00%)          local.as_u32() <= self.arg_count || self.use_count[local] != 0
      .               }
      .           
      .               /// Updates the use counts to reflect the removal of given statement.
      .               fn statement_removed(&mut self, statement: &Statement<'_>) {
    211 ( 0.00%)          self.increment = false;
      .           
      .                   // The location of the statement is irrelevant.
      .                   let location = Location { block: START_BLOCK, statement_index: 0 };
  1,055 ( 0.00%)          self.visit_statement(statement, location);
      .               }
      .           
      .               /// Visits a left-hand side of an assignment.
  5,985 ( 0.00%)      fn visit_lhs(&mut self, place: &Place<'_>, location: Location) {
  4,788 ( 0.00%)          if place.is_indirect() {
      .                       // A use, not a definition.
      .                       self.visit_place(place, PlaceContext::MutatingUse(MutatingUseContext::Store), location);
      .                   } else {
      .                       // A definition. The base local itself is not visited, so this occurrence is not counted
      .                       // toward its use count. There might be other locals still, used in an indexing
      .                       // projection.
      .                       self.super_projection(
      .                           place.as_ref(),
      .                           PlaceContext::MutatingUse(MutatingUseContext::Projection),
      .                           location,
      .                       );
      .                   }
  4,788 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> Visitor<'tcx> for UsedLocals {
  5,985 ( 0.00%)      fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {
  5,985 ( 0.00%)          match statement.kind {
      .                       StatementKind::CopyNonOverlapping(..)
      .                       | StatementKind::Retag(..)
      .                       | StatementKind::Coverage(..)
      .                       | StatementKind::FakeRead(..)
      .                       | StatementKind::AscribeUserType(..) => {
      .                           self.super_statement(statement, location);
      .                       }
      .           
      .                       StatementKind::Nop => {}
      .           
      .                       StatementKind::StorageLive(_local) | StatementKind::StorageDead(_local) => {}
      .           
  1,087 ( 0.00%)              StatementKind::Assign(box (ref place, ref rvalue)) => {
  3,261 ( 0.00%)                  self.visit_lhs(place, location);
      .                           self.visit_rvalue(rvalue, location);
      .                       }
      .           
      .                       StatementKind::SetDiscriminant { ref place, variant_index: _ } => {
    770 ( 0.00%)                  self.visit_lhs(place, location);
      .                       }
      .                   }
  1,950 ( 0.00%)      }
      .           
      .               fn visit_local(&mut self, local: &Local, _ctx: PlaceContext, _location: Location) {
  4,482 ( 0.00%)          if self.increment {
  5,103 ( 0.00%)              self.use_count[*local] += 1;
      .                   } else {
    309 ( 0.00%)              assert_ne!(self.use_count[*local], 0);
    103 ( 0.00%)              self.use_count[*local] -= 1;
      .                   }
      .               }
      .           }
      .           
      .           /// Removes unused definitions. Updates the used locals to reflect the changes made.
      .           fn remove_unused_definitions(used_locals: &mut UsedLocals, body: &mut Body<'_>) {
      .               // The use counts are updated as we remove the statements. A local might become unused
      .               // during the retain operation, leading to a temporary inconsistency (storage statements or
      .               // definitions referencing the local might remain). For correctness it is crucial that this
      .               // computation reaches a fixed point.
      .           
      .               let mut modified = true;
    266 ( 0.00%)      while modified {
     28 ( 0.00%)          modified = false;
      .           
      .                   for data in body.basic_blocks_mut() {
      .                       // Remove unnecessary StorageLive and StorageDead annotations.
  5,264 ( 0.00%)              data.statements.retain(|statement| {
 11,006 ( 0.00%)                  let keep = match &statement.kind {
      .                               StatementKind::StorageLive(local) | StatementKind::StorageDead(local) => {
      .                                   used_locals.is_used(*local)
      .                               }
  3,082 ( 0.00%)                      StatementKind::Assign(box (place, _)) => used_locals.is_used(place.local),
      .           
      .                               StatementKind::SetDiscriminant { ref place, .. } => {
    440 ( 0.00%)                          used_locals.is_used(place.local)
      .                               }
      .                               _ => true,
      .                           };
      .           
  1,437 ( 0.00%)                  if !keep {
      .                               trace!("removing statement {:?}", statement);
    211 ( 0.00%)                      modified = true;
      .                               used_locals.statement_removed(statement);
      .                           }
      .           
      .                           keep
      .                       });
      .                   }
      .               }
      .           }
-- line 555 ----------------------------------------
-- line 560 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> MutVisitor<'tcx> for LocalUpdater<'tcx> {
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   self.tcx
      .               }
      .           
      .               fn visit_local(&mut self, l: &mut Local, _: PlaceContext, _: Location) {
  6,781 ( 0.00%)          *l = self.map[*l].unwrap();
      .               }
      .           }

247,186 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_transform/src/simplify.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 111 ----------------------------------------
         .           const EMPTY: u8 = 0b1111_1111;
         .           
         .           /// Control byte value for a deleted bucket.
         .           const DELETED: u8 = 0b1000_0000;
         .           
         .           /// Checks whether a control byte represents a full bucket (top bit is clear).
         .           #[inline]
         .           fn is_full(ctrl: u8) -> bool {
 1,425,796 ( 0.08%)      ctrl & 0x80 == 0
         .           }
         .           
         .           /// Checks whether a control byte represents a special value (top bit is set).
         .           #[inline]
         .           fn is_special(ctrl: u8) -> bool {
         .               ctrl & 0x80 != 0
         .           }
         .           
         .           /// Checks whether a special control value is EMPTY (just check 1 bit).
         .           #[inline]
         .           fn special_is_empty(ctrl: u8) -> bool {
         .               debug_assert!(is_special(ctrl));
   101,217 ( 0.01%)      ctrl & 0x01 != 0
         .           }
         .           
         .           /// Primary hash function, used to select the initial bucket to probe from.
         .           #[inline]
         .           #[allow(clippy::cast_possible_truncation)]
         .           fn h1(hash: u64) -> usize {
         .               // On 32-bit platforms we simply ignore the higher hash bits.
         .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
         .           /// Secondary hash function, saved in the low 7 bits of the control byte.
         .           #[inline]
         .           #[allow(clippy::cast_possible_truncation)]
         .           fn h2(hash: u64) -> u8 {
         .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
         .               // value, some hash functions (such as FxHash) produce a usize result
         .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
         .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
27,696,230 ( 1.65%)      let top7 = hash >> (hash_len * 8 - 7);
         .               (top7 & 0x7f) as u8 // truncation
         .           }
         .           
         .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
         .           /// table size is a power of two) to visit every group of elements exactly once.
         .           ///
         .           /// A triangular probe has us jump by 1 more group every time. So first we
         .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
         .               #[inline]
         .               fn move_next(&mut self, bucket_mask: usize) {
         .                   // We should have found an empty bucket by now and ended the probe.
         .                   debug_assert!(
         .                       self.stride <= bucket_mask,
         .                       "Went past end of probe sequence"
         .                   );
         .           
   208,704 ( 0.01%)          self.stride += Group::WIDTH;
   208,704 ( 0.01%)          self.pos += self.stride;
   162,132 ( 0.01%)          self.pos &= bucket_mask;
         .               }
         .           }
         .           
         .           /// Returns the number of buckets needed to hold the given number of items,
         .           /// taking the maximum load factor into account.
         .           ///
         .           /// Returns `None` if an overflow occurs.
         .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
         .           #[cfg_attr(target_os = "emscripten", inline(never))]
         .           #[cfg_attr(not(target_os = "emscripten"), inline)]
         .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
         .               debug_assert_ne!(cap, 0);
         .           
         .               // For small tables we require at least 1 empty bucket so that lookups are
         .               // guaranteed to terminate if an element doesn't exist in the table.
    90,548 ( 0.01%)      if cap < 8 {
         .                   // We don't bother with a table size of 2 buckets since that can only
         .                   // hold a single element. Instead we skip directly to a 4 bucket table
         .                   // which can hold 3 elements.
   185,875 ( 0.01%)          return Some(if cap < 4 { 4 } else { 8 });
         .               }
         .           
         .               // Otherwise require 1/8 buckets to be empty (87.5% load)
         .               //
         .               // Be careful when modifying this, calculate_layout relies on the
         .               // overflow check here.
    48,594 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
         .           
         .               // Any overflows will have been caught by the checked_mul. Also, any
         .               // rounding errors from the division above will be cleaned up by
         .               // next_power_of_two (which can't overflow because of the previous division).
         .               Some(adjusted_cap.next_power_of_two())
         .           }
         .           
         .           /// Returns the maximum effective capacity for the given bucket mask, taking
         .           /// the maximum load factor into account.
         .           #[inline]
         .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
   252,334 ( 0.02%)      if bucket_mask < 8 {
         .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
         .                   // Keep in mind that the bucket mask is one less than the bucket count.
         .                   bucket_mask
         .               } else {
         .                   // For larger tables we reserve 12.5% of the slots as empty.
    55,800 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
         .               }
         .           }
         .           
         .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
         .           /// while keeping the rest of `calculate_layout_for` independent of `T`
         .           #[derive(Copy, Clone)]
         .           struct TableLayout {
         .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
         .           
         .               #[inline]
         .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   let TableLayout { size, ctrl_align } = self;
         .                   // Manual layout calculation since Layout methods are not yet stable.
         .                   let ctrl_offset =
   166,645 ( 0.01%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
   237,802 ( 0.01%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
         .           
         .                   Some((
         .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
         .                       ctrl_offset,
         .                   ))
         .               }
         .           }
         .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
         .                   }
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub unsafe fn drop(&self) {
         .                   self.as_ptr().drop_in_place();
         .               }
         .               #[inline]
         .               pub unsafe fn read(&self) -> T {
       520 ( 0.00%)          self.as_ptr().read()
         .               }
         .               #[inline]
         .               pub unsafe fn write(&self, val: T) {
         .                   self.as_ptr().write(val);
         .               }
         .               #[inline]
         .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
         .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 392 ----------------------------------------
         .           
         .           impl<T> RawTable<T, Global> {
         .               /// Creates a new empty hash table without allocating any memory.
         .               ///
         .               /// In effect this returns a table with exactly 1 bucket. However we can
         .               /// leave the data pointer dangling since that bucket is never written to
         .               /// due to our load factor forcing us to always have at least 1 free bucket.
         .               #[inline]
        12 ( 0.00%)      pub const fn new() -> Self {
        32 ( 0.00%)          Self {
         8 ( 0.00%)              table: RawTableInner::new_in(Global),
         .                       marker: PhantomData,
         .                   }
         8 ( 0.00%)      }
         .           
         .               /// Attempts to allocate a new hash table with at least enough capacity
         .               /// for inserting the given number of elements without reallocating.
         .               #[cfg(feature = "raw")]
         .               pub fn try_with_capacity(capacity: usize) -> Result<Self, TryReserveError> {
         .                   Self::try_with_capacity_in(capacity, Global)
         .               }
         .           
-- line 413 ----------------------------------------
-- line 421 ----------------------------------------
         .           impl<T, A: Allocator + Clone> RawTable<T, A> {
         .               /// Creates a new empty hash table without allocating any memory, using the
         .               /// given allocator.
         .               ///
         .               /// In effect this returns a table with exactly 1 bucket. However we can
         .               /// leave the data pointer dangling since that bucket is never written to
         .               /// due to our load factor forcing us to always have at least 1 free bucket.
         .               #[inline]
        12 ( 0.00%)      pub fn new_in(alloc: A) -> Self {
       647 ( 0.00%)          Self {
         8 ( 0.00%)              table: RawTableInner::new_in(alloc),
         .                       marker: PhantomData,
         .                   }
         8 ( 0.00%)      }
         .           
         .               /// Allocates a new hash table with the given number of buckets.
         .               ///
         .               /// The control bytes are left uninitialized.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               unsafe fn new_uninitialized(
         .                   alloc: A,
         .                   buckets: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   Ok(Self {
       165 ( 0.00%)              table: RawTableInner::new_uninitialized(
         .                           alloc,
         .                           TableLayout::new::<T>(),
         .                           buckets,
         .                           fallibility,
         .                       )?,
         .                       marker: PhantomData,
         .                   })
         .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
         .               /// Attempts to allocate a new hash table with at least enough capacity
         .               /// for inserting the given number of elements without reallocating.
         .               fn fallible_with_capacity(
         .                   alloc: A,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   Ok(Self {
     6,195 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
         .                           alloc,
         .                           TableLayout::new::<T>(),
         .                           capacity,
         .                           fallibility,
         .                       )?,
         .                       marker: PhantomData,
         .                   })
         .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
         .                   debug_assert_ne!(self.table.bucket_mask, 0);
         .                   debug_assert!(index < self.buckets());
         .                   Bucket::from_base_index(self.data_end(), index)
         .               }
         .           
         .               /// Erases an element from the table without dropping it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    15,420 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    15,420 ( 0.00%)          let index = self.bucket_index(item);
         .                   self.table.erase(index);
    30,840 ( 0.00%)      }
         .           
         .               /// Erases an element from the table, dropping it in place.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::needless_pass_by_value)]
         .               #[allow(deprecated)]
         .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
         .                   // Erase the element from the table first since drop might panic.
     7,152 ( 0.00%)          self.erase_no_drop(&item);
         .                   item.drop();
         .               }
         .           
         .               /// Finds and erases an element from the table, dropping it in place.
         .               /// Returns true if an element was found.
         .               #[cfg(feature = "raw")]
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// Removes an element from the table, returning it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::needless_pass_by_value)]
         .               #[allow(deprecated)]
         .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    23,688 ( 0.00%)          self.erase_no_drop(&item);
        50 ( 0.00%)          item.read()
         .               }
         .           
         .               /// Finds and removes an element from the table, returning it.
         .               #[cfg_attr(feature = "inline-more", inline)]
   449,022 ( 0.03%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
       374 ( 0.00%)          match self.find(hash, eq) {
     4,444 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
    73,188 ( 0.00%)              None => None,
         .                   }
   616,857 ( 0.04%)      }
         .           
         .               /// Marks all table buckets as empty without dropping their contents.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn clear_no_drop(&mut self) {
         .                   self.table.clear_no_drop();
         .               }
         .           
         .               /// Removes all elements from the table without freeing the backing memory.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn clear(&mut self) {
         .                   // Ensure that the table is reset even if one of the drops panic
         .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
         .                   unsafe {
         1 ( 0.00%)              self_.drop_elements();
         .                   }
         .               }
         .           
         7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
    10,720 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
         .                       for item in self.iter() {
         .                           item.drop();
         .                       }
         .                   }
         8 ( 0.00%)      }
         .           
         .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
         .                   // Calculate the minimal number of elements that we need to reserve
         .                   // space for.
         .                   let min_size = usize::max(self.table.items, min_size);
         .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 641 ----------------------------------------
         .                           }
         .                       }
         .                   }
         .               }
         .           
         .               /// Ensures that at least `additional` items can be inserted into the table
         .               /// without reallocation.
         .               #[cfg_attr(feature = "inline-more", inline)]
        28 ( 0.00%)      pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
   264,417 ( 0.02%)          if additional > self.table.growth_left {
         .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
   157,111 ( 0.01%)              if self
         .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
         .                           .is_err()
         .                       {
         .                           unsafe { hint::unreachable_unchecked() }
         .                       }
         .                   }
        20 ( 0.00%)      }
         .           
         .               /// Tries to ensure that at least `additional` items can be inserted into
         .               /// the table without reallocation.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn try_reserve(
         .                   &mut self,
         .                   additional: usize,
         .                   hasher: impl Fn(&T) -> u64,
-- line 667 ----------------------------------------
-- line 671 ----------------------------------------
         .                   } else {
         .                       Ok(())
         .                   }
         .               }
         .           
         .               /// Out-of-line slow path for `reserve` and `try_reserve`.
         .               #[cold]
         .               #[inline(never)]
   361,448 ( 0.02%)      fn reserve_rehash(
         .                   &mut self,
         .                   additional: usize,
         .                   hasher: impl Fn(&T) -> u64,
         .                   fallibility: Fallibility,
         .               ) -> Result<(), TryReserveError> {
         .                   unsafe {
         .                       self.table.reserve_rehash_inner(
         .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
         .                           TableLayout::new::<T>(),
         .                           if mem::needs_drop::<T>() {
         .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
         .                           } else {
         .                               None
         .                           },
         .                       )
         .                   }
   247,888 ( 0.01%)      }
         .           
         .               /// Allocates a new table of a different size and moves the contents of the
         .               /// current table into it.
         .               fn resize(
         .                   &mut self,
         .                   capacity: usize,
         .                   hasher: impl Fn(&T) -> u64,
         .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
         .                       )
         .                   }
         .               }
         .           
         .               /// Inserts a new element into the table, and returns its raw bucket.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
 1,990,896 ( 0.12%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
         .                   unsafe {
         .                       let mut index = self.table.find_insert_slot(hash);
         .           
         .                       // We can avoid growing the table once we have reached our load
         .                       // factor if we are replacing a tombstone. This works since the
         .                       // number of EMPTY slots does not change in this case.
     4,009 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
 1,361,994 ( 0.08%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
         .                           self.reserve(1, hasher);
         .                           index = self.table.find_insert_slot(hash);
         .                       }
         .           
         .                       self.table.record_item_insert_at(index, old_ctrl, hash);
         .           
         .                       let bucket = self.bucket(index);
         2 ( 0.00%)              bucket.write(value);
         .                       bucket
         .                   }
 1,490,874 ( 0.09%)      }
         .           
         .               /// Attempts to insert a new element without growing the table and return its raw bucket.
         .               ///
         .               /// Returns an `Err` containing the given element if inserting it would require growing the
         .               /// table.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
         .                       }
         .                   }
         .               }
         .           
         .               /// Inserts a new element into the table, and returns a mutable reference to it.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
   591,384 ( 0.04%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
       880 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
   443,538 ( 0.03%)      }
         .           
         .               /// Inserts a new element into the table, without growing the table.
         .               ///
         .               /// There must be enough space in the table to insert the new element.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
     4,522 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
   284,528 ( 0.02%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
     6,133 ( 0.00%)          let bucket = self.table.bucket(index);
         .           
         .                   // If we are replacing a DELETED entry then we don't need to update
         .                   // the load counter.
   602,325 ( 0.04%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
         .           
         .                   bucket.write(value);
   472,755 ( 0.03%)          self.table.items += 1;
         .                   bucket
     8,339 ( 0.00%)      }
         .           
         .               /// Temporary removes a bucket, applying the given function to the removed
         .               /// element and optionally put back the returned value in the same bucket.
         .               ///
         .               /// Returns `true` if the bucket still contains an element
         .               ///
         .               /// This does not check if the given bucket is actually occupied.
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
         .                       true
         .                   } else {
         .                       false
         .                   }
         .               }
         .           
         .               /// Searches for an element in the table.
         .               #[inline]
     2,533 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
     2,217 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    22,080 ( 0.00%)              eq(self.bucket(index).as_ref())
       446 ( 0.00%)          });
         .           
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match result {
       142 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
         .                       None => None,
         .                   }
     3,138 ( 0.00%)      }
         .           
         .               /// Gets a reference to an element in the table.
         .               #[inline]
         .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
    10,167 ( 0.00%)          match self.find(hash, eq) {
         .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Gets a mutable reference to an element in the table.
         .               #[inline]
     2,574 ( 0.00%)      pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
     1,486 ( 0.00%)          match self.find(hash, eq) {
         .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
         .                       None => None,
         .                   }
     3,432 ( 0.00%)      }
         .           
         .               /// Attempts to get mutable references to `N` entries in the table at once.
         .               ///
         .               /// Returns an array of length `N` with the results of each query.
         .               ///
         .               /// At most one mutable reference will be returned to any entry. `None` will be returned if any
         .               /// of the hashes are duplicates. `None` will be returned if the hash is not found.
         .               ///
-- line 859 ----------------------------------------
-- line 913 ----------------------------------------
         .               /// more, but is guaranteed to be able to hold at least this many.
         .               #[inline]
         .               pub fn capacity(&self) -> usize {
         .                   self.table.items + self.table.growth_left
         .               }
         .           
         .               /// Returns the number of elements in the table.
         .               #[inline]
        32 ( 0.00%)      pub fn len(&self) -> usize {
        16 ( 0.00%)          self.table.items
        32 ( 0.00%)      }
         .           
         .               /// Returns `true` if the table contains no elements.
         .               #[inline]
        24 ( 0.00%)      pub fn is_empty(&self) -> bool {
   607,601 ( 0.04%)          self.len() == 0
        48 ( 0.00%)      }
         .           
         .               /// Returns the number of buckets in the table.
         .               #[inline]
         .               pub fn buckets(&self) -> usize {
         .                   self.table.bucket_mask + 1
         .               }
         .           
         .               /// Returns an iterator over every element in the table. It is up to
         .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
         .               /// Because we cannot make the `next` method unsafe on the `RawIter`
         .               /// struct, we have to make the `iter` method unsafe.
         .               #[inline]
         .               pub unsafe fn iter(&self) -> RawIter<T> {
         1 ( 0.00%)          let data = Bucket::from_base_index(self.data_end(), 0);
         .                   RawIter {
         .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
    94,599 ( 0.01%)              items: self.table.items,
         .                   }
         .               }
         .           
         .               /// Returns an iterator over occupied buckets that could match a given hash.
         .               ///
         .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
         .               /// return items that have a hash value different than the one provided. You
         .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
         .               /// Iteration starts at the provided iterator's current location.
         .               ///
         .               /// It is up to the caller to ensure that the iterator is valid for this
         .               /// `RawTable` and covers all items that remain in the table.
         .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
         .                   debug_assert_eq!(iter.len(), self.len());
         .           
         .                   let alloc = self.table.alloc.clone();
     4,424 ( 0.00%)          let allocation = self.into_allocation();
     3,318 ( 0.00%)          RawIntoIter {
     5,530 ( 0.00%)              iter,
         .                       allocation,
         .                       marker: PhantomData,
         .                       alloc,
         .                   }
         .               }
         .           
         .               /// Converts the table into a raw allocation. The contents of the table
         .               /// should be dropped using a `RawIter` before freeing the allocation.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
     1,862 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
         .                       None
         .                   } else {
         .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
         .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
         .                           Some(lco) => lco,
         .                           None => unsafe { hint::unreachable_unchecked() },
         .                       };
         .                       Some((
       424 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
         .                           layout,
         .                       ))
         .                   };
         .                   mem::forget(self);
         .                   alloc
         .               }
         .           }
         .           
-- line 1033 ----------------------------------------
-- line 1041 ----------------------------------------
         .           where
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           impl<A> RawTableInner<A> {
         .               #[inline]
        24 ( 0.00%)      const fn new_in(alloc: A) -> Self {
   476,642 ( 0.03%)          Self {
         .                       // Be careful to cast the entire slice to a raw pointer.
        56 ( 0.00%)              ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
         .                       bucket_mask: 0,
         .                       items: 0,
         .                       growth_left: 0,
         .                       alloc,
         .                   }
        16 ( 0.00%)      }
         .           }
         .           
         .           impl<A: Allocator + Clone> RawTableInner<A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
   281,525 ( 0.02%)      unsafe fn new_uninitialized(
         .                   alloc: A,
         .                   table_layout: TableLayout,
         .                   buckets: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
         .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
         .                   // such allocations will never succeed anyways.
         .                   //
         .                   // This mirrors what Vec does in the standard library.
         .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
         .                       return Err(fallibility.capacity_overflow());
         .                   }
         .           
    66,666 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
         .                       Ok(block) => block.cast(),
         .                       Err(_) => return Err(fallibility.alloc_err(layout)),
         .                   };
         .           
         .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
   157,704 ( 0.01%)          Ok(Self {
         .                       ctrl,
    71,591 ( 0.00%)              bucket_mask: buckets - 1,
         .                       items: 0,
         .                       growth_left: bucket_mask_to_capacity(buckets - 1),
         .                       alloc,
         .                   })
   205,206 ( 0.01%)      }
         .           
         .               #[inline]
    18,965 ( 0.00%)      fn fallible_with_capacity(
         .                   alloc: A,
         .                   table_layout: TableLayout,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
     4,874 ( 0.00%)          if capacity == 0 {
     3,366 ( 0.00%)              Ok(Self::new_in(alloc))
         .                   } else {
         .                       unsafe {
         .                           let buckets =
         .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
         .           
   126,665 ( 0.01%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
         .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
         .           
    10,375 ( 0.00%)                  Ok(result)
         .                       }
         .                   }
    18,965 ( 0.00%)      }
         .           
         .               /// Searches for an empty or deleted bucket which is suitable for inserting
         .               /// a new element and sets the hash for that slot.
         .               ///
         .               /// There must be at least 1 empty bucket in the table.
         .               #[inline]
    97,225 ( 0.01%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
         .                   let index = self.find_insert_slot(hash);
    97,225 ( 0.01%)          let old_ctrl = *self.ctrl(index);
         .                   self.set_ctrl_h2(index, hash);
         .                   (index, old_ctrl)
   194,450 ( 0.01%)      }
         .           
         .               /// Searches for an empty or deleted bucket which is suitable for inserting
         .               /// a new element.
         .               ///
         .               /// There must be at least 1 empty bucket in the table.
         .               #[inline]
         .               fn find_insert_slot(&self, hash: u64) -> usize {
         .                   let mut probe_seq = self.probe_seq(hash);
         .                   loop {
         .                       unsafe {
         .                           let group = Group::load(self.ctrl(probe_seq.pos));
   928,789 ( 0.06%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
 2,704,154 ( 0.16%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
         .           
         .                               // In tables smaller than the group width, trailing control
         .                               // bytes outside the range of the table are filled with
         .                               // EMPTY entries. These will unfortunately trigger a
         .                               // match, but once masked may point to a full bucket that
         .                               // is already occupied. We detect this situation here and
         .                               // perform a second scan starting at the beginning of the
         .                               // table. This second scan is guaranteed to find an empty
         .                               // slot (due to the load factor) before hitting the trailing
         .                               // control bytes (containing EMPTY).
 1,241,545 ( 0.07%)                      if unlikely(is_full(*self.ctrl(result))) {
         .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
         .                                   debug_assert_ne!(probe_seq.pos, 0);
         .                                   return Group::load_aligned(self.ctrl(0))
         .                                       .match_empty_or_deleted()
         .                                       .lowest_set_bit_nonzero();
         .                               }
         .           
         .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
         .           
         .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
         .               /// code generated, but it is eliminated by LLVM optimizations.
         .               #[inline]
         .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
         .                   let h2_hash = h2(hash);
         .                   let mut probe_seq = self.probe_seq(hash);
         .           
    79,036 ( 0.00%)          loop {
         .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
         .           
 2,906,811 ( 0.17%)              for bit in group.match_byte(h2_hash) {
 5,646,210 ( 0.34%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
         .           
 3,292,112 ( 0.20%)                  if likely(eq(index)) {
         .                               return Some(index);
         .                           }
         .                       }
         .           
   866,995 ( 0.05%)              if likely(group.match_empty().any_bit_set()) {
         .                           return None;
         .                       }
         .           
         .                       probe_seq.move_next(self.bucket_mask);
         .                   }
         .               }
         .           
         .               #[allow(clippy::mut_mut)]
-- line 1198 ----------------------------------------
-- line 1225 ----------------------------------------
         .                   Bucket::from_base_index(self.data_end(), index)
         .               }
         .           
         .               #[inline]
         .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
         .                   debug_assert_ne!(self.bucket_mask, 0);
         .                   debug_assert!(index < self.buckets());
         .                   let base: *mut u8 = self.data_end().as_ptr();
 3,430,912 ( 0.20%)          base.sub((index + 1) * size_of)
         .               }
         .           
         .               #[inline]
         .               unsafe fn data_end<T>(&self) -> NonNull<T> {
         .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
         .               }
         .           
         .               /// Returns an iterator-like object for a probe sequence on the table.
         .               ///
         .               /// This iterator never terminates, but is guaranteed to visit each bucket
         .               /// group exactly once. The loop using `probe_seq` must terminate upon
         .               /// reaching a group containing an empty bucket.
         .               #[inline]
         .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
         .                   ProbeSeq {
16,005,852 ( 0.95%)              pos: h1(hash) & self.bucket_mask,
         .                       stride: 0,
         .                   }
         .               }
         .           
         .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
         .               /// in the table, otherwise returns error
         .               #[cfg(feature = "raw")]
         .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
         .                   } else {
         .                       self.record_item_insert_at(index, old_ctrl, hash);
         .                       Ok(index)
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
 1,702,100 ( 0.10%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
         .                   self.set_ctrl_h2(index, hash);
 1,361,680 ( 0.08%)          self.items += 1;
         .               }
         .           
         .               #[inline]
         .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
         .                   let probe_seq_pos = self.probe_seq(hash).pos;
         .                   let probe_index =
         .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
         .                   probe_index(i) == probe_index(new_i)
-- line 1281 ----------------------------------------
-- line 1312 ----------------------------------------
         .                   // replicate the buckets at the end of the trailing group. For example
         .                   // with 2 buckets and a group size of 4, the control bytes will look
         .                   // like this:
         .                   //
         .                   //     Real    |             Replicated
         .                   // ---------------------------------------------
         .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
         .                   // ---------------------------------------------
 2,611,503 ( 0.16%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
         .           
   870,501 ( 0.05%)          *self.ctrl(index) = ctrl;
   870,665 ( 0.05%)          *self.ctrl(index2) = ctrl;
         .               }
         .           
         .               /// Returns a pointer to a control byte.
         .               #[inline]
         .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
         .                   debug_assert!(index < self.num_ctrl_bytes());
         .                   self.ctrl.as_ptr().add(index)
         .               }
         .           
         .               #[inline]
         .               fn buckets(&self) -> usize {
   249,098 ( 0.01%)          self.bucket_mask + 1
         .               }
         .           
         .               #[inline]
         .               fn num_ctrl_bytes(&self) -> usize {
   165,814 ( 0.01%)          self.bucket_mask + 1 + Group::WIDTH
         .               }
         .           
         .               #[inline]
        16 ( 0.00%)      fn is_empty_singleton(&self) -> bool {
   885,537 ( 0.05%)          self.bucket_mask == 0
        32 ( 0.00%)      }
         .           
         .               #[allow(clippy::mut_mut)]
         .               #[inline]
         .               unsafe fn prepare_resize(
         .                   &self,
         .                   table_layout: TableLayout,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
         .                   debug_assert!(self.items <= capacity);
         .           
         .                   // Allocate and initialize the new table.
     2,532 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
         .                       self.alloc.clone(),
         .                       table_layout,
         .                       capacity,
         .                       fallibility,
         .                   )?;
    98,389 ( 0.01%)          new_table.growth_left -= self.items;
         .                   new_table.items = self.items;
         .           
         .                   // The hash function may panic, in which case we simply free the new
         .                   // table without dropping any elements that may have been copied into
         .                   // it.
         .                   //
         .                   // This guard is also used to free the old table on success, see
         .                   // the comment at the bottom of this function.
         .                   Ok(guard(new_table, move |self_| {
    44,385 ( 0.00%)              if !self_.is_empty_singleton() {
         .                           self_.free_buckets(table_layout);
         .                       }
         .                   }))
         .               }
         .           
         .               /// Reserves or rehashes to make room for `additional` more elements.
         .               ///
         .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
         .                   &mut self,
         .                   additional: usize,
         .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
         .                   fallibility: Fallibility,
         .                   layout: TableLayout,
         .                   drop: Option<fn(*mut u8)>,
         .               ) -> Result<(), TryReserveError> {
         .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
    88,777 ( 0.01%)          let new_items = match self.items.checked_add(additional) {
         .                       Some(new_items) => new_items,
         .                       None => return Err(fallibility.capacity_overflow()),
         .                   };
    88,770 ( 0.01%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
   187,942 ( 0.01%)          if new_items <= full_capacity / 2 {
         .                       // Rehash in-place without re-allocating if we have plenty of spare
         .                       // capacity that is locked up due to DELETED entries.
         .                       self.rehash_in_place(hasher, layout.size, drop);
         .                       Ok(())
         .                   } else {
         .                       // Otherwise, conservatively resize to at least the next size up
         .                       // to avoid churning deletes into frequent rehashes.
         .                       self.resize_inner(
    44,385 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
         .                           hasher,
         .                           fallibility,
         .                           layout,
         .                       )
         .                   }
         .               }
         .           
         .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
         .               #[inline(always)]
         .               unsafe fn resize_inner(
         .                   &mut self,
         .                   capacity: usize,
         .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
         .                   fallibility: Fallibility,
         .                   layout: TableLayout,
         .               ) -> Result<(), TryReserveError> {
     6,223 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
         .           
         .                   // Copy all elements to the new table.
         .                   for i in 0..self.buckets() {
   524,671 ( 0.03%)              if !is_full(*self.ctrl(i)) {
         .                           continue;
         .                       }
         .           
         .                       // This may panic.
         .                       let hash = hasher(self, i);
         .           
         .                       // We can use a simpler version of insert() here since:
         .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
         .                   }
         .           
         .                   // We successfully copied all elements without panicking. Now replace
         .                   // self with the new table. The old table will have its memory freed but
         .                   // the items will not be dropped (since they have been moved into the
         .                   // new table).
         .                   mem::swap(self, &mut new_table);
         .           
    44,385 ( 0.00%)          Ok(())
         .               }
         .           
         .               /// Rehashes the contents of the table in place (i.e. without changing the
         .               /// allocation).
         .               ///
         .               /// If `hasher` panics then some the table's contents may be lost.
         .               ///
         .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1554 ----------------------------------------
         .               #[inline]
         .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
         .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
         .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
         .                       Some(lco) => lco,
         .                       None => hint::unreachable_unchecked(),
         .                   };
         .                   self.alloc.deallocate(
    29,774 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
         .                       layout,
         .                   );
         .               }
         .           
         .               /// Marks all table buckets as empty without dropping their contents.
         .               #[inline]
         .               fn clear_no_drop(&mut self) {
     5,789 ( 0.00%)          if !self.is_empty_singleton() {
         .                       unsafe {
         .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
         .                       }
         .                   }
     6,654 ( 0.00%)          self.items = 0;
     5,789 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
         .               }
         .           
         .               #[inline]
         .               unsafe fn erase(&mut self, index: usize) {
         .                   debug_assert!(is_full(*self.ctrl(index)));
    81,341 ( 0.00%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
         .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
         .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
         .           
         .                   // If we are inside a continuous block of Group::WIDTH full or deleted
         .                   // cells then a probe window may have seen a full block when trying to
         .                   // insert. We therefore need to keep that block non-empty so that
         .                   // lookups will continue searching to the next probe window.
         .                   //
         .                   // Note that in this context `leading_zeros` refers to the bytes at the
         .                   // end of a group, while `trailing_zeros` refers to the bytes at the
         .                   // beginning of a group.
   325,364 ( 0.02%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
         .                       DELETED
         .                   } else {
   401,755 ( 0.02%)              self.growth_left += 1;
         .                       EMPTY
         .                   };
         .                   self.set_ctrl(index, ctrl);
   325,364 ( 0.02%)          self.items -= 1;
         .               }
         .           }
         .           
         .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
     1,656 ( 0.00%)      fn clone(&self) -> Self {
       244 ( 0.00%)          if self.table.is_empty_singleton() {
         .                       Self::new_in(self.table.alloc.clone())
         .                   } else {
         .                       unsafe {
         .                           let mut new_table = ManuallyDrop::new(
         .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
         .                               match Self::new_uninitialized(
         .                                   self.table.alloc.clone(),
         .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
         .                               // We need to free the memory allocated for the new table.
         .                               new_table.free_buckets();
         .                           });
         .           
         .                           // Return the newly created table.
         .                           ManuallyDrop::into_inner(new_table)
         .                       }
         .                   }
     1,863 ( 0.00%)      }
         .           
         .               fn clone_from(&mut self, source: &Self) {
         .                   if source.table.is_empty_singleton() {
         .                       *self = Self::new_in(self.table.alloc.clone());
         .                   } else {
         .                       unsafe {
         .                           // First, drop all our elements without clearing the control bytes.
         .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
         .                       .table
         .                       .ctrl(0)
         .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
         .                   source
         .                       .data_start()
         .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
         .           
         .                   self.table.items = source.table.items;
        66 ( 0.00%)          self.table.growth_left = source.table.growth_left;
         .               }
         .           }
         .           
         .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
         .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
         .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
         .               fn default() -> Self {
         .                   Self::new_in(Default::default())
         .               }
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
   395,429 ( 0.02%)      fn drop(&mut self) {
   381,847 ( 0.02%)          if !self.table.is_empty_singleton() {
         .                       unsafe {
         .                           self.drop_elements();
         .                           self.free_buckets();
         .                       }
         .                   }
   413,416 ( 0.02%)      }
         .           }
         .           #[cfg(not(feature = "nightly"))]
         .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn drop(&mut self) {
         .                   if !self.table.is_empty_singleton() {
         .                       unsafe {
         .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
         .               type Item = T;
         .               type IntoIter = RawIntoIter<T, A>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
     4,424 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
         .                   unsafe {
         .                       let iter = self.iter();
         .                       self.into_iter_from(iter)
         .                   }
     5,530 ( 0.00%)      }
         .           }
         .           
         .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
         .           /// not track an item count.
         .           pub(crate) struct RawIterRange<T> {
         .               // Mask of full buckets in the current group. Bits are cleared from this
         .               // mask as each element is processed.
         .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
         .           
         .           impl<T> Iterator for RawIterRange<T> {
         .               type Item = Bucket<T>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<Bucket<T>> {
         .                   unsafe {
         .                       loop {
   298,482 ( 0.02%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    35,287 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    28,193 ( 0.00%)                      return Some(self.data.next_n(index));
         .                           }
         .           
   199,272 ( 0.01%)                  if self.next_ctrl >= self.end {
         .                               return None;
         .                           }
         .           
         .                           // We might read past self.end up to the next group boundary,
         .                           // but this is fine because it only occurs on tables smaller
         .                           // than the group size where the trailing control bytes are all
         .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
         .                           // to the group size (since tables are power-of-two sized).
    20,041 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
     2,290 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
    57,197 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
         .                       }
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   // We don't have an item count, so just guess based on the range size.
         .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
         .                           }
         .                       } else {
         .                           // We must have already iterated past the removed item.
         .                       }
         .                   }
         .               }
         .           
         .               unsafe fn drop_elements(&mut self) {
     1,252 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
         .                       for item in self {
         .                           item.drop();
         .                       }
         .                   }
         .               }
         .           }
         .           
         .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<T> Iterator for RawIter<T> {
         .               type Item = Bucket<T>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
    20,725 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
    92,048 ( 0.01%)          if let Some(b) = self.iter.next() {
   310,630 ( 0.02%)              self.items -= 1;
         .                       Some(b)
         .                   } else {
         .                       // We don't check against items == 0 here to allow the
         .                       // compiler to optimize away the item count entirely if the
         .                       // iterator length is never queried.
         .                       debug_assert_eq!(self.items, 0);
         .                       None
         .                   }
    41,450 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   (self.items, Some(self.items))
         .               }
         .           }
         .           
         .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
     2,348 ( 0.00%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements
         .                       self.iter.drop_elements();
         .           
         .                       // Free the table
     8,783 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
         .                           self.alloc.deallocate(ptr, layout);
         .                       }
         .                   }
       500 ( 0.00%)      }
         .           }
         .           #[cfg(not(feature = "nightly"))]
         .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements
         .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
         .               type Item = T;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
       489 ( 0.00%)      fn next(&mut self) -> Option<T> {
       459 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
       978 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         3 ( 0.00%)          self.iter.size_hint()
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
         .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
         .           
         .           /// Iterator which consumes elements without freeing the table storage.
         .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
         .           where
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
       440 ( 0.00%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements. Note that this may panic.
         .                       self.iter.drop_elements();
         .           
         .                       // Reset the contents of the table now that all elements have been
         .                       // dropped.
         .                       self.table.clear_no_drop();
         .           
         .                       // Move the now empty table back to its original location.
        55 ( 0.00%)              self.orig_table
         .                           .as_ptr()
         .                           .copy_from_nonoverlapping(&*self.table, 1);
         .                   }
       440 ( 0.00%)      }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
         .               type Item = T;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<T> {
         .                   unsafe {
-- line 2289 ----------------------------------------

 9,598,835 ( 0.57%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/buffer.rs
--------------------------------------------------------------------------------
Ir                 

-- line 13 ----------------------------------------
        .               reserve: extern "C" fn(Buffer<T>, usize) -> Buffer<T>,
        .               drop: extern "C" fn(Buffer<T>),
        .           }
        .           
        .           unsafe impl<T: Copy + Sync> Sync for Buffer<T> {}
        .           unsafe impl<T: Copy + Send> Send for Buffer<T> {}
        .           
        .           impl<T: Copy> Default for Buffer<T> {
      216 ( 0.00%)      fn default() -> Self {
      288 ( 0.00%)          Self::from(vec![])
      144 ( 0.00%)      }
        .           }
        .           
        .           impl<T: Copy> Deref for Buffer<T> {
        .               type Target = [T];
       36 ( 0.00%)      fn deref(&self) -> &[T] {
  241,900 ( 0.01%)          unsafe { slice::from_raw_parts(self.data as *const T, self.len) }
       24 ( 0.00%)      }
        .           }
        .           
        .           impl<T: Copy> DerefMut for Buffer<T> {
        .               fn deref_mut(&mut self) -> &mut [T] {
        .                   unsafe { slice::from_raw_parts_mut(self.data, self.len) }
        .               }
        .           }
        .           
        .           impl<T: Copy> Buffer<T> {
        .               pub(super) fn new() -> Self {
        .                   Self::default()
        .               }
        .           
       24 ( 0.00%)      pub(super) fn clear(&mut self) {
  511,717 ( 0.03%)          self.len = 0;
       24 ( 0.00%)      }
        .           
      288 ( 0.00%)      pub(super) fn take(&mut self) -> Self {
       72 ( 0.00%)          mem::take(self)
      144 ( 0.00%)      }
        .           
        .               // We have the array method separate from extending from a slice. This is
        .               // because in the case of small arrays, codegen can be more efficient
        .               // (avoiding a memmove call). With extend_from_slice, LLVM at least
        .               // currently is not able to make that optimization.
       60 ( 0.00%)      pub(super) fn extend_from_array<const N: usize>(&mut self, xs: &[T; N]) {
1,094,641 ( 0.07%)          if xs.len() > (self.capacity - self.len) {
        .                       let b = self.take();
      504 ( 0.00%)              *self = (b.reserve)(b, xs.len());
        .                   }
        .                   unsafe {
  187,276 ( 0.01%)              xs.as_ptr().copy_to_nonoverlapping(self.data.add(self.len), xs.len());
  563,802 ( 0.03%)              self.len += xs.len();
        .                   }
       24 ( 0.00%)      }
        .           
   14,364 ( 0.00%)      pub(super) fn extend_from_slice(&mut self, xs: &[T]) {
   94,212 ( 0.01%)          if xs.len() > (self.capacity - self.len) {
        .                       let b = self.take();
      504 ( 0.00%)              *self = (b.reserve)(b, xs.len());
        .                   }
        .                   unsafe {
       24 ( 0.00%)              xs.as_ptr().copy_to_nonoverlapping(self.data.add(self.len), xs.len());
   47,106 ( 0.00%)              self.len += xs.len();
        .                   }
   16,758 ( 0.00%)      }
        .           
       72 ( 0.00%)      pub(super) fn push(&mut self, v: T) {
        .                   // The code here is taken from Vec::push, and we know that reserve()
        .                   // will panic if we're exceeding isize::MAX bytes and so there's no need
        .                   // to check for overflow.
1,268,191 ( 0.08%)          if self.len == self.capacity {
        .                       let b = self.take();
        .                       *self = (b.reserve)(b, 1);
        .                   }
        .                   unsafe {
  846,713 ( 0.05%)              *self.data.add(self.len) = v;
  737,549 ( 0.04%)              self.len += 1;
        .                   }
       24 ( 0.00%)      }
        .           }
        .           
        .           impl Write for Buffer<u8> {
        .               fn write(&mut self, xs: &[u8]) -> io::Result<usize> {
        .                   self.extend_from_slice(xs);
        .                   Ok(xs.len())
        .               }
        .           
   79,848 ( 0.00%)      fn write_all(&mut self, xs: &[u8]) -> io::Result<()> {
    7,182 ( 0.00%)          self.extend_from_slice(xs);
        .                   Ok(())
  119,772 ( 0.01%)      }
        .           
        .               fn flush(&mut self) -> io::Result<()> {
        .                   Ok(())
        .               }
        .           }
        .           
        .           impl<T: Copy> Drop for Buffer<T> {
      108 ( 0.00%)      fn drop(&mut self) {
       72 ( 0.00%)          let b = self.take();
1,291,044 ( 0.08%)          (b.drop)(b);
       72 ( 0.00%)      }
        .           }
        .           
        .           impl<T: Copy> From<Vec<T>> for Buffer<T> {
      432 ( 0.00%)      fn from(mut v: Vec<T>) -> Self {
    1,872 ( 0.00%)          let (data, len, capacity) = (v.as_mut_ptr(), v.len(), v.capacity());
      576 ( 0.00%)          mem::forget(v);
        .           
        .                   // This utility function is nested in here because it can *only*
        .                   // be safely called on `Buffer`s created by *this* `proc_macro`.
      108 ( 0.00%)          fn to_vec<T: Copy>(b: Buffer<T>) -> Vec<T> {
        .                       unsafe {
      324 ( 0.00%)                  let Buffer { data, len, capacity, .. } = b;
      180 ( 0.00%)                  mem::forget(b);
       36 ( 0.00%)                  Vec::from_raw_parts(data, len, capacity)
        .                       }
       72 ( 0.00%)          }
        .           
      192 ( 0.00%)          extern "C" fn reserve<T: Copy>(b: Buffer<T>, additional: usize) -> Buffer<T> {
      144 ( 0.00%)              let mut v = to_vec(b);
        .                       v.reserve(additional);
      144 ( 0.00%)              Buffer::from(v)
      192 ( 0.00%)          }
        .           
       72 ( 0.00%)          extern "C" fn drop<T: Copy>(b: Buffer<T>) {
  107,842 ( 0.01%)              mem::drop(to_vec(b));
  107,602 ( 0.01%)          }
        .           
      936 ( 0.00%)          Buffer { data, len, capacity, reserve, drop }
      144 ( 0.00%)      }
        .           }

  556,758 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/buffer.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
  305,536 ( 0.02%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
      226 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    2,178 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
       39 ( 0.00%)      LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
        .                   local_path: Option<PathBuf>,
        .                   /// `virtual_name` is the stable path rustc will store internally within
-- line 175 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    5,641 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
       20 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
       80 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 224 ----------------------------------------
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    4,480 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
       11 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
       10 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
        .               pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
       10 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
   11,579 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
   13,238 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        .               QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
-- line 281 ----------------------------------------
-- line 288 ----------------------------------------
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
       70 ( 0.00%)      fn from(p: PathBuf) -> Self {
       20 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
       60 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
       70 ( 0.00%)      }
        .           }
        .           
        2 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
       40 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
       60 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
       60 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
       50 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
        .               pub fn to_string_lossy(&self) -> Cow<'_, str> {
        .                   match self.inner {
        .                       FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
        .               }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
    2,120 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
-- line 353 ----------------------------------------
-- line 357 ----------------------------------------
        .               }
        .           
        .               pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
        .               }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
       10 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
       20 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
      120 ( 0.00%)      pub lo: BytePos,
      120 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
      357 ( 0.00%)      pub ctxt: SyntaxContext,
      119 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
  111,681 ( 0.01%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
      555 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
   51,696 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
   38,772 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
   51,696 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
   37,323 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
   24,882 ( 0.00%)      }
        .               #[inline]
    2,816 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
    2,816 ( 0.00%)      }
        .               #[inline]
    9,711 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
    6,474 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
    2,365 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
    1,419 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
      135 ( 0.00%)      pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
       90 ( 0.00%)      }
        .           
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
        .                   self.data_untracked().is_dummy()
        .               }
        .           
        .               /// Returns `true` if this span comes from a macro or desugaring.
-- line 574 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// Returns a new span representing an empty span at the beginning of this span.
        .               #[inline]
        .               pub fn shrink_to_lo(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_hi(span.lo)
        .               }
        .               /// Returns a new span representing an empty span at the end of this span.
        .               #[inline]
      111 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_lo(span.hi)
       74 ( 0.00%)      }
        .           
        .               #[inline]
        .               /// Returns `true` if `hi == lo`.
        .               pub fn is_empty(self) -> bool {
        .                   let span = self.data_untracked();
        .                   span.hi == span.lo
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
    1,665 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
    1,110 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
-- line 638 ----------------------------------------
-- line 663 ----------------------------------------
        .               /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,
        .               /// if any.
        .               pub fn parent_callsite(self) -> Option<Span> {
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(expn_data.call_site) } else { None }
        .               }
        .           
        .               /// Walk down the expansion ancestors to find a span that's contained within `outer`.
    1,350 ( 0.00%)      pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
      675 ( 0.00%)          while !outer.contains(self) {
        .                       self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
    1,485 ( 0.00%)      }
        .           
        .               /// Edition of the crate from which this span came.
   10,086 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
    6,724 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
    2,213 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
    1,184 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
    1,219 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
    1,005 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
      201 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
      804 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
    9,821 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
    8,418 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
    7,015 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
       60 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
       72 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
       48 ( 0.00%)      }
        .           
        .               /// Checks if a span is "internal" to a macro in which `unsafe`
        .               /// can be used without triggering the `unsafe_code` lint.
        .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
        .               pub fn allows_unsafe(self) -> bool {
        .                   self.ctxt().outer_expn_data().allow_internal_unsafe
        .               }
        .           
-- line 745 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
  232,595 ( 0.01%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
   41,863 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
      427 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
      349 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
  145,194 ( 0.01%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
  190,305 ( 0.01%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
      759 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
      483 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
      552 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
    1,155 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
      210 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
      735 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
      945 ( 0.00%)      }
        .           
      462 ( 0.00%)      pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
      294 ( 0.00%)      }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
    1,144 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
       28 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
       24 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
    7,176 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
    4,186 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
   12,195 ( 0.00%)          span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
        .               pub fn remove_mark(&mut self) -> ExpnId {
      190 ( 0.00%)          let mut span = self.data();
      190 ( 0.00%)          let mark = span.ctxt.remove_mark();
      760 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
   32,679 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
   21,786 ( 0.00%)          let mut span = self.data();
   17,971 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
   32,679 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
   36,126 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
-- line 922 ----------------------------------------
-- line 929 ----------------------------------------
        .               ) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
   29,040 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
   25,410 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
      826 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1048 ----------------------------------------
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_span(primary_span: Span) -> MultiSpan {
    2,220 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
       90 ( 0.00%)          MultiSpan { primary_spans: vec, span_labels: vec![] }
        .               }
        .           
        .               pub fn push_span_label(&mut self, span: Span, label: String) {
        .                   self.span_labels.push((span, label));
        .               }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
      141 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
        .               }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
-- line 1079 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
    2,220 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
    2,220 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
       90 ( 0.00%)      fn from(spans: Vec<Span>) -> MultiSpan {
       72 ( 0.00%)          MultiSpan::from_spans(spans)
       90 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      318 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      548 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      159 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      548 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      477 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
       30 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1257 ----------------------------------------
        .               AbsentOk,
        .               /// A failed attempt has been made to load the external source.
        .               AbsentErr,
        .               Unneeded,
        .           }
        .           
        .           impl ExternalSource {
        .               pub fn get_source(&self) -> Option<&Lrc<String>> {
      501 ( 0.00%)          match self {
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::Present(ref src), .. } => Some(src),
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
    2,194 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
       60 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    4,388 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        .                   let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
       30 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
        .                   let len = self.hash_len();
        .                   &self.value[..len]
        .               }
        .           
        .               fn hash_len(&self) -> usize {
       30 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
      580 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
       10 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
       10 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
       10 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
       40 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
       20 ( 0.00%)                          0..=0xFF => 1,
        .                                   0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
       20 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
       30 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
      110 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    9,873 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
    1,097 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
1,267,784 ( 0.08%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    2,194 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
   12,067 ( 0.00%)              SourceFile {
    8,776 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    4,388 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    4,388 ( 0.00%)                  lines,
    4,388 ( 0.00%)                  multibyte_chars,
    4,388 ( 0.00%)                  non_narrow_chars,
    4,388 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    9,873 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
      110 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
       30 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
       20 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
       20 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
       30 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
      120 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
       20 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
      170 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
      110 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
       40 ( 0.00%)              lines,
       40 ( 0.00%)              multibyte_chars,
       40 ( 0.00%)              non_narrow_chars,
       40 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
       90 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
        .               pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
        .                   self.lines[line_index]
        .               }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
    1,533 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
      219 ( 0.00%)          if matches!(
      438 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        .                       let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        .                       if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
-- line 1582 ----------------------------------------
-- line 1592 ----------------------------------------
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
      219 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
    1,971 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
        .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
        .                   fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
    1,060 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
   10,206 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
    7,290 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
   10,312 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
    7,039 ( 0.00%)          assert!(line_index < self.lines.len());
    9,819 ( 0.00%)          if line_index == (self.lines.len() - 1) {
       60 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
    6,502 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
      158 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
      474 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
        .                       if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
        .                           total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
        .                           assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
      948 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
      790 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
      316 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
      553 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
      158 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
       78 ( 0.00%)          match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
       79 ( 0.00%)                  let linebpos = self.lines[a];
      158 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
       79 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
      632 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
      632 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
      237 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
      158 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
       79 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
      395 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
      553 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
      100 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
       90 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       10 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       10 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
   30,800 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
    2,053 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
   44,431 ( 0.00%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
2,449,423 ( 0.15%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
1,594,136 ( 0.09%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
        .               }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
  179,894 ( 0.01%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2042 ----------------------------------------
        .           /// Range inside of a `Span` used for diagnostics when we only have access to relative positions.
        .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           pub struct InnerSpan {
        .               pub start: usize,
        .               pub end: usize,
        .           }
        .           
        .           impl InnerSpan {
      234 ( 0.00%)      pub fn new(start: usize, end: usize) -> InnerSpan {
        .                   InnerSpan { start, end }
      117 ( 0.00%)      }
        .           }
        .           
        .           /// Requirements for a `StableHashingContext` to be used in this crate.
        .           ///
        .           /// This is a hack to allow using the [`HashStable_Generic`] derive macro
        .           /// instead of implementing everything in rustc_middle.
        .           pub trait HashStableContext {
        .               fn def_path_hash(&self, def_id: DefId) -> DefPathHash;
-- line 2060 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
  209,727 ( 0.01%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
   37,915 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
  171,812 ( 0.01%)          let span = self.data_untracked();
   66,021 ( 0.00%)          span.ctxt.hash_stable(ctx, hasher);
   89,883 ( 0.01%)          span.parent.hash_stable(ctx, hasher);
        .           
   60,648 ( 0.00%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
   58,470 ( 0.00%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
  116,940 ( 0.01%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
   58,470 ( 0.00%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
   29,235 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
   29,235 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
  239,688 ( 0.01%)      }
        .           }

2,251,215 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs
--------------------------------------------------------------------------------
Ir                 

-- line 22 ----------------------------------------
        .           
        .           use super::BuiltinImplConditions;
        .           use super::IntercrateAmbiguityCause;
        .           use super::OverflowError;
        .           use super::SelectionCandidate::{self, *};
        .           use super::{EvaluatedCandidate, SelectionCandidateSet, SelectionContext, TraitObligationStack};
        .           
        .           impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {
  221,856 ( 0.01%)      #[instrument(level = "debug", skip(self))]
  277,320 ( 0.02%)      pub(super) fn candidate_from_obligation<'o>(
        .                   &mut self,
        .                   stack: &TraitObligationStack<'o, 'tcx>,
        .               ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {
        .                   // Watch out for overflow. This intentionally bypasses (and does
        .                   // not update) the cache.
   55,464 ( 0.00%)          self.check_recursion_limit(&stack.obligation, &stack.obligation)?;
        .           
        .                   // Check the cache. Note that we freshen the trait-ref
        .                   // separately rather than using `stack.fresh_trait_ref` --
        .                   // this is because we want the unbound variables to be
        .                   // replaced with fresh types starting from index 0.
  249,588 ( 0.01%)          let cache_fresh_trait_pred = self.infcx.freshen(stack.obligation.predicate);
        .                   debug!(?cache_fresh_trait_pred);
        .                   debug_assert!(!stack.obligation.predicate.has_escaping_bound_vars());
        .           
  144,405 ( 0.01%)          if let Some(c) =
   83,196 ( 0.00%)              self.check_candidate_cache(stack.obligation.param_env, cache_fresh_trait_pred)
        .                   {
        .                       debug!(candidate = ?c, "CACHE HIT");
        .                       return c;
        .                   }
        .           
        .                   // If no match, compute result and insert into cache.
        .                   //
        .                   // FIXME(nikomatsakis) -- this cache is not taking into
        .                   // account cycles that may have occurred in forming the
        .                   // candidate. I don't know of any specific problems that
        .                   // result but it seems awfully suspicious.
  128,220 ( 0.01%)          let (candidate, dep_node) =
   64,110 ( 0.00%)              self.in_task(|this| this.candidate_from_obligation_no_cache(stack));
        .           
        .                   debug!(?candidate, "CACHE MISS");
        .                   self.insert_candidate_cache(
   42,740 ( 0.00%)              stack.obligation.param_env,
   85,480 ( 0.01%)              cache_fresh_trait_pred,
        .                       dep_node,
        .                       candidate.clone(),
        .                   );
  256,440 ( 0.02%)          candidate
        .               }
        .           
  213,700 ( 0.01%)      fn candidate_from_obligation_no_cache<'o>(
        .                   &mut self,
        .                   stack: &TraitObligationStack<'o, 'tcx>,
        .               ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {
       30 ( 0.00%)          if let Some(conflict) = self.is_knowable(stack) {
        .                       debug!("coherence stage: not knowable");
        2 ( 0.00%)              if self.intercrate_ambiguity_causes.is_some() {
        .                           debug!("evaluate_stack: intercrate_ambiguity_causes is some");
        .                           // Heuristics: show the diagnostics when there are no candidates in crate.
        9 ( 0.00%)                  if let Ok(candidate_set) = self.assemble_candidates(stack) {
        .                               let mut no_candidates_apply = true;
        .           
        .                               for c in candidate_set.vec.iter() {
        7 ( 0.00%)                          if self.evaluate_candidate(stack, &c)?.may_apply() {
        .                                       no_candidates_apply = false;
        .                                       break;
        .                                   }
        .                               }
        .           
        .                               if !candidate_set.ambiguous && no_candidates_apply {
        .                                   let trait_ref = stack.obligation.predicate.skip_binder().trait_ref;
        .                                   let self_ty = trait_ref.self_ty();
-- line 94 ----------------------------------------
-- line 106 ----------------------------------------
        .                                   } else {
        .                                       IntercrateAmbiguityCause::DownstreamCrate { trait_desc, self_desc }
        .                                   };
        .                                   debug!(?cause, "evaluate_stack: pushing cause");
        .                                   self.intercrate_ambiguity_causes.as_mut().unwrap().push(cause);
        .                               }
        .                           }
        .                       }
        4 ( 0.00%)              return Ok(None);
        .                   }
        .           
   64,104 ( 0.00%)          let candidate_set = self.assemble_candidates(stack)?;
        .           
   42,736 ( 0.00%)          if candidate_set.ambiguous {
        .                       debug!("candidate set contains ambig");
      576 ( 0.00%)              return Ok(None);
        .                   }
        .           
        .                   let candidates = candidate_set.vec;
        .           
        .                   debug!(?stack, ?candidates, "assembled {} candidates", candidates.len());
        .           
        .                   // At this point, we know that each of the entries in the
        .                   // candidate set is *individually* applicable. Now we have to
        .                   // figure out if they contain mutual incompatibilities. This
        .                   // frequently arises if we have an unconstrained input type --
        .                   // for example, we are looking for `$0: Eq` where `$0` is some
        .                   // unconstrained type variable. In that case, we'll get a
        .                   // candidate which assumes $0 == int, one that assumes `$0 ==
        .                   // usize`, etc. This spells an ambiguity.
        .           
   84,320 ( 0.01%)          let mut candidates = self.filter_impls(candidates, stack.obligation);
        .           
        .                   // If there is more than one candidate, first winnow them down
        .                   // by considering extra conditions (nested obligations and so
        .                   // forth). We don't winnow if there is exactly one
        .                   // candidate. This is a relatively minor distinction but it
        .                   // can lead to better inference and error-reporting. An
        .                   // example would be if there was an impl:
        .                   //
        .                   //     impl<T:Clone> Vec<T> { fn push_clone(...) { ... } }
        .                   //
        .                   // and we were to see some code `foo.push_clone()` where `boo`
        .                   // is a `Vec<Bar>` and `Bar` does not implement `Clone`.  If
        .                   // we were to winnow, we'd wind up with zero candidates.
        .                   // Instead, we select the right impl now but report "`Bar` does
        .                   // not implement `Clone`".
   42,160 ( 0.00%)          if candidates.len() == 1 {
   59,763 ( 0.00%)              return self.filter_reservation_impls(candidates.pop().unwrap(), stack.obligation);
        .                   }
        .           
        .                   // Winnow, but record the exact outcome of evaluation, which
        .                   // is needed for specialization. Propagate overflow if it occurs.
    6,954 ( 0.00%)          let mut candidates = candidates
        .                       .into_iter()
        .                       .map(|c| match self.evaluate_candidate(stack, &c) {
      768 ( 0.00%)                  Ok(eval) if eval.may_apply() => {
      768 ( 0.00%)                      Ok(Some(EvaluatedCandidate { candidate: c, evaluation: eval }))
        .                           }
        .                           Ok(_) => Ok(None),
        .                           Err(OverflowError::Canonical) => Err(Overflow),
        .                           Err(OverflowError::ErrorReporting) => Err(ErrorReporting),
        .                       })
        .                       .flat_map(Result::transpose)
        .                       .collect::<Result<Vec<_>, _>>()?;
        .           
        .                   debug!(?stack, ?candidates, "winnowed to {} candidates", candidates.len());
        .           
    1,159 ( 0.00%)          let needs_infer = stack.obligation.predicate.has_infer_types_or_consts();
        .           
    3,477 ( 0.00%)          let sized_predicate = self.tcx().lang_items().sized_trait()
    2,318 ( 0.00%)              == Some(stack.obligation.predicate.skip_binder().def_id());
        .           
        .                   // If there are STILL multiple candidates, we can further
        .                   // reduce the list by dropping duplicates -- including
        .                   // resolving specializations.
    3,477 ( 0.00%)          if candidates.len() > 1 {
        .                       let mut i = 0;
       70 ( 0.00%)              while i < candidates.len() {
      116 ( 0.00%)                  let is_dup = (0..candidates.len()).filter(|&j| i != j).any(|j| {
        .                               self.candidate_should_be_dropped_in_favor_of(
        .                                   sized_predicate,
        .                                   &candidates[i],
        .                                   &candidates[j],
        .                                   needs_infer,
        .                               )
        .                           });
        .                           if is_dup {
        .                               debug!(candidate = ?candidates[i], "Dropping candidate #{}/{}", i, candidates.len());
        .                               candidates.swap_remove(i);
        .                           } else {
        .                               debug!(candidate = ?candidates[i], "Retaining candidate #{}/{}", i, candidates.len());
       68 ( 0.00%)                      i += 1;
        .           
        .                               // If there are *STILL* multiple candidates, give up
        .                               // and report ambiguity.
      102 ( 0.00%)                      if i > 1 {
        .                                   debug!("multiple matches, ambig");
      132 ( 0.00%)                          return Err(Ambiguous(
        .                                       candidates
        .                                           .into_iter()
       40 ( 0.00%)                                  .filter_map(|c| match c.candidate {
        .                                               SelectionCandidate::ImplCandidate(def_id) => Some(def_id),
        .                                               _ => None,
        .                                           })
        .                                           .collect(),
        .                                   ));
        .                               }
        .                           }
        .                       }
-- line 215 ----------------------------------------
-- line 219 ----------------------------------------
        .                   // that we know of, anyway. Note that in the case where there
        .                   // are unbound type variables within the obligation, it might
        .                   // be the case that you could still satisfy the obligation
        .                   // from another crate by instantiating the type variables with
        .                   // a type from another crate that does have an impl. This case
        .                   // is checked for in `evaluate_stack` (and hence users
        .                   // who might care about this case, like coherence, should use
        .                   // that function).
    1,148 ( 0.00%)          if candidates.is_empty() {
        .                       // If there's an error type, 'downgrade' our result from
        .                       // `Err(Unimplemented)` to `Ok(None)`. This helps us avoid
        .                       // emitting additional spurious errors, since we're guaranteed
        .                       // to have emitted at least one.
    2,208 ( 0.00%)              if stack.obligation.references_error() {
        .                           debug!("no results for error type, treating as ambiguous");
    1,104 ( 0.00%)                  return Ok(None);
        .                       }
        .                       return Err(Unimplemented);
        .                   }
        .           
        .                   // Just one candidate left.
      132 ( 0.00%)          self.filter_reservation_impls(candidates.pop().unwrap().candidate, stack.obligation)
  194,626 ( 0.01%)      }
        .           
  170,960 ( 0.01%)      #[instrument(skip(self, stack), level = "debug")]
  213,700 ( 0.01%)      pub(super) fn assemble_candidates<'o>(
        .                   &mut self,
        .                   stack: &TraitObligationStack<'o, 'tcx>,
        .               ) -> Result<SelectionCandidateSet<'tcx>, SelectionError<'tcx>> {
   21,370 ( 0.00%)          let TraitObligationStack { obligation, .. } = *stack;
  406,030 ( 0.02%)          let obligation = &Obligation {
   21,370 ( 0.00%)              param_env: obligation.param_env,
        .                       cause: obligation.cause.clone(),
   64,110 ( 0.00%)              recursion_depth: obligation.recursion_depth,
  256,440 ( 0.02%)              predicate: self.infcx().resolve_vars_if_possible(obligation.predicate),
        .                   };
        .           
   43,240 ( 0.00%)          if obligation.predicate.skip_binder().self_ty().is_ty_var() {
        .                       // Self is a type variable (e.g., `_: AsRef<str>`).
        .                       //
        .                       // This is somewhat problematic, as the current scheme can't really
        .                       // handle it turning to be a projection. This does end up as truly
        .                       // ambiguous in most cases anyway.
        .                       //
        .                       // Take the fast path out - this also improves
        .                       // performance by preventing assemble_candidates_from_impls from
        .                       // matching every impl for this trait.
      744 ( 0.00%)              return Ok(SelectionCandidateSet { vec: vec![], ambiguous: true });
        .                   }
        .           
   63,366 ( 0.00%)          let mut candidates = SelectionCandidateSet { vec: Vec::new(), ambiguous: false };
        .           
        .                   // The only way to prove a NotImplemented(T: Foo) predicate is via a negative impl.
        .                   // There are no compiler built-in rules for this.
   42,244 ( 0.00%)          if obligation.polarity() == ty::ImplPolarity::Negative {
        .                       self.assemble_candidates_for_trait_alias(obligation, &mut candidates);
        .                       self.assemble_candidates_from_impls(obligation, &mut candidates);
        .                   } else {
   21,122 ( 0.00%)              self.assemble_candidates_for_trait_alias(obligation, &mut candidates);
        .           
        .                       // Other bounds. Consider both in-scope bounds from fn decl
        .                       // and applicable impls. There is a certain set of precedence rules here.
  126,732 ( 0.01%)              let def_id = obligation.predicate.def_id();
   21,122 ( 0.00%)              let lang_items = self.tcx().lang_items();
        .           
   66,008 ( 0.00%)              if lang_items.copy_trait() == Some(def_id) {
        .                           debug!(obligation_self_ty = ?obligation.predicate.skip_binder().self_ty());
        .           
        .                           // User-defined copy impls are permitted, but only for
        .                           // structs and enums.
    1,321 ( 0.00%)                  self.assemble_candidates_from_impls(obligation, &mut candidates);
        .           
        .                           // For other types, we'll use the builtin rules.
    5,284 ( 0.00%)                  let copy_conditions = self.copy_clone_conditions(obligation);
   13,210 ( 0.00%)                  self.assemble_builtin_bound_candidates(copy_conditions, &mut candidates);
   59,403 ( 0.00%)              } else if lang_items.discriminant_kind_trait() == Some(def_id) {
        .                           // `DiscriminantKind` is automatically implemented for every type.
        .                           candidates.vec.push(DiscriminantKindCandidate);
   59,403 ( 0.00%)              } else if lang_items.pointee_trait() == Some(def_id) {
        .                           // `Pointee` is automatically implemented for every type.
        .                           candidates.vec.push(PointeeCandidate);
   63,829 ( 0.00%)              } else if lang_items.sized_trait() == Some(def_id) {
        .                           // Sized is never implementable by end-users, it is
        .                           // always automatically computed.
    2,213 ( 0.00%)                  let sized_conditions = self.sized_conditions(obligation);
   22,130 ( 0.00%)                  self.assemble_builtin_bound_candidates(sized_conditions, &mut candidates);
   53,236 ( 0.00%)              } else if lang_items.unsize_trait() == Some(def_id) {
      472 ( 0.00%)                  self.assemble_candidates_for_unsizing(obligation, &mut candidates);
   52,164 ( 0.00%)              } else if lang_items.drop_trait() == Some(def_id)
        .                           && obligation.predicate.skip_binder().constness == ty::BoundConstness::ConstIfConst
        .                       {
      175 ( 0.00%)                  self.assemble_const_drop_candidates(obligation, &mut candidates);
        .                       } else {
   52,161 ( 0.00%)                  if lang_items.clone_trait() == Some(def_id) {
        .                               // Same builtin conditions as `Copy`, i.e., every type which has builtin support
        .                               // for `Copy` also has builtin support for `Clone`, and tuples/arrays of `Clone`
        .                               // types have builtin support for `Clone`.
      420 ( 0.00%)                      let clone_conditions = self.copy_clone_conditions(obligation);
      945 ( 0.00%)                      self.assemble_builtin_bound_candidates(clone_conditions, &mut candidates);
        .                           }
        .           
   17,317 ( 0.00%)                  self.assemble_generator_candidates(obligation, &mut candidates);
   17,317 ( 0.00%)                  self.assemble_closure_candidates(obligation, &mut candidates);
   17,317 ( 0.00%)                  self.assemble_fn_pointer_candidates(obligation, &mut candidates);
   51,951 ( 0.00%)                  self.assemble_candidates_from_impls(obligation, &mut candidates);
        .                           self.assemble_candidates_from_object_ty(obligation, &mut candidates);
        .                       }
        .           
        .                       self.assemble_candidates_from_projected_tys(obligation, &mut candidates);
        .                       self.assemble_candidates_from_caller_bounds(stack, &mut candidates)?;
        .                       // Auto implementations have lower priority, so we only
        .                       // consider triggering a default if there is no other impl that can apply.
   21,122 ( 0.00%)              if candidates.vec.is_empty() {
        .                           self.assemble_candidates_from_auto_impls(obligation, &mut candidates);
        .                       }
        .                   }
        .                   debug!("candidate list size: {}", candidates.vec.len());
  274,586 ( 0.02%)          Ok(candidates)
        .               }
        .           
        .               #[tracing::instrument(level = "debug", skip(self, candidates))]
        .               fn assemble_candidates_from_projected_tys(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .                   candidates: &mut SelectionCandidateSet<'tcx>,
        .               ) {
        .                   // Before we go into the whole placeholder thing, just
        .                   // quickly check if the self-type is a projection at all.
  189,102 ( 0.01%)          match obligation.predicate.skip_binder().trait_ref.self_ty().kind() {
        .                       ty::Projection(_) | ty::Opaque(..) => {}
        .                       ty::Infer(ty::TyVar(_)) => {
        .                           span_bug!(
        .                               obligation.cause.span,
        .                               "Self=_ should have been handled by assemble_candidates"
        .                           );
        .                       }
        .                       _ => return,
        .                   }
        .           
    1,000 ( 0.00%)          let result = self
        .                       .infcx
      500 ( 0.00%)              .probe(|_| self.match_projection_obligation_against_definition_bounds(obligation));
        .           
    1,000 ( 0.00%)          candidates.vec.extend(result.into_iter().map(ProjectionCandidate));
        .               }
        .           
        .               /// Given an obligation like `<SomeTrait for T>`, searches the obligations that the caller
        .               /// supplied to find out whether it is listed among them.
        .               ///
        .               /// Never affects the inference environment.
        .               #[tracing::instrument(level = "debug", skip(self, stack, candidates))]
        .               fn assemble_candidates_from_caller_bounds<'o>(
        .                   &mut self,
        .                   stack: &TraitObligationStack<'o, 'tcx>,
        .                   candidates: &mut SelectionCandidateSet<'tcx>,
        .               ) -> Result<(), SelectionError<'tcx>> {
        .                   debug!(?stack.obligation);
        .           
   84,488 ( 0.01%)          let all_bounds = stack
        .                       .obligation
        .                       .param_env
        .                       .caller_bounds()
        .                       .iter()
   92,718 ( 0.01%)              .filter_map(|o| o.to_opt_poly_trait_pred());
        .           
        .                   // Micro-optimization: filter out predicates relating to different traits.
        .                   let matching_bounds =
  101,448 ( 0.01%)              all_bounds.filter(|p| p.def_id() == stack.obligation.predicate.def_id());
        .           
        .                   // Keep only those bounds which may apply, and propagate overflow if it occurs.
        .                   for bound in matching_bounds {
        .                       // FIXME(oli-obk): it is suspicious that we are dropping the constness and
        .                       // polarity here.
    2,900 ( 0.00%)              let wc = self.evaluate_where_clause(stack, bound.map_bound(|t| t.trait_ref))?;
    5,800 ( 0.00%)              if wc.may_apply() {
        .                           candidates.vec.push(ParamCandidate(bound));
        .                       }
        .                   }
        .           
        .                   Ok(())
        .               }
        .           
  138,536 ( 0.01%)      fn assemble_generator_candidates(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .                   candidates: &mut SelectionCandidateSet<'tcx>,
        .               ) {
  207,930 ( 0.01%)          if self.tcx().lang_items().gen_trait() != Some(obligation.predicate.def_id()) {
        .                       return;
        .                   }
        .           
        .                   // Okay to skip binder because the substs on generator types never
        .                   // touch bound regions, they just capture the in-scope
        .                   // type/region parameters.
      126 ( 0.00%)          let self_ty = obligation.self_ty().skip_binder();
      209 ( 0.00%)          match self_ty.kind() {
        .                       ty::Generator(..) => {
        .                           debug!(?self_ty, ?obligation, "assemble_generator_candidates",);
        .           
        .                           candidates.vec.push(GeneratorCandidate);
        .                       }
        .                       ty::Infer(ty::TyVar(_)) => {
        .                           debug!("assemble_generator_candidates: ambiguous self-type");
        .                           candidates.ambiguous = true;
        .                       }
        .                       _ => {}
        .                   }
  121,219 ( 0.01%)      }
        .           
        .               /// Checks for the artificial impl that the compiler will create for an obligation like `X :
        .               /// FnMut<..>` where `X` is a closure type.
        .               ///
        .               /// Note: the type parameters on a closure candidate are modeled as *output* type
        .               /// parameters and hence do not affect whether this trait is a match or not. They will be
        .               /// unified during the confirmation step.
  121,219 ( 0.01%)      fn assemble_closure_candidates(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .                   candidates: &mut SelectionCandidateSet<'tcx>,
        .               ) {
  190,487 ( 0.01%)          let kind = match self.tcx().fn_trait_kind_from_lang_item(obligation.predicate.def_id()) {
        .                       Some(k) => k,
        .                       None => {
        .                           return;
        .                       }
        .                   };
        .           
        .                   // Okay to skip binder because the substs on closure types never
        .                   // touch bound regions, they just capture the in-scope
        .                   // type/region parameters
      962 ( 0.00%)          match *obligation.self_ty().skip_binder().kind() {
      107 ( 0.00%)              ty::Closure(_, closure_substs) => {
        .                           debug!(?kind, ?obligation, "assemble_unboxed_candidates");
      428 ( 0.00%)                  match self.infcx.closure_kind(closure_substs) {
        .                               Some(closure_kind) => {
        .                                   debug!(?closure_kind, "assemble_unboxed_candidates");
      535 ( 0.00%)                          if closure_kind.extends(kind) {
        .                                       candidates.vec.push(ClosureCandidate);
        .                                   }
        .                               }
        .                               None => {
        .                                   debug!("assemble_unboxed_candidates: closure_kind not yet known");
        .                                   candidates.vec.push(ClosureCandidate);
        .                               }
        .                           }
        .                       }
        .                       ty::Infer(ty::TyVar(_)) => {
        .                           debug!("assemble_unboxed_closure_candidates: ambiguous self-type");
        .                           candidates.ambiguous = true;
        .                       }
        .                       _ => {}
        .                   }
  103,902 ( 0.01%)      }
        .           
        .               /// Implements one of the `Fn()` family for a fn pointer.
  155,853 ( 0.01%)      fn assemble_fn_pointer_candidates(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .                   candidates: &mut SelectionCandidateSet<'tcx>,
        .               ) {
        .                   // We provide impl of all fn traits for fn pointers.
  173,170 ( 0.01%)          if self.tcx().fn_trait_kind_from_lang_item(obligation.predicate.def_id()).is_none() {
        .                       return;
        .                   }
        .           
        .                   // Okay to skip binder because what we are inspecting doesn't involve bound regions.
      336 ( 0.00%)          let self_ty = obligation.self_ty().skip_binder();
    1,144 ( 0.00%)          match *self_ty.kind() {
        .                       ty::Infer(ty::TyVar(_)) => {
        .                           debug!("assemble_fn_pointer_candidates: ambiguous self-type");
        .                           candidates.ambiguous = true; // Could wind up being a fn() type.
        .                       }
        .                       // Provide an impl, but only for suitable `fn` pointers.
        .                       ty::FnPtr(_) => {
        .                           if let ty::FnSig {
        .                               unsafety: hir::Unsafety::Normal,
-- line 494 ----------------------------------------
-- line 496 ----------------------------------------
        .                               c_variadic: false,
        .                               ..
        .                           } = self_ty.fn_sig(self.tcx()).skip_binder()
        .                           {
        .                               candidates.vec.push(FnPointerCandidate { is_const: false });
        .                           }
        .                       }
        .                       // Provide an impl for suitable functions, rejecting `#[target_feature]` functions (RFC 2396).
       16 ( 0.00%)              ty::FnDef(def_id, _) => {
       24 ( 0.00%)                  if let ty::FnSig {
        .                               unsafety: hir::Unsafety::Normal,
        .                               abi: Abi::Rust,
        .                               c_variadic: false,
        .                               ..
       16 ( 0.00%)                  } = self_ty.fn_sig(self.tcx()).skip_binder()
        .                           {
       14 ( 0.00%)                      if self.tcx().codegen_fn_attrs(def_id).target_features.is_empty() {
        .                                   candidates
        .                                       .vec
       32 ( 0.00%)                              .push(FnPointerCandidate { is_const: self.tcx().is_const_fn(def_id) });
        .                               }
        .                           }
        .                       }
        .                       _ => {}
        .                   }
  138,536 ( 0.01%)      }
        .           
        .               /// Searches for impls that might apply to `obligation`.
  186,380 ( 0.01%)      fn assemble_candidates_from_impls(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .                   candidates: &mut SelectionCandidateSet<'tcx>,
        .               ) {
        .                   debug!(?obligation, "assemble_candidates_from_impls");
        .           
        .                   // Essentially any user-written impl will match with an error type,
        .                   // so creating `ImplCandidates` isn't useful. However, we might
        .                   // end up finding a candidate elsewhere (e.g. a `BuiltinCandidate` for `Sized)
        .                   // This helps us avoid overflow: see issue #72839
        .                   // Since compilation is already guaranteed to fail, this is just
        .                   // to try to show the 'nicest' possible errors to the user.
        .                   // We don't check for errors in the `ParamEnv` - in practice,
        .                   // it seems to cause us to be overly aggressive in deciding
        .                   // to give up searching for candidates, leading to spurious errors.
   37,276 ( 0.00%)          if obligation.predicate.references_error() {
        .                       return;
        .                   }
        .           
   55,914 ( 0.00%)          self.tcx().for_each_relevant_impl(
  149,104 ( 0.01%)              obligation.predicate.def_id(),
        .                       obligation.predicate.skip_binder().trait_ref.self_ty(),
   93,190 ( 0.01%)              |impl_def_id| {
   47,960 ( 0.00%)                  self.infcx.probe(|_| {
   56,066 ( 0.00%)                      if let Ok(_substs) = self.match_impl(impl_def_id, obligation) {
   10,048 ( 0.00%)                          candidates.vec.push(ImplCandidate(impl_def_id));
        .                               }
        .                           });
        .                       },
        .                   );
  149,104 ( 0.01%)      }
        .           
        .               fn assemble_candidates_from_auto_impls(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .                   candidates: &mut SelectionCandidateSet<'tcx>,
        .               ) {
        .                   // Okay to skip binder here because the tests we do below do not involve bound regions.
   12,733 ( 0.00%)          let self_ty = obligation.self_ty().skip_binder();
        .                   debug!(?self_ty, "assemble_candidates_from_auto_impls");
        .           
   76,398 ( 0.00%)          let def_id = obligation.predicate.def_id();
        .           
   50,932 ( 0.00%)          if self.tcx().trait_is_auto(def_id) {
   34,764 ( 0.00%)              match self_ty.kind() {
        .                           ty::Dynamic(..) => {
        .                               // For object types, we don't know what the closed
        .                               // over types are. This means we conservatively
        .                               // say nothing; a candidate may be added by
        .                               // `assemble_candidates_from_object_ty`.
        .                           }
        .                           ty::Foreign(..) => {
        .                               // Since the contents of foreign types is unknown,
-- line 577 ----------------------------------------
-- line 594 ----------------------------------------
        .                               // for an example of a test case that exercises
        .                               // this path.
        .                           }
        .                           ty::Infer(ty::TyVar(_)) => {
        .                               // The auto impl might apply; we don't know.
        .                               candidates.ambiguous = true;
        .                           }
        .                           ty::Generator(_, _, movability)
      636 ( 0.00%)                      if self.tcx().lang_items().unpin_trait() == Some(def_id) =>
        .                           {
        .                               match movability {
        .                                   hir::Movability::Static => {
        .                                       // Immovable generators are never `Unpin`, so
        .                                       // suppress the normal auto-impl candidate for it.
        .                                   }
        .                                   hir::Movability::Movable => {
        .                                       // Movable generators are always `Unpin`, so add an
-- line 610 ----------------------------------------
-- line 625 ----------------------------------------
        .                   obligation: &TraitObligation<'tcx>,
        .                   candidates: &mut SelectionCandidateSet<'tcx>,
        .               ) {
        .                   debug!(
        .                       self_ty = ?obligation.self_ty().skip_binder(),
        .                       "assemble_candidates_from_object_ty",
        .                   );
        .           
  138,536 ( 0.01%)          self.infcx.probe(|_snapshot| {
        .                       // The code below doesn't care about regions, and the
        .                       // self-ty here doesn't escape this probe, so just erase
        .                       // any LBR.
   17,317 ( 0.00%)              let self_ty = self.tcx().erase_late_bound_regions(obligation.self_ty());
   85,937 ( 0.01%)              let poly_trait_ref = match self_ty.kind() {
        .                           ty::Dynamic(ref data, ..) => {
    2,305 ( 0.00%)                      if data.auto_traits().any(|did| did == obligation.predicate.def_id()) {
        .                                   debug!(
        .                                       "assemble_candidates_from_object_ty: matched builtin bound, \
        .                                        pushing candidate"
        .                                   );
        .                                   candidates.vec.push(BuiltinObjectCandidate);
        .                                   return;
        .                               }
        .           
      684 ( 0.00%)                      if let Some(principal) = data.principal() {
      285 ( 0.00%)                          if !self.infcx.tcx.features().object_safe_for_dispatch {
        .                                       principal.with_self_ty(self.tcx(), self_ty)
        .                                   } else if self.tcx().is_object_safe(principal.def_id()) {
        .                                       principal.with_self_ty(self.tcx(), self_ty)
        .                                   } else {
        .                                       return;
        .                                   }
        .                               } else {
        .                                   // Only auto trait bounds exist.
-- line 658 ----------------------------------------
-- line 664 ----------------------------------------
        .                               candidates.ambiguous = true; // could wind up being an object type
        .                               return;
        .                           }
        .                           _ => return,
        .                       };
        .           
        .                       debug!(?poly_trait_ref, "assemble_candidates_from_object_ty");
        .           
      741 ( 0.00%)              let poly_trait_predicate = self.infcx().resolve_vars_if_possible(obligation.predicate);
        .                       let placeholder_trait_predicate =
      912 ( 0.00%)                  self.infcx().replace_bound_vars_with_placeholders(poly_trait_predicate);
        .           
        .                       // Count only those upcast versions that match the trait-ref
        .                       // we are looking for. Specifically, do not only check for the
        .                       // correct trait, but also the correct type parameters.
        .                       // For example, we may be trying to upcast `Foo` to `Bar<i32>`,
        .                       // but `Foo` is declared as `trait Foo: Bar<u32>`.
      399 ( 0.00%)              let candidate_supertraits = util::supertraits(self.tcx(), poly_trait_ref)
        .                           .enumerate()
        .                           .filter(|&(_, upcast_trait_ref)| {
      695 ( 0.00%)                      self.infcx.probe(|_| {
      417 ( 0.00%)                          self.match_normalize_trait_ref(
        .                                       obligation,
      556 ( 0.00%)                              upcast_trait_ref,
      556 ( 0.00%)                              placeholder_trait_predicate.trait_ref,
        .                                   )
        .                                   .is_ok()
        .                               })
        .                           })
        .                           .map(|(idx, _)| ObjectCandidate(idx));
        .           
        .                       candidates.vec.extend(candidate_supertraits);
        .                   })
-- line 696 ----------------------------------------
-- line 739 ----------------------------------------
        .                   };
        .           
        .                   let def_id = data.principal_def_id()?;
        .           
        .                   return Some((normalized_ty, def_id));
        .               }
        .           
        .               /// Searches for unsizing that might apply to `obligation`.
    2,360 ( 0.00%)      fn assemble_candidates_for_unsizing(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .                   candidates: &mut SelectionCandidateSet<'tcx>,
        .               ) {
        .                   // We currently never consider higher-ranked obligations e.g.
        .                   // `for<'a> &'a T: Unsize<Trait+'a>` to be implemented. This is not
        .                   // because they are a priori invalid, and we could potentially add support
        .                   // for them later, it's just that there isn't really a strong need for it.
-- line 755 ----------------------------------------
-- line 758 ----------------------------------------
        .                   //
        .                   // That said, one might try to write a fn with a where clause like
        .                   //     for<'a> Foo<'a, T>: Unsize<Foo<'a, Trait>>
        .                   // where the `'a` is kind of orthogonal to the relevant part of the `Unsize`.
        .                   // Still, you'd be more likely to write that where clause as
        .                   //     T: Trait
        .                   // so it seems ok if we (conservatively) fail to accept that `Unsize`
        .                   // obligation above. Should be possible to extend this in the future.
    1,180 ( 0.00%)          let source = match obligation.self_ty().no_bound_vars() {
      236 ( 0.00%)              Some(t) => t,
        .                       None => {
        .                           // Don't add any candidates if there are bound regions.
        .                           return;
        .                       }
        .                   };
      708 ( 0.00%)          let target = obligation.predicate.skip_binder().trait_ref.substs.type_at(1);
        .           
        .                   debug!(?source, ?target, "assemble_candidates_for_unsizing");
        .           
    3,028 ( 0.00%)          match (source.kind(), target.kind()) {
        .                       // Trait+Kx+'a -> Trait+Ky+'b (upcasts).
        .                       (&ty::Dynamic(ref data_a, ..), &ty::Dynamic(ref data_b, ..)) => {
        .                           // Upcast coercions permit several things:
        .                           //
        .                           // 1. Dropping auto traits, e.g., `Foo + Send` to `Foo`
        .                           // 2. Tightening the region bound, e.g., `Foo + 'a` to `Foo + 'b` if `'a: 'b`
        .                           // 3. Tightening trait to its super traits, eg. `Foo` to `Bar` if `Foo: Bar`
        .                           //
        .                           // Note that neither of the first two of these changes requires any
        .                           // change at runtime. The third needs to change pointer metadata at runtime.
        .                           //
        .                           // We always perform upcasting coercions when we can because of reason
        .                           // #2 (region bounds).
       57 ( 0.00%)                  let auto_traits_compatible = data_b
        .                               .auto_traits()
        .                               // All of a's auto traits need to be in b's auto traits.
       38 ( 0.00%)                      .all(|b| data_a.auto_traits().any(|a| a == b));
       38 ( 0.00%)                  if auto_traits_compatible {
       95 ( 0.00%)                      let principal_def_id_a = data_a.principal_def_id();
       57 ( 0.00%)                      let principal_def_id_b = data_b.principal_def_id();
       57 ( 0.00%)                      if principal_def_id_a == principal_def_id_b {
        .                                   // no cyclic
        .                                   candidates.vec.push(BuiltinUnsizeCandidate);
        .                               } else if principal_def_id_a.is_some() && principal_def_id_b.is_some() {
        .                                   // not casual unsizing, now check whether this is trait upcasting coercion.
        .                                   let principal_a = data_a.principal().unwrap();
        .                                   let target_trait_did = principal_def_id_b.unwrap();
        .                                   let source_trait_ref = principal_a.with_self_ty(self.tcx(), source);
        .                                   if let Some((deref_output_ty, deref_output_trait_did)) = self
-- line 806 ----------------------------------------
-- line 843 ----------------------------------------
        .                           candidates.vec.push(BuiltinUnsizeCandidate);
        .                       }
        .           
        .                       // Ambiguous handling is below `T` -> `Trait`, because inference
        .                       // variables can still implement `Unsize<Trait>` and nested
        .                       // obligations will have the final say (likely deferred).
        .                       (&ty::Infer(ty::TyVar(_)), _) | (_, &ty::Infer(ty::TyVar(_))) => {
        .                           debug!("assemble_candidates_for_unsizing: ambiguous");
       82 ( 0.00%)                  candidates.ambiguous = true;
        .                       }
        .           
        .                       // `[T; n]` -> `[T]`
        .                       (&ty::Array(..), &ty::Slice(_)) => {
        .                           candidates.vec.push(BuiltinUnsizeCandidate);
        .                       }
        .           
        .                       // `Struct<T>` -> `Struct<U>`
      171 ( 0.00%)              (&ty::Adt(def_id_a, _), &ty::Adt(def_id_b, _)) if def_id_a.is_struct() => {
      239 ( 0.00%)                  if def_id_a == def_id_b {
        .                               candidates.vec.push(BuiltinUnsizeCandidate);
        .                           }
        .                       }
        .           
        .                       // `(.., T)` -> `(.., U)`
        .                       (&ty::Tuple(tys_a), &ty::Tuple(tys_b)) => {
        .                           if tys_a.len() == tys_b.len() {
        .                               candidates.vec.push(BuiltinUnsizeCandidate);
        .                           }
        .                       }
        .           
        .                       _ => {}
        .                   };
    1,888 ( 0.00%)      }
        .           
  295,708 ( 0.02%)      #[tracing::instrument(level = "debug", skip(self, obligation, candidates))]
        .               fn assemble_candidates_for_trait_alias(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .                   candidates: &mut SelectionCandidateSet<'tcx>,
        .               ) {
        .                   // Okay to skip binder here because the tests we do below do not involve bound regions.
   42,244 ( 0.00%)          let self_ty = obligation.self_ty().skip_binder();
        .                   debug!(?self_ty);
        .           
  168,976 ( 0.01%)          let def_id = obligation.predicate.def_id();
        .           
   84,488 ( 0.01%)          if self.tcx().is_trait_alias(def_id) {
        .                       candidates.vec.push(TraitAliasCandidate(def_id));
        .                   }
        .               }
        .           
        .               /// Assembles the trait which are built-in to the language itself:
        .               /// `Copy`, `Clone` and `Sized`.
   29,112 ( 0.00%)      #[tracing::instrument(level = "debug", skip(self, candidates))]
        .               fn assemble_builtin_bound_candidates(
        .                   &mut self,
        .                   conditions: BuiltinImplConditions<'tcx>,
        .                   candidates: &mut SelectionCandidateSet<'tcx>,
        .               ) {
   13,681 ( 0.00%)          match conditions {
        .                       BuiltinImplConditions::Where(nested) => {
        .                           candidates
        .                               .vec
        .                               .push(BuiltinCandidate { has_nested: !nested.skip_binder().is_empty() });
        .                       }
        .                       BuiltinImplConditions::None => {}
        .                       BuiltinImplConditions::Ambiguous => {
        .                           candidates.ambiguous = true;
        .                       }
        .                   }
        .               }
        .           
      280 ( 0.00%)      fn assemble_const_drop_candidates(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .                   candidates: &mut SelectionCandidateSet<'tcx>,
        .               ) {
        .                   // If the predicate is `~const Drop` in a non-const environment, we don't actually need
        .                   // to check anything. We'll short-circuit checking any obligations in confirmation, too.
        .                   if obligation.param_env.constness() == hir::Constness::NotConst {
        .                       candidates.vec.push(ConstDropCandidate(None));
-- line 923 ----------------------------------------
-- line 979 ----------------------------------------
        .                               candidates.vec.push(ConstDropCandidate(None));
        .                           }
        .                       }
        .           
        .                       ty::Infer(_) => {
        .                           candidates.ambiguous = true;
        .                       }
        .                   }
      280 ( 0.00%)      }
        .           }

1,012,714 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs
--------------------------------------------------------------------------------
Ir                 

-- line 28 ----------------------------------------
        .           
        .               /// Returns a static string we can use for printouts.
        .               fn tag(&self) -> &'static str;
        .           
        .               /// Returns `true` if the value `a` is the "expected" type in the
        .               /// relation. Just affects error messages.
        .               fn a_is_expected(&self) -> bool;
        .           
   15,444 ( 0.00%)      fn with_cause<F, R>(&mut self, _cause: Cause, f: F) -> R
        .               where
        .                   F: FnOnce(&mut Self) -> R,
        .               {
        .                   f(self)
   13,539 ( 0.00%)      }
        .           
        .               /// Generic relation routine suitable for most anything.
  153,954 ( 0.01%)      fn relate<T: Relate<'tcx>>(&mut self, a: T, b: T) -> RelateResult<'tcx, T> {
  304,642 ( 0.02%)          Relate::relate(self, a, b)
  126,983 ( 0.01%)      }
        .           
        .               /// Relate the two substitutions for the given item. The default
        .               /// is to look up the variance for the item and proceed
        .               /// accordingly.
   38,540 ( 0.00%)      fn relate_item_substs(
        .                   &mut self,
        .                   item_def_id: DefId,
        .                   a_subst: SubstsRef<'tcx>,
        .                   b_subst: SubstsRef<'tcx>,
        .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
        .                   debug!(
        .                       "relate_item_substs(item_def_id={:?}, a_subst={:?}, b_subst={:?})",
        .                       item_def_id, a_subst, b_subst
        .                   );
        .           
        .                   let tcx = self.tcx();
        .                   let opt_variances = tcx.variances_of(item_def_id);
   15,416 ( 0.00%)          relate_substs(self, Some((item_def_id, opt_variances)), a_subst, b_subst)
   34,686 ( 0.00%)      }
        .           
        .               /// Switch variance for the purpose of relating `a` and `b`.
        .               fn relate_with_variance<T: Relate<'tcx>>(
        .                   &mut self,
        .                   variance: ty::Variance,
        .                   info: ty::VarianceDiagInfo<'tcx>,
        .                   a: T,
        .                   b: T,
-- line 73 ----------------------------------------
-- line 108 ----------------------------------------
        .                   a: Self,
        .                   b: Self,
        .               ) -> RelateResult<'tcx, Self>;
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Relate impls
        .           
   53,255 ( 0.00%)  pub fn relate_type_and_mut<'tcx, R: TypeRelation<'tcx>>(
        .               relation: &mut R,
        .               a: ty::TypeAndMut<'tcx>,
        .               b: ty::TypeAndMut<'tcx>,
        .               base_ty: Ty<'tcx>,
        .           ) -> RelateResult<'tcx, ty::TypeAndMut<'tcx>> {
        .               debug!("{}.mts({:?}, {:?})", relation.tag(), a, b);
   10,309 ( 0.00%)      if a.mutbl != b.mutbl {
      116 ( 0.00%)          Err(TypeError::Mutability)
        .               } else {
        .                   let mutbl = a.mutbl;
        .                   let (variance, info) = match mutbl {
        .                       ast::Mutability::Not => (ty::Covariant, ty::VarianceDiagInfo::None),
        .                       ast::Mutability::Mut => {
        .                           (ty::Invariant, ty::VarianceDiagInfo::Invariant { ty: base_ty, param_index: 0 })
        .                       }
        .                   };
    3,493 ( 0.00%)          let ty = relation.relate_with_variance(variance, info, a.ty, b.ty)?;
   24,004 ( 0.00%)          Ok(ty::TypeAndMut { ty, mutbl })
        .               }
   53,276 ( 0.00%)  }
        .           
    3,205 ( 0.00%)  pub fn relate_substs<'tcx, R: TypeRelation<'tcx>>(
        .               relation: &mut R,
        .               variances: Option<(DefId, &[ty::Variance])>,
        .               a_subst: SubstsRef<'tcx>,
        .               b_subst: SubstsRef<'tcx>,
        .           ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
  123,292 ( 0.01%)      let tcx = relation.tcx();
   61,736 ( 0.00%)      let mut cached_ty = None;
        .           
        .               let params = iter::zip(a_subst, b_subst).enumerate().map(|(i, (a, b))| {
  315,000 ( 0.02%)          let (variance, variance_info) = match variances {
   15,376 ( 0.00%)              Some((ty_def_id, variances)) => {
   23,064 ( 0.00%)                  let variance = variances[i];
    7,688 ( 0.00%)                  let variance_info = if variance == ty::Invariant {
        .                               let ty =
    2,461 ( 0.00%)                          cached_ty.get_or_insert_with(|| tcx.type_of(ty_def_id).subst(tcx, a_subst));
        .                               ty::VarianceDiagInfo::Invariant { ty, param_index: i.try_into().unwrap() }
        .                           } else {
        .                               ty::VarianceDiagInfo::default()
        .                           };
        .                           (variance, variance_info)
        .                       }
        .                       None => (ty::Invariant, ty::VarianceDiagInfo::default()),
        .                   };
   66,668 ( 0.00%)          relation.relate_with_variance(variance, variance_info, a, b)
        .               });
        .           
        .               tcx.mk_substs(params)
    3,846 ( 0.00%)  }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {
    4,875 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::FnSig<'tcx>,
        .                   b: ty::FnSig<'tcx>,
        .               ) -> RelateResult<'tcx, ty::FnSig<'tcx>> {
        .                   let tcx = relation.tcx();
        .           
    2,250 ( 0.00%)          if a.c_variadic != b.c_variadic {
        .                       return Err(TypeError::VariadicMismatch(expected_found(
        .                           relation,
        .                           a.c_variadic,
        .                           b.c_variadic,
        .                       )));
        .                   }
    1,796 ( 0.00%)          let unsafety = relation.relate(a.unsafety, b.unsafety)?;
        .                   let abi = relation.relate(a.abi, b.abi)?;
        .           
    3,227 ( 0.00%)          if a.inputs().len() != b.inputs().len() {
        .                       return Err(TypeError::ArgCount);
        .                   }
        .           
    3,375 ( 0.00%)          let inputs_and_output = iter::zip(a.inputs(), b.inputs())
    1,493 ( 0.00%)              .map(|(&a, &b)| ((a, b), false))
    3,000 ( 0.00%)              .chain(iter::once(((a.output(), b.output()), true)))
      490 ( 0.00%)              .map(|((a, b), is_output)| {
      490 ( 0.00%)                  if is_output {
      428 ( 0.00%)                      relation.relate(a, b)
        .                           } else {
        .                               relation.relate_with_variance(
        .                                   ty::Contravariant,
        .                                   ty::VarianceDiagInfo::default(),
        .                                   a,
        .                                   b,
        .                               )
        .                           }
        .                       })
        .                       .enumerate()
    2,188 ( 0.00%)              .map(|(i, r)| match r {
        .                           Err(TypeError::Sorts(exp_found) | TypeError::ArgumentSorts(exp_found, _)) => {
        .                               Err(TypeError::ArgumentSorts(exp_found, i))
        .                           }
        .                           Err(TypeError::Mutability | TypeError::ArgumentMutability(_)) => {
        .                               Err(TypeError::ArgumentMutability(i))
        .                           }
    3,050 ( 0.00%)                  r => r,
        .                       });
    2,773 ( 0.00%)          Ok(ty::FnSig {
        .                       inputs_and_output: tcx.mk_type_list(inputs_and_output)?,
      375 ( 0.00%)              c_variadic: a.c_variadic,
        .                       unsafety,
        .                       abi,
        .                   })
    3,375 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::BoundConstness {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::BoundConstness,
        .                   b: ty::BoundConstness,
        .               ) -> RelateResult<'tcx, ty::BoundConstness> {
-- line 229 ----------------------------------------
-- line 236 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ast::Unsafety {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ast::Unsafety,
        .                   b: ast::Unsafety,
        .               ) -> RelateResult<'tcx, ast::Unsafety> {
      375 ( 0.00%)          if a != b {
        .                       Err(TypeError::UnsafetyMismatch(expected_found(relation, a, b)))
        .                   } else {
        .                       Ok(a)
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for abi::Abi {
-- line 252 ----------------------------------------
-- line 255 ----------------------------------------
        .                   a: abi::Abi,
        .                   b: abi::Abi,
        .               ) -> RelateResult<'tcx, abi::Abi> {
        .                   if a == b { Ok(a) } else { Err(TypeError::AbiMismatch(expected_found(relation, a, b))) }
        .               }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::ProjectionTy<'tcx> {
   10,066 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::ProjectionTy<'tcx>,
        .                   b: ty::ProjectionTy<'tcx>,
        .               ) -> RelateResult<'tcx, ty::ProjectionTy<'tcx>> {
    2,643 ( 0.00%)          if a.item_def_id != b.item_def_id {
        .                       Err(TypeError::ProjectionMismatched(expected_found(
        .                           relation,
        .                           a.item_def_id,
        .                           b.item_def_id,
        .                       )))
        .                   } else {
        .                       let substs = relation.relate(a.substs, b.substs)?;
    3,524 ( 0.00%)              Ok(ty::ProjectionTy { item_def_id: a.item_def_id, substs: &substs })
        .                   }
    6,997 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::ExistentialProjection<'tcx> {
   11,644 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::ExistentialProjection<'tcx>,
        .                   b: ty::ExistentialProjection<'tcx>,
        .               ) -> RelateResult<'tcx, ty::ExistentialProjection<'tcx>> {
    7,616 ( 0.00%)          if a.item_def_id != b.item_def_id {
        .                       Err(TypeError::ProjectionMismatched(expected_found(
        .                           relation,
        .                           a.item_def_id,
        .                           b.item_def_id,
        .                       )))
        .                   } else {
        .                       let term = relation.relate_with_variance(
        .                           ty::Invariant,
        .                           ty::VarianceDiagInfo::default(),
    3,318 ( 0.00%)                  a.term,
    4,244 ( 0.00%)                  b.term,
        .                       )?;
      756 ( 0.00%)              let substs = relation.relate_with_variance(
        .                           ty::Invariant,
        .                           ty::VarianceDiagInfo::default(),
    1,088 ( 0.00%)                  a.substs,
    1,088 ( 0.00%)                  b.substs,
        .                       )?;
   10,724 ( 0.00%)              Ok(ty::ExistentialProjection { item_def_id: a.item_def_id, substs, term })
        .                   }
    9,792 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::TraitRef<'tcx> {
  210,214 ( 0.01%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::TraitRef<'tcx>,
        .                   b: ty::TraitRef<'tcx>,
        .               ) -> RelateResult<'tcx, ty::TraitRef<'tcx>> {
        .                   // Different traits cannot be related.
   45,043 ( 0.00%)          if a.def_id != b.def_id {
       39 ( 0.00%)              Err(TypeError::Traits(expected_found(relation, a.def_id, b.def_id)))
        .                   } else {
   15,010 ( 0.00%)              let substs = relate_substs(relation, None, a.substs, b.substs)?;
   54,480 ( 0.00%)              Ok(ty::TraitRef { def_id: a.def_id, substs })
        .                   }
  135,135 ( 0.01%)      }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::ExistentialTraitRef<'tcx> {
      891 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::ExistentialTraitRef<'tcx>,
        .                   b: ty::ExistentialTraitRef<'tcx>,
        .               ) -> RelateResult<'tcx, ty::ExistentialTraitRef<'tcx>> {
        .                   // Different traits cannot be related.
    5,958 ( 0.00%)          if a.def_id != b.def_id {
        .                       Err(TypeError::Traits(expected_found(relation, a.def_id, b.def_id)))
        .                   } else {
    2,154 ( 0.00%)              let substs = relate_substs(relation, None, a.substs, b.substs)?;
    3,810 ( 0.00%)              Ok(ty::ExistentialTraitRef { def_id: a.def_id, substs })
        .                   }
      567 ( 0.00%)      }
        .           }
        .           
        .           #[derive(Copy, Debug, Clone, TypeFoldable)]
        .           struct GeneratorWitness<'tcx>(&'tcx ty::List<Ty<'tcx>>);
        .           
        .           impl<'tcx> Relate<'tcx> for GeneratorWitness<'tcx> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: GeneratorWitness<'tcx>,
        .                   b: GeneratorWitness<'tcx>,
        .               ) -> RelateResult<'tcx, GeneratorWitness<'tcx>> {
      408 ( 0.00%)          assert_eq!(a.0.len(), b.0.len());
        .                   let tcx = relation.tcx();
        .                   let types = tcx.mk_type_list(iter::zip(a.0, b.0).map(|(a, b)| relation.relate(a, b)))?;
        .                   Ok(GeneratorWitness(types))
        .               }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for Ty<'tcx> {
        .               #[inline]
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: Ty<'tcx>,
        .                   b: Ty<'tcx>,
        .               ) -> RelateResult<'tcx, Ty<'tcx>> {
  233,235 ( 0.01%)          relation.tys(a, b)
        .               }
        .           }
        .           
        .           /// The main "type relation" routine. Note that this does not handle
        .           /// inference artifacts, so you should filter those out before calling
        .           /// it.
  515,616 ( 0.03%)  pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(
        .               relation: &mut R,
        .               a: Ty<'tcx>,
        .               b: Ty<'tcx>,
        .           ) -> RelateResult<'tcx, Ty<'tcx>> {
        .               let tcx = relation.tcx();
        .               debug!("super_relate_tys: a={:?} b={:?}", a, b);
1,156,036 ( 0.07%)      match (a.kind(), b.kind()) {
        .                   (&ty::Infer(_), _) | (_, &ty::Infer(_)) => {
        .                       // The caller should handle these cases!
        .                       bug!("var types encountered in super_relate_tys")
        .                   }
        .           
        .                   (ty::Bound(..), _) | (_, ty::Bound(..)) => {
        .                       bug!("bound types encountered in super_relate_tys")
        .                   }
-- line 388 ----------------------------------------
-- line 391 ----------------------------------------
        .           
        .                   (&ty::Never, _)
        .                   | (&ty::Char, _)
        .                   | (&ty::Bool, _)
        .                   | (&ty::Int(_), _)
        .                   | (&ty::Uint(_), _)
        .                   | (&ty::Float(_), _)
        .                   | (&ty::Str, _)
    2,050 ( 0.00%)              if a == b =>
        .                   {
        .                       Ok(a)
        .                   }
        .           
    6,326 ( 0.00%)          (&ty::Param(ref a_p), &ty::Param(ref b_p)) if a_p.index == b_p.index => Ok(a),
        .           
        .                   (ty::Placeholder(p1), ty::Placeholder(p2)) if p1 == p2 => Ok(a),
        .           
  414,670 ( 0.02%)          (&ty::Adt(a_def, a_substs), &ty::Adt(b_def, b_substs)) if a_def == b_def => {
  132,144 ( 0.01%)              let substs = relation.relate_item_substs(a_def.did, a_substs, b_substs)?;
        .                       Ok(tcx.mk_adt(a_def, substs))
        .                   }
        .           
        .                   (&ty::Foreign(a_id), &ty::Foreign(b_id)) if a_id == b_id => Ok(tcx.mk_foreign(a_id)),
        .           
   14,099 ( 0.00%)          (&ty::Dynamic(a_obj, a_region), &ty::Dynamic(b_obj, b_region)) => {
    3,984 ( 0.00%)              let region_bound = relation.with_cause(Cause::ExistentialRegionBound, |relation| {
        .                           relation.relate_with_variance(
        .                               ty::Contravariant,
        .                               ty::VarianceDiagInfo::default(),
    1,992 ( 0.00%)                      a_region,
        .                               b_region,
        .                           )
        .                       })?;
        .                       Ok(tcx.mk_dynamic(relation.relate(a_obj, b_obj)?, region_bound))
        .                   }
        .           
    1,100 ( 0.00%)          (&ty::Generator(a_id, a_substs, movability), &ty::Generator(b_id, b_substs, _))
    1,375 ( 0.00%)              if a_id == b_id =>
        .                   {
        .                       // All Generator types with the same id represent
        .                       // the (anonymous) type of the same generator expression. So
        .                       // all of their regions should be equated.
      550 ( 0.00%)              let substs = relation.relate(a_substs, b_substs)?;
        .                       Ok(tcx.mk_generator(a_id, substs, movability))
        .                   }
        .           
      600 ( 0.00%)          (&ty::GeneratorWitness(a_types), &ty::GeneratorWitness(b_types)) => {
        .                       // Wrap our types with a temporary GeneratorWitness struct
        .                       // inside the binder so we can related them
        .                       let a_types = a_types.map_bound(GeneratorWitness);
        .                       let b_types = b_types.map_bound(GeneratorWitness);
        .                       // Then remove the GeneratorWitness for the result
        .                       let types = relation.relate(a_types, b_types)?.map_bound(|witness| witness.0);
        .                       Ok(tcx.mk_generator_witness(types))
        .                   }
        .           
    1,296 ( 0.00%)          (&ty::Closure(a_id, a_substs), &ty::Closure(b_id, b_substs)) if a_id == b_id => {
        .                       // All Closure types with the same id represent
        .                       // the (anonymous) type of the same closure expression. So
        .                       // all of their regions should be equated.
      324 ( 0.00%)              let substs = relation.relate(a_substs, b_substs)?;
        .                       Ok(tcx.mk_closure(a_id, &substs))
        .                   }
        .           
       40 ( 0.00%)          (&ty::RawPtr(a_mt), &ty::RawPtr(b_mt)) => {
        .                       let mt = relate_type_and_mut(relation, a_mt, b_mt, a)?;
        .                       Ok(tcx.mk_ptr(mt))
        .                   }
        .           
  101,797 ( 0.01%)          (&ty::Ref(a_r, a_ty, a_mutbl), &ty::Ref(b_r, b_ty, b_mutbl)) => {
   40,348 ( 0.00%)              let r = relation.relate_with_variance(
        .                           ty::Contravariant,
        .                           ty::VarianceDiagInfo::default(),
        .                           a_r,
        .                           b_r,
        .                       )?;
        .                       let a_mt = ty::TypeAndMut { ty: a_ty, mutbl: a_mutbl };
        .                       let b_mt = ty::TypeAndMut { ty: b_ty, mutbl: b_mutbl };
   60,608 ( 0.00%)              let mt = relate_type_and_mut(relation, a_mt, b_mt, a)?;
        .                       Ok(tcx.mk_ref(r, mt))
        .                   }
        .           
    2,375 ( 0.00%)          (&ty::Array(a_t, sz_a), &ty::Array(b_t, sz_b)) => {
      936 ( 0.00%)              let t = relation.relate(a_t, b_t)?;
      950 ( 0.00%)              match relation.relate(sz_a, sz_b) {
    1,425 ( 0.00%)                  Ok(sz) => Ok(tcx.mk_ty(ty::Array(t, sz))),
        .                           Err(err) => {
        .                               // Check whether the lengths are both concrete/known values,
        .                               // but are unequal, for better diagnostics.
        .                               //
        .                               // It might seem dubious to eagerly evaluate these constants here,
        .                               // we however cannot end up with errors in `Relate` during both
        .                               // `type_of` and `predicates_of`. This means that evaluating the
        .                               // constants should not cause cycle errors here.
-- line 484 ----------------------------------------
-- line 489 ----------------------------------------
        .                                       TypeError::FixedArraySize(expected_found(relation, sz_a_val, sz_b_val)),
        .                                   ),
        .                                   _ => Err(err),
        .                               }
        .                           }
        .                       }
        .                   }
        .           
    2,055 ( 0.00%)          (&ty::Slice(a_t), &ty::Slice(b_t)) => {
      278 ( 0.00%)              let t = relation.relate(a_t, b_t)?;
        .                       Ok(tcx.mk_slice(t))
        .                   }
        .           
    4,098 ( 0.00%)          (&ty::Tuple(as_), &ty::Tuple(bs)) => {
    4,098 ( 0.00%)              if as_.len() == bs.len() {
        .                           Ok(tcx.mk_tup(
   16,751 ( 0.00%)                      iter::zip(as_, bs).map(|(a, b)| relation.relate(a.expect_ty(), b.expect_ty())),
        .                           )?)
        .                       } else if !(as_.is_empty() || bs.is_empty()) {
        .                           Err(TypeError::TupleSize(expected_found(relation, as_.len(), bs.len())))
        .                       } else {
        .                           Err(TypeError::Sorts(expected_found(relation, a, b)))
        .                       }
        .                   }
        .           
      816 ( 0.00%)          (&ty::FnDef(a_def_id, a_substs), &ty::FnDef(b_def_id, b_substs))
    1,360 ( 0.00%)              if a_def_id == b_def_id =>
        .                   {
    1,088 ( 0.00%)              let substs = relation.relate_item_substs(a_def_id, a_substs, b_substs)?;
        .                       Ok(tcx.mk_fn_def(a_def_id, substs))
        .                   }
        .           
        .                   (&ty::FnPtr(a_fty), &ty::FnPtr(b_fty)) => {
    2,778 ( 0.00%)              let fty = relation.relate(a_fty, b_fty)?;
        .                       Ok(tcx.mk_fn_ptr(fty))
        .                   }
        .           
        .                   // these two are already handled downstream in case of lazy normalization
    2,330 ( 0.00%)          (&ty::Projection(a_data), &ty::Projection(b_data)) => {
        .                       let projection_ty = relation.relate(a_data, b_data)?;
        .                       Ok(tcx.mk_projection(projection_ty.item_def_id, projection_ty.substs))
        .                   }
        .           
    1,282 ( 0.00%)          (&ty::Opaque(a_def_id, a_substs), &ty::Opaque(b_def_id, b_substs))
    3,205 ( 0.00%)              if a_def_id == b_def_id =>
        .                   {
    3,846 ( 0.00%)              let substs = relate_substs(relation, None, a_substs, b_substs)?;
        .                       Ok(tcx.mk_opaque(a_def_id, substs))
        .                   }
        .           
        .                   _ => Err(TypeError::Sorts(expected_found(relation, a, b))),
        .               }
  580,068 ( 0.03%)  }
        .           
        .           /// The main "const relation" routine. Note that this does not handle
        .           /// inference artifacts, so you should filter those out before calling
        .           /// it.
    1,630 ( 0.00%)  pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(
        .               relation: &mut R,
        .               a: &'tcx ty::Const<'tcx>,
        .               b: &'tcx ty::Const<'tcx>,
        .           ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
        .               debug!("{}.super_relate_consts(a = {:?}, b = {:?})", relation.tag(), a, b);
        .               let tcx = relation.tcx();
        .           
        .               // FIXME(oli-obk): once const generics can have generic types, this assertion
        .               // will likely get triggered. Move to `normalize_erasing_regions` at that point.
      326 ( 0.00%)      let a_ty = tcx.erase_regions(a.ty);
      326 ( 0.00%)      let b_ty = tcx.erase_regions(b.ty);
      163 ( 0.00%)      if a_ty != b_ty {
        .                   relation.tcx().sess.delay_span_bug(
        .                       DUMMY_SP,
        .                       &format!("cannot relate constants of different types: {} != {}", a_ty, b_ty),
        .                   );
        .               }
        .           
        .               let eagerly_eval = |x: &'tcx ty::Const<'tcx>| x.eval(tcx, relation.param_env());
      163 ( 0.00%)      let a = eagerly_eval(a);
      326 ( 0.00%)      let b = eagerly_eval(b);
        .           
        .               // Currently, the values that can be unified are primitive types,
        .               // and those that derive both `PartialEq` and `Eq`, corresponding
        .               // to structural-match types.
    1,793 ( 0.00%)      let is_match = match (a.val, b.val) {
        .                   (ty::ConstKind::Infer(_), _) | (_, ty::ConstKind::Infer(_)) => {
        .                       // The caller should handle these cases!
        .                       bug!("var types encountered in super_relate_consts: {:?} {:?}", a, b)
        .                   }
        .           
        .                   (ty::ConstKind::Error(_), _) => return Ok(a),
        .                   (_, ty::ConstKind::Error(_)) => return Ok(b),
        .           
-- line 580 ----------------------------------------
-- line 608 ----------------------------------------
        .                               substs,
        .                               promoted: au.promoted,
        .                           }),
        .                           ty: a.ty,
        .                       }));
        .                   }
        .                   _ => false,
        .               };
      978 ( 0.00%)      if is_match { Ok(a) } else { Err(TypeError::ConstMismatch(expected_found(relation, a, b))) }
    1,467 ( 0.00%)  }
        .           
        .           fn check_const_value_eq<'tcx, R: TypeRelation<'tcx>>(
        .               relation: &mut R,
        .               a_val: ConstValue<'tcx>,
        .               b_val: ConstValue<'tcx>,
        .               // FIXME(oli-obk): these arguments should go away with valtrees
        .               a: &'tcx ty::Const<'tcx>,
        .               b: &'tcx ty::Const<'tcx>,
        .               // FIXME(oli-obk): this should just be `bool` with valtrees
        .           ) -> RelateResult<'tcx, bool> {
      163 ( 0.00%)      let tcx = relation.tcx();
    1,793 ( 0.00%)      Ok(match (a_val, b_val) {
    3,586 ( 0.00%)          (ConstValue::Scalar(Scalar::Int(a_val)), ConstValue::Scalar(Scalar::Int(b_val))) => {
      163 ( 0.00%)              a_val == b_val
        .                   }
        .                   (
        .                       ConstValue::Scalar(Scalar::Ptr(a_val, _a_size)),
        .                       ConstValue::Scalar(Scalar::Ptr(b_val, _b_size)),
        .                   ) => {
        .                       a_val == b_val
        .                           || match (tcx.global_alloc(a_val.provenance), tcx.global_alloc(b_val.provenance)) {
        .                               (GlobalAlloc::Function(a_instance), GlobalAlloc::Function(b_instance)) => {
-- line 639 ----------------------------------------
-- line 672 ----------------------------------------
        .                       }
        .                   }
        .           
        .                   _ => false,
        .               })
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>> {
   20,230 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: Self,
        .                   b: Self,
        .               ) -> RelateResult<'tcx, Self> {
    2,023 ( 0.00%)          let tcx = relation.tcx();
        .           
        .                   // FIXME: this is wasteful, but want to do a perf run to see how slow it is.
        .                   // We need to perform this deduplication as we sometimes generate duplicate projections
        .                   // in `a`.
        .                   let mut a_v: Vec<_> = a.into_iter().collect();
        .                   let mut b_v: Vec<_> = b.into_iter().collect();
        .                   // `skip_binder` here is okay because `stable_cmp` doesn't look at binders
   29,172 ( 0.00%)          a_v.sort_by(|a, b| a.skip_binder().stable_cmp(tcx, &b.skip_binder()));
        .                   a_v.dedup();
        .                   b_v.sort_by(|a, b| a.skip_binder().stable_cmp(tcx, &b.skip_binder()));
        .                   b_v.dedup();
    6,069 ( 0.00%)          if a_v.len() != b_v.len() {
       32 ( 0.00%)              return Err(TypeError::ExistentialMismatch(expected_found(relation, a, b)));
        .                   }
        .           
    8,060 ( 0.00%)          let v = iter::zip(a_v, b_v).map(|(ep_a, ep_b)| {
        .                       use crate::ty::ExistentialPredicate::*;
   34,636 ( 0.00%)              match (ep_a.skip_binder(), ep_b.skip_binder()) {
      992 ( 0.00%)                  (Trait(a), Trait(b)) => Ok(ep_a
    1,767 ( 0.00%)                      .rebind(Trait(relation.relate(ep_a.rebind(a), ep_b.rebind(b))?.skip_binder()))),
        .                           (Projection(a), Projection(b)) => Ok(ep_a.rebind(Projection(
    8,122 ( 0.00%)                      relation.relate(ep_a.rebind(a), ep_b.rebind(b))?.skip_binder(),
        .                           ))),
   17,542 ( 0.00%)                  (AutoTrait(a), AutoTrait(b)) if a == b => Ok(ep_a.rebind(AutoTrait(a))),
        .                           _ => Err(TypeError::ExistentialMismatch(expected_found(relation, a, b))),
        .                       }
        .                   });
    4,030 ( 0.00%)          tcx.mk_poly_existential_predicates(v)
   16,184 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::ClosureSubsts<'tcx> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::ClosureSubsts<'tcx>,
        .                   b: ty::ClosureSubsts<'tcx>,
        .               ) -> RelateResult<'tcx, ty::ClosureSubsts<'tcx>> {
-- line 722 ----------------------------------------
-- line 737 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for SubstsRef<'tcx> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: SubstsRef<'tcx>,
        .                   b: SubstsRef<'tcx>,
        .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
    2,406 ( 0.00%)          relate_substs(relation, None, a, b)
        .               }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::Region<'tcx> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::Region<'tcx>,
        .                   b: ty::Region<'tcx>,
        .               ) -> RelateResult<'tcx, ty::Region<'tcx>> {
   64,711 ( 0.00%)          relation.regions(a, b)
        .               }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for &'tcx ty::Const<'tcx> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: &'tcx ty::Const<'tcx>,
        .                   b: &'tcx ty::Const<'tcx>,
        .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
    1,900 ( 0.00%)          relation.consts(a, b)
        .               }
        .           }
        .           
        .           impl<'tcx, T: Relate<'tcx>> Relate<'tcx> for ty::Binder<'tcx, T> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::Binder<'tcx, T>,
        .                   b: ty::Binder<'tcx, T>,
        .               ) -> RelateResult<'tcx, ty::Binder<'tcx, T>> {
   37,215 ( 0.00%)          relation.binders(a, b)
        .               }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for GenericArg<'tcx> {
  247,316 ( 0.01%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: GenericArg<'tcx>,
        .                   b: GenericArg<'tcx>,
        .               ) -> RelateResult<'tcx, GenericArg<'tcx>> {
  322,960 ( 0.02%)          match (a.unpack(), b.unpack()) {
        .                       (GenericArgKind::Lifetime(a_lt), GenericArgKind::Lifetime(b_lt)) => {
        .                           Ok(relation.relate(a_lt, b_lt)?.into())
        .                       }
        .                       (GenericArgKind::Type(a_ty), GenericArgKind::Type(b_ty)) => {
    1,903 ( 0.00%)                  Ok(relation.relate(a_ty, b_ty)?.into())
        .                       }
        .                       (GenericArgKind::Const(a_ct), GenericArgKind::Const(b_ct)) => {
        .                           Ok(relation.relate(a_ct, b_ct)?.into())
        .                       }
        .                       (GenericArgKind::Lifetime(unpacked), x) => {
        .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
        .                       }
        .                       (GenericArgKind::Type(unpacked), x) => {
        .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
        .                       }
        .                       (GenericArgKind::Const(unpacked), x) => {
        .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
        .                       }
        .                   }
  265,857 ( 0.02%)      }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::ImplPolarity {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::ImplPolarity,
        .                   b: ty::ImplPolarity,
        .               ) -> RelateResult<'tcx, ty::ImplPolarity> {
-- line 813 ----------------------------------------
-- line 815 ----------------------------------------
        .                       Err(TypeError::PolarityMismatch(expected_found(relation, a, b)))
        .                   } else {
        .                       Ok(a)
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::TraitPredicate<'tcx> {
      143 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::TraitPredicate<'tcx>,
        .                   b: ty::TraitPredicate<'tcx>,
        .               ) -> RelateResult<'tcx, ty::TraitPredicate<'tcx>> {
        .                   Ok(ty::TraitPredicate {
       65 ( 0.00%)              trait_ref: relation.relate(a.trait_ref, b.trait_ref)?,
        .                       constness: relation.relate(a.constness, b.constness)?,
        .                       polarity: relation.relate(a.polarity, b.polarity)?,
        .                   })
      117 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::Term<'tcx> {
    3,264 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: Self,
        .                   b: Self,
        .               ) -> RelateResult<'tcx, Self> {
    7,616 ( 0.00%)          Ok(match (a, b) {
      324 ( 0.00%)              (Term::Ty(a), Term::Ty(b)) => relation.relate(a, b)?.into(),
        .                       (Term::Const(a), Term::Const(b)) => relation.relate(a, b)?.into(),
        .                       _ => return Err(TypeError::Mismatch),
        .                   })
    4,352 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::ProjectionPredicate<'tcx> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::ProjectionPredicate<'tcx>,
        .                   b: ty::ProjectionPredicate<'tcx>,
        .               ) -> RelateResult<'tcx, ty::ProjectionPredicate<'tcx>> {
-- line 855 ----------------------------------------
-- line 862 ----------------------------------------
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Error handling
        .           
        .           pub fn expected_found<'tcx, R, T>(relation: &mut R, a: T, b: T) -> ExpectedFound<T>
        .           where
        .               R: TypeRelation<'tcx>,
        .           {
       26 ( 0.00%)      ExpectedFound::new(relation.a_is_expected(), a, b)
        .           }

1,296,831 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs
--------------------------------------------------------------------------------
Ir                 

-- line 14 ----------------------------------------
        .           
        .           pub type EncodeResult = Result<(), !>;
        .           
        .           pub struct Encoder {
        .               pub data: Vec<u8>,
        .           }
        .           
        .           impl Encoder {
        1 ( 0.00%)      pub fn new(data: Vec<u8>) -> Encoder {
        4 ( 0.00%)          Encoder { data }
        1 ( 0.00%)      }
        .           
        1 ( 0.00%)      pub fn into_inner(self) -> Vec<u8> {
        4 ( 0.00%)          self.data
        1 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn position(&self) -> usize {
   12,739 ( 0.00%)          self.data.len()
        .               }
        .           }
        .           
        .           macro_rules! write_leb128 {
        .               ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{
        .                   const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);
        .                   let old_len = $enc.data.len();
        .           
-- line 40 ----------------------------------------
-- line 67 ----------------------------------------
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> EncodeResult {
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn emit_usize(&mut self, v: usize) -> EncodeResult {
  386,945 ( 0.02%)          write_leb128!(self, v, usize, write_usize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u128(&mut self, v: u128) -> EncodeResult {
    3,899 ( 0.00%)          write_leb128!(self, v, u128, write_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u64(&mut self, v: u64) -> EncodeResult {
    3,101 ( 0.00%)          write_leb128!(self, v, u64, write_u64_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u32(&mut self, v: u32) -> EncodeResult {
  353,318 ( 0.02%)          write_leb128!(self, v, u32, write_u32_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u16(&mut self, v: u16) -> EncodeResult {
        .                   self.data.extend_from_slice(&v.to_le_bytes());
        .                   Ok(())
        .               }
        .           
-- line 98 ----------------------------------------
-- line 131 ----------------------------------------
        .               #[inline]
        .               fn emit_i8(&mut self, v: i8) -> EncodeResult {
        .                   let as_u8: u8 = unsafe { std::mem::transmute(v) };
        .                   self.emit_u8(as_u8)
        .               }
        .           
        .               #[inline]
        .               fn emit_bool(&mut self, v: bool) -> EncodeResult {
    5,999 ( 0.00%)          self.emit_u8(if v { 1 } else { 0 })
        .               }
        .           
        .               #[inline]
        .               fn emit_f64(&mut self, v: f64) -> EncodeResult {
        .                   let as_u64: u64 = v.to_bits();
        .                   self.emit_u64(as_u64)
        .               }
        .           
-- line 147 ----------------------------------------
-- line 549 ----------------------------------------
        .               #[inline]
        .               pub fn advance(&mut self, bytes: usize) {
        .                   self.position += bytes;
        .               }
        .           
        .               #[inline]
        .               pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {
        .                   let start = self.position;
       67 ( 0.00%)          self.position += bytes;
       67 ( 0.00%)          &self.data[start..self.position]
        .               }
        .           }
        .           
        .           macro_rules! read_leb128 {
        .               ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};
        .           }
        .           
        .           impl<'a> serialize::Decoder for Decoder<'a> {
        .               #[inline]
        .               fn read_unit(&mut self) -> () {
        .                   ()
        .               }
        .           
        .               #[inline]
        .               fn read_u128(&mut self) -> u128 {
    1,241 ( 0.00%)          read_leb128!(self, read_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_u64(&mut self) -> u64 {
    6,705 ( 0.00%)          read_leb128!(self, read_u64_leb128)
        .               }
        .           
        .               #[inline]
   63,851 ( 0.00%)      fn read_u32(&mut self) -> u32 {
  276,659 ( 0.02%)          read_leb128!(self, read_u32_leb128)
  127,702 ( 0.01%)      }
        .           
        .               #[inline]
        .               fn read_u16(&mut self) -> u16 {
  565,320 ( 0.03%)          let bytes = [self.data[self.position], self.data[self.position + 1]];
   80,760 ( 0.00%)          let value = u16::from_le_bytes(bytes);
  161,970 ( 0.01%)          self.position += 2;
        .                   value
        .               }
        .           
        .               #[inline]
        .               fn read_u8(&mut self) -> u8 {
3,234,177 ( 0.19%)          let value = self.data[self.position];
  636,237 ( 0.04%)          self.position += 1;
        .                   value
        .               }
        .           
        .               #[inline]
  382,469 ( 0.02%)      fn read_usize(&mut self) -> usize {
  382,653 ( 0.02%)          read_leb128!(self, read_usize_leb128)
  764,938 ( 0.05%)      }
        .           
        .               #[inline]
        .               fn read_i128(&mut self) -> i128 {
        .                   read_leb128!(self, read_i128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_i64(&mut self) -> i64 {
-- line 613 ----------------------------------------
-- line 637 ----------------------------------------
        .               #[inline]
        .               fn read_isize(&mut self) -> isize {
        .                   read_leb128!(self, read_isize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_bool(&mut self) -> bool {
        .                   let value = self.read_u8();
   20,688 ( 0.00%)          value != 0
        .               }
        .           
        .               #[inline]
        .               fn read_f64(&mut self) -> f64 {
        .                   let bits = self.read_u64();
        .                   f64::from_bits(bits)
        .               }
        .           
-- line 653 ----------------------------------------
-- line 660 ----------------------------------------
        .               #[inline]
        .               fn read_char(&mut self) -> char {
        .                   let bits = self.read_u32();
        .                   std::char::from_u32(bits).unwrap()
        .               }
        .           
        .               #[inline]
        .               fn read_str(&mut self) -> Cow<'_, str> {
   66,505 ( 0.00%)          let len = self.read_usize();
  361,960 ( 0.02%)          let sentinel = self.data[self.position + len];
   90,628 ( 0.01%)          assert!(sentinel == STR_SENTINEL);
        .                   let s = unsafe {
        .                       std::str::from_utf8_unchecked(&self.data[self.position..self.position + len])
        .                   };
  226,570 ( 0.01%)          self.position += len + 1;
   64,125 ( 0.00%)          Cow::Borrowed(s)
        .               }
        .           
        .               #[inline]
        .               fn read_raw_bytes_into(&mut self, s: &mut [u8]) {
      254 ( 0.00%)          let start = self.position;
    1,856 ( 0.00%)          self.position += s.len();
      254 ( 0.00%)          s.copy_from_slice(&self.data[start..self.position]);
        .               }
        .           }
        .           
        .           // Specializations for contiguous byte sequences follow. The default implementations for slices
        .           // encode and decode each element individually. This isn't necessary for `u8` slices when using
        .           // opaque encoders and decoders, because each `u8` is unchanged by encoding and decoding.
        .           // Therefore, we can use more efficient implementations that process the entire sequence at once.
        .           
-- line 690 ----------------------------------------

  984,326 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 416 ----------------------------------------
        .               /// ```
        .               /// # #![allow(unused_mut)]
        .               /// let mut vec: Vec<i32> = Vec::new();
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
    9,711 ( 0.00%)      pub const fn new() -> Self {
2,370,607 ( 0.14%)          Vec { buf: RawVec::NEW, len: 0 }
    9,971 ( 0.00%)      }
        .           
        .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
        .               ///
        .               /// The vector will be able to hold exactly `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the vector will not allocate.
        .               ///
        .               /// It is important to note that although the returned vector has the
        .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 461 ----------------------------------------
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
      232 ( 0.00%)      pub fn with_capacity(capacity: usize) -> Self {
       58 ( 0.00%)          Self::with_capacity_in(capacity, Global)
      116 ( 0.00%)      }
        .           
        .               /// Creates a `Vec<T>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
        .               ///
-- line 479 ----------------------------------------
-- line 529 ----------------------------------------
        .               ///
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts(p, len, cap);
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      216 ( 0.00%)      pub unsafe fn from_raw_parts(ptr: *mut T, length: usize, capacity: usize) -> Self {
       36 ( 0.00%)          unsafe { Self::from_raw_parts_in(ptr, length, capacity, Global) }
       72 ( 0.00%)      }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               /// Constructs a new, empty `Vec<T, A>`.
        .               ///
        .               /// The vector will not allocate until elements are pushed onto it.
        .               ///
        .               /// # Examples
-- line 547 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// // ...but this may make the vector reallocate
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
    2,996 ( 0.00%)      pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
  693,121 ( 0.04%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
      856 ( 0.00%)      }
        .           
        .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
        .               ///
-- line 618 ----------------------------------------
-- line 676 ----------------------------------------
        .               ///
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
   18,148 ( 0.00%)      pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
   60,487 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
    2,792 ( 0.00%)      }
        .           
        .               /// Decomposes a `Vec<T>` into its raw components.
        .               ///
        .               /// Returns the raw pointer to the underlying data, the length of
        .               /// the vector (in elements), and the allocated capacity of the
        .               /// data (in elements). These are the same arguments in the same
        .               /// order as the arguments to [`from_raw_parts`].
        .               ///
-- line 694 ----------------------------------------
-- line 777 ----------------------------------------
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let vec: Vec<i32> = Vec::with_capacity(10);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    2,552 ( 0.00%)      pub fn capacity(&self) -> usize {
  137,401 ( 0.01%)          self.buf.capacity()
    1,276 ( 0.00%)      }
        .           
        .               /// Reserves capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
        .               /// # Panics
-- line 795 ----------------------------------------
-- line 800 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
   19,145 ( 0.00%)      pub fn reserve(&mut self, additional: usize) {
  264,308 ( 0.02%)          self.buf.reserve(self.len, additional);
    7,658 ( 0.00%)      }
        .           
        .               /// Reserves the minimum capacity for exactly `additional` more elements to
        .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
        .               /// capacity will be greater than or equal to `self.len() + additional`.
        .               /// Does nothing if the capacity is already sufficient.
        .               ///
        .               /// Note that the allocator may give the collection more space than it
        .               /// requests. Therefore, capacity can not be relied upon to be precisely
-- line 818 ----------------------------------------
-- line 829 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve_exact(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve_exact(&mut self, additional: usize) {
    6,798 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
        .               }
        .           
        .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `try_reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 845 ----------------------------------------
-- line 926 ----------------------------------------
        .               /// let mut vec = Vec::with_capacity(10);
        .               /// vec.extend([1, 2, 3]);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// vec.shrink_to_fit();
        .               /// assert!(vec.capacity() >= 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    1,668 ( 0.00%)      pub fn shrink_to_fit(&mut self) {
        .                   // The capacity is never less than the length, and there's nothing to do when
        .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
        .                   // by only calling it with a greater capacity.
   13,253 ( 0.00%)          if self.capacity() > self.len {
    4,566 ( 0.00%)              self.buf.shrink_to_fit(self.len);
        .                   }
    1,112 ( 0.00%)      }
        .           
        .               /// Shrinks the capacity of the vector with a lower bound.
        .               ///
        .               /// The capacity will remain at least as large as both the length
        .               /// and the supplied value.
        .               ///
        .               /// If the current capacity is less than the lower limit, this is a no-op.
        .               ///
-- line 949 ----------------------------------------
-- line 987 ----------------------------------------
        .               /// vec.extend([1, 2, 3]);
        .               ///
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// let slice = vec.into_boxed_slice();
        .               /// assert_eq!(slice.into_vec().capacity(), 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    1,112 ( 0.00%)      pub fn into_boxed_slice(mut self) -> Box<[T], A> {
        .                   unsafe {
    3,336 ( 0.00%)              self.shrink_to_fit();
    7,629 ( 0.00%)              let me = ManuallyDrop::new(self);
    5,560 ( 0.00%)              let buf = ptr::read(&me.buf);
    2,780 ( 0.00%)              let len = me.len();
    7,228 ( 0.00%)              buf.into_box(len).assume_init()
      556 ( 0.00%)          }
    1,112 ( 0.00%)      }
        .           
        .               /// Shortens the vector, keeping the first `len` elements and dropping
        .               /// the rest.
        .               ///
        .               /// If `len` is greater than the vector's current length, this has no
        .               /// effect.
        .               ///
        .               /// The [`drain`] method can emulate `truncate`, but causes the excess
-- line 1011 ----------------------------------------
-- line 1040 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.truncate(0);
        .               /// assert_eq!(vec, []);
        .               /// ```
        .               ///
        .               /// [`clear`]: Vec::clear
        .               /// [`drain`]: Vec::drain
        .               #[stable(feature = "rust1", since = "1.0.0")]
  119,537 ( 0.01%)      pub fn truncate(&mut self, len: usize) {
        .                   // This is safe because:
        .                   //
        .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
        .                   //   case avoids creating an invalid slice, and
        .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
        .                   //   such that no value will be dropped twice in case `drop_in_place`
        .                   //   were to panic once (if it panics twice, the program aborts).
        .                   unsafe {
        .                       // Note: It's intentional that this is `>` and not `>=`.
        .                       //       Changing it to `>=` has negative performance
        .                       //       implications in some cases. See #78884 for more.
  100,840 ( 0.01%)              if len > self.len {
        .                           return;
        .                       }
       48 ( 0.00%)              let remaining_len = self.len - len;
       36 ( 0.00%)              let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
  128,732 ( 0.01%)              self.len = len;
    3,839 ( 0.00%)              ptr::drop_in_place(s);
        .                   }
  143,426 ( 0.01%)      }
        .           
        .               /// Extracts a slice containing the entire vector.
        .               ///
        .               /// Equivalent to `&s[..]`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::io::{self, Write};
        .               /// let buffer = vec![1, 2, 3, 5, 8];
        .               /// io::sink().write(buffer.as_slice()).unwrap();
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "vec_as_slice", since = "1.7.0")]
       20 ( 0.00%)      pub fn as_slice(&self) -> &[T] {
       30 ( 0.00%)          self
       20 ( 0.00%)      }
        .           
        .               /// Extracts a mutable slice of the entire vector.
        .               ///
        .               /// Equivalent to `&mut s[..]`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1093 ----------------------------------------
-- line 1123 ----------------------------------------
        .               ///         assert_eq!(*x_ptr.add(i), 1 << i);
        .               ///     }
        .               /// }
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
   33,328 ( 0.00%)      pub fn as_ptr(&self) -> *const T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref`, which creates an intermediate reference.
2,894,004 ( 0.17%)          let ptr = self.buf.ptr();
        .                   unsafe {
   16,664 ( 0.00%)              assume(!ptr.is_null());
        .                   }
        .                   ptr
   33,328 ( 0.00%)      }
        .           
        .               /// Returns an unsafe mutable pointer to the vector's buffer.
        .               ///
        .               /// The caller must ensure that the vector outlives the pointer this
        .               /// function returns, or else it will end up pointing to garbage.
        .               /// Modifying the vector may cause its buffer to be reallocated,
        .               /// which would also make any pointers to it invalid.
        .               ///
-- line 1147 ----------------------------------------
-- line 1159 ----------------------------------------
        .               ///         *x_ptr.add(i) = i as i32;
        .               ///     }
        .               ///     x.set_len(size);
        .               /// }
        .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
        .               /// ```
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
   88,552 ( 0.01%)      pub fn as_mut_ptr(&mut self) -> *mut T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref_mut`, which creates an intermediate reference.
2,752,761 ( 0.16%)          let ptr = self.buf.ptr();
        .                   unsafe {
   44,276 ( 0.00%)              assume(!ptr.is_null());
        .                   }
        .                   ptr
   88,552 ( 0.01%)      }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               #[inline]
    2,852 ( 0.00%)      pub fn allocator(&self) -> &A {
    2,852 ( 0.00%)          self.buf.allocator()
    2,852 ( 0.00%)      }
        .           
        .               /// Forces the length of the vector to `new_len`.
        .               ///
        .               /// This is a low-level operation that maintains none of the normal
        .               /// invariants of the type. Normally changing the length of a vector
        .               /// is done using one of the safe operations instead, such as
        .               /// [`truncate`], [`resize`], [`extend`], or [`clear`].
        .               ///
-- line 1190 ----------------------------------------
-- line 1256 ----------------------------------------
        .               ///     vec.set_len(0);
        .               /// }
        .               /// ```
        .               ///
        .               /// Normally, here, one would use [`clear`] instead to correctly drop
        .               /// the contents and thus not leak memory.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    4,248 ( 0.00%)      pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   debug_assert!(new_len <= self.capacity());
        .           
  390,635 ( 0.02%)          self.len = new_len;
    9,316 ( 0.00%)      }
        .           
        .               /// Removes an element from the vector and returns it.
        .               ///
        .               /// The removed element is replaced by the last element of the vector.
        .               ///
        .               /// This does not preserve ordering, but is *O*(1).
        .               /// If you need to preserve the element order, use [`remove`] instead.
        .               ///
-- line 1276 ----------------------------------------
-- line 1305 ----------------------------------------
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // We replace self[index] with the last element. Note that if the
        .                       // bounds check above succeeds there must be a last element (which
        .                       // can be self[index] itself).
        .                       let value = ptr::read(self.as_ptr().add(index));
        .                       let base_ptr = self.as_mut_ptr();
       12 ( 0.00%)              ptr::copy(base_ptr.add(len - 1), base_ptr.add(index), 1);
        .                       self.set_len(len - 1);
        .                       value
        .                   }
        .               }
        .           
        .               /// Inserts an element at position `index` within the vector, shifting all
        .               /// elements after it to the right.
        .               ///
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.insert(1, 4);
        .               /// assert_eq!(vec, [1, 4, 2, 3]);
        .               /// vec.insert(4, 5);
        .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    4,354 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
        .                   }
        .           
      692 ( 0.00%)          let len = self.len();
    1,450 ( 0.00%)          if index > len {
        .                       assert_failed(index, len);
        .                   }
        .           
        .                   // space for the new element
    2,000 ( 0.00%)          if len == self.buf.capacity() {
        .                       self.reserve(1);
        .                   }
        .           
        .                   unsafe {
        .                       // infallible
        .                       // The spot to put the new value
        .                       {
        .                           let p = self.as_mut_ptr().add(index);
        .                           // Shift everything over to make space. (Duplicating the
        .                           // `index`th element into two consecutive places.)
    2,706 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
        .                           // Write it in, overwriting the first copy of the `index`th
        .                           // element.
        .                           ptr::write(p, element);
        .                       }
    2,000 ( 0.00%)              self.set_len(len + 1);
        .                   }
    3,732 ( 0.00%)      }
        .           
        .               /// Removes and returns the element at position `index` within the vector,
        .               /// shifting all elements after it to the left.
        .               ///
        .               /// Note: Because this shifts over the remaining elements, it has a
        .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
        .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
        .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1387 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let mut v = vec![1, 2, 3];
        .               /// assert_eq!(v.remove(1), 2);
        .               /// assert_eq!(v, [1, 3]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[track_caller]
    4,293 ( 0.00%)      pub fn remove(&mut self, index: usize) -> T {
        .                   #[cold]
        .                   #[inline(never)]
        .                   #[track_caller]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("removal index (is {}) should be < len (is {})", index, len);
        .                   }
        .           
    1,692 ( 0.00%)          let len = self.len();
    5,300 ( 0.00%)          if index >= len {
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // infallible
        .                       let ret;
        .                       {
        .                           // the place we are taking from.
        .                           let ptr = self.as_mut_ptr().add(index);
        .                           // copy it out, unsafely having a copy of the value on
        .                           // the stack and in the vector at the same time.
    9,178 ( 0.00%)                  ret = ptr::read(ptr);
        .           
        .                           // Shift everything down to fill in that spot.
    3,513 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
        .                       }
    1,812 ( 0.00%)              self.set_len(len - 1);
        .                       ret
        .                   }
    7,155 ( 0.00%)      }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1431 ----------------------------------------
-- line 1442 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3, 4, 5];
        .               /// let keep = [false, true, true, false, true];
        .               /// let mut iter = keep.iter();
        .               /// vec.retain(|_| *iter.next().unwrap());
        .               /// assert_eq!(vec, [2, 3, 5]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
  211,163 ( 0.01%)      pub fn retain<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&T) -> bool,
        .               {
    8,458 ( 0.00%)          self.retain_mut(|elem| f(elem));
  206,960 ( 0.01%)      }
        .           
        .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
        .               /// });
        .               /// assert_eq!(vec, [2, 3, 4]);
        .               /// ```
        .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
        .               pub fn retain_mut<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
   26,851 ( 0.00%)          let original_len = self.len();
        .                   // Avoid double drop if the drop guard is not executed,
        .                   // since we may make some holes during the process.
        .                   unsafe { self.set_len(0) };
        .           
        .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
        .                   //      |<-              processed len   ->| ^- next to check
        .                   //                  |<-  deleted cnt     ->|
        .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
        .                       v: &'a mut Vec<T, A>,
        .                       processed_len: usize,
        .                       deleted_cnt: usize,
        .                       original_len: usize,
        .                   }
        .           
        .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
        .                       fn drop(&mut self) {
   21,407 ( 0.00%)                  if self.deleted_cnt > 0 {
        .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
        .                               unsafe {
        .                                   ptr::copy(
        .                                       self.v.as_ptr().add(self.processed_len),
   18,199 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
        .                                       self.original_len - self.processed_len,
        .                                   );
        .                               }
        .                           }
        .                           // SAFETY: After filling holes, all items are in contiguous memory.
        .                           unsafe {
        2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
        .                           }
        .                       }
        .                   }
        .           
        .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
        .           
        .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
        .                       original_len: usize,
        .                       f: &mut F,
        .                       g: &mut BackshiftOnDrop<'_, T, A>,
        .                   ) where
        .                       F: FnMut(&mut T) -> bool,
        .                   {
  262,245 ( 0.02%)              while g.processed_len != original_len {
        .                           // SAFETY: Unchecked element must be valid.
        .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
   69,417 ( 0.00%)                  if !f(cur) {
        .                               // Advance early to avoid double drop if `drop_in_place` panicked.
    8,313 ( 0.00%)                      g.processed_len += 1;
    3,892 ( 0.00%)                      g.deleted_cnt += 1;
        .                               // SAFETY: We never touch this element again after dropped.
      210 ( 0.00%)                      unsafe { ptr::drop_in_place(cur) };
        .                               // We already advanced the counter.
        .                               if DELETED {
        .                                   continue;
        .                               } else {
        .                                   break;
        .                               }
        .                           }
        .                           if DELETED {
        .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
        .                               // We use copy for move, and never touch this element again.
        .                               unsafe {
    5,976 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
        3 ( 0.00%)                          ptr::copy_nonoverlapping(cur, hole_slot, 1);
        .                               }
        .                           }
    4,998 ( 0.00%)                  g.processed_len += 1;
        .                       }
        .                   }
        .           
        .                   // Stage 1: Nothing was deleted.
        .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
        .           
        .                   // Stage 2: Some elements were deleted.
        .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
        .               ///
        .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
        .               ///
        .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
        .               /// ```
        .               #[stable(feature = "dedup_by", since = "1.16.0")]
   28,350 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
        .               where
        .                   F: FnMut(&mut T, &mut T) -> bool,
        .               {
    4,262 ( 0.00%)          let len = self.len();
    9,400 ( 0.00%)          if len <= 1 {
        .                       return;
        .                   }
        .           
        .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
        .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
        .                       /* Offset of the element we want to check if it is duplicate */
        .                       read: usize,
        .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
        .                   let ptr = gap.vec.as_mut_ptr();
        .           
        .                   /* Drop items while going through Vec, it should be more efficient than
        .                    * doing slice partition_dedup + truncate */
        .           
        .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
        .                    * are always in-bounds and read_ptr never aliases prev_ptr */
        .                   unsafe {
   27,197 ( 0.00%)              while gap.read < len {
        .                           let read_ptr = ptr.add(gap.read);
        .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
        .           
      550 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
        .                               // Increase `gap.read` now since the drop may panic.
        .                               gap.read += 1;
        .                               /* We have found duplicate, drop it in-place */
        .                               ptr::drop_in_place(read_ptr);
        .                           } else {
        .                               let write_ptr = ptr.add(gap.write);
        .           
        .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
        .                                * have to use `copy` or conditional `copy_nonoverlapping`.
        .                                * Looks like the first option is faster. */
        .                               ptr::copy(read_ptr, write_ptr, 1);
        .           
        .                               /* We have filled that place, so go further */
   22,660 ( 0.00%)                      gap.write += 1;
        .                               gap.read += 1;
        .                           }
        .                       }
        .           
        .                       /* Technically we could let `gap` clean up with its Drop, but
        .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
        .                        * the codegen, so we just do it manually */
        .                       gap.vec.set_len(gap.write);
        .                       mem::forget(gap);
        .                   }
   32,400 ( 0.00%)      }
        .           
        .               /// Appends an element to the back of a collection.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
        .               ///
        .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2];
        .               /// vec.push(3);
        .               /// assert_eq!(vec, [1, 2, 3]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
   88,402 ( 0.01%)      pub fn push(&mut self, value: T) {
        .                   // This will panic or abort if we would allocate > isize::MAX bytes
        .                   // or if the length increment would overflow for zero-sized types.
4,399,210 ( 0.26%)          if self.len == self.buf.capacity() {
  334,459 ( 0.02%)              self.buf.reserve_for_push(self.len);
        .                   }
        .                   unsafe {
  311,291 ( 0.02%)              let end = self.as_mut_ptr().add(self.len);
  132,264 ( 0.01%)              ptr::write(end, value);
5,567,938 ( 0.33%)              self.len += 1;
        .                   }
   33,270 ( 0.00%)      }
        .           
        .               /// Removes the last element from a vector and returns it, or [`None`] if it
        .               /// is empty.
        .               ///
        .               /// If you'd like to pop the first element, consider using
        .               /// [`VecDeque::pop_front`] instead.
        .               ///
        .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3];
        .               /// assert_eq!(vec.pop(), Some(3));
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop(&mut self) -> Option<T> {
  810,170 ( 0.05%)          if self.len == 0 {
       68 ( 0.00%)              None
        .                   } else {
        .                       unsafe {
  659,015 ( 0.04%)                  self.len -= 1;
  127,580 ( 0.01%)                  Some(ptr::read(self.as_ptr().add(self.len())))
        .                       }
        .                   }
        .               }
        .           
        .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
        .               ///
        .               /// # Panics
        .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
        .               /// let mut vec2 = vec![4, 5, 6];
        .               /// vec.append(&mut vec2);
        .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
        .               /// assert_eq!(vec2, []);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "append", since = "1.4.0")]
      605 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
        .                   unsafe {
       40 ( 0.00%)              self.append_elements(other.as_slice() as _);
       30 ( 0.00%)              other.set_len(0);
        .                   }
      470 ( 0.00%)      }
        .           
        .               /// Appends elements to `Self` from other buffer.
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
   37,760 ( 0.00%)      unsafe fn append_elements(&mut self, other: *const [T]) {
    3,776 ( 0.00%)          let count = unsafe { (*other).len() };
    3,776 ( 0.00%)          self.reserve(count);
   70,095 ( 0.00%)          let len = self.len();
   11,328 ( 0.00%)          unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
  383,629 ( 0.02%)          self.len += count;
    7,552 ( 0.00%)      }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// When the iterator **is** dropped, all elements in the range are removed
        .               /// from the vector, even if the iterator was not fully consumed. If the
        .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
        .               /// unspecified how many elements are removed.
-- line 1808 ----------------------------------------
-- line 1820 ----------------------------------------
        .               /// assert_eq!(v, &[1]);
        .               /// assert_eq!(u, &[2, 3]);
        .               ///
        .               /// // A full range clears the vector
        .               /// v.drain(..);
        .               /// assert_eq!(v, &[]);
        .               /// ```
        .               #[stable(feature = "drain", since = "1.6.0")]
    7,007 ( 0.00%)      pub fn drain<R>(&mut self, range: R) -> Drain<'_, T, A>
        .               where
        .                   R: RangeBounds<usize>,
        .               {
        .                   // Memory safety
        .                   //
        .                   // When the Drain is first created, it shortens the length of
        .                   // the source vector to make sure no uninitialized or moved-from elements
        .                   // are accessible at all if the Drain's destructor never gets to run.
        .                   //
        .                   // Drain will ptr::read out the values to remove.
        .                   // When finished, remaining tail of the vec is copied back to cover
        .                   // the hole, and the vector length is restored to the new length.
        .                   //
   22,849 ( 0.00%)          let len = self.len();
   15,015 ( 0.00%)          let Range { start, end } = slice::range(range, ..len);
        .           
        .                   unsafe {
        .                       // set self.vec length's to start, to be safe in case Drain is leaked
    3,003 ( 0.00%)              self.set_len(start);
        .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
        .                       // whole Drain iterator (like &mut T).
   16,082 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
    5,290 ( 0.00%)              Drain {
        .                           tail_start: end,
    5,051 ( 0.00%)                  tail_len: len - end,
    5,005 ( 0.00%)                  iter: range_slice.iter(),
    4,004 ( 0.00%)                  vec: NonNull::from(self),
        .                       }
        .                   }
    2,002 ( 0.00%)      }
        .           
        .               /// Clears the vector, removing all values.
        .               ///
        .               /// Note that this method has no effect on the allocated capacity
        .               /// of the vector.
        .               ///
        .               /// # Examples
        .               ///
-- line 1866 ----------------------------------------
-- line 1869 ----------------------------------------
        .               ///
        .               /// v.clear();
        .               ///
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn clear(&mut self) {
  213,991 ( 0.01%)          self.truncate(0)
        .               }
        .           
        .               /// Returns the number of elements in the vector, also referred to
        .               /// as its 'length'.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let a = vec![1, 2, 3];
        .               /// assert_eq!(a.len(), 3);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
   19,706 ( 0.00%)      pub fn len(&self) -> usize {
    9,853 ( 0.00%)          self.len
   19,706 ( 0.00%)      }
        .           
        .               /// Returns `true` if the vector contains no elements.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let mut v = Vec::new();
        .               /// assert!(v.is_empty());
        .               ///
        .               /// v.push(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
    3,650 ( 0.00%)      pub fn is_empty(&self) -> bool {
  282,878 ( 0.02%)          self.len() == 0
    7,300 ( 0.00%)      }
        .           
        .               /// Splits the collection into two at the given index.
        .               ///
        .               /// Returns a newly allocated vector containing the elements in the range
        .               /// `[at, len)`. After the call, the original vector will be left containing
        .               /// the elements `[0, at)` with its previous capacity unchanged.
        .               ///
        .               /// # Panics
-- line 1917 ----------------------------------------
-- line 1935 ----------------------------------------
        .                   A: Clone,
        .               {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(at: usize, len: usize) -> ! {
        .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
        .                   }
        .           
      845 ( 0.00%)          if at > self.len() {
        .                       assert_failed(at, self.len());
        .                   }
        .           
      687 ( 0.00%)          if at == 0 {
        .                       // the new vector can take over the original buffer and avoid the copy
        .                       return mem::replace(
        .                           self,
        .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
        .                       );
        .                   }
        .           
        8 ( 0.00%)          let other_len = self.len - at;
        .                   let mut other = Vec::with_capacity_in(other_len, self.allocator().clone());
        .           
        .                   // Unsafely `set_len` and copy items to `other`.
        .                   unsafe {
        .                       self.set_len(at);
        .                       other.set_len(other_len);
        .           
        .                       ptr::copy_nonoverlapping(self.as_ptr().add(at), other.as_mut_ptr(), other.len());
-- line 1963 ----------------------------------------
-- line 1988 ----------------------------------------
        .               ///
        .               /// let mut vec = vec![];
        .               /// let mut p = 1;
        .               /// vec.resize_with(4, || { p *= 2; p });
        .               /// assert_eq!(vec, [2, 4, 8, 16]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
   20,440 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
        .               where
        .                   F: FnMut() -> T,
        .               {
    2,698 ( 0.00%)          let len = self.len();
    5,396 ( 0.00%)          if new_len > len {
   17,366 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
   17,742 ( 0.00%)      }
        .           
        .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
        .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
        .               /// `'a`. If the type has only static references, or none at all, then this
        .               /// may be chosen to be `'static`.
        .               ///
        .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
        .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2064 ----------------------------------------
        .               /// unsafe {
        .               ///     v.set_len(3);
        .               /// }
        .               ///
        .               /// assert_eq!(&v, &[0, 1, 2]);
        .               /// ```
        .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
        .               #[inline]
      963 ( 0.00%)      pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
        .                   // Note:
        .                   // This method is not implemented in terms of `split_at_spare_mut`,
        .                   // to prevent invalidation of pointers to the buffer.
        .                   unsafe {
    1,284 ( 0.00%)              slice::from_raw_parts_mut(
    2,257 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
    1,760 ( 0.00%)                  self.buf.capacity() - self.len,
        .                       )
        .                   }
      642 ( 0.00%)      }
        .           
        .               /// Returns vector content as a slice of `T`, along with the remaining spare
        .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
        .               ///
        .               /// The returned spare capacity slice can be used to fill the vector with data
        .               /// (e.g. by reading from a file) before marking the data as initialized using
        .               /// the [`set_len`] method.
        .               ///
-- line 2090 ----------------------------------------
-- line 2189 ----------------------------------------
        .               /// assert_eq!(vec, ["hello", "world", "world"]);
        .               ///
        .               /// let mut vec = vec![1, 2, 3, 4];
        .               /// vec.resize(2, 0);
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize", since = "1.5.0")]
   10,126 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
    1,087 ( 0.00%)          let len = self.len();
        .           
    3,051 ( 0.00%)          if new_len > len {
    2,571 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
        .                   } else {
       18 ( 0.00%)              self.truncate(new_len);
        .                   }
    1,223 ( 0.00%)      }
        .           
        .               /// Clones and appends all elements in a slice to the `Vec`.
        .               ///
        .               /// Iterates over the slice `other`, clones each element, and then appends
        .               /// it to this `Vec`. The `other` slice is traversed in-order.
        .               ///
        .               /// Note that this function is same as [`extend`] except that it is
        .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2220 ----------------------------------------
        .               /// let mut vec = vec![1];
        .               /// vec.extend_from_slice(&[2, 3, 4]);
        .               /// assert_eq!(vec, [1, 2, 3, 4]);
        .               /// ```
        .               ///
        .               /// [`extend`]: Vec::extend
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_extend_from_slice", since = "1.6.0")]
   35,728 ( 0.00%)      pub fn extend_from_slice(&mut self, other: &[T]) {
   12,992 ( 0.00%)          self.spec_extend(other.iter())
    6,496 ( 0.00%)      }
        .           
        .               /// Copies elements from `src` range to the end of the vector.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the starting point is greater than the end point or if
        .               /// the end point is greater than the length of the vector.
        .               ///
-- line 2238 ----------------------------------------
-- line 2270 ----------------------------------------
        .           // This code generalizes `extend_with_{element,default}`.
        .           trait ExtendWith<T> {
        .               fn next(&mut self) -> T;
        .               fn last(self) -> T;
        .           }
        .           
        .           struct ExtendElement<T>(T);
        .           impl<T: Clone> ExtendWith<T> for ExtendElement<T> {
       12 ( 0.00%)      fn next(&mut self) -> T {
       12 ( 0.00%)          self.0.clone()
       12 ( 0.00%)      }
       18 ( 0.00%)      fn last(self) -> T {
        .                   self.0
       12 ( 0.00%)      }
        .           }
        .           
        .           struct ExtendFunc<F>(F);
        .           impl<T, F: FnMut() -> T> ExtendWith<T> for ExtendFunc<F> {
        .               fn next(&mut self) -> T {
        .                   (self.0)()
        .               }
        .               fn last(mut self) -> T {
        .                   (self.0)()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               #[cfg(not(no_global_oom_handling))]
        .               /// Extend the vector by `n` values, using the given generator.
  140,259 ( 0.01%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
       30 ( 0.00%)          self.reserve(n);
        .           
        .                   unsafe {
    3,667 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
        .                       // Use SetLenOnDrop to work around bug where compiler
        .                       // might not realize the store through `ptr` through self.set_len()
        .                       // don't alias.
       42 ( 0.00%)              let mut local_len = SetLenOnDrop::new(&mut self.len);
        .           
        .                       // Write all elements except the last one
      222 ( 0.00%)              for _ in 1..n {
       66 ( 0.00%)                  ptr::write(ptr, value.next());
       36 ( 0.00%)                  ptr = ptr.offset(1);
        .                           // Increment the length in every step in case next() panics
       12 ( 0.00%)                  local_len.increment_len(1);
        .                       }
        .           
  141,537 ( 0.01%)              if n > 0 {
        .                           // We can write the last element directly without cloning needlessly
       72 ( 0.00%)                  ptr::write(ptr, value.last());
       12 ( 0.00%)                  local_len.increment_len(1);
        .                       }
        .           
        .                       // len set by scope guard
       24 ( 0.00%)          }
  111,611 ( 0.01%)      }
        .           }
        .           
        .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
        .               /// Removes consecutive repeated elements in the vector according to the
        .               /// [`PartialEq`] trait implementation.
        .               ///
        .               /// If the vector is sorted, this removes all duplicates.
        .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
        .               ///
        .               /// vec.dedup();
        .               ///
        .               /// assert_eq!(vec, [1, 2, 3, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn dedup(&mut self) {
    4,058 ( 0.00%)          self.dedup_by(|a, b| a == b)
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Internal methods and functions
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
   36,494 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
  175,447 ( 0.01%)      <T as SpecFromElem>::from_elem(elem, n, Global)
   43,158 ( 0.00%)  }
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[unstable(feature = "allocator_api", issue = "32838")]
        .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
        .               <T as SpecFromElem>::from_elem(elem, n, alloc)
        .           }
        .           
-- line 2367 ----------------------------------------
-- line 2423 ----------------------------------------
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Common trait implementations for Vec
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
        .               type Target = [T];
        .           
   49,992 ( 0.00%)      fn deref(&self) -> &[T] {
4,531,809 ( 0.27%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
   33,568 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
    2,235 ( 0.00%)      fn deref_mut(&mut self) -> &mut [T] {
1,241,556 ( 0.07%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
    1,490 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           trait SpecCloneFrom {
        .               fn clone_from(this: &mut Self, other: &Self);
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
-- line 2448 ----------------------------------------
-- line 2468 ----------------------------------------
        .                   this.extend_from_slice(other);
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
        .               #[cfg(not(test))]
  106,700 ( 0.01%)      fn clone(&self) -> Self {
    1,605 ( 0.00%)          let alloc = self.allocator().clone();
    2,881 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
  133,366 ( 0.01%)      }
        .           
        .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
        .               // required for this method definition, is not available. Instead use the
        .               // `slice::to_vec`  function which is only available with cfg(test)
        .               // NB see the slice::hack module in slice.rs for more information
        .               #[cfg(test)]
        .               fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2517 ----------------------------------------
        .           #[rustc_on_unimplemented(
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
        .               type Output = I::Output;
        .           
        .               #[inline]
       45 ( 0.00%)      fn index(&self, index: I) -> &Self::Output {
  135,483 ( 0.01%)          Index::index(&**self, index)
       18 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_on_unimplemented(
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {
        .               #[inline]
        .               fn index_mut(&mut self, index: I) -> &mut Self::Output {
      936 ( 0.00%)          IndexMut::index_mut(&mut **self, index)
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> FromIterator<T> for Vec<T> {
        .               #[inline]
      165 ( 0.00%)      fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
1,256,005 ( 0.07%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
       78 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
        .               type Item = T;
        .               type IntoIter = IntoIter<T, A>;
        .           
        .               /// Creates a consuming iterator, that is, one that moves each value out of
-- line 2556 ----------------------------------------
-- line 2562 ----------------------------------------
        .               /// ```
        .               /// let v = vec!["a".to_string(), "b".to_string()];
        .               /// for s in v.into_iter() {
        .               ///     // s has type String, not &String
        .               ///     println!("{}", s);
        .               /// }
        .               /// ```
        .               #[inline]
    3,315 ( 0.00%)      fn into_iter(self) -> IntoIter<T, A> {
        .                   unsafe {
  468,542 ( 0.03%)              let mut me = ManuallyDrop::new(self);
    2,210 ( 0.00%)              let alloc = ptr::read(me.allocator());
    5,496 ( 0.00%)              let begin = me.as_mut_ptr();
    3,315 ( 0.00%)              let end = if mem::size_of::<T>() == 0 {
        .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
        .                       } else {
    5,467 ( 0.00%)                  begin.add(me.len()) as *const T
        .                       };
    1,105 ( 0.00%)              let cap = me.buf.capacity();
  317,589 ( 0.02%)              IntoIter {
    4,391 ( 0.00%)                  buf: NonNull::new_unchecked(begin),
        .                           phantom: PhantomData,
        .                           cap,
        .                           alloc,
        .                           ptr: begin,
    1,105 ( 0.00%)                  end,
        .                       }
        .                   }
    2,210 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a Vec<T, A> {
        .               type Item = &'a T;
        .               type IntoIter = slice::Iter<'a, T>;
        .           
      244 ( 0.00%)      fn into_iter(self) -> slice::Iter<'a, T> {
    8,748 ( 0.00%)          self.iter()
      244 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
        .               type Item = &'a mut T;
        .               type IntoIter = slice::IterMut<'a, T>;
        .           
      758 ( 0.00%)      fn into_iter(self) -> slice::IterMut<'a, T> {
    4,468 ( 0.00%)          self.iter_mut()
      758 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
        .               #[inline]
    4,891 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
  482,115 ( 0.03%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
    4,338 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, item: T) {
      356 ( 0.00%)          self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
        .                   self.reserve(additional);
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               // leaf method to which various SpecFrom/SpecExtend implementations delegate when
        .               // they have no further optimizations to apply
        .               #[cfg(not(no_global_oom_handling))]
      100 ( 0.00%)      fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
        .                   // This is the case for a general iterator.
        .                   //
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iterator {
        .                   //          self.push(item);
        .                   //      }
  274,695 ( 0.02%)          while let Some(element) = iterator.next() {
   16,920 ( 0.00%)              let len = self.len();
  283,193 ( 0.02%)              if len == self.capacity() {
      519 ( 0.00%)                  let (lower, _) = iterator.size_hint();
        .                           self.reserve(lower.saturating_add(1));
        .                       }
        .                       unsafe {
      161 ( 0.00%)                  ptr::write(self.as_mut_ptr().add(len), element);
        .                           // Since next() executes user code which can panic we have to bump the length
        .                           // after each step.
        .                           // NB can't overflow since we would have had to alloc the address space
  209,929 ( 0.01%)                  self.set_len(len + 1);
        .                       }
       10 ( 0.00%)          }
    2,197 ( 0.00%)      }
        .           
        .               /// Creates a splicing iterator that replaces the specified range in the vector
        .               /// with the given `replace_with` iterator and yields the removed items.
        .               /// `replace_with` does not need to be the same length as `range`.
        .               ///
        .               /// `range` is removed even if the iterator is not consumed until the end.
        .               ///
        .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2693 ----------------------------------------
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "vec_splice", since = "1.21.0")]
        .               pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter, A>
        .               where
        .                   R: RangeBounds<usize>,
        .                   I: IntoIterator<Item = T>,
        .               {
      220 ( 0.00%)          Splice { drain: self.drain(range), replace_with: replace_with.into_iter() }
        .               }
        .           
        .               /// Creates an iterator which uses a closure to determine if an element should be removed.
        .               ///
        .               /// If the closure returns true, then the element is removed and yielded.
        .               /// If the closure returns false, the element will remain in the vector and will not be yielded
        .               /// by the iterator.
        .               ///
-- line 2709 ----------------------------------------
-- line 2745 ----------------------------------------
        .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
        .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
        .               /// ```
        .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
        .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
    1,635 ( 0.00%)          let old_len = self.len();
        .           
        .                   // Guard against us getting leaked (leak amplification)
        .                   unsafe {
        .                       self.set_len(0);
        .                   }
        .           
    6,480 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
        .               }
        .           }
        .           
        .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
        .           ///
        .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
        .           /// append the entire slice at once.
        .           ///
-- line 2768 ----------------------------------------
-- line 2796 ----------------------------------------
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Eq, A: Allocator> Eq for Vec<T, A> {}
        .           
        .           /// Implements ordering of vectors, [lexicographically](core::cmp::Ord#lexicographical-comparison).
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Ord, A: Allocator> Ord for Vec<T, A> {
        .               #[inline]
        4 ( 0.00%)      fn cmp(&self, other: &Self) -> Ordering {
        8 ( 0.00%)          Ord::cmp(&**self, &**other)
        2 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
  535,244 ( 0.03%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // use drop for [T]
        .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
        .                       // could avoid questions of validity in certain cases
  352,257 ( 0.02%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
        .                   }
        .                   // RawVec handles deallocation
  598,474 ( 0.04%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
        .           impl<T> const Default for Vec<T> {
        .               /// Creates an empty `Vec<T>`.
        .               fn default() -> Vec<T> {
        .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
        .               /// newly-allocated buffer with exactly the right capacity.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
        .               /// ```
        .               fn from(v: Vec<T, A>) -> Self {
        4 ( 0.00%)          v.into_boxed_slice()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl From<&str> for Vec<u8> {
        .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
        .               ///
-- line 2992 ----------------------------------------

1,675,221 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/freshen.rs
--------------------------------------------------------------------------------
Ir               

-- line 47 ----------------------------------------
      .               const_freshen_count: u32,
      .               ty_freshen_map: FxHashMap<ty::InferTy, Ty<'tcx>>,
      .               const_freshen_map: FxHashMap<ty::InferConst<'tcx>, &'tcx ty::Const<'tcx>>,
      .               keep_static: bool,
      .           }
      .           
      .           impl<'a, 'tcx> TypeFreshener<'a, 'tcx> {
      .               pub fn new(infcx: &'a InferCtxt<'a, 'tcx>, keep_static: bool) -> TypeFreshener<'a, 'tcx> {
341,160 ( 0.02%)          TypeFreshener {
      .                       infcx,
      .                       ty_freshen_count: 0,
      .                       const_freshen_count: 0,
      .                       ty_freshen_map: Default::default(),
      .                       const_freshen_map: Default::default(),
      .                       keep_static,
      .                   }
      .               }
      .           
 72,208 ( 0.00%)      fn freshen_ty<F>(
      .                   &mut self,
      .                   opt_ty: Option<Ty<'tcx>>,
      .                   key: ty::InferTy,
      .                   freshener: F,
      .               ) -> Ty<'tcx>
      .               where
      .                   F: FnOnce(u32) -> ty::InferTy,
      .               {
 18,052 ( 0.00%)          if let Some(ty) = opt_ty {
      .                       return ty.fold_with(self);
      .                   }
      .           
 11,892 ( 0.00%)          match self.ty_freshen_map.entry(key) {
    837 ( 0.00%)              Entry::Occupied(entry) => *entry.get(),
      .                       Entry::Vacant(entry) => {
  5,109 ( 0.00%)                  let index = self.ty_freshen_count;
 20,436 ( 0.00%)                  self.ty_freshen_count += 1;
 10,218 ( 0.00%)                  let t = self.infcx.tcx.mk_ty_infer(freshener(index));
      .                           entry.insert(t);
      .                           t
      .                       }
      .                   }
 53,514 ( 0.00%)      }
      .           
      .               fn freshen_const<F>(
      .                   &mut self,
      .                   opt_ct: Option<&'tcx ty::Const<'tcx>>,
      .                   key: ty::InferConst<'tcx>,
      .                   freshener: F,
      .                   ty: Ty<'tcx>,
      .               ) -> &'tcx ty::Const<'tcx>
-- line 96 ----------------------------------------
-- line 111 ----------------------------------------
      .                           ct
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {
      .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
129,748 ( 0.01%)          self.infcx.tcx
 19,359 ( 0.00%)      }
      .           
      .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
 93,580 ( 0.01%)          match *r {
      .                       ty::ReLateBound(..) => {
      .                           // leave bound regions alone
      .                           r
      .                       }
      .           
      .                       ty::ReEarlyBound(..)
      .                       | ty::ReFree(_)
      .                       | ty::ReVar(_)
      .                       | ty::RePlaceholder(..)
      .                       | ty::ReEmpty(_)
      .                       | ty::ReErased => {
      .                           // replace all free regions with 'erased
      .                           self.tcx().lifetimes.re_erased
      .                       }
      .                       ty::ReStatic => {
 11,977 ( 0.00%)                  if self.keep_static {
      .                               r
      .                           } else {
      .                               self.tcx().lifetimes.re_erased
      .                           }
      .                       }
      .                   }
    992 ( 0.00%)      }
      .           
787,824 ( 0.05%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
393,912 ( 0.02%)          if !t.needs_infer() && !t.has_erasable_regions() {
      .                       return t;
      .                   }
      .           
      .                   let tcx = self.infcx.tcx;
      .           
199,937 ( 0.01%)          match *t.kind() {
  9,008 ( 0.00%)              ty::Infer(ty::TyVar(v)) => {
 72,064 ( 0.00%)                  let opt_ty = self.infcx.inner.borrow_mut().type_variables().probe(v).known();
 81,072 ( 0.00%)                  self.freshen_ty(opt_ty, ty::TyVar(v), ty::FreshTy)
      .                       }
      .           
     72 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self.freshen_ty(
    144 ( 0.00%)                  self.infcx
      .                               .inner
      .                               .borrow_mut()
      .                               .int_unification_table()
      .                               .probe_value(v)
      .                               .map(|v| v.to_type(tcx)),
      .                           ty::IntVar(v),
      .                           ty::FreshIntTy,
      .                       ),
-- line 170 ----------------------------------------
-- line 210 ----------------------------------------
      .                       | ty::Dynamic(..)
      .                       | ty::Never
      .                       | ty::Tuple(..)
      .                       | ty::Projection(..)
      .                       | ty::Foreign(..)
      .                       | ty::Param(..)
      .                       | ty::Closure(..)
      .                       | ty::GeneratorWitness(..)
292,472 ( 0.02%)              | ty::Opaque(..) => t.super_fold_with(self),
      .           
      .                       ty::Placeholder(..) | ty::Bound(..) => bug!("unexpected type {:?}", t),
      .                   }
600,159 ( 0.04%)      }
      .           
  2,424 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
  2,424 ( 0.00%)          match ct.val {
      .                       ty::ConstKind::Infer(ty::InferConst::Var(v)) => {
      .                           let opt_ct = self
      .                               .infcx
      .                               .inner
      .                               .borrow_mut()
      .                               .const_unification_table()
      .                               .probe_value(v)
      .                               .val
-- line 233 ----------------------------------------
-- line 256 ----------------------------------------
      .                       }
      .           
      .                       ty::ConstKind::Param(_)
      .                       | ty::ConstKind::Value(_)
      .                       | ty::ConstKind::Unevaluated(..)
      .                       | ty::ConstKind::Error(_) => {}
      .                   }
      .           
  3,232 ( 0.00%)          ct.super_fold_with(self)
      .               }
      .           }

149,107 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/freshen.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .                   #[inline]
        .                   pub fn $fn_name(
        .                       out: &mut [::std::mem::MaybeUninit<u8>; max_leb128_len!($int_ty)],
        .                       mut value: $int_ty,
        .                   ) -> &[u8] {
        .                       let mut i = 0;
        .           
        .                       loop {
  266,371 ( 0.02%)                  if value < 0x80 {
        .                               unsafe {
  115,744 ( 0.01%)                          *out.get_unchecked_mut(i).as_mut_ptr() = value as u8;
        .                               }
        .           
  159,658 ( 0.01%)                      i += 1;
        .                               break;
        .                           } else {
        .                               unsafe {
  140,564 ( 0.01%)                          *out.get_unchecked_mut(i).as_mut_ptr() = ((value & 0x7f) | 0x80) as u8;
        .                               }
        .           
   53,861 ( 0.00%)                      value >>= 7;
        .                               i += 1;
        .                           }
        .                       }
        .           
        .                       unsafe { ::std::mem::MaybeUninit::slice_assume_init_ref(&out.get_unchecked(..i)) }
        .                   }
        .               };
        .           }
-- line 45 ----------------------------------------
-- line 53 ----------------------------------------
        .           macro_rules! impl_read_unsigned_leb128 {
        .               ($fn_name:ident, $int_ty:ty) => {
        .                   #[inline]
        .                   pub fn $fn_name(slice: &[u8], position: &mut usize) -> $int_ty {
        .                       // The first iteration of this loop is unpeeled. This is a
        .                       // performance win because this code is hot and integer values less
        .                       // than 128 are very common, typically occurring 50-80% or more of
        .                       // the time, even for u64 and u128.
2,669,032 ( 0.16%)              let byte = slice[*position];
1,334,516 ( 0.08%)              *position += 1;
1,334,516 ( 0.08%)              if (byte & 0x80) == 0 {
      288 ( 0.00%)                  return byte as $int_ty;
        .                       }
    2,194 ( 0.00%)              let mut result = (byte & 0x7F) as $int_ty;
        .                       let mut shift = 7;
        .                       loop {
  902,097 ( 0.05%)                  let byte = slice[*position];
  587,285 ( 0.03%)                  *position += 1;
  601,398 ( 0.04%)                  if (byte & 0x80) == 0 {
  474,338 ( 0.03%)                      result |= (byte as $int_ty) << shift;
        .                               return result;
        .                           } else {
        .                               result |= ((byte & 0x7F) as $int_ty) << shift;
        .                           }
        .                           shift += 7;
        .                       }
        .                   }
        .               };
-- line 80 ----------------------------------------

1,003,540 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/traits.rs
--------------------------------------------------------------------------------
Ir               

-- line 20 ----------------------------------------
      .               fn cmp(&self, other: &str) -> Ordering {
      .                   self.as_bytes().cmp(other.as_bytes())
      .               }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl PartialEq for str {
      .               #[inline]
947,241 ( 0.06%)      fn eq(&self, other: &str) -> bool {
841,992 ( 0.05%)          self.as_bytes() == other.as_bytes()
420,996 ( 0.03%)      }
      .               #[inline]
      .               fn ne(&self, other: &str) -> bool {
      .                   !(*self).eq(other)
      .               }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl Eq for str {}
-- line 38 ----------------------------------------
-- line 55 ----------------------------------------
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<I> ops::Index<I> for str
      .           where
      .               I: SliceIndex<str>,
      .           {
      .               type Output = I::Output;
      .           
      .               #[inline]
 37,685 ( 0.00%)      fn index(&self, index: I) -> &I::Output {
 34,965 ( 0.00%)          index.index(self)
 23,310 ( 0.00%)      }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<I> ops::IndexMut<I> for str
      .           where
      .               I: SliceIndex<str>,
      .           {
      .               #[inline]
-- line 73 ----------------------------------------
-- line 110 ----------------------------------------
      .               unsafe fn get_unchecked(self, slice: *const str) -> *const Self::Output {
      .                   slice
      .               }
      .               #[inline]
      .               unsafe fn get_unchecked_mut(self, slice: *mut str) -> *mut Self::Output {
      .                   slice
      .               }
      .               #[inline]
 66,666 ( 0.00%)      fn index(self, slice: &str) -> &Self::Output {
      .                   slice
 22,222 ( 0.00%)      }
      .               #[inline]
      .               fn index_mut(self, slice: &mut str) -> &mut Self::Output {
      .                   slice
      .               }
      .           }
      .           
      .           /// Implements substring slicing with syntax `&self[begin .. end]` or `&mut
      .           /// self[begin .. end]`.
-- line 128 ----------------------------------------
-- line 159 ----------------------------------------
      .           /// // byte 100 is outside the string
      .           /// // &s[3 .. 100];
      .           /// ```
      .           #[stable(feature = "str_checked_slicing", since = "1.20.0")]
      .           unsafe impl SliceIndex<str> for ops::Range<usize> {
      .               type Output = str;
      .               #[inline]
      .               fn get(self, slice: &str) -> Option<&Self::Output> {
167,544 ( 0.01%)          if self.start <= self.end
      .                       && slice.is_char_boundary(self.start)
      .                       && slice.is_char_boundary(self.end)
      .                   {
      .                       // SAFETY: just checked that `start` and `end` are on a char boundary,
      .                       // and we are passing in a safe reference, so the return value will also be one.
      .                       // We also checked char boundaries, so this is valid UTF-8.
      .                       Some(unsafe { &*self.get_unchecked(slice) })
      .                   } else {
-- line 175 ----------------------------------------
-- line 185 ----------------------------------------
      .                       // SAFETY: just checked that `start` and `end` are on a char boundary.
      .                       // We know the pointer is unique because we got it from `slice`.
      .                       Some(unsafe { &mut *self.get_unchecked_mut(slice) })
      .                   } else {
      .                       None
      .                   }
      .               }
      .               #[inline]
    117 ( 0.00%)      unsafe fn get_unchecked(self, slice: *const str) -> *const Self::Output {
     18 ( 0.00%)          let slice = slice as *const [u8];
      .                   // SAFETY: the caller guarantees that `self` is in bounds of `slice`
      .                   // which satisfies all the conditions for `add`.
     27 ( 0.00%)          let ptr = unsafe { slice.as_ptr().add(self.start) };
 99,290 ( 0.01%)          let len = self.end - self.start;
     36 ( 0.00%)          ptr::slice_from_raw_parts(ptr, len) as *const str
     18 ( 0.00%)      }
      .               #[inline]
      .               unsafe fn get_unchecked_mut(self, slice: *mut str) -> *mut Self::Output {
      .                   let slice = slice as *mut [u8];
      .                   // SAFETY: see comments for `get_unchecked`.
      .                   let ptr = unsafe { slice.as_mut_ptr().add(self.start) };
      .                   let len = self.end - self.start;
      .                   ptr::slice_from_raw_parts_mut(ptr, len) as *mut str
      .               }
-- line 208 ----------------------------------------
-- line 315 ----------------------------------------
      .           /// # Panics
      .           ///
      .           /// Panics if `begin` does not point to the starting byte offset of
      .           /// a character (as defined by `is_char_boundary`), or if `begin > len`.
      .           #[stable(feature = "str_checked_slicing", since = "1.20.0")]
      .           unsafe impl SliceIndex<str> for ops::RangeFrom<usize> {
      .               type Output = str;
      .               #[inline]
  7,072 ( 0.00%)      fn get(self, slice: &str) -> Option<&Self::Output> {
  7,133 ( 0.00%)          if slice.is_char_boundary(self.start) {
      .                       // SAFETY: just checked that `start` is on a char boundary,
      .                       // and we are passing in a safe reference, so the return value will also be one.
  2,720 ( 0.00%)              Some(unsafe { &*self.get_unchecked(slice) })
      .                   } else {
      .                       None
      .                   }
  2,176 ( 0.00%)      }
      .               #[inline]
      .               fn get_mut(self, slice: &mut str) -> Option<&mut Self::Output> {
      .                   if slice.is_char_boundary(self.start) {
      .                       // SAFETY: just checked that `start` is on a char boundary,
      .                       // and we are passing in a safe reference, so the return value will also be one.
      .                       Some(unsafe { &mut *self.get_unchecked_mut(slice) })
      .                   } else {
      .                       None
      .                   }
      .               }
      .               #[inline]
  7,072 ( 0.00%)      unsafe fn get_unchecked(self, slice: *const str) -> *const Self::Output {
  1,088 ( 0.00%)          let slice = slice as *const [u8];
      .                   // SAFETY: the caller guarantees that `self` is in bounds of `slice`
      .                   // which satisfies all the conditions for `add`.
  1,632 ( 0.00%)          let ptr = unsafe { slice.as_ptr().add(self.start) };
 12,591 ( 0.00%)          let len = slice.len() - self.start;
  2,176 ( 0.00%)          ptr::slice_from_raw_parts(ptr, len) as *const str
  1,088 ( 0.00%)      }
      .               #[inline]
      .               unsafe fn get_unchecked_mut(self, slice: *mut str) -> *mut Self::Output {
      .                   let slice = slice as *mut [u8];
      .                   // SAFETY: identical to `get_unchecked`.
      .                   let ptr = unsafe { slice.as_mut_ptr().add(self.start) };
      .                   let len = slice.len() - self.start;
      .                   ptr::slice_from_raw_parts_mut(ptr, len) as *mut str
      .               }
      .               #[inline]
  7,616 ( 0.00%)      fn index(self, slice: &str) -> &Self::Output {
  5,440 ( 0.00%)          let (start, end) = (self.start, slice.len());
  5,440 ( 0.00%)          match self.get(slice) {
  2,176 ( 0.00%)              Some(s) => s,
      .                       None => super::slice_error_fail(slice, start, end),
      .                   }
  1,088 ( 0.00%)      }
      .               #[inline]
      .               fn index_mut(self, slice: &mut str) -> &mut Self::Output {
      .                   if slice.is_char_boundary(self.start) {
      .                       // SAFETY: just checked that `start` is on a char boundary,
      .                       // and we are passing in a safe reference, so the return value will also be one.
      .                       unsafe { &mut *self.get_unchecked_mut(slice) }
      .                   } else {
      .                       super::slice_error_fail(slice, self.start, slice.len())
-- line 374 ----------------------------------------

579,741 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/traits.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir                 

-- line 118 ----------------------------------------
        .               stability: InternedSet<'tcx, attr::Stability>,
        .           
        .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
        .               const_stability: InternedSet<'tcx, attr::ConstStability>,
        .           }
        .           
        .           impl<'tcx> CtxtInterners<'tcx> {
        .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
       17 ( 0.00%)          CtxtInterners {
        .                       arena,
        .                       type_: Default::default(),
        .                       type_list: Default::default(),
        .                       substs: Default::default(),
        .                       region: Default::default(),
        .                       poly_existential_predicates: Default::default(),
        .                       canonical_var_infos: Default::default(),
        .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
        .                       stability: Default::default(),
        .                       const_stability: Default::default(),
        .                   }
        .               }
        .           
        .               /// Interns a type.
        .               #[allow(rustc::usage_of_ty_tykind)]
        .               #[inline(never)]
1,676,832 ( 0.10%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
        .                   self.type_
1,048,020 ( 0.06%)              .intern(kind, |kind| {
   47,906 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
        .           
        .                           let ty_struct = TyS {
   95,812 ( 0.01%)                      kind,
        .                               flags: flags.flags,
        .                               outer_exclusive_binder: flags.outer_exclusive_binder,
        .                           };
        .           
        .                           Interned(self.arena.alloc(ty_struct))
        .                       })
        .                       .0
1,886,436 ( 0.11%)      }
        .           
        .               #[inline(never)]
  968,096 ( 0.06%)      fn intern_predicate(
        .                   &self,
        .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
        .               ) -> &'tcx PredicateInner<'tcx> {
        .                   self.predicate
  847,084 ( 0.05%)              .intern(kind, |kind| {
  102,948 ( 0.01%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
        .           
        .                           let predicate_struct = PredicateInner {
        .                               kind,
        .                               flags: flags.flags,
        .                               outer_exclusive_binder: flags.outer_exclusive_binder,
        .                           };
        .           
        .                           Interned(self.arena.alloc(predicate_struct))
        .                       })
        .                       .0
1,089,108 ( 0.06%)      }
        .           }
        .           
        .           pub struct CommonTypes<'tcx> {
        .               pub unit: Ty<'tcx>,
        .               pub bool: Ty<'tcx>,
        .               pub char: Ty<'tcx>,
        .               pub isize: Ty<'tcx>,
        .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
        .           /// safely used as a key in the maps of a TypeckResults. For that to be
        .           /// the case, the HirId must have the same `owner` as all the other IDs in
        .           /// this table (signified by `hir_owner`). Otherwise the HirId
        .           /// would be in a different frame of reference and using its `local_id`
        .           /// would result in lookup errors, or worse, in silently wrong data being
        .           /// stored/returned.
        .           #[inline]
        .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
  133,146 ( 0.01%)      if hir_id.owner != hir_owner {
        .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
        .               }
        .           }
        .           
        .           #[cold]
        .           #[inline(never)]
        .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
        .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
        .           }
        .           
        .           impl<'a, V> LocalTableInContext<'a, V> {
        .               pub fn contains_key(&self, id: hir::HirId) -> bool {
        .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.data.contains_key(&id.local_id)
        .               }
        .           
   97,199 ( 0.01%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
   19,312 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
   19,312 ( 0.00%)          self.data.get(&id.local_id)
   78,100 ( 0.00%)      }
        .           
        .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
        .                   self.data.iter()
        .               }
        .           }
        .           
        .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
        .               type Output = V;
        .           
    1,278 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
        .                   self.get(key).expect("LocalTableInContext: key not found")
      852 ( 0.00%)      }
        .           }
        .           
        .           pub struct LocalTableInContextMut<'a, V> {
        .               hir_owner: LocalDefId,
        .               data: &'a mut ItemLocalMap<V>,
        .           }
        .           
        .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 328 ----------------------------------------
        .           /// ```
        .           ///
        .           /// Here, we would store the type `T`, the span of the value `x`, the "scope-span" for
        .           /// the scope that contains `x`, the expr `T` evaluated from, and the span of `foo.await`.
        .           #[derive(TyEncodable, TyDecodable, Clone, Debug, Eq, Hash, PartialEq, HashStable)]
        .           #[derive(TypeFoldable)]
        .           pub struct GeneratorInteriorTypeCause<'tcx> {
        .               /// Type of the captured binding.
      364 ( 0.00%)      pub ty: Ty<'tcx>,
        .               /// Span of the binding that was captured.
      124 ( 0.00%)      pub span: Span,
        .               /// Span of the scope of the captured binding.
      530 ( 0.00%)      pub scope_span: Option<Span>,
        .               /// Span of `.await` or `yield` expression.
      530 ( 0.00%)      pub yield_span: Span,
        .               /// Expr which the type evaluated from.
      742 ( 0.00%)      pub expr: Option<hir::HirId>,
        .           }
        .           
        .           #[derive(TyEncodable, TyDecodable, Debug)]
        .           pub struct TypeckResults<'tcx> {
        .               /// The `HirId::owner` all `ItemLocalId`s in this table are relative to.
        .               pub hir_owner: LocalDefId,
        .           
        .               /// Resolved definitions for `<T>::X` associated paths and
-- line 352 ----------------------------------------
-- line 507 ----------------------------------------
        .               pub treat_byte_string_as_slice: ItemLocalSet,
        .           
        .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
        .               /// on closure size.
        .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
        .           }
        .           
        .           impl<'tcx> TypeckResults<'tcx> {
    3,870 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
   45,795 ( 0.00%)          TypeckResults {
        .                       hir_owner,
        .                       type_dependent_defs: Default::default(),
        .                       field_indices: Default::default(),
        .                       user_provided_types: Default::default(),
        .                       user_provided_sigs: Default::default(),
        .                       node_types: Default::default(),
        .                       node_substs: Default::default(),
        .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
        .                       tainted_by_errors: None,
        .                       concrete_opaque_types: Default::default(),
        .                       closure_min_captures: Default::default(),
        .                       closure_fake_reads: Default::default(),
        .                       generator_interior_types: ty::Binder::dummy(Default::default()),
        .                       treat_byte_string_as_slice: Default::default(),
        .                       closure_size_eval: Default::default(),
        .                   }
    3,870 ( 0.00%)      }
        .           
        .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
   27,786 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
   18,524 ( 0.00%)          match *qpath {
   37,980 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
        .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
        .                           .type_dependent_def(id)
   17,592 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
        .                   }
   46,310 ( 0.00%)      }
        .           
      250 ( 0.00%)      pub fn type_dependent_defs(
        .                   &self,
        .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
    1,212 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
      250 ( 0.00%)      }
        .           
    2,560 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
    6,203 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
    5,120 ( 0.00%)      }
        .           
    2,844 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
        .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
    2,844 ( 0.00%)      }
        .           
    7,299 ( 0.00%)      pub fn type_dependent_defs_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
    7,299 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
    7,299 ( 0.00%)      }
        .           
        .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
    1,718 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
      506 ( 0.00%)      }
        .           
        .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
    1,560 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
      780 ( 0.00%)      }
        .           
        .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
    3,668 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    1,834 ( 0.00%)      }
        .           
        .               pub fn user_provided_types_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
    1,056 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
      528 ( 0.00%)      }
        .           
        .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
   15,662 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
    7,831 ( 0.00%)      }
        .           
        .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
   27,312 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
   13,656 ( 0.00%)      }
        .           
  130,644 ( 0.01%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
   21,774 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
        .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
        .                   })
  108,870 ( 0.01%)      }
        .           
   35,011 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
   35,011 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_types.get(&id.local_id).cloned()
   70,022 ( 0.00%)      }
        .           
        .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
    3,664 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
    1,832 ( 0.00%)      }
        .           
    8,828 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
    8,828 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
   17,656 ( 0.00%)      }
        .           
    5,821 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
    5,821 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_substs.get(&id.local_id).cloned()
   11,642 ( 0.00%)      }
        .           
        .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
        .               // doesn't provide type parameter substitutions.
        .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
    3,644 ( 0.00%)          self.node_type(pat.hir_id)
        .               }
        .           
        .               // Returns the type of an expression as a monotype.
        .               //
        .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
        .               // some cases, we insert `Adjustment` annotations such as auto-deref or
        .               // auto-ref.  The type returned by this function does not consider such
        .               // adjustments.  See `expr_ty_adjusted()` instead.
        .               //
        .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
        .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
        .               // instead of "fn(ty) -> T with T = isize".
        .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
   24,850 ( 0.00%)          self.node_type(expr.hir_id)
        .               }
        .           
        .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
   50,204 ( 0.00%)          self.node_type_opt(expr.hir_id)
        .               }
        .           
        .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
   11,330 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
    5,665 ( 0.00%)      }
        .           
        .               pub fn adjustments_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
   15,448 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
    7,724 ( 0.00%)      }
        .           
   15,979 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
   31,958 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
        .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
   31,958 ( 0.00%)      }
        .           
        .               /// Returns the type of `expr`, considering any `Adjustment`
        .               /// entry recorded for that expression.
    1,075 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
      215 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
      196 ( 0.00%)      }
        .           
    4,520 ( 0.00%)      pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
      904 ( 0.00%)          self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
      784 ( 0.00%)      }
        .           
      962 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
        .                   // Only paths and method calls/overloaded operators have
        .                   // entries in type_dependent_defs, ignore the former here.
    1,924 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
        .                       return false;
        .                   }
        .           
    2,056 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
    1,924 ( 0.00%)      }
        .           
    6,990 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
        .                   self.pat_binding_modes().get(id).copied().or_else(|| {
        .                       s.delay_span_bug(sp, "missing binding mode");
        .                       None
        .                   })
    9,320 ( 0.00%)      }
        .           
        .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
    6,150 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
    1,910 ( 0.00%)      }
        .           
        .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
    2,616 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
    1,308 ( 0.00%)      }
        .           
        .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
    9,006 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
    4,503 ( 0.00%)      }
        .           
        .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
    2,008 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
    1,004 ( 0.00%)      }
        .           
        .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
        .               /// by the closure.
    1,968 ( 0.00%)      pub fn closure_min_captures_flattened(
        .                   &self,
        .                   closure_def_id: DefId,
        .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
        .                   self.closure_min_captures
        .                       .get(&closure_def_id)
        .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
        .                       .into_iter()
        .                       .flatten()
    2,460 ( 0.00%)      }
        .           
        .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
      354 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
      177 ( 0.00%)      }
        .           
        .               pub fn closure_kind_origins_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
        .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
        .               }
        .           
        .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
    1,206 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
      603 ( 0.00%)      }
        .           
        .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
      852 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
      426 ( 0.00%)      }
        .           
        .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
      354 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
      177 ( 0.00%)      }
        .           
        .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
        .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
        .               }
        .           
        .               pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
        .                   validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
        .                   self.coercion_casts.contains(&hir_id.local_id)
        .               }
        .           
        .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
        .                   self.coercion_casts.insert(id);
        .               }
        .           
        .               pub fn coercion_casts(&self) -> &ItemLocalSet {
      177 ( 0.00%)          &self.coercion_casts
      177 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
        .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
        .                   let ty::TypeckResults {
        .                       hir_owner,
        .                       ref type_dependent_defs,
        .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
        .                   const START_INDEX = 0,
        .               }
        .           }
        .           
        .           /// Mapping of type annotation indices to canonical user type annotations.
        .           pub type CanonicalUserTypeAnnotations<'tcx> =
        .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
        .           
      392 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
        .           pub struct CanonicalUserTypeAnnotation<'tcx> {
        .               pub user_ty: CanonicalUserType<'tcx>,
        .               pub span: Span,
      300 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
        .           }
        .           
        .           /// Canonicalized user type annotation.
        .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
        .           
        .           impl<'tcx> CanonicalUserType<'tcx> {
        .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
        .               /// i.e., each thing is mapped to a canonical variable with the same index.
      864 ( 0.00%)      pub fn is_identity(&self) -> bool {
    1,728 ( 0.00%)          match self.value {
        .                       UserType::Ty(_) => false,
        .                       UserType::TypeOf(_, user_substs) => {
      864 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
        .                               return false;
        .                           }
        .           
        .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
        .                               match kind.unpack() {
    1,996 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
        .                                       ty::Bound(debruijn, b) => {
        .                                           // We only allow a `ty::INNERMOST` index in substitutions.
      967 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
        .                                           cvar == b.var
        .                                       }
        .                                       _ => false,
        .                                   },
        .           
      204 ( 0.00%)                          GenericArgKind::Lifetime(r) => match r {
        .                                       ty::ReLateBound(debruijn, br) => {
        .                                           // We only allow a `ty::INNERMOST` index in substitutions.
        .                                           assert_eq!(*debruijn, ty::INNERMOST);
        .                                           cvar == br.var
        .                                       }
        .                                       _ => false,
        .                                   },
        .           
-- line 867 ----------------------------------------
-- line 872 ----------------------------------------
        .                                           cvar == b
        .                                       }
        .                                       _ => false,
        .                                   },
        .                               }
        .                           })
        .                       }
        .                   }
    1,728 ( 0.00%)      }
        .           }
        .           
        .           /// A user-given type annotation attached to a constant. These arise
        .           /// from constants that are named via paths, like `Foo::<A>::new` and
        .           /// so forth.
    1,800 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
   10,764 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
        .           pub enum UserType<'tcx> {
        .               Ty(Ty<'tcx>),
        .           
        .               /// The canonical type is the result of `type_of(def_id)` with the
        .               /// given substitutions applied.
        .               TypeOf(DefId, UserSubsts<'tcx>),
        .           }
        .           
        .           impl<'tcx> CommonTypes<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
      111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
        .           
        .                   CommonTypes {
        .                       unit: mk(Tuple(List::empty())),
        .                       bool: mk(Bool),
        .                       char: mk(Char),
        .                       never: mk(Never),
        .                       isize: mk(Int(ty::IntTy::Isize)),
        .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
        .           
        .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> CommonLifetimes<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
       67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
        .           
        .                   CommonLifetimes {
        5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
        5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
        5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> CommonConsts<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
        6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
        .           
        .                   CommonConsts {
        .                       unit: mk_const(ty::Const {
        .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
        .                           ty: types.unit,
        .                       }),
        .                   }
        .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
        .           
        .               /// Stores memory for globals (statics/consts).
        .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
        .           
        .               output_filenames: Arc<OutputFilenames>,
        .           }
        .           
        .           impl<'tcx> TyCtxt<'tcx> {
    9,560 ( 0.00%)      pub fn typeck_opt_const_arg(
        .                   self,
        .                   def: ty::WithOptConstParam<LocalDefId>,
        .               ) -> &'tcx TypeckResults<'tcx> {
    3,824 ( 0.00%)          if let Some(param_did) = def.const_param_did {
        .                       self.typeck_const_arg((def.did, param_did))
        .                   } else {
        .                       self.typeck(def.did)
        .                   }
    7,648 ( 0.00%)      }
        .           
      690 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
      230 ( 0.00%)          self.arena.alloc(Steal::new(thir))
      920 ( 0.00%)      }
        .           
    3,605 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
      721 ( 0.00%)          self.arena.alloc(Steal::new(mir))
    5,047 ( 0.00%)      }
        .           
      920 ( 0.00%)      pub fn alloc_steal_promoted(
        .                   self,
        .                   promoted: IndexVec<Promoted, Body<'tcx>>,
        .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
      230 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
    1,150 ( 0.00%)      }
        .           
    2,628 ( 0.00%)      pub fn alloc_adt_def(
        .                   self,
        .                   did: DefId,
        .                   kind: AdtKind,
        .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
        .                   repr: ReprOptions,
        .               ) -> &'tcx ty::AdtDef {
    4,672 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
    1,168 ( 0.00%)      }
        .           
        .               /// Allocates a read-only byte or string literal for `mir::interpret`.
       30 ( 0.00%)      pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
        .                   // Create an allocation that just contains these bytes.
        6 ( 0.00%)          let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
       78 ( 0.00%)          let alloc = self.intern_const_alloc(alloc);
        .                   self.create_memory_alloc(alloc)
       30 ( 0.00%)      }
        .           
        .               /// Returns a range of the start/end indices specified with the
        .               /// `rustc_layout_scalar_valid_range` attribute.
        .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
    4,408 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
    2,204 ( 0.00%)          let attrs = self.get_attrs(def_id);
    9,367 ( 0.00%)          let get = |name| {
    2,204 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
        .                           Some(attr) => attr,
        .                           None => return Bound::Unbounded,
        .                       };
        .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
      200 ( 0.00%)              if let Some(
        .                           &[
        .                               ast::NestedMetaItem::Literal(ast::Lit {
      100 ( 0.00%)                          kind: ast::LitKind::Int(a, _), ..
        .                               }),
        .                           ],
       50 ( 0.00%)              ) = attr.meta_item_list().as_deref()
        .                       {
        .                           Bound::Included(a)
        .                       } else {
        .                           self.sess
        .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
        .                           Bound::Unbounded
        .                       }
   11,020 ( 0.00%)          };
    3,306 ( 0.00%)          (
    3,306 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
    1,653 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
        .                   )
    4,408 ( 0.00%)      }
        .           
        .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
        .                   value.lift_to_tcx(self)
        .               }
        .           
        .               /// Creates a type context and call the closure with a `TyCtxt` reference
        .               /// to the context. The closure enforces that the type context and any interned
        .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
        .               /// reference to the context, to allow formatting values that need it.
       23 ( 0.00%)      pub fn create_global_ctxt(
        .                   s: &'tcx Session,
        .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
        .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
        .                   resolutions: ty::ResolverOutputs,
        .                   krate: &'tcx hir::Crate<'tcx>,
        .                   dep_graph: DepGraph,
        .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
        .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
        .                   query_kinds: &'tcx [DepKindStruct],
        .                   crate_name: &str,
        .                   output_filenames: OutputFilenames,
        .               ) -> GlobalCtxt<'tcx> {
        1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
        .                       s.fatal(&err);
        .                   });
        .                   let interners = CtxtInterners::new(arena);
        .                   let common_types = CommonTypes::new(&interners);
        .                   let common_lifetimes = CommonLifetimes::new(&interners);
        .                   let common_consts = CommonConsts::new(&interners, &common_types);
        .           
      127 ( 0.00%)          GlobalCtxt {
        .                       sess: s,
        6 ( 0.00%)              lint_store,
        .                       arena,
        2 ( 0.00%)              interners,
        5 ( 0.00%)              dep_graph,
        4 ( 0.00%)              untracked_resolutions: resolutions,
        2 ( 0.00%)              prof: s.prof.clone(),
        .                       types: common_types,
        .                       lifetimes: common_lifetimes,
        .                       consts: common_consts,
        .                       untracked_crate: krate,
        .                       on_disk_cache,
        .                       queries,
        .                       query_caches: query::QueryCaches::default(),
        .                       query_kinds,
        .                       ty_rcache: Default::default(),
        .                       pred_rcache: Default::default(),
        .                       selection_cache: Default::default(),
        .                       evaluation_cache: Default::default(),
        1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
        .                       data_layout,
        .                       alloc_map: Lock::new(interpret::AllocMap::new()),
        .                       output_filenames: Arc::new(output_filenames),
        .                   }
        9 ( 0.00%)      }
        .           
        .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
        .                   &self.query_kinds[k as usize]
        .               }
        .           
        .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
        .               #[track_caller]
        .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   ty: Ty<'tcx>,
        .                   span: S,
        .                   msg: &str,
        .               ) -> &'tcx Const<'tcx> {
        .                   self.sess.delay_span_bug(span, msg);
        .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
        .               }
        .           
      609 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
       87 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
      696 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
      696 ( 0.00%)      }
        .           
        .               /// Obtain all lang items of this crate and all dependencies (recursively)
1,361,024 ( 0.08%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
        .                   self.get_lang_items(())
1,749,888 ( 0.10%)      }
        .           
        .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
        .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
       84 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
        .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
       96 ( 0.00%)      }
        .           
        .               /// Obtain the diagnostic item's name
   14,987 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
        .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
   17,128 ( 0.00%)      }
        .           
        .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
   13,916 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
        .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
   15,904 ( 0.00%)      }
        .           
    3,073 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
        .                   self.stability_index(())
    3,951 ( 0.00%)      }
        .           
  132,482 ( 0.01%)      pub fn features(self) -> &'tcx rustc_feature::Features {
        .                   self.features_query(())
  151,408 ( 0.01%)      }
        .           
        .               pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
        .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
   12,853 ( 0.00%)          if let Some(id) = id.as_local() {
        .                       self.untracked_resolutions.definitions.def_key(id)
        .                   } else {
    7,266 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
        .                   }
        .               }
        .           
        .               /// Converts a `DefId` into its fully expanded `DefPath` (every
        .               /// `DefId` is really just an interned `DefPath`).
        .               ///
        .               /// Note that if `id` is not local to this crate, the result will
        .               ///  be a non-local `DefPath`.
-- line 1272 ----------------------------------------
-- line 1277 ----------------------------------------
        .                   } else {
        .                       self.untracked_resolutions.cstore.def_path(id)
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
        .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
    1,778 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
        .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
        .                   } else {
      144 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
        .                   if crate_num == LOCAL_CRATE {
        .                       self.sess.local_stable_crate_id()
        .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
        .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
        .                       self.def_path(def_id).to_string_no_crate_verbose()
        .                   )
        .               }
        .           
        .               /// Note that this is *untracked* and should only be used within the query
        .               /// system if the result is otherwise tracked through queries
        .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
   63,360 ( 0.00%)          &*self.untracked_resolutions.cstore
   31,680 ( 0.00%)      }
        .           
        .               /// Note that this is *untracked* and should only be used within the query
        .               /// system if the result is otherwise tracked through queries
        .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
        .                   &self.untracked_resolutions.definitions
        .               }
        .           
        .               #[inline(always)]
        .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
       18 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
       89 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
        .               }
        .           
        .               #[inline(always)]
        .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
        .                   let resolutions = &self.gcx.untracked_resolutions;
        .                   StableHashingContext::ignore_spans(
        .                       self.sess,
        .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
        .               /// If `true`, we should use the MIR-based borrowck, but also
        .               /// fall back on the AST borrowck if the MIR-based one errors.
        .               pub fn migrate_borrowck(self) -> bool {
        .                   self.borrowck_mode().migrate()
        .               }
        .           
        .               /// What mode(s) of borrowck should we run? AST? MIR? both?
        .               /// (Also considers the `#![feature(nll)]` setting.)
      354 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
        .                   // Here are the main constraints we need to deal with:
        .                   //
        .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
        .                   //    synonymous with no `-Z borrowck=...` flag at all.
        .                   //
        .                   // 2. We want to allow developers on the Nightly channel
        .                   //    to opt back into the "hard error" mode for NLL,
        .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
        .                   //   errors. (To simplify the code here, it now even overrides
        .                   //   a user's attempt to specify `-Z borrowck=compare`, which
        .                   //   we arguably do not need anymore and should remove.)
        .                   //
        .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
        .                   //
        .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
        .           
      531 ( 0.00%)          if self.features().nll {
        .                       return BorrowckMode::Mir;
        .                   }
        .           
      177 ( 0.00%)          self.sess.opts.borrowck_mode
      708 ( 0.00%)      }
        .           
        .               /// If `true`, we should use lazy normalization for constants, otherwise
        .               /// we still evaluate them eagerly.
        .               #[inline]
        .               pub fn lazy_normalization(self) -> bool {
       41 ( 0.00%)          let features = self.features();
        .                   // Note: We only use lazy normalization for generic const expressions.
       41 ( 0.00%)          features.generic_const_exprs
        .               }
        .           
        .               #[inline]
        .               pub fn local_crate_exports_generics(self) -> bool {
        .                   debug_assert!(self.sess.opts.share_generics());
        .           
        .                   self.sess.crate_types().iter().any(|crate_type| {
        .                       match crate_type {
-- line 1442 ----------------------------------------
-- line 1554 ----------------------------------------
        .                   self.mk_imm_ref(
        .                       self.lifetimes.re_static,
        .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
        .                           .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
        .                   )
        .               }
        .           
        .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
    1,320 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
      960 ( 0.00%)          match self.def_kind(def_id) {
        .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
        .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
        .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
        .                       },
    2,160 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
        .                   }
    1,080 ( 0.00%)      }
        .           
        .               pub fn type_length_limit(self) -> Limit {
        .                   self.limits(()).type_length_limit
        .               }
        .           
  521,808 ( 0.03%)      pub fn recursion_limit(self) -> Limit {
        .                   self.limits(()).recursion_limit
  596,352 ( 0.04%)      }
        .           
        .               pub fn move_size_limit(self) -> Limit {
        .                   self.limits(()).move_size_limit
        .               }
        .           
      364 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
        .                   self.limits(()).const_eval_limit
      416 ( 0.00%)      }
        .           
        .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
        .                   iter::once(LOCAL_CRATE)
        .                       .chain(self.crates(()).iter().copied())
        .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
        .               }
        .           }
        .           
-- line 1594 ----------------------------------------
-- line 1684 ----------------------------------------
        .               /// This is the implicit state of rustc. It contains the current
        .               /// `TyCtxt` and query. It is updated when creating a local interner or
        .               /// executing a new query. Whenever there's a `TyCtxt` value available
        .               /// you should also have access to an `ImplicitCtxt` through the functions
        .               /// in this module.
        .               #[derive(Clone)]
        .               pub struct ImplicitCtxt<'a, 'tcx> {
        .                   /// The current `TyCtxt`.
        1 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
        .           
        .                   /// The current query job, if any. This is updated by `JobOwner::start` in
        .                   /// `ty::query::plumbing` when executing a query.
        .                   pub query: Option<query::QueryJobId<DepKind>>,
        .           
        .                   /// Where to store diagnostics for the current query job, if any.
        .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
        .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
        .                   pub layout_depth: usize,
        .           
        .                   /// The current dep graph task. This is used to add dependencies to queries
        .                   /// when executing them.
        .                   pub task_deps: TaskDepsRef<'a>,
        .               }
        .           
        .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
        5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
        .                       let tcx = TyCtxt { gcx };
       25 ( 0.00%)              ImplicitCtxt {
        .                           tcx,
        .                           query: None,
        .                           diagnostics: None,
        .                           layout_depth: 0,
        .                           task_deps: TaskDepsRef::Ignore,
        .                       }
        5 ( 0.00%)          }
        .               }
        .           
        .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
        .               /// to `value` during the call to `f`. It is restored to its previous value after.
        .               /// This is used to set the pointer to the new `ImplicitCtxt`.
        .               #[cfg(parallel_compiler)]
        .               #[inline]
        .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
        .           
        .               /// Sets TLV to `value` during the call to `f`.
        .               /// It is restored to its previous value after.
        .               /// This is used to set the pointer to the new `ImplicitCtxt`.
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
        .                   let old = get_tlv();
   59,297 ( 0.00%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
        .                   TLV.with(|tlv| tlv.set(value));
        .                   f()
        .               }
        .           
        .               /// Gets the pointer to the current `ImplicitCtxt`.
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
        .               }
        .           
        .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
        .               #[inline]
        .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
        .               where
        .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
        .               {
        1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
        .               }
        .           
        .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
        .               #[inline]
        .               pub fn with_context_opt<F, R>(f: F) -> R
        .               where
        .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
        .               {
        .                   let context = get_tlv();
  252,337 ( 0.02%)          if context == 0 {
        .                       f(None)
        .                   } else {
        .                       // We could get an `ImplicitCtxt` pointer from another thread.
        .                       // Ensure that `ImplicitCtxt` is `Sync`.
        .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
        .           
        .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
        .                   }
-- line 1789 ----------------------------------------
-- line 1805 ----------------------------------------
        .               /// This will panic if you pass it a `TyCtxt` which is different from the current
        .               /// `ImplicitCtxt`'s `tcx` field.
        .               #[inline]
        .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
        .               where
        .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
        .               {
        .                   with_context(|context| unsafe {
  124,374 ( 0.01%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
        .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
  124,060 ( 0.01%)              f(context)
        .                   })
        .               }
        .           
        .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
        .               /// Panics if there is no `ImplicitCtxt` available.
        .               #[inline]
        .               pub fn with<F, R>(f: F) -> R
        .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
        .               fn into_pointer(&self) -> *const () {
        .                   self.0 as *const _ as *const ()
        .               }
        .           }
        .           
        .           #[allow(rustc::usage_of_ty_tykind)]
        .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
        .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
  189,683 ( 0.01%)          &self.0.kind()
        .               }
        .           }
        .           
        .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
        .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
        .           
        .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   86,004 ( 0.01%)          self.0.kind().hash(s)
        .               }
        .           }
        .           
        .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
  106,242 ( 0.01%)          &self.0.kind
        .               }
        .           }
        .           
        .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
        .           
        .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   28,668 ( 0.00%)          self.0.kind.hash(s)
        .               }
        .           }
        .           
        .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
        .               fn borrow<'a>(&'a self) -> &'a [T] {
  263,863 ( 0.02%)          &self.0[..]
        .               }
        .           }
        .           
        .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
        .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
        .           
        .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   37,744 ( 0.00%)          self.0[..].hash(s)
        .               }
        .           }
        .           
        .           macro_rules! direct_interners {
        .               ($($name:ident: $method:ident($ty:ty),)+) => {
        .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
        .                       fn borrow<'a>(&'a self) -> &'a $ty {
   72,185 ( 0.00%)                  &self.0
        .                       }
        .                   }
        .           
        .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
        .                       fn eq(&self, other: &Self) -> bool {
        .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
        .                           // equals `x == y`.
        .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
        .                   }
        .           
        .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
        .           
        .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
        .                       fn hash<H: Hasher>(&self, s: &mut H) {
        .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
        .                           // x.hash(s)`.
   18,336 ( 0.00%)                  self.0.hash(s)
        .                       }
        .                   }
        .           
        .                   impl<'tcx> TyCtxt<'tcx> {
  607,888 ( 0.04%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
  309,956 ( 0.02%)                  self.interners.$name.intern(v, |v| {
    4,460 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
        .                           }).0
  683,163 ( 0.04%)              }
        .                   })+
        .               }
        .           }
        .           
        .           direct_interners! {
        .               region: mk_region(RegionKind),
        .               const_: mk_const(Const<'tcx>),
        .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
        .               adt_def: intern_adt_def(AdtDef),
        .               stability: intern_stability(attr::Stability),
        .               const_stability: intern_const_stability(attr::ConstStability),
        .           }
        .           
        .           macro_rules! slice_interners {
        .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
        .                   impl<'tcx> TyCtxt<'tcx> {
2,888,210 ( 0.17%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
        .                           self.interners.$field.intern_ref(v, || {
        .                               Interned(List::from_arena(&*self.arena, v))
        .                           }).0
2,580,777 ( 0.15%)              })+
        .                   }
        .               );
        .           }
        .           
        .           slice_interners!(
        .               type_list: _intern_type_list(Ty<'tcx>),
        .               substs: _intern_substs(GenericArg<'tcx>),
        .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2129 ----------------------------------------
        .               /// unsafe.
        .               pub fn safe_to_unsafe_fn_ty(self, sig: PolyFnSig<'tcx>) -> Ty<'tcx> {
        .                   assert_eq!(sig.unsafety(), hir::Unsafety::Normal);
        .                   self.mk_fn_ptr(sig.map_bound(|sig| ty::FnSig { unsafety: hir::Unsafety::Unsafe, ..sig }))
        .               }
        .           
        .               /// Given the def_id of a Trait `trait_def_id` and the name of an associated item `assoc_name`
        .               /// returns true if the `trait_def_id` defines an associated item of name `assoc_name`.
       84 ( 0.00%)      pub fn trait_may_define_assoc_type(self, trait_def_id: DefId, assoc_name: Ident) -> bool {
        .                   self.super_traits_of(trait_def_id).any(|trait_did| {
        .                       self.associated_items(trait_did)
        .                           .find_by_name_and_kind(self, assoc_name, ty::AssocKind::Type, trait_did)
        .                           .is_some()
        .                   })
       63 ( 0.00%)      }
        .           
        .               /// Computes the def-ids of the transitive supertraits of `trait_def_id`. This (intentionally)
        .               /// does not compute the full elaborated super-predicates but just the set of def-ids. It is used
        .               /// to identify which traits may define a given associated type to help avoid cycle errors.
        .               /// Returns a `DefId` iterator.
        .               fn super_traits_of(self, trait_def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {
        .                   let mut set = FxHashSet::default();
       14 ( 0.00%)          let mut stack = vec![trait_def_id];
        .           
        .                   set.insert(trait_def_id);
        .           
       63 ( 0.00%)          iter::from_fn(move || -> Option<DefId> {
       14 ( 0.00%)              let trait_did = stack.pop()?;
        7 ( 0.00%)              let generic_predicates = self.super_predicates_of(trait_did);
        .           
        .                       for (predicate, _) in generic_predicates.predicates {
       12 ( 0.00%)                  if let ty::PredicateKind::Trait(data) = predicate.kind().skip_binder() {
        8 ( 0.00%)                      if set.insert(data.def_id()) {
        .                                   stack.push(data.def_id());
        .                               }
        .                           }
        .                       }
        .           
        .                       Some(trait_did)
        .                   })
        .               }
-- line 2169 ----------------------------------------
-- line 2188 ----------------------------------------
        .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
        .                   })
        .               }
        .           
        .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
        .               /// `*r == kind`.
        .               #[inline]
        .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
   98,412 ( 0.01%)          if *r == kind { r } else { self.mk_region(kind) }
        .               }
        .           
        .               #[allow(rustc::usage_of_ty_tykind)]
        .               #[inline]
        .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
1,406,625 ( 0.08%)          self.interners.intern_ty(st)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
1,319,202 ( 0.08%)          let inner = self.interners.intern_predicate(binder);
        .                   Predicate { inner }
        .               }
        .           
        .               #[inline]
  987,488 ( 0.06%)      pub fn reuse_or_mk_predicate(
        .                   self,
        .                   pred: Predicate<'tcx>,
        .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
        .               ) -> Predicate<'tcx> {
   54,636 ( 0.00%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
  987,488 ( 0.06%)      }
        .           
        .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
       18 ( 0.00%)          match tm {
        .                       IntTy::Isize => self.types.isize,
        .                       IntTy::I8 => self.types.i8,
        .                       IntTy::I16 => self.types.i16,
        .                       IntTy::I32 => self.types.i32,
        .                       IntTy::I64 => self.types.i64,
        .                       IntTy::I128 => self.types.i128,
        .                   }
       18 ( 0.00%)      }
        .           
        .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
       49 ( 0.00%)          match tm {
        .                       UintTy::Usize => self.types.usize,
        .                       UintTy::U8 => self.types.u8,
        .                       UintTy::U16 => self.types.u16,
        .                       UintTy::U32 => self.types.u32,
        .                       UintTy::U64 => self.types.u64,
        .                       UintTy::U128 => self.types.u128,
        .                   }
       49 ( 0.00%)      }
        .           
        .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
        4 ( 0.00%)          match tm {
        .                       FloatTy::F32 => self.types.f32,
        .                       FloatTy::F64 => self.types.f64,
        .                   }
        4 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_static_str(self) -> Ty<'tcx> {
      320 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   // Take a copy of substs so that we own the vectors inside.
        .                   self.mk_ty(Adt(def, substs))
        .               }
        .           
-- line 2259 ----------------------------------------
-- line 2329 ----------------------------------------
        .               }
        .           
        .               #[inline]
        .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
        .               }
        .           
        .               #[inline]
    1,618 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
        .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
    1,696 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(Slice(ty))
        .               }
        .           
        .               #[inline]
        .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
        .                   let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
      180 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
        .               }
        .           
        .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
   10,666 ( 0.00%)          iter.intern_with(|ts| {
    2,641 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
   10,940 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
    9,594 ( 0.00%)          })
        .               }
        .           
        .               #[inline]
        .               pub fn mk_unit(self) -> Ty<'tcx> {
      163 ( 0.00%)          self.types.unit
        .               }
        .           
        .               #[inline]
        .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
        .                   if self.features().never_type_fallback { self.types.never } else { self.types.unit }
        .               }
        .           
        .               #[inline]
        .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(FnDef(def_id, substs))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
    1,198 ( 0.00%)          self.mk_ty(FnPtr(fty))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_dynamic(
        .                   self,
        .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
        .                   reg: ty::Region<'tcx>,
        .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
        .                   self.mk_ty_infer(TyVar(v))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
        6 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
        .               }
        .           
        .               #[inline]
        .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
        .                   self.mk_ty_infer(IntVar(v))
        .               }
        .           
        .               #[inline]
-- line 2428 ----------------------------------------
-- line 2445 ----------------------------------------
        .                   self.mk_ty(Param(ParamTy { index, name }))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
        .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
        .               }
        .           
    6,769 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
    4,113 ( 0.00%)          match param.kind {
        .                       GenericParamDefKind::Lifetime => {
    2,166 ( 0.00%)                  self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
        .                       }
    1,212 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
        .                       GenericParamDefKind::Const { .. } => {
        .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
        .                       }
        .                   }
    6,769 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(Opaque(def_id, substs))
        .               }
        .           
      366 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
      366 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
      732 ( 0.00%)      }
        .           
        .               pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
        .                   self.mk_place_elem(place, PlaceElem::Deref)
        .               }
        .           
       68 ( 0.00%)      pub fn mk_place_downcast(
        .                   self,
        .                   place: Place<'tcx>,
        .                   adt_def: &'tcx AdtDef,
        .                   variant_index: VariantIdx,
        .               ) -> Place<'tcx> {
       68 ( 0.00%)          self.mk_place_elem(
        .                       place,
      136 ( 0.00%)              PlaceElem::Downcast(Some(adt_def.variants[variant_index].name), variant_index),
        .                   )
      136 ( 0.00%)      }
        .           
      277 ( 0.00%)      pub fn mk_place_downcast_unnamed(
        .                   self,
        .                   place: Place<'tcx>,
        .                   variant_index: VariantIdx,
        .               ) -> Place<'tcx> {
      277 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Downcast(None, variant_index))
      554 ( 0.00%)      }
        .           
        .               pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
        .                   self.mk_place_elem(place, PlaceElem::Index(index))
        .               }
        .           
        .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
        .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
        .               /// flight.
    8,028 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
        .                   let mut projection = place.projection.to_vec();
        .                   projection.push(elem);
        .           
        .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
    8,920 ( 0.00%)      }
        .           
   17,493 ( 0.00%)      pub fn intern_poly_existential_predicates(
        .                   self,
        .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
        .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
    2,514 ( 0.00%)          assert!(!eps.is_empty());
        .                   assert!(
        .                       eps.array_windows()
   22,851 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
        .                               != Ordering::Greater)
        .                   );
   10,056 ( 0.00%)          self._intern_poly_existential_predicates(eps)
   19,992 ( 0.00%)      }
        .           
        .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
        .                   // FIXME consider asking the input slice to be sorted to avoid
        .                   // re-interning permutations, in which case that would be asserted
        .                   // here.
   12,437 ( 0.00%)          if preds.is_empty() {
        .                       // The macro-generated method below asserts we don't intern an empty slice.
        .                       List::empty()
        .                   } else {
   10,329 ( 0.00%)              self._intern_predicates(preds)
        .                   }
    4,312 ( 0.00%)      }
        .           
        .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
   19,177 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
      442 ( 0.00%)      }
        .           
        .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
  482,260 ( 0.03%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
   54,180 ( 0.00%)      }
        .           
        .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
        .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
        .               }
        .           
        .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
   12,244 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
    2,620 ( 0.00%)      }
        .           
        .               pub fn intern_canonical_var_infos(
        .                   self,
        .                   ts: &[CanonicalVarInfo<'tcx>],
        .               ) -> CanonicalVarInfos<'tcx> {
   26,157 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
    1,518 ( 0.00%)      }
        .           
        .               pub fn intern_bound_variable_kinds(
        .                   self,
        .                   ts: &[ty::BoundVariableKind],
        .               ) -> &'tcx List<ty::BoundVariableKind> {
    6,007 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
    9,706 ( 0.00%)      }
        .           
        .               pub fn mk_fn_sig<I>(
        .                   self,
        .                   inputs: I,
        .                   output: I::Item,
        .                   c_variadic: bool,
        .                   unsafety: hir::Unsafety,
        .                   abi: abi::Abi,
        .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
        .               where
        .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
        .               {
        .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
    1,962 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
      294 ( 0.00%)              c_variadic,
      429 ( 0.00%)              unsafety,
      318 ( 0.00%)              abi,
      390 ( 0.00%)          })
        .               }
        .           
        .               pub fn mk_poly_existential_predicates<
        .                   I: InternAs<
        .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
        .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
        .                   >,
        .               >(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
    4,775 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
        .               }
        .           
        .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
       38 ( 0.00%)          iter.intern_with(|xs| self.intern_predicates(xs))
        .               }
        .           
        .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
    3,021 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
        .               }
        .           
        .               pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
  430,465 ( 0.03%)          iter.intern_with(|xs| self.intern_substs(xs))
        .               }
        .           
        .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
       36 ( 0.00%)          iter.intern_with(|xs| self.intern_place_elems(xs))
        .               }
        .           
   29,550 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
        .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
   59,100 ( 0.00%)      }
        .           
        .               pub fn mk_bound_variable_kinds<
        .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
        .               >(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
   34,902 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
        .               }
        .           
        .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
        .               /// It stops at `bound` and just returns it if reached.
   65,324 ( 0.00%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
   65,324 ( 0.00%)          let hir = self.hir();
        .                   loop {
  153,258 ( 0.01%)              if id == bound {
        .                           return bound;
        .                       }
        .           
  210,442 ( 0.01%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
        .                           return id;
        .                       }
        .                       let next = hir.get_parent_node(id);
  125,262 ( 0.01%)              if next == id {
        .                           bug!("lint traversal reached the root of the crate");
        .                       }
        .                       id = next;
        .                   }
   93,320 ( 0.01%)      }
        .           
    4,128 ( 0.00%)      pub fn lint_level_at_node(
        .                   self,
        .                   lint: &'static Lint,
        .                   mut id: hir::HirId,
        .               ) -> (Level, LintLevelSource) {
        .                   let sets = self.lint_levels(());
        .                   loop {
   35,502 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
        .                           return pair;
        .                       }
    3,142 ( 0.00%)              let next = self.hir().get_parent_node(id);
    9,426 ( 0.00%)              if next == id {
        .                           bug!("lint traversal reached the root of the crate");
        .                       }
        .                       id = next;
        .                   }
    4,128 ( 0.00%)      }
        .           
      252 ( 0.00%)      pub fn struct_span_lint_hir(
        .                   self,
        .                   lint: &'static Lint,
        .                   hir_id: HirId,
        .                   span: impl Into<MultiSpan>,
        .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
        .               ) {
    1,117 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
      367 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
      144 ( 0.00%)      }
        .           
        .               pub fn struct_lint_node(
        .                   self,
        .                   lint: &'static Lint,
        .                   id: HirId,
        .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
        .               ) {
        .                   let (level, src) = self.lint_level_at_node(lint, id);
        .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
        .               }
        .           
    3,269 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
      934 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
        .                   let candidates = map.get(&id.local_id)?;
      934 ( 0.00%)          Some(&*candidates)
    3,736 ( 0.00%)      }
        .           
    5,516 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
        .                   debug!(?id, "named_region");
        .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
    7,092 ( 0.00%)      }
        .           
      981 ( 0.00%)      pub fn is_late_bound(self, id: HirId) -> bool {
        .                   self.is_late_bound_map(id.owner)
       44 ( 0.00%)              .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
      872 ( 0.00%)      }
        .           
    4,396 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
        .                   self.object_lifetime_defaults_map(id.owner)
    5,652 ( 0.00%)      }
        .           
    5,454 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
        .                   self.mk_bound_variable_kinds(
        .                       self.late_bound_vars_map(id.owner)
        .                           .and_then(|map| map.get(&id.local_id).cloned())
        .                           .unwrap_or_else(|| {
        .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
        .                           })
        .                           .iter(),
        .                   )
    5,454 ( 0.00%)      }
        .           
        .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
        .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
        .               }
        .           
        .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
        .               /// feature gates
      330 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
       33 ( 0.00%)          if self.is_const_fn_raw(def_id) {
        4 ( 0.00%)              match self.lookup_const_stability(def_id) {
        8 ( 0.00%)                  Some(stability) if stability.level.is_unstable() => {
        .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
        .                               // corresponding feature gate.
        2 ( 0.00%)                      self.features()
        .                                   .declared_lib_features
        .                                   .iter()
        .                                   .any(|&(sym, _)| sym == stability.feature)
        .                           }
        .                           // functions without const stability are either stable user written
        .                           // const fn or the user is using feature gates and we thus don't
        .                           // care what they do
        .                           _ => true,
        .                       }
        .                   } else {
        .                       false
        .                   }
      297 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TyCtxtAt<'tcx> {
        .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
        .               #[track_caller]
        .               pub fn ty_error(self) -> Ty<'tcx> {
        .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
        .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
        .           }
        .           
        .           impl<I, T, R, E> InternAs<[T], R> for I
        .           where
        .               E: InternIteratorElement<T, R>,
        .               I: Iterator<Item = E>,
        .           {
        .               type Output = E::Output;
  105,280 ( 0.01%)      fn intern_with<F>(self, f: F) -> Self::Output
        .               where
        .                   F: FnOnce(&[T]) -> R,
        .               {
1,430,648 ( 0.09%)          E::intern_with(self, f)
  101,520 ( 0.01%)      }
        .           }
        .           
        .           pub trait InternIteratorElement<T, R>: Sized {
        .               type Output;
        .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
        .           }
        .           
        .           impl<T, R> InternIteratorElement<T, R> for T {
        .               type Output = R;
  154,121 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
        .                   mut iter: I,
        .                   f: F,
        .               ) -> Self::Output {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
        .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
        .                   // `assert`.
  217,932 ( 0.01%)          match iter.size_hint() {
        .                       (0, Some(0)) => {
        9 ( 0.00%)                  assert!(iter.next().is_none());
        .                           f(&[])
        .                       }
        .                       (1, Some(1)) => {
        .                           let t0 = iter.next().unwrap();
       27 ( 0.00%)                  assert!(iter.next().is_none());
   37,543 ( 0.00%)                  f(&[t0])
        .                       }
        .                       (2, Some(2)) => {
        .                           let t0 = iter.next().unwrap();
        .                           let t1 = iter.next().unwrap();
      183 ( 0.00%)                  assert!(iter.next().is_none());
   16,591 ( 0.00%)                  f(&[t0, t1])
        .                       }
      480 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
        .                   }
  158,014 ( 0.01%)      }
        .           }
        .           
        .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
        .           where
        .               T: Clone + 'a,
        .           {
        .               type Output = R;
    3,635 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
        .                   // This code isn't hot.
      156 ( 0.00%)          f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
    3,054 ( 0.00%)      }
        .           }
        .           
        .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
        .               type Output = Result<R, E>;
  532,596 ( 0.03%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
        .                   mut iter: I,
        .                   f: F,
        .               ) -> Self::Output {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
        .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
        .                   // `assert`, unless a failure happens first, in which case the result
        .                   // will be an error anyway.
  384,316 ( 0.02%)          Ok(match iter.size_hint() {
        .                       (0, Some(0)) => {
        .                           assert!(iter.next().is_none());
        .                           f(&[])
        .                       }
        .                       (1, Some(1)) => {
      744 ( 0.00%)                  let t0 = iter.next().unwrap()?;
        .                           assert!(iter.next().is_none());
   29,851 ( 0.00%)                  f(&[t0])
        .                       }
        .                       (2, Some(2)) => {
      230 ( 0.00%)                  let t0 = iter.next().unwrap()?;
      230 ( 0.00%)                  let t1 = iter.next().unwrap()?;
      345 ( 0.00%)                  assert!(iter.next().is_none());
   26,072 ( 0.00%)                  f(&[t0, t1])
        .                       }
   12,458 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
        .                   })
  596,280 ( 0.04%)      }
        .           }
        .           
        .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
        .           // won't work for us.
        .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
  124,374 ( 0.01%)      t as *const () == u as *const ()
        .           }
        .           
        .           pub fn provide(providers: &mut ty::query::Providers) {
        2 ( 0.00%)      providers.in_scope_traits_map =
        .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
        3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
        2 ( 0.00%)      providers.module_reexports =
        .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
        2 ( 0.00%)      providers.crate_name = |tcx, id| {
        1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
        1 ( 0.00%)          tcx.crate_name
        .               };
        2 ( 0.00%)      providers.maybe_unused_trait_import =
        .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
        2 ( 0.00%)      providers.maybe_unused_extern_crates =
        .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
        2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
        .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
        .               };
        .           
       11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
        2 ( 0.00%)      providers.lookup_const_stability =
        .                   |tcx, id| tcx.stability().local_const_stability(id.expect_local());
        2 ( 0.00%)      providers.lookup_deprecation_entry =
    3,496 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
        2 ( 0.00%)      providers.extern_mod_stmt_cnum =
        .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
        3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
        3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
        2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
        .                   assert_eq!(cnum, LOCAL_CRATE);
        .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
        .               };
        2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
        .                   assert_eq!(cnum, LOCAL_CRATE);
        .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
        .               };
        2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
        1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
        .                   // We want to check if the panic handler was defined in this crate
        3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
        .               };
        .           }

  972,691 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                  

-- line 70 ----------------------------------------
         .           
         .                   impl<'a, T> $name<'a, T> {
         .                       // Helper function for creating a slice from the iterator.
         .                       #[inline(always)]
         .                       fn make_slice(&self) -> &'a [T] {
         .                           // SAFETY: the iterator was created from a slice with pointer
         .                           // `self.ptr` and length `len!(self)`. This guarantees that all
         .                           // the prerequisites for `from_raw_parts` are fulfilled.
   131,091 ( 0.01%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
         .                       }
         .           
         .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
         .                       // returning the old start.
         .                       // Unsafe because the offset must not exceed `self.len()`.
         .                       #[inline(always)]
         .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
         .                           if mem::size_of::<T>() == 0 {
         .                               zst_shrink!(self, offset);
         .                               self.ptr.as_ptr()
         .                           } else {
   211,764 ( 0.01%)                      let old = self.ptr.as_ptr();
         .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
         .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
   568,672 ( 0.03%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
    35,294 ( 0.00%)                      old
         .                           }
    70,588 ( 0.00%)              }
         .           
         .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
         .                       // returning the new end.
         .                       // Unsafe because the offset must not exceed `self.len()`.
         .                       #[inline(always)]
         .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
         .                           if mem::size_of::<T>() == 0 {
         .                               zst_shrink!(self, offset);
         .                               self.ptr.as_ptr()
         .                           } else {
         .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
         .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
         .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
    16,466 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
     4,644 ( 0.00%)                      self.end
         .                           }
     4,644 ( 0.00%)              }
         .                   }
         .           
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   impl<T> ExactSizeIterator for $name<'_, T> {
         .                       #[inline(always)]
         .                       fn len(&self) -> usize {
   103,119 ( 0.01%)                  len!(self)
     2,046 ( 0.00%)              }
         .           
         .                       #[inline(always)]
         .                       fn is_empty(&self) -> bool {
         .                           is_empty!(self)
         .                       }
         .                   }
         .           
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   impl<'a, T> Iterator for $name<'a, T> {
         .                       type Item = $elem;
         .           
         .                       #[inline]
   127,269 ( 0.01%)              fn next(&mut self) -> Option<$elem> {
         .                           // could be implemented with slices, but this avoids bounds checks
         .           
         .                           // SAFETY: `assume` calls are safe since a slice's start pointer
         .                           // must be non-null, and slices over non-ZSTs must also have a
         .                           // non-null end pointer. The call to `next_unchecked!` is safe
         .                           // since we check if the iterator is empty first.
         .                           unsafe {
   280,720 ( 0.02%)                      assume(!self.ptr.as_ptr().is_null());
   212,115 ( 0.01%)                      if mem::size_of::<T>() != 0 {
   122,149 ( 0.01%)                          assume(!self.end.is_null());
         .                               }
26,747,106 ( 1.59%)                      if is_empty!(self) {
     7,129 ( 0.00%)                          None
         .                               } else {
    70,597 ( 0.00%)                          Some(next_unchecked!(self))
         .                               }
         .                           }
   127,269 ( 0.01%)              }
         .           
         .                       #[inline]
       165 ( 0.00%)              fn size_hint(&self) -> (usize, Option<usize>) {
   805,920 ( 0.05%)                  let exact = len!(self);
       297 ( 0.00%)                  (exact, Some(exact))
        66 ( 0.00%)              }
         .           
         .                       #[inline]
         .                       fn count(self) -> usize {
         .                           len!(self)
         .                       }
         .           
         .                       #[inline]
         .                       fn nth(&mut self, n: usize) -> Option<$elem> {
     8,648 ( 0.00%)                  if n >= len!(self) {
         .                               // This iterator is now empty.
         .                               if mem::size_of::<T>() == 0 {
         .                                   // We have to do it this way as `ptr` may never be 0, but `end`
         .                                   // could be (due to wrapping).
         .                                   self.end = self.ptr.as_ptr();
         .                               } else {
         .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
         .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
         .                       // faster to compile.
         .                       #[inline]
         .                       fn for_each<F>(mut self, mut f: F)
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item),
         .                       {
         .                           while let Some(x) = self.next() {
     2,325 ( 0.00%)                      f(x);
         .                           }
         .                       }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
        16 ( 0.00%)              fn all<F>(&mut self, mut f: F) -> bool
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> bool,
         .                       {
       794 ( 0.00%)                  while let Some(x) = self.next() {
    16,652 ( 0.00%)                      if !f(x) {
         4 ( 0.00%)                          return false;
         .                               }
         .                           }
         .                           true
        24 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
       193 ( 0.00%)              fn any<F>(&mut self, mut f: F) -> bool
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> bool,
         .                       {
   214,895 ( 0.01%)                  while let Some(x) = self.next() {
   249,731 ( 0.01%)                      if f(x) {
         5 ( 0.00%)                          return true;
         .                               }
         .                           }
         .                           false
       198 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
     5,069 ( 0.00%)              fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
         .                       where
         .                           Self: Sized,
         .                           P: FnMut(&Self::Item) -> bool,
         .                       {
    24,013 ( 0.00%)                  while let Some(x) = self.next() {
    69,328 ( 0.00%)                      if predicate(&x) {
        90 ( 0.00%)                          return Some(x);
         .                               }
         .                           }
       963 ( 0.00%)                  None
    32,269 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
         .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> Option<B>,
         .                       {
   110,501 ( 0.01%)                  while let Some(x) = self.next() {
   103,889 ( 0.01%)                      if let Some(y) = f(x) {
    12,970 ( 0.00%)                          return Some(y);
         .                               }
         .                           }
         .                           None
     2,310 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile. Also, the `assume` avoids a bounds check.
         .                       #[inline]
         .                       #[rustc_inherit_overflow_checks]
         .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
         .                           Self: Sized,
         .                           P: FnMut(Self::Item) -> bool,
         .                       {
         .                           let n = len!(self);
         .                           let mut i = 0;
         .                           while let Some(x) = self.next() {
   291,258 ( 0.02%)                      if predicate(x) {
         .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
         .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
         .                                   unsafe { assume(i < n) };
         .                                   return Some(i);
         .                               }
         .                               i += 1;
         .                           }
         .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
         .                       // faster to compile. Also, the `assume` avoids a bounds check.
         .                       #[inline]
         .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
         .                           P: FnMut(Self::Item) -> bool,
         .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
         .                       {
         .                           let n = len!(self);
         .                           let mut i = n;
     6,531 ( 0.00%)                  while let Some(x) = self.next_back() {
    90,469 ( 0.01%)                      i -= 1;
    74,234 ( 0.00%)                      if predicate(x) {
         .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
         .                                   // and is only decreasing.
         .                                   unsafe { assume(i < n) };
         .                                   return Some(i);
         .                               }
         .                           }
         .                           None
         .                       }
         .           
         .                       #[doc(hidden)]
        28 ( 0.00%)              unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {
         .                           // SAFETY: the caller must guarantee that `i` is in bounds of
         .                           // the underlying slice, so `i` cannot overflow an `isize`, and
         .                           // the returned references is guaranteed to refer to an element
         .                           // of the slice and thus guaranteed to be valid.
         .                           //
         .                           // Also note that the caller also guarantees that we're never
         .                           // called with the same index again, and that no other methods
         .                           // that will access this subslice are called, so it is valid
         .                           // for the returned reference to be mutable in the case of
         .                           // `IterMut`
    79,553 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
        14 ( 0.00%)              }
         .           
         .                       $($extra)*
         .                   }
         .           
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
         .                       #[inline]
     6,984 ( 0.00%)              fn next_back(&mut self) -> Option<$elem> {
         .                           // could be implemented with slices, but this avoids bounds checks
         .           
         .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
         .                           // and slices over non-ZSTs must also have a non-null end pointer.
         .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
         .                           // empty first.
         .                           unsafe {
     9,319 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
    11,640 ( 0.00%)                      if mem::size_of::<T>() != 0 {
     4,727 ( 0.00%)                          assume(!self.end.is_null());
         .                               }
   469,459 ( 0.03%)                      if is_empty!(self) {
         6 ( 0.00%)                          None
         .                               } else {
     4,644 ( 0.00%)                          Some(next_back_unchecked!(self))
         .                               }
         .                           }
     6,984 ( 0.00%)              }
         .           
         .                       #[inline]
         .                       fn nth_back(&mut self, n: usize) -> Option<$elem> {
         .                           if n >= len!(self) {
         .                               // This iterator is now empty.
         .                               self.end = self.ptr.as_ptr();
         .                               return None;
         .                           }
-- line 375 ----------------------------------------

 4,902,186 ( 0.29%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs
--------------------------------------------------------------------------------
Ir                 

-- line 46 ----------------------------------------
        .           ///
        .           /// To implement this conveniently, use the derive macro located in `rustc_macros`.
        .           pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {
        .               /// Consumers may find this more convenient to use with infallible folders than
        .               /// [`try_super_fold_with`][`TypeFoldable::try_super_fold_with`], to which the
        .               /// provided default definition delegates.  Implementors **should not** override
        .               /// this provided default definition, to ensure that the two methods are coherent
        .               /// (provide a definition of `try_super_fold_with` instead).
2,274,285 ( 0.14%)      fn super_fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {
  208,349 ( 0.01%)          self.try_super_fold_with(folder).into_ok()
2,343,084 ( 0.14%)      }
        .               /// Consumers may find this more convenient to use with infallible folders than
        .               /// [`try_fold_with`][`TypeFoldable::try_fold_with`], to which the provided
        .               /// default definition delegates.  Implementors **should not** override this
        .               /// provided default definition, to ensure that the two methods are coherent
        .               /// (provide a definition of `try_fold_with` instead).
  188,487 ( 0.01%)      fn fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {
   52,206 ( 0.00%)          self.try_fold_with(folder).into_ok()
  172,598 ( 0.01%)      }
        .           
        .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error>;
        .           
3,832,628 ( 0.23%)      fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {
  948,304 ( 0.06%)          self.try_super_fold_with(folder)
3,872,026 ( 0.23%)      }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;
  402,806 ( 0.02%)      fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
  363,868 ( 0.02%)          self.super_visit_with(visitor)
  311,845 ( 0.02%)      }
        .           
        .               /// Returns `true` if `self` has any late-bound regions that are either
        .               /// bound by `binder` or bound by some binder outside of `binder`.
        .               /// If `binder` is `ty::INNERMOST`, this indicates whether
        .               /// there are any late-bound regions that appear free.
        .               fn has_vars_bound_at_or_above(&self, binder: ty::DebruijnIndex) -> bool {
  162,718 ( 0.01%)          self.visit_with(&mut HasEscapingVarsVisitor { outer_index: binder }).is_break()
        .               }
        .           
        .               /// Returns `true` if this `self` has any regions that escape `binder` (and
        .               /// hence are not bound by it).
        .               fn has_vars_bound_above(&self, binder: ty::DebruijnIndex) -> bool {
      117 ( 0.00%)          self.has_vars_bound_at_or_above(binder.shifted_in(1))
        .               }
        .           
  322,867 ( 0.02%)      fn has_escaping_bound_vars(&self) -> bool {
   91,786 ( 0.01%)          self.has_vars_bound_at_or_above(ty::INNERMOST)
  324,203 ( 0.02%)      }
        .           
   48,243 ( 0.00%)      #[instrument(level = "trace")]
        .               fn has_type_flags(&self, flags: TypeFlags) -> bool {
  154,015 ( 0.01%)          self.visit_with(&mut HasTypeFlagsVisitor { flags }).break_value() == Some(FoundFlags)
        .               }
        .               fn has_projections(&self) -> bool {
    2,916 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_PROJECTION)
        .               }
        .               fn has_opaque_types(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_TY_OPAQUE)
        .               }
   12,848 ( 0.00%)      fn references_error(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_ERROR)
   12,848 ( 0.00%)      }
        .               fn has_param_types_or_consts(&self) -> bool {
      534 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_TY_PARAM | TypeFlags::HAS_CT_PARAM)
        .               }
        .               fn has_infer_regions(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_RE_INFER)
        .               }
        .               fn has_infer_types(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_TY_INFER)
        .               }
        .               fn has_infer_types_or_consts(&self) -> bool {
   75,739 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_TY_INFER | TypeFlags::HAS_CT_INFER)
        .               }
   31,342 ( 0.00%)      fn needs_infer(&self) -> bool {
   74,734 ( 0.00%)          self.has_type_flags(TypeFlags::NEEDS_INFER)
   31,508 ( 0.00%)      }
        .               fn has_placeholders(&self) -> bool {
        .                   self.has_type_flags(
        .                       TypeFlags::HAS_RE_PLACEHOLDER
        .                           | TypeFlags::HAS_TY_PLACEHOLDER
        .                           | TypeFlags::HAS_CT_PLACEHOLDER,
        .                   )
        .               }
        .               fn needs_subst(&self) -> bool {
-- line 133 ----------------------------------------
-- line 147 ----------------------------------------
        .               fn has_erasable_regions(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_FREE_REGIONS)
        .               }
        .           
        .               /// Indicates whether this value references only 'global'
        .               /// generic parameters that are the same regardless of what fn we are
        .               /// in. This is used for caching.
        .               fn is_global(&self) -> bool {
   22,678 ( 0.00%)          !self.has_type_flags(TypeFlags::HAS_FREE_LOCAL_NAMES)
        .               }
        .           
        .               /// True if there are any late-bound regions
        .               fn has_late_bound_regions(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_RE_LATE_BOUND)
        .               }
        .           
        .               /// Indicates whether this value still has parameters/placeholders/inference variables
-- line 163 ----------------------------------------
-- line 194 ----------------------------------------
        .           
        .               fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;
        .           
        .               fn fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Binder<'tcx, T>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
  682,771 ( 0.04%)          t.super_fold_with(self)
        .               }
        .           
        .               fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
   63,651 ( 0.00%)          t.super_fold_with(self)
        .               }
        .           
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
        .                   r.super_fold_with(self)
        .               }
        .           
        .               fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
    3,331 ( 0.00%)          c.super_fold_with(self)
        .               }
        .           
        .               fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
    1,351 ( 0.00%)          p.super_fold_with(self)
        .               }
        .           
        .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
        .                   bug!("most type folders should not be folding MIR datastructures: {:?}", c)
        .               }
-- line 238 ----------------------------------------
-- line 247 ----------------------------------------
        .           /// A blanket implementation of this trait (that defers to the relevant
        .           /// method of [`TypeFolder`]) is provided for all infallible folders in
        .           /// order to ensure the two APIs are coherent.
        .           pub trait FallibleTypeFolder<'tcx>: TypeFolder<'tcx> {
        .               fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
   13,778 ( 0.00%)          t.try_super_fold_with(self)
        .               }
        .           
        .               fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {
        .                   t.try_super_fold_with(self)
        .               }
        .           
        .               fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {
        .                   r.try_super_fold_with(self)
-- line 263 ----------------------------------------
-- line 269 ----------------------------------------
        .               ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {
        .                   c.try_super_fold_with(self)
        .               }
        .           
        .               fn try_fold_predicate(
        .                   &mut self,
        .                   p: ty::Predicate<'tcx>,
        .               ) -> Result<ty::Predicate<'tcx>, Self::Error> {
    3,696 ( 0.00%)          p.try_super_fold_with(self)
        .               }
        .           
        .               fn try_fold_mir_const(
        .                   &mut self,
        .                   c: mir::ConstantKind<'tcx>,
        .               ) -> Result<mir::ConstantKind<'tcx>, Self::Error> {
        .                   bug!("most type folders should not be folding MIR datastructures: {:?}", c)
        .               }
-- line 285 ----------------------------------------
-- line 286 ----------------------------------------
        .           }
        .           
        .           // Blanket implementation of fallible trait for infallible folders
        .           // delegates to infallible methods to prevent incoherence
        .           impl<'tcx, F> FallibleTypeFolder<'tcx> for F
        .           where
        .               F: TypeFolder<'tcx, Error = !>,
        .           {
  137,938 ( 0.01%)      fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  250,162 ( 0.01%)          Ok(self.fold_binder(t))
  205,168 ( 0.01%)      }
        .           
   51,991 ( 0.00%)      fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {
1,237,852 ( 0.07%)          Ok(self.fold_ty(t))
   49,039 ( 0.00%)      }
        .           
   17,992 ( 0.00%)      fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {
  305,576 ( 0.02%)          Ok(self.fold_region(r))
   17,992 ( 0.00%)      }
        .           
      939 ( 0.00%)      fn try_fold_const(
        .                   &mut self,
        .                   c: &'tcx ty::Const<'tcx>,
        .               ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {
   10,803 ( 0.00%)          Ok(self.fold_const(c))
      934 ( 0.00%)      }
        .           
        .               fn try_fold_predicate(
        .                   &mut self,
        .                   p: ty::Predicate<'tcx>,
        .               ) -> Result<ty::Predicate<'tcx>, Self::Error> {
        .                   Ok(self.fold_predicate(p))
        .               }
        .           
-- line 322 ----------------------------------------
-- line 330 ----------------------------------------
        .           
        .           pub trait TypeVisitor<'tcx>: Sized {
        .               type BreakTy = !;
        .           
        .               fn visit_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: &Binder<'tcx, T>,
        .               ) -> ControlFlow<Self::BreakTy> {
    2,262 ( 0.00%)          t.super_visit_with(self)
        .               }
        .           
        .               fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
    2,886 ( 0.00%)          t.super_visit_with(self)
        .               }
        .           
        .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   r.super_visit_with(self)
        .               }
        .           
        .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
       21 ( 0.00%)          c.super_visit_with(self)
        .               }
        .           
        .               fn visit_unevaluated_const(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   uv.super_visit_with(self)
        .               }
        .           
        .               fn visit_predicate(&mut self, p: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   p.super_visit_with(self)
-- line 358 ----------------------------------------
-- line 376 ----------------------------------------
        .           
        .           impl<'tcx, F, G, H> TypeFolder<'tcx> for BottomUpFolder<'tcx, F, G, H>
        .           where
        .               F: FnMut(Ty<'tcx>) -> Ty<'tcx>,
        .               G: FnMut(ty::Region<'tcx>) -> ty::Region<'tcx>,
        .               H: FnMut(&'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>,
        .           {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
      135 ( 0.00%)          self.tcx
        .               }
        .           
        .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
    1,910 ( 0.00%)          let t = ty.super_fold_with(self);
        .                   (self.ty_op)(t)
        .               }
        .           
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
        .                   let r = r.super_fold_with(self);
        .                   (self.lt_op)(r)
        .               }
        .           
        .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
       33 ( 0.00%)          let ct = ct.super_fold_with(self);
        .                   (self.ct_op)(ct)
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Region folder
        .           
        .           impl<'tcx> TyCtxt<'tcx> {
-- line 406 ----------------------------------------
-- line 415 ----------------------------------------
        .               ) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   value.fold_with(&mut RegionFolder::new(self, skipped_regions, &mut f))
        .               }
        .           
        .               /// Invoke `callback` on every region appearing free in `value`.
    2,778 ( 0.00%)      pub fn for_each_free_region(
        .                   self,
        .                   value: &impl TypeFoldable<'tcx>,
        .                   mut callback: impl FnMut(ty::Region<'tcx>),
        .               ) {
        .                   self.any_free_region_meets(value, |r| {
   13,754 ( 0.00%)              callback(r);
        .                       false
        .                   });
    2,412 ( 0.00%)      }
        .           
        .               /// Returns `true` if `callback` returns true for every region appearing free in `value`.
        .               pub fn all_free_regions_meet(
        .                   self,
        .                   value: &impl TypeFoldable<'tcx>,
        .                   mut callback: impl FnMut(ty::Region<'tcx>) -> bool,
        .               ) -> bool {
    2,201 ( 0.00%)          !self.any_free_region_meets(value, |r| !callback(r))
        .               }
        .           
        .               /// Returns `true` if `callback` returns true for some region appearing free in `value`.
        .               pub fn any_free_region_meets(
        .                   self,
        .                   value: &impl TypeFoldable<'tcx>,
        .                   callback: impl FnMut(ty::Region<'tcx>) -> bool,
        .               ) -> bool {
-- line 448 ----------------------------------------
-- line 473 ----------------------------------------
        .                       F: FnMut(ty::Region<'tcx>) -> bool,
        .                   {
        .                       type BreakTy = ();
        .           
        .                       fn visit_binder<T: TypeFoldable<'tcx>>(
        .                           &mut self,
        .                           t: &Binder<'tcx, T>,
        .                       ) -> ControlFlow<Self::BreakTy> {
    1,881 ( 0.00%)                  self.outer_index.shift_in(1);
    1,996 ( 0.00%)                  let result = t.as_ref().skip_binder().visit_with(self);
    1,497 ( 0.00%)                  self.outer_index.shift_out(1);
        .                           result
        .                       }
        .           
   11,555 ( 0.00%)              fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
   19,457 ( 0.00%)                  match *r {
      176 ( 0.00%)                      ty::ReLateBound(debruijn, _) if debruijn < self.outer_index => {
        .                                   ControlFlow::CONTINUE
        .                               }
        .                               _ => {
        .                                   if (self.callback)(r) {
        .                                       ControlFlow::BREAK
        .                                   } else {
        .                                       ControlFlow::CONTINUE
        .                                   }
        .                               }
        .                           }
   16,177 ( 0.00%)              }
        .           
        .                       fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                           // We're only interested in types involving regions
   14,087 ( 0.00%)                  if ty.flags().intersects(TypeFlags::HAS_FREE_REGIONS) {
   16,387 ( 0.00%)                      ty.super_visit_with(self)
        .                           } else {
        .                               ControlFlow::CONTINUE
        .                           }
        .                       }
        .                   }
        .           
   25,413 ( 0.00%)          value.visit_with(&mut RegionVisitor { outer_index: ty::INNERMOST, callback }).is_break()
        .               }
        .           }
        .           
        .           /// Folds over the substructure of a type, visiting its component
        .           /// types and all regions that occur *free* within it.
        .           ///
        .           /// That is, `Ty` can contain function or method types that bind
        .           /// regions at the call site (`ReLateBound`), and occurrences of
-- line 520 ----------------------------------------
-- line 540 ----------------------------------------
        .           
        .           impl<'a, 'tcx> RegionFolder<'a, 'tcx> {
        .               #[inline]
        .               pub fn new(
        .                   tcx: TyCtxt<'tcx>,
        .                   skipped_regions: &'a mut bool,
        .                   fold_region_fn: &'a mut dyn FnMut(ty::Region<'tcx>, ty::DebruijnIndex) -> ty::Region<'tcx>,
        .               ) -> RegionFolder<'a, 'tcx> {
   71,376 ( 0.00%)          RegionFolder { tcx, skipped_regions, current_index: ty::INNERMOST, fold_region_fn }
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
   67,900 ( 0.00%)          self.tcx
   67,900 ( 0.00%)      }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: ty::Binder<'tcx, T>,
        .               ) -> ty::Binder<'tcx, T> {
    3,926 ( 0.00%)          self.current_index.shift_in(1);
    7,594 ( 0.00%)          let t = t.super_fold_with(self);
    3,483 ( 0.00%)          self.current_index.shift_out(1);
        .                   t
        .               }
        .           
    1,664 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
   14,888 ( 0.00%)          match *r {
    1,664 ( 0.00%)              ty::ReLateBound(debruijn, _) if debruijn < self.current_index => {
        .                           debug!(?self.current_index, "skipped bound region");
    1,664 ( 0.00%)                  *self.skipped_regions = true;
        .                           r
        .                       }
        .                       _ => {
        .                           debug!(?self.current_index, "folding free region");
   39,672 ( 0.00%)                  (self.fold_region_fn)(r, self.current_index)
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Bound vars replacer
        .           
-- line 585 ----------------------------------------
-- line 592 ----------------------------------------
        .               current_index: ty::DebruijnIndex,
        .           
        .               fld_r: Option<&'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a)>,
        .               fld_t: Option<&'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a)>,
        .               fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx> + 'a)>,
        .           }
        .           
        .           impl<'a, 'tcx> BoundVarReplacer<'a, 'tcx> {
   48,112 ( 0.00%)      fn new(
        .                   tcx: TyCtxt<'tcx>,
        .                   fld_r: Option<&'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a)>,
        .                   fld_t: Option<&'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a)>,
        .                   fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx> + 'a)>,
        .               ) -> Self {
  168,842 ( 0.01%)          BoundVarReplacer { tcx, current_index: ty::INNERMOST, fld_r, fld_t, fld_c }
   24,056 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for BoundVarReplacer<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
   35,303 ( 0.00%)          self.tcx
   16,903 ( 0.00%)      }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: ty::Binder<'tcx, T>,
        .               ) -> ty::Binder<'tcx, T> {
   53,735 ( 0.00%)          self.current_index.shift_in(1);
   79,070 ( 0.00%)          let t = t.super_fold_with(self);
   47,387 ( 0.00%)          self.current_index.shift_out(1);
        .                   t
        .               }
        .           
  101,275 ( 0.01%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
   68,082 ( 0.00%)          match *t.kind() {
    3,824 ( 0.00%)              ty::Bound(debruijn, bound_ty) if debruijn == self.current_index => {
      765 ( 0.00%)                  if let Some(fld_t) = self.fld_t.as_mut() {
        .                               let ty = fld_t(bound_ty);
      765 ( 0.00%)                      return ty::fold::shift_vars(self.tcx, &ty, self.current_index.as_u32());
        .                           }
        .                       }
   66,552 ( 0.00%)              _ if t.has_vars_bound_at_or_above(self.current_index) => {
   82,768 ( 0.00%)                  return t.super_fold_with(self);
        .                       }
        .                       _ => {}
        .                   }
        .                   t
   73,152 ( 0.00%)      }
        .           
  107,440 ( 0.01%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
   74,944 ( 0.00%)          match *r {
   74,116 ( 0.00%)              ty::ReLateBound(debruijn, br) if debruijn == self.current_index => {
   37,050 ( 0.00%)                  if let Some(fld_r) = self.fld_r.as_mut() {
        .                               let region = fld_r(br);
   74,448 ( 0.00%)                      return if let ty::ReLateBound(debruijn1, br) = *region {
        .                                   // If the callback returns a late-bound region,
        .                                   // that region should always use the INNERMOST
        .                                   // debruijn index. Then we adjust it to the
        .                                   // correct depth.
      174 ( 0.00%)                          assert_eq!(debruijn1, ty::INNERMOST);
    1,684 ( 0.00%)                          self.tcx.mk_region(ty::ReLateBound(debruijn, br))
        .                               } else {
        .                                   region
        .                               };
        .                           }
        .                       }
        .                       _ => {}
        .                   }
        .                   r
  107,440 ( 0.01%)      }
        .           
        .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
      141 ( 0.00%)          match *ct {
        .                       ty::Const { val: ty::ConstKind::Bound(debruijn, bound_const), ty }
        .                           if debruijn == self.current_index =>
        .                       {
        .                           if let Some(fld_c) = self.fld_c.as_mut() {
        .                               let ct = fld_c(bound_const, ty);
        .                               return ty::fold::shift_vars(self.tcx, &ct, self.current_index.as_u32());
        .                           }
        .                       }
       47 ( 0.00%)              _ if ct.has_vars_bound_at_or_above(self.current_index) => {
        .                           return ct.super_fold_with(self);
        .                       }
        .                       _ => {}
        .                   }
        .                   ct
        .               }
        .           }
        .           
-- line 681 ----------------------------------------
-- line 697 ----------------------------------------
        .                   mut fld_r: F,
        .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
        .               where
        .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   let mut region_map = BTreeMap::new();
        .                   let mut real_fld_r =
   93,269 ( 0.01%)              |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));
    1,945 ( 0.00%)          let value = value.skip_binder();
   30,306 ( 0.00%)          let value = if !value.has_escaping_bound_vars() {
   25,848 ( 0.00%)              value
        .                   } else {
    4,427 ( 0.00%)              let mut replacer = BoundVarReplacer::new(self, Some(&mut real_fld_r), None, None);
       66 ( 0.00%)              value.fold_with(&mut replacer)
        .                   };
  147,783 ( 0.01%)          (value, region_map)
        .               }
        .           
        .               /// Replaces all escaping bound vars. The `fld_r` closure replaces escaping
        .               /// bound regions; the `fld_t` closure replaces escaping bound types and the `fld_c`
        .               /// closure replaces escaping bound consts.
  205,456 ( 0.01%)      pub fn replace_escaping_bound_vars<T, F, G, H>(
        .                   self,
        .                   value: T,
        .                   mut fld_r: F,
        .                   mut fld_t: G,
        .                   mut fld_c: H,
        .               ) -> T
        .               where
        .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
        .                   G: FnMut(ty::BoundTy) -> Ty<'tcx>,
        .                   H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,
        .                   T: TypeFoldable<'tcx>,
        .               {
   45,988 ( 0.00%)          if !value.has_escaping_bound_vars() {
   63,039 ( 0.00%)              value
        .                   } else {
        .                       let mut replacer =
  288,067 ( 0.02%)                  BoundVarReplacer::new(self, Some(&mut fld_r), Some(&mut fld_t), Some(&mut fld_c));
   17,959 ( 0.00%)              value.fold_with(&mut replacer)
        .                   }
  140,826 ( 0.01%)      }
        .           
        .               /// Replaces all types or regions bound by the given `Binder`. The `fld_r`
        .               /// closure replaces bound regions while the `fld_t` closure replaces bound
        .               /// types.
  428,368 ( 0.03%)      pub fn replace_bound_vars<T, F, G, H>(
        .                   self,
        .                   value: Binder<'tcx, T>,
        .                   mut fld_r: F,
        .                   fld_t: G,
        .                   fld_c: H,
        .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
        .               where
        .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
        .                   G: FnMut(ty::BoundTy) -> Ty<'tcx>,
        .                   H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   let mut region_map = BTreeMap::new();
   65,739 ( 0.00%)          let real_fld_r = |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));
  382,950 ( 0.02%)          let value = self.replace_escaping_bound_vars(value.skip_binder(), real_fld_r, fld_t, fld_c);
  418,421 ( 0.02%)          (value, region_map)
  298,007 ( 0.02%)      }
        .           
        .               /// Replaces any late-bound regions bound in `value` with
        .               /// free variants attached to `all_outlive_scope`.
    6,237 ( 0.00%)      pub fn liberate_late_bound_regions<T>(
        .                   self,
        .                   all_outlive_scope: DefId,
        .                   value: ty::Binder<'tcx, T>,
        .               ) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   self.replace_late_bound_regions(value, |br| {
    5,915 ( 0.00%)              self.mk_region(ty::ReFree(ty::FreeRegion {
      910 ( 0.00%)                  scope: all_outlive_scope,
        .                           bound_region: br.kind,
        .                       }))
        .                   })
        .                   .0
    3,402 ( 0.00%)      }
        .           
        .               pub fn shift_bound_var_indices<T>(self, bound_vars: usize, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   self.replace_escaping_bound_vars(
   14,475 ( 0.00%)              value,
        .                       |r| {
        .                           self.mk_region(ty::ReLateBound(
        .                               ty::INNERMOST,
        .                               ty::BoundRegion {
        .                                   var: ty::BoundVar::from_usize(r.var.as_usize() + bound_vars),
        .                                   kind: r.kind,
        .                               },
        .                           ))
-- line 795 ----------------------------------------
-- line 843 ----------------------------------------
        .               fn collect_late_bound_regions<T>(
        .                   self,
        .                   value: &Binder<'tcx, T>,
        .                   just_constraint: bool,
        .               ) -> FxHashSet<ty::BoundRegionKind>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
      946 ( 0.00%)          let mut collector = LateBoundRegionsCollector::new(just_constraint);
        .                   let result = value.as_ref().skip_binder().visit_with(&mut collector);
        .                   assert!(result.is_continue()); // should never have stopped early
    1,696 ( 0.00%)          collector.regions
        .               }
        .           
        .               /// Replaces any late-bound regions bound in `value` with `'erased`. Useful in codegen but also
        .               /// method lookup and a few other places where precise region relationships are not required.
        .               pub fn erase_late_bound_regions<T>(self, value: Binder<'tcx, T>) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
    1,636 ( 0.00%)          self.replace_late_bound_regions(value, |_| self.lifetimes.re_erased).0
        .               }
        .           
        .               /// Rewrite any late-bound regions so that they are anonymous. Region numbers are
        .               /// assigned starting at 0 and increasing monotonically in the order traversed
        .               /// by the fold operation.
        .               ///
        .               /// The chief purpose of this function is to canonicalize regions so that two
        .               /// `FnSig`s or `TraitRef`s which are equivalent up to region naming will become
        .               /// structurally identical. For example, `for<'a, 'b> fn(&'a isize, &'b isize)` and
        .               /// `for<'a, 'b> fn(&'b isize, &'a isize)` will become identical after anonymization.
   32,037 ( 0.00%)      pub fn anonymize_late_bound_regions<T>(self, sig: Binder<'tcx, T>) -> Binder<'tcx, T>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
   23,175 ( 0.00%)          let mut counter = 0;
    2,649 ( 0.00%)          let inner = self
        .                       .replace_late_bound_regions(sig, |_| {
        .                           let br = ty::BoundRegion {
      348 ( 0.00%)                      var: ty::BoundVar::from_u32(counter),
        .                               kind: ty::BrAnon(counter),
        .                           };
    1,392 ( 0.00%)                  let r = self.mk_region(ty::ReLateBound(ty::INNERMOST, br));
      870 ( 0.00%)                  counter += 1;
        .                           r
        .                       })
        .                       .0;
    4,635 ( 0.00%)          let bound_vars = self.mk_bound_variable_kinds(
   13,905 ( 0.00%)              (0..counter).map(|i| ty::BoundVariableKind::Region(ty::BrAnon(i))),
        .                   );
   25,884 ( 0.00%)          Binder::bind_with_vars(inner, bound_vars)
   27,514 ( 0.00%)      }
        .           }
        .           
        .           pub struct ValidateBoundVars<'tcx> {
        .               bound_vars: &'tcx ty::List<ty::BoundVariableKind>,
        .               binder_index: ty::DebruijnIndex,
        .               // We may encounter the same variable at different levels of binding, so
        .               // this can't just be `Ty`
        .               visited: SsoHashSet<(ty::DebruijnIndex, Ty<'tcx>)>,
-- line 902 ----------------------------------------
-- line 1004 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               current_index: ty::DebruijnIndex,
        .               amount: u32,
        .           }
        .           
        .           impl<'tcx> Shifter<'tcx> {
        .               pub fn new(tcx: TyCtxt<'tcx>, amount: u32) -> Self {
        .                   Shifter { tcx, current_index: ty::INNERMOST, amount }
    1,598 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeFolder<'tcx> for Shifter<'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
       88 ( 0.00%)          self.tcx
        .               }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: ty::Binder<'tcx, T>,
        .               ) -> ty::Binder<'tcx, T> {
      243 ( 0.00%)          self.current_index.shift_in(1);
    1,053 ( 0.00%)          let t = t.super_fold_with(self);
      243 ( 0.00%)          self.current_index.shift_out(1);
        .                   t
        .               }
        .           
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
       68 ( 0.00%)          match *r {
        .                       ty::ReLateBound(debruijn, br) => {
      136 ( 0.00%)                  if self.amount == 0 || debruijn < self.current_index {
        .                               r
        .                           } else {
       34 ( 0.00%)                      let debruijn = debruijn.shifted_in(self.amount);
        .                               let shifted = ty::ReLateBound(debruijn, br);
      340 ( 0.00%)                      self.tcx.mk_region(shifted)
        .                           }
        .                       }
        .                       _ => r,
        .                   }
        .               }
        .           
        .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
    1,910 ( 0.00%)          match *ty.kind() {
        .                       ty::Bound(debruijn, bound_ty) => {
        .                           if self.amount == 0 || debruijn < self.current_index {
        .                               ty
        .                           } else {
        .                               let debruijn = debruijn.shifted_in(self.amount);
        .                               self.tcx.mk_ty(ty::Bound(debruijn, bound_ty))
        .                           }
        .                       }
        .           
    2,868 ( 0.00%)              _ => ty.super_fold_with(self),
        .                   }
        .               }
        .           
        .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
        .                   if let ty::Const { val: ty::ConstKind::Bound(debruijn, bound_ct), ty } = *ct {
        .                       if self.amount == 0 || debruijn < self.current_index {
        .                           ct
        .                       } else {
-- line 1064 ----------------------------------------
-- line 1073 ----------------------------------------
        .           
        .           pub fn shift_region<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               region: ty::Region<'tcx>,
        .               amount: u32,
        .           ) -> ty::Region<'tcx> {
        .               match region {
        .                   ty::ReLateBound(debruijn, br) if amount > 0 => {
    1,729 ( 0.00%)              tcx.mk_region(ty::ReLateBound(debruijn.shifted_in(amount), *br))
        .                   }
        .                   _ => region,
        .               }
        .           }
        .           
        .           pub fn shift_vars<'tcx, T>(tcx: TyCtxt<'tcx>, value: T, amount: u32) -> T
        .           where
        .               T: TypeFoldable<'tcx>,
        .           {
        .               debug!("shift_vars(value={:?}, amount={})", value, amount);
        .           
    1,602 ( 0.00%)      value.fold_with(&mut Shifter::new(tcx, amount))
        .           }
        .           
        .           #[derive(Debug, PartialEq, Eq, Copy, Clone)]
        .           struct FoundEscapingVars;
        .           
        .           /// An "escaping var" is a bound var whose binder is not part of `t`. A bound var can be a
        .           /// bound region or a bound type.
        .           ///
-- line 1101 ----------------------------------------
-- line 1128 ----------------------------------------
        .           
        .           impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {
        .               type BreakTy = FoundEscapingVars;
        .           
        .               fn visit_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: &Binder<'tcx, T>,
        .               ) -> ControlFlow<Self::BreakTy> {
   12,268 ( 0.00%)          self.outer_index.shift_in(1);
        .                   let result = t.super_visit_with(self);
   16,491 ( 0.00%)          self.outer_index.shift_out(1);
        .                   result
        .               }
        .           
        .               #[inline]
        .               fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   // If the outer-exclusive-binder is *strictly greater* than
        .                   // `outer_index`, that means that `t` contains some content
        .                   // bound at `outer_index` or above (because
-- line 1146 ----------------------------------------
-- line 1160 ----------------------------------------
        .                   // visited.
        .                   if r.bound_at_or_above_binder(self.outer_index) {
        .                       ControlFlow::Break(FoundEscapingVars)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
        4 ( 0.00%)      fn visit_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   // we don't have a `visit_infer_const` callback, so we have to
        .                   // hook in here to catch this case (annoying...), but
        .                   // otherwise we do want to remember to visit the rest of the
        .                   // const, as it has types/regions embedded in a lot of other
        .                   // places.
        6 ( 0.00%)          match ct.val {
        .                       ty::ConstKind::Bound(debruijn, _) if debruijn >= self.outer_index => {
        .                           ControlFlow::Break(FoundEscapingVars)
        .                       }
        .                       _ => ct.super_visit_with(self),
        .                   }
        4 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   if predicate.inner.outer_exclusive_binder > self.outer_index {
        .                       ControlFlow::Break(FoundEscapingVars)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
-- line 1188 ----------------------------------------
-- line 1210 ----------------------------------------
        .               #[instrument(level = "trace")]
        .               fn visit_ty(&mut self, t: Ty<'_>) -> ControlFlow<Self::BreakTy> {
        .                   debug!(
        .                       "HasTypeFlagsVisitor: t={:?} t.flags={:?} self.flags={:?}",
        .                       t,
        .                       t.flags(),
        .                       self.flags
        .                   );
  252,957 ( 0.02%)          if t.flags().intersects(self.flags) {
        .                       ControlFlow::Break(FoundFlags)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
        .               #[inline]
        .               #[instrument(skip(self), level = "trace")]
        .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
   11,804 ( 0.00%)          let flags = r.type_flags();
        .                   trace!(r.flags=?flags);
        .                   if flags.intersects(self.flags) {
        .                       ControlFlow::Break(FoundFlags)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
        .               #[inline]
        .               #[instrument(level = "trace")]
        .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
      614 ( 0.00%)          let flags = FlagComputation::for_const(c);
        .                   trace!(r.flags=?flags);
    1,348 ( 0.00%)          if flags.intersects(self.flags) {
        .                       ControlFlow::Break(FoundFlags)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
        .               #[inline]
        .               #[instrument(level = "trace")]
        .               fn visit_unevaluated_const(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {
    1,698 ( 0.00%)          let flags = FlagComputation::for_unevaluated_const(uv);
        .                   trace!(r.flags=?flags);
        .                   if flags.intersects(self.flags) {
        .                       ControlFlow::Break(FoundFlags)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
-- line 1260 ----------------------------------------
-- line 1285 ----------------------------------------
        .               /// them constraints `'a == 'b`. But if you have `<&'a u32 as
        .               /// Trait>::Foo` and `<&'b u32 as Trait>::Foo`, normalizing those
        .               /// types may mean that `'a` and `'b` don't appear in the results,
        .               /// so they are not considered *constrained*.
        .               just_constrained: bool,
        .           }
        .           
        .           impl LateBoundRegionsCollector {
      424 ( 0.00%)      fn new(just_constrained: bool) -> Self {
    2,968 ( 0.00%)          LateBoundRegionsCollector {
        .                       current_index: ty::INNERMOST,
        .                       regions: Default::default(),
        .                       just_constrained,
        .                   }
      424 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {
        .               fn visit_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: &Binder<'tcx, T>,
        .               ) -> ControlFlow<Self::BreakTy> {
       90 ( 0.00%)          self.current_index.shift_in(1);
       90 ( 0.00%)          let result = t.super_visit_with(self);
       90 ( 0.00%)          self.current_index.shift_out(1);
        .                   result
        .               }
        .           
    1,434 ( 0.00%)      fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   // if we are only looking for "constrained" region, we have to
        .                   // ignore the inputs to a projection, as they may not appear
        .                   // in the normalized form
    1,724 ( 0.00%)          if self.just_constrained {
    1,152 ( 0.00%)              if let ty::Projection(..) | ty::Opaque(..) = t.kind() {
        .                           return ControlFlow::CONTINUE;
        .                       }
        .                   }
        .           
    2,088 ( 0.00%)          t.super_visit_with(self)
      956 ( 0.00%)      }
        .           
        .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   // if we are only looking for "constrained" region, we have to
        .                   // ignore the inputs of an unevaluated const, as they may not appear
        .                   // in the normalized form
        .                   if self.just_constrained {
        .                       if let ty::ConstKind::Unevaluated(..) = c.val {
        .                           return ControlFlow::CONTINUE;
        .                       }
        .                   }
        .           
        .                   c.super_visit_with(self)
        .               }
        .           
        .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
      892 ( 0.00%)          if let ty::ReLateBound(debruijn, br) = *r {
      154 ( 0.00%)              if debruijn == self.current_index {
        .                           self.regions.insert(br.kind);
        .                       }
        .                   }
        .                   ControlFlow::CONTINUE
        .               }
        .           }

  173,060 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs
--------------------------------------------------------------------------------
Ir                 

-- line 40 ----------------------------------------
        .           
        .           impl<BorrowType: marker::BorrowType, K, V> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {
        .               /// Looks up a given key in a (sub)tree headed by the node, recursively.
        .               /// Returns a `Found` with the handle of the matching KV, if any. Otherwise,
        .               /// returns a `GoDown` with the handle of the leaf edge where the key belongs.
        .               ///
        .               /// The result is meaningful only if the tree is ordered by key, like the tree
        .               /// in a `BTreeMap` is.
  646,345 ( 0.04%)      pub fn search_tree<Q: ?Sized>(
        .                   mut self,
        .                   key: &Q,
        .               ) -> SearchResult<BorrowType, K, V, marker::LeafOrInternal, marker::Leaf>
        .               where
        .                   Q: Ord,
        .                   K: Borrow<Q>,
        .               {
        .                   loop {
       54 ( 0.00%)              self = match self.search_node(key) {
        .                           Found(handle) => return Found(handle),
   81,329 ( 0.00%)                  GoDown(handle) => match handle.force() {
      114 ( 0.00%)                      Leaf(leaf) => return GoDown(leaf),
        .                               Internal(internal) => internal.descend(),
        .                           },
        .                       }
        .                   }
  281,067 ( 0.02%)      }
        .           
        .               /// Descends to the nearest node where the edge matching the lower bound
        .               /// of the range is different from the edge matching the upper bound, i.e.,
        .               /// the nearest node that has at least one key contained in the range.
        .               ///
        .               /// If found, returns an `Ok` with that node, the strictly ascending pair of
        .               /// edge indices in the node delimiting the range, and the corresponding
        .               /// pair of bounds for continuing the search in the child nodes, in case
-- line 73 ----------------------------------------
-- line 175 ----------------------------------------
        .           impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {
        .               /// Looks up a given key in the node, without recursion.
        .               /// Returns a `Found` with the handle of the matching KV, if any. Otherwise,
        .               /// returns a `GoDown` with the handle of the edge where the key might be found
        .               /// (if the node is internal) or where the key can be inserted.
        .               ///
        .               /// The result is meaningful only if the tree is ordered by key, like the tree
        .               /// in a `BTreeMap` is.
       72 ( 0.00%)      pub fn search_node<Q: ?Sized>(self, key: &Q) -> SearchResult<BorrowType, K, V, Type, Type>
        .               where
        .                   Q: Ord,
        .                   K: Borrow<Q>,
        .               {
       48 ( 0.00%)          match unsafe { self.find_key_index(key, 0) } {
        .                       IndexResult::KV(idx) => Found(unsafe { Handle::new_kv(self, idx) }),
       78 ( 0.00%)              IndexResult::Edge(idx) => GoDown(unsafe { Handle::new_edge(self, idx) }),
        .                   }
       12 ( 0.00%)      }
        .           
        .               /// Returns either the KV index in the node at which the key (or an equivalent)
        .               /// exists, or the edge index where the key belongs, starting from a particular index.
        .               ///
        .               /// The result is meaningful only if the tree is ordered by key, like the tree
        .               /// in a `BTreeMap` is.
        .               ///
        .               /// # Safety
        .               /// `start_index` must be a valid edge index for the node.
       36 ( 0.00%)      unsafe fn find_key_index<Q: ?Sized>(&self, key: &Q, start_index: usize) -> IndexResult
        .               where
        .                   Q: Ord,
        .                   K: Borrow<Q>,
        .               {
       18 ( 0.00%)          let node = self.reborrow();
       36 ( 0.00%)          let keys = node.keys();
        .                   debug_assert!(start_index <= keys.len());
1,023,378 ( 0.06%)          for (offset, k) in unsafe { keys.get_unchecked(start_index..) }.iter().enumerate() {
4,146,361 ( 0.25%)              match key.cmp(k.borrow()) {
        .                           Ordering::Greater => {}
        .                           Ordering::Equal => return IndexResult::KV(start_index + offset),
        .                           Ordering::Less => return IndexResult::Edge(start_index + offset),
        .                       }
        .                   }
       12 ( 0.00%)          IndexResult::Edge(keys.len())
       30 ( 0.00%)      }
        .           
        .               /// Finds an edge index in the node delimiting the lower bound of a range.
        .               /// Also returns the lower bound to be used for continuing the search in
        .               /// the matching child node, if `self` is an internal node.
        .               ///
        .               /// The result is meaningful only if the tree is ordered by key.
        .               fn find_lower_bound_index<'r, Q>(
        .                   &self,
-- line 226 ----------------------------------------

  361,269 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs
--------------------------------------------------------------------------------
Ir               

-- line 56 ----------------------------------------
      .           #[derive(Copy, Clone, Debug)]
      .           pub enum RelationDir {
      .               SubtypeOf,
      .               SupertypeOf,
      .               EqTo,
      .           }
      .           
      .           impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {
148,968 ( 0.01%)      pub fn super_combine_tys<R>(
      .                   &self,
      .                   relation: &mut R,
      .                   a: Ty<'tcx>,
      .                   b: Ty<'tcx>,
      .               ) -> RelateResult<'tcx, Ty<'tcx>>
      .               where
      .                   R: TypeRelation<'tcx>,
      .               {
      .                   let a_is_expected = relation.a_is_expected();
      .           
141,521 ( 0.01%)          match (a.kind(), b.kind()) {
      .                       // Relate integral variables to other types
      .                       (&ty::Infer(ty::IntVar(a_id)), &ty::Infer(ty::IntVar(b_id))) => {
      .                           self.inner
      .                               .borrow_mut()
      .                               .int_unification_table()
      .                               .unify_var_var(a_id, b_id)
      .                               .map_err(|e| int_unification_error(a_is_expected, e))?;
      .                           Ok(a)
      .                       }
      .                       (&ty::Infer(ty::IntVar(v_id)), &ty::Int(v)) => {
      .                           self.unify_integral_variable(a_is_expected, v_id, IntType(v))
      .                       }
      .                       (&ty::Int(v), &ty::Infer(ty::IntVar(v_id))) => {
      .                           self.unify_integral_variable(!a_is_expected, v_id, IntType(v))
      .                       }
      7 ( 0.00%)              (&ty::Infer(ty::IntVar(v_id)), &ty::Uint(v)) => {
     14 ( 0.00%)                  self.unify_integral_variable(a_is_expected, v_id, UintType(v))
      .                       }
      .                       (&ty::Uint(v), &ty::Infer(ty::IntVar(v_id))) => {
      .                           self.unify_integral_variable(!a_is_expected, v_id, UintType(v))
      .                       }
      .           
      .                       // Relate floating-point variables to other types
      .                       (&ty::Infer(ty::FloatVar(a_id)), &ty::Infer(ty::FloatVar(b_id))) => {
      .                           self.inner
-- line 100 ----------------------------------------
-- line 108 ----------------------------------------
      .                           self.unify_float_variable(a_is_expected, v_id, v)
      .                       }
      .                       (&ty::Float(v), &ty::Infer(ty::FloatVar(v_id))) => {
      .                           self.unify_float_variable(!a_is_expected, v_id, v)
      .                       }
      .           
      .                       // All other cases of inference are errors
      .                       (&ty::Infer(_), _) | (_, &ty::Infer(_)) => {
     40 ( 0.00%)                  Err(TypeError::Sorts(ty::relate::expected_found(relation, a, b)))
      .                       }
      .           
137,100 ( 0.01%)              _ => ty::relate::super_relate_tys(relation, a, b),
      .                   }
148,968 ( 0.01%)      }
      .           
      .               pub fn super_combine_consts<R>(
      .                   &self,
      .                   relation: &mut R,
      .                   a: &'tcx ty::Const<'tcx>,
      .                   b: &'tcx ty::Const<'tcx>,
      .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>>
      .               where
      .                   R: ConstEquateRelation<'tcx>,
      .               {
      .                   debug!("{}.consts({:?}, {:?})", relation.tag(), a, b);
  1,560 ( 0.00%)          if a == b {
      .                       return Ok(a);
      .                   }
      .           
      .                   let a = replace_if_possible(&mut self.inner.borrow_mut().const_unification_table(), a);
      .                   let b = replace_if_possible(&mut self.inner.borrow_mut().const_unification_table(), b);
      .           
      .                   let a_is_expected = relation.a_is_expected();
      .           
-- line 141 ----------------------------------------
-- line 255 ----------------------------------------
      .                               },
      .                               val: ConstVariableValue::Known { value },
      .                           },
      .                       )
      .                       .map(|()| value)
      .                       .map_err(|e| const_unification_error(vid_is_expected, e))
      .               }
      .           
     42 ( 0.00%)      fn unify_integral_variable(
      .                   &self,
      .                   vid_is_expected: bool,
      .                   vid: ty::IntVid,
      .                   val: ty::IntVarValue,
      .               ) -> RelateResult<'tcx, Ty<'tcx>> {
     56 ( 0.00%)          self.inner
      .                       .borrow_mut()
      .                       .int_unification_table()
      .                       .unify_var_value(vid, Some(val))
      .                       .map_err(|e| int_unification_error(vid_is_expected, e))?;
     14 ( 0.00%)          match val {
      .                       IntType(v) => Ok(self.tcx.mk_mach_int(v)),
     21 ( 0.00%)              UintType(v) => Ok(self.tcx.mk_mach_uint(v)),
      .                   }
     56 ( 0.00%)      }
      .           
      .               fn unify_float_variable(
      .                   &self,
      .                   vid_is_expected: bool,
      .                   vid: ty::FloatVid,
      .                   val: ty::FloatTy,
      .               ) -> RelateResult<'tcx, Ty<'tcx>> {
      .                   self.inner
-- line 286 ----------------------------------------
-- line 289 ----------------------------------------
      .                       .unify_var_value(vid, Some(ty::FloatVarValue(val)))
      .                       .map_err(|e| float_unification_error(vid_is_expected, e))?;
      .                   Ok(self.tcx.mk_mach_float(val))
      .               }
      .           }
      .           
      .           impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {
      .               pub fn tcx(&self) -> TyCtxt<'tcx> {
 40,226 ( 0.00%)          self.infcx.tcx
      .               }
      .           
      .               pub fn equate<'a>(&'a mut self, a_is_expected: bool) -> Equate<'a, 'infcx, 'tcx> {
      .                   Equate::new(self, a_is_expected)
      .               }
      .           
 27,790 ( 0.00%)      pub fn sub<'a>(&'a mut self, a_is_expected: bool) -> Sub<'a, 'infcx, 'tcx> {
      .                   Sub::new(self, a_is_expected)
 13,895 ( 0.00%)      }
      .           
      .               pub fn lub<'a>(&'a mut self, a_is_expected: bool) -> Lub<'a, 'infcx, 'tcx> {
      .                   Lub::new(self, a_is_expected)
      .               }
      .           
 44,716 ( 0.00%)      pub fn glb<'a>(&'a mut self, a_is_expected: bool) -> Glb<'a, 'infcx, 'tcx> {
      .                   Glb::new(self, a_is_expected)
 22,358 ( 0.00%)      }
      .           
      .               /// Here, `dir` is either `EqTo`, `SubtypeOf`, or `SupertypeOf`.
      .               /// The idea is that we should ensure that the type `a_ty` is equal
      .               /// to, a subtype of, or a supertype of (respectively) the type
      .               /// to which `b_vid` is bound.
      .               ///
      .               /// Since `b_vid` has not yet been instantiated with a type, we
      .               /// will first instantiate `b_vid` with a *generalized* version
      .               /// of `a_ty`. Generalization introduces other inference
      .               /// variables wherever subtyping could occur.
185,317 ( 0.01%)      pub fn instantiate(
      .                   &mut self,
      .                   a_ty: Ty<'tcx>,
      .                   dir: RelationDir,
      .                   b_vid: ty::TyVid,
      .                   a_is_expected: bool,
      .               ) -> RelateResult<'tcx, ()> {
      .                   use self::RelationDir::*;
      .           
-- line 333 ----------------------------------------
-- line 342 ----------------------------------------
      .                   // - `a_ty == &'x ?1`, where `'x` is some free region and `?1` is an
      .                   //   inference variable,
      .                   // - and `dir` == `SubtypeOf`.
      .                   //
      .                   // Then the generalized form `b_ty` would be `&'?2 ?3`, where
      .                   // `'?2` and `?3` are fresh region/type inference
      .                   // variables. (Down below, we will relate `a_ty <: b_ty`,
      .                   // adding constraints like `'x: '?2` and `?1 <: ?3`.)
 16,846 ( 0.00%)          let Generalization { ty: b_ty, needs_wf } = self.generalize(a_ty, b_vid, dir)?;
      .                   debug!(
      .                       "instantiate(a_ty={:?}, dir={:?}, b_vid={:?}, generalized b_ty={:?})",
      .                       a_ty, dir, b_vid, b_ty
      .                   );
117,922 ( 0.01%)          self.infcx.inner.borrow_mut().type_variables().instantiate(b_vid, b_ty);
      .           
 16,846 ( 0.00%)          if needs_wf {
      .                       self.obligations.push(Obligation::new(
      .                           self.trace.cause.clone(),
      .                           self.param_env,
      .                           ty::Binder::dummy(ty::PredicateKind::WellFormed(b_ty.into()))
      .                               .to_predicate(self.infcx.tcx),
      .                       ));
      .                   }
      .           
      .                   // Finally, relate `b_ty` to `a_ty`, as described in previous comment.
      .                   //
      .                   // FIXME(#16847): This code is non-ideal because all these subtype
      .                   // relations wind up attributed to the same spans. We need
      .                   // to associate causes/spans with each of the relations in
      .                   // the stack to get this right.
 63,878 ( 0.00%)          match dir {
 64,405 ( 0.00%)              EqTo => self.equate(a_is_expected).relate(a_ty, b_ty),
  8,765 ( 0.00%)              SubtypeOf => self.sub(a_is_expected).relate(a_ty, b_ty),
  4,424 ( 0.00%)              SupertypeOf => self.sub(a_is_expected).relate_with_variance(
      .                           ty::Contravariant,
      .                           ty::VarianceDiagInfo::default(),
      .                           a_ty,
      .                           b_ty,
      .                       ),
      .                   }?;
      .           
 16,846 ( 0.00%)          Ok(())
134,776 ( 0.01%)      }
      .           
      .               /// Attempts to generalize `ty` for the type variable `for_vid`.
      .               /// This checks for cycle -- that is, whether the type `ty`
      .               /// references `for_vid`. The `dir` is the "direction" for which we
      .               /// a performing the generalization (i.e., are we producing a type
      .               /// that can be used as a supertype etc).
      .               ///
      .               /// Preconditions:
-- line 392 ----------------------------------------
-- line 401 ----------------------------------------
      .                   debug!("generalize(ty={:?}, for_vid={:?}, dir={:?}", ty, for_vid, dir);
      .                   // Determine the ambient variance within which `ty` appears.
      .                   // The surrounding equation is:
      .                   //
      .                   //     ty [op] ty2
      .                   //
      .                   // where `op` is either `==`, `<:`, or `:>`. This maps quite
      .                   // naturally.
 67,388 ( 0.00%)          let ambient_variance = match dir {
      .                       RelationDir::EqTo => ty::Invariant,
      .                       RelationDir::SubtypeOf => ty::Covariant,
      .                       RelationDir::SupertypeOf => ty::Contravariant,
      .                   };
      .           
      .                   debug!("generalize: ambient_variance = {:?}", ambient_variance);
      .           
168,470 ( 0.01%)          let for_universe = match self.infcx.inner.borrow_mut().type_variables().probe(for_vid) {
      .                       v @ TypeVariableValue::Known { .. } => {
      .                           bug!("instantiating {:?} which has a known value {:?}", for_vid, v,)
      .                       }
      .                       TypeVariableValue::Unknown { universe } => universe,
      .                   };
      .           
      .                   debug!("generalize: for_universe = {:?}", for_universe);
      .                   debug!("generalize: trace = {:?}", self.trace);
      .           
168,470 ( 0.01%)          let mut generalize = Generalizer {
      .                       infcx: self.infcx,
      .                       cause: &self.trace.cause,
      .                       for_vid_sub_root: self.infcx.inner.borrow_mut().type_variables().sub_root_var(for_vid),
      .                       for_universe,
      .                       ambient_variance,
      .                       needs_wf: false,
      .                       root_ty: ty,
 16,847 ( 0.00%)              param_env: self.param_env,
      .                       cache: SsoHashMap::new(),
      .                   };
      .           
 33,694 ( 0.00%)          let ty = match generalize.relate(ty, ty) {
 16,846 ( 0.00%)              Ok(ty) => ty,
      .                       Err(e) => {
      .                           debug!("generalize: failure {:?}", e);
      6 ( 0.00%)                  return Err(e);
      .                       }
      .                   };
 16,846 ( 0.00%)          let needs_wf = generalize.needs_wf;
      .                   debug!("generalize: success {{ {:?}, {:?} }}", ty, needs_wf);
      .                   Ok(Generalization { ty, needs_wf })
      .               }
      .           
      .               pub fn add_const_equate_obligation(
      .                   &mut self,
      .                   a_is_expected: bool,
      .                   a: &'tcx ty::Const<'tcx>,
-- line 454 ----------------------------------------
-- line 528 ----------------------------------------
      .               /// will force the calling code to check that `WF(Foo<?C, ?D>)`
      .               /// holds, which in turn implies that `?C::Item == ?D`. So once
      .               /// `?C` is constrained, that should suffice to restrict `?D`.
      .               needs_wf: bool,
      .           }
      .           
      .           impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {
      .               fn tcx(&self) -> TyCtxt<'tcx> {
 80,912 ( 0.00%)          self.infcx.tcx
      .               }
      .               fn param_env(&self) -> ty::ParamEnv<'tcx> {
    163 ( 0.00%)          self.param_env
      .               }
      .           
      .               fn tag(&self) -> &'static str {
      .                   "Generalizer"
      .               }
      .           
      .               fn a_is_expected(&self) -> bool {
      .                   true
      .               }
      .           
 19,517 ( 0.00%)      fn binders<T>(
      .                   &mut self,
      .                   a: ty::Binder<'tcx, T>,
      .                   b: ty::Binder<'tcx, T>,
      .               ) -> RelateResult<'tcx, ty::Binder<'tcx, T>>
      .               where
      .                   T: Relate<'tcx>,
      .               {
 22,336 ( 0.00%)          Ok(a.rebind(self.relate(a.skip_binder(), b.skip_binder())?))
 19,619 ( 0.00%)      }
      .           
328,097 ( 0.02%)      fn relate_item_substs(
      .                   &mut self,
      .                   item_def_id: DefId,
      .                   a_subst: SubstsRef<'tcx>,
      .                   b_subst: SubstsRef<'tcx>,
      .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
 29,827 ( 0.00%)          if self.ambient_variance == ty::Variance::Invariant {
      .                       // Avoid fetching the variance if we are in an invariant
      .                       // context; no need, and it can induce dependency cycles
      .                       // (e.g., #41849).
 25,231 ( 0.00%)              relate::relate_substs(self, None, a_subst, b_subst)
      .                   } else {
      .                       let tcx = self.tcx();
      .                       let opt_variances = tcx.variances_of(item_def_id);
 22,980 ( 0.00%)              relate::relate_substs(self, Some((item_def_id, &opt_variances)), a_subst, b_subst)
      .                   }
268,443 ( 0.02%)      }
      .           
 19,494 ( 0.00%)      fn relate_with_variance<T: Relate<'tcx>>(
      .                   &mut self,
      .                   variance: ty::Variance,
      .                   _info: ty::VarianceDiagInfo<'tcx>,
      .                   a: T,
      .                   b: T,
      .               ) -> RelateResult<'tcx, T> {
    920 ( 0.00%)          let old_ambient_variance = self.ambient_variance;
150,555 ( 0.01%)          self.ambient_variance = self.ambient_variance.xform(variance);
      .           
      .                   let result = self.relate(a, b);
 29,160 ( 0.00%)          self.ambient_variance = old_ambient_variance;
      .                   result
 15,162 ( 0.00%)      }
      .           
382,824 ( 0.02%)      fn tys(&mut self, t: Ty<'tcx>, t2: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {
 42,536 ( 0.00%)          assert_eq!(t, t2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==
      .           
255,216 ( 0.02%)          if let Some(result) = self.cache.get(&t) {
  5,616 ( 0.00%)              return result.clone();
      .                   }
      .                   debug!("generalize: t={:?}", t);
      .           
      .                   // Check to see whether the type we are generalizing references
      .                   // any other type variable related to `vid` via
      .                   // subtyping. This is basically our "occurs check", preventing
      .                   // us from creating infinitely sized types.
126,914 ( 0.01%)          let result = match *t.kind() {
    583 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
    583 ( 0.00%)                  let vid = self.infcx.inner.borrow_mut().type_variables().root_var(vid);
    583 ( 0.00%)                  let sub_vid = self.infcx.inner.borrow_mut().type_variables().sub_root_var(vid);
    583 ( 0.00%)                  if sub_vid == self.for_vid_sub_root {
      .                               // If sub-roots are equal, then `for_vid` and
      .                               // `vid` are related via subtyping.
      5 ( 0.00%)                      Err(TypeError::CyclicTy(self.root_ty))
      .                           } else {
  3,492 ( 0.00%)                      let probe = self.infcx.inner.borrow_mut().type_variables().probe(vid);
  1,164 ( 0.00%)                      match probe {
      .                                   TypeVariableValue::Known { value: u } => {
      .                                       debug!("generalize: known value {:?}", u);
      .                                       self.relate(u, u)
      .                                   }
      .                                   TypeVariableValue::Unknown { universe } => {
  2,455 ( 0.00%)                              match self.ambient_variance {
      .                                           // Invariant: no need to make a fresh type variable.
      .                                           ty::Invariant => {
  1,420 ( 0.00%)                                      if self.for_universe.can_name(universe) {
  1,016 ( 0.00%)                                          return Ok(t);
      .                                               }
      .                                           }
      .           
      .                                           // Bivariant: make a fresh var, but we
      .                                           // may need a WF predicate. See
      .                                           // comment on `needs_wf` field for
      .                                           // more info.
      .                                           ty::Bivariant => self.needs_wf = true,
      .           
      .                                           // Co/contravariant: this will be
      .                                           // sufficiently constrained later on.
      .                                           ty::Covariant | ty::Contravariant => (),
      .                                       }
      .           
      .                                       let origin =
  2,133 ( 0.00%)                                  *self.infcx.inner.borrow_mut().type_variables().var_origin(vid);
  1,659 ( 0.00%)                              let new_var_id = self
      .                                           .infcx
      .                                           .inner
      .                                           .borrow_mut()
      .                                           .type_variables()
  1,659 ( 0.00%)                                  .new_var(self.for_universe, origin);
      .                                       let u = self.tcx().mk_ty_var(new_var_id);
      .           
      .                                       // Record that we replaced `vid` with `new_var_id` as part of a generalization
      .                                       // operation. This is needed to detect cyclic types. To see why, see the
      .                                       // docs in the `type_variables` module.
  1,185 ( 0.00%)                              self.infcx.inner.borrow_mut().type_variables().sub(vid, new_var_id);
      .                                       debug!("generalize: replacing original vid={:?} with new={:?}", vid, u);
    474 ( 0.00%)                              Ok(u)
      .                                   }
      .                               }
      .                           }
      .                       }
      .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_)) => {
      .                           // No matter what mode we are in,
      .                           // integer/floating-point types must be equal to be
      .                           // relatable.
      5 ( 0.00%)                  Ok(t)
      .                       }
121,632 ( 0.01%)              _ => relate::super_relate_tys(self, t, t),
      .                   };
      .           
408,780 ( 0.02%)          self.cache.insert(t, result.clone());
245,268 ( 0.01%)          return result;
382,824 ( 0.02%)      }
      .           
 47,608 ( 0.00%)      fn regions(
      .                   &mut self,
      .                   r: ty::Region<'tcx>,
      .                   r2: ty::Region<'tcx>,
      .               ) -> RelateResult<'tcx, ty::Region<'tcx>> {
  4,530 ( 0.00%)          assert_eq!(r, r2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==
      .           
      .                   debug!("generalize: regions r={:?}", r);
      .           
  9,060 ( 0.00%)          match *r {
      .                       // Never make variables for regions bound within the type itself,
      .                       // nor for erased regions.
      .                       ty::ReLateBound(..) | ty::ReErased => {
      .                           return Ok(r);
      .                       }
      .           
      .                       ty::RePlaceholder(..)
      .                       | ty::ReVar(..)
-- line 691 ----------------------------------------
-- line 697 ----------------------------------------
      .                       }
      .                   }
      .           
      .                   // If we are in an invariant context, we can re-use the region
      .                   // as is, unless it happens to be in some universe that we
      .                   // can't name. (In the case of a region *variable*, we could
      .                   // use it if we promoted it into our universe, but we don't
      .                   // bother.)
 10,530 ( 0.00%)          if let ty::Invariant = self.ambient_variance {
 12,186 ( 0.00%)              let r_universe = self.infcx.universe_of_region(r);
 28,424 ( 0.00%)              if self.for_universe.can_name(r_universe) {
      .                           return Ok(r);
      .                       }
      .                   }
      .           
      .                   // FIXME: This is non-ideal because we don't give a
      .                   // very descriptive origin for this region variable.
 12,120 ( 0.00%)          Ok(self.infcx.next_region_var_in_universe(MiscVariable(self.cause.span), self.for_universe))
 47,608 ( 0.00%)      }
      .           
  1,467 ( 0.00%)      fn consts(
      .                   &mut self,
      .                   c: &'tcx ty::Const<'tcx>,
      .                   c2: &'tcx ty::Const<'tcx>,
      .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
    489 ( 0.00%)          assert_eq!(c, c2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==
      .           
      .                   match c.val {
      .                       ty::ConstKind::Infer(InferConst::Var(vid)) => {
      .                           let mut inner = self.infcx.inner.borrow_mut();
      .                           let variable_table = &mut inner.const_unification_table();
      .                           let var_value = variable_table.probe_value(vid);
      .                           match var_value.val {
      .                               ConstVariableValue::Known { value: u } => {
-- line 730 ----------------------------------------
-- line 754 ----------------------------------------
      .                               substs,
      .                               substs,
      .                           )?;
      .                           Ok(self.tcx().mk_const(ty::Const {
      .                               ty: c.ty,
      .                               val: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),
      .                           }))
      .                       }
    815 ( 0.00%)              _ => relate::super_relate_consts(self, c, c),
      .                   }
  1,467 ( 0.00%)      }
      .           }
      .           
      .           pub trait ConstEquateRelation<'tcx>: TypeRelation<'tcx> {
      .               /// Register an obligation that both constants must be equal to each other.
      .               ///
      .               /// If they aren't equal then the relation doesn't hold.
      .               fn const_equate_obligation(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>);
      .           }
-- line 772 ----------------------------------------

255,236 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs
--------------------------------------------------------------------------------
Ir               

-- line 28 ----------------------------------------
      .               PushRegionObligation,
      .           }
      .           
      .           macro_rules! impl_from {
      .               ($($ctor: ident ($ty: ty),)*) => {
      .                   $(
      .                   impl<'tcx> From<$ty> for UndoLog<'tcx> {
      .                       fn from(x: $ty) -> Self {
  1,281 ( 0.00%)                  UndoLog::$ctor(x.into())
      .                       }
      .                   }
      .                   )*
      .               }
      .           }
      .           
      .           // Upcast from a single kind of "undoable action" to the general enum
      .           impl_from! {
-- line 44 ----------------------------------------
-- line 57 ----------------------------------------
      .               ConstUnificationTable(sv::UndoLog<ut::Delegate<ty::ConstVid<'tcx>>>),
      .           
      .               RegionUnificationTable(sv::UndoLog<ut::Delegate<RegionVidKey<'tcx>>>),
      .               ProjectionCache(traits::UndoLog<'tcx>),
      .           }
      .           
      .           /// The Rollback trait defines how to rollback a particular action.
      .           impl<'tcx> Rollback<UndoLog<'tcx>> for InferCtxtInner<'tcx> {
237,057 ( 0.01%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
395,095 ( 0.02%)          match undo {
617,210 ( 0.04%)              UndoLog::TypeVariables(undo) => self.type_variable_storage.reverse(undo),
      2 ( 0.00%)              UndoLog::ConstUnificationTable(undo) => self.const_unification_storage.reverse(undo),
      4 ( 0.00%)              UndoLog::IntUnificationTable(undo) => self.int_unification_storage.reverse(undo),
      .                       UndoLog::FloatUnificationTable(undo) => self.float_unification_storage.reverse(undo),
      .                       UndoLog::RegionConstraintCollector(undo) => {
 65,527 ( 0.00%)                  self.region_constraint_storage.as_mut().unwrap().reverse(undo)
      .                       }
      .                       UndoLog::RegionUnificationTable(undo) => {
 15,122 ( 0.00%)                  self.region_constraint_storage.as_mut().unwrap().unification_table.reverse(undo)
      .                       }
      .                       UndoLog::ProjectionCache(undo) => self.projection_cache.reverse(undo),
      .                       UndoLog::PushRegionObligation => {
      .                           self.region_obligations.pop();
      .                       }
      .                   }
316,076 ( 0.02%)      }
      .           }
      .           
      .           /// The combined undo log for all the various unification tables. For each change to the storage
      .           /// for any kind of inference variable, we record an UndoLog entry in the vector here.
      .           pub(crate) struct InferCtxtUndoLogs<'tcx> {
      .               logs: Vec<UndoLog<'tcx>>,
      .               num_open_snapshots: usize,
      .           }
      .           
      .           impl Default for InferCtxtUndoLogs<'_> {
      .               fn default() -> Self {
 18,842 ( 0.00%)          Self { logs: Default::default(), num_open_snapshots: Default::default() }
      .               }
      .           }
      .           
      .           /// The UndoLogs trait defines how we undo a particular kind of action (of type T). We can undo any
      .           /// action that is convertable into an UndoLog (per the From impls above).
      .           impl<'tcx, T> UndoLogs<T> for InferCtxtUndoLogs<'tcx>
      .           where
      .               UndoLog<'tcx>: From<T>,
-- line 102 ----------------------------------------
-- line 103 ----------------------------------------
      .           {
      .               #[inline]
      .               fn num_open_snapshots(&self) -> usize {
      .                   self.num_open_snapshots
      .               }
      .           
      .               #[inline]
      .               fn push(&mut self, undo: T) {
 57,414 ( 0.00%)          if self.in_snapshot() {
 10,248 ( 0.00%)              self.logs.push(undo.into())
      .                   }
      .               }
      .           
      .               fn clear(&mut self) {
      .                   self.logs.clear();
      .                   self.num_open_snapshots = 0;
      .               }
      .           
-- line 120 ----------------------------------------
-- line 125 ----------------------------------------
      .               {
      .                   if self.in_snapshot() {
      .                       self.logs.extend(undos.into_iter().map(UndoLog::from))
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> InferCtxtInner<'tcx> {
333,270 ( 0.02%)      pub fn rollback_to(&mut self, snapshot: Snapshot<'tcx>) {
      .                   debug!("rollback_to({})", snapshot.undo_len);
      .                   self.undo_log.assert_open_snapshot(&snapshot);
      .           
348,147 ( 0.02%)          while self.undo_log.logs.len() > snapshot.undo_len {
      .                       let undo = self.undo_log.logs.pop().unwrap();
948,228 ( 0.06%)              self.reverse(undo);
      .                   }
      .           
122,144 ( 0.01%)          if self.undo_log.num_open_snapshots == 1 {
      .                       // The root snapshot. It's safe to clear the undo log because
      .                       // there's no snapshot further out that we might need to roll back
      .                       // to.
 15,192 ( 0.00%)              assert!(snapshot.undo_len == 0);
      .                       self.undo_log.logs.clear();
      .                   }
      .           
174,231 ( 0.01%)          self.undo_log.num_open_snapshots -= 1;
388,815 ( 0.02%)      }
      .           
      .               pub fn commit(&mut self, snapshot: Snapshot<'tcx>) {
      .                   debug!("commit({})", snapshot.undo_len);
      .           
238,920 ( 0.01%)          if self.undo_log.num_open_snapshots == 1 {
      .                       // The root snapshot. It's safe to clear the undo log because
      .                       // there's no snapshot further out that we might need to roll back
      .                       // to.
 28,944 ( 0.00%)              assert!(snapshot.undo_len == 0);
      .                       self.undo_log.logs.clear();
      .                   }
      .           
253,392 ( 0.02%)          self.undo_log.num_open_snapshots -= 1;
      .               }
      .           }
      .           
      .           impl<'tcx> InferCtxtUndoLogs<'tcx> {
      .               pub fn start_snapshot(&mut self) -> Snapshot<'tcx> {
540,740 ( 0.03%)          self.num_open_snapshots += 1;
      .                   Snapshot { undo_len: self.logs.len(), _marker: PhantomData }
      .               }
      .           
      .               pub(crate) fn region_constraints_in_snapshot(
      .                   &self,
      .                   s: &Snapshot<'tcx>,
      .               ) -> impl Iterator<Item = &'_ region_constraints::UndoLog<'tcx>> + Clone {
 63,924 ( 0.00%)          self.logs[s.undo_len..].iter().filter_map(|log| match log {
      .                       UndoLog::RegionConstraintCollector(log) => Some(log),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               pub(crate) fn region_constraints(
      .                   &self,
      .               ) -> impl Iterator<Item = &'_ region_constraints::UndoLog<'tcx>> + Clone {
     17 ( 0.00%)          self.logs.iter().filter_map(|log| match log {
      .                       UndoLog::RegionConstraintCollector(log) => Some(log),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               fn assert_open_snapshot(&self, snapshot: &Snapshot<'tcx>) {
      .                   // Failures here may indicate a failure to follow a stack discipline.
166,635 ( 0.01%)          assert!(self.logs.len() >= snapshot.undo_len);
166,635 ( 0.01%)          assert!(self.num_open_snapshots > 0);
      .               }
      .           }
      .           
      .           impl<'tcx> std::ops::Index<usize> for InferCtxtUndoLogs<'tcx> {
      .               type Output = UndoLog<'tcx>;
      .           
      .               fn index(&self, key: usize) -> &Self::Output {
      .                   &self.logs[key]
-- line 204 ----------------------------------------

170,440 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 108 ----------------------------------------
        .                   suppress_errors: bool,
        .               },
        .           }
        .           
        .           impl RegionckMode {
        .               /// Indicates that the MIR borrowck will repeat these region
        .               /// checks, so we should ignore errors if NLL is (unconditionally)
        .               /// enabled.
      177 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
        .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
        .                   // this always `true` and then proceed to eliminate the dead code.
      177 ( 0.00%)          match tcx.borrowck_mode() {
        .                       // If we're on Migrate mode, report AST region errors
        .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
        .           
        .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
        .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
        .                   }
      354 ( 0.00%)      }
        .           }
        .           
        .           /// This type contains all the things within `InferCtxt` that sit within a
        .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
        .           /// operations are hot enough that we want only one call to `borrow_mut` per
        .           /// call to `start_snapshot` and `rollback_to`.
        .           pub struct InferCtxtInner<'tcx> {
        .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
        .               /// type instantiations (`ty::Infer`) to the actual opaque
        .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
        .               /// opaque type inference variables to their corresponding
        .               /// opaque type.
        .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
        .           }
        .           
        .           impl<'tcx> InferCtxtInner<'tcx> {
   47,105 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
  320,314 ( 0.02%)          InferCtxtInner {
        .                       projection_cache: Default::default(),
        .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
        .                       undo_log: InferCtxtUndoLogs::default(),
        .                       const_unification_storage: ut::UnificationTableStorage::new(),
        .                       int_unification_storage: ut::UnificationTableStorage::new(),
        .                       float_unification_storage: ut::UnificationTableStorage::new(),
   28,263 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
        .                       region_obligations: vec![],
        .                       opaque_types: Default::default(),
        .                       opaque_types_vars: Default::default(),
        .                   }
   56,526 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
        .                   &self.region_obligations
        .               }
        .           
        .               #[inline]
        .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
    3,275 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
  281,714 ( 0.02%)          self.type_variable_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn int_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::IntVid,
        .                       &mut ut::UnificationStorage<ty::IntVid>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
      169 ( 0.00%)          self.int_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn float_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::FloatVid,
-- line 258 ----------------------------------------
-- line 268 ----------------------------------------
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::ConstVid<'tcx>,
        .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
      849 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
   82,928 ( 0.00%)          self.region_constraint_storage
        .                       .as_mut()
        .                       .expect("region constraints already solved")
  102,578 ( 0.01%)              .with_log(&mut self.undo_log)
        .               }
        .           }
        .           
        .           pub struct InferCtxt<'a, 'tcx> {
        .               pub tcx: TyCtxt<'tcx>,
        .           
        .               /// The `DefId` of the item in whose context we are performing inference or typeck.
        .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
        .               /// item we are type-checking, and just consider those names as
        .               /// part of the root universe. So this would only get incremented
        .               /// when we enter into a higher-ranked (`for<..>`) type or trait
        .               /// bound.
        .               universe: Cell<ty::UniverseIndex>,
        .           }
        .           
        .           /// See the `error_reporting` module for more details.
   83,168 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
        .           pub enum ValuePairs<'tcx> {
        .               Types(ExpectedFound<Ty<'tcx>>),
        .               Regions(ExpectedFound<ty::Region<'tcx>>),
        .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
        .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
        .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
        .           }
        .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
        .           pub struct TypeTrace<'tcx> {
        .               cause: ObligationCause<'tcx>,
        .               values: ValuePairs<'tcx>,
        .           }
        .           
        .           /// The origin of a `r1 <= r2` constraint.
        .           ///
        .           /// See `error_reporting` module for more details
   70,904 ( 0.00%)  #[derive(Clone, Debug)]
        .           pub enum SubregionOrigin<'tcx> {
        .               /// Arose from a subtyping relation
    4,103 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
        .           
        .               /// When casting `&'a T` to an `&'b Trait` object,
        .               /// relating `'a` to `'b`
        .               RelateObjectBound(Span),
        .           
        .               /// Some type parameter was instantiated with the given type,
        .               /// and that type must outlive some region.
      580 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
        .           
        .               /// The given region parameter was instantiated with a region
        .               /// that must outlive some other region.
        .               RelateRegionParamBound(Span),
        .           
        .               /// Creating a pointer `b` to contents of another reference
        .               Reborrow(Span),
        .           
        .               /// Creating a pointer `b` to contents of an upvar
        .               ReborrowUpvar(Span, ty::UpvarId),
        .           
        .               /// Data with type `Ty<'tcx>` was borrowed
      508 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
        .           
        .               /// (&'a &'b T) where a >= b
      415 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
        .           
        .               /// Comparing the signature and requirements of an impl method against
        .               /// the containing trait.
        2 ( 0.00%)      CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
        .           
        .               /// Comparing the signature and requirements of an impl associated type
        .               /// against the containing trait
        .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
        .           }
        .           
        .           // `SubregionOrigin` is used a lot. Make sure it doesn't unintentionally get bigger.
        .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
-- line 430 ----------------------------------------
-- line 554 ----------------------------------------
        .               defining_use_anchor: Option<LocalDefId>,
        .           }
        .           
        .           pub trait TyCtxtInferExt<'tcx> {
        .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
        .           }
        .           
        .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
    9,421 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
   28,263 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
    9,421 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> InferCtxtBuilder<'tcx> {
        .               /// Used only by `rustc_typeck` during body type-checking/inference,
        .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
        .               /// Will also change the scope for opaque type defining use checks to the given owner.
    4,212 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
    5,148 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
    2,340 ( 0.00%)          self.with_opaque_type_inference(table_owner)
    3,276 ( 0.00%)      }
        .           
        .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
        .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
        .               ///
        .               /// It is only meant to be called in two places, for typeck
        .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
        .               /// in mir borrowck.
      470 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
      235 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
    1,406 ( 0.00%)          self
      705 ( 0.00%)      }
        .           
        .               /// Given a canonical value `C` as a starting point, create an
        .               /// inference context that contains each of the bound values
        .               /// within instantiated as a fresh variable. The `f` closure is
        .               /// invoked with the new infcx, along with the instantiated value
        .               /// `V` and a substitution `S`. This substitution `S` maps from
        .               /// the bound values in `C` to their instantiated values in `V`
        .               /// (in other words, `S(C) = V`).
   28,140 ( 0.00%)      pub fn enter_with_canonical<T, R>(
        .                   &mut self,
        .                   span: Span,
        .                   canonical: &Canonical<'tcx, T>,
        .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
        .               ) -> R
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   self.enter(|infcx| {
   35,850 ( 0.00%)              let (value, subst) =
    1,921 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
   53,501 ( 0.00%)              f(infcx, value, subst)
        .                   })
   30,560 ( 0.00%)      }
        .           
   33,354 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
   27,128 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
        .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
  384,488 ( 0.02%)          f(InferCtxt {
        .                       tcx,
        .                       defining_use_anchor,
        .                       in_progress_typeck_results,
    9,421 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
        .                       lexical_region_resolutions: RefCell::new(None),
        .                       selection_cache: Default::default(),
        .                       evaluation_cache: Default::default(),
        .                       reported_trait_errors: Default::default(),
        .                       reported_closure_mismatch: Default::default(),
        .                       tainted_by_errors_flag: Cell::new(false),
    9,421 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
        .                       in_snapshot: Cell::new(false),
        .                       skip_leak_check: Cell::new(false),
        .                       universe: Cell::new(ty::UniverseIndex::ROOT),
        .                   })
   36,258 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx, T> InferOk<'tcx, T> {
        .               pub fn unit(self) -> InferOk<'tcx, ()> {
        .                   InferOk { value: (), obligations: self.obligations }
        .               }
        .           
        .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
        .               pub fn into_value_registering_obligations(
        .                   self,
        .                   infcx: &InferCtxt<'_, 'tcx>,
        .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
        .               ) -> T {
      787 ( 0.00%)          let InferOk { value, obligations } = self;
    3,090 ( 0.00%)          for obligation in obligations {
      130 ( 0.00%)              fulfill_cx.register_predicate_obligation(infcx, obligation);
        .                   }
        .                   value
        .               }
        .           }
        .           
        .           impl<'tcx> InferOk<'tcx, ()> {
    7,881 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
   31,524 ( 0.00%)          self.obligations
    7,881 ( 0.00%)      }
        .           }
        .           
        .           #[must_use = "once you start a snapshot, you should always consume it"]
        .           pub struct CombinedSnapshot<'a, 'tcx> {
        .               undo_snapshot: Snapshot<'tcx>,
        .               region_constraints_snapshot: RegionSnapshot,
        .               universe: ty::UniverseIndex,
        .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
        .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
        .                   debug!("canonical consts: {:?}", &canonical.value);
        .           
        .                   self.tcx.try_unify_abstract_consts(canonical.value)
        .               }
        .           
        .               pub fn is_in_snapshot(&self) -> bool {
        .                   self.in_snapshot.get()
   11,937 ( 0.00%)      }
        .           
  221,856 ( 0.01%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
  249,588 ( 0.01%)          t.fold_with(&mut self.freshener())
  249,588 ( 0.01%)      }
        .           
        .               /// Returns the origin of the type variable identified by `vid`, or `None`
        .               /// if this is not a type variable.
        .               ///
        .               /// No attempt is made to resolve `ty`.
      282 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
      564 ( 0.00%)          match *ty.kind() {
      141 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
      564 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
        .                       }
        .                       _ => None,
        .                   }
      564 ( 0.00%)      }
        .           
   27,732 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
        .                   freshen::TypeFreshener::new(self, false)
   27,732 ( 0.00%)      }
        .           
        .               /// Like `freshener`, but does not replace `'static` regions.
   40,500 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
        .                   freshen::TypeFreshener::new(self, true)
   40,500 ( 0.00%)      }
        .           
      856 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
      428 ( 0.00%)          let mut inner = self.inner.borrow_mut();
      428 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
        .                       .type_variables()
        .                       .unsolved_variables()
        .                       .into_iter()
      282 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
        .                       .collect();
        .                   vars.extend(
        .                       (0..inner.int_unification_table().len())
        .                           .map(|i| ty::IntVid { index: i as u32 })
       18 ( 0.00%)                  .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
        .                           .map(|v| self.tcx.mk_int_var(v)),
        .                   );
        .                   vars.extend(
        .                       (0..inner.float_unification_table().len())
        .                           .map(|i| ty::FloatVid { index: i as u32 })
        .                           .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
        .                           .map(|v| self.tcx.mk_float_var(v)),
        .                   );
        .                   vars
    1,498 ( 0.00%)      }
        .           
   28,457 ( 0.00%)      fn combine_fields(
        .                   &'a self,
        .                   trace: TypeTrace<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .               ) -> CombineFields<'a, 'tcx> {
  113,996 ( 0.01%)          CombineFields {
        .                       infcx: self,
  284,990 ( 0.02%)              trace,
        .                       cause: None,
        .                       param_env,
        .                       obligations: PredicateObligations::new(),
        .                   }
   28,457 ( 0.00%)      }
        .           
        .               /// Clear the "currently in a snapshot" flag, invoke the closure,
        .               /// then restore the flag to its original value. This flag is a
        .               /// debugging measure designed to detect cases where we start a
        .               /// snapshot, create type variables, and register obligations
        .               /// which may involve those type variables in the fulfillment cx,
        .               /// potentially leaving "dangling type variables" behind.
        .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 755 ----------------------------------------
        .               /// better than grovelling through megabytes of `RUSTC_LOG` output.
        .               ///
        .               /// HOWEVER, in some cases the flag is unhelpful. In particular, we
        .               /// sometimes create a "mini-fulfilment-cx" in which we enroll
        .               /// obligations. As long as this fulfillment cx is fully drained
        .               /// before we return, this is not a problem, as there won't be any
        .               /// escaping obligations in the main cx. In those cases, you can
        .               /// use this function.
       72 ( 0.00%)      pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
        .               where
        .                   F: FnOnce(&Self) -> R,
        .               {
        .                   let flag = self.in_snapshot.replace(false);
    5,097 ( 0.00%)          let result = func(self);
        .                   self.in_snapshot.set(flag);
        .                   result
       81 ( 0.00%)      }
        .           
  270,370 ( 0.02%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
        .                   debug!("start_snapshot()");
        .           
        .                   let in_snapshot = self.in_snapshot.replace(true);
        .           
        .                   let mut inner = self.inner.borrow_mut();
        .           
  811,110 ( 0.05%)          CombinedSnapshot {
        .                       undo_snapshot: inner.undo_log.start_snapshot(),
        .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
        .                       universe: self.universe(),
        .                       was_in_snapshot: in_snapshot,
        .                       // Borrow typeck results "in progress" (i.e., during typeck)
        .                       // to ban writes from within a snapshot to them.
  135,185 ( 0.01%)              _in_progress_typeck_results: self
        .                           .in_progress_typeck_results
        .                           .map(|typeck_results| typeck_results.borrow()),
        .                   }
  540,740 ( 0.03%)      }
        .           
  610,995 ( 0.04%)      #[instrument(skip(self, snapshot), level = "debug")]
        .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
        .                   let CombinedSnapshot {
   55,545 ( 0.00%)              undo_snapshot,
   55,545 ( 0.00%)              region_constraints_snapshot,
   55,545 ( 0.00%)              universe,
   55,545 ( 0.00%)              was_in_snapshot,
  111,090 ( 0.01%)              _in_progress_typeck_results,
        .                   } = snapshot;
        .           
        .                   self.in_snapshot.set(was_in_snapshot);
        .                   self.universe.set(universe);
        .           
        .                   let mut inner = self.inner.borrow_mut();
   55,545 ( 0.00%)          inner.rollback_to(undo_snapshot);
        .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
        .               }
        .           
1,194,600 ( 0.07%)      #[instrument(skip(self, snapshot), level = "debug")]
        .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
        .                   let CombinedSnapshot {
   79,640 ( 0.00%)              undo_snapshot,
        .                       region_constraints_snapshot: _,
        .                       universe: _,
   79,640 ( 0.00%)              was_in_snapshot,
  159,280 ( 0.01%)              _in_progress_typeck_results,
        .                   } = snapshot;
        .           
        .                   self.in_snapshot.set(was_in_snapshot);
        .           
        .                   self.inner.borrow_mut().commit(undo_snapshot);
        .               }
        .           
        .               /// Executes `f` and commit the bindings.
  320,630 ( 0.02%)      #[instrument(skip(self, f), level = "debug")]
  416,141 ( 0.02%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
   37,831 ( 0.00%)          let snapshot = self.start_snapshot();
  234,825 ( 0.01%)          let r = f(&snapshot);
  264,817 ( 0.02%)          self.commit_from(snapshot);
  187,275 ( 0.01%)          r
        .               }
        .           
        .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
  318,362 ( 0.02%)      #[instrument(skip(self, f), level = "debug")]
  391,142 ( 0.02%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
        .               {
   51,287 ( 0.00%)          let snapshot = self.start_snapshot();
  179,834 ( 0.01%)          let r = f(&snapshot);
        .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
   46,156 ( 0.00%)          match r {
        .                       Ok(_) => {
  302,056 ( 0.02%)                  self.commit_from(snapshot);
        .                       }
        .                       Err(_) => {
   54,727 ( 0.00%)                  self.rollback_to("commit_if_ok -- error", snapshot);
        .                       }
        .                   }
  277,806 ( 0.02%)          r
        .               }
        .           
        .               /// Execute `f` then unroll any bindings it creates.
  377,068 ( 0.02%)      #[instrument(skip(self, f), level = "debug")]
  430,200 ( 0.03%)      pub fn probe<R, F>(&self, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
   99,952 ( 0.01%)          let snapshot = self.start_snapshot();
  165,907 ( 0.01%)          let r = f(&snapshot);
  452,021 ( 0.03%)          self.rollback_to("probe", snapshot);
   18,833 ( 0.00%)          r
        .               }
        .           
        .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
      117 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
      156 ( 0.00%)      pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
       26 ( 0.00%)          let snapshot = self.start_snapshot();
       13 ( 0.00%)          let was_skip_leak_check = self.skip_leak_check.get();
       26 ( 0.00%)          if should_skip {
        .                       self.skip_leak_check.set(true);
        .                   }
       52 ( 0.00%)          let r = f(&snapshot);
      117 ( 0.00%)          self.rollback_to("probe", snapshot);
        .                   self.skip_leak_check.set(was_skip_leak_check);
      156 ( 0.00%)          r
        .               }
        .           
        .               /// Scan the constraints produced since `snapshot` began and returns:
        .               ///
        .               /// - `None` -- if none of them involve "region outlives" constraints
        .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
        .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
   43,652 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
        .                   &self,
        .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
        .               ) -> Option<bool> {
   87,304 ( 0.01%)          self.inner
        .                       .borrow_mut()
        .                       .unwrap_region_constraints()
        .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
   65,478 ( 0.00%)      }
        .           
        .               pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
        .                   self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
        .               }
        .           
      492 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
        .               where
        .                   T: at::ToTrace<'tcx>,
        .               {
        .                   let origin = &ObligationCause::dummy();
        .                   self.probe(|_| {
        .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
        .                           // Ignore obligations, since we are unrolling
        .                           // everything anyway.
        .                       })
        .                   })
      369 ( 0.00%)      }
        .           
    2,184 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
        .               where
        .                   T: at::ToTrace<'tcx>,
        .               {
        .                   let origin = &ObligationCause::dummy();
        .                   self.probe(|_| {
        .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
        .                           // Ignore obligations, since we are unrolling
        .                           // everything anyway.
        .                       })
        .                   })
    1,638 ( 0.00%)      }
        .           
   19,800 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        .               pub fn sub_regions(
        .                   &self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   a: ty::Region<'tcx>,
        .                   b: ty::Region<'tcx>,
        .               ) {
   17,820 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
        .               }
        .           
        .               /// Require that the region `r` be equal to one of the regions in
        .               /// the set `regions`.
       35 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        .               pub fn member_constraint(
        .                   &self,
        .                   opaque_type_def_id: DefId,
        .                   definition_span: Span,
        .                   hidden_ty: Ty<'tcx>,
        .                   region: ty::Region<'tcx>,
        .                   in_regions: &Lrc<Vec<ty::Region<'tcx>>>,
        .               ) {
       35 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().member_constraint(
        .                       opaque_type_def_id,
        .                       definition_span,
        .                       hidden_ty,
        .                       region,
        .                       in_regions,
        .                   );
        .               }
        .           
-- line 961 ----------------------------------------
-- line 969 ----------------------------------------
        .               /// to `subtype_predicate` -- that is, "coercing" `a` to `b` winds up
        .               /// actually requiring `a <: b`. This is of course a valid coercion,
        .               /// but it's not as flexible as `FnCtxt::coerce` would be.
        .               ///
        .               /// (We may refactor this in the future, but there are a number of
        .               /// practical obstacles. Among other things, `FnCtxt::coerce` presently
        .               /// records adjustments that are required on the HIR in order to perform
        .               /// the coercion, and we don't currently have a way to manage that.)
       36 ( 0.00%)      pub fn coerce_predicate(
        .                   &self,
        .                   cause: &ObligationCause<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   predicate: ty::PolyCoercePredicate<'tcx>,
        .               ) -> Option<InferResult<'tcx, ()>> {
       24 ( 0.00%)          let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
        .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
        .                       a: p.a,
        .                       b: p.b,
        .                   });
       60 ( 0.00%)          self.subtype_predicate(cause, param_env, subtype_predicate)
       48 ( 0.00%)      }
        .           
    2,544 ( 0.00%)      pub fn subtype_predicate(
        .                   &self,
        .                   cause: &ObligationCause<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   predicate: ty::PolySubtypePredicate<'tcx>,
        .               ) -> Option<InferResult<'tcx, ()>> {
        .                   // Check for two unresolved inference variables, in which case we can
        .                   // make no progress. This is partly a micro-optimization, but it's
        .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
        .                   // earlier that they are sub-unified).
        .                   //
        .                   // Note that we can just skip the binders here because
        .                   // type variables can't (at present, at
        .                   // least) capture any of the things bound by this binder.
        .                   //
        .                   // Note that this sub here is not just for diagnostics - it has semantic
        .                   // effects as well.
      212 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
      212 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
    1,576 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
      366 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
        .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
      366 ( 0.00%)                  return None;
        .                       }
        .                       _ => {}
        .                   }
        .           
        .                   Some(self.commit_if_ok(|_snapshot| {
       29 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
        .                           self.replace_bound_vars_with_placeholders(predicate);
        .           
       58 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
        .           
        .                       Ok(ok.unit())
        .                   }))
    1,908 ( 0.00%)      }
        .           
    6,552 ( 0.00%)      pub fn region_outlives_predicate(
        .                   &self,
        .                   cause: &traits::ObligationCause<'tcx>,
        .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
        .               ) -> UnitResult<'tcx> {
        .                   self.commit_if_ok(|_snapshot| {
        .                       let ty::OutlivesPredicate(r_a, r_b) =
        .                           self.replace_bound_vars_with_placeholders(predicate);
        .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
        .                           RelateRegionParamBound(cause.span)
        .                       });
    5,460 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
        .                       Ok(())
        .                   })
    4,368 ( 0.00%)      }
        .           
        .               /// Number of type variables created so far.
       37 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
        .                   self.inner.borrow_mut().type_variables().num_vars()
       74 ( 0.00%)      }
        .           
    6,984 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
   34,920 ( 0.00%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
   10,476 ( 0.00%)      }
        .           
    6,246 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
   24,075 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
    9,369 ( 0.00%)      }
        .           
    1,314 ( 0.00%)      pub fn next_ty_var_in_universe(
        .                   &self,
        .                   origin: TypeVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> Ty<'tcx> {
    7,227 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
      657 ( 0.00%)          self.tcx.mk_ty_var(vid)
    1,971 ( 0.00%)      }
        .           
        .               pub fn next_const_var(
        .                   &self,
        .                   ty: Ty<'tcx>,
        .                   origin: ConstVariableOrigin,
        .               ) -> &'tcx ty::Const<'tcx> {
        .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
        .               }
-- line 1074 ----------------------------------------
-- line 1090 ----------------------------------------
        .               pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {
        .                   self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
        .                       origin,
        .                       val: ConstVariableValue::Unknown { universe: self.universe() },
        .                   })
        .               }
        .           
        .               fn next_int_var_id(&self) -> IntVid {
       25 ( 0.00%)          self.inner.borrow_mut().int_unification_table().new_key(None)
        .               }
        .           
       15 ( 0.00%)      pub fn next_int_var(&self) -> Ty<'tcx> {
        .                   self.tcx.mk_int_var(self.next_int_var_id())
       20 ( 0.00%)      }
        .           
        .               fn next_float_var_id(&self) -> FloatVid {
        .                   self.inner.borrow_mut().float_unification_table().new_key(None)
        .               }
        .           
        .               pub fn next_float_var(&self) -> Ty<'tcx> {
        .                   self.tcx.mk_float_var(self.next_float_var_id())
        .               }
        .           
        .               /// Creates a fresh region variable with the next available index.
        .               /// The variable will be created in the maximum universe created
        .               /// thus far, allowing it to name any region created thus far.
    2,943 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
   83,017 ( 0.00%)          self.next_region_var_in_universe(origin, self.universe())
    5,886 ( 0.00%)      }
        .           
        .               /// Creates a fresh region variable with the next available index
        .               /// in the given universe; typically, you can use
        .               /// `next_region_var` and just use the maximal universe.
   46,268 ( 0.00%)      pub fn next_region_var_in_universe(
        .                   &self,
        .                   origin: RegionVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> ty::Region<'tcx> {
        .                   let region_var =
  300,742 ( 0.02%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
  115,670 ( 0.01%)          self.tcx.mk_region(ty::ReVar(region_var))
   69,402 ( 0.00%)      }
        .           
        .               /// Return the universe that the region `r` was created in.  For
        .               /// most regions (e.g., `'static`, named regions from the user,
        .               /// etc) this is the root universe U0. For inference variables or
        .               /// placeholders, however, it will return the universe which which
        .               /// they are associated.
    8,124 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
        .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
   12,186 ( 0.00%)      }
        .           
        .               /// Number of region variables created so far.
    1,946 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
        .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
    2,919 ( 0.00%)      }
        .           
        .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
    7,141 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
        .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
   14,282 ( 0.00%)      }
        .           
        .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
      345 ( 0.00%)      pub fn next_nll_region_var_in_universe(
        .                   &self,
        .                   origin: NllRegionVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> ty::Region<'tcx> {
    2,807 ( 0.00%)          self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
      690 ( 0.00%)      }
        .           
  131,152 ( 0.01%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
   75,732 ( 0.00%)          match param.kind {
        .                       GenericParamDefKind::Lifetime => {
        .                           // Create a region inference variable for the given
        .                           // region parameter definition.
    3,119 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
        .                       }
        .                       GenericParamDefKind::Type { .. } => {
        .                           // Create a type inference variable for the given
        .                           // type parameter definition. The substitutions are
        .                           // for actual parameters that may be referred to by
        .                           // the default of this type parameter, if it exists.
        .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
        .                           // used in a path such as `Foo::<T, U>::new()` will
        .                           // use an inference variable for `C` with `[T, U]`
        .                           // as the substitutions for the default, `(T, U)`.
   53,096 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
        .                               self.universe(),
   66,370 ( 0.00%)                      TypeVariableOrigin {
        .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
   13,274 ( 0.00%)                              param.name,
   13,274 ( 0.00%)                              Some(param.def_id),
        .                                   ),
        .                                   span,
        .                               },
        .                           );
        .           
   13,274 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
        .                       }
        .                       GenericParamDefKind::Const { .. } => {
        .                           let origin = ConstVariableOrigin {
        .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
        .                                   param.name,
        .                                   param.def_id,
        .                               ),
        .                               span,
        .                           };
        .                           let const_var_id =
       11 ( 0.00%)                      self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
        .                                   origin,
        .                                   val: ConstVariableValue::Unknown { universe: self.universe() },
        .                               });
        1 ( 0.00%)                  self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
        .                       }
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
        .               /// type/region parameter to a fresh inference variable.
   35,955 ( 0.00%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
  147,715 ( 0.01%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
   23,970 ( 0.00%)      }
        .           
        .               /// Returns `true` if errors have been reported since this infcx was
        .               /// created. This is sometimes used as a heuristic to skip
        .               /// reporting errors that often occur as a result of earlier
        .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
        .               /// inference variables, regionck errors).
      656 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
        .                   debug!(
        .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
        .                        tainted_by_errors_flag={})",
        .                       self.tcx.sess.err_count(),
        .                       self.err_count_on_creation,
        .                       self.tainted_by_errors_flag.get()
        .                   );
        .           
   15,562 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
        .                       return true; // errors reported since this infcx was made
        .                   }
        .                   self.tainted_by_errors_flag.get()
      984 ( 0.00%)      }
        .           
        .               /// Set the "tainted by errors" flag to true. We call this when we
        .               /// observe an error from a prior pass.
        .               pub fn set_tainted_by_errors(&self) {
        .                   debug!("set_tainted_by_errors()");
        .                   self.tainted_by_errors_flag.set(true)
        .               }
        .           
        .               /// Process the region constraints and return any any errors that
        .               /// result. After this, no more unification operations should be
        .               /// done -- or the compiler will panic -- but it is legal to use
        .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
   15,477 ( 0.00%)      pub fn resolve_regions(
        .                   &self,
        .                   region_context: DefId,
        .                   outlives_env: &OutlivesEnvironment<'tcx>,
        .                   mode: RegionckMode,
        .               ) -> Vec<RegionResolutionError<'tcx>> {
   42,009 ( 0.00%)          let (var_infos, data) = {
        .                       let mut inner = self.inner.borrow_mut();
        .                       let inner = &mut *inner;
    2,211 ( 0.00%)              assert!(
    6,633 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
        .                           "region_obligations not empty: {:#?}",
        .                           inner.region_obligations
        .                       );
        .                       inner
        .                           .region_constraint_storage
        .                           .take()
        .                           .expect("regions already resolved")
        .                           .with_log(&mut inner.undo_log)
        .                           .into_infos_and_data()
    2,211 ( 0.00%)          };
        .           
        .                   let region_rels =
    2,211 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
        .           
   19,899 ( 0.00%)          let (lexical_region_resolutions, errors) =
   53,064 ( 0.00%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
        .           
    8,844 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
    2,211 ( 0.00%)          assert!(old_value.is_none());
        .           
        .                   errors
   19,899 ( 0.00%)      }
        .           
        .               /// Process the region constraints and report any errors that
        .               /// result. After this, no more unification operations should be
        .               /// done -- or the compiler will panic -- but it is legal to use
        .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
   22,110 ( 0.00%)      pub fn resolve_regions_and_report_errors(
        .                   &self,
        .                   region_context: DefId,
        .                   outlives_env: &OutlivesEnvironment<'tcx>,
        .                   mode: RegionckMode,
        .               ) {
    4,422 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
        .           
    6,633 ( 0.00%)          if !self.is_tainted_by_errors() {
        .                       // As a heuristic, just skip reporting region errors
        .                       // altogether if other errors have been reported while
        .                       // this infcx was in use.  This is totally hokey but
        .                       // otherwise we have a hard time separating legit region
        .                       // errors from silly ones.
    4,422 ( 0.00%)              self.report_region_errors(&errors);
        .                   }
   11,055 ( 0.00%)      }
        .           
        .               /// Obtains (and clears) the current set of region
        .               /// constraints. The inference context is still usable: further
        .               /// unifications will simply add new constraints.
        .               ///
        .               /// This method is not meant to be used with normal lexical region
        .               /// resolution. Rather, it is used in the NLL mode as a kind of
        .               /// interim hack: basically we run normal type-check and generate
        .               /// region constraints as normal, but then we take them and
        .               /// translate them into the form that the NLL solver
        .               /// understands. See the NLL module for mode details.
       30 ( 0.00%)      pub fn take_and_reset_region_constraints(&self) -> RegionConstraintData<'tcx> {
       10 ( 0.00%)          assert!(
        .                       self.inner.borrow().region_obligations.is_empty(),
        .                       "region_obligations not empty: {:#?}",
        .                       self.inner.borrow().region_obligations
        .                   );
        .           
       40 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().take_and_reset_data()
       50 ( 0.00%)      }
        .           
        .               /// Gives temporary access to the region constraint data.
        .               pub fn with_region_constraints<R>(
        .                   &self,
        .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
        .               ) -> R {
        .                   let mut inner = self.inner.borrow_mut();
   10,820 ( 0.00%)          op(inner.unwrap_region_constraints().data())
        .               }
        .           
        .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
        .                   let mut inner = self.inner.borrow_mut();
        .                   let inner = &mut *inner;
        .                   inner
        .                       .region_constraint_storage
        .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
        .                       .var_origin(vid)
        .               }
        .           
        .               /// Takes ownership of the list of variable regions. This implies
        .               /// that all the region constraints have already been taken, and
        .               /// hence that `resolve_regions_and_report_errors` can never be
        .               /// called. This is used only during NLL processing to "hand off" ownership
        .               /// of the set of region variables into the NLL region context.
    1,150 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
        .                   let mut inner = self.inner.borrow_mut();
    4,370 ( 0.00%)          let (var_infos, data) = inner
        .                       .region_constraint_storage
        .                       .take()
        .                       .expect("regions already resolved")
        .                       .with_log(&mut inner.undo_log)
      230 ( 0.00%)              .into_infos_and_data();
      230 ( 0.00%)          assert!(data.is_empty());
        .                   var_infos
    1,840 ( 0.00%)      }
        .           
        .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
        .                   self.resolve_vars_if_possible(t).to_string()
        .               }
        .           
        .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
        .               /// universe index of `TyVar(vid)`.
    4,986 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
        .                   use self::type_variable::TypeVariableValue;
        .           
   14,958 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
        .                       TypeVariableValue::Known { value } => Ok(value),
        .                       TypeVariableValue::Unknown { universe } => Err(universe),
        .                   }
   17,451 ( 0.00%)      }
        .           
        .               /// Resolve any type variables found in `value` -- but only one
        .               /// level.  So, if the variable `?X` is bound to some type
        .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
        .               /// itself be bound to a type).
        .               ///
        .               /// Useful when you only need to inspect the outermost level of
        .               /// the type and don't care about nested types (or perhaps you
        .               /// will be resolving them as well, e.g. in a loop).
        .               pub fn shallow_resolve<T>(&self, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  109,933 ( 0.01%)          value.fold_with(&mut ShallowResolver { infcx: self })
        .               }
        .           
    7,812 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
        .                   self.inner.borrow_mut().type_variables().root_var(var)
   11,718 ( 0.00%)      }
        .           
        .               /// Where possible, replaces type/const variables in
        .               /// `value` with their final value. Note that region variables
        .               /// are unaffected. If a type/const variable has not been unified, it
        .               /// is left as is. This is an idempotent operation that does
        .               /// not affect inference state in any way and so you can do it
        .               /// at will.
      476 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  142,802 ( 0.01%)          if !value.needs_infer() {
  144,476 ( 0.01%)              return value; // Avoid duplicated subst-folding.
        .                   }
  115,517 ( 0.01%)          let mut r = resolve::OpportunisticVarResolver::new(self);
  112,083 ( 0.01%)          value.fold_with(&mut r)
      497 ( 0.00%)      }
        .           
        .               /// Returns the first unresolved variable contained in `T`. In the
        .               /// process of visiting `T`, this will resolve (where possible)
        .               /// type variables in `T`, but it never constructs the final,
        .               /// resolved type, so it's more efficient than
        .               /// `resolve_vars_if_possible()`.
        .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
    7,656 ( 0.00%)          value.visit_with(&mut resolve::UnresolvedTypeFinder::new(self)).break_value()
        .               }
        .           
        .               pub fn probe_const_var(
        .                   &self,
        .                   vid: ty::ConstVid<'tcx>,
        .               ) -> Result<&'tcx ty::Const<'tcx>, ty::UniverseIndex> {
        .                   match self.inner.borrow_mut().const_unification_table().probe_value(vid).val {
        .                       ConstVariableValue::Known { value } => Ok(value),
-- line 1426 ----------------------------------------
-- line 1490 ----------------------------------------
        .                   expected: &'tcx ty::Const<'tcx>,
        .                   actual: &'tcx ty::Const<'tcx>,
        .                   err: TypeError<'tcx>,
        .               ) -> DiagnosticBuilder<'tcx> {
        .                   let trace = TypeTrace::consts(cause, true, expected, actual);
        .                   self.report_and_explain_type_error(trace, &err)
        .               }
        .           
    6,876 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
        .                   &self,
        .                   span: Span,
        .                   lbrct: LateBoundRegionConversionTime,
        .                   value: ty::Binder<'tcx, T>,
        .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   let fld_r =
   29,113 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
        .                   let fld_t = |_| {
        .                       self.next_ty_var(TypeVariableOrigin {
        .                           kind: TypeVariableOriginKind::MiscVariable,
        .                           span,
        .                       })
        .                   };
        .                   let fld_c = |_, ty| {
        .                       self.next_const_var(
        .                           ty,
        .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
        .                       )
        .                   };
  102,941 ( 0.01%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
    4,584 ( 0.00%)      }
        .           
        .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
    1,712 ( 0.00%)      pub fn verify_generic_bound(
        .                   &self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   kind: GenericKind<'tcx>,
        .                   a: ty::Region<'tcx>,
        .                   bound: VerifyBound<'tcx>,
        .               ) {
        .                   debug!("verify_generic_bound({:?}, {:?} <: {:?})", kind, a, bound);
        .           
      642 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .unwrap_region_constraints()
    3,638 ( 0.00%)              .verify_generic_bound(origin, kind, a, bound);
    1,498 ( 0.00%)      }
        .           
        .               /// Obtains the latest type of the given closure; this may be a
        .               /// closure in the current function, in which case its
        .               /// `ClosureKind` may not yet be known.
      596 ( 0.00%)      pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
    1,192 ( 0.00%)          let closure_kind_ty = closure_substs.as_closure().kind_ty();
        .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
      894 ( 0.00%)          closure_kind_ty.to_opt_closure_kind()
        .               }
        .           
        .               /// Clears the selection, evaluation, and projection caches. This is useful when
        .               /// repeatedly attempting to select an `Obligation` while changing only
        .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
        .               pub fn clear_caches(&self) {
        .                   self.selection_cache.clear();
        .                   self.evaluation_cache.clear();
        .                   self.inner.borrow_mut().projection_cache().clear();
        .               }
        .           
        .               pub fn universe(&self) -> ty::UniverseIndex {
  285,912 ( 0.02%)          self.universe.get()
   84,143 ( 0.01%)      }
        .           
        .               /// Creates and return a fresh universe that extends all previous
        .               /// universes. Updates `self.universe` to that new universe.
    1,258 ( 0.00%)      pub fn create_next_universe(&self) -> ty::UniverseIndex {
    1,470 ( 0.00%)          let u = self.universe.get().next_universe();
        .                   self.universe.set(u);
        .                   u
    1,258 ( 0.00%)      }
        .           
        .               /// Resolves and evaluates a constant.
        .               ///
        .               /// The constant can be located on a trait like `<A as B>::C`, in which case the given
        .               /// substitutions and environment are used to resolve the constant. Alternatively if the
        .               /// constant has generic parameters in scope the substitutions are used to evaluate the value of
        .               /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count
        .               /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still
-- line 1576 ----------------------------------------
-- line 1606 ----------------------------------------
        .                   // variables, thus we don't need to substitute back the original values.
        .                   self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
        .               }
        .           
        .               /// If `typ` is a type variable of some kind, resolve it one level
        .               /// (but do not resolve types found in the result). If `typ` is
        .               /// not a type variable, just return it unmodified.
        .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
1,234,624 ( 0.07%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
  644,562 ( 0.04%)          match *typ.kind() {
        .                       ty::Infer(ty::TyVar(v)) => {
        .                           // Not entirely obvious: if `typ` is a type variable,
        .                           // it can be resolved to an int/float variable, which
        .                           // can then be recursively resolved, hence the
        .                           // recursion. Note though that we prevent type
        .                           // variables from unifying to other type variables
        .                           // directly (though they may be embedded
        .                           // structurally), and we prevent cycles in any case,
        .                           // so this recursion should always be of very limited
        .                           // depth.
        .                           //
        .                           // Note: if these two lines are combined into one we get
        .                           // dynamic borrow errors on `self.inner`.
  323,720 ( 0.02%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
        .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
        .                       }
        .           
      292 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self
        .                           .inner
        .                           .borrow_mut()
        .                           .int_unification_table()
        .                           .probe_value(v)
      117 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
        .                           .unwrap_or(typ),
        .           
        .                       ty::Infer(ty::FloatVar(v)) => self
        .                           .inner
        .                           .borrow_mut()
        .                           .float_unification_table()
        .                           .probe_value(v)
        .                           .map(|v| v.to_type(self.tcx))
        .                           .unwrap_or(typ),
        .           
        .                       _ => typ,
        .                   }
1,388,952 ( 0.08%)      }
        .           
        .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
        .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
        .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
        .               ///
        .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
        .               /// inlined, despite being large, because it has only two call sites that
        .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
        .               #[inline(always)]
        .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
        .                   match infer_var {
        .                       TyOrConstInferVar::Ty(v) => {
        .                           use self::type_variable::TypeVariableValue;
        .           
        .                           // If `inlined_probe` returns a `Known` value, it never equals
        .                           // `ty::Infer(ty::TyVar(v))`.
  345,148 ( 0.02%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
        .                               TypeVariableValue::Unknown { .. } => false,
        .                               TypeVariableValue::Known { .. } => true,
        .                           }
        .                       }
        .           
        .                       TyOrConstInferVar::TyInt(v) => {
        .                           // If `inlined_probe_value` returns a value it's always a
        .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
-- line 1678 ----------------------------------------
-- line 1716 ----------------------------------------
        .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
        .               Const(ConstVid<'tcx>),
        .           }
        .           
        .           impl<'tcx> TyOrConstInferVar<'tcx> {
        .               /// Tries to extract an inference variable from a type or a constant, returns `None`
        .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
        .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
    2,881 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
        .                   match arg.unpack() {
        .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
        .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
        .                       GenericArgKind::Lifetime(_) => None,
        .                   }
    2,881 ( 0.00%)      }
        .           
        .               /// Tries to extract an inference variable from a type, returns `None`
        .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
      336 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
   28,932 ( 0.00%)          match *ty.kind() {
    6,428 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
        .                       ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
        .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
        .                       _ => None,
        .                   }
      336 ( 0.00%)      }
        .           
        .               /// Tries to extract an inference variable from a constant, returns `None`
        .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
        .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
        .                   match ct.val {
        .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
        .                       _ => None,
        .                   }
-- line 1749 ----------------------------------------
-- line 1755 ----------------------------------------
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
        .                   self.infcx.tcx
        .               }
        .           
        .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
  238,225 ( 0.01%)          self.infcx.shallow_resolve_ty(ty)
        .               }
        .           
    1,252 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
      628 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
        5 ( 0.00%)              self.infcx
        .                           .inner
        .                           .borrow_mut()
        .                           .const_unification_table()
        3 ( 0.00%)                  .probe_value(*vid)
        .                           .val
        .                           .known()
        .                           .unwrap_or(ct)
        .                   } else {
        .                       ct
        .                   }
    1,565 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeTrace<'tcx> {
        .               pub fn span(&self) -> Span {
       28 ( 0.00%)          self.cause.span
        .               }
        .           
        .               pub fn types(
        .                   cause: &ObligationCause<'tcx>,
        .                   a_is_expected: bool,
        .                   a: Ty<'tcx>,
        .                   b: Ty<'tcx>,
        .               ) -> TypeTrace<'tcx> {
-- line 1792 ----------------------------------------
-- line 1800 ----------------------------------------
        .                   b: &'tcx ty::Const<'tcx>,
        .               ) -> TypeTrace<'tcx> {
        .                   TypeTrace { cause: cause.clone(), values: Consts(ExpectedFound::new(a_is_expected, a, b)) }
        .               }
        .           }
        .           
        .           impl<'tcx> SubregionOrigin<'tcx> {
        .               pub fn span(&self) -> Span {
       70 ( 0.00%)          match *self {
       14 ( 0.00%)              Subtype(ref a) => a.span(),
        .                       RelateObjectBound(a) => a,
        .                       RelateParamBound(a, ..) => a,
        .                       RelateRegionParamBound(a) => a,
        .                       Reborrow(a) => a,
        .                       ReborrowUpvar(a, _) => a,
        .                       DataBorrowed(_, a) => a,
        .                       ReferenceOutlivesReferent(_, a) => a,
        .                       CompareImplMethodObligation { span, .. } => span,
-- line 1817 ----------------------------------------
-- line 1818 ----------------------------------------
        .                       CompareImplTypeObligation { span, .. } => span,
        .                   }
        .               }
        .           
        .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
        .               where
        .                   F: FnOnce() -> Self,
        .               {
    9,404 ( 0.00%)          match *cause.code() {
    1,357 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
    6,785 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
        .                       }
        .           
        .                       traits::ObligationCauseCode::CompareImplMethodObligation {
       27 ( 0.00%)                  impl_item_def_id,
       27 ( 0.00%)                  trait_item_def_id,
       27 ( 0.00%)              } => SubregionOrigin::CompareImplMethodObligation {
       27 ( 0.00%)                  span: cause.span,
        .                           impl_item_def_id,
        .                           trait_item_def_id,
        .                       },
        .           
        .                       traits::ObligationCauseCode::CompareImplTypeObligation {
        .                           impl_item_def_id,
        .                           trait_item_def_id,
        .                       } => SubregionOrigin::CompareImplTypeObligation {
-- line 1843 ----------------------------------------

1,136,189 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/mem/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 136 ----------------------------------------
        .           /// [`Box::leak`]: ../../std/boxed/struct.Box.html#method.leak
        .           /// [`Box::into_raw`]: ../../std/boxed/struct.Box.html#method.into_raw
        .           /// [`mem::drop`]: drop
        .           /// [ub]: ../../reference/behavior-considered-undefined.html
        .           #[inline]
        .           #[rustc_const_stable(feature = "const_forget", since = "1.46.0")]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[cfg_attr(not(test), rustc_diagnostic_item = "mem_forget")]
    1,924 ( 0.00%)  pub const fn forget<T>(t: T) {
      792 ( 0.00%)      let _ = ManuallyDrop::new(t);
    1,000 ( 0.00%)  }
        .           
        .           /// Like [`forget`], but also accepts unsized values.
        .           ///
        .           /// This function is just a shim intended to be removed when the `unsized_locals` feature gets
        .           /// stabilized.
        .           #[inline]
        .           #[unstable(feature = "forget_unsized", issue = "none")]
        .           pub fn forget_unsized<T: ?Sized>(t: T) {
-- line 154 ----------------------------------------
-- line 324 ----------------------------------------
        .           /// let y: &[u8] = &x;
        .           /// assert_eq!(13, mem::size_of_val(y));
        .           /// ```
        .           #[inline]
        .           #[must_use]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_size_of_val", issue = "46571")]
        .           #[cfg_attr(not(test), rustc_diagnostic_item = "mem_size_of_val")]
   50,687 ( 0.00%)  pub const fn size_of_val<T: ?Sized>(val: &T) -> usize {
        .               // SAFETY: `val` is a reference, so it's a valid raw pointer
   99,157 ( 0.01%)      unsafe { intrinsics::size_of_val(val) }
   35,842 ( 0.00%)  }
        .           
        .           /// Returns the size of the pointed-to value in bytes.
        .           ///
        .           /// This is usually the same as `size_of::<T>()`. However, when `T` *has* no
        .           /// statically-known size, e.g., a slice [`[T]`][slice] or a [trait object],
        .           /// then `size_of_val_raw` can be used to get the dynamically-known size.
        .           ///
        .           /// # Safety
-- line 343 ----------------------------------------
-- line 375 ----------------------------------------
        .           /// assert_eq!(13, unsafe { mem::size_of_val_raw(y) });
        .           /// ```
        .           #[inline]
        .           #[must_use]
        .           #[unstable(feature = "layout_for_ptr", issue = "69835")]
        .           #[rustc_const_unstable(feature = "const_size_of_val_raw", issue = "46571")]
        .           pub const unsafe fn size_of_val_raw<T: ?Sized>(val: *const T) -> usize {
        .               // SAFETY: the caller must provide a valid raw pointer
       14 ( 0.00%)      unsafe { intrinsics::size_of_val(val) }
        .           }
        .           
        .           /// Returns the [ABI]-required minimum alignment of a type.
        .           ///
        .           /// Every reference to a value of the type `T` must be a multiple of this number.
        .           ///
        .           /// This is the alignment used for struct fields. It may be smaller than the preferred alignment.
        .           ///
-- line 391 ----------------------------------------
-- line 467 ----------------------------------------
        .           ///
        .           /// assert_eq!(4, mem::align_of_val(&5i32));
        .           /// ```
        .           #[inline]
        .           #[must_use]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_align_of_val", issue = "46571")]
        .           #[allow(deprecated)]
    6,152 ( 0.00%)  pub const fn align_of_val<T: ?Sized>(val: &T) -> usize {
        .               // SAFETY: val is a reference, so it's a valid raw pointer
    9,228 ( 0.00%)      unsafe { intrinsics::min_align_of_val(val) }
    6,152 ( 0.00%)  }
        .           
        .           /// Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.
        .           ///
        .           /// Every reference to a value of the type `T` must be a multiple of this number.
        .           ///
        .           /// [ABI]: https://en.wikipedia.org/wiki/Application_binary_interface
        .           ///
        .           /// # Safety
-- line 486 ----------------------------------------
-- line 578 ----------------------------------------
        .           ///     }
        .           /// }
        .           /// ```
        .           #[inline]
        .           #[must_use]
        .           #[stable(feature = "needs_drop", since = "1.21.0")]
        .           #[rustc_const_stable(feature = "const_needs_drop", since = "1.36.0")]
        .           #[rustc_diagnostic_item = "needs_drop"]
        1 ( 0.00%)  pub const fn needs_drop<T>() -> bool {
        3 ( 0.00%)      intrinsics::needs_drop::<T>()
        4 ( 0.00%)  }
        .           
        .           /// Returns the value of type `T` represented by the all-zero byte-pattern.
        .           ///
        .           /// This means that, for example, the padding byte in `(u8, u16)` is not
        .           /// necessarily zeroed.
        .           ///
        .           /// There is no guarantee that an all-zero byte-pattern represents a valid value
        .           /// of some type `T`. For example, the all-zero byte-pattern is not a valid value
-- line 596 ----------------------------------------
-- line 759 ----------------------------------------
        .           /// let mut buffer = Buffer { buf: vec![0, 1] };
        .           /// assert_eq!(buffer.buf.len(), 2);
        .           ///
        .           /// assert_eq!(buffer.get_and_reset(), vec![0, 1]);
        .           /// assert_eq!(buffer.buf.len(), 0);
        .           /// ```
        .           #[inline]
        .           #[stable(feature = "mem_take", since = "1.40.0")]
      360 ( 0.00%)  pub fn take<T: Default>(dest: &mut T) -> T {
      288 ( 0.00%)      replace(dest, T::default())
      144 ( 0.00%)  }
        .           
        .           /// Moves `src` into the referenced `dest`, returning the previous `dest` value.
        .           ///
        .           /// Neither value is dropped.
        .           ///
        .           /// * If you want to replace the values of two variables, see [`swap`].
        .           /// * If you want to replace with a default value, see [`take`].
        .           ///
-- line 777 ----------------------------------------
-- line 826 ----------------------------------------
        .           /// assert_eq!(buffer.replace_index(0, 2), 0);
        .           /// assert_eq!(buffer.buf[0], 2);
        .           /// ```
        .           #[inline]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[must_use = "if you don't need the old value, you can just assign the new value directly"]
        .           #[rustc_const_unstable(feature = "const_replace", issue = "83164")]
        .           #[cfg_attr(not(test), rustc_diagnostic_item = "mem_replace")]
  366,986 ( 0.02%)  pub const fn replace<T>(dest: &mut T, src: T) -> T {
        .               // SAFETY: We read from `dest` but directly write `src` into it afterwards,
        .               // such that the old value is not duplicated. Nothing is dropped and
        .               // nothing here can panic.
        .               unsafe {
  649,483 ( 0.04%)          let result = ptr::read(dest);
4,721,555 ( 0.28%)          ptr::write(dest, src);
        .                   result
        .               }
  149,900 ( 0.01%)  }
        .           
        .           /// Disposes of a value.
        .           ///
        .           /// This does so by calling the argument's implementation of [`Drop`][drop].
        .           ///
        .           /// This effectively does nothing for types which implement `Copy`, e.g.
        .           /// integers. Such values are copied and _then_ moved into the function, so the
        .           /// value persists after this function call.
-- line 851 ----------------------------------------
-- line 901 ----------------------------------------
        .           ///
        .           /// println!("x: {}, y: {}", x, y.0); // still available
        .           /// ```
        .           ///
        .           /// [`RefCell`]: crate::cell::RefCell
        .           #[inline]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[cfg_attr(not(test), rustc_diagnostic_item = "mem_drop")]
  158,109 ( 0.01%)  pub fn drop<T>(_x: T) {}
        .           
        .           /// Interprets `src` as having type `&U`, and then reads `src` without moving
        .           /// the contained value.
        .           ///
        .           /// This function will unsafely assume the pointer `src` is valid for [`size_of::<U>`][size_of]
        .           /// bytes by transmuting `&T` to `&U` and then reading the `&U` (except that this is done in a way
        .           /// that is correct even when `&U` makes stricter alignment requirements than `&T`). It will also
        .           /// unsafely create a copy of the contained value instead of moving out of `src`.
-- line 917 ----------------------------------------
-- line 947 ----------------------------------------
        .           ///
        .           /// // The contents of 'foo_array' should not have changed
        .           /// assert_eq!(foo_array, [10]);
        .           /// ```
        .           #[inline]
        .           #[must_use]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_transmute_copy", issue = "83165")]
      180 ( 0.00%)  pub const unsafe fn transmute_copy<T, U>(src: &T) -> U {
        .               // If U has a higher alignment requirement, src might not be suitably aligned.
       72 ( 0.00%)      if align_of::<U>() > align_of::<T>() {
        .                   // SAFETY: `src` is a reference which is guaranteed to be valid for reads.
        .                   // The caller must guarantee that the actual transmutation is safe.
        .                   unsafe { ptr::read_unaligned(src as *const T as *const U) }
        .               } else {
        .                   // SAFETY: `src` is a reference which is guaranteed to be valid for reads.
        .                   // We just checked that `src as *const U` was properly aligned.
        .                   // The caller must guarantee that the actual transmutation is safe.
       72 ( 0.00%)          unsafe { ptr::read(src as *const T as *const U) }
        .               }
       72 ( 0.00%)  }
        .           
        .           /// Opaque type representing the discriminant of an enum.
        .           ///
        .           /// See the [`discriminant`] function in this module for more information.
        .           #[stable(feature = "discriminant_value", since = "1.21.0")]
        .           pub struct Discriminant<T>(<T as DiscriminantKind>::Discriminant);
        .           
        .           // N.B. These trait implementations cannot be derived because we don't want any bounds on T.
-- line 975 ----------------------------------------
-- line 991 ----------------------------------------
        .               }
        .           }
        .           
        .           #[stable(feature = "discriminant_value", since = "1.21.0")]
        .           impl<T> cmp::Eq for Discriminant<T> {}
        .           
        .           #[stable(feature = "discriminant_value", since = "1.21.0")]
        .           impl<T> hash::Hash for Discriminant<T> {
    1,011 ( 0.00%)      fn hash<H: hash::Hasher>(&self, state: &mut H) {
        .                   self.0.hash(state);
    1,772 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "discriminant_value", since = "1.21.0")]
        .           impl<T> fmt::Debug for Discriminant<T> {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   fmt.debug_tuple("Discriminant").field(&self.0).finish()
        .               }
        .           }
-- line 1009 ----------------------------------------
-- line 1031 ----------------------------------------
        .           /// assert_eq!(mem::discriminant(&Foo::A("bar")), mem::discriminant(&Foo::A("baz")));
        .           /// assert_eq!(mem::discriminant(&Foo::B(1)), mem::discriminant(&Foo::B(2)));
        .           /// assert_ne!(mem::discriminant(&Foo::B(3)), mem::discriminant(&Foo::C(3)));
        .           /// ```
        .           #[stable(feature = "discriminant_value", since = "1.21.0")]
        .           #[rustc_const_unstable(feature = "const_discriminant", issue = "69821")]
        .           #[cfg_attr(not(test), rustc_diagnostic_item = "mem_discriminant")]
        .           pub const fn discriminant<T>(v: &T) -> Discriminant<T> {
    8,360 ( 0.00%)      Discriminant(intrinsics::discriminant_value(v))
        .           }
        .           
        .           /// Returns the number of variants in the enum type `T`.
        .           ///
        .           /// If `T` is not an enum, calling this function will not result in undefined behavior, but the
        .           /// return value is unspecified. Equally, if `T` is an enum with more variants than `usize::MAX`
        .           /// the return value is unspecified. Uninhabited variants will be counted.
        .           ///
-- line 1047 ----------------------------------------

  233,655 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/mem/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir                 

-- line 91 ----------------------------------------
        .           // maximum of number bytes needed to fill an 8-byte-sized element on which
        .           // SipHash operates. Note that for variable-sized copies which are known to be
        .           // less than 8 bytes, this function will perform more work than necessary unless
        .           // the compiler is able to optimize the extra work away.
        .           #[inline]
        .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
        .               debug_assert!(count <= 8);
        .           
   28,463 ( 0.00%)      if count == 8 {
        .                   ptr::copy_nonoverlapping(src, dst, 8);
        .                   return;
        .               }
        .           
        .               let mut i = 0;
   39,104 ( 0.00%)      if i + 3 < count {
        .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
        .                   i += 4;
        .               }
        .           
   82,994 ( 0.00%)      if i + 1 < count {
        .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
   12,497 ( 0.00%)          i += 2
        .               }
        .           
   39,104 ( 0.00%)      if i < count {
   23,044 ( 0.00%)          *dst.add(i) = *src.add(i);
        .                   i += 1;
        .               }
        .           
        .               debug_assert_eq!(i, count);
        .           }
        .           
        .           // # Implementation
        .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
        .           
        .                   hasher
        .               }
        .           
        .               // A specialized write function for values with size <= 8.
        .               #[inline]
        .               fn short_write<T>(&mut self, x: T) {
        .                   let size = mem::size_of::<T>();
  257,345 ( 0.02%)          let nbuf = self.nbuf;
        .                   debug_assert!(size <= 8);
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
        .           
1,717,576 ( 0.10%)          if nbuf + size < BUFFER_SIZE {
        .                       unsafe {
        .                           // The memcpy call is optimized away because the size is known.
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
        .                       }
        .           
  533,702 ( 0.03%)              self.nbuf = nbuf + size;
        .           
        .                       return;
        .                   }
        .           
   85,360 ( 0.01%)          unsafe { self.short_write_process_buffer(x) }
        .               }
        .           
        .               // A specialized write function for values with size <= 8 that should only
        .               // be called when the write would cause the buffer to fill.
        .               //
        .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
        .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
        .               // overflow) if it wasn't already.
        .               #[inline(never)]
   25,761 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
        .                   let size = mem::size_of::<T>();
   25,761 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(size <= 8);
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
        .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
        .           
        .                   // Copy first part of input into end of buffer, possibly into spill
        .                   // element. The memcpy call is optimized away because the size is known.
        .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
        .           
        .                   // Process buffer.
        .                   for i in 0..BUFFER_CAPACITY {
  257,610 ( 0.02%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
  206,088 ( 0.01%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
  231,849 ( 0.01%)              self.state.v0 ^= elem;
        .                   }
        .           
        .                   // Copy remaining input into start of buffer by copying size - 1
        .                   // elements from spill (at most size - 1 bytes could have overflowed
        .                   // into the spill). The memcpy call is optimized away because the size
        .                   // is known. And the whole copy is optimized away for size == 1.
        .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
        .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
        .           
        .                   // This function should only be called when the write fills the buffer.
        .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
        .                   // is statically known, so the branch is optimized away.
  121,061 ( 0.01%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
  103,044 ( 0.01%)          self.processed += BUFFER_SIZE;
   51,522 ( 0.00%)      }
        .           
        .               // A write function for byte slices.
        .               #[inline]
        .               fn slice_write(&mut self, msg: &[u8]) {
        .                   let length = msg.len();
   13,859 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .           
  115,749 ( 0.01%)          if nbuf + length < BUFFER_SIZE {
        .                       unsafe {
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .           
   42,014 ( 0.00%)                  if length <= 8 {
        .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
        .                           } else {
        .                               // This memcpy is *not* optimized away.
        .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
        .                           }
        .                       }
        .           
   21,045 ( 0.00%)              self.nbuf = nbuf + length;
        .           
        .                       return;
        .                   }
        .           
   13,876 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
        .               }
        .           
        .               // A write function for byte slices that should only be called when the
        .               // write would cause the buffer to fill.
        .               //
        .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
        .               // and `msg` must contain enough bytes to initialize the rest of the element
        .               // containing the byte offset `self.nbuf`.
        .               #[inline(never)]
   10,160 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
        .                   let length = msg.len();
    2,032 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
        .           
        .                   // Always copy first part of input into current element of buffer.
        .                   // This function should only be called when the write fills the buffer,
        .                   // so we know that there is enough input to fill the current element.
    6,096 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
    2,032 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
        .           
        .                   let src = msg.as_ptr();
        .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
        .           
        .                   // Process buffer.
        .           
        .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
        .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
        .                   // We know that is true, because last step ensured we have a full
        .                   // element in the buffer.
    4,064 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
        .           
        .                   for i in 0..last {
   14,203 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
   16,235 ( 0.00%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
   28,406 ( 0.00%)              self.state.v0 ^= elem;
        .                   }
        .           
        .                   // Process the remaining element-sized chunks of input.
        .                   let mut processed = needed_in_elem;
    4,064 ( 0.00%)          let input_left = length - processed;
    3,228 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
        .                   let extra_bytes_left = input_left % ELEM_SIZE;
        .           
        .                   for _ in 0..elems_left {
    2,464 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
    2,464 ( 0.00%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
    2,464 ( 0.00%)              self.state.v0 ^= elem;
    4,928 ( 0.00%)              processed += ELEM_SIZE;
        .                   }
        .           
        .                   // Copy remaining input into start of buffer.
        .                   let src = msg.as_ptr().add(processed);
        .                   let dst = self.buf.as_mut_ptr() as *mut u8;
        .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
        .           
    2,032 ( 0.00%)          self.nbuf = extra_bytes_left;
   10,160 ( 0.00%)          self.processed += nbuf + processed;
   12,192 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn finish128(mut self) -> (u64, u64) {
        .                   debug_assert!(self.nbuf < BUFFER_SIZE);
        .           
        .                   // Process full elements in buffer.
   13,254 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
        .           
        .                   // Since we're consuming self, avoid updating members for a potential
        .                   // performance gain.
   17,672 ( 0.00%)          let mut state = self.state;
        .           
        .                   for i in 0..last {
   13,208 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
   13,208 ( 0.00%)              state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut state);
   13,208 ( 0.00%)              state.v0 ^= elem;
        .                   }
        .           
        .                   // Get remaining partial element.
    8,836 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
        .                       unsafe {
        .                           // Ensure element is initialized by writing zero bytes. At most
        .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
        .                           // to write this many because we have the spill and we maintain
        .                           // `self.nbuf` such that this write will start before the spill.
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
        .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
    3,800 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
        .                       }
        .                   } else {
        .                       0
        .                   };
        .           
        .                   // Finalize the hash.
   12,636 ( 0.00%)          let length = self.processed + self.nbuf;
    8,834 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
        .           
    4,417 ( 0.00%)          state.v3 ^= b;
        .                   Sip24Rounds::c_rounds(&mut state);
    4,417 ( 0.00%)          state.v0 ^= b;
        .           
    4,417 ( 0.00%)          state.v2 ^= 0xee;
        .                   Sip24Rounds::d_rounds(&mut state);
   13,144 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
        .           
    4,308 ( 0.00%)          state.v1 ^= 0xdd;
        .                   Sip24Rounds::d_rounds(&mut state);
    4,308 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
        .           
        .                   (_0, _1)
        .               }
        .           }
        .           
        .           impl Hasher for SipHasher128 {
        .               #[inline]
        .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
        .           }
        .           
        .           #[derive(Debug, Clone, Default)]
        .           struct Sip24Rounds;
        .           
        .           impl Sip24Rounds {
        .               #[inline]
        .               fn c_rounds(state: &mut State) {
  993,377 ( 0.06%)          compress!(state);
1,081,412 ( 0.06%)          compress!(state);
        .               }
        .           
        .               #[inline]
        .               fn d_rounds(state: &mut State) {
   26,284 ( 0.00%)          compress!(state);
   26,284 ( 0.00%)          compress!(state);
   26,284 ( 0.00%)          compress!(state);
   21,868 ( 0.00%)          compress!(state);
        .               }
        .           }

  210,776 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 57 ----------------------------------------
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
      112 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
       56 ( 0.00%)              from_str_radix(src, radix)
      168 ( 0.00%)          }
        .           
        .                   /// Returns the number of ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[doc(alias = "popcount")]
        .                   #[doc(alias = "popcnt")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn count_ones(self) -> u32 {
  204,180 ( 0.01%)              intrinsics::ctpop(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of zeros in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
        .                   /// assert_eq!(n.leading_zeros(), 2);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn leading_zeros(self) -> u32 {
  326,968 ( 0.02%)              intrinsics::ctlz(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of trailing zeros in the binary representation
        .                   /// of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
        .                   /// assert_eq!(n.trailing_zeros(), 3);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn trailing_zeros(self) -> u32 {
  285,643 ( 0.02%)              intrinsics::cttz(self) as u32
        .                   }
        .           
        .                   /// Returns the number of leading ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn rotate_left(self, n: u32) -> Self {
8,058,951 ( 0.48%)              intrinsics::rotate_left(self, n as $SelfT)
        .                   }
        .           
        .                   /// Shifts the bits to the right by a specified amount, `n`,
        .                   /// wrapping the truncated bits to the beginning of the resulting
        .                   /// integer.
        .                   ///
        .                   /// Please note this isn't the same operation as the `>>` shifting operator!
        .                   ///
-- line 220 ----------------------------------------
-- line 429 ----------------------------------------
        .                   )]
        .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
   36,235 ( 0.00%)          pub const fn checked_add(self, rhs: Self) -> Option<Self> {
   29,022 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
   72,470 ( 0.00%)              if unlikely!(b) {None} else {Some(a)}
   28,988 ( 0.00%)          }
        .           
        .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
        .                   /// cannot occur.
        .                   ///
        .                   /// # Safety
        .                   ///
        .                   /// This results in undefined behavior when
        .                   #[doc = concat!("`self + rhs > ", stringify!($SelfT), "::MAX` or `self + rhs < ", stringify!($SelfT), "::MIN`,")]
-- line 448 ----------------------------------------
-- line 456 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_add`.
  719,700 ( 0.04%)              unsafe { intrinsics::unchecked_add(self, rhs) }
        .                   }
        .           
        .                   /// Checked addition with a signed integer. Computes `self + rhs`,
        .                   /// returning `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_sub`.
   83,721 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
        .                   }
        .           
        .                   /// Checked integer multiplication. Computes `self * rhs`, returning
        .                   /// `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 544 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".checked_mul(1), Some(5));")]
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.checked_mul(2), None);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
   46,020 ( 0.00%)          pub const fn checked_mul(self, rhs: Self) -> Option<Self> {
   30,680 ( 0.00%)              let (a, b) = self.overflowing_mul(rhs);
   76,700 ( 0.00%)              if unlikely!(b) {None} else {Some(a)}
   30,680 ( 0.00%)          }
        .           
        .                   /// Unchecked integer multiplication. Computes `self * rhs`, assuming overflow
        .                   /// cannot occur.
        .                   ///
        .                   /// # Safety
        .                   ///
        .                   /// This results in undefined behavior when
        .                   #[doc = concat!("`self * rhs > ", stringify!($SelfT), "::MAX` or `self * rhs < ", stringify!($SelfT), "::MIN`,")]
-- line 563 ----------------------------------------
-- line 1035 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_add(self, rhs: Self) -> Self {
  224,357 ( 0.01%)              intrinsics::saturating_add(self, rhs)
       25 ( 0.00%)          }
        .           
        .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 1052 ----------------------------------------
-- line 1084 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
    2,684 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
        .                   }
        .           
        .                   /// Saturating integer multiplication. Computes `self * rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
3,187,326 ( 0.19%)              intrinsics::wrapping_add(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) addition with a signed integer. Computes
        .                   /// `self + rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
1,623,061 ( 0.10%)              intrinsics::wrapping_sub(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) multiplication. Computes `self *
        .                   /// rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
        .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
6,113,019 ( 0.36%)              intrinsics::wrapping_mul(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) division. Computes `self / rhs`.
        .                   /// Wrapped division on unsigned types is just normal division.
        .                   /// There's no way wrapping could ever happen.
        .                   /// This function exists, so that all operations
        .                   /// are accounted for in the wrapping operations.
        .                   ///
-- line 1256 ----------------------------------------
-- line 1397 ----------------------------------------
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_shl(self, rhs: u32) -> Self {
        .                       // SAFETY: the masking by the bitsize of the type ensures that we do not shift
        .                       // out of bounds
        .                       unsafe {
       20 ( 0.00%)                  intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)
        .                       }
        .                   }
        .           
        .                   /// Panic-free bitwise shift-right; yields `self >> mask(rhs)`,
        .                   /// where `mask` removes any high-order bits of `rhs` that
        .                   /// would cause the shift to exceed the bitwidth of the type.
        .                   ///
        .                   /// Note that this is *not* the same as a rotate-right; the
-- line 1413 ----------------------------------------
-- line 1492 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
  687,360 ( 0.04%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
   14,494 ( 0.00%)              (a as Self, b)
   28,988 ( 0.00%)          }
        .           
        .                   /// Calculates `self + rhs + carry` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
        .                   /// additional bit of overflow. This allows for chaining together multiple additions
        .                   /// to create "big integers" which represent larger values.
        .                   ///
        .                   #[doc = concat!("This can be thought of as a ", stringify!($BITS), "-bit \"full adder\", in the electronics sense.")]
-- line 1510 ----------------------------------------
-- line 1588 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
  182,113 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
        .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
        .                   /// to create "big integers" which represent larger values.
-- line 1604 ----------------------------------------
-- line 1674 ----------------------------------------
        .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                     without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
1,277,514 ( 0.08%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
   15,340 ( 0.00%)              (a as Self, b)
   30,680 ( 0.00%)          }
        .           
        .                   /// Calculates the divisor when `self` is divided by `rhs`.
        .                   ///
        .                   /// Returns a tuple of the divisor along with a boolean indicating
        .                   /// whether an arithmetic overflow would occur. Note that for unsigned
        .                   /// integers overflow never occurs, so the second value is always
        .                   /// `false`.
        .                   ///
-- line 1692 ----------------------------------------
-- line 2132 ----------------------------------------
        .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
        .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
        .                   /// ```
        .                   #[must_use]
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
        .                   #[inline(always)]
        .                   pub const fn is_power_of_two(self) -> bool {
      444 ( 0.00%)              self.count_ones() == 1
        .                   }
        .           
        .                   // Returns one less than next power of two.
        .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
        .                   //
        .                   // 8u8.one_less_than_next_power_of_two() == 7
        .                   // 6u8.one_less_than_next_power_of_two() == 7
        .                   //
        .                   // This method cannot overflow, as in the `next_power_of_two`
        .                   // overflow cases it instead ends up returning the maximum value
        .                   // of the type, and can return 0 for 0.
        .                   #[inline]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   const fn one_less_than_next_power_of_two(self) -> Self {
   10,912 ( 0.00%)              if self <= 1 { return 0; }
        .           
   28,799 ( 0.00%)              let p = self - 1;
        .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
        .                       // That means the shift is always in-bounds, and some processors
        .                       // (such as intel pre-haswell) have more efficient ctlz
        .                       // intrinsics when the argument is non-zero.
   86,285 ( 0.01%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
   28,839 ( 0.00%)              <$SelfT>::MAX >> z
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `self`.
        .                   ///
        .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
        .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
        .                   /// release mode (the only situation in which method can return 0).
        .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
        .                   #[rustc_inherit_overflow_checks]
        .                   pub const fn next_power_of_two(self) -> Self {
   46,650 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `n`. If
        .                   /// the next power of two is greater than the type's maximum value,
        .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 2195 ----------------------------------------
-- line 2264 ----------------------------------------
        .                   #[doc = concat!("let bytes = ", $swap_op, stringify!($SelfT), ".to_le_bytes();")]
        .                   #[doc = concat!("assert_eq!(bytes, ", $le_bytes, ");")]
        .                   /// ```
        .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
        .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
       60 ( 0.00%)          pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {
       48 ( 0.00%)              self.to_le().to_ne_bytes()
       36 ( 0.00%)          }
        .           
        .                   /// Return the memory representation of this integer as a byte array in
        .                   /// native byte order.
        .                   ///
        .                   /// As the target platform's native endianness is used, portable code
        .                   /// should use [`to_be_bytes`] or [`to_le_bytes`], as appropriate,
        .                   /// instead.
        .                   ///
-- line 2282 ----------------------------------------
-- line 2300 ----------------------------------------
        .                   /// ```
        .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
        .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   // SAFETY: const sound because integers are plain old datatypes so we can always
        .                   // transmute them to arrays of bytes
        .                   #[inline]
       24 ( 0.00%)          pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {
        .                       // SAFETY: integers are plain old datatypes so we can always transmute them to
        .                       // arrays of bytes
       12 ( 0.00%)              unsafe { mem::transmute(self) }
       36 ( 0.00%)          }
        .           
        .                   /// Create a native endian integer value from its representation
        .                   /// as a byte array in big endian.
        .                   ///
        .                   #[doc = $from_xe_bytes_doc]
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 2320 ----------------------------------------
-- line 2360 ----------------------------------------
        .                   ///     *input = rest;
        .                   #[doc = concat!("    ", stringify!($SelfT), "::from_le_bytes(int_bytes.try_into().unwrap())")]
        .                   /// }
        .                   /// ```
        .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
        .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
        .                   #[must_use]
        .                   #[inline]
       88 ( 0.00%)          pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {
      110 ( 0.00%)              Self::from_le(Self::from_ne_bytes(bytes))
       44 ( 0.00%)          }
        .           
        .                   /// Create a native endian integer value from its memory representation
        .                   /// as a byte array in native endianness.
        .                   ///
        .                   /// As the target platform's native endianness is used, portable code
        .                   /// likely wants to use [`from_be_bytes`] or [`from_le_bytes`], as
        .                   /// appropriate instead.
        .                   ///
-- line 2378 ----------------------------------------
-- line 2402 ----------------------------------------
        .                   /// }
        .                   /// ```
        .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
        .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
        .                   #[must_use]
        .                   // SAFETY: const sound because integers are plain old datatypes so we can always
        .                   // transmute to them
        .                   #[inline]
       88 ( 0.00%)          pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {
        .                       // SAFETY: integers are plain old datatypes so we can always transmute to them
      132 ( 0.00%)              unsafe { mem::transmute(bytes) }
       44 ( 0.00%)          }
        .           
        .                   /// New code should prefer to use
        .                   #[doc = concat!("[`", stringify!($SelfT), "::MIN", "`] instead.")]
        .                   ///
        .                   /// Returns the smallest value that can be represented by this integer type.
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_promotable]
        .                   #[inline(always)]
-- line 2421 ----------------------------------------

  152,081 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/client.rs
--------------------------------------------------------------------------------
Ir                 

-- line 18 ----------------------------------------
        .                       // FIXME(eddyb) use a reference to the `static COUNTERS`, instead of
        .                       // a wrapper `fn` pointer, once `const fn` can reference `static`s.
        .                       extern "C" fn get() -> &'static Self {
        .                           static COUNTERS: HandleCounters = HandleCounters {
        .                               $($oty: AtomicUsize::new(1),)*
        .                               $($ity: AtomicUsize::new(1),)*
        .                           };
        .                           &COUNTERS
       24 ( 0.00%)              }
        .                   }
        .           
        .                   // FIXME(eddyb) generate the definition of `HandleStore` in `server.rs`.
        .                   #[repr(C)]
        .                   #[allow(non_snake_case)]
        .                   pub(super) struct HandleStore<S: server::Types> {
        .                       $($oty: handle::OwnedStore<S::$oty>,)*
        .                       $($ity: handle::InternedStore<S::$ity>,)*
        .                   }
        .           
        .                   impl<S: server::Types> HandleStore<S> {
       72 ( 0.00%)              pub(super) fn new(handle_counters: &'static HandleCounters) -> Self {
      708 ( 0.00%)                  HandleStore {
        .                               $($oty: handle::OwnedStore::new(&handle_counters.$oty),)*
        .                               $($ity: handle::InternedStore::new(&handle_counters.$ity),)*
        .                           }
       96 ( 0.00%)              }
        .                   }
        .           
        .                   $(
        .                       #[repr(C)]
        .                       pub(crate) struct $oty(handle::Handle);
        .                       impl !Send for $oty {}
        .                       impl !Sync for $oty {}
        .           
        .                       // Forward `Drop::drop` to the inherent `drop` method.
        .                       impl Drop for $oty {
    1,140 ( 0.00%)                  fn drop(&mut self) {
   16,526 ( 0.00%)                      $oty(self.0).drop();
    1,710 ( 0.00%)                  }
        .                       }
        .           
        .                       impl<S> Encode<S> for $oty {
       96 ( 0.00%)                  fn encode(self, w: &mut Writer, s: &mut S) {
       36 ( 0.00%)                      let handle = self.0;
       48 ( 0.00%)                      mem::forget(self);
       12 ( 0.00%)                      handle.encode(w, s);
       24 ( 0.00%)                  }
        .                       }
        .           
        .                       impl<S: server::Types> DecodeMut<'_, '_, HandleStore<server::MarkedTypes<S>>>
        .                           for Marked<S::$oty, $oty>
        .                       {
   79,503 ( 0.00%)                  fn decode(r: &mut Reader<'_>, s: &mut HandleStore<server::MarkedTypes<S>>) -> Self {
        .                               s.$oty.take(handle::Handle::decode(r, &mut ()))
  106,004 ( 0.01%)                  }
        .                       }
        .           
        .                       impl<S> Encode<S> for &$oty {
        .                           fn encode(self, w: &mut Writer, s: &mut S) {
   58,284 ( 0.00%)                      self.0.encode(w, s);
        .                           }
        .                       }
        .           
        .                       impl<'s, S: server::Types> Decode<'_, 's, HandleStore<server::MarkedTypes<S>>>
        .                           for &'s Marked<S::$oty, $oty>
        .                       {
   19,428 ( 0.00%)                  fn decode(r: &mut Reader<'_>, s: &'s HandleStore<server::MarkedTypes<S>>) -> Self {
        .                               &s.$oty[handle::Handle::decode(r, &mut ())]
   38,856 ( 0.00%)                  }
        .                       }
        .           
        .                       impl<S> Encode<S> for &mut $oty {
        .                           fn encode(self, w: &mut Writer, s: &mut S) {
   44,673 ( 0.00%)                      self.0.encode(w, s);
        .                           }
        .                       }
        .           
        .                       impl<'s, S: server::Types> DecodeMut<'_, 's, HandleStore<server::MarkedTypes<S>>>
        .                           for &'s mut Marked<S::$oty, $oty>
        .                       {
   14,891 ( 0.00%)                  fn decode(
        .                               r: &mut Reader<'_>,
        .                               s: &'s mut HandleStore<server::MarkedTypes<S>>
        .                           ) -> Self {
        .                               &mut s.$oty[handle::Handle::decode(r, &mut ())]
   29,782 ( 0.00%)                  }
        .                       }
        .           
        .                       impl<S: server::Types> Encode<HandleStore<server::MarkedTypes<S>>>
        .                           for Marked<S::$oty, $oty>
        .                       {
  145,756 ( 0.01%)                  fn encode(self, w: &mut Writer, s: &mut HandleStore<server::MarkedTypes<S>>) {
   16,502 ( 0.00%)                      s.$oty.alloc(self).encode(w, s);
        .                           }
        .                       }
        .           
        .                       impl<S> DecodeMut<'_, '_, S> for $oty {
       66 ( 0.00%)                  fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
       66 ( 0.00%)                      $oty(handle::Handle::decode(r, s))
       66 ( 0.00%)                  }
        .                       }
        .                   )*
        .           
        .                   $(
        .                       #[repr(C)]
  111,069 ( 0.01%)              #[derive(Copy, Clone, PartialEq, Eq, Hash)]
        .                       pub(crate) struct $ity(handle::Handle);
        .                       impl !Send for $ity {}
        .                       impl !Sync for $ity {}
        .           
        .                       impl<S> Encode<S> for $ity {
        .                           fn encode(self, w: &mut Writer, s: &mut S) {
        .                               self.0.encode(w, s);
        .                           }
        .                       }
        .           
        .                       impl<S: server::Types> DecodeMut<'_, '_, HandleStore<server::MarkedTypes<S>>>
        .                           for Marked<S::$ity, $ity>
        .                       {
   20,492 ( 0.00%)                  fn decode(r: &mut Reader<'_>, s: &mut HandleStore<server::MarkedTypes<S>>) -> Self {
        .                               s.$ity.copy(handle::Handle::decode(r, &mut ()))
   40,984 ( 0.00%)                  }
        .                       }
        .           
        .                       impl<S: server::Types> Encode<HandleStore<server::MarkedTypes<S>>>
        .                           for Marked<S::$ity, $ity>
        .                       {
        .                           fn encode(self, w: &mut Writer, s: &mut HandleStore<server::MarkedTypes<S>>) {
  157,764 ( 0.01%)                      s.$ity.alloc(self).encode(w, s);
        .                           }
        .                       }
        .           
        .                       impl<S> DecodeMut<'_, '_, S> for $ity {
        .                           fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
        .                               $ity(handle::Handle::decode(r, s))
        .                           }
        .                       }
-- line 154 ----------------------------------------
-- line 175 ----------------------------------------
        .           
        .           // FIXME(eddyb) generate these impls by pattern-matching on the
        .           // names of methods - also could use the presence of `fn drop`
        .           // to distinguish between 'owned and 'interned, above.
        .           // Alternatively, special 'modes" could be listed of types in with_api
        .           // instead of pattern matching on methods, here and in server decl.
        .           
        .           impl Clone for TokenStream {
      852 ( 0.00%)      fn clone(&self) -> Self {
        .                   self.clone()
      852 ( 0.00%)      }
        .           }
        .           
        .           impl Clone for TokenStreamIter {
        .               fn clone(&self) -> Self {
        .                   self.clone()
        .               }
        .           }
        .           
        .           impl Clone for Group {
      594 ( 0.00%)      fn clone(&self) -> Self {
        .                   self.clone()
      594 ( 0.00%)      }
        .           }
        .           
        .           impl Clone for Literal {
      123 ( 0.00%)      fn clone(&self) -> Self {
        .                   self.clone()
      123 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for Literal {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   f.debug_struct("Literal")
        .                       // format the kind without quotes, as in `kind: Float`
        .                       .field("kind", &format_args!("{}", &self.debug_kind()))
        .                       .field("symbol", &self.symbol())
-- line 211 ----------------------------------------
-- line 219 ----------------------------------------
        .           impl Clone for SourceFile {
        .               fn clone(&self) -> Self {
        .                   self.clone()
        .               }
        .           }
        .           
        .           impl fmt::Debug for Span {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      660 ( 0.00%)          f.write_str(&self.debug())
        .               }
        .           }
        .           
        .           macro_rules! define_client_side {
        .               ($($name:ident {
        .                   $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)*;)*
        .               }),* $(,)?) => {
        .                   $(impl $name {
   62,490 ( 0.00%)              $(pub(crate) fn $method($($arg: $arg_ty),*) $(-> $ret_ty)* {
   32,015 ( 0.00%)                  Bridge::with(|bridge| {
        .                               let mut b = bridge.cached_buffer.take();
        .           
        .                               b.clear();
  322,590 ( 0.02%)                      api_tags::Method::$name(api_tags::$name::$method).encode(&mut b, &mut ());
   73,478 ( 0.00%)                      reverse_encode!(b; $($arg),*);
        .           
  645,180 ( 0.04%)                      b = bridge.dispatch.call(b);
        .           
  457,346 ( 0.03%)                      let r = Result::<_, PanicMessage>::decode(&mut &b[..], &mut ());
        .           
1,290,360 ( 0.08%)                      bridge.cached_buffer = b;
        .           
  179,153 ( 0.01%)                      r.unwrap_or_else(|e| panic::resume_unwind(e.into()))
        .                           })
   52,075 ( 0.00%)              })*
        .                   })*
        .               }
        .           }
        .           with_api!(self, self, define_client_side);
        .           
        .           enum BridgeState<'a> {
        .               /// No server is currently connected to this client.
        .               NotConnected,
-- line 260 ----------------------------------------
-- line 270 ----------------------------------------
        .           enum BridgeStateL {}
        .           
        .           impl<'a> scoped_cell::ApplyL<'a> for BridgeStateL {
        .               type Out = BridgeState<'a>;
        .           }
        .           
        .           thread_local! {
        .               static BRIDGE_STATE: scoped_cell::ScopedCell<BridgeStateL> =
        3 ( 0.00%)          scoped_cell::ScopedCell::new(BridgeState::NotConnected);
        .           }
        .           
        .           impl BridgeState<'_> {
        .               /// Take exclusive control of the thread-local
        .               /// `BridgeState`, and pass it to `f`, mutably.
        .               /// The state will be restored after `f` exits, even
        .               /// by panic, including modifications made to it by `f`.
        .               ///
        .               /// N.B., while `f` is running, the thread-local state
        .               /// is `BridgeState::InUse`.
   83,470 ( 0.00%)      fn with<R>(f: impl FnOnce(&mut BridgeState<'_>) -> R) -> R {
   98,799 ( 0.01%)          BRIDGE_STATE.with(|state| {
  573,307 ( 0.03%)              state.replace(BridgeState::InUse, |mut state| {
        .                           // FIXME(#52812) pass `f` directly to `replace` when `RefMutL` is gone
      288 ( 0.00%)                  f(&mut *state)
       48 ( 0.00%)              })
       48 ( 0.00%)          })
   68,072 ( 0.00%)      }
        .           }
        .           
        .           impl Bridge<'_> {
        .               pub(crate) fn is_available() -> bool {
        6 ( 0.00%)          BridgeState::with(|state| match state {
        .                       BridgeState::Connected(_) | BridgeState::InUse => true,
        .                       BridgeState::NotConnected => false,
        .                   })
        .               }
        .           
       72 ( 0.00%)      fn enter<R>(self, f: impl FnOnce() -> R) -> R {
       84 ( 0.00%)          let force_show_panics = self.force_show_panics;
        .                   // Hide the default panic output within `proc_macro` expansions.
        .                   // NB. the server can't do this because it may use a different libstd.
        .                   static HIDE_PANICS_DURING_EXPANSION: Once = Once::new();
       62 ( 0.00%)          HIDE_PANICS_DURING_EXPANSION.call_once(|| {
        7 ( 0.00%)              panic::update_hook(move |prev, info| {
        .                           let show = BridgeState::with(|state| match state {
        .                               BridgeState::NotConnected => true,
        .                               BridgeState::Connected(_) | BridgeState::InUse => force_show_panics,
        .                           });
        .                           if show {
        .                               prev(info)
        .                           }
        .                       });
        2 ( 0.00%)          });
        .           
      444 ( 0.00%)          BRIDGE_STATE.with(|state| state.set(BridgeState::Connected(self), f))
       24 ( 0.00%)      }
        .           
       60 ( 0.00%)      fn with<R>(f: impl FnOnce(&mut Bridge<'_>) -> R) -> R {
  768,636 ( 0.05%)          BridgeState::with(|state| match state {
        .                       BridgeState::NotConnected => {
        .                           panic!("procedural macro API is used outside of a procedural macro");
        .                       }
        .                       BridgeState::InUse => {
        .                           panic!("procedural macro API is used while it's already in use");
        .                       }
      156 ( 0.00%)              BridgeState::Connected(bridge) => f(bridge),
       48 ( 0.00%)          })
       48 ( 0.00%)      }
        .           }
        .           
        .           /// A client-side "global object" (usually a function pointer),
        .           /// which may be using a different `proc_macro` from the one
        .           /// used by the server, but can be interacted with compatibly.
        .           ///
        .           /// N.B., `F` must have FFI-friendly memory layout (e.g., a pointer).
        .           /// The call ABI of function pointers used for `F` doesn't
-- line 345 ----------------------------------------
-- line 353 ----------------------------------------
        .               pub(super) get_handle_counters: extern "C" fn() -> &'static HandleCounters,
        .               pub(super) run: extern "C" fn(Bridge<'_>, F) -> Buffer<u8>,
        .               pub(super) f: F,
        .           }
        .           
        .           /// Client-side helper for handling client panics, entering the bridge,
        .           /// deserializing input and serializing output.
        .           // FIXME(eddyb) maybe replace `Bridge::enter` with this?
       84 ( 0.00%)  fn run_client<A: for<'a, 's> DecodeMut<'a, 's, ()>, R: Encode<()>>(
        .               mut bridge: Bridge<'_>,
        .               f: impl FnOnce(A) -> R,
        .           ) -> Buffer<u8> {
        .               // The initial `cached_buffer` contains the input.
       72 ( 0.00%)      let mut b = bridge.cached_buffer.take();
        .           
      432 ( 0.00%)      panic::catch_unwind(panic::AssertUnwindSafe(|| {
      180 ( 0.00%)          bridge.enter(|| {
      228 ( 0.00%)              let reader = &mut &b[..];
       84 ( 0.00%)              let input = A::decode(reader, &mut ());
        .           
        .                       // Put the `cached_buffer` back in the `Bridge`, for requests.
      240 ( 0.00%)              Bridge::with(|bridge| bridge.cached_buffer = b.take());
        .           
      192 ( 0.00%)              let output = f(input);
        .           
        .                       // Take the `cached_buffer` back out, for the output value.
      228 ( 0.00%)              b = Bridge::with(|bridge| bridge.cached_buffer.take());
        .           
        .                       // HACK(eddyb) Separate encoding a success value (`Ok(output)`)
        .                       // from encoding a panic (`Err(e: PanicMessage)`) to avoid
        .                       // having handles outside the `bridge.enter(|| ...)` scope, and
        .                       // to catch panics that could happen while encoding the success.
        .                       //
        .                       // Note that panics should be impossible beyond this point, but
        .                       // this is defensively trying to avoid any accidental panicking
        .                       // reaching the `extern "C"` (which should `abort` but might not
        .                       // at the moment, so this is also potentially preventing UB).
       36 ( 0.00%)              b.clear();
      120 ( 0.00%)              Ok::<_, ()>(output).encode(&mut b, &mut ());
       48 ( 0.00%)          })
       24 ( 0.00%)      }))
        .               .map_err(PanicMessage::from)
       12 ( 0.00%)      .unwrap_or_else(|e| {
        .                   b.clear();
        .                   Err::<(), _>(e).encode(&mut b, &mut ());
        .               });
        .               b
       24 ( 0.00%)  }
        .           
        .           impl Client<fn(crate::TokenStream) -> crate::TokenStream> {
        .               #[rustc_allow_const_fn_unstable(const_fn)]
        1 ( 0.00%)      pub const fn expand1(f: fn(crate::TokenStream) -> crate::TokenStream) -> Self {
       14 ( 0.00%)          extern "C" fn run(
        .                       bridge: Bridge<'_>,
        .                       f: impl FnOnce(crate::TokenStream) -> crate::TokenStream,
        .                   ) -> Buffer<u8> {
       60 ( 0.00%)              run_client(bridge, |input| f(crate::TokenStream(input)).0)
        4 ( 0.00%)          }
        5 ( 0.00%)          Client { get_handle_counters: HandleCounters::get, run, f }
        1 ( 0.00%)      }
        .           }
        .           
        .           impl Client<fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream> {
        .               #[rustc_allow_const_fn_unstable(const_fn)]
        .               pub const fn expand2(
        .                   f: fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream,
        .               ) -> Self {
       70 ( 0.00%)          extern "C" fn run(
        .                       bridge: Bridge<'_>,
        .                       f: impl FnOnce(crate::TokenStream, crate::TokenStream) -> crate::TokenStream,
        .                   ) -> Buffer<u8> {
      180 ( 0.00%)              run_client(bridge, |(input, input2)| {
      200 ( 0.00%)                  f(crate::TokenStream(input), crate::TokenStream(input2)).0
       30 ( 0.00%)              })
       20 ( 0.00%)          }
        .                   Client { get_handle_counters: HandleCounters::get, run, f }
        .               }
        .           }
        .           
        .           #[repr(C)]
        .           #[derive(Copy, Clone)]
        .           pub enum ProcMacro {
        .               CustomDerive {
-- line 435 ----------------------------------------

  292,223 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/client.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/cmp.rs
--------------------------------------------------------------------------------
Ir               

-- line 18 ----------------------------------------
      .               fn memcmp(s1: *const u8, s2: *const u8, n: usize) -> i32;
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<A, B> PartialEq<[B]> for [A]
      .           where
      .               A: PartialEq<B>,
      .           {
629,302 ( 0.04%)      fn eq(&self, other: &[B]) -> bool {
214,832 ( 0.01%)          SlicePartialEq::equal(self, other)
542,739 ( 0.03%)      }
      .           
      .               fn ne(&self, other: &[B]) -> bool {
      .                   SlicePartialEq::not_equal(self, other)
      .               }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<T: Eq> Eq for [T] {}
      .           
      .           /// Implements comparison of vectors [lexicographically](Ord#lexicographical-comparison).
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<T: Ord> Ord for [T] {
      5 ( 0.00%)      fn cmp(&self, other: &[T]) -> Ordering {
      2 ( 0.00%)          SliceOrd::compare(self, other)
      2 ( 0.00%)      }
      .           }
      .           
      .           /// Implements comparison of vectors [lexicographically](Ord#lexicographical-comparison).
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<T: PartialOrd> PartialOrd for [T] {
     30 ( 0.00%)      fn partial_cmp(&self, other: &[T]) -> Option<Ordering> {
      .                   SlicePartialOrd::partial_compare(self, other)
     24 ( 0.00%)      }
      .           }
      .           
      .           #[doc(hidden)]
      .           // intermediate trait for specialization of slice's PartialEq
      .           trait SlicePartialEq<B> {
      .               fn equal(&self, other: &[B]) -> bool;
      .           
      .               fn not_equal(&self, other: &[B]) -> bool {
-- line 59 ----------------------------------------
-- line 62 ----------------------------------------
      .           }
      .           
      .           // Generic slice equality
      .           impl<A, B> SlicePartialEq<B> for [A]
      .           where
      .               A: PartialEq<B>,
      .           {
      .               default fn equal(&self, other: &[B]) -> bool {
549,304 ( 0.03%)          if self.len() != other.len() {
      .                       return false;
      .                   }
      .           
 14,510 ( 0.00%)          self.iter().zip(other.iter()).all(|(x, y)| x == y)
      .               }
      .           }
      .           
      .           // Use memcmp for bytewise equality when the types allow
      .           impl<A, B> SlicePartialEq<B> for [A]
      .           where
      .               A: BytewiseEquality<B>,
      .           {
966,744 ( 0.06%)      fn equal(&self, other: &[B]) -> bool {
316,368 ( 0.02%)          if self.len() != other.len() {
 92,571 ( 0.01%)              return false;
      .                   }
      .           
      .                   // SAFETY: `self` and `other` are references and are thus guaranteed to be valid.
      .                   // The two slices have been checked to have the same size above.
      .                   unsafe {
 59,380 ( 0.00%)              let size = mem::size_of_val(self);
643,582 ( 0.04%)              memcmp(self.as_ptr() as *const u8, other.as_ptr() as *const u8, size) == 0
      .                   }
551,925 ( 0.03%)      }
      .           }
      .           
      .           #[doc(hidden)]
      .           // intermediate trait for specialization of slice's PartialOrd
      .           trait SlicePartialOrd: Sized {
      .               fn partial_compare(left: &[Self], right: &[Self]) -> Option<Ordering>;
      .           }
      .           
-- line 102 ----------------------------------------
-- line 104 ----------------------------------------
      .               default fn partial_compare(left: &[A], right: &[A]) -> Option<Ordering> {
      .                   let l = cmp::min(left.len(), right.len());
      .           
      .                   // Slice to the loop iteration range to enable bound check
      .                   // elimination in the compiler
      .                   let lhs = &left[..l];
      .                   let rhs = &right[..l];
      .           
     18 ( 0.00%)          for i in 0..l {
      .                       match lhs[i].partial_cmp(&rhs[i]) {
      .                           Some(Ordering::Equal) => (),
      .                           non_eq => return non_eq,
      .                       }
      .                   }
      .           
      .                   left.len().partial_cmp(&right.len())
      .               }
-- line 120 ----------------------------------------
-- line 168 ----------------------------------------
      .               default fn compare(left: &[Self], right: &[Self]) -> Ordering {
      .                   let l = cmp::min(left.len(), right.len());
      .           
      .                   // Slice to the loop iteration range to enable bound check
      .                   // elimination in the compiler
      .                   let lhs = &left[..l];
      .                   let rhs = &right[..l];
      .           
      2 ( 0.00%)          for i in 0..l {
      .                       match lhs[i].cmp(&rhs[i]) {
      .                           Ordering::Equal => (),
      .                           non_eq => return non_eq,
      .                       }
      .                   }
      .           
      .                   left.len().cmp(&right.len())
      .               }
      .           }
      .           
      .           // memcmp compares a sequence of unsigned bytes lexicographically.
      .           // this matches the order we want for [u8], but no others (not even [i8]).
      .           impl SliceOrd for u8 {
      .               #[inline]
      8 ( 0.00%)      fn compare(left: &[Self], right: &[Self]) -> Ordering {
      .                   let order =
      .                       // SAFETY: `left` and `right` are references and are thus guaranteed to be valid.
      .                       // We use the minimum of both lengths which guarantees that both regions are
      .                       // valid for reads in that interval.
  3,516 ( 0.00%)              unsafe { memcmp(left.as_ptr(), right.as_ptr(), cmp::min(left.len(), right.len())) };
  7,015 ( 0.00%)          if order == 0 {
      .                       left.len().cmp(&right.len())
  1,989 ( 0.00%)          } else if order < 0 {
      .                       Less
      .                   } else {
      1 ( 0.00%)              Greater
      .                   }
      3 ( 0.00%)      }
      .           }
      .           
      .           // Hack to allow specializing on `Eq` even though `Eq` has a method.
      .           #[rustc_unsafe_specialization_marker]
      .           trait MarkerEq<T>: PartialEq<T> {}
      .           
      .           impl<T: Eq> MarkerEq<T> for T {}
      .           
-- line 212 ----------------------------------------
-- line 230 ----------------------------------------
      .           pub(super) trait SliceContains: Sized {
      .               fn slice_contains(&self, x: &[Self]) -> bool;
      .           }
      .           
      .           impl<T> SliceContains for T
      .           where
      .               T: PartialEq,
      .           {
    351 ( 0.00%)      default fn slice_contains(&self, x: &[Self]) -> bool {
 24,045 ( 0.00%)          x.iter().any(|y| *y == *self)
    464 ( 0.00%)      }
      .           }
      .           
      .           impl SliceContains for u8 {
      .               #[inline]
      .               fn slice_contains(&self, x: &[Self]) -> bool {
      .                   memchr::memchr(*self, x).is_some()
      .               }
      .           }
-- line 248 ----------------------------------------

846,129 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/cmp.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 180 ----------------------------------------
         .           /// assert_eq!(v, &[0.into()]);
         .           ///
         .           /// // Ensure that the last item was dropped.
         .           /// assert!(weak.upgrade().is_none());
         .           /// ```
         .           #[stable(feature = "drop_in_place", since = "1.8.0")]
         .           #[lang = "drop_in_place"]
         .           #[allow(unconditional_recursion)]
16,871,577 ( 1.00%)  pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
         .               // Code here does not matter - this is replaced by the
         .               // real drop glue by the compiler.
         .           
         .               // SAFETY: see comment above
         .               unsafe { drop_in_place(to_drop) }
         .           }
         .           
         .           /// Creates a null raw pointer.
-- line 196 ----------------------------------------
-- line 206 ----------------------------------------
         .           #[inline(always)]
         .           #[must_use]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_promotable]
         .           #[rustc_const_stable(feature = "const_ptr_null", since = "1.24.0")]
         .           #[rustc_diagnostic_item = "ptr_null"]
         .           pub const fn null<T>() -> *const T {
         .               0 as *const T
       368 ( 0.00%)  }
         .           
         .           /// Creates a null mutable raw pointer.
         .           ///
         .           /// # Examples
         .           ///
         .           /// ```
         .           /// use std::ptr;
         .           ///
-- line 222 ----------------------------------------
-- line 251 ----------------------------------------
         .           /// let x = [5, 6, 7];
         .           /// let raw_pointer = x.as_ptr();
         .           /// let slice = ptr::slice_from_raw_parts(raw_pointer, 3);
         .           /// assert_eq!(unsafe { &*slice }[2], 7);
         .           /// ```
         .           #[inline]
         .           #[stable(feature = "slice_from_raw_parts", since = "1.42.0")]
         .           #[rustc_const_unstable(feature = "const_slice_from_raw_parts", issue = "67456")]
    92,872 ( 0.01%)  pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
   116,090 ( 0.01%)      from_raw_parts(data.cast(), len)
    46,436 ( 0.00%)  }
         .           
         .           /// Performs the same functionality as [`slice_from_raw_parts`], except that a
         .           /// raw mutable slice is returned, as opposed to a raw immutable slice.
         .           ///
         .           /// See the documentation of [`slice_from_raw_parts`] for more details.
         .           ///
         .           /// This function is safe, but actually using the return value is unsafe.
         .           /// See the documentation of [`slice::from_raw_parts_mut`] for slice safety requirements.
-- line 269 ----------------------------------------
-- line 283 ----------------------------------------
         .           ///     (*slice)[2] = 99; // assign a value at an index in the slice
         .           /// };
         .           ///
         .           /// assert_eq!(unsafe { &*slice }[2], 99);
         .           /// ```
         .           #[inline]
         .           #[stable(feature = "slice_from_raw_parts", since = "1.42.0")]
         .           #[rustc_const_unstable(feature = "const_slice_from_raw_parts", issue = "67456")]
   324,056 ( 0.02%)  pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
   121,521 ( 0.01%)      from_raw_parts_mut(data.cast(), len)
    81,014 ( 0.00%)  }
         .           
         .           /// Swaps the values at two mutable locations of the same type, without
         .           /// deinitializing either.
         .           ///
         .           /// But for the following two exceptions, this function is semantically
         .           /// equivalent to [`mem::swap`]:
         .           ///
         .           /// * It operates on raw pointers instead of references. When references are
-- line 301 ----------------------------------------
-- line 366 ----------------------------------------
         .               let mut tmp = MaybeUninit::<T>::uninit();
         .           
         .               // Perform the swap
         .               // SAFETY: the caller must guarantee that `x` and `y` are
         .               // valid for writes and properly aligned. `tmp` cannot be
         .               // overlapping either `x` or `y` because `tmp` was just allocated
         .               // on the stack as a separate allocated object.
         .               unsafe {
         7 ( 0.00%)          copy_nonoverlapping(x, tmp.as_mut_ptr(), 1);
         7 ( 0.00%)          copy(y, x, 1); // `x` and `y` may overlap
         .                   copy_nonoverlapping(tmp.as_ptr(), y, 1);
         .               }
         .           }
         .           
         .           /// Swaps `count * size_of::<T>()` bytes between the two regions of memory
         .           /// beginning at `x` and `y`. The two regions must *not* overlap.
         .           ///
         .           /// # Safety
-- line 383 ----------------------------------------
-- line 448 ----------------------------------------
         .                       return;
         .                   }
         .               }
         .           
         .               // Direct swapping, for the cases not going through the block optimization.
         .               // SAFETY: the caller must guarantee that `x` and `y` are valid
         .               // for writes, properly aligned, and non-overlapping.
         .               unsafe {
        21 ( 0.00%)          let z = read(x);
         .                   copy_nonoverlapping(y, x, 1);
         .                   write(y, z);
         .               }
         .           }
         .           
         .           #[inline]
         .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
         .           const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {
-- line 464 ----------------------------------------
-- line 677 ----------------------------------------
         .           ///
         .           /// assert_eq!(s, "bar");
         .           /// ```
         .           ///
         .           /// [valid]: self#safety
         .           #[inline]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_ptr_read", issue = "80377")]
   313,889 ( 0.02%)  pub const unsafe fn read<T>(src: *const T) -> T {
         .               // We are calling the intrinsics directly to avoid function calls in the generated code
         .               // as `intrinsics::copy_nonoverlapping` is a wrapper function.
         .               extern "rust-intrinsic" {
         .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
         .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
         .               }
         .           
   123,234 ( 0.01%)      let mut tmp = MaybeUninit::<T>::uninit();
         .               // SAFETY: the caller must guarantee that `src` is valid for reads.
         .               // `src` cannot overlap `tmp` because `tmp` was just allocated on
         .               // the stack as a separate allocated object.
         .               //
         .               // Also, since we just wrote a valid value into `tmp`, it is guaranteed
         .               // to be properly initialized.
         .               unsafe {
   675,753 ( 0.04%)          copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
 5,501,852 ( 0.33%)          tmp.assume_init()
         .               }
   182,541 ( 0.01%)  }
         .           
         .           /// Reads the value from `src` without moving it. This leaves the
         .           /// memory in `src` unchanged.
         .           ///
         .           /// Unlike [`read`], `read_unaligned` works with unaligned pointers.
         .           ///
         .           /// # Safety
         .           ///
-- line 712 ----------------------------------------
-- line 872 ----------------------------------------
         .           /// swap(&mut foo, &mut bar);
         .           ///
         .           /// assert_eq!(foo, "bar");
         .           /// assert_eq!(bar, "foo");
         .           /// ```
         .           #[inline]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_ptr_write", issue = "86302")]
   280,319 ( 0.02%)  pub const unsafe fn write<T>(dst: *mut T, src: T) {
         .               // We are calling the intrinsics directly to avoid function calls in the generated code
         .               // as `intrinsics::copy_nonoverlapping` is a wrapper function.
         .               extern "rust-intrinsic" {
         .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
         .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
         .               }
         .           
         .               // SAFETY: the caller must guarantee that `dst` is valid for writes.
         .               // `dst` cannot overlap `src` because the caller has mutable access
         .               // to `dst` while `src` is owned by this function.
         .               unsafe {
21,457,777 ( 1.28%)          copy_nonoverlapping(&src as *const T, dst, 1);
         .                   intrinsics::forget(src);
         .               }
   154,218 ( 0.01%)  }
         .           
         .           /// Overwrites a memory location with the given value without reading or
         .           /// dropping the old value.
         .           ///
         .           /// Unlike [`write()`], the pointer may be unaligned.
         .           ///
         .           /// `write_unaligned` does not drop the contents of `dst`. This is safe, but it
         .           /// could leak allocations or resources, so care should be taken not to overwrite
-- line 903 ----------------------------------------
-- line 1206 ----------------------------------------
         .               if stride == 1 {
         .                   // `stride == 1` case can be computed more simply through `-p (mod a)`, but doing so
         .                   // inhibits LLVM's ability to select instructions like `lea`. Instead we compute
         .                   //
         .                   //    round_up_to_next_alignment(p, a) - p
         .                   //
         .                   // which distributes operations around the load-bearing, but pessimizing `and` sufficiently
         .                   // for LLVM to be able to utilize the various optimizations it knows about.
     1,722 ( 0.00%)          return wrapping_sub(
     5,118 ( 0.00%)              wrapping_add(p as usize, a_minus_one) & wrapping_sub(0, a),
         .                       p as usize,
         .                   );
         .               }
         .           
         .               let pmoda = p as usize & a_minus_one;
         .               if pmoda == 0 {
         .                   // Already aligned. Yay!
         .                   return 0;
-- line 1223 ----------------------------------------
-- line 1348 ----------------------------------------
         .           /// assert!(std::ptr::eq(
         .           ///     &wrapper as &dyn Trait as *const dyn Trait as *const u8,
         .           ///     &wrapper.member as &dyn Trait as *const dyn Trait as *const u8,
         .           /// ));
         .           /// ```
         .           #[stable(feature = "ptr_eq", since = "1.17.0")]
         .           #[inline]
         .           pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {
 1,439,617 ( 0.09%)      a == b
         .           }
         .           
         .           /// Hash a raw pointer.
         .           ///
         .           /// This can be used to hash a `&T` reference (which coerces to `*const T` implicitly)
         .           /// by its address rather than the value it points to
         .           /// (which is what the `Hash for &T` implementation does).
         .           ///
-- line 1364 ----------------------------------------

 3,048,007 ( 0.18%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir               

-- line 27 ----------------------------------------
      .           impl CacheEntry {
      .               #[inline]
      .               fn update(
      .                   &mut self,
      .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
      .                   pos: BytePos,
      .                   time_stamp: usize,
      .               ) {
  3,766 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
  2,120 ( 0.00%)              self.file = file;
  2,761 ( 0.00%)              self.file_index = file_idx;
      .                   }
      .           
  1,646 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
      .                   let line_bounds = self.file.line_bounds(line_index);
  6,546 ( 0.00%)          self.line_number = line_index + 1;
  9,819 ( 0.00%)          self.line = line_bounds;
      .                   self.touch(time_stamp);
      .               }
      .           
      .               #[inline]
      .               fn touch(&mut self, time_stamp: usize) {
 55,690 ( 0.00%)          self.time_stamp = time_stamp;
      .               }
      .           }
      .           
      .           #[derive(Clone)]
      .           pub struct CachingSourceMapView<'sm> {
      .               source_map: &'sm SourceMap,
      .               line_cache: [CacheEntry; 3],
      .               time_stamp: usize,
      .           }
      .           
      .           impl<'sm> CachingSourceMapView<'sm> {
  1,624 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
      .                   let files = source_map.files();
    812 ( 0.00%)          let first_file = files[0].clone();
      .                   let entry = CacheEntry {
      .                       time_stamp: 0,
      .                       line_number: 0,
      .                       line: BytePos(0)..BytePos(0),
      .                       file: first_file,
      .                       file_index: 0,
      .                   };
      .           
  4,060 ( 0.00%)          CachingSourceMapView {
      .                       source_map,
  5,684 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
      .                       time_stamp: 0,
      .                   }
  3,248 ( 0.00%)      }
      .           
      .               pub fn byte_pos_to_line_and_col(
      .                   &mut self,
      .                   pos: BytePos,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
      .                   self.time_stamp += 1;
      .           
      .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
      .                   };
      .           
      .                   let cache_entry = &mut self.line_cache[oldest];
      .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
      .           
      .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
      .               }
      .           
204,645 ( 0.01%)      pub fn span_data_to_lines_and_cols(
      .                   &mut self,
      .                   span_data: &SpanData,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
116,940 ( 0.01%)          self.time_stamp += 1;
      .           
      .                   // Check if lo and hi are in the cached lines.
 29,235 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
 29,235 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
      .           
 53,040 ( 0.00%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
      .                       // Cache hit for span lo and hi. Check if they belong to the same file.
      .                       let result = {
 52,910 ( 0.00%)                  let lo = &self.line_cache[lo_cache_idx as usize];
      .                           let hi = &self.line_cache[hi_cache_idx as usize];
      .           
158,730 ( 0.01%)                  if lo.file_index != hi.file_index {
      .                               return None;
      .                           }
      .           
      .                           (
 52,910 ( 0.00%)                      lo.file.clone(),
      .                               lo.line_number,
      .                               span_data.lo - lo.line.start,
 26,455 ( 0.00%)                      hi.line_number,
      .                               span_data.hi - hi.line.start,
      .                           )
      .                       };
      .           
 26,455 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
 26,455 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
      .           
105,820 ( 0.01%)              return Some(result);
      .                   }
      .           
      .                   // No cache hit or cache hit for only one of span lo and hi.
  5,430 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
      .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
      .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
      .                   } else {
      .                       self.oldest_cache_entry_index()
      .                   };
      .           
      .                   // If the entry doesn't point to the correct file, get the new file and index.
      .                   // Return early if the file containing beginning of span doesn't contain end of span.
 21,884 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
  5,670 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
  6,804 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
      .                           return None;
      .                       }
      .           
  4,536 ( 0.00%)              Some(new_file_and_idx)
      .                   } else {
      .                       let file = &self.line_cache[oldest].file;
  4,938 ( 0.00%)              if !file_contains(&file, span_data.hi) {
      .                           return None;
      .                       }
      .           
  4,938 ( 0.00%)              None
      .                   };
      .           
      .                   // Update the cache entries.
 13,900 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
      .                       // Oldest cache entry is for span_data.lo line.
      .                       (-1, -1) => {
      .                           let lo = &mut self.line_cache[oldest];
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
      .           
  6,666 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
      .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
      .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
      .                               let hi = &mut self.line_cache[next_oldest];
      .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
      .                               (oldest, next_oldest)
      .                           } else {
      .                               (oldest, oldest)
      .                           }
      .                       }
      .                       // Oldest cache entry is for span_data.lo line.
      .                       (-1, _) => {
      .                           let lo = &mut self.line_cache[oldest];
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
    130 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
    195 ( 0.00%)                  hi.touch(self.time_stamp);
      .                           (oldest, hi_cache_idx as usize)
      .                       }
      .                       // Oldest cache entry is for span_data.hi line.
      .                       (_, -1) => {
      .                           let hi = &mut self.line_cache[oldest];
    493 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
    986 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
  1,972 ( 0.00%)                  lo.touch(self.time_stamp);
      .                           (lo_cache_idx as usize, oldest)
      .                       }
      .                       _ => {
      .                           panic!();
      .                       }
      .                   };
      .           
      .                   let lo = &self.line_cache[lo_idx];
      .                   let hi = &self.line_cache[hi_idx];
      .           
      .                   // Span lo and hi may equal line end when last line doesn't
      .                   // end in newline, hence the inclusive upper bounds below.
  5,560 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
  2,780 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
  5,560 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
  2,780 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
 13,900 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
  8,340 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
  8,340 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
      .           
  8,340 ( 0.00%)          Some((
  2,780 ( 0.00%)              lo.file.clone(),
      .                       lo.line_number,
      .                       span_data.lo - lo.line.start,
  2,780 ( 0.00%)              hi.line_number,
      .                       span_data.hi - hi.line.start,
      .                   ))
263,115 ( 0.02%)      }
      .           
      .               fn cache_entry_index(&self, pos: BytePos) -> isize {
      .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
273,010 ( 0.02%)              if cache_entry.line.contains(&pos) {
      .                           return idx as isize;
      .                       }
      .                   }
      .           
      .                   -1
      .               }
      .           
      .               fn oldest_cache_entry_index(&self) -> usize {
      .                   let mut oldest = 0;
      .           
      .                   for idx in 1..self.line_cache.len() {
 13,332 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
      .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
      .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
      .           
      .                   for idx in 0..self.line_cache.len() {
  6,191 ( 0.00%)              if idx != avoid_idx
  3,502 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
      .                       {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
  5,670 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
  1,134 ( 0.00%)          if !self.source_map.files().is_empty() {
  2,268 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
      .                       let file = &self.source_map.files()[file_idx];
      .           
  9,072 ( 0.00%)              if file_contains(file, pos) {
      .                           return Some((file.clone(), file_idx));
      .                       }
      .                   }
      .           
      .                   None
  5,670 ( 0.00%)      }
      .           }
      .           
      .           #[inline]
      .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
      .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
      .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
      .               // purposes of converting a byte position to a line and column number, we can't come up with a
      .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

357,585 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/closure.rs
--------------------------------------------------------------------------------
Ir                 

-- line 10 ----------------------------------------
        .               type Env;
        .           }
        .           
        .           impl<'a, A, R> !Sync for Closure<'a, A, R> {}
        .           impl<'a, A, R> !Send for Closure<'a, A, R> {}
        .           
        .           impl<'a, A, R, F: FnMut(A) -> R> From<&'a mut F> for Closure<'a, A, R> {
        .               fn from(f: &'a mut F) -> Self {
  322,590 ( 0.02%)          unsafe extern "C" fn call<A, R, F: FnMut(A) -> R>(env: &mut Env, arg: A) -> R {
        .                       (*(env as *mut _ as *mut F))(arg)
  430,120 ( 0.03%)          }
        .                   Closure { call: call::<A, R, F>, env: unsafe { &mut *(f as *mut _ as *mut Env) } }
        .               }
        .           }
        .           
        .           impl<'a, A, R> Closure<'a, A, R> {
        .               pub fn call(&mut self, arg: A) -> R {
1,720,480 ( 0.10%)          unsafe { (self.call)(self.env, arg) }
        .               }
        .           }

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 157 ----------------------------------------
        .               pub fn opt_fn_def_id(self) -> Option<DefId> {
        .                   if let Res::Def(DefKind::Fn, def_id) = self.res { Some(def_id) } else { None }
        .               }
        .           }
        .           
        .           /// The "header" of an impl is everything outside the body: a Self type, a trait
        .           /// ref (in the case of a trait impl), and a set of predicates (from the
        .           /// bounds / where-clauses).
      340 ( 0.00%)  #[derive(Clone, Debug, TypeFoldable)]
        .           pub struct ImplHeader<'tcx> {
        .               pub impl_def_id: DefId,
        .               pub self_ty: Ty<'tcx>,
        .               pub trait_ref: Option<TraitRef<'tcx>>,
        .               pub predicates: Vec<Predicate<'tcx>>,
        .           }
        .           
        .           #[derive(
        .               Copy,
        .               Clone,
  167,184 ( 0.01%)      PartialEq,
        .               Eq,
        .               Hash,
        .               TyEncodable,
   16,300 ( 0.00%)      TyDecodable,
        .               HashStable,
        .               Debug,
        .               TypeFoldable
        .           )]
        .           pub enum ImplPolarity {
        .               /// `impl Trait for Type`
        .               Positive,
        .               /// `impl !Trait for Type`
-- line 188 ----------------------------------------
-- line 210 ----------------------------------------
        .                   match self {
        .                       Self::Positive => f.write_str("positive"),
        .                       Self::Negative => f.write_str("negative"),
        .                       Self::Reservation => f.write_str("reservation"),
        .                   }
        .               }
        .           }
        .           
  205,569 ( 0.01%)  #[derive(Clone, Debug, PartialEq, Eq, Copy, Hash, TyEncodable, TyDecodable, HashStable)]
        .           pub enum Visibility {
        .               /// Visible everywhere (including in other crates).
        .               Public,
        .               /// Visible only in the given crate-local module.
        .               Restricted(DefId),
        .               /// Not visible anywhere in the local crate. This is the visibility of private external items.
        .               Invisible,
        .           }
        .           
  145,942 ( 0.01%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable, TyEncodable, TyDecodable)]
        .           pub enum BoundConstness {
        .               /// `T: Trait`
        .               NotConst,
        .               /// `T: ~const Trait`
        .               ///
        .               /// Requires resolving to const only when we are in a const context.
        .               ConstIfConst,
        .           }
        .           
        .           impl BoundConstness {
        .               /// Reduce `self` and `constness` to two possible combined states instead of four.
   17,122 ( 0.00%)      pub fn and(&mut self, constness: hir::Constness) -> hir::Constness {
   25,683 ( 0.00%)          match (constness, self) {
        .                       (hir::Constness::Const, BoundConstness::ConstIfConst) => hir::Constness::Const,
        .                       (_, this) => {
   95,899 ( 0.01%)                  *this = BoundConstness::NotConst;
        .                           hir::Constness::NotConst
        .                       }
        .                   }
    8,561 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Display for BoundConstness {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   match self {
        .                       Self::NotConst => f.write_str("normal"),
        .                       Self::ConstIfConst => f.write_str("`~const`"),
        .                   }
-- line 256 ----------------------------------------
-- line 275 ----------------------------------------
        .               /// Tuple containing the types of closure captures after the feature `capture_disjoint_fields`
        .               pub after_feature_tys: Ty<'tcx>,
        .           }
        .           
        .           pub trait DefIdTree: Copy {
        .               fn parent(self, id: DefId) -> Option<DefId>;
        .           
        .               fn is_descendant_of(self, mut descendant: DefId, ancestor: DefId) -> bool {
        5 ( 0.00%)          if descendant.krate != ancestor.krate {
        .                       return false;
        .                   }
        .           
    5,498 ( 0.00%)          while descendant != ancestor {
   10,349 ( 0.00%)              match self.parent(descendant) {
        .                           Some(parent) => descendant = parent,
        .                           None => return false,
        .                       }
        .                   }
        .                   true
        .               }
        .           }
        .           
        .           impl<'tcx> DefIdTree for TyCtxt<'tcx> {
    7,246 ( 0.00%)      fn parent(self, id: DefId) -> Option<DefId> {
        .                   self.def_key(id).parent.map(|index| DefId { index, ..id })
   10,869 ( 0.00%)      }
        .           }
        .           
        .           impl Visibility {
      106 ( 0.00%)      pub fn from_hir(visibility: &hir::Visibility<'_>, id: hir::HirId, tcx: TyCtxt<'_>) -> Self {
      318 ( 0.00%)          match visibility.node {
        .                       hir::VisibilityKind::Public => Visibility::Public,
        .                       hir::VisibilityKind::Crate(_) => Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)),
        .                       hir::VisibilityKind::Restricted { ref path, .. } => match path.res {
        .                           // If there is no resolution, `resolve` will have already reported an error, so
        .                           // assume that the visibility is public to avoid reporting more privacy errors.
        .                           Res::Err => Visibility::Public,
        .                           def => Visibility::Restricted(def.def_id()),
        .                       },
        .                       hir::VisibilityKind::Inherited => {
      212 ( 0.00%)                  Visibility::Restricted(tcx.parent_module(id).to_def_id())
        .                       }
        .                   }
      106 ( 0.00%)      }
        .           
        .               /// Returns `true` if an item with this visibility is accessible from the given block.
   34,506 ( 0.00%)      pub fn is_accessible_from<T: DefIdTree>(self, module: DefId, tree: T) -> bool {
  154,916 ( 0.01%)          let restriction = match self {
        .                       // Public items are visible everywhere.
        .                       Visibility::Public => return true,
        .                       // Private items from other crates are visible nowhere.
        .                       Visibility::Invisible => return false,
        .                       // Restricted items are visible in an arbitrary local module.
    1,994 ( 0.00%)              Visibility::Restricted(other) if other.krate != module.krate => return false,
        .                       Visibility::Restricted(module) => module,
        .                   };
        .           
        .                   tree.is_descendant_of(module, restriction)
   34,506 ( 0.00%)      }
        .           
        .               /// Returns `true` if this visibility is at least as accessible as the given visibility
    2,196 ( 0.00%)      pub fn is_at_least<T: DefIdTree>(self, vis: Visibility, tree: T) -> bool {
    7,480 ( 0.00%)          let vis_restriction = match vis {
        .                       Visibility::Public => return self == Visibility::Public,
        .                       Visibility::Invisible => return true,
        .                       Visibility::Restricted(module) => module,
        .                   };
        .           
        .                   self.is_accessible_from(vis_restriction, tree)
    2,196 ( 0.00%)      }
        .           
        .               // Returns `true` if this item is visible anywhere in the local crate.
        .               pub fn is_visible_locally(self) -> bool {
        .                   match self {
        .                       Visibility::Public => true,
        .                       Visibility::Restricted(def_id) => def_id.is_local(),
        .                       Visibility::Invisible => false,
        .                   }
        .               }
        .           
        .               pub fn is_public(self) -> bool {
    2,224 ( 0.00%)          matches!(self, Visibility::Public)
    1,112 ( 0.00%)      }
        .           }
        .           
        .           /// The crate variances map is computed during typeck and contains the
        .           /// variance of every item in the local crate. You should not use it
        .           /// directly, because to do so will make your pass dependent on the
        .           /// HIR of every item in the local crate. Instead, use
        .           /// `tcx.variances_of()` to get the variance for a *particular*
        .           /// item.
-- line 365 ----------------------------------------
-- line 509 ----------------------------------------
        .           #[derive(Clone, Copy, Lift)]
        .           pub struct Predicate<'tcx> {
        .               inner: &'tcx PredicateInner<'tcx>,
        .           }
        .           
        .           impl<'tcx> PartialEq for Predicate<'tcx> {
        .               fn eq(&self, other: &Self) -> bool {
        .                   // `self.kind` is always interned.
   99,809 ( 0.01%)          ptr::eq(self.inner, other.inner)
   71,438 ( 0.00%)      }
        .           }
        .           
        .           impl Hash for Predicate<'_> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   (self.inner as *const PredicateInner<'_>).hash(s)
        .               }
        .           }
        .           
        .           impl<'tcx> Eq for Predicate<'tcx> {}
        .           
        .           impl<'tcx> Predicate<'tcx> {
        .               /// Gets the inner `Binder<'tcx, PredicateKind<'tcx>>`.
        .               #[inline]
        .               pub fn kind(self) -> Binder<'tcx, PredicateKind<'tcx>> {
  611,632 ( 0.04%)          self.inner.kind
        .               }
        .           
        .               /// Flips the polarity of a Predicate.
        .               ///
        .               /// Given `T: Trait` predicate it returns `T: !Trait` and given `T: !Trait` returns `T: Trait`.
        .               pub fn flip_polarity(&self, tcx: TyCtxt<'tcx>) -> Option<Predicate<'tcx>> {
        .                   let kind = self
        .                       .inner
-- line 541 ----------------------------------------
-- line 567 ----------------------------------------
        .                       flags: _,
        .                       outer_exclusive_binder: _,
        .                   } = self.inner;
        .           
        .                   kind.hash_stable(hcx, hasher);
        .               }
        .           }
        .           
3,558,474 ( 0.21%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
2,334,394 ( 0.14%)  #[derive(HashStable, TypeFoldable)]
        .           pub enum PredicateKind<'tcx> {
        .               /// Corresponds to `where Foo: Bar<A, B, C>`. `Foo` here would be
        .               /// the `Self` type of the trait reference and `A`, `B`, and `C`
        .               /// would be the type parameters.
        .               Trait(TraitPredicate<'tcx>),
        .           
        .               /// `where 'a: 'b`
        .               RegionOutlives(RegionOutlivesPredicate<'tcx>),
-- line 584 ----------------------------------------
-- line 594 ----------------------------------------
        .               WellFormed(GenericArg<'tcx>),
        .           
        .               /// Trait must be object-safe.
        .               ObjectSafe(DefId),
        .           
        .               /// No direct syntax. May be thought of as `where T: FnFoo<...>`
        .               /// for some substitutions `...` and `T` being a closure type.
        .               /// Satisfied (or refuted) once we know the closure's kind.
      593 ( 0.00%)      ClosureKind(DefId, SubstsRef<'tcx>, ClosureKind),
        .           
        .               /// `T1 <: T2`
        .               ///
        .               /// This obligation is created most often when we have two
        .               /// unresolved type variables and hence don't have enough
        .               /// information to process the subtyping obligation yet.
      685 ( 0.00%)      Subtype(SubtypePredicate<'tcx>),
        .           
        .               /// `T1` coerced to `T2`
        .               ///
        .               /// Like a subtyping obligation, this is created most often
        .               /// when we have two unresolved type variables and hence
        .               /// don't have enough information to process the coercion
        .               /// obligation yet. At the moment, we actually process coercions
        .               /// very much like subtyping and don't handle the full coercion
-- line 617 ----------------------------------------
-- line 645 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> Predicate<'tcx> {
        .               /// Performs a substitution suitable for going from a
        .               /// poly-trait-ref to supertraits that must hold if that
        .               /// poly-trait-ref holds. This is slightly different from a normal
        .               /// substitution in terms of what happens with bound regions. See
        .               /// lengthy comment below for details.
    8,685 ( 0.00%)      pub fn subst_supertrait(
        .                   self,
        .                   tcx: TyCtxt<'tcx>,
        .                   trait_ref: &ty::PolyTraitRef<'tcx>,
        .               ) -> Predicate<'tcx> {
        .                   // The interaction between HRTB and supertraits is not entirely
        .                   // obvious. Let me walk you (and myself) through an example.
        .                   //
        .                   // Let's start with an easy case. Consider two traits:
-- line 661 ----------------------------------------
-- line 731 ----------------------------------------
        .                   //    ['x, 'b]
        .                   let bound_pred = self.kind();
        .                   let pred_bound_vars = bound_pred.bound_vars();
        .                   let trait_bound_vars = trait_ref.bound_vars();
        .                   // 1) Self: Bar1<'a, '^0.0> -> Self: Bar1<'a, '^0.1>
        .                   let shifted_pred =
        .                       tcx.shift_bound_var_indices(trait_bound_vars.len(), bound_pred.skip_binder());
        .                   // 2) Self: Bar1<'a, '^0.1> -> T: Bar1<'^0.0, '^0.1>
      965 ( 0.00%)          let new = shifted_pred.subst(tcx, trait_ref.skip_binder().substs);
        .                   // 3) ['x] + ['b] -> ['x, 'b]
        .                   let bound_vars =
        .                       tcx.mk_bound_variable_kinds(trait_bound_vars.iter().chain(pred_bound_vars));
    8,685 ( 0.00%)          tcx.reuse_or_mk_predicate(self, ty::Binder::bind_with_vars(new, bound_vars))
    6,755 ( 0.00%)      }
        .           }
        .           
    4,812 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
  182,945 ( 0.01%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct TraitPredicate<'tcx> {
        .               pub trait_ref: TraitRef<'tcx>,
        .           
  683,448 ( 0.04%)      pub constness: BoundConstness,
        .           
  487,084 ( 0.03%)      pub polarity: ImplPolarity,
        .           }
        .           
        .           pub type PolyTraitPredicate<'tcx> = ty::Binder<'tcx, TraitPredicate<'tcx>>;
        .           
        .           impl<'tcx> TraitPredicate<'tcx> {
  699,544 ( 0.04%)      pub fn remap_constness(&mut self, tcx: TyCtxt<'tcx>, param_env: &mut ParamEnv<'tcx>) {
  612,311 ( 0.04%)          if unlikely!(Some(self.trait_ref.def_id) == tcx.lang_items().drop_trait()) {
        .                       // remap without changing constness of this predicate.
        .                       // this is because `T: ~const Drop` has a different meaning to `T: Drop`
      210 ( 0.00%)              param_env.remap_constness_with(self.constness)
        .                   } else {
   87,338 ( 0.01%)              *param_env = param_env.with_constness(self.constness.and(param_env.constness()))
        .                   }
  524,658 ( 0.03%)      }
        .           
        .               /// Remap the constness of this predicate before emitting it for diagnostics.
        .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
        .                   // this is different to `remap_constness` that callees want to print this predicate
        .                   // in case of selection errors. `T: ~const Drop` bounds cannot end up here when the
        .                   // param_env is not const because we it is always satisfied in non-const contexts.
        .                   if let hir::Constness::NotConst = param_env.constness() {
        .                       self.constness = ty::BoundConstness::NotConst;
        .                   }
        .               }
        .           
        .               pub fn def_id(self) -> DefId {
   51,198 ( 0.00%)          self.trait_ref.def_id
   25,599 ( 0.00%)      }
        .           
   88,493 ( 0.01%)      pub fn self_ty(self) -> Ty<'tcx> {
  265,479 ( 0.02%)          self.trait_ref.self_ty()
  176,986 ( 0.01%)      }
        .           }
        .           
        .           impl<'tcx> PolyTraitPredicate<'tcx> {
        .               pub fn def_id(self) -> DefId {
        .                   // Ok to skip binder since trait `DefId` does not care about regions.
        .                   self.skip_binder().def_id()
  143,631 ( 0.01%)      }
        .           
   11,711 ( 0.00%)      pub fn self_ty(self) -> ty::Binder<'tcx, Ty<'tcx>> {
   46,844 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.self_ty())
   23,422 ( 0.00%)      }
        .           
        .               /// Remap the constness of this predicate before emitting it for diagnostics.
        .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
        .                   *self = self.map_bound(|mut p| {
        .                       p.remap_constness_diag(param_env);
        .                       p
        .                   });
        .               }
        .           }
        .           
      246 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
   19,794 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
  116,563 ( 0.01%)  pub struct OutlivesPredicate<A, B>(pub A, pub B); // `A: B`
        .           pub type RegionOutlivesPredicate<'tcx> = OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>;
        .           pub type TypeOutlivesPredicate<'tcx> = OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>;
        .           pub type PolyRegionOutlivesPredicate<'tcx> = ty::Binder<'tcx, RegionOutlivesPredicate<'tcx>>;
        .           pub type PolyTypeOutlivesPredicate<'tcx> = ty::Binder<'tcx, TypeOutlivesPredicate<'tcx>>;
        .           
        .           /// Encodes that `a` must be a subtype of `b`. The `a_is_expected` flag indicates
        .           /// whether the `a` type is the type that we should label as "expected" when
        .           /// presenting user diagnostics.
        .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
    1,477 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct SubtypePredicate<'tcx> {
    2,429 ( 0.00%)      pub a_is_expected: bool,
        .               pub a: Ty<'tcx>,
        .               pub b: Ty<'tcx>,
        .           }
        .           pub type PolySubtypePredicate<'tcx> = ty::Binder<'tcx, SubtypePredicate<'tcx>>;
        .           
        .           /// Encodes that we have to coerce *from* the `a` type to the `b` type.
        .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
       12 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct CoercePredicate<'tcx> {
        .               pub a: Ty<'tcx>,
        .               pub b: Ty<'tcx>,
        .           }
        .           pub type PolyCoercePredicate<'tcx> = ty::Binder<'tcx, CoercePredicate<'tcx>>;
        .           
   40,758 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, TyEncodable, TyDecodable)]
   21,474 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub enum Term<'tcx> {
    5,575 ( 0.00%)      Ty(Ty<'tcx>),
        .               Const(&'tcx Const<'tcx>),
        .           }
        .           
        .           impl<'tcx> From<Ty<'tcx>> for Term<'tcx> {
        .               fn from(ty: Ty<'tcx>) -> Self {
        .                   Term::Ty(ty)
    4,431 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> From<&'tcx Const<'tcx>> for Term<'tcx> {
        .               fn from(c: &'tcx Const<'tcx>) -> Self {
        .                   Term::Const(c)
        .               }
        .           }
        .           
        .           impl<'tcx> Term<'tcx> {
        .               pub fn ty(&self) -> Option<Ty<'tcx>> {
    1,934 ( 0.00%)          if let Term::Ty(ty) = self { Some(ty) } else { None }
      967 ( 0.00%)      }
        .           }
        .           
        .           /// This kind of predicate has no *direct* correspondent in the
        .           /// syntax, but it roughly corresponds to the syntactic forms:
        .           ///
        .           /// 1. `T: TraitRef<..., Item = Type>`
        .           /// 2. `<T as TraitRef<...>>::Item == Type` (NYI)
        .           ///
        .           /// In particular, form #1 is "desugared" to the combination of a
        .           /// normal trait predicate (`T: TraitRef<...>`) and one of these
        .           /// predicates. Form #2 is a broader form in that it also permits
        .           /// equality between arbitrary types. Processing an instance of
        .           /// Form #2 eventually yields one of these `ProjectionPredicate`
        .           /// instances to normalize the LHS.
       42 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
    2,402 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct ProjectionPredicate<'tcx> {
        .               pub projection_ty: ProjectionTy<'tcx>,
    3,945 ( 0.00%)      pub term: Term<'tcx>,
        .           }
        .           
        .           pub type PolyProjectionPredicate<'tcx> = Binder<'tcx, ProjectionPredicate<'tcx>>;
        .           
        .           impl<'tcx> PolyProjectionPredicate<'tcx> {
        .               /// Returns the `DefId` of the trait of the associated item being projected.
        .               #[inline]
        .               pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
      212 ( 0.00%)          self.skip_binder().projection_ty.trait_def_id(tcx)
        .               }
        .           
        .               /// Get the [PolyTraitRef] required for this projection to be well formed.
        .               /// Note that for generic associated types the predicates of the associated
        .               /// type also need to be checked.
        .               #[inline]
        .               pub fn required_poly_trait_ref(&self, tcx: TyCtxt<'tcx>) -> PolyTraitRef<'tcx> {
        .                   // Note: unlike with `TraitRef::to_poly_trait_ref()`,
        .                   // `self.0.trait_ref` is permitted to have escaping regions.
        .                   // This is because here `self` has a `Binder` and so does our
        .                   // return value, so we are preserving the number of binding
        .                   // levels.
      252 ( 0.00%)          self.map_bound(|predicate| predicate.projection_ty.trait_ref(tcx))
        .               }
        .           
        .               pub fn term(&self) -> Binder<'tcx, Term<'tcx>> {
        .                   self.map_bound(|predicate| predicate.term)
        .               }
        .           
        .               /// The `DefId` of the `TraitItem` for the associated type.
        .               ///
        .               /// Note that this is not the `DefId` of the `TraitRef` containing this
        .               /// associated type, which is in `tcx.associated_item(projection_def_id()).container`.
        .               pub fn projection_def_id(&self) -> DefId {
        .                   // Ok to skip binder since trait `DefId` does not care about regions.
      414 ( 0.00%)          self.skip_binder().projection_ty.item_def_id
      207 ( 0.00%)      }
        .           }
        .           
        .           pub trait ToPolyTraitRef<'tcx> {
        .               fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx>;
        .           }
        .           
        .           impl<'tcx> ToPolyTraitRef<'tcx> for PolyTraitPredicate<'tcx> {
   15,248 ( 0.00%)      fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx> {
   15,248 ( 0.00%)          self.map_bound_ref(|trait_pred| trait_pred.trait_ref)
   15,248 ( 0.00%)      }
        .           }
        .           
        .           pub trait ToPredicate<'tcx> {
        .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx>;
        .           }
        .           
        .           impl<'tcx> ToPredicate<'tcx> for Binder<'tcx, PredicateKind<'tcx>> {
        .               #[inline(always)]
        .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
        .                   tcx.mk_predicate(self)
        .               }
        .           }
        .           
        .           impl<'tcx> ToPredicate<'tcx> for PolyTraitPredicate<'tcx> {
   37,903 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
  189,515 ( 0.01%)          self.map_bound(PredicateKind::Trait).to_predicate(tcx)
   75,806 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> ToPredicate<'tcx> for PolyRegionOutlivesPredicate<'tcx> {
       20 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
       40 ( 0.00%)          self.map_bound(PredicateKind::RegionOutlives).to_predicate(tcx)
       40 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> ToPredicate<'tcx> for PolyTypeOutlivesPredicate<'tcx> {
       92 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
      184 ( 0.00%)          self.map_bound(PredicateKind::TypeOutlives).to_predicate(tcx)
      184 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {
      208 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
    1,040 ( 0.00%)          self.map_bound(PredicateKind::Projection).to_predicate(tcx)
      416 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Predicate<'tcx> {
   95,132 ( 0.01%)      pub fn to_opt_poly_trait_pred(self) -> Option<PolyTraitPredicate<'tcx>> {
        .                   let predicate = self.kind();
  285,396 ( 0.02%)          match predicate.skip_binder() {
   48,305 ( 0.00%)              PredicateKind::Trait(t) => Some(predicate.rebind(t)),
        .                       PredicateKind::Projection(..)
        .                       | PredicateKind::Subtype(..)
        .                       | PredicateKind::Coerce(..)
        .                       | PredicateKind::RegionOutlives(..)
        .                       | PredicateKind::WellFormed(..)
        .                       | PredicateKind::ObjectSafe(..)
        .                       | PredicateKind::ClosureKind(..)
        .                       | PredicateKind::TypeOutlives(..)
        .                       | PredicateKind::ConstEvaluatable(..)
        .                       | PredicateKind::ConstEquate(..)
   37,905 ( 0.00%)              | PredicateKind::TypeWellFormedFromEnv(..) => None,
        .                   }
   95,132 ( 0.01%)      }
        .           
    1,318 ( 0.00%)      pub fn to_opt_type_outlives(self) -> Option<PolyTypeOutlivesPredicate<'tcx>> {
        .                   let predicate = self.kind();
    2,636 ( 0.00%)          match predicate.skip_binder() {
      693 ( 0.00%)              PredicateKind::TypeOutlives(data) => Some(predicate.rebind(data)),
        .                       PredicateKind::Trait(..)
        .                       | PredicateKind::Projection(..)
        .                       | PredicateKind::Subtype(..)
        .                       | PredicateKind::Coerce(..)
        .                       | PredicateKind::RegionOutlives(..)
        .                       | PredicateKind::WellFormed(..)
        .                       | PredicateKind::ObjectSafe(..)
        .                       | PredicateKind::ClosureKind(..)
        .                       | PredicateKind::ConstEvaluatable(..)
        .                       | PredicateKind::ConstEquate(..)
    1,087 ( 0.00%)              | PredicateKind::TypeWellFormedFromEnv(..) => None,
        .                   }
    1,318 ( 0.00%)      }
        .           }
        .           
        .           /// Represents the bounds declared on a particular set of type
        .           /// parameters. Should eventually be generalized into a flag list of
        .           /// where-clauses. You can obtain an `InstantiatedPredicates` list from a
        .           /// `GenericPredicates` by using the `instantiate` method. Note that this method
        .           /// reflects an important semantic invariant of `InstantiatedPredicates`: while
        .           /// the `GenericPredicates` are expressed in terms of the bound type
-- line 1005 ----------------------------------------
-- line 1011 ----------------------------------------
        .           /// Example:
        .           ///
        .           ///     struct Foo<T, U: Bar<T>> { ... }
        .           ///
        .           /// Here, the `GenericPredicates` for `Foo` would contain a list of bounds like
        .           /// `[[], [U:Bar<T>]]`. Now if there were some particular reference
        .           /// like `Foo<isize,usize>`, then the `InstantiatedPredicates` would be `[[],
        .           /// [usize:Bar<isize>]]`.
   30,356 ( 0.00%)  #[derive(Clone, Debug, TypeFoldable)]
        .           pub struct InstantiatedPredicates<'tcx> {
        .               pub predicates: Vec<Predicate<'tcx>>,
        .               pub spans: Vec<Span>,
        .           }
        .           
        .           impl<'tcx> InstantiatedPredicates<'tcx> {
       92 ( 0.00%)      pub fn empty() -> InstantiatedPredicates<'tcx> {
   23,794 ( 0.00%)          InstantiatedPredicates { predicates: vec![], spans: vec![] }
       92 ( 0.00%)      }
        .           
        .               pub fn is_empty(&self) -> bool {
        .                   self.predicates.is_empty()
        4 ( 0.00%)      }
        .           }
        .           
       35 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable, TyEncodable, TyDecodable, TypeFoldable)]
        .           pub struct OpaqueTypeKey<'tcx> {
        .               pub def_id: DefId,
        .               pub substs: SubstsRef<'tcx>,
        .           }
        .           
        .           rustc_index::newtype_index! {
        .               /// "Universes" are used during type- and trait-checking in the
        .               /// presence of `for<..>` binders to control what sets of names are
-- line 1043 ----------------------------------------
-- line 1091 ----------------------------------------
        .               /// ```
        .               /// for<'a> fn(&'a u32)
        .               /// ```
        .               ///
        .               /// Once we "enter" into this `for<'a>` quantifier, we are in a
        .               /// new universe that extends `U` -- in this new universe, we can
        .               /// name the region `'a`, but that region was not nameable from
        .               /// `U` because it was not in scope there.
   49,266 ( 0.00%)      pub fn next_universe(self) -> UniverseIndex {
        .                   UniverseIndex::from_u32(self.private.checked_add(1).unwrap())
  147,798 ( 0.01%)      }
        .           
        .               /// Returns `true` if `self` can name a name from `other` -- in other words,
        .               /// if the set of names in `self` is a superset of those in
        .               /// `other` (`self >= other`).
        .               pub fn can_name(self, other: UniverseIndex) -> bool {
   29,706 ( 0.00%)          self.private >= other.private
   14,853 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` cannot name some names from `other` -- in other
        .               /// words, if the set of names in `self` is a strict subset of
        .               /// those in `other` (`self < other`).
        .               pub fn cannot_name(self, other: UniverseIndex) -> bool {
      374 ( 0.00%)          self.private < other.private
      187 ( 0.00%)      }
        .           }
        .           
        .           /// The "placeholder index" fully defines a placeholder region, type, or const. Placeholders are
        .           /// identified by both a universe, as well as a name residing within that universe. Distinct bound
        .           /// regions/types/consts within the same universe simply have an unknown relationship to one
        .           /// another.
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, PartialOrd, Ord)]
        .           pub struct Placeholder<T> {
   10,678 ( 0.00%)      pub universe: UniverseIndex,
    4,130 ( 0.00%)      pub name: T,
        .           }
        .           
        .           impl<'a, T> HashStable<StableHashingContext<'a>> for Placeholder<T>
        .           where
        .               T: HashStable<StableHashingContext<'a>>,
        .           {
        .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
        .                   self.universe.hash_stable(hcx, hasher);
-- line 1133 ----------------------------------------
-- line 1194 ----------------------------------------
        .           /// aren't allowed to call that query: it is equal to `type_of(const_param)` which is
        .           /// trivial to compute.
        .           ///
        .           /// If we now want to use that constant in a place which potentionally needs its type
        .           /// we also pass the type of its `const_param`. This is the point of `WithOptConstParam`,
        .           /// except that instead of a `Ty` we bundle the `DefId` of the const parameter.
        .           /// Meaning that we need to use `type_of(const_param_did)` if `const_param_did` is `Some`
        .           /// to get the type of `did`.
    1,319 ( 0.00%)  #[derive(Copy, Clone, Debug, TypeFoldable, Lift, TyEncodable, TyDecodable)]
        .           #[derive(PartialEq, Eq, PartialOrd, Ord)]
        .           #[derive(Hash, HashStable)]
        .           pub struct WithOptConstParam<T> {
    2,562 ( 0.00%)      pub did: T,
        .               /// The `DefId` of the corresponding generic parameter in case `did` is
        .               /// a const argument.
        .               ///
        .               /// Note that even if `did` is a const argument, this may still be `None`.
        .               /// All queries taking `WithOptConstParam` start by calling `tcx.opt_const_param_of(def.did)`
        .               /// to potentially update `param_did` in the case it is `None`.
    2,358 ( 0.00%)      pub const_param_did: Option<DefId>,
        .           }
        .           
        .           impl<T> WithOptConstParam<T> {
        .               /// Creates a new `WithOptConstParam` setting `const_param_did` to `None`.
        .               #[inline(always)]
        .               pub fn unknown(did: T) -> WithOptConstParam<T> {
        .                   WithOptConstParam { did, const_param_did: None }
    4,001 ( 0.00%)      }
        .           }
        .           
        .           impl WithOptConstParam<LocalDefId> {
        .               /// Returns `Some((did, param_did))` if `def_id` is a const argument,
        .               /// `None` otherwise.
        .               #[inline(always)]
        .               pub fn try_lookup(did: LocalDefId, tcx: TyCtxt<'_>) -> Option<(LocalDefId, DefId)> {
        .                   tcx.opt_const_param_of(did).map(|param_did| (did, param_did))
        .               }
        .           
        .               /// In case `self` is unknown but `self.did` is a const argument, this returns
        .               /// a `WithOptConstParam` with the correct `const_param_did`.
        .               #[inline(always)]
        .               pub fn try_upgrade(self, tcx: TyCtxt<'_>) -> Option<WithOptConstParam<LocalDefId>> {
      721 ( 0.00%)          if self.const_param_did.is_none() {
    1,181 ( 0.00%)              if let const_param_did @ Some(_) = tcx.opt_const_param_of(self.did) {
        .                           return Some(WithOptConstParam { did: self.did, const_param_did });
        .                       }
        .                   }
        .           
        .                   None
        .               }
        .           
        .               pub fn to_global(self) -> WithOptConstParam<DefId> {
        .                   WithOptConstParam { did: self.did.to_def_id(), const_param_did: self.const_param_did }
        .               }
        .           
       68 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
       51 ( 0.00%)          if let Some(did) = self.const_param_did { did } else { self.did.to_def_id() }
       17 ( 0.00%)      }
        .           }
        .           
        .           impl WithOptConstParam<DefId> {
      500 ( 0.00%)      pub fn as_local(self) -> Option<WithOptConstParam<LocalDefId>> {
        .                   self.did
        .                       .as_local()
        .                       .map(|did| WithOptConstParam { did, const_param_did: self.const_param_did })
      500 ( 0.00%)      }
        .           
        .               pub fn as_const_arg(self) -> Option<(LocalDefId, DefId)> {
      749 ( 0.00%)          if let Some(param_did) = self.const_param_did {
      294 ( 0.00%)              if let Some(did) = self.did.as_local() {
        .                           return Some((did, param_did));
        .                       }
        .                   }
        .           
        .                   None
      312 ( 0.00%)      }
        .           
        .               pub fn is_local(self) -> bool {
        .                   self.did.is_local()
        .               }
        .           
      129 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
        .                   self.const_param_did.unwrap_or(self.did)
      129 ( 0.00%)      }
        .           }
        .           
        .           /// When type checking, we use the `ParamEnv` to track
        .           /// details about the set of where-clauses that are in scope at this
        .           /// particular point.
        .           #[derive(Copy, Clone, Hash, PartialEq, Eq)]
        .           pub struct ParamEnv<'tcx> {
        .               /// This packs both caller bounds and the reveal enum into one pointer.
-- line 1285 ----------------------------------------
-- line 1302 ----------------------------------------
        .               reveal: traits::Reveal,
        .               constness: hir::Constness,
        .           }
        .           
        .           unsafe impl rustc_data_structures::tagged_ptr::Tag for ParamTag {
        .               const BITS: usize = 2;
        .               #[inline]
        .               fn into_usize(self) -> usize {
   35,665 ( 0.00%)          match self {
        .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst } => 0,
        .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst } => 1,
        .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const } => 2,
        .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::Const } => 3,
        .                   }
        .               }
        .               #[inline]
        .               unsafe fn from_usize(ptr: usize) -> Self {
  948,345 ( 0.06%)          match ptr {
        .                       0 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst },
        .                       1 => Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst },
        .                       2 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const },
        .                       3 => Self { reveal: traits::Reveal::All, constness: hir::Constness::Const },
        .                       _ => std::hint::unreachable_unchecked(),
        .                   }
        .               }
        .           }
-- line 1327 ----------------------------------------
-- line 1405 ----------------------------------------
        .               pub fn new(
        .                   caller_bounds: &'tcx List<Predicate<'tcx>>,
        .                   reveal: Reveal,
        .                   constness: hir::Constness,
        .               ) -> Self {
        .                   ty::ParamEnv { packed: CopyTaggedPtr::new(caller_bounds, ParamTag { reveal, constness }) }
        .               }
        .           
       20 ( 0.00%)      pub fn with_user_facing(mut self) -> Self {
        .                   self.packed.set_tag(ParamTag { reveal: Reveal::UserFacing, ..self.packed.tag() });
        .                   self
       20 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn with_constness(mut self, constness: hir::Constness) -> Self {
        .                   self.packed.set_tag(ParamTag { constness, ..self.packed.tag() });
        .                   self
        .               }
        .           
        .               #[inline]
-- line 1424 ----------------------------------------
-- line 1430 ----------------------------------------
        .               #[inline]
        .               pub fn without_const(mut self) -> Self {
        .                   self.packed.set_tag(ParamTag { constness: hir::Constness::NotConst, ..self.packed.tag() });
        .                   self
        .               }
        .           
        .               #[inline]
        .               pub fn remap_constness_with(&mut self, mut constness: ty::BoundConstness) {
    4,661 ( 0.00%)          *self = self.with_constness(constness.and(self.constness()))
        .               }
        .           
        .               /// Returns a new parameter environment with the same clauses, but
        .               /// which "reveals" the true results of projections in all cases
        .               /// (even for associated types that are specializable). This is
        .               /// the desired behavior during codegen and certain other special
        .               /// contexts; normally though we want to use `Reveal::UserFacing`,
        .               /// which is the default.
        .               /// All opaque types in the caller_bounds of the `ParamEnv`
        .               /// will be normalized to their underlying types.
        .               /// See PR #65989 and issue #65918 for more details
    4,160 ( 0.00%)      pub fn with_reveal_all_normalized(self, tcx: TyCtxt<'tcx>) -> Self {
        .                   if self.packed.tag().reveal == traits::Reveal::All {
        .                       return self;
        .                   }
        .           
        .                   ParamEnv::new(
        .                       tcx.normalize_opaque_types(self.caller_bounds()),
        .                       Reveal::All,
        .                       self.constness(),
        .                   )
    4,680 ( 0.00%)      }
        .           
        .               /// Returns this same environment but with no caller bounds.
        .               #[inline]
        .               pub fn without_caller_bounds(self) -> Self {
        .                   Self::new(List::empty(), self.reveal(), self.constness())
        .               }
        .           
        .               /// Creates a suitable environment in which to perform trait
-- line 1468 ----------------------------------------
-- line 1472 ----------------------------------------
        .               /// pair it with the empty environment. This improves caching and is generally
        .               /// invisible.
        .               ///
        .               /// N.B., we preserve the environment when type-checking because it
        .               /// is possible for the user to have wacky where-clauses like
        .               /// `where Box<u32>: Copy`, which are clearly never
        .               /// satisfiable. We generally want to behave as if they were true,
        .               /// although the surrounding function is never reachable.
   41,747 ( 0.00%)      pub fn and<T: TypeFoldable<'tcx>>(self, value: T) -> ParamEnvAnd<'tcx, T> {
        .                   match self.reveal() {
        .                       Reveal::UserFacing => ParamEnvAnd { param_env: self, value },
        .           
        .                       Reveal::All => {
    5,649 ( 0.00%)                  if value.is_global() {
        .                               ParamEnvAnd { param_env: self.without_caller_bounds(), value }
        .                           } else {
        .                               ParamEnvAnd { param_env: self, value }
        .                           }
        .                       }
        .                   }
   40,664 ( 0.00%)      }
        .           }
        .           
        .           // FIXME(ecstaticmorse): Audit all occurrences of `without_const().to_predicate(tcx)` to ensure that
        .           // the constness of trait bounds is being propagated correctly.
        .           impl<'tcx> PolyTraitRef<'tcx> {
        .               #[inline]
        .               pub fn with_constness(self, constness: BoundConstness) -> PolyTraitPredicate<'tcx> {
    1,474 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
        .                       trait_ref,
        .                       constness,
        .                       polarity: ty::ImplPolarity::Positive,
        .                   })
        .               }
        .               #[inline]
        .               pub fn without_const(self) -> PolyTraitPredicate<'tcx> {
        .                   self.with_constness(BoundConstness::NotConst)
        .               }
        .           }
        .           
    1,613 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TypeFoldable)]
        .           pub struct ParamEnvAnd<'tcx, T> {
   12,492 ( 0.00%)      pub param_env: ParamEnv<'tcx>,
  223,205 ( 0.01%)      pub value: T,
        .           }
        .           
        .           impl<'tcx, T> ParamEnvAnd<'tcx, T> {
        .               pub fn into_parts(self) -> (ParamEnv<'tcx>, T) {
        .                   (self.param_env, self.value)
        .               }
        .           
        .               #[inline]
        .               pub fn without_const(mut self) -> Self {
        .                   self.param_env = self.param_env.without_const();
      963 ( 0.00%)          self
        .               }
        .           }
        .           
        .           impl<'a, 'tcx, T> HashStable<StableHashingContext<'a>> for ParamEnvAnd<'tcx, T>
        .           where
        .               T: HashStable<StableHashingContext<'a>>,
        .           {
        .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
-- line 1534 ----------------------------------------
-- line 1542 ----------------------------------------
        .           #[derive(Copy, Clone, Debug, HashStable)]
        .           pub struct Destructor {
        .               /// The `DefId` of the destructor method
        .               pub did: DefId,
        .               /// The constness of the destructor method
        .               pub constness: hir::Constness,
        .           }
        .           
    2,177 ( 0.00%)  bitflags! {
    3,402 ( 0.00%)      #[derive(HashStable, TyEncodable, TyDecodable)]
        .               pub struct VariantFlags: u32 {
        .                   const NO_VARIANT_FLAGS        = 0;
        .                   /// Indicates whether the field list of this variant is `#[non_exhaustive]`.
        .                   const IS_FIELD_LIST_NON_EXHAUSTIVE = 1 << 0;
        .                   /// Indicates whether this variant was obtained as part of recovering from
        .                   /// a syntactic error. May be incomplete or bogus.
        .                   const IS_RECOVERED = 1 << 1;
        .               }
        .           }
        .           
        .           /// Definition of a variant -- a struct's fields or an enum variant.
  228,142 ( 0.01%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
        .           pub struct VariantDef {
        .               /// `DefId` that identifies the variant itself.
        .               /// If this variant belongs to a struct or union, then this is a copy of its `DefId`.
        .               pub def_id: DefId,
        .               /// `DefId` that identifies the variant's constructor.
        .               /// If this variant is a struct variant, then this is `None`.
        .               pub ctor_def_id: Option<DefId>,
        .               /// Variant or struct name.
-- line 1571 ----------------------------------------
-- line 1592 ----------------------------------------
        .               /// `parent_did` is the `DefId` of the `AdtDef` representing the enum or struct that
        .               /// owns this variant. It is used for checking if a struct has `#[non_exhaustive]` w/out having
        .               /// to go through the redirect of checking the ctor's attributes - but compiling a small crate
        .               /// requires loading the `AdtDef`s for all the structs in the universe (e.g., coherence for any
        .               /// built-in trait), and we do not want to load attributes twice.
        .               ///
        .               /// If someone speeds up attribute loading to not be a performance concern, they can
        .               /// remove this hack and use the constructor `DefId` everywhere.
    4,384 ( 0.00%)      pub fn new(
        .                   name: Symbol,
        .                   variant_did: Option<DefId>,
        .                   ctor_def_id: Option<DefId>,
        .                   discr: VariantDiscr,
        .                   fields: Vec<FieldDef>,
        .                   ctor_kind: CtorKind,
        .                   adt_kind: AdtKind,
        .                   parent_did: DefId,
-- line 1608 ----------------------------------------
-- line 1611 ----------------------------------------
        .               ) -> Self {
        .                   debug!(
        .                       "VariantDef::new(name = {:?}, variant_did = {:?}, ctor_def_id = {:?}, discr = {:?},
        .                        fields = {:?}, ctor_kind = {:?}, adt_kind = {:?}, parent_did = {:?})",
        .                       name, variant_did, ctor_def_id, discr, fields, ctor_kind, adt_kind, parent_did,
        .                   );
        .           
        .                   let mut flags = VariantFlags::NO_VARIANT_FLAGS;
      548 ( 0.00%)          if is_field_list_non_exhaustive {
        .                       flags |= VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE;
        .                   }
        .           
    1,644 ( 0.00%)          if recovered {
        .                       flags |= VariantFlags::IS_RECOVERED;
        .                   }
        .           
    4,932 ( 0.00%)          VariantDef {
        .                       def_id: variant_did.unwrap_or(parent_did),
        .                       ctor_def_id,
        .                       name,
        .                       discr,
    2,192 ( 0.00%)              fields,
        .                       ctor_kind,
        .                       flags,
        .                   }
    2,192 ( 0.00%)      }
        .           
        .               /// Is this field list non-exhaustive?
        .               #[inline]
        .               pub fn is_field_list_non_exhaustive(&self) -> bool {
        .                   self.flags.intersects(VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE)
        .               }
        .           
        .               /// Was this variant obtained as part of recovering from a syntactic error?
        .               #[inline]
        .               pub fn is_recovered(&self) -> bool {
        .                   self.flags.intersects(VariantFlags::IS_RECOVERED)
        .               }
        .           
        .               /// Computes the `Ident` of this variant by looking up the `Span`
    2,912 ( 0.00%)      pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
    1,664 ( 0.00%)          Ident::new(self.name, tcx.def_ident_span(self.def_id).unwrap())
    3,744 ( 0.00%)      }
        .           }
        .           
  133,847 ( 0.01%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]
        .           pub enum VariantDiscr {
        .               /// Explicit value for this variant, i.e., `X = 123`.
        .               /// The `DefId` corresponds to the embedded constant.
        .               Explicit(DefId),
        .           
        .               /// The previous variant's discriminant plus one.
        .               /// For efficiency reasons, the distance from the
        .               /// last `Explicit` discriminant is being stored,
        .               /// or `0` for the first variant, if it has none.
        .               Relative(u32),
        .           }
        .           
  283,657 ( 0.02%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
        .           pub struct FieldDef {
        .               pub did: DefId,
        .               pub name: Symbol,
        .               pub vis: Visibility,
        .           }
        .           
    1,569 ( 0.00%)  bitflags! {
        .               #[derive(TyEncodable, TyDecodable, Default, HashStable)]
        .               pub struct ReprFlags: u8 {
        .                   const IS_C               = 1 << 0;
        .                   const IS_SIMD            = 1 << 1;
        .                   const IS_TRANSPARENT     = 1 << 2;
        .                   // Internal only for now. If true, don't reorder fields.
        .                   const IS_LINEAR          = 1 << 3;
        .                   // If true, don't expose any niche to type's context.
-- line 1684 ----------------------------------------
-- line 1689 ----------------------------------------
        .                   // Any of these flags being set prevent field reordering optimisation.
        .                   const IS_UNOPTIMISABLE   = ReprFlags::IS_C.bits
        .                                            | ReprFlags::IS_SIMD.bits
        .                                            | ReprFlags::IS_LINEAR.bits;
        .               }
        .           }
        .           
        .           /// Represents the repr options provided by the user,
  187,156 ( 0.01%)  #[derive(Copy, Clone, Debug, Eq, PartialEq, TyEncodable, TyDecodable, Default, HashStable)]
        .           pub struct ReprOptions {
        .               pub int: Option<attr::IntType>,
        .               pub align: Option<Align>,
        .               pub pack: Option<Align>,
        .               pub flags: ReprFlags,
        .               /// The seed to be used for randomizing a type's layout
        .               ///
        .               /// Note: This could technically be a `[u8; 16]` (a `u128`) which would
-- line 1705 ----------------------------------------
-- line 1706 ----------------------------------------
        .               /// be the "most accurate" hash as it'd encompass the item and crate
        .               /// hash without loss, but it does pay the price of being larger.
        .               /// Everything's a tradeoff, a `u64` seed should be sufficient for our
        .               /// purposes (primarily `-Z randomize-layout`)
        .               pub field_shuffle_seed: u64,
        .           }
        .           
        .           impl ReprOptions {
      260 ( 0.00%)      pub fn new(tcx: TyCtxt<'_>, did: DefId) -> ReprOptions {
        .                   let mut flags = ReprFlags::empty();
        .                   let mut size = None;
        .                   let mut max_align: Option<Align> = None;
        .                   let mut min_pack: Option<Align> = None;
        .           
        .                   // Generate a deterministically-derived seed from the item's path hash
        .                   // to allow for cross-crate compilation to actually work
        .                   let mut field_shuffle_seed = tcx.def_path_hash(did).0.to_smaller_hash();
        .           
        .                   // If the user defined a custom seed for layout randomization, xor the item's
        .                   // path hash with the user defined seed, this will allowing determinism while
        .                   // still allowing users to further randomize layout generation for e.g. fuzzing
       60 ( 0.00%)          if let Some(user_seed) = tcx.sess.opts.debugging_opts.layout_seed {
        .                       field_shuffle_seed ^= user_seed;
        .                   }
        .           
       80 ( 0.00%)          for attr in tcx.get_attrs(did).iter() {
    1,005 ( 0.00%)              for r in attr::find_repr_attrs(&tcx.sess, attr) {
        .                           flags.insert(match r {
        .                               attr::ReprC => ReprFlags::IS_C,
        .                               attr::ReprPacked(pack) => {
        .                                   let pack = Align::from_bytes(pack as u64).unwrap();
        .                                   min_pack = Some(if let Some(min_pack) = min_pack {
        .                                       min_pack.min(pack)
        .                                   } else {
        .                                       pack
-- line 1740 ----------------------------------------
-- line 1753 ----------------------------------------
        .                                   ReprFlags::empty()
        .                               }
        .                           });
        .                       }
        .                   }
        .           
        .                   // If `-Z randomize-layout` was enabled for the type definition then we can
        .                   // consider performing layout randomization
      160 ( 0.00%)          if tcx.sess.opts.debugging_opts.randomize_layout {
        .                       flags.insert(ReprFlags::RANDOMIZE_LAYOUT);
        .                   }
        .           
        .                   // This is here instead of layout because the choice must make it into metadata.
      120 ( 0.00%)          if !tcx.consider_optimizing(|| format!("Reorder fields of {:?}", tcx.def_path_str(did))) {
        .                       flags.insert(ReprFlags::IS_LINEAR);
        .                   }
        .           
       40 ( 0.00%)          Self { int: size, align: max_align, pack: min_pack, flags, field_shuffle_seed }
      560 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn simd(&self) -> bool {
        .                   self.flags.contains(ReprFlags::IS_SIMD)
        .               }
        .           
        .               #[inline]
        .               pub fn c(&self) -> bool {
-- line 1779 ----------------------------------------
-- line 1798 ----------------------------------------
        .               #[inline]
        .               pub fn hide_niche(&self) -> bool {
        .                   self.flags.contains(ReprFlags::HIDE_NICHE)
        .               }
        .           
        .               /// Returns the discriminant type, given these `repr` options.
        .               /// This must only be called on enums!
        .               pub fn discr_type(&self) -> attr::IntType {
    2,106 ( 0.00%)          self.int.unwrap_or(attr::SignedInt(ast::IntTy::Isize))
    1,175 ( 0.00%)      }
        .           
        .               /// Returns `true` if this `#[repr()]` should inhabit "smart enum
        .               /// layout" optimizations, such as representing `Foo<&T>` as a
        .               /// single pointer.
        .               pub fn inhibit_enum_layout_opt(&self) -> bool {
      380 ( 0.00%)          self.c() || self.int.is_some()
        .               }
        .           
        .               /// Returns `true` if this `#[repr()]` should inhibit struct field reordering
        .               /// optimizations, such as with `repr(C)`, `repr(packed(1))`, or `repr(<int>)`.
        .               pub fn inhibit_struct_field_reordering_opt(&self) -> bool {
      943 ( 0.00%)          if let Some(pack) = self.pack {
        .                       if pack.bytes() == 1 {
        .                           return true;
        .                       }
        .                   }
        .           
    1,888 ( 0.00%)          self.flags.intersects(ReprFlags::IS_UNOPTIMISABLE) || self.int.is_some()
        .               }
        .           
        .               /// Returns `true` if this type is valid for reordering and `-Z randomize-layout`
        .               /// was enabled for its declaration crate
        .               pub fn can_randomize_type_layout(&self) -> bool {
      471 ( 0.00%)          !self.inhibit_struct_field_reordering_opt()
        .                       && self.flags.contains(ReprFlags::RANDOMIZE_LAYOUT)
        .               }
        .           
        .               /// Returns `true` if this `#[repr()]` should inhibit union ABI optimisations.
        .               pub fn inhibit_union_abi_opt(&self) -> bool {
        .                   self.c()
        .               }
        .           }
        .           
        .           impl<'tcx> FieldDef {
        .               /// Returns the type of this field. The resulting type is not normalized. The `subst` is
        .               /// typically obtained via the second field of [`TyKind::Adt`].
  151,809 ( 0.01%)      pub fn ty(&self, tcx: TyCtxt<'tcx>, subst: SubstsRef<'tcx>) -> Ty<'tcx> {
   43,374 ( 0.00%)          tcx.type_of(self.did).subst(tcx, subst)
  173,496 ( 0.01%)      }
        .           
        .               /// Computes the `Ident` of this variant by looking up the `Span`
    3,318 ( 0.00%)      pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
    1,896 ( 0.00%)          Ident::new(self.name, tcx.def_ident_span(self.did).unwrap())
    4,266 ( 0.00%)      }
        .           }
        .           
        .           pub type Attributes<'tcx> = &'tcx [ast::Attribute];
        .           
        .           #[derive(Debug, PartialEq, Eq)]
        .           pub enum ImplOverlapKind {
        .               /// These impls are always allowed to overlap.
        .               Permitted {
-- line 1859 ----------------------------------------
-- line 1891 ----------------------------------------
        .               /// marker traits.
        .               /// 4. Neither of the impls can have any where-clauses.
        .               ///
        .               /// Once `traitobject` 0.1.0 is no longer an active concern, this hack can be removed.
        .               Issue33140,
        .           }
        .           
        .           impl<'tcx> TyCtxt<'tcx> {
   11,064 ( 0.00%)      pub fn typeck_body(self, body: hir::BodyId) -> &'tcx TypeckResults<'tcx> {
    2,766 ( 0.00%)          self.typeck(self.hir().body_owner_def_id(body))
   11,064 ( 0.00%)      }
        .           
        .               pub fn provided_trait_methods(self, id: DefId) -> impl 'tcx + Iterator<Item = &'tcx AssocItem> {
        .                   self.associated_items(id)
        .                       .in_definition_order()
        .                       .filter(|item| item.kind == AssocKind::Fn && item.defaultness.has_value())
        .               }
        .           
        .               fn item_name_from_hir(self, def_id: DefId) -> Option<Ident> {
-- line 1909 ----------------------------------------
-- line 1947 ----------------------------------------
        .               ///
        .               /// See [`item_name`][Self::item_name] for more information.
        .               pub fn opt_item_name(self, def_id: DefId) -> Option<Ident> {
        .                   // Look at the HIR first so the span will be correct if this is a local item.
        .                   self.item_name_from_hir(def_id)
        .                       .or_else(|| self.item_name_from_def_id(def_id).map(Ident::with_dummy_span))
        .               }
        .           
  210,040 ( 0.01%)      pub fn opt_associated_item(self, def_id: DefId) -> Option<&'tcx AssocItem> {
   84,016 ( 0.01%)          if let DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy = self.def_kind(def_id) {
        .                       Some(self.associated_item(def_id))
        .                   } else {
        .                       None
        .                   }
  189,036 ( 0.01%)      }
        .           
      706 ( 0.00%)      pub fn field_index(self, hir_id: hir::HirId, typeck_results: &TypeckResults<'_>) -> usize {
        .                   typeck_results.field_indices().get(hir_id).cloned().expect("no index for a field")
    1,412 ( 0.00%)      }
        .           
        .               pub fn find_field_index(self, ident: Ident, variant: &VariantDef) -> Option<usize> {
        .                   variant
        .                       .fields
        .                       .iter()
        .                       .position(|field| self.hygienic_eq(ident, field.ident(self), variant.def_id))
        .               }
        .           
        .               /// Returns `true` if the impls are the same polarity and the trait either
        .               /// has no items or is annotated `#[marker]` and prevents item overrides.
      540 ( 0.00%)      pub fn impls_are_allowed_to_overlap(
        .                   self,
        .                   def_id1: DefId,
        .                   def_id2: DefId,
        .               ) -> Option<ImplOverlapKind> {
        .                   // If either trait impl references an error, they're allowed to overlap,
        .                   // as one of them essentially doesn't exist.
        .                   if self.impl_trait_ref(def_id1).map_or(false, |tr| tr.references_error())
      108 ( 0.00%)              || self.impl_trait_ref(def_id2).map_or(false, |tr| tr.references_error())
        .                   {
        .                       return Some(ImplOverlapKind::Permitted { marker: false });
        .                   }
        .           
      539 ( 0.00%)          match (self.impl_polarity(def_id1), self.impl_polarity(def_id2)) {
        .                       (ImplPolarity::Reservation, _) | (_, ImplPolarity::Reservation) => {
        .                           // `#[rustc_reservation_impl]` impls don't overlap with anything
        .                           debug!(
        .                               "impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (reservations)",
        .                               def_id1, def_id2
        .                           );
        .                           return Some(ImplOverlapKind::Permitted { marker: false });
        .                       }
-- line 1997 ----------------------------------------
-- line 2004 ----------------------------------------
        .                           );
        .                           return None;
        .                       }
        .                       (ImplPolarity::Positive, ImplPolarity::Positive)
        .                       | (ImplPolarity::Negative, ImplPolarity::Negative) => {}
        .                   };
        .           
        .                   let is_marker_overlap = {
      530 ( 0.00%)              let is_marker_impl = |def_id: DefId| -> bool {
      159 ( 0.00%)                  let trait_ref = self.impl_trait_ref(def_id);
      159 ( 0.00%)                  trait_ref.map_or(false, |tr| self.trait_def(tr.def_id).is_marker)
      424 ( 0.00%)              };
      212 ( 0.00%)              is_marker_impl(def_id1) && is_marker_impl(def_id2)
        .                   };
        .           
        .                   if is_marker_overlap {
        .                       debug!(
        .                           "impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (marker overlap)",
        .                           def_id1, def_id2
        .                       );
        .                       Some(ImplOverlapKind::Permitted { marker: true })
        .                   } else {
      212 ( 0.00%)              if let Some(self_ty1) = self.issue33140_self_ty(def_id1) {
        .                           if let Some(self_ty2) = self.issue33140_self_ty(def_id2) {
        .                               if self_ty1 == self_ty2 {
        .                                   debug!(
        .                                       "impls_are_allowed_to_overlap({:?}, {:?}) - issue #33140 HACK",
        .                                       def_id1, def_id2
        .                                   );
        .                                   return Some(ImplOverlapKind::Issue33140);
        .                               } else {
-- line 2034 ----------------------------------------
-- line 2038 ----------------------------------------
        .                                   );
        .                               }
        .                           }
        .                       }
        .           
        .                       debug!("impls_are_allowed_to_overlap({:?}, {:?}) = None", def_id1, def_id2);
        .                       None
        .                   }
      432 ( 0.00%)      }
        .           
        .               /// Returns `ty::VariantDef` if `res` refers to a struct,
        .               /// or variant or their constructors, panics otherwise.
      896 ( 0.00%)      pub fn expect_variant_res(self, res: Res) -> &'tcx VariantDef {
    1,536 ( 0.00%)          match res {
        .                       Res::Def(DefKind::Variant, did) => {
        .                           let enum_did = self.parent(did).unwrap();
        .                           self.adt_def(enum_did).variant_with_id(did)
        .                       }
        .                       Res::Def(DefKind::Struct | DefKind::Union, did) => self.adt_def(did).non_enum_variant(),
        .                       Res::Def(DefKind::Ctor(CtorOf::Variant, ..), variant_ctor_did) => {
        .                           let variant_did = self.parent(variant_ctor_did).unwrap();
        .                           let enum_did = self.parent(variant_did).unwrap();
-- line 2059 ----------------------------------------
-- line 2060 ----------------------------------------
        .                           self.adt_def(enum_did).variant_with_ctor_id(variant_ctor_did)
        .                       }
        .                       Res::Def(DefKind::Ctor(CtorOf::Struct, ..), ctor_did) => {
        .                           let struct_did = self.parent(ctor_did).expect("struct ctor has no parent");
        .                           self.adt_def(struct_did).non_enum_variant()
        .                       }
        .                       _ => bug!("expect_variant_res used with unexpected res {:?}", res),
        .                   }
    1,024 ( 0.00%)      }
        .           
        .               /// Returns the possibly-auto-generated MIR of a `(DefId, Subst)` pair.
        .               pub fn instance_mir(self, instance: ty::InstanceDef<'tcx>) -> &'tcx Body<'tcx> {
        .                   match instance {
        .                       ty::InstanceDef::Item(def) => match self.def_kind(def.did) {
        .                           DefKind::Const
        .                           | DefKind::Static
        .                           | DefKind::AssocConst
-- line 2076 ----------------------------------------
-- line 2091 ----------------------------------------
        .                       | ty::InstanceDef::Virtual(..)
        .                       | ty::InstanceDef::ClosureOnceShim { .. }
        .                       | ty::InstanceDef::DropGlue(..)
        .                       | ty::InstanceDef::CloneShim(..) => self.mir_shims(instance),
        .                   }
        .               }
        .           
        .               /// Gets the attributes of a definition.
   72,690 ( 0.00%)      pub fn get_attrs(self, did: DefId) -> Attributes<'tcx> {
   21,807 ( 0.00%)          if let Some(did) = did.as_local() {
   16,890 ( 0.00%)              self.hir().attrs(self.hir().local_def_id_to_hir_id(did))
        .                   } else {
        .                       self.item_attrs(did)
        .                   }
   58,152 ( 0.00%)      }
        .           
        .               /// Determines whether an item is annotated with an attribute.
    9,148 ( 0.00%)      pub fn has_attr(self, did: DefId, attr: Symbol) -> bool {
   26,739 ( 0.00%)          self.sess.contains_name(&self.get_attrs(did), attr)
        .               }
        .           
        .               /// Determines whether an item is annotated with `doc(hidden)`.
      567 ( 0.00%)      pub fn is_doc_hidden(self, did: DefId) -> bool {
       81 ( 0.00%)          self.get_attrs(did)
        .                       .iter()
       52 ( 0.00%)              .filter_map(|attr| if attr.has_name(sym::doc) { attr.meta_item_list() } else { None })
        .                       .any(|items| items.iter().any(|item| item.has_name(sym::hidden)))
      648 ( 0.00%)      }
        .           
        .               /// Returns `true` if this is an `auto trait`.
  175,518 ( 0.01%)      pub fn trait_is_auto(self, trait_def_id: DefId) -> bool {
   25,074 ( 0.00%)          self.trait_def(trait_def_id).has_auto_impl
  200,592 ( 0.01%)      }
        .           
        .               /// Returns layout of a generator. Layout might be unavailable if the
        .               /// generator is tainted by errors.
        .               pub fn generator_layout(self, def_id: DefId) -> Option<&'tcx GeneratorLayout<'tcx>> {
        .                   self.optimized_mir(def_id).generator_layout()
        .               }
        .           
        .               /// Given the `DefId` of an impl, returns the `DefId` of the trait it implements.
        .               /// If it implements no trait, returns `None`.
    4,137 ( 0.00%)      pub fn trait_id_of_impl(self, def_id: DefId) -> Option<DefId> {
        .                   self.impl_trait_ref(def_id).map(|tr| tr.def_id)
    5,319 ( 0.00%)      }
        .           
        .               /// If the given defid describes a method belonging to an impl, returns the
        .               /// `DefId` of the impl that the method belongs to; otherwise, returns `None`.
      147 ( 0.00%)      pub fn impl_of_method(self, def_id: DefId) -> Option<DefId> {
      588 ( 0.00%)          self.opt_associated_item(def_id).and_then(|trait_item| match trait_item.container {
        .                       TraitContainer(_) => None,
        .                       ImplContainer(def_id) => Some(def_id),
        .                   })
      294 ( 0.00%)      }
        .           
        .               /// Looks up the span of `impl_did` if the impl is local; otherwise returns `Err`
        .               /// with the name of the crate containing the impl.
        .               pub fn span_of_impl(self, impl_did: DefId) -> Result<Span, Symbol> {
        .                   if let Some(impl_did) = impl_did.as_local() {
        .                       Ok(self.def_span(impl_did))
        .                   } else {
        .                       Err(self.crate_name(impl_did.krate))
        .                   }
        .               }
        .           
        .               /// Hygienically compares a use-site name (`use_name`) for a field or an associated item with
        .               /// its supposed definition name (`def_name`). The method also needs `DefId` of the supposed
        .               /// definition's parent/scope to perform comparison.
    6,736 ( 0.00%)      pub fn hygienic_eq(self, use_name: Ident, def_name: Ident, def_parent_def_id: DefId) -> bool {
        .                   // We could use `Ident::eq` here, but we deliberately don't. The name
        .                   // comparison fails frequently, and we want to avoid the expensive
        .                   // `normalize_to_macros_2_0()` calls required for the span comparison whenever possible.
      842 ( 0.00%)          use_name.name == def_name.name
    2,397 ( 0.00%)              && use_name
        .                           .span
        .                           .ctxt()
        .                           .hygienic_eq(def_name.span.ctxt(), self.expn_that_defined(def_parent_def_id))
    6,736 ( 0.00%)      }
        .           
    1,764 ( 0.00%)      pub fn adjust_ident(self, mut ident: Ident, scope: DefId) -> Ident {
      392 ( 0.00%)          ident.span.normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope));
      392 ( 0.00%)          ident
    1,568 ( 0.00%)      }
        .           
    7,911 ( 0.00%)      pub fn adjust_ident_and_get_scope(
        .                   self,
        .                   mut ident: Ident,
        .                   scope: DefId,
        .                   block: hir::HirId,
        .               ) -> (Ident, DefId) {
      879 ( 0.00%)          let scope = ident
        .                       .span
        .                       .normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope))
        .                       .and_then(|actual_expansion| actual_expansion.expn_data().parent_module)
    3,516 ( 0.00%)              .unwrap_or_else(|| self.parent_module(block).to_def_id());
    5,274 ( 0.00%)          (ident, scope)
    7,911 ( 0.00%)      }
        .           
    1,477 ( 0.00%)      pub fn is_object_safe(self, key: DefId) -> bool {
        .                   self.object_safety_violations(key).is_empty()
    1,688 ( 0.00%)      }
        .           }
        .           
        .           /// Yields the parent function's `LocalDefId` if `def_id` is an `impl Trait` definition.
    2,922 ( 0.00%)  pub fn is_impl_trait_defn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<LocalDefId> {
    2,922 ( 0.00%)      let def_id = def_id.as_local()?;
    2,372 ( 0.00%)      if let Node::Item(item) = tcx.hir().get_by_def_id(def_id) {
      754 ( 0.00%)          if let hir::ItemKind::OpaqueTy(ref opaque_ty) = item.kind {
      228 ( 0.00%)              return match opaque_ty.origin {
        .                           hir::OpaqueTyOrigin::FnReturn(parent) | hir::OpaqueTyOrigin::AsyncFn(parent) => {
        .                               Some(parent)
        .                           }
        .                           hir::OpaqueTyOrigin::TyAlias => None,
        .                       };
        .                   }
        .               }
        .               None
    3,896 ( 0.00%)  }
        .           
        .           pub fn int_ty(ity: ast::IntTy) -> IntTy {
        .               match ity {
        .                   ast::IntTy::Isize => IntTy::Isize,
        .                   ast::IntTy::I8 => IntTy::I8,
        .                   ast::IntTy::I16 => IntTy::I16,
        .                   ast::IntTy::I32 => IntTy::I32,
        .                   ast::IntTy::I64 => IntTy::I64,
-- line 2216 ----------------------------------------
-- line 2224 ----------------------------------------
        .                   ast::UintTy::U8 => UintTy::U8,
        .                   ast::UintTy::U16 => UintTy::U16,
        .                   ast::UintTy::U32 => UintTy::U32,
        .                   ast::UintTy::U64 => UintTy::U64,
        .                   ast::UintTy::U128 => UintTy::U128,
        .               }
        .           }
        .           
        4 ( 0.00%)  pub fn float_ty(fty: ast::FloatTy) -> FloatTy {
        .               match fty {
        .                   ast::FloatTy::F32 => FloatTy::F32,
        .                   ast::FloatTy::F64 => FloatTy::F64,
        .               }
        4 ( 0.00%)  }
        .           
       60 ( 0.00%)  pub fn ast_int_ty(ity: IntTy) -> ast::IntTy {
        .               match ity {
        .                   IntTy::Isize => ast::IntTy::Isize,
        .                   IntTy::I8 => ast::IntTy::I8,
        .                   IntTy::I16 => ast::IntTy::I16,
        .                   IntTy::I32 => ast::IntTy::I32,
        .                   IntTy::I64 => ast::IntTy::I64,
        .                   IntTy::I128 => ast::IntTy::I128,
        .               }
       60 ( 0.00%)  }
        .           
        .           pub fn ast_uint_ty(uty: UintTy) -> ast::UintTy {
        .               match uty {
        .                   UintTy::Usize => ast::UintTy::Usize,
        .                   UintTy::U8 => ast::UintTy::U8,
        .                   UintTy::U16 => ast::UintTy::U16,
        .                   UintTy::U32 => ast::UintTy::U32,
        .                   UintTy::U64 => ast::UintTy::U64,
-- line 2256 ----------------------------------------
-- line 2262 ----------------------------------------
        .               closure::provide(providers);
        .               context::provide(providers);
        .               erase_regions::provide(providers);
        .               layout::provide(providers);
        .               util::provide(providers);
        .               print::provide(providers);
        .               super::util::bug::provide(providers);
        .               super::middle::provide(providers);
        8 ( 0.00%)      *providers = ty::query::Providers {
        .                   trait_impls_of: trait_def::trait_impls_of_provider,
        .                   type_uninhabited_from: inhabitedness::type_uninhabited_from,
        .                   const_param_default: consts::const_param_default,
        .                   vtable_allocation: vtable::vtable_allocation_provider,
        .                   ..*providers
        .               };
        1 ( 0.00%)  }
        .           
        .           /// A map for the local crate mapping each type to a vector of its
        .           /// inherent impls. This is not meant to be used outside of coherence;
        .           /// rather, you should request the vector for a specific type via
        .           /// `tcx.inherent_impls(def_id)` so as to minimize your dependencies
        .           /// (constructing this map requires touching the entire crate).
        .           #[derive(Clone, Debug, Default, HashStable)]
        .           pub struct CrateInherentImpls {
-- line 2285 ----------------------------------------
-- line 2288 ----------------------------------------
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, HashStable)]
        .           pub struct SymbolName<'tcx> {
        .               /// `&str` gives a consistent ordering, which ensures reproducible builds.
        .               pub name: &'tcx str,
        .           }
        .           
        .           impl<'tcx> SymbolName<'tcx> {
        6 ( 0.00%)      pub fn new(tcx: TyCtxt<'tcx>, name: &str) -> SymbolName<'tcx> {
        .                   SymbolName {
        .                       name: unsafe { str::from_utf8_unchecked(tcx.arena.alloc_slice(name.as_bytes())) },
        .                   }
        8 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> fmt::Display for SymbolName<'tcx> {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   fmt::Display::fmt(&self.name, fmt)
        .               }
        .           }
        .           
-- line 2308 ----------------------------------------

3,554,490 ( 0.21%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 42 ----------------------------------------
      .           /// `stack_size` bytes.
      .           ///
      .           /// The closure `f` is guaranteed to run on a stack with at least `red_zone` bytes, and it will be
      .           /// run on the current stack if there's space available.
      .           #[inline(always)]
      .           pub fn maybe_grow<R, F: FnOnce() -> R>(red_zone: usize, stack_size: usize, callback: F) -> R {
      .               // if we can't guess the remaining stack (unsupported on some platforms) we immediately grow
      .               // the stack and then cache the new stack size (which we do know now because we allocated it.
515,122 ( 0.03%)      let enough_space = match remaining_stack() {
      .                   Some(remaining) => remaining >= red_zone,
      .                   None => false,
      .               };
732,906 ( 0.04%)      if enough_space {
124,634 ( 0.01%)          callback()
      .               } else {
      .                   grow(stack_size, callback)
      .               }
      .           }
      .           
      .           /// Always creates a new stack for the passed closure to run on.
      .           /// The closure will still be on the same thread as the caller of `grow`.
      .           /// This will allocate a new stack with at least `stack_size` bytes.
-- line 63 ----------------------------------------
-- line 82 ----------------------------------------
      .               _grow(stack_size, dyn_callback);
      .               ret.unwrap()
      .           }
      .           
      .           /// Queries the amount of remaining stack as interpreted by this library.
      .           ///
      .           /// This function will return the amount of stack space left which will be used
      .           /// to determine whether a stack switch should be made or not.
488,604 ( 0.03%)  pub fn remaining_stack() -> Option<usize> {
      .               let current_ptr = current_stack_ptr();
488,604 ( 0.03%)      get_stack_limit().map(|limit| current_ptr - limit)
977,208 ( 0.06%)  }
      .           
      .           psm_stack_information! (
      .               yes {
      .                   fn current_stack_ptr() -> usize {
488,604 ( 0.03%)              psm::stack_pointer() as usize
      .                   }
      .               }
      .               no {
      .                   #[inline(always)]
      .                   fn current_stack_ptr() -> usize {
      .                       unsafe {
      .                           let mut x = std::mem::MaybeUninit::<u8>::uninit();
      .                           // Unlikely to be ever exercised. As a fallback we execute a volatile read to a
-- line 106 ----------------------------------------
-- line 111 ----------------------------------------
      .                           x.as_ptr() as usize
      .                       }
      .                   }
      .               }
      .           );
      .           
      .           thread_local! {
      .               static STACK_LIMIT: Cell<Option<usize>> = Cell::new(unsafe {
      1 ( 0.00%)          guess_os_stack_limit()
      .               })
      .           }
      .           
      .           #[inline(always)]
      .           fn get_stack_limit() -> Option<usize> {
      .               STACK_LIMIT.with(|s| s.get())
      .           }
      .           
-- line 127 ----------------------------------------
-- line 403 ----------------------------------------
      .                       VirtualQuery(
      .                           psm::stack_pointer() as *const _,
      .                           mi.as_mut_ptr(),
      .                           std::mem::size_of::<QueryT>() as SIZE_T,
      .                       );
      .                       Some(mi.assume_init().AllocationBase as usize + get_thread_stack_guarantee() + 0x1000)
      .                   }
      .               } else if #[cfg(any(target_os = "linux", target_os="solaris", target_os = "netbsd"))] {
      2 ( 0.00%)          unsafe fn guess_os_stack_limit() -> Option<usize> {
      .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
      7 ( 0.00%)              assert_eq!(libc::pthread_getattr_np(libc::pthread_self(),
      .                                                           attr.as_mut_ptr()), 0);
      1 ( 0.00%)              let mut stackaddr = std::ptr::null_mut();
      4 ( 0.00%)              let mut stacksize = 0;
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_getstack(
      .                           attr.as_ptr(), &mut stackaddr, &mut stacksize
      .                       ), 0);
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_destroy(attr.as_mut_ptr()), 0);
      1 ( 0.00%)              Some(stackaddr as usize)
      3 ( 0.00%)          }
      .               } else if #[cfg(any(target_os = "freebsd", target_os = "dragonfly"))] {
      .                   unsafe fn guess_os_stack_limit() -> Option<usize> {
      .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
      .                       assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
      .                       assert_eq!(libc::pthread_attr_get_np(libc::pthread_self(), attr.as_mut_ptr()), 0);
      .                       let mut stackaddr = std::ptr::null_mut();
      .                       let mut stacksize = 0;
      .                       assert_eq!(libc::pthread_attr_getstack(
-- line 431 ----------------------------------------

316,606 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir                 

-- line 23 ----------------------------------------
        .           use std::cmp::Ordering;
        .           use std::marker::PhantomData;
        .           use std::ops::Range;
        .           use ty::util::IntTypeExt;
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct TypeAndMut<'tcx> {
      346 ( 0.00%)      pub ty: Ty<'tcx>,
    1,730 ( 0.00%)      pub mutbl: hir::Mutability,
        .           }
        .           
        .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
        .           #[derive(HashStable)]
        .           /// A "free" region `fr` can be interpreted as "some region
        .           /// at least as big as the scope `fr.scope`".
        .           pub struct FreeRegion {
    5,917 ( 0.00%)      pub scope: DefId,
   12,223 ( 0.00%)      pub bound_region: BoundRegionKind,
        .           }
        .           
  265,559 ( 0.02%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
        .           #[derive(HashStable)]
        .           pub enum BoundRegionKind {
        .               /// An anonymous region parameter for a given fn (&T)
   19,501 ( 0.00%)      BrAnon(u32),
        .           
        .               /// Named region parameters for functions (a in &'a T)
        .               ///
        .               /// The `DefId` is needed to distinguish free regions in
        .               /// the event of shadowing.
      335 ( 0.00%)      BrNamed(DefId, Symbol),
        .           
        .               /// Anonymous region for the implicit env pointer parameter
        .               /// to a closure
        .               BrEnv,
        .           }
        .           
      644 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
        .           #[derive(HashStable)]
        .           pub struct BoundRegion {
   66,112 ( 0.00%)      pub var: BoundVar,
   60,380 ( 0.00%)      pub kind: BoundRegionKind,
        .           }
        .           
        .           impl BoundRegionKind {
        .               pub fn is_named(&self) -> bool {
        .                   match *self {
        .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
        .                       _ => false,
        .                   }
        .               }
        .           }
        .           
        .           /// Defines the kinds of types.
        .           ///
        .           /// N.B., if you change this, you'll probably want to change the corresponding
        .           /// AST structure in `rustc_ast/src/ast.rs` as well.
6,405,668 ( 0.38%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
        .           #[derive(HashStable)]
        .           #[rustc_diagnostic_item = "TyKind"]
        .           pub enum TyKind<'tcx> {
        .               /// The primitive boolean type. Written as `bool`.
        .               Bool,
        .           
        .               /// The primitive character type; holds a Unicode scalar value
        .               /// (a non-surrogate code point). Written as `char`.
-- line 89 ----------------------------------------
-- line 99 ----------------------------------------
        .               Float(ty::FloatTy),
        .           
        .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
        .               ///
        .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
        .               /// That is, even after substitution it is possible that there are type
        .               /// variables. This happens when the `Adt` corresponds to an ADT
        .               /// definition and not a concrete use of it.
1,113,511 ( 0.07%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
        .           
        .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
        .               Foreign(DefId),
        .           
        .               /// The pointee of a string slice. Written as `str`.
        .               Str,
        .           
        .               /// An array with the given length. Written as `[T; n]`.
   11,577 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
        .           
        .               /// The pointee of an array slice. Written as `[T]`.
        .               Slice(Ty<'tcx>),
        .           
        .               /// A raw pointer. Written as `*mut T` or `*const T`
        .               RawPtr(TypeAndMut<'tcx>),
        .           
        .               /// A reference; a pointer with an associated lifetime. Written as
        .               /// `&'a mut T` or `&'a T`.
  437,295 ( 0.03%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
        .           
        .               /// The anonymous type of a function declaration/definition. Each
        .               /// function has a unique type, which is output (for a function
        .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
        .               ///
        .               /// For example the type of `bar` here:
        .               ///
        .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
        .               ///
        .               /// ```rust
        .               /// fn foo() -> i32 { 1 }
        .               /// let bar: fn() -> i32 = foo;
        .               /// ```
        .               FnPtr(PolyFnSig<'tcx>),
        .           
        .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
   86,163 ( 0.01%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
        .           
        .               /// The anonymous type of a closure. Used to represent the type of
        .               /// `|a| a`.
        .               Closure(DefId, SubstsRef<'tcx>),
        .           
        .               /// The anonymous type of a generator. Used to represent the type of
        .               /// `|a| yield a`.
   25,310 ( 0.00%)      Generator(DefId, SubstsRef<'tcx>, hir::Movability),
        .           
        .               /// A type representing the types stored inside a generator.
        .               /// This should only appear in GeneratorInteriors.
        .               GeneratorWitness(Binder<'tcx, &'tcx List<Ty<'tcx>>>),
        .           
        .               /// The never type `!`.
        .               Never,
        .           
-- line 167 ----------------------------------------
-- line 180 ----------------------------------------
        .               /// The substitutions are for the generics of the function in question.
        .               /// After typeck, the concrete type can be found in the `types` map.
        .               Opaque(DefId, SubstsRef<'tcx>),
        .           
        .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
        .               Param(ParamTy),
        .           
        .               /// Bound type variable, used only when preparing a trait query.
    1,880 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
        .           
        .               /// A placeholder type - universally quantified higher-ranked type.
        .               Placeholder(ty::PlaceholderType),
        .           
        .               /// A type variable used during type checking.
        .               Infer(InferTy),
        .           
        .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 330 ----------------------------------------
        .               pub closure_kind_ty: T,
        .               pub closure_sig_as_fn_ptr_ty: T,
        .               pub tupled_upvars_ty: T,
        .           }
        .           
        .           impl<'tcx> ClosureSubsts<'tcx> {
        .               /// Construct `ClosureSubsts` from `ClosureSubstsParts`, containing `Substs`
        .               /// for the closure parent, alongside additional closure-specific components.
       39 ( 0.00%)      pub fn new(
        .                   tcx: TyCtxt<'tcx>,
        .                   parts: ClosureSubstsParts<'tcx, Ty<'tcx>>,
        .               ) -> ClosureSubsts<'tcx> {
        .                   ClosureSubsts {
        .                       substs: tcx.mk_substs(
       78 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
      156 ( 0.00%)                      [parts.closure_kind_ty, parts.closure_sig_as_fn_ptr_ty, parts.tupled_upvars_ty]
        .                                   .iter()
        .                                   .map(|&ty| ty.into()),
        .                           ),
        .                       ),
        .                   }
       78 ( 0.00%)      }
        .           
        .               /// Divides the closure substs into their respective components.
        .               /// The ordering assumed here must match that used by `ClosureSubsts::new` above.
      635 ( 0.00%)      fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {
        .                   match self.substs[..] {
    5,112 ( 0.00%)              [
    1,439 ( 0.00%)                  ref parent_substs @ ..,
    1,424 ( 0.00%)                  closure_kind_ty,
      730 ( 0.00%)                  closure_sig_as_fn_ptr_ty,
    1,041 ( 0.00%)                  tupled_upvars_ty,
    2,540 ( 0.00%)              ] => ClosureSubstsParts {
        .                           parent_substs,
        .                           closure_kind_ty,
        .                           closure_sig_as_fn_ptr_ty,
        .                           tupled_upvars_ty,
        .                       },
        .                       _ => bug!("closure substs missing synthetics"),
        .                   }
    1,905 ( 0.00%)      }
        .           
        .               /// Returns `true` only if enough of the synthetic types are known to
        .               /// allow using all of the methods on `ClosureSubsts` without panicking.
        .               ///
        .               /// Used primarily by `ty::print::pretty` to be able to handle closure
        .               /// types that haven't had their synthetic types substituted in.
        4 ( 0.00%)      pub fn is_valid(self) -> bool {
        8 ( 0.00%)          self.substs.len() >= 3
        8 ( 0.00%)              && matches!(self.split().tupled_upvars_ty.expect_ty().kind(), Tuple(_))
        8 ( 0.00%)      }
        .           
        .               /// Returns the substitutions of the closure's parent.
        .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
        .                   self.split().parent_substs
        .               }
        .           
        .               /// Returns an iterator over the list of types of captured paths by the closure.
        .               /// In case there was a type error in figuring out the types of the captured path, an
        .               /// empty iterator is returned.
        .               #[inline]
       78 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
      246 ( 0.00%)          match self.tupled_upvars_ty().kind() {
        .                       TyKind::Error(_) => None,
      168 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
        .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
        .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
        .                   }
        .                   .into_iter()
        .                   .flatten()
       52 ( 0.00%)      }
        .           
        .               /// Returns the tuple type representing the upvars for this closure.
        .               #[inline]
        .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
    2,808 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
        .               }
        .           
        .               /// Returns the closure kind for this closure; may return a type
        .               /// variable during inference. To get the closure kind during
        .               /// inference, use `infcx.closure_kind(substs)`.
      298 ( 0.00%)      pub fn kind_ty(self) -> Ty<'tcx> {
        .                   self.split().closure_kind_ty.expect_ty()
      596 ( 0.00%)      }
        .           
        .               /// Returns the `fn` pointer type representing the closure signature for this
        .               /// closure.
        .               // FIXME(eddyb) this should be unnecessary, as the shallowly resolved
        .               // type is known at the time of the creation of `ClosureSubsts`,
        .               // see `rustc_typeck::check::closure`.
        .               pub fn sig_as_fn_ptr_ty(self) -> Ty<'tcx> {
        .                   self.split().closure_sig_as_fn_ptr_ty.expect_ty()
        .               }
        .           
        .               /// Returns the closure kind for this closure; only usable outside
        .               /// of an inference context, because in that context we know that
        .               /// there are no type variables.
        .               ///
        .               /// If you have an inference context, use `infcx.closure_kind()`.
       11 ( 0.00%)      pub fn kind(self) -> ty::ClosureKind {
       11 ( 0.00%)          self.kind_ty().to_opt_closure_kind().unwrap()
       22 ( 0.00%)      }
        .           
        .               /// Extracts the signature from the closure.
      328 ( 0.00%)      pub fn sig(self) -> ty::PolyFnSig<'tcx> {
        .                   let ty = self.sig_as_fn_ptr_ty();
      656 ( 0.00%)          match ty.kind() {
    1,312 ( 0.00%)              ty::FnPtr(sig) => *sig,
        .                       _ => bug!("closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}", ty.kind()),
        .                   }
      984 ( 0.00%)      }
        .           }
        .           
        .           /// Similar to `ClosureSubsts`; see the above documentation for more.
        .           #[derive(Copy, Clone, Debug, TypeFoldable)]
        .           pub struct GeneratorSubsts<'tcx> {
        .               pub substs: SubstsRef<'tcx>,
        .           }
        .           
-- line 448 ----------------------------------------
-- line 453 ----------------------------------------
        .               pub return_ty: T,
        .               pub witness: T,
        .               pub tupled_upvars_ty: T,
        .           }
        .           
        .           impl<'tcx> GeneratorSubsts<'tcx> {
        .               /// Construct `GeneratorSubsts` from `GeneratorSubstsParts`, containing `Substs`
        .               /// for the generator parent, alongside additional generator-specific components.
       14 ( 0.00%)      pub fn new(
        .                   tcx: TyCtxt<'tcx>,
        .                   parts: GeneratorSubstsParts<'tcx, Ty<'tcx>>,
        .               ) -> GeneratorSubsts<'tcx> {
        .                   GeneratorSubsts {
        .                       substs: tcx.mk_substs(
       28 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
       42 ( 0.00%)                      [
       14 ( 0.00%)                          parts.resume_ty,
        .                                   parts.yield_ty,
       14 ( 0.00%)                          parts.return_ty,
        .                                   parts.witness,
       14 ( 0.00%)                          parts.tupled_upvars_ty,
        .                               ]
        .                               .iter()
        .                               .map(|&ty| ty.into()),
        .                           ),
        .                       ),
        .                   }
       28 ( 0.00%)      }
        .           
        .               /// Divides the generator substs into their respective components.
        .               /// The ordering assumed here must match that used by `GeneratorSubsts::new` above.
      608 ( 0.00%)      fn split(self) -> GeneratorSubstsParts<'tcx, GenericArg<'tcx>> {
        .                   match self.substs[..] {
    9,849 ( 0.00%)              [ref parent_substs @ .., resume_ty, yield_ty, return_ty, witness, tupled_upvars_ty] => {
    3,040 ( 0.00%)                  GeneratorSubstsParts {
        .                               parent_substs,
        .                               resume_ty,
        .                               yield_ty,
        .                               return_ty,
        .                               witness,
        .                               tupled_upvars_ty,
        .                           }
        .                       }
        .                       _ => bug!("generator substs missing synthetics"),
        .                   }
    1,824 ( 0.00%)      }
        .           
        .               /// Returns `true` only if enough of the synthetic types are known to
        .               /// allow using all of the methods on `GeneratorSubsts` without panicking.
        .               ///
        .               /// Used primarily by `ty::print::pretty` to be able to handle generator
        .               /// types that haven't had their synthetic types substituted in.
       14 ( 0.00%)      pub fn is_valid(self) -> bool {
       28 ( 0.00%)          self.substs.len() >= 5
       28 ( 0.00%)              && matches!(self.split().tupled_upvars_ty.expect_ty().kind(), Tuple(_))
       28 ( 0.00%)      }
        .           
        .               /// Returns the substitutions of the generator's parent.
        .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
        .                   self.split().parent_substs
        .               }
        .           
        .               /// This describes the types that can be contained in a generator.
        .               /// It will be a type variable initially and unified in the last stages of typeck of a body.
        .               /// It contains a tuple of all the types that could end up on a generator frame.
        .               /// The state transformation MIR pass may only produce layouts which mention types
        .               /// in this tuple. Upvars are not counted here.
      169 ( 0.00%)      pub fn witness(self) -> Ty<'tcx> {
        .                   self.split().witness.expect_ty()
      338 ( 0.00%)      }
        .           
        .               /// Returns an iterator over the list of types of captured paths by the generator.
        .               /// In case there was a type error in figuring out the types of the captured path, an
        .               /// empty iterator is returned.
        .               #[inline]
      432 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
      507 ( 0.00%)          match self.tupled_upvars_ty().kind() {
        .                       TyKind::Error(_) => None,
      338 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
        .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
        .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
        .                   }
        .                   .into_iter()
        .                   .flatten()
      288 ( 0.00%)      }
        .           
        .               /// Returns the tuple type representing the upvars for this generator.
        .               #[inline]
        .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
    2,361 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
        .               }
        .           
        .               /// Returns the type representing the resume type of the generator.
       32 ( 0.00%)      pub fn resume_ty(self) -> Ty<'tcx> {
        .                   self.split().resume_ty.expect_ty()
       64 ( 0.00%)      }
        .           
        .               /// Returns the type representing the yield type of the generator.
       18 ( 0.00%)      pub fn yield_ty(self) -> Ty<'tcx> {
        .                   self.split().yield_ty.expect_ty()
       36 ( 0.00%)      }
        .           
        .               /// Returns the type representing the return type of the generator.
       18 ( 0.00%)      pub fn return_ty(self) -> Ty<'tcx> {
        .                   self.split().return_ty.expect_ty()
       36 ( 0.00%)      }
        .           
        .               /// Returns the "generator signature", which consists of its yield
        .               /// and return types.
        .               ///
        .               /// N.B., some bits of the code prefers to see this wrapped in a
        .               /// binder, but it never contains bound regions. Probably this
        .               /// function should be removed.
      664 ( 0.00%)      pub fn poly_sig(self) -> PolyGenSig<'tcx> {
      166 ( 0.00%)          ty::Binder::dummy(self.sig())
      664 ( 0.00%)      }
        .           
        .               /// Returns the "generator signature", which consists of its resume, yield
        .               /// and return types.
      180 ( 0.00%)      pub fn sig(self) -> GenSig<'tcx> {
      540 ( 0.00%)          ty::GenSig {
        .                       resume_ty: self.resume_ty(),
        .                       yield_ty: self.yield_ty(),
        .                       return_ty: self.return_ty(),
        .                   }
      540 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> GeneratorSubsts<'tcx> {
        .               /// Generator has not been resumed yet.
        .               pub const UNRESUMED: usize = 0;
        .               /// Generator has returned or is completed.
        .               pub const RETURNED: usize = 1;
        .               /// Generator has been poisoned.
-- line 586 ----------------------------------------
-- line 635 ----------------------------------------
        .                       Self::POISONED => Cow::from(Self::POISONED_NAME),
        .                       _ => Cow::from(format!("Suspend{}", v.as_usize() - 3)),
        .                   }
        .               }
        .           
        .               /// The type of the state discriminant used in the generator type.
        .               #[inline]
        .               pub fn discr_ty(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
       56 ( 0.00%)          tcx.types.u32
        .               }
        .           
        .               /// This returns the types of the MIR locals which had to be stored across suspension points.
        .               /// It is calculated in rustc_const_eval::transform::generator::StateTransform.
        .               /// All the types here must be in the tuple in GeneratorInterior.
        .               ///
        .               /// The locals are grouped by their variant number. Note that some locals may
        .               /// be repeated in multiple variants.
-- line 651 ----------------------------------------
-- line 659 ----------------------------------------
        .                   layout.variant_fields.iter().map(move |variant| {
        .                       variant.iter().map(move |field| layout.field_tys[*field].subst(tcx, self.substs))
        .                   })
        .               }
        .           
        .               /// This is the types of the fields of a generator which are not stored in a
        .               /// variant.
        .               #[inline]
      414 ( 0.00%)      pub fn prefix_tys(self) -> impl Iterator<Item = Ty<'tcx>> {
        .                   self.upvar_tys()
      276 ( 0.00%)      }
        .           }
        .           
        .           #[derive(Debug, Copy, Clone, HashStable)]
        .           pub enum UpvarSubsts<'tcx> {
        .               Closure(SubstsRef<'tcx>),
        .               Generator(SubstsRef<'tcx>),
        .           }
        .           
        .           impl<'tcx> UpvarSubsts<'tcx> {
        .               /// Returns an iterator over the list of types of captured paths by the closure/generator.
        .               /// In case there was a type error in figuring out the types of the captured path, an
        .               /// empty iterator is returned.
        .               #[inline]
        .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
      156 ( 0.00%)          let tupled_tys = match self {
      139 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
       70 ( 0.00%)              UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
        .                   };
        .           
      340 ( 0.00%)          match tupled_tys.kind() {
        .                       TyKind::Error(_) => None,
      287 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
        .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
        .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
        .                   }
        .                   .into_iter()
        .                   .flatten()
        .               }
        .           
        .               #[inline]
        .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
      262 ( 0.00%)          match self {
      191 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
      107 ( 0.00%)              UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
        .                   }
        .               }
        .           }
        .           
        .           /// An inline const is modeled like
        .           ///
        .           ///     const InlineConst<'l0...'li, T0...Tj, R>: R;
        .           ///
-- line 711 ----------------------------------------
-- line 760 ----------------------------------------
        .               }
        .           
        .               /// Returns the type of this inline const.
        .               pub fn ty(self) -> Ty<'tcx> {
        .                   self.split().ty.expect_ty()
        .               }
        .           }
        .           
  293,906 ( 0.02%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
  157,764 ( 0.01%)  #[derive(HashStable, TypeFoldable)]
        .           pub enum ExistentialPredicate<'tcx> {
        .               /// E.g., `Iterator`.
        .               Trait(ExistentialTraitRef<'tcx>),
        .               /// E.g., `Iterator::Item = T`.
        .               Projection(ExistentialProjection<'tcx>),
        .               /// E.g., `Send`.
    7,720 ( 0.00%)      AutoTrait(DefId),
        .           }
        .           
        .           impl<'tcx> ExistentialPredicate<'tcx> {
        .               /// Compares via an ordering that will not change if modules are reordered or other changes are
        .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
   59,360 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
        .                   use self::ExistentialPredicate::*;
   88,826 ( 0.01%)          match (*self, *other) {
        .                       (Trait(_), Trait(_)) => Ordering::Equal,
        .                       (Projection(ref a), Projection(ref b)) => {
        .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
        .                       }
        .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
        .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
        .                       }
        .                       (Trait(_), _) => Ordering::Less,
        .                       (Projection(_), Trait(_)) => Ordering::Greater,
        .                       (Projection(_), _) => Ordering::Less,
        .                       (AutoTrait(_), _) => Ordering::Greater,
        .                   }
   71,232 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
    3,060 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
        .                   use crate::ty::ToPredicate;
    2,292 ( 0.00%)          match self.skip_binder() {
        .                       ExistentialPredicate::Trait(tr) => {
        .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
        .                       }
        .                       ExistentialPredicate::Projection(p) => {
       20 ( 0.00%)                  self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)
        .                       }
        .                       ExistentialPredicate::AutoTrait(did) => {
      384 ( 0.00%)                  let trait_ref = self.rebind(ty::TraitRef {
        .                               def_id: did,
        .                               substs: tcx.mk_substs_trait(self_ty, &[]),
        .                           });
        .                           trait_ref.without_const().to_predicate(tcx)
        .                       }
        .                   }
    2,720 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
        .               /// Returns the "principal `DefId`" of this set of existential predicates.
        .               ///
        .               /// A Rust trait object type consists (in addition to a lifetime bound)
        .               /// of a set of trait bounds, which are separated into any number
        .               /// of auto-trait bounds, and at most one non-auto-trait bound. The
-- line 826 ----------------------------------------
-- line 839 ----------------------------------------
        .               /// are the set `{Sync}`.
        .               ///
        .               /// It is also possible to have a "trivial" trait object that
        .               /// consists only of auto traits, with no principal - for example,
        .               /// `dyn Send + Sync`. In that case, the set of auto-trait bounds
        .               /// is `{Send, Sync}`, while there is no principal. These trait objects
        .               /// have a "trivial" vtable consisting of just the size, alignment,
        .               /// and destructor.
      170 ( 0.00%)      pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {
    2,164 ( 0.00%)          self[0]
    1,654 ( 0.00%)              .map_bound(|this| match this {
        .                           ExistentialPredicate::Trait(tr) => Some(tr),
        .                           _ => None,
      680 ( 0.00%)              })
        .                       .transpose()
      510 ( 0.00%)      }
        .           
      274 ( 0.00%)      pub fn principal_def_id(&self) -> Option<DefId> {
        .                   self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)
      548 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn projection_bounds<'a>(
        .                   &'a self,
        .               ) -> impl Iterator<Item = ty::Binder<'tcx, ExistentialProjection<'tcx>>> + 'a {
        .                   self.iter().filter_map(|predicate| {
      330 ( 0.00%)              predicate
      772 ( 0.00%)                  .map_bound(|pred| match pred {
      134 ( 0.00%)                      ExistentialPredicate::Projection(projection) => Some(projection),
        .                               _ => None,
        .                           })
        .                           .transpose()
        .                   })
        .               }
        .           
        .               #[inline]
        .               pub fn auto_traits<'a>(&'a self) -> impl Iterator<Item = DefId> + 'a {
      352 ( 0.00%)          self.iter().filter_map(|predicate| match predicate.skip_binder() {
        .                       ExistentialPredicate::AutoTrait(did) => Some(did),
        .                       _ => None,
        .                   })
        .               }
        .           }
        .           
        .           /// A complete reference to a trait. These take numerous guises in syntax,
        .           /// but perhaps the most recognizable form is in a where-clause:
-- line 884 ----------------------------------------
-- line 886 ----------------------------------------
        .           ///     T: Foo<U>
        .           ///
        .           /// This would be represented by a trait-reference where the `DefId` is the
        .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
        .           /// and `U` as parameter 1.
        .           ///
        .           /// Trait references also appear in object types like `Foo<U>`, but in
        .           /// that case the `Self` parameter is absent from the substitutions.
   22,429 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
  863,720 ( 0.05%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct TraitRef<'tcx> {
      781 ( 0.00%)      pub def_id: DefId,
1,463,655 ( 0.09%)      pub substs: SubstsRef<'tcx>,
        .           }
        .           
        .           impl<'tcx> TraitRef<'tcx> {
      665 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
        .                   TraitRef { def_id, substs }
    2,660 ( 0.00%)      }
        .           
        .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
        .               /// are the parameters defined on trait.
    1,062 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
      472 ( 0.00%)          ty::Binder::dummy(TraitRef {
        .                       def_id,
      708 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
        .                   })
      944 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn self_ty(&self) -> Ty<'tcx> {
        .                   self.substs.type_at(0)
        .               }
        .           
      488 ( 0.00%)      pub fn from_method(
        .                   tcx: TyCtxt<'tcx>,
        .                   trait_id: DefId,
        .                   substs: SubstsRef<'tcx>,
        .               ) -> ty::TraitRef<'tcx> {
        .                   let defs = tcx.generics_of(trait_id);
        .           
       61 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
      671 ( 0.00%)      }
        .           }
        .           
        .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
        .           
        .           impl<'tcx> PolyTraitRef<'tcx> {
        .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
        .                   self.map_bound_ref(|tr| tr.self_ty())
        .               }
        .           
        .               pub fn def_id(&self) -> DefId {
    7,914 ( 0.00%)          self.skip_binder().def_id
    2,638 ( 0.00%)      }
        .           
    1,186 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
    2,372 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
        .                       trait_ref,
        .                       constness: ty::BoundConstness::NotConst,
        .                       polarity: ty::ImplPolarity::Positive,
        .                   })
    1,186 ( 0.00%)      }
        .           }
        .           
        .           /// An existential reference to a trait, where `Self` is erased.
        .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
        .           ///
        .           ///     exists T. T: Trait<'a, 'b, X, Y>
        .           ///
        .           /// The substitutions don't include the erased `Self`, only trait
        .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
      212 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
   34,675 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct ExistentialTraitRef<'tcx> {
    4,972 ( 0.00%)      pub def_id: DefId,
   43,562 ( 0.00%)      pub substs: SubstsRef<'tcx>,
        .           }
        .           
        .           impl<'tcx> ExistentialTraitRef<'tcx> {
      236 ( 0.00%)      pub fn erase_self_ty(
        .                   tcx: TyCtxt<'tcx>,
        .                   trait_ref: ty::TraitRef<'tcx>,
        .               ) -> ty::ExistentialTraitRef<'tcx> {
        .                   // Assert there is a Self.
        .                   trait_ref.substs.type_at(0);
        .           
        .                   ty::ExistentialTraitRef {
        .                       def_id: trait_ref.def_id,
        .                       substs: tcx.intern_substs(&trait_ref.substs[1..]),
        .                   }
      236 ( 0.00%)      }
        .           
        .               /// Object types don't have a self type specified. Therefore, when
        .               /// we convert the principal trait-ref into a normal trait-ref,
        .               /// you must give *some* self type. A common choice is `mk_err()`
        .               /// or some placeholder type.
      156 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::TraitRef<'tcx> {
        .                   // otherwise the escaping vars would be captured by the binder
        .                   // debug_assert!(!self_ty.has_escaping_bound_vars());
        .           
       78 ( 0.00%)          ty::TraitRef { def_id: self.def_id, substs: tcx.mk_substs_trait(self_ty, self.substs) }
      390 ( 0.00%)      }
        .           }
        .           
        .           pub type PolyExistentialTraitRef<'tcx> = Binder<'tcx, ExistentialTraitRef<'tcx>>;
        .           
        .           impl<'tcx> PolyExistentialTraitRef<'tcx> {
        .               pub fn def_id(&self) -> DefId {
        .                   self.skip_binder().def_id
        .               }
        .           
        .               /// Object types don't have a self type specified. Therefore, when
        .               /// we convert the principal trait-ref into a normal trait-ref,
        .               /// you must give *some* self type. A common choice is `mk_err()`
        .               /// or some placeholder type.
      177 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
      177 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
      236 ( 0.00%)      }
        .           }
        .           
   13,442 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub enum BoundVariableKind {
        .               Ty(BoundTyKind),
        .               Region(BoundRegionKind),
        .               Const,
        .           }
        .           
        .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
-- line 1015 ----------------------------------------
-- line 1016 ----------------------------------------
        .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
        .           /// (which would be represented by the type `PolyTraitRef ==
        .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
        .           /// erase, or otherwise "discharge" these bound vars, we change the
        .           /// type from `Binder<'tcx, T>` to just `T` (see
        .           /// e.g., `liberate_late_bound_regions`).
        .           ///
        .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
  255,666 ( 0.02%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
  544,479 ( 0.03%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
        .           
        .           impl<'tcx, T> Binder<'tcx, T>
        .           where
        .               T: TypeFoldable<'tcx>,
        .           {
        .               /// Wraps `value` in a binder, asserting that `value` does not
        .               /// contain any bound vars that would be bound by the
        .               /// binder. This is commonly used to 'inject' a value T into a
        .               /// different binding level.
   13,357 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
   49,639 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
  120,110 ( 0.01%)          Binder(value, ty::List::empty())
   13,183 ( 0.00%)      }
        .           
        .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(vars);
        .                       value.visit_with(&mut validator);
        .                   }
   14,854 ( 0.00%)          Binder(value, vars)
        .               }
        .           }
        .           
        .           impl<'tcx, T> Binder<'tcx, T> {
        .               /// Skips the binder and returns the "bound" value. This is a
        .               /// risky thing to do because it's easy to get confused about
        .               /// De Bruijn indices and the like. It is usually better to
        .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
        .               /// accounting.
        .               ///
        .               /// Some examples where `skip_binder` is reasonable:
        .               ///
        .               /// - extracting the `DefId` from a PolyTraitRef;
        .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
        .               ///   a type parameter `X`, since the type `X` does not reference any regions
        .               pub fn skip_binder(self) -> T {
1,277,274 ( 0.08%)          self.0
        .               }
        .           
        .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
      977 ( 0.00%)          self.1
        .               }
        .           
        .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
   15,447 ( 0.00%)          Binder(&self.0, self.1)
        .               }
        .           
        .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(&T) -> U,
        .               {
        .                   let value = f(&self.0);
        .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
        .           
        .               pub fn map_bound_ref<F, U: TypeFoldable<'tcx>>(&self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(&T) -> U,
        .               {
        .                   self.as_ref().map_bound(f)
        .               }
        .           
    2,591 ( 0.00%)      pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(T) -> U,
        .               {
  271,661 ( 0.02%)          let value = f(self.0);
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.1);
        .                       value.visit_with(&mut validator);
        .                   }
  457,385 ( 0.03%)          Binder(value, self.1)
    2,762 ( 0.00%)      }
        .           
        .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
        .               where
        .                   F: FnOnce(T) -> Result<U, E>,
        .               {
        .                   let value = f(self.0)?;
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.1);
        .                       value.visit_with(&mut validator);
        .                   }
    7,289 ( 0.00%)          Ok(Binder(value, self.1))
        .               }
        .           
        .               /// Wraps a `value` in a binder, using the same bound variables as the
        .               /// current `Binder`. This should not be used if the new value *changes*
        .               /// the bound variables. Note: the (old or new) value itself does not
        .               /// necessarily need to *name* all the bound variables.
        .               ///
        .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
        .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
        .               where
        .                   U: TypeFoldable<'tcx>,
        .               {
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
        .                       value.visit_with(&mut validator);
        .                   }
   36,385 ( 0.00%)          Binder(value, self.1)
        .               }
        .           
        .               /// Unwraps and returns the value within, but only if it contains
        .               /// no bound vars at all. (In other words, if this binder --
        .               /// and indeed any enclosing binder -- doesn't bind anything at
        .               /// all.) Otherwise, returns `None`.
        .               ///
        .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
        .               /// binder, but permits late-bound vars bound by enclosing
        .               /// binders, but that would require adjusting the debruijn
        .               /// indices, and given the shallow binding structure we often use,
        .               /// would not be that useful.)
        .               pub fn no_bound_vars(self) -> Option<T>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
   85,725 ( 0.01%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
      425 ( 0.00%)      }
        .           
        .               /// Splits the contents into two things that share the same binder
        .               /// level as the original, returning two distinct binders.
        .               ///
        .               /// `f` should consider bound regions at depth 1 to be free, and
        .               /// anything it produces with bound regions at depth 1 will be
        .               /// bound in the resulting return values.
        .               pub fn split<U, V, F>(self, f: F) -> (Binder<'tcx, U>, Binder<'tcx, V>)
-- line 1160 ----------------------------------------
-- line 1170 ----------------------------------------
        .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
        .                   let bound_vars = self.1;
        .                   self.0.map(|v| Binder(v, bound_vars))
        .               }
        .           }
        .           
        .           /// Represents the projection of an associated type. In explicit UFCS
        .           /// form this would be written `<T as Trait<..>>::N`.
      646 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
   30,272 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct ProjectionTy<'tcx> {
        .               /// The parameters of the associated item.
   16,119 ( 0.00%)      pub substs: SubstsRef<'tcx>,
        .           
        .               /// The `DefId` of the `TraitItem` for the associated type `N`.
        .               ///
        .               /// Note that this is not the `DefId` of the `TraitRef` containing this
        .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
   19,958 ( 0.00%)      pub item_def_id: DefId,
        .           }
        .           
        .           impl<'tcx> ProjectionTy<'tcx> {
    9,975 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
    2,850 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
   11,400 ( 0.00%)      }
        .           
        .               /// Extracts the underlying trait reference and own substs from this projection.
        .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
        .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
    6,209 ( 0.00%)      pub fn trait_ref_and_own_substs(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
    2,661 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
        .                   let trait_generics = tcx.generics_of(def_id);
    4,435 ( 0.00%)          (
        .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
        .                       &self.substs[trait_generics.count()..],
        .                   )
    7,983 ( 0.00%)      }
        .           
        .               /// Extracts the underlying trait reference from this projection.
        .               /// For example, if this is a projection of `<T as Iterator>::Item`,
        .               /// then this function would return a `T: Iterator` trait reference.
        .               ///
        .               /// WARNING: This will drop the substs for generic associated types
        .               /// consider calling [Self::trait_ref_and_own_substs] to get those
        .               /// as well.
   12,303 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
    1,367 ( 0.00%)          let def_id = self.trait_def_id(tcx);
    1,367 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
   15,037 ( 0.00%)      }
        .           
    2,486 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
    7,458 ( 0.00%)          self.substs.type_at(0)
    4,972 ( 0.00%)      }
        .           }
        .           
      728 ( 0.00%)  #[derive(Copy, Clone, Debug, TypeFoldable)]
        .           pub struct GenSig<'tcx> {
        .               pub resume_ty: Ty<'tcx>,
        .               pub yield_ty: Ty<'tcx>,
        .               pub return_ty: Ty<'tcx>,
        .           }
        .           
        .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
        .           
        .           /// Signature of a function type, which we have arbitrarily
        .           /// decided to use to refer to the input/output types.
        .           ///
        .           /// - `inputs`: is the list of arguments and their modes.
        .           /// - `output`: is the return type.
        .           /// - `c_variadic`: indicates whether this is a C-variadic function.
   17,767 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
   10,969 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct FnSig<'tcx> {
    1,852 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
   15,513 ( 0.00%)      pub c_variadic: bool,
    2,943 ( 0.00%)      pub unsafety: hir::Unsafety,
   14,178 ( 0.00%)      pub abi: abi::Abi,
        .           }
        .           
        .           impl<'tcx> FnSig<'tcx> {
   10,497 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
   45,105 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
   20,994 ( 0.00%)      }
        .           
    6,837 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
   50,343 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
   13,674 ( 0.00%)      }
        .           
        .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
        .               // method.
        .               fn fake() -> FnSig<'tcx> {
        .                   FnSig {
        .                       inputs_and_output: List::empty(),
        .                       c_variadic: false,
        .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
        .               }
        .           }
        .           
        .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
        .           
        .           impl<'tcx> PolyFnSig<'tcx> {
        .               #[inline]
        .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
    1,812 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
        .               }
        .               #[inline]
        .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
    5,401 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
        .               }
        .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
        .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
      199 ( 0.00%)      }
        .               #[inline]
        .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
    3,727 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
        .               }
        .               pub fn c_variadic(&self) -> bool {
      398 ( 0.00%)          self.skip_binder().c_variadic
      199 ( 0.00%)      }
        .               pub fn unsafety(&self) -> hir::Unsafety {
    1,878 ( 0.00%)          self.skip_binder().unsafety
      939 ( 0.00%)      }
        .               pub fn abi(&self) -> abi::Abi {
    4,348 ( 0.00%)          self.skip_binder().abi
    1,087 ( 0.00%)      }
        .           }
        .           
        .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
        .           
      100 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub struct ParamTy {
      230 ( 0.00%)      pub index: u32,
        .               pub name: Symbol,
        .           }
        .           
        .           impl<'tcx> ParamTy {
      138 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
        .                   ParamTy { index, name }
       69 ( 0.00%)      }
        .           
        .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
       48 ( 0.00%)          ParamTy::new(def.index, def.name)
       24 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
        .                   tcx.mk_ty_param(self.index, self.name)
        .               }
        .           }
        .           
        .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
        .           #[derive(HashStable)]
        .           pub struct ParamConst {
       74 ( 0.00%)      pub index: u32,
       74 ( 0.00%)      pub name: Symbol,
        .           }
        .           
        .           impl ParamConst {
        .               pub fn new(index: u32, name: Symbol) -> ParamConst {
        .                   ParamConst { index, name }
        .               }
        .           
        .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
        .           /// the inference variable is supposed to satisfy the relation
        .           /// *for every value of the placeholder region*. To ensure that doesn't
        .           /// happen, you can use `leak_check`. This is more clearly explained
        .           /// by the [rustc dev guide].
        .           ///
        .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
        .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
        .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
2,305,743 ( 0.14%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
      102 ( 0.00%)  pub enum RegionKind {
        .               /// Region bound in a type or fn declaration which will be
        .               /// substituted 'early' -- that is, at the same time when type
        .               /// parameters are substituted.
        .               ReEarlyBound(EarlyBoundRegion),
        .           
        .               /// Region bound in a function scope, which will be substituted when the
        .               /// function is called.
  119,774 ( 0.01%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
        .           
        .               /// When checking a function body, the types of all arguments and so forth
        .               /// that refer to bound region parameters are modified to refer to free
        .               /// region parameters.
        .               ReFree(FreeRegion),
        .           
        .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
        .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
        .               /// regions visible from `U`, but not less than regions not visible
        .               /// from `U`.
        .               ReEmpty(ty::UniverseIndex),
        .           
        .               /// Erased region, used by trait selection, in MIR and during codegen.
        .               ReErased,
        .           }
        .           
   16,628 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
        .           pub struct EarlyBoundRegion {
   13,118 ( 0.00%)      pub def_id: DefId,
   10,513 ( 0.00%)      pub index: u32,
   64,089 ( 0.00%)      pub name: Symbol,
        .           }
        .           
        .           /// A **`const`** **v**ariable **ID**.
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
        .           pub struct ConstVid<'tcx> {
      651 ( 0.00%)      pub index: u32,
        1 ( 0.00%)      pub phantom: PhantomData<&'tcx ()>,
        .           }
        .           
        .           rustc_index::newtype_index! {
        .               /// A **region** (lifetime) **v**ariable **ID**.
        .               pub struct RegionVid {
        .                   DEBUG_FORMAT = custom,
        .               }
        .           }
-- line 1505 ----------------------------------------
-- line 1513 ----------------------------------------
        .           rustc_index::newtype_index! {
        .               pub struct BoundVar { .. }
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub struct BoundTy {
        .               pub var: BoundVar,
    1,880 ( 0.00%)      pub kind: BoundTyKind,
        .           }
        .           
   32,038 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub enum BoundTyKind {
        .               Anon,
        .               Param(Symbol),
        .           }
        .           
        .           impl From<BoundVar> for BoundTy {
        .               fn from(var: BoundVar) -> Self {
        .                   BoundTy { var, kind: BoundTyKind::Anon }
        .               }
        .           }
        .           
        .           /// A `ProjectionPredicate` for an `ExistentialTraitRef`.
      208 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
   18,911 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct ExistentialProjection<'tcx> {
    2,832 ( 0.00%)      pub item_def_id: DefId,
   22,300 ( 0.00%)      pub substs: SubstsRef<'tcx>,
    5,575 ( 0.00%)      pub term: Term<'tcx>,
        .           }
        .           
        .           pub type PolyExistentialProjection<'tcx> = Binder<'tcx, ExistentialProjection<'tcx>>;
        .           
        .           impl<'tcx> ExistentialProjection<'tcx> {
        .               /// Extracts the underlying existential trait reference from this projection.
        .               /// For example, if this is a projection of `exists T. <T as Iterator>::Item == X`,
        .               /// then this function would return an `exists T. T: Iterator` existential trait
        .               /// reference.
    1,582 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::ExistentialTraitRef<'tcx> {
      678 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
      452 ( 0.00%)          let subst_count = tcx.generics_of(def_id).count() - 1;
      226 ( 0.00%)          let substs = tcx.intern_substs(&self.substs[..subst_count]);
        .                   ty::ExistentialTraitRef { def_id, substs }
    2,034 ( 0.00%)      }
        .           
        .               pub fn with_self_ty(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .                   self_ty: Ty<'tcx>,
        .               ) -> ty::ProjectionPredicate<'tcx> {
        .                   // otherwise the escaping regions would be captured by the binders
        .                   debug_assert!(!self_ty.has_escaping_bound_vars());
-- line 1566 ----------------------------------------
-- line 1569 ----------------------------------------
        .                       projection_ty: ty::ProjectionTy {
        .                           item_def_id: self.item_def_id,
        .                           substs: tcx.mk_substs_trait(self_ty, self.substs),
        .                       },
        .                       term: self.term,
        .                   }
        .               }
        .           
      215 ( 0.00%)      pub fn erase_self_ty(
        .                   tcx: TyCtxt<'tcx>,
        .                   projection_predicate: ty::ProjectionPredicate<'tcx>,
        .               ) -> Self {
        .                   // Assert there is a Self.
      129 ( 0.00%)          projection_predicate.projection_ty.substs.type_at(0);
        .           
      172 ( 0.00%)          Self {
       86 ( 0.00%)              item_def_id: projection_predicate.projection_ty.item_def_id,
        .                       substs: tcx.intern_substs(&projection_predicate.projection_ty.substs[1..]),
       43 ( 0.00%)              term: projection_predicate.term,
        .                   }
      301 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> PolyExistentialProjection<'tcx> {
      175 ( 0.00%)      pub fn with_self_ty(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .                   self_ty: Ty<'tcx>,
        .               ) -> ty::PolyProjectionPredicate<'tcx> {
      175 ( 0.00%)          self.map_bound(|p| p.with_self_ty(tcx, self_ty))
      210 ( 0.00%)      }
        .           
        .               pub fn item_def_id(&self) -> DefId {
       70 ( 0.00%)          self.skip_binder().item_def_id
       35 ( 0.00%)      }
        .           }
        .           
        .           /// Region utilities
        .           impl RegionKind {
        .               /// Is this region named by the user?
        .               pub fn has_name(&self) -> bool {
        .                   match *self {
        .                       RegionKind::ReEarlyBound(ebr) => ebr.has_name(),
-- line 1611 ----------------------------------------
-- line 1616 ----------------------------------------
        .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
        .                       RegionKind::ReEmpty(_) => false,
        .                       RegionKind::ReErased => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_late_bound(&self) -> bool {
    1,332 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_placeholder(&self) -> bool {
        .                   matches!(*self, ty::RePlaceholder(..))
        .               }
        .           
        .               #[inline]
        .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
   56,716 ( 0.00%)          match *self {
        .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
        .                       _ => false,
        .                   }
        .               }
        .           
        .               pub fn type_flags(&self) -> TypeFlags {
        .                   let mut flags = TypeFlags::empty();
        .           
   82,415 ( 0.00%)          match *self {
        .                       ty::ReVar(..) => {
        .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
        .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
        .                           flags = flags | TypeFlags::HAS_RE_INFER;
        .                       }
        .                       ty::RePlaceholder(..) => {
        .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
        .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
        .                       ty::ReErased => {
        .                           flags = flags | TypeFlags::HAS_RE_ERASED;
        .                       }
        .                   }
        .           
        .                   debug!("type_flags({:?}) = {:?}", self, flags);
        .           
        .                   flags
    6,222 ( 0.00%)      }
        .           
        .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
        .               /// For example, consider the regions in this snippet of code:
        .               ///
        .               /// ```
        .               /// impl<'a> Foo {
        .               ///      ^^ -- early bound, declared on an impl
        .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
        .           
        .               #[inline(always)]
        .               pub fn flags(&self) -> TypeFlags {
        .                   self.flags
        .               }
        .           
        .               #[inline]
        .               pub fn is_unit(&self) -> bool {
    1,716 ( 0.00%)          match self.kind() {
      239 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_never(&self) -> bool {
   14,453 ( 0.00%)          matches!(self.kind(), Never)
        .               }
        .           
        .               #[inline]
        .               pub fn is_primitive(&self) -> bool {
        .                   self.kind().is_primitive()
        .               }
        .           
        .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_ref(&self) -> bool {
        .                   matches!(self.kind(), Ref(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_ty_var(&self) -> bool {
   45,780 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
   18,926 ( 0.00%)          match self.kind() {
    3,021 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_ty_infer(&self) -> bool {
      159 ( 0.00%)          matches!(self.kind(), Infer(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_phantom_data(&self) -> bool {
        .                   if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
        .               }
        .           
        .               #[inline]
-- line 1770 ----------------------------------------
-- line 1775 ----------------------------------------
        .               /// Returns `true` if this type is a `str`.
        .               #[inline]
        .               pub fn is_str(&self) -> bool {
        .                   *self.kind() == Str
        .               }
        .           
        .               #[inline]
        .               pub fn is_param(&self, index: u32) -> bool {
       93 ( 0.00%)          match self.kind() {
        .                       ty::Param(ref data) => data.index == index,
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_slice(&self) -> bool {
        .                   match self.kind() {
        .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_array(&self) -> bool {
       84 ( 0.00%)          matches!(self.kind(), Array(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_simd(&self) -> bool {
        .                   match self.kind() {
        .                       Adt(def, _) => def.repr.simd(),
        .                       _ => false,
        .                   }
        .               }
        .           
      134 ( 0.00%)      pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
      268 ( 0.00%)          match self.kind() {
        .                       Array(ty, _) | Slice(ty) => ty,
        .                       Str => tcx.mk_mach_uint(ty::UintTy::U8),
        .                       _ => bug!("`sequence_element_type` called on non-sequence value: {}", self),
        .                   }
      134 ( 0.00%)      }
        .           
        .               pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {
        .                   match self.kind() {
        .                       Adt(def, substs) => {
        .                           assert!(def.repr.simd(), "`simd_size_and_type` called on non-SIMD type");
        .                           let variant = def.non_enum_variant();
        .                           let f0_ty = variant.fields[0].ty(tcx, substs);
        .           
-- line 1824 ----------------------------------------
-- line 1861 ----------------------------------------
        .                   match self.kind() {
        .                       Ref(_, _, mutability) => Some(*mutability),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_unsafe_ptr(&self) -> bool {
    1,084 ( 0.00%)          matches!(self.kind(), RawPtr(_))
        .               }
        .           
        .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
        .               #[inline]
        .               pub fn is_any_ptr(&self) -> bool {
        .                   self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
        .               }
        .           
        .               #[inline]
        .               pub fn is_box(&self) -> bool {
   21,934 ( 0.00%)          match self.kind() {
    5,913 ( 0.00%)              Adt(def, _) => def.is_box(),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               /// Panics if called on any type other than `Box<T>`.
       24 ( 0.00%)      pub fn boxed_ty(&self) -> Ty<'tcx> {
       24 ( 0.00%)          match self.kind() {
       60 ( 0.00%)              Adt(def, substs) if def.is_box() => substs.type_at(0),
        .                       _ => bug!("`boxed_ty` is called on non-box type {:?}", self),
        .                   }
       24 ( 0.00%)      }
        .           
        .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
        .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
        .               /// contents are abstract to rustc.)
        .               #[inline]
        .               pub fn is_scalar(&self) -> bool {
       43 ( 0.00%)          matches!(
       98 ( 0.00%)              self.kind(),
        .                       Bool | Char
        .                           | Int(_)
        .                           | Float(_)
        .                           | Uint(_)
        .                           | FnDef(..)
        .                           | FnPtr(_)
        .                           | RawPtr(_)
        .                           | Infer(IntVar(_) | FloatVar(_))
-- line 1908 ----------------------------------------
-- line 1917 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_trait(&self) -> bool {
        .                   matches!(self.kind(), Dynamic(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_enum(&self) -> bool {
      390 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
        .               }
        .           
        .               #[inline]
        .               pub fn is_union(&self) -> bool {
    2,643 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
        .               }
        .           
        .               #[inline]
        .               pub fn is_closure(&self) -> bool {
      600 ( 0.00%)          matches!(self.kind(), Closure(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_generator(&self) -> bool {
      898 ( 0.00%)          matches!(self.kind(), Generator(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_integral(&self) -> bool {
    2,305 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fresh_ty(&self) -> bool {
        .                   matches!(self.kind(), Infer(FreshTy(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fresh(&self) -> bool {
   18,779 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn is_char(&self) -> bool {
        .                   matches!(self.kind(), Char)
        .               }
        .           
        .               #[inline]
-- line 1963 ----------------------------------------
-- line 1967 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_signed(&self) -> bool {
        .                   matches!(self.kind(), Int(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_ptr_sized_integral(&self) -> bool {
       96 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
        .               }
        .           
        .               #[inline]
        .               pub fn has_concrete_skeleton(&self) -> bool {
        .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
        .               }
        .           
        .               /// Returns the type and mutability of `*ty`.
        .               ///
        .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
        .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
    3,082 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
   17,757 ( 0.00%)          match self.kind() {
      324 ( 0.00%)              Adt(def, _) if def.is_box() => {
       28 ( 0.00%)                  Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
        .                       }
   10,816 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
        .                       RawPtr(mt) if explicit => Some(*mt),
        .                       _ => None,
        .                   }
    6,164 ( 0.00%)      }
        .           
        .               /// Returns the type of `ty[i]`.
        .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
      722 ( 0.00%)          match self.kind() {
        .                       Array(ty, _) | Slice(ty) => Some(ty),
        .                       _ => None,
        .                   }
       77 ( 0.00%)      }
        .           
   23,864 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
   11,932 ( 0.00%)          match self.kind() {
    8,949 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
        .                       FnPtr(f) => *f,
        .                       Error(_) => {
        .                           // ignore errors (#54954)
        .                           ty::Binder::dummy(FnSig::fake())
        .                       }
        .                       Closure(..) => bug!(
        .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
        .                       ),
        .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
        .                   }
   26,847 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn is_fn(&self) -> bool {
      384 ( 0.00%)          matches!(self.kind(), FnDef(..) | FnPtr(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fn_ptr(&self) -> bool {
        .                   matches!(self.kind(), FnPtr(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_impl_trait(&self) -> bool {
        .                   matches!(self.kind(), Opaque(..))
        .               }
        .           
        .               #[inline]
        .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
    3,101 ( 0.00%)          match self.kind() {
        .                       Adt(adt, _) => Some(adt),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               /// Iterates over tuple fields.
        .               /// Panics when called on anything but a tuple.
      345 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
      964 ( 0.00%)          match self.kind() {
    1,078 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
        .                       _ => bug!("tuple_fields called on non-tuple"),
        .                   }
      690 ( 0.00%)      }
        .           
        .               /// Get the `i`-th element of a tuple.
        .               /// Panics when called on anything but a tuple.
       62 ( 0.00%)      pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
      124 ( 0.00%)          match self.kind() {
      124 ( 0.00%)              Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
        .                       _ => bug!("tuple_fields called on non-tuple"),
        .                   }
      124 ( 0.00%)      }
        .           
        .               /// If the type contains variants, returns the valid range of variant indices.
        .               //
        .               // FIXME: This requires the optimized MIR in the case of generators.
        .               #[inline]
        .               pub fn variant_range(&self, tcx: TyCtxt<'tcx>) -> Option<Range<VariantIdx>> {
        .                   match self.kind() {
        .                       TyKind::Adt(adt, _) => Some(adt.variant_range()),
-- line 2068 ----------------------------------------
-- line 2078 ----------------------------------------
        .               //
        .               // FIXME: This requires the optimized MIR in the case of generators.
        .               #[inline]
        .               pub fn discriminant_for_variant(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .                   variant_index: VariantIdx,
        .               ) -> Option<Discr<'tcx>> {
      650 ( 0.00%)          match self.kind() {
      260 ( 0.00%)              TyKind::Adt(adt, _) if adt.variants.is_empty() => {
        .                           // This can actually happen during CTFE, see
        .                           // https://github.com/rust-lang/rust/issues/89765.
        .                           None
        .                       }
      130 ( 0.00%)              TyKind::Adt(adt, _) if adt.is_enum() => {
        .                           Some(adt.discriminant_for_variant(tcx, variant_index))
        .                       }
        .                       TyKind::Generator(def_id, substs, _) => {
        .                           Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
        .                       }
        .                       _ => None,
        .                   }
        .               }
        .           
        .               /// Returns the type of the discriminant of this type.
    3,370 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
    1,685 ( 0.00%)          match self.kind() {
    2,584 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
        .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
        .           
        .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
        .                           let assoc_items = tcx.associated_item_def_ids(
        .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
        .                           );
        .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
        .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
        .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
        .           
        .                       ty::Bound(..)
        .                       | ty::Placeholder(_)
        .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
        .                       }
        .                   }
    2,696 ( 0.00%)      }
        .           
        .               /// Returns the type of metadata for (potentially fat) pointers to this type.
        .               pub fn ptr_metadata_ty(
        .                   &'tcx self,
        .                   tcx: TyCtxt<'tcx>,
        .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
        .               ) -> Ty<'tcx> {
        .                   let tail = tcx.struct_tail_with_normalize(self, normalize);
-- line 2151 ----------------------------------------
-- line 2200 ----------------------------------------
        .               /// function converts such a special type into the closure
        .               /// kind. To go the other way, use
        .               /// `tcx.closure_kind_ty(closure_kind)`.
        .               ///
        .               /// Note that during type checking, we use an inference variable
        .               /// to represent the closure kind, because it has not yet been
        .               /// inferred. Once upvar inference (in `rustc_typeck/src/check/upvar.rs`)
        .               /// is complete, that type variable will be unified.
      774 ( 0.00%)      pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {
    1,548 ( 0.00%)          match self.kind() {
    1,548 ( 0.00%)              Int(int_ty) => match int_ty {
        .                           ty::IntTy::I8 => Some(ty::ClosureKind::Fn),
        .                           ty::IntTy::I16 => Some(ty::ClosureKind::FnMut),
        .                           ty::IntTy::I32 => Some(ty::ClosureKind::FnOnce),
        .                           _ => bug!("cannot convert type `{:?}` to a closure kind", self),
        .                       },
        .           
        .                       // "Bound" types appear in canonical queries when the
        .                       // closure type is not yet known
        .                       Bound(..) | Infer(_) => None,
        .           
        .                       Error(_) => Some(ty::ClosureKind::Fn),
        .           
        .                       _ => bug!("cannot convert type `{:?}` to a closure kind", self),
        .                   }
      774 ( 0.00%)      }
        .           
        .               /// Fast path helper for testing if a type is `Sized`.
        .               ///
        .               /// Returning true means the type is known to be sized. Returning
        .               /// `false` means nothing -- could be sized, might not be.
        .               ///
        .               /// Note that we could never rely on the fact that a type such as `[_]` is
        .               /// trivially `!Sized` because we could be in a type environment with a
        .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
        .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
        .               /// this method doesn't return `Option<bool>`.
   58,950 ( 0.00%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
   39,300 ( 0.00%)          match self.kind() {
        .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
        .                       | ty::Uint(_)
        .                       | ty::Int(_)
        .                       | ty::Bool
        .                       | ty::Float(_)
        .                       | ty::FnDef(..)
        .                       | ty::FnPtr(_)
        .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
        .                       | ty::GeneratorWitness(..)
        .                       | ty::Array(..)
        .                       | ty::Closure(..)
        .                       | ty::Never
        .                       | ty::Error(_) => true,
        .           
        .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
        .           
      319 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
        .           
    6,975 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
        .           
        .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
        .           
        .                       ty::Infer(ty::TyVar(_)) => false,
        .           
        .                       ty::Bound(..)
        .                       | ty::Placeholder(..)
        .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
        .                       }
        .                   }
   58,950 ( 0.00%)      }
        .           }
        .           
        .           /// Extra information about why we ended up with a particular variance.
        .           /// This is only used to add more information to error messages, and
        .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
        .           /// may lead to confusing notes in error messages, it will never cause
        .           /// a miscompilation or unsoundness.
        .           ///
        .           /// When in doubt, use `VarianceDiagInfo::default()`
       72 ( 0.00%)  #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]
        .           pub enum VarianceDiagInfo<'tcx> {
        .               /// No additional information - this is the default.
        .               /// We will not add any additional information to error messages.
        .               #[default]
        .               None,
        .               /// We switched our variance because a generic argument occurs inside
        .               /// the invariant generic argument of another type.
        .               Invariant {
-- line 2290 ----------------------------------------
-- line 2295 ----------------------------------------
        .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
        .                   param_index: u32,
        .               },
        .           }
        .           
        .           impl<'tcx> VarianceDiagInfo<'tcx> {
        .               /// Mirrors `Variance::xform` - used to 'combine' the existing
        .               /// and new `VarianceDiagInfo`s when our variance changes.
   22,166 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
        .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
   33,249 ( 0.00%)          match self {
        .                       VarianceDiagInfo::None => other,
        .                       VarianceDiagInfo::Invariant { .. } => self,
        .                   }
   11,083 ( 0.00%)      }
        .           }

9,324,465 ( 0.56%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/server.rs
--------------------------------------------------------------------------------
Ir                 

-- line 28 ----------------------------------------
        .                   (type SourceFile: 'static + Clone;);
        .               (type MultiSpan) =>
        .                   (type MultiSpan: 'static;);
        .               (type Diagnostic) =>
        .                   (type Diagnostic: 'static;);
        .               (type Span) =>
        .                   (type Span: 'static + Copy + Eq + Hash;);
        .               (fn drop(&mut self, $arg:ident: $arg_ty:ty)) =>
   10,422 ( 0.00%)          (fn drop(&mut self, $arg: $arg_ty) { mem::drop($arg) });
        .               (fn clone(&mut self, $arg:ident: $arg_ty:ty) -> $ret_ty:ty) =>
      284 ( 0.00%)          (fn clone(&mut self, $arg: $arg_ty) -> $ret_ty { $arg.clone() });
        .               ($($item:tt)*) => ($($item)*;)
        .           }
        .           
        .           macro_rules! declare_server_traits {
        .               ($($name:ident {
        .                   $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)?;)*
        .               }),* $(,)?) => {
        .                   pub trait Types {
-- line 46 ----------------------------------------
-- line 64 ----------------------------------------
        .                   $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)?;)*
        .               }),* $(,)?) => {
        .                   impl<S: Types> Types for MarkedTypes<S> {
        .                       $(type $name = Marked<S::$name, client::$name>;)*
        .                   }
        .           
        .                   $(impl<S: $name> $name for MarkedTypes<S> {
        .                       $(fn $method(&mut self, $($arg: $arg_ty),*) $(-> $ret_ty)? {
  429,325 ( 0.03%)                  <_>::mark($name::$method(&mut self.0, $($arg.unmark()),*))
        .                       })*
        .                   })*
        .               }
        .           }
        .           with_api!(Self, self_, define_mark_types_impls);
        .           
        .           struct Dispatcher<S: Types> {
        .               handle_store: HandleStore<S>,
-- line 80 ----------------------------------------
-- line 89 ----------------------------------------
        .                   pub trait DispatcherTrait {
        .                       // HACK(eddyb) these are here to allow `Self::$name` to work below.
        .                       $(type $name;)*
        .                       fn dispatch(&mut self, b: Buffer<u8>) -> Buffer<u8>;
        .                   }
        .           
        .                   impl<S: Server> DispatcherTrait for Dispatcher<MarkedTypes<S>> {
        .                       $(type $name = <MarkedTypes<S> as Types>::$name;)*
1,075,300 ( 0.06%)              fn dispatch(&mut self, mut b: Buffer<u8>) -> Buffer<u8> {
        .                           let Dispatcher { handle_store, server } = self;
        .           
  322,590 ( 0.02%)                  let mut reader = &b[..];
  752,710 ( 0.04%)                  match api_tags::Method::decode(&mut reader, &mut ()) {
  521,446 ( 0.03%)                      $(api_tags::Method::$name(m) => match m {
        .                                   $(api_tags::$name::$method => {
        .                                       let mut call_method = || {
  303,110 ( 0.02%)                                  reverse_decode!(reader, handle_store; $($arg: $arg_ty),*);
        .                                           $name::$method(server, $($arg),*)
        .                                       };
        .                                       // HACK(eddyb) don't use `panic::catch_unwind` in a panic.
        .                                       // If client and server happen to use the same `libstd`,
        .                                       // `catch_unwind` asserts that the panic counter was 0,
        .                                       // even when the closure passed to it didn't panic.
        .                                       let r = if thread::panicking() {
        .                                           Ok(call_method())
        .                                       } else {
  525,742 ( 0.03%)                                  panic::catch_unwind(panic::AssertUnwindSafe(call_method))
        .                                               .map_err(PanicMessage::from)
        .                                       };
        .           
        .                                       b.clear();
1,197,644 ( 0.07%)                              r.encode(&mut b, handle_store);
        .                                   })*
        .                               }),*
        .                           }
  645,180 ( 0.04%)                  b
  967,770 ( 0.06%)              }
        .                   }
        .               }
        .           }
        .           with_api!(Self, self_, define_dispatcher_impl);
        .           
        .           pub trait ExecutionStrategy {
        .               fn run_bridge_and_client<D: Copy + Send + 'static>(
        .                   &self,
-- line 133 ----------------------------------------
-- line 145 ----------------------------------------
        .               fn run_bridge_and_client<D: Copy + Send + 'static>(
        .                   &self,
        .                   dispatcher: &mut impl DispatcherTrait,
        .                   input: Buffer<u8>,
        .                   run_client: extern "C" fn(Bridge<'_>, D) -> Buffer<u8>,
        .                   client_data: D,
        .                   force_show_panics: bool,
        .               ) -> Buffer<u8> {
  967,782 ( 0.06%)          let mut dispatch = |b| dispatcher.dispatch(b);
        .           
      120 ( 0.00%)          run_client(
      132 ( 0.00%)              Bridge { cached_buffer: input, dispatch: (&mut dispatch).into(), force_show_panics },
        .                       client_data,
        .                   )
        .               }
        .           }
        .           
        .           // NOTE(eddyb) Two implementations are provided, the second one is a bit
        .           // faster but neither is anywhere near as fast as same-thread execution.
        .           
-- line 164 ----------------------------------------
-- line 263 ----------------------------------------
        .                       *state.lock().unwrap() = State::Res(b);
        .                       join_handle.thread().unpark();
        .                   }
        .           
        .                   join_handle.join().unwrap()
        .               }
        .           }
        .           
      166 ( 0.00%)  fn run_server<
        .               S: Server,
        .               I: Encode<HandleStore<MarkedTypes<S>>>,
        .               O: for<'a, 's> DecodeMut<'a, 's, HandleStore<MarkedTypes<S>>>,
        .               D: Copy + Send + 'static,
        .           >(
        .               strategy: &impl ExecutionStrategy,
        .               handle_counters: &'static client::HandleCounters,
        .               server: S,
        .               input: I,
        .               run_client: extern "C" fn(Bridge<'_>, D) -> Buffer<u8>,
        .               client_data: D,
        .               force_show_panics: bool,
        .           ) -> Result<O, PanicMessage> {
        .               let mut dispatcher =
      204 ( 0.00%)          Dispatcher { handle_store: HandleStore::new(handle_counters), server: MarkedTypes(server) };
        .           
        .               let mut b = Buffer::new();
       46 ( 0.00%)      input.encode(&mut b, &mut dispatcher.handle_store);
        .           
       72 ( 0.00%)      b = strategy.run_bridge_and_client(
        .                   &mut dispatcher,
        .                   b,
        .                   run_client,
        .                   client_data,
        .                   force_show_panics,
        .               );
        .           
       60 ( 0.00%)      Result::decode(&mut &b[..], &mut dispatcher.handle_store)
      120 ( 0.00%)  }
        .           
        .           impl client::Client<fn(crate::TokenStream) -> crate::TokenStream> {
        .               pub fn run<S: Server>(
        .                   &self,
        .                   strategy: &impl ExecutionStrategy,
        .                   server: S,
        .                   input: S::TokenStream,
        .                   force_show_panics: bool,
        .               ) -> Result<S::TokenStream, PanicMessage> {
        4 ( 0.00%)          let client::Client { get_handle_counters, run, f } = *self;
       22 ( 0.00%)          run_server(
        .                       strategy,
        2 ( 0.00%)              get_handle_counters(),
       20 ( 0.00%)              server,
        .                       <MarkedTypes<S> as Types>::TokenStream::mark(input),
        .                       run,
        .                       f,
        .                       force_show_panics,
        .                   )
        .                   .map(<MarkedTypes<S> as Types>::TokenStream::unmark)
        .               }
        .           }
-- line 322 ----------------------------------------
-- line 325 ----------------------------------------
        .               pub fn run<S: Server>(
        .                   &self,
        .                   strategy: &impl ExecutionStrategy,
        .                   server: S,
        .                   input: S::TokenStream,
        .                   input2: S::TokenStream,
        .                   force_show_panics: bool,
        .               ) -> Result<S::TokenStream, PanicMessage> {
       20 ( 0.00%)          let client::Client { get_handle_counters, run, f } = *self;
      130 ( 0.00%)          run_server(
        .                       strategy,
       10 ( 0.00%)              get_handle_counters(),
      100 ( 0.00%)              server,
        .                       (
        .                           <MarkedTypes<S> as Types>::TokenStream::mark(input),
        .                           <MarkedTypes<S> as Types>::TokenStream::mark(input2),
        .                       ),
        .                       run,
        .                       f,
        .                       force_show_panics,
        .                   )
-- line 345 ----------------------------------------

  242,417 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/server.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs
--------------------------------------------------------------------------------
Ir                 

-- line 21 ----------------------------------------
        .           
        .           pub(super) trait DecodeMut<'a, 's, S>: Sized {
        .               fn decode(r: &mut Reader<'a>, s: &'s mut S) -> Self;
        .           }
        .           
        .           macro_rules! rpc_encode_decode {
        .               (le $ty:ty) => {
        .                   impl<S> Encode<S> for $ty {
  573,128 ( 0.03%)              fn encode(self, w: &mut Writer, _: &mut S) {
       72 ( 0.00%)                  w.extend_from_array(&self.to_le_bytes());
  716,359 ( 0.04%)              }
        .                   }
        .           
        .                   impl<S> DecodeMut<'_, '_, S> for $ty {
       88 ( 0.00%)              fn decode(r: &mut Reader<'_>, _: &mut S) -> Self {
        .                           const N: usize = ::std::mem::size_of::<$ty>();
        .           
      110 ( 0.00%)                  let mut bytes = [0; N];
   99,775 ( 0.01%)                  bytes.copy_from_slice(&r[..N]);
  380,670 ( 0.02%)                  *r = &r[N..];
        .           
      110 ( 0.00%)                  Self::from_le_bytes(bytes)
       44 ( 0.00%)              }
        .                   }
        .               };
        .               (struct $name:ident { $($field:ident),* $(,)? }) => {
        .                   impl<S> Encode<S> for $name {
        .                       fn encode(self, w: &mut Writer, s: &mut S) {
        .                           $(self.$field.encode(w, s);)*
        .                       }
        .                   }
-- line 51 ----------------------------------------
-- line 55 ----------------------------------------
        .                           $name {
        .                               $($field: DecodeMut::decode(r, s)),*
        .                           }
        .                       }
        .                   }
        .               };
        .               (enum $name:ident $(<$($T:ident),+>)? { $($variant:ident $(($field:ident))*),* $(,)? }) => {
        .                   impl<S, $($($T: Encode<S>),+)?> Encode<S> for $name $(<$($T),+>)? {
1,678,346 ( 0.10%)              fn encode(self, w: &mut Writer, s: &mut S) {
        .                           // HACK(eddyb): `Tag` enum duplicated between the
        .                           // two impls as there's no other place to stash it.
        .                           #[allow(non_upper_case_globals)]
        .                           mod tag {
        .                               #[repr(u8)] enum Tag { $($variant),* }
        .           
        .                               $(pub const $variant: u8 = Tag::$variant as u8;)*
        .                           }
        .           
  937,786 ( 0.06%)                  match self {
  204,949 ( 0.01%)                      $($name::$variant $(($field))* => {
    7,584 ( 0.00%)                          tag::$variant.encode(w, s);
  206,837 ( 0.01%)                          $($field.encode(w, s);)*
       24 ( 0.00%)                      })*
        .                           }
1,228,731 ( 0.07%)              }
        .                   }
        .           
        .                   impl<'a, S, $($($T: for<'s> DecodeMut<'a, 's, S>),+)?> DecodeMut<'a, '_, S>
        .                       for $name $(<$($T),+>)?
        .                   {
  468,160 ( 0.03%)              fn decode(r: &mut Reader<'a>, s: &mut S) -> Self {
        .                           // HACK(eddyb): `Tag` enum duplicated between the
        .                           // two impls as there's no other place to stash it.
        .                           #[allow(non_upper_case_globals)]
        .                           mod tag {
        .                               #[repr(u8)] enum Tag { $($variant),* }
        .           
        .                               $(pub const $variant: u8 = Tag::$variant as u8;)*
        .                           }
        .           
  407,900 ( 0.02%)                  match u8::decode(r, s) {
        .                               $(tag::$variant => {
   14,244 ( 0.00%)                          $(let $field = DecodeMut::decode(r, s);)*
  321,197 ( 0.02%)                          $name::$variant $(($field))*
    7,104 ( 0.00%)                      })*
        .                               _ => unreachable!(),
        .                           }
  799,601 ( 0.05%)              }
        .                   }
        .               }
        .           }
        .           
        .           impl<S> Encode<S> for () {
        .               fn encode(self, _: &mut Writer, _: &mut S) {}
        .           }
        .           
        .           impl<S> DecodeMut<'_, '_, S> for () {
        .               fn decode(_: &mut Reader<'_>, _: &mut S) -> Self {}
        .           }
        .           
        .           impl<S> Encode<S> for u8 {
   45,588 ( 0.00%)      fn encode(self, w: &mut Writer, _: &mut S) {
       24 ( 0.00%)          w.push(self);
   37,944 ( 0.00%)      }
        .           }
        .           
        .           impl<S> DecodeMut<'_, '_, S> for u8 {
        .               fn decode(r: &mut Reader<'_>, _: &mut S) -> Self {
1,673,266 ( 0.10%)          let x = r[0];
  929,675 ( 0.06%)          *r = &r[1..];
        .                   x
        .               }
        .           }
        .           
        .           rpc_encode_decode!(le u32);
        .           rpc_encode_decode!(le usize);
        .           
        .           impl<S> Encode<S> for bool {
        .               fn encode(self, w: &mut Writer, s: &mut S) {
    7,002 ( 0.00%)          (self as u8).encode(w, s);
        .               }
        .           }
        .           
        .           impl<S> DecodeMut<'_, '_, S> for bool {
        .               fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
    4,668 ( 0.00%)          match u8::decode(r, s) {
        .                       0 => false,
        .                       1 => true,
        .                       _ => unreachable!(),
        .                   }
        .               }
        .           }
        .           
        .           impl<S> Encode<S> for char {
        .               fn encode(self, w: &mut Writer, s: &mut S) {
    8,960 ( 0.00%)          (self as u32).encode(w, s);
        .               }
        .           }
        .           
        .           impl<S> DecodeMut<'_, '_, S> for char {
        .               fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
        .                   char::from_u32(u32::decode(r, s)).unwrap()
        .               }
        .           }
        .           
        .           impl<S> Encode<S> for NonZeroU32 {
       72 ( 0.00%)      fn encode(self, w: &mut Writer, s: &mut S) {
  367,107 ( 0.02%)          self.get().encode(w, s);
       24 ( 0.00%)      }
        .           }
        .           
        .           impl<S> DecodeMut<'_, '_, S> for NonZeroU32 {
       66 ( 0.00%)      fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
      154 ( 0.00%)          Self::new(u32::decode(r, s)).unwrap()
       44 ( 0.00%)      }
        .           }
        .           
        .           impl<S, A: Encode<S>, B: Encode<S>> Encode<S> for (A, B) {
      110 ( 0.00%)      fn encode(self, w: &mut Writer, s: &mut S) {
        .                   self.0.encode(w, s);
        .                   self.1.encode(w, s);
        .               }
        .           }
        .           
        .           impl<'a, S, A: for<'s> DecodeMut<'a, 's, S>, B: for<'s> DecodeMut<'a, 's, S>> DecodeMut<'a, '_, S>
        .               for (A, B)
        .           {
       50 ( 0.00%)      fn decode(r: &mut Reader<'a>, s: &mut S) -> Self {
      140 ( 0.00%)          (DecodeMut::decode(r, s), DecodeMut::decode(r, s))
       30 ( 0.00%)      }
        .           }
        .           
        .           rpc_encode_decode!(
        .               enum Bound<T> {
        .                   Included(x),
        .                   Excluded(x),
        .                   Unbounded,
        .               }
-- line 192 ----------------------------------------
-- line 204 ----------------------------------------
        .                   Ok(x),
        .                   Err(e),
        .               }
        .           );
        .           
        .           impl<S> Encode<S> for &[u8] {
        .               fn encode(self, w: &mut Writer, s: &mut S) {
        .                   self.len().encode(w, s);
   53,232 ( 0.00%)          w.write_all(self).unwrap();
        .               }
        .           }
        .           
        .           impl<'a, S> DecodeMut<'a, '_, S> for &'a [u8] {
        .               fn decode(r: &mut Reader<'a>, s: &mut S) -> Self {
        .                   let len = usize::decode(r, s);
        .                   let xs = &r[..len];
   47,100 ( 0.00%)          *r = &r[len..];
        .                   xs
        .               }
        .           }
        .           
        .           impl<S> Encode<S> for &str {
   53,232 ( 0.00%)      fn encode(self, w: &mut Writer, s: &mut S) {
        .                   self.as_bytes().encode(w, s);
   66,540 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, S> DecodeMut<'a, '_, S> for &'a str {
   15,696 ( 0.00%)      fn decode(r: &mut Reader<'a>, s: &mut S) -> Self {
   31,392 ( 0.00%)          str::from_utf8(<&[u8]>::decode(r, s)).unwrap()
   31,392 ( 0.00%)      }
        .           }
        .           
        .           impl<S> Encode<S> for String {
        .               fn encode(self, w: &mut Writer, s: &mut S) {
   53,232 ( 0.00%)          self[..].encode(w, s);
        .               }
        .           }
        .           
        .           impl<S> DecodeMut<'_, '_, S> for String {
        .               fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
   66,540 ( 0.00%)          <&str>::decode(r, s).to_string()
        .               }
        .           }
        .           
        .           /// Simplified version of panic payloads, ignoring
        .           /// types other than `&'static str` and `String`.
        .           pub enum PanicMessage {
        .               StaticStr(&'static str),
        .               String(String),
-- line 253 ----------------------------------------

1,637,146 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../elf/dl-tls.c
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/../sysdeps/x86_64/tls_get_addr.S
  ./elf/dl-lookup.c
  ./elf/do-rel.h
  ./malloc/malloc.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
613,429,994 (36.53%)  events annotated

